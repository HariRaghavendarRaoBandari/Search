6
1
0
2

 
r
a

M
7

 

 
 
]

M
D
.
s
c
[
 
 

1
v
3
8
9
1
0

.

3
0
6
1
:
v
i
X
r
a

Graph Theoretic Investigations

on IneÔ¨Éciencies in Network Models

Pietro Cenciarelli, Daniele Gorla and Ivano Salvo
Sapienza University of Rome, Dpt. of Computer Science

{cenciarelli,gorla,salvo} @ di.uniroma1.it

Abstract. We consider network models where information items Ô¨Çow from a
source to a sink node. We start with a model where routing is constrained by
energy available on nodes in Ô¨Ånite supply (like in Smartdust) and eÔ¨Éciency is
related to energy consumption. We characterize graph topologies ensuring that
every saturating Ô¨Çow under every energy-to-node assignment is maximum and
provide a polynomial-time algorithm for checking this property. We then con-
sider the standard Ô¨Çow networks with capacity on edges, where again eÔ¨Éciency
is related to maximality of saturating Ô¨Çows, and a traÔ¨Éc model for selÔ¨Åsh rout-
ing, where eÔ¨Éciency is related to latency at a Wardrop equilibrium. Finally, we
show that all these forms of ineÔ¨Éciency yield diÔ¨Äerent classes of graphs (apart
from the acyclic case, where the last two forms generate the same class). Interest-
ingly, in all cases ineÔ¨Écient graphs can be made eÔ¨Écient by removing edges; this
resembles a well-known phenomenon, called Braess‚Äôs paradox.

1 Introduction

Through the years, several formal models have emerged for studying network design
in terms of network traÔ¨Éc, protocols, energy consumption, and so on (see [4,16,20,13],
just to cite a few). Our investigation of energy eÔ¨Éciency and load balancing of multi-
hop communication in ad-hoc networks started in [6], where we considered a simple
model, called depletable channels, in which networks are oriented graphs with nodes
equipped with a natural number representing depletable charge, as in Smartdust [24].

To better understand our model, consider a scenario in which four communication
devices are located in a landscape (Fig. 1(a)). The devices may have diÔ¨Äerent commu-
nication radii, e.g. because of geographical reasons or because of their settings (a larger
radius requires more energy to perform a communication). Thus, node reachability is
not symmetric: in our example, s can reach (i.e., send information to) u and v, but not
vice versa. Such a scenario can be very naturally modeled via a directed graph, where
vertices correspond to communication devices and an edge is placed between x and y
if y falls within the communication circle centered in x. In our example, the resulting
graph is given in Fig. 1(b). To simplify reasoning, we will always assume that informa-
tion Ô¨Çows from a single source (a device that does not receive information from anyone
else ‚Äì s in our example) to a single destination (a device that does not send information
to anyone else ‚Äì t in our example).

Devices have a depletable amount of energy that is consumed throughout their life;
moreover, they are just information forwarders, so they can only send or receive infor-
mation. Usually, a device consumes less energy when it receives than when it sends;
moreover, energy consumption is proportional to the length of the message exchanged.

(a)

s

u

t

v

(b)

s

=‚ë¢‚ë¢‚ë¢‚ë¢‚ë¢‚ë¢
!‚ùâ‚ùâ‚ùâ‚ùâ‚ùâ‚ùâ

u

v

!‚ùà‚ùà‚ùà‚ùà‚ùà‚ùà
=‚ë£‚ë£‚ë£‚ë£‚ë£‚ë£

t

Fig. 1. (a) Four communication devices with their communication radius: (b) the associated di-
rected graph.

This is modeled in our setting by slotting both information and energy, and by assum-
ing that sending one information unit consumes one energy unit. By contrast, receiving
information does not lead to any consumption. Furthermore, energy can only decrease
during the life of the system; so, we do not model any form of recharge. This implies
that every system has a lifetime: after sending a certain amount of information from s
to t, all the intermediate nodes (or at least all those in a cut) will eventually die, due
to lack of energy. The resulting system is then called dead and the Ô¨Çow of information
leading to it will be called inhibiting.

Aimed at capturing an abstract notion of communication service provided by a net-
work, in [6] we introduced an equivalence on networks that equates two networks if
and only if they have identical maximum and minimum inhibiting Ô¨Çow (there, we also
proved that this corresponds to what in the theory of concurrency is called trace equiv-
alence). Networks in which the minimum inhibiting Ô¨Çow is strictly less than the maxi-
mum Ô¨Çow can be regarded as ineÔ¨Écient, because an arbitrary routing may cause unnec-
essary depletion of energy. As in [13], we consider Ô¨Çows not controlled by a planning
entity and thus any legal Ô¨Çow can take place. We call weak those graph that, for some
charge assignment to nodes, the minimum inhibiting Ô¨Çow is strictly less than the maxi-
mum Ô¨Çow. For example, the channel whose topology is given by the graph in Fig.1(b)
and where u and v have charge 1 (usually, we assume that s and t have ‚Äôbig‚Äô charge)
can deliver at most 2 information items. However, it is also possible that a single unit
of information inhibits the channel, if it takes the ‚Äôwrong‚Äô way (viz., s u v t). Thus, the
graph in Fig.1(b) is weak.

As shown in this paper, network performance can be improved by removing edges
belonging to st-paths passing at least twice through a minimal vertex separator (that is
a minimal set of vertices whose removal disconnects the source from the sink). In our
example, removing the edge u ‚Üí v leads to a non-weak graph. This somehow resembles
a counterintuitive but well-known situation in the setting of selÔ¨Åsh routing in traÔ¨Éc
networks, called Braess‚Äôs paradox [2,5]. Braess‚Äôs paradox occurs when the equilibrium
cost may be reduced by raising the cost of an edge or, equivalently, by removing such
an edge. This form of ineÔ¨Éciency is known as vulnerability [18,15]. Indeed, the work
presented here started with the empirical observation that all natural examples of weak
(acyclic) graphs turned out to be vulnerable. As this paper shows, this is not incidental.



!
=
!
=
Both depletable channels and traÔ¨Éc networks have strong similarities with the stan-
dard model of Ô¨Çow networks [1]. In particular, depletable channels can be easily trans-
lated into standard (edge-capacitated) Ô¨Çow networks. Usually, this translation is pain-
less, as it preserves all the standard notions in Ô¨Çow networks, such as maximum and
minimum inhibiting Ô¨Çow. Interestingly, if we deÔ¨Åne as edge-weak those graphs that, for
some assignment of capacities to edges, admit a non-maximum inhibiting Ô¨Çow, it turns
out that weakness and edge-weakness do not coincide.

In this paper, we compare these three kinds of ineÔ¨Éciency from a graph-theoretical

perspective. Our main contributions are:

1. In Section 2, we characterize weak graphs as those graphs with an st-path that

passes twice through the same minimal vertex separator.

2. In Section 3, we then show that weakness can be checked in polynomial time.
3. In Section 4, we characterize edge-weak graphs as those graphs with an st-path
that passes twice through the same cut-set (i.e., the set of edges that connect the two
blocks of a cut), for a proper kind of cut that we call connected.

4. In Section 5 we characterize vulnerable graphs as those graphs containing a sub-
graph homeomorphic to Fig.1(b). This extends previous results of [15,7] to arbitrary
directed graphs and completely solves a question left open in [18]. Indeed, in [15] the
characterization holds only for undirected graphs, whereas in [7] the result holds only
for a speciÔ¨Åc class of directed graphs (that they call irredundant).

5. Finally, in Section 6, we relate all the above mentioned class of graphs. In the
general case, vulnerability implies edge-weakness. Moreover, vulnerable graphs always
contain an acyclic weak subgraph. This suggests that the core reason that makes a graph
vulnerable is indeed its weak subgraphs. If we restrict our attention to DAGs, weakness
implies both vulnerability and edge-weakness. These two classes coincide and they
coincide with the class of graphs that are not series-parallel [17].

Due to space constraints, all proofs are relegated to the Appendix.

2 IneÔ¨Éciency in Depletable Channels: Weakness

A depletable channel is a graph G equipped with a function Œ∑ associating with each
node a non-negative integer representing its depletable charge. Throughout the paper,
we only consider directed simple st-graphs, that are directed graphs without self-loops
and parallel edges, with a Ô¨Åxed source vertex s and sink vertex t. When no confusion
arises, we write just Œ∑ for a channel (G, Œ∑) and call G its underlying graph.

Charges may change as result of information passing through the net. Each item
passing through a node consumes one unit of the node‚Äôs charge, thus leaving the channel
in a state of lower energy. We also assume that the charge of the source and of the sink
are always large enough to be irrelevant (say, ‚àû for simplicity).

An st-path (just path from now on) in a graph is a (possibly cyclic) directed walk
from s to t. The set P(Œ∑) is the set of all paths of Œ∑. Since we only consider source-to-
sink paths, we can assume that every vertex belongs at least to one of such paths. A
Ô¨Çow for Œ∑ is a function œÜ : P(Œ∑) ‚Üí N such that œÜ(v) ‚â§ Œ∑(v), for every v ‚àà V. Here, œÜ(v)
denotes the amount of v‚Äôs charge consumed by œÜ, i.e., œÜ(v) = Pp‚ààP(Œ∑) rvp ¬∑ œÜ(p), where
rvp is the number of times in which node v is repeated in the path p (0, if v < p). With
respect to standard Ô¨Çow models, we admit a positive Ô¨Çow over cycles because in our

(1)

‚ó¶

/ 2

9rrrr
%‚ñ≤‚ñ≤‚ñ≤‚ñ≤

1

1

%‚ñ≤‚ñ≤‚ñ≤‚ñ≤
9rrrr

2

/ ‚ó¶

(2)

‚ó¶

/ 2

Fig. 2. Two channels

7‚ô£‚ô£‚ô£‚ô£‚ô£
'‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ

1

1

'‚óÜ‚óÜ‚óÜ‚óÜ‚óÜ
7‚ô£‚ô£‚ô£‚ô£‚ô£

2

/ ‚ó¶

model each node knows its neighborhood only. Without global information about the
net, routing can easily lead to cyclic paths.

The value of œÜ is Pp‚ààP(Œ∑) œÜ(p). We denote by max Œ∑ the maximum value of a Ô¨Çow for
Œ∑. We call Œ∑ a dead channel if max Œ∑ = 0. The residual of a channel (G, Œ∑) after a Ô¨Çow œÜ
is a channel with the same underlying graph G and with a charge function Œ∑‚Ä≤ such that
Œ∑‚Ä≤(v) = Œ∑(v) ‚àí œÜ(v), for every vertex v. A Ô¨Çow œÜ is said to inhibit Œ∑ if the residual of Œ∑
after œÜ is dead. We denote by min Œ∑ the smallest value of an inhibiting Ô¨Çow in Œ∑.

The form of ineÔ¨Éciency in this network model is given by the following deÔ¨Ånition.

DeÔ¨Ånition 1. A graph G is weak if min Œ∑ , max Œ∑, for some channel Œ∑ whose underlying
graph is G.

Two typical examples of channels are depicted in Fig. 2, where we depict the charge
of a node in place of its name and use ‚Äô‚ó¶‚Äô to denote a large-enough charge. Here, chan-
nel (1) is not weak, since every routing of messages always ensures the delivery of 2
information units (remember that every information unit consumes one charge unit of
every traversed node). By contrast, channel (2) is weak because there is also a inhibiting
Ô¨Çow that only delivers 1 unit (by sending the information unit along the path ‚ó¶ 2 1 1 2 ‚ó¶).
Weakness can be characterized in terms of the existence of a walk that passes at least
twice through a minimal st-separator (or mvs, for minimal vertex separator, assuming s
and t Ô¨Åxed). An mvs [12] is a minimal set of vertices whose removal disconnects s and
t.

Theorem 1. A graph is weak if and only if there exists an mvs T and a directed walk
a { b with a, b ‚àà T .

One direction is proved by assigning charge 1 to all nodes in T and a big value to
the remaining ones; we then exploit a { b to saturate T with a Ô¨Çow of value smaller
than max Œ∑. For the converse, the existence of an inhibiting Ô¨Çow of value smaller than
the maximum implies existence of an mvs saturated by this Ô¨Çow; this can only happen
if there is a path passing twice through the mvs.

3 Checking Weakness

In [6], we proved that, given a graph and a charge Œ∑ to its nodes, it is NP-hard to
determine whether minŒ∑ , maxŒ∑. By contrast, we show in the following that checking
weakness is a polynomial-time problem.

Stemming from Theorem 1, a trivial algorithm to determine if a graph is weak is to
generate all mvs‚Äôs and, for each of them, check if there exists a walk that touches the
mvs twice. Unfortunately, the number of mvs‚Äôs in a graph can be exponential in |V| [14].
However, as we now show, it is enough to examine at most |V|2 mvs‚Äôs.

%
/
9
%
/
9
'


/
7
'
/
7
s

=‚ë£‚ë£‚ë£‚ë£‚ë£
!‚ùá‚ùá‚ùá‚ùá‚ùá

a

p

!‚ùà‚ùà‚ùà‚ùà‚ùà
=‚ë§‚ë§‚ë§‚ë§‚ë§

b

c

u

=‚ë£‚ë£‚ë£‚ë£‚ë£
!‚ùá‚ùá‚ùá‚ùá‚ùá
6‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•‚ô•

t

s

6‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†
 ‚ùÜ‚ùÜ‚ùÜ‚ùÜ‚ùÜ

p

a

a1

/ b

a2

!‚ùà‚ùà‚ùà‚ùà‚ùà
6‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†‚ô†

t

Fig. 3. A graph with a complete chain not
containing a speciÔ¨Åc critical node

Fig. 4. A graph with a complete chain not
containing any critical mvs

From now on, we will use the following terminology, inspired by Theorem 1. A
walk a { b is critical if there exists an mvs T such that a, b ‚àà T . In such a case, we
call b a critical node and T a critical (or even b-critical) mvs.

We say that a node u is covered by a set of nodes A, notation u ‚äë A, if all walks
starting from u to the sink t contain at least a node v ‚àà A. A set of nodes A is covered
by a set of nodes A‚Ä≤, notation A ‚äë A‚Ä≤, if u ‚äë A‚Ä≤, for all u ‚àà A. A set of nodes A precedes
a node u, notation A (cid:22) u, if all walks starting from the source s to the node u contain
at least a node v ‚àà A. A set of nodes A precedes a set of nodes A‚Ä≤, notation A (cid:22) A‚Ä≤, if
A (cid:22) u, for all u ‚àà A‚Ä≤. Since mvs‚Äôs are minimal sets of st-separators, the following claim
can be easily proved.

Lemma 1. If A (cid:22) a or a ‚äë A, then A ‚à™ {a} * T , for every mvs T .

Moreover, it is well-known [9] that the set of mvs‚Äôs of a graph is partially ordered
w.r.t. ‚äë, with minimum element {s} and maximum element {t}. A sequence of mvs‚Äôs
T0, T1, . . . , Tn is a chain if, for all i (0 ‚â§ i < n), we have Ti ‚äè Ti+1; it is complete if
T0 = {s}, Tn = {t} and Ti ‚äë T ‚äë Ti+1 implies T = Ti or T = Ti+1, for every mvs T .

From [21], it follows that a complete chain contains at most |V| mvs‚Äôs. Following
the idea of Ô¨Ånding a critical mvs and a critical walk by examining a complete chain
of mvs‚Äôs, we Ô¨Årst observe that a speciÔ¨Åc critical node may never appear in a complete
chain. To see this, consider the graph depicted in Fig. 3. In the mvs {a, b, c}, b is a
critical node, but it does not appear in the complete chain {s}, {a, p}, {u, p}, {u, c}, {t} that,
however, contains the critical node u. This is not incidental, as the following theorem
states.

Theorem 2. If the graph is weak, then in every complete chain of mvs‚Äôs T0, T1, . . . , Tn
there exists at least a Ti that contains a critical node.

Unfortunately, Theorem 2 is not enough to conclude that any complete chain of
mvs‚Äôs in a weak graph contains at least a critical mvs. To see this, let us consider the
graph of Fig. 4: it is weak, as the critical mvs {a, b} testiÔ¨Åes. However, if we consider the
complete chain C‚Ä≤ = {s}, {a, p}, {a1, a2, p}, {a2, b}, {t}, we cannot Ô¨Ånd any critical mvs;
C‚Ä≤ just contains the non-critical mvs {a2, b} that contains the critical node b.

Theorem 3 ensures that we can check if any node b is critical (and hence check the
existence of a b-critical mvs) by considering any b-minimal mvs, i.e., an mvs T such
that b ‚àà T and b < T ‚Ä≤, for every mvs T ‚Ä≤ ‚äè T .

Theorem 3. If b is a critical node, then all b-minimal mvs‚Äôs are b-critical.

In the example of Fig. 4, it suÔ¨Éces to consider the mvs {a2, b}: its b-minimal prede-

cessor (w.r.t. ‚äè) is {a, b}, that is b-critical.

/
/
!
!
=
!
=
/
/
=
6
/
/


!
6
 


/
6
T ‚Ä≤ ‚Üê immediateMvsRight(T )
if T ‚Ä≤ is critical then

Algorithm 1 Checking Weakness
Input: A directed st‚Äìgraph G = (V, E, s, t), s is the source and t is the sink
function weakOrNotWeak(G)
1. T ‚Üê {s};
2. while T , {t} do
3.
4.
5.
6.
7.
8.
9.
10.
11. return not Weak

return Weak
for all b ‚àà T ‚Ä≤ \ T do

T ‚àó = minimalMvs(T ‚Ä≤, b)
if T ‚àó is critical then

return Weak

T ‚Üê T ‚Ä≤

Algorithm 2 A b-minimal mvs smaller (w.r.t. ‚äè) than T
Input: An mvs T , a node b ‚àà T
function minimalMvs(T, b)
1. A ‚Üê {u ‚àà T | (T ‚à™ pred(u)) \ {b} (cid:14) b}
2. while A , ‚àÖ do
3.
4.
5.
6. return T

choose u ‚àà A
T ‚Üê Tu
A ‚Üê {u ‚àà T | (T ‚à™ pred(u)) \ {b} (cid:14) b}

Theorems 2 and 3 are the main ingredients of our polynomial algorithm for check-
ing graph weakness (function weakOrNotWeak in Alg. 1). Our algorithm generates a
complete chain of mvs‚Äôs, that contains at most |V| mvs‚Äôs. By Theorem 2, we know that
the graph is weak if and only if at some point an mvs with a critical node appears in the
chain. Thus, for every new node b appeared in all such mvs‚Äôs, it computes a b-minimal
mvs (by backward generating another complete chain of at most |V| mvs‚Äôs) and it checks
if it is b-critical. Thanks to Theorem 3, this suÔ¨Éces to conclude.

Function immediateMvsRight adapts the work in [21] to build a complete chain of
mvs‚Äôs, generated from the bottom mvs T = {s} by iteratively proceeding as follows.
Given an mvs T , pick up any vertex u ‚àà T and replace it with its immediate successors,
denoted by succ(u) = {v ‚àà V : u ‚Üí v ‚àà E}. The set S = (T \ {u}) ‚à™succ(u) is a separator,
though not necessarily minimal: some vertices could be covered by other ones. Thus,
we consider T u = S \ It(S ), where It(S ) contains all the vertices v such that v ‚äè S \ {v};
in particular, we always have u ‚àà It(S ). As shown in [21], T u is an mvs and T ‚äè T u.

As an example, let us consider the mvs T = {a, p} in Fig. 3: (T \ {a}) ‚à™ succ(a) =

{b, u, p} is not minimal. T a is {u, p}, since the node b is covered by u.

The mvs T u is not necessarily an immediate successor (w.r.t. ‚äè) of T . To obtain an
immediate successor of T (and thus build a complete chain), it suÔ¨Éces to consider the
mvs T ‚Ä≤ = minu‚ààT T u, where the minimum is calculated w.r.t. ‚äè. Indeed, [21] shows that
all the immediate successors of an mvs T can be obtained as T u, for some u ‚àà T .

As an example, let us consider again the graph in Fig. 3 and let T be the mvs {a, b, c}.

We have that T a = T b = {u, c} ‚äè T c = {t}.

A b-minimal predecessor (w.r.t. ‚äè) of T is computed by function minimalMvs in
Alg. 2. Given an mvs T and a node u ‚àà T , Tu = (T ‚à™ pred(u)) \ Is(T ‚à™ pred(u)) is the
analogue of T u in the backward direction, where pred(u) = {v ‚àà V : v ‚Üí u ‚àà E} is the
set of immediate predecessors of u. The correctness of function minimalMvs is given
by the following result.

Theorem 4. T is b-minimal if and only if (T ‚à™ pred(u)) \ {b} (cid:22) b, for every u ‚àà T .

Analysis First of all, we can calculate the reachability relation for every pair of vertices
in O(|V|3), to Ô¨Åll in a |V| √ó |V| binary matrix that allows us to check whether T is critical
in O(|V|2) in Alg. 1. Second, relations T ‚Ä≤ ‚äë T and T (cid:22) T ‚Ä≤ (in immediateMvsRight and
minimalMvs) can be calculated in O(|V|2) by calculating the connected component C
of the sink (for ‚äë) or of the source (for (cid:22)) in the subgraph G[V \ T ]; the desired relation
holds if and only if T ‚Ä≤‚à©C = ‚àÖ. Third, given T and u ‚àà T , the mvs T u can be calculated in
O(|V|2), by following [21]: Ô¨Årst, calculate the connected component C of the sink in the
subgraph G[V \ (T ‚à™succ(u))]; then, It(T ‚à™succ(u)) is the subset of T ‚à™succ(u) without
an immediate successor in C. Finally, Tu in Alg. 2 can be computed symmetrically, by
considering the connected component of the source in G[V \ (T ‚à™ pred(u))] and by
excluding all vertices without an immediate predecessor in C.

Thus, function immediateMvsRight costs O(|V|3) since it computes at most |V|
mvs‚Äôs to Ô¨Ånd minu‚ààT T u. Function minimalMvs in Alg. 2 costs O(|V|4): we need O(|V|)
iterations of the while of line 2 and each iteration costs O(|V|3), since, for every u ‚àà T ,
we have to check relation (cid:22).

Finally, Alg. 1 costs O(|V|5), since function minimalMvsis invoked at most once for
each node in V. Indeed, if b appears as a new node in T ‚Ä≤ \ T (line 6 of Alg. 1), it cannot
have already appeared in a T ‚Ä≤‚Ä≤ ‚äè T ‚Ä≤ of the chain, otherwise there would exist a walk
from b to b and hence T ‚Ä≤‚Ä≤ (as well as T ‚Ä≤) would be critical and consequently function
weakOrNotWeak would have terminated in line 5 returning Weak as a result.

4 IneÔ¨Éciency in Flow Networks: Edge-weakness
Interestingly, the notion of weakness strongly depends on the fact that we assign charges
to nodes, and not capacities to edges. Indeed, in several settings the two models are
interchangeable [1]. However, the analogous of the notion of weakness in the standard
Ô¨Çow network model with capacities on edges, that we call edge-weakness, does not
correspond to weakness.

We Ô¨Årst brieÔ¨Çy recall some standard notions of Ô¨Çow networks [1]. First, we denote
with out(u) the set of all edges whose Ô¨Årst component is u and in(u) the set of all edges
whose second component is u. A Ô¨Çow network is a graph G = (V, E) endowed with a
capacity function {ce}e‚ààE, assigning a non-negative number (ce ‚àà R+) to every edge. A
Ô¨Çow in such a network is a function f : E ‚Üí R+ such that

‚Äì ‚àÄe ‚àà E. 0 ‚â§ f (e) ‚â§ ce, and
‚Äì ‚àÄu ‚àà V \ {s, t}. Pe‚ààin(u) f (e) = Pe‚ààout(u) f (e).
The value of a Ô¨Çow f , written | f |, is deÔ¨Åned as Pe‚ààout(s) f (e) and it turns out to be equal
to Pe‚ààin(t) f (e).

A Ô¨Çow f saturates a network if, for every path, there exists an edge e belonging
to that path such that f (e) = ce. The standard problem in Ô¨Çow networks is to Ô¨Ånd
a saturating Ô¨Çow with maximum value. By mimicking Def. 1, we give the following
deÔ¨Ånition of edge-weak graph:

DeÔ¨Ånition 2. A graph is edge-weak if there exists a capacity assignment to edges such
that the resulting Ô¨Çow network admits a non-maximum saturating Ô¨Çow.

In general, we can calculate a Ô¨Çow in a network by non-deterministically choosing
paths and saturating them. It is easy to see that such an algorithm always calculates a
maximum Ô¨Çow if and only if the graph is not edge-weak. In this sense, edge-weakness
can be considered another form of ineÔ¨Éciency in network design: to calculate a maxi-
mum Ô¨Çow, we cannot use a simple iterated DFS but we need more complex algorithms
(see [1]). Something similar happens in [3]. In that model, edges are also equipped
with a cost function and the problem is to Ô¨Ånd a Ô¨Çow of a given value (between 0 and
the maximum) but with the lowest possible cost. The authors prove that a greedy al-
gorithm always calculates the minimum cost Ô¨Çow if and only if the underlying graph
is series-parallel. Incidentally, we will prove that the notion of series-parallel and non-
edge-weakness coincide for acyclic graphs (see Theorem 9 later on).

We now graph-theoretically characterize the notion of edge-weakness. To this aim,
recall that a cut of a graph G is a bipartition of its vertices (S , T ) such that s ‚àà S and
t ‚àà T ; moreover, its cut-set is the set of edges (u, v) with u ‚àà S and v ‚àà T . We call
connected a cut (S , T ) where every node in S can be reached from s without touching
nodes in T and every node in T can reach t without touching nodes in S .
Theorem 5. G is edge-weak if and only if there exists a walk passing at least twice
through the cut-set of some connected cut.

The proof is similar to the proof of Theorem 1. Just notice that working with con-
nected cuts ensures a minimality property on the associated cut-set: given a connected
cut (S , T ), no cut has a cut-set properly contained in the cut-set of (S , T ). This somehow
corresponds to the minimality condition underlying an mvs.

5 IneÔ¨Éciency in TraÔ¨Éc Networks: Vulnerability
TraÔ¨Éc Networks [2,4] provide a model for studying selÔ¨Åsh routing: non-cooperative
agents travel from a source node s to a destination node t. Since the cost (or latency)
experienced by an agent while travelling along a path depends on network congestion
(and hence on routes chosen by other agents), traÔ¨Éc in a network stabilizes to the equi-
librium of a non-cooperative game, where all agents experience the same latency. This
phenomenon has been deÔ¨Åned by Wardrop [23] in the contest of transport analysis.

In the following, we essentially follow the presentation in [18]. Here, a Ô¨Çow for a
graph G = (V, E) is a function œï : P(G) ‚Üí R+, where P(G) is the set of paths in G. A
Ô¨Çow induces a unique Ô¨Çow on edges: for any edge e ‚àà E, œï(e) = Pp‚ààP(G):e‚ààp œï(p). Since
we do not have capacities on edges (as in the standard Ô¨Çow networks) or charges on
nodes (as in Depletable Channels), in this model a Ô¨Çow is simply a function assigning
non-negative reals to paths, without any further constraint.

A latency function le : R+ ‚Üí R+ assigns to each edge e a latency that depends on the
Ô¨Çow on it; as usual, we only consider continuous and non-decreasing latency functions.

s

x

<‚ë°‚ë°‚ë°‚ë°‚ë°
"‚ùä‚ùä‚ùä‚ùä‚ùä

1

u

v

0

1

"‚ùä‚ùä‚ùä‚ùä‚ùä
<‚ë°‚ë°‚ë°‚ë°‚ë°

x

t

s

x

<‚ë°‚ë°‚ë°‚ë°‚ë°
"‚ùä‚ùä‚ùä‚ùä‚ùä

1

u

v

1

"‚ùä‚ùä‚ùä‚ùä‚ùä
<‚ë°‚ë°‚ë°‚ë°‚ë°

x

t

Fig. 5. The Wheatstone network

Fig. 6. Wheatstone optimal subgraph

The latency of a path p under a Ô¨Çow œï is the sum of the latencies of all edges in the
path under œï, i.e., lp(œï) = Pe‚ààp le(œï(e)). If H is a subgraph of G, we denote with l|H the
restriction of the latency function l on the edges of H.
Given a graph G, a real number r ‚àà R+ and a latency function l, we call the triple
(G, r, l) an instance. A Ô¨Çow œï is feasible for (G, r, l) if the value of œï is r. Notice that,
since we do not have any constraint on edges or vertices, every r admits at least one
feasible Ô¨Çow.

A Ô¨Çow œï feasible for (G, r, l) is at Wardrop equilibrium (or is a Wardrop Ô¨Çow) if, for
all pairs of paths p, q ‚àà P(G) such that œï(p) > 0, we have lp(œï) ‚â§ lq(œï). In particular,
this implies that, if œï is a Wardrop Ô¨Çow, all paths to which œï assigns a positive Ô¨Çow
have the same latency. It is known [18] that every instance admits a Wardrop Ô¨Çow and
that diÔ¨Äerent Wardrop Ô¨Çows for the same instance have the same latency along the
same path. Thus, we denote with L(G, r, l) the latency of all paths with positive Ô¨Çow at
Wardrop equilibrium. In the special case where r = 0, we let L(G, r, l) be 0.

Braess‚Äôs paradox [2,5] originates when latency at Wardrop equilibrium decreases
because of removing edges (or equivalently, by raising the latency function on edges):
an instance (G, r, l) suÔ¨Äers from Braess‚Äôs paradox if there is a subgraph of G with a
lower latency. Fig. 5 shows the Wheatstone network, a minimal example of Braess‚Äôs
paradox. A Wardrop Ô¨Çow of value 1 assigns all the Ô¨Çow to the path s u v t in the picture.
The latency in such a case is 2. In Fig. 6, we show the optimal subgraph: in this case, a
Wardrop Ô¨Çow of value 1 assigns 1
2 to both paths in the network, thus obtaining a latency
of 3
2 .
DeÔ¨Ånition 3. A graph G is vulnerable if there exist a value r, a latency function l and
a subgraph H of G such that L(G, r, l) > L(H, r, l|H).

A characterization of vulnerable undirected graphs is presented in [15]. In particular,
in [15] it is proved that an undirected graph is vulnerable if and only if it contains (the
undirected version of) the Wheatstone network. We now show that the same result holds
also for directed graphs, thus answering to Open Question 1 in Sect. 6.1 of [18]. To
formally state our result, recall that [22] G contains a subgraph homeomorphic to H if
H can be obtained from G by a sequence of the following operations:

‚Äì remove an edge;
‚Äì replace (u, v) and (v, w) with (u, w) and delete vertex v, whenever (u, v) is the only

edge entering into v and (v, w) is the only edge leaving v.

Let us call W the graph in Fig.1(b), i.e. the graph underlying the Wheatstone network.
Theorem 6. G is vulnerable if and only if it contains a subgraph homeomorphic to W.
One direction can be proved by assigning a big-enough latency to all edges that do
not belong to the homeomorphic copy of W and by mimicking the latencies in Fig. 5

"


<
"
<
"
<
"
<
for the remaining ones. For the converse, we exploit the fact that, for acyclic graphs,
vulnerability coincides with not being series-parallel; this is Theorem 1 from [7]1 and
yields the result, by using [8] (where it is proved that, for undirected graphs, being
series-parallel coincides with not having a subgraph homeomorphic to W; this result
scales only to acyclic directed graphs). We then reduce the cyclic case to the acyclic one
by showing that, in every net that does not contain W, we can remove cycles without
changing the set of acyclic paths and by proving that this operation does not aÔ¨Äect
vulnerability. Thus, we cannot claim that every non-vulnerable graph is series-parallel
but only that it cannot contain a subgraph homeomorphic to W. An example of a graph
that is not vulnerable and not series-parallel will be given in the next section (and, of
course, it is cyclic).

To conclude, we should mention [11], where an elegant generalization to all con-
gestion games is given and a characterization of structures that do not suÔ¨Äer of Braess‚Äôs
paradox is given in terms of matroids. DiÔ¨Äerently from our result, this elegant charac-
terization is not directly related to graph theoretic concepts.

6 Comparing Weakness, Edge-Weakness, and Vulnerability

Stemming from the characterizations of weakness (Theorem 1), edge-weakness (The-
orem 5) and vulnerability (Theorem 6), we can relate the three notions of ineÔ¨Éciency
studied so far. The precise picture (for general directed graphs) is given in the top-left
part of Fig. 7.

We Ô¨Årst show that vulnerability implies edge-weakness and that it can be character-

ized by containment of an acyclic weak subgraph.

Theorem 7. If G is vulnerable, then it is edge-weak.

Theorem 8. G is vulnerable if and only if it contains a weak acyclic subgraph.

It is easy to see that the graph W is weak, vulnerable and edge-weak. Let us now
consider the other graphs in Fig. 7. The graph A is weak, because its mvs {u} is critical.
By contrast, it is not edge-weak (and so neither vulnerable): its only connected cuts
are ({s}, {u, v, t}) and ({s, u, v}, {t}) and no walk passes through their cut-sets twice. The
graph B is weak (its mvs {u} is critical) and edge-weak (there is a walk passing twice
through the cut-set of its connected cut ({s, u}, {v, t})). By contrast, it is not vulnerable,
since it does not contain a subgraph homeomorphic to W. The graph C is not weak: its
mvs‚Äôs are {s}, {t}, {v1, v2} and {v3, v4} and they are not critical. By contrast, this graph
is vulnerable because it trivially contains a subgraph homeomorphic to W. Finally, let
us consider the graph D: it is not weak (its mvs‚Äôs are {s}, {t}, {u} and {v}, which are
not critical) nor vulnerable (it does not contain a subgraph homeomorphic to W). By
contrast, it is edge-weak, because there is a walk that passes twice through the cut-set
of the connected cut ({s, u, x}, {y, v, t}).

Graph A also testiÔ¨Åes that the characterization of vulnerability given in [7] does
hold only for irredundant graphs. Indeed, Lemma 2 in [7] does not hold for A (that is

1 Indeed, acyclic graphs are a speciÔ¨Åc case of what they call irredundant graphs. A graph is said

to be irredundant is every edge and every node belongs to a simple (i.e., acyclic) st-path.

Vulnerable

A

B

W

C

D

Weak

Edge-Weak

s

/ u

/ t

s

/ u

% v

/ t

v

A

B

s

;‚ë†‚ë†‚ë†‚ë†
#‚ùã‚ùã‚ùã‚ùã

v1

v2

C

Vulnerable =
Edge-Weak

W

C

Weak

"‚ùã‚ùã‚ùã‚ùã
<‚ë†‚ë†‚ë†‚ë†

t

/ t

v

9 y

s

/ u

x

D

/ v3

D‚ú†‚ú†‚ú†‚ú†‚ú†‚ú†‚ú†
‚ú∫‚ú∫‚ú∫‚ú∫‚ú∫‚ú∫‚ú∫

v4

Fig. 7. The inclusion diagram for cyclic (top-left) and acyclic (top-right) directed graphs (W is
the Wheatstone graph ‚Äì see Fig. 1(b))

redundant because of the vertex v): the graph is cyclic but it does not contain what they
call an s-t paradox (see Def. 5 in [7]).

If we restrict ourselves to acyclic graphs (i.e., DAGs), the inclusion diagram
changes; it is depicted in the top-right part of Fig. 7. Indeed, for DAGs, we can prove
that both vulnerability and edge-weakness coincide with not being two-terminal series-
parallel (TTSP [17]); furthermore, the resulting class (properly) contains weak DAGs.

Theorem 9. If G is a DAG, the following statements are equivalent:

1. G is vulnerable;
2. G is not TTSP;

3. G is edge-weak;
4. G contains a weak subgraph.

The previous characterization has also consequences from the computational point
of view. Indeed, checking vulnerability is, in general, a NPC problem [10], whereas
checking if a DAG is TTSP is polynomial [22,19].

7 Conclusion

We have studied diÔ¨Äerent models for networks: one is provided with depletable node
charge modeling energy consumption in ad-hoc networks; one is the standard Ô¨Çow net-
work model; and one is provided with latency functions on the edges in a game theoretic
framework for modeling traÔ¨Éc networks. In all models, a graph-theoretical notion of
ineÔ¨Éciency can be identiÔ¨Åed, always related to a counterintuitive phenomenon: some
networks increase their performances when an edge is removed. We have compared
these forms of ineÔ¨Éciency and we have found precise relationships.

We have also shown a polynomial time algorithm for checking weakness. Our algo-
rithm may seem overly complicated. Indeed, because of Theorem 3, it would be enough
to compute, for every b ‚àà V, a b-minimal mvs and check whether it is critical or not. The
problem is that not every vertex occurs in an mvs (see, for example, vertex v of graph A
in Fig. 7). Moreover, for a vertex b occurring in an mvs, we have not found an eÔ¨Écient
way to directly compute a b-minimal mvs; indeed, Alg. 2 computes a b-minimal mvs
starting from an mvs that already contains b. EÔ¨Éciently Ô¨Ånding such an mvs is left for
future development.

/


/
F
F
/
%
f
f
/

/
"
;
#
/
/
D
<
/
/
/


/
9
x
x
O
O
The computational complexity of vulnerability is also clear: it is NPC for general
graphs, whereas it is polynomial for DAGs. Finally, edge-weakness is polynomial in
the acyclic case (since it coincides with vulnerability) but we still do not know in the
general case; possibly, by following the ideas underlying the algorithm for weakness, a
polynomial-time algorithm for edge-weakness may be devised.

Acknowledgements The authors wish to thank Irene Finocchi and Fabrizio Grandoni
for helpful discussions about the topic of this paper.

References

1. R. Ahuja, T. Magnanti, and J. Orlin. Network Flows, theory, algorithms, and applications.

Prentice-Hall, New Jersey, 1993.

2. M. Beckmann, C. B. McGuire, and C. B. Winsten. Studies in the Economics of Transporta-

tion. Yale University Press, 1956.

3. W. Bein, P. Brucker, and A. Tamir. Minimum cost Ô¨Çow algorithms for series-parallel net-

works. Discrete Applied Mathematics, 10:117‚Äì124, 1985.

4. M. Bell and Y. Iida. Transportation Network Analysis. Wiley, 1987.
5. D. Braess. ¬®Uber ein paradoxon aus der verkehrsplannung. Unternehmensforschung, 12:258‚Äì

268, 1968.

6. P. Cenciarelli, D. Gorla, and I. Salvo. Depletable channels: Dynamics and behaviour.

In

Proc. of FCT09, volume 5690 of LNCS, pages 50‚Äì61. Springer, 2009.

7. X. Chen, Z. Diao, and X. Hu. Excluding braess paradox in nonatomic selÔ¨Åsh routing. In

Proc. of SAGT15, volume 9347 of LNCS, pages 219‚Äì230. Springer, 2015.

8. R. J. DuÔ¨Én. Topology of series-parallel networks. Journ. of Math Analysis and Applications,

10:303‚Äì318, 1965.

9. F. Escalante. Schnittverb¬®ande in graphen. Abhandlungen aus dem Mathematischen Seminar

der Universit¬®at Hamburg, 38(1):199‚Äì220, 1972.

10. S. Fortune, J. E. Hopcroft, and J. Wyllie. The directed subgraph homeomorphism problem.

Theor. Comput. Sci., 10:111‚Äì121, 1980.

11. S. Fujishige, M. Goemans, T. Harks, B. Peis, and R. Zenklusen. Matroids are immune to

braess paradox. Available at: arXiv:1504.07545, 2015.

12. J. Golumbic. Algorithmic Graph Theory and Perfect Graphs. Academic Press, 1980.
13. M. Iri. Theory of uncontrollable Ô¨Çows ‚Äì a new type of network-Ô¨Çow theory as a model for

the 21st century of multiple values. Computers Math. Applic., 35(10):107‚Äì123, 1998.

14. T. Kloks and D. Kratsch. Listing all minimal separators of a graph. SIAM J. Comput.,

27(3):605‚Äì613, 1998.

15. I. Milchtaich. Network topology and the eÔ¨Éciency of equilibrium. Games and Economic

Behavior, 57:321‚Äì346, 2006.

16. G. Newell. TraÔ¨Éc Flow on Transportation Networks. MIT Press, 1980.
17. J. Riordan and C. Shannon. The number of two-terminal series-parallel networks. Journal

of Mathematics and Physiscs, 21:83‚Äì93, 1942.

18. T. Roughgarden. On the severity of Braess‚Äôs Paradox: Designing networks for selÔ¨Åsh users

is hard. J. Comput. Syst. Sci., 72(5):922‚Äì953, 2006.

19. B. Schoenmakers. A new algorithm for the recognition of series parallel graphs. Technical

report, CWI - Centrum voor Wiskunde en Informatica, 1995.

20. Y. SheÔ¨É. Urban Transportation Networks. Prentice-Hall, 1985.
21. H. Shen and W. Liang. EÔ¨Écient enumeration of all minimal separators in a graph. Theor.

Comput. Sci., 180(1-2):169‚Äì180, 1997.

22. J. Valdes, R. Tarjan, and E. Lawler. The recognition of series-parallel digraphs. SIAM Journal

of Computing, 11:298‚Äì313, 1982.

23. J. Wardrop. Some theoretical aspects of road traÔ¨Éc research. In Proc. of the Institute of Civil

Engineers, Pt. II, volume 1, pages 325‚Äì378, 1952.

24. B. Warneke, M. Last, B. Liebowitz, and K. S. J. Pister. Smart dust: Communicating with a

cubic-millimeter computer. IEEE Computer, 34(1):44‚Äì51, 2001.

A Proofs

A.1 Proofs of Section 2

Proof of Theorem 1
(If) We deÔ¨Åne Œ∑(v) = 1 for all v ‚àà T and we let Œ∑(v) be suÔ¨Éciently large on all other
vertices, so that max Œ∑ = |T |. We may assume without loss of generality that the walk
r : a { b is acyclic and such that r ‚à© T = {a, b}. Similarly, by the minimality of T ,
there exist (acyclic) directed walks p : s { a and q : b { t such that p ‚à© T = {a} and
q ‚à© T = {b}. Then, a Ô¨Çow œÜ of one unit along the path s { a { b { t is feasible and it
leaves the channel with a charge-to-node assignment Œ∏ such that max Œ∏ ‚â§ |T | ‚àí 2. Then,
we can combine œÜ with a maximum Ô¨Çow for Œ∏ to obtain a dead network after a Ô¨Çow of
value max Œ∏ + 1 < max Œ∑. Thus, G is weak.

(Only if) Let Œ∑ be a channel inhibited by some Ô¨Çow œÜ of value n < max Œ∑ and call Œ∂
the resulting (dead) channel. There exists an mvs T in the graph such that Œ∂(v) = 0, for
all v ‚àà T . Since every Ô¨Çow cannot exceed the capacity of an mvs,2 max Œ∑ ‚â§ Pv:v‚ààT Œ∑(v).
By deÔ¨Ånition Œ∂(v) = Œ∑(v) ‚àí Pp:v‚ààp œÜ(p) and hence Œ∑(v) = Pp:v‚ààp œÜ(p). Suppose no
directed walk exists between any two vertices of T . Thus, since T is an mvs, all paths
must include precisely one vertex in T ; hence, Pv:v‚ààT Pp:v‚ààp œÜ(p) = Pp œÜ(p). Summing
up, we have the absurd:

max Œ∑ ‚â§ X
v:v‚ààT

Œ∑(v) = X
v:v‚ààT

X
p:v‚ààp

œÜ(p) = X
p

œÜ(p) = n.

‚äì‚äî

2 This comes from the min-cut-max-Ô¨Çow theorem [1], that can be easily rephrased in our setting
to sound as min-mvs-max-Ô¨Çow. Indeed, we can adopt the standard translation from vertex-
capacitated nets into edge-capacitated nets: we replace every vertex v diÔ¨Äerent from s and t
with two new vertices vi and vo and we add a new edge vi ‚Üí vo whose capacity is the charge of
node v; every edge u ‚Üí v is replaced with the edge uo ‚Üí vi whose capacity is ‚àû; every edge
s ‚Üí v is replaced with the edge s ‚Üí vi whose capacity is ‚àû; every edge u ‚Üí t is replaced
with the edge uo ‚Üí t whose capacity is ‚àû. Now, there is a one-to-one correspondence between
the mvs‚Äôs of the vertex-capacitated model and the cuts of the corresponding edge-capacitated
model whose cut-set is formed only by edges vi ‚Üí vo; moreover, the capacity of any mvs and
of the corresponding cut coincide. Since only cuts arising from mvs‚Äôs have a Ô¨Ånite capacity, it
is easy to show that a min-cut comes from a min-mvs and, conversely, that a min-mvs induces
a min-cut. Moreover, since only edges of the form vi ‚Üí vo put constraints on a Ô¨Çow, a max-
Ô¨Çow in the edge-capacitated model corresponds to a max-Ô¨Çow in the vertex-capacitated model,
and vice versa.

A.2 Proofs of Section 3

Proof of Theorem 2 Looking for a contradiction, let us suppose that in a graph there is
a critical mvs T with a return in b ‚àà T , but there exists a complete chain T0, T1, . . . , Tn
such that for all i, Ti does not contain any critical node.

Trivially, b @ T0 and b ‚äë Tn (this happens for every b ‚àà V \ {s}); thus, let us consider
the index i such that b @ Ti and b ‚äë Ti+1. By construction, Ti+1 = T ui
i , for some ui ‚àà Ti;
moreover, b < Ti+1, because, by hypothesis, no critical node belongs to any mvs in the
chain.

Let us deÔ¨Åne the many-steps predecessors of b as pred‚àó(b) = {v ‚àà V : v { b} and
take P = pred‚àó(b) ‚à© Ti, the set of many-steps predecessors of b in Ti. For this set, we
observe two things:

(i) ‚àÖ , P (cid:22) b: since Ti is an mvs, every path passing through b must cross Ti but, since
b @ Ti, it must be that Ti (cid:22) b. Trivially, since all nodes between s and b are by
deÔ¨Ånition the many-step predecessors of b, the same relation holds by restricting Ti
to such nodes, thus obtaining P. Since b , s, this entails that P , ‚àÖ.

(ii) For all p ‚àà P, T p
i

= Ti+1: If some p ‚àà P belonged to Ti+1, we could Ô¨Ånd a walk
p { b { u with u ‚àà Ti+1 (indeed, b ‚äë Ti+1); this would make Ti+1 a critical
mvs. So, we must have that all nodes in P disappear in Ti+1; by construction, this
happens because, for every p ‚àà P, we have that p ‚àà It(Ti ‚à™ succ(ui)) and hence
p ‚äë Ti+1. This fact, together with p < Ti+1, entails that T p
i ‚äë Ti+1, for all p ‚àà P.
If T p
i , Ti+1 for some p ‚àà P, we contradict the hypothesis that T0, T1, . . . , Tn is a
complete chain: indeed, we would have that Ti ‚äè T p ‚äè Ti+1.

Because of point (ii), the set U of new nodes added from Ti to Ti+1 is the same
whenever we reÔ¨Åne Ti with ui or any other p ‚àà P; in particular, every node in U is an
immediate successor of every node in P. Moreover, we can claim the following fact
about U:

(iii) b ‚äë U: since b ‚äë Ti+1, every walk form b to t must cross Ti+1. If it passes through
a node x ‚àà Ti \ Ti+1, then the walk p { b { x, for any p ‚àà P, would make Ti
critical.

We now use these facts to contradict the assumption that b is a critical node. Con-
sider all the paths of the form s { p ‚Üí u { t, with p ‚àà P and u ‚àà U. Every mvs, to
cut such paths, must contain either a set of nodes P‚Ä≤ (cid:22) P or a set of nodes U ‚Ä≤ ‚äí U. In
both cases, since P‚Ä≤ (cid:22) b and b ‚äë U ‚Ä≤ (because of (i) and (iii)), b cannot belong to any
mvs (see Lemma 1) and hence cannot be a critical node.
‚äì‚äî

Proof of Theorem 3 Let T be a b-critical mvs, where a ‚àà T is such that a { b.
By contradiction, assume the existence of an mvs T ‚àó that is both b-minimal and not b-
critical. We shall now prove that this will entail that a and b cannot both belong together
to the same mvs, thus contradicting the existence of T .

Clearly, a < T ‚àó, because T ‚àó is not b-critical. Moreover, the existence of a walk from
the source s to a that passes through T ‚àó would imply the existence of a walk starting
in T ‚àó that reaches a and then b, by contradicting that T ‚àó is not b-critical. Therefore, it
must be a ‚äë T ‚àó.

Let A = {u ‚àà T ‚àó | a { u , b} = {a1, . . . , an}. Notice that A , ‚àÖ, otherwise we would
have a ‚äë b and therefore a and b could not belong to the same mvs (see Lemma 1). For
each element ai ‚àà A, let us now consider the mvs T ‚àó
‚äë T ‚àó. By, b-minimality of T ‚àó, b
ai
does not belong to T ‚àó
ai. This implies that there exists a set of nodes Pi ‚äÜ pred(ai) such
that Pi (cid:22) b. Observe that there is some path from s to b that do not pass through a,
otherwise a (cid:22) b and then they could not belong to the same mvs. Therefore, for each
i ‚àà {1, . . . , n}, we can consider the set of nodes Bi ‚äÜ Pi that are on a path from s to b
that does not touch a. Notice that, for all i, we have that Bi , ‚àÖ, otherwise all paths
from s to b would pass through a.

Let us now Ô¨Åx an i ‚àà {1, . . . , n}, let us come back to T and consider how it can cut

all paths of the form s { bi ‚Üí ai { t, for all bi ‚àà Bi.

If in T there exists a set of nodes Li (cid:22) Bi, this would imply that b cannot be in T ,

because Li ‚à™ {a} (cid:22) Bi ‚à™ {a} (cid:22) b and Li ‚à™ {a} ‚äÜ T (see Lemma 1).

So, it must be that at least one path s { bi ‚Üí ai does not pass through T . Therefore
there must exist a set in Ri ‚äÜ T such that ai ‚äë Ri. Since this argument works for every
i, we can consider R = Si Ri ‚äÜ T . Then, A = {a1, . . . , an} ‚äë Si Ri = R. But again, since
a ‚äë A ‚à™ {b} ‚äë R ‚à™ {b} and R ‚à™ {b} ‚äÜ T , Lemma 1 would imply that a cannot belong to
T . This is a contradiction with the initial choice of the mvs T that contains both a and
b.
‚äì‚äî

Proof of Theorem 4 Given an mvs T and two nodes u, b ‚àà T , let us consider the mvs
Tu ‚äè T . We have that b < Tu if and only if b ‚àà Is(T ‚à™pred(u)), i.e. (T ‚à™pred(u))\{b} ‚â∫ b.
Since every predecessor (w.r.t. ‚äè) of T can be obtained as Tu, for some u ‚àà T , we easily
conclude.
‚äì‚äî

A.3 Proofs of Section 4

Let us denote with cutset(S , T ) the cut-set of the cut (S , T ).

Lemma 2. Let (S , T ) be a connected cut. For every cut (S ‚Ä≤, T ‚Ä≤),
cutset(S ‚Ä≤, T ‚Ä≤) 1 cutset(S , T ).

it holds that

Proof. By contradiction, assume a cut (S ‚Ä≤, T ‚Ä≤) such that cutset(S ‚Ä≤, T ‚Ä≤) ‚äÇ cutset(S , T )
and let (u, v) ‚àà cutset(S , T ) \ cutset(S ‚Ä≤, T ‚Ä≤). Because (S ‚Ä≤, T ‚Ä≤) is a cut and (u, v) <
cutset(S ‚Ä≤, T ‚Ä≤), it can either be {u, v} ‚äÜ S ‚Ä≤ or {u, v} ‚äÜ T ‚Ä≤.

In the Ô¨Årst case, since (S , T ) is a connected cut, we know that there exists a walk
v { t containing only vertices of T . But v ‚àà S ‚Ä≤ whereas t ‚àà T ‚Ä≤; hence, there must
exist a (x, y) ‚àà v { t such that x ‚àà S ‚Ä≤ and y ‚àà T ‚Ä≤. Then, (x, y) ‚àà cutset(S ‚Ä≤, T ‚Ä≤),
whereas (x, y) < cutset(S , T ), because {x, y} ‚äÜ T . This contradicts the assumption
cutset(S ‚Ä≤, T ‚Ä≤) ‚äÇ cutset(S , T ).

In the second case, we work in a similar way, but consider the walk s { u contain-
‚äì‚äî

ing only vertices of S .

Proof of Theorem 5 Given a set of edges X, we write c(X) to denote Px‚ààX c(x).
(If) Let (S , T ) be the connected cut and E‚Ä≤ be its cut-set. Let p be a walk that passes
through E‚Ä≤ at least twice, with (u, v) and (x, y) be the Ô¨Årst and the last edge of E‚Ä≤ touched

by it. We deÔ¨Åne ce as the number of occurrences of e in p, for all e ‚àà E‚Ä≤, and we let ce
be c(E‚Ä≤) + 1 on all other edges.

First of all, notice that the maximum Ô¨Çow has value c(E‚Ä≤). This follows from the min-
cut-max-Ô¨Çow theorem [1], by noting that (S , T ) is a minimum cut. Indeed, by Lemma 2,
no cut has a cut-set contained in E‚Ä≤; moreover, by deÔ¨Ånition of c, any cut whose cut-set
contains an edge not belonging to E‚Ä≤ has a capacity greater than c(E‚Ä≤).

By deÔ¨Ånition of cut-set, u ‚àà S and y ‚àà T ; moreover, by construction, s { u and
y { t do not pass through E‚Ä≤. Then, a Ô¨Çow f of one unit along p is feasible and it leaves
the net with a residual capacity lower than c(E‚Ä≤) ‚àí 1. Then, we can combine f with a
maximum Ô¨Çow for the residual net to obtain a saturating Ô¨Çow of value at most c(E‚Ä≤) ‚àí 1.
Thus, G is edge-weak.

(Only If) Let c be a capacity function that admits a saturating Ô¨Çow f of value smaller
than the maximum and call c‚Ä≤ the resulting residual capacity. Since f saturates c, we
now show that there exists a connected cut whose cut-set has a residual capacity that
equals 0. If this was not the case, let us reason as follow. Start with the cut ({s}, V \ {s}).
Clearly, this is a connected cut; so, there exists an edge e1 from s to some u1 ‚àà V \ {s}
such that c‚Ä≤
e1 > 0. If u1 = t, we have a contradiction with the fact that f saturates c. So,
consider the cut ({s, u1}, V \ {s, u1}). Again, this is a connected cut and so there exists
e2 > 0. If u2 = t, we have a
an edge e2 from {s, u1} to some u2 ‚àà V \ {s, u1} such that c‚Ä≤
contradiction with the fact that f saturates c. Otherwise, we go on, until we Ô¨Ånd a uk = t.
Then, the path s ‚Üí u1 ‚Üí u2 ‚Üí . . . ‚Üí uk = t contradicts the fact that f saturates c.

To conclude, let (S , T ) be the connected cut whose cut-set has been saturated by f .
By the min-cut-max-Ô¨Çow theorem [1], c(E‚Ä≤) ‚â• | fmax|. But this is possible only if there
is a path that passes through E‚Ä≤ at least twice. Indeed, if this was not the case, we would
have that c(E‚Ä≤) = | f |, in contradiction with the assumption | f | < | fmax|.
‚äì‚äî

A.4 Proofs of Section 5

First, we characterize vulnerability for acyclic graphs; this is an immediate corollary
of the main result from [7]: an irredundant graph is vulnerable if and only if it is not
series-parallel. Since acyclic graphs are a special case of irredundant ones, the theorem
needs no proof.

Theorem 10. Let G be acyclic; then, G is vulnerable if and only if it is not TTSP.

We are now ready to move to general (i.e., cyclic) graphs. To this aim, let G be a

directed st-graph; we denote with PathA(G) the set of acyclic paths from s to t in G.

Lemma 3. Let G be a directed st-graph that does not contain a subgraph homeo-
morphic to the Wheatstone network. Let C = v1, . . . , vn be the nodes of a simple
cycle in G. Then, we can remove an edge in C, obtaining a graph G‚Ä≤ such that
PathA(G‚Ä≤) = PathA(G).

Proof. Let (v1, v2), (v2, v3), . . . , (vn‚àí1, vn), (vn, v1) be a simple cycle in G. Without loss
of generality, let v1 be a node such that there exists a walk s { v1 that touches C only in
v1. Such a node does exist, otherwise the cycle would not be reachable from the source

s

v1

t

s

v j

(a)

vk+1

vk

vi

v‚Ä≤

(b)

s

9tttttt
$‚ùè‚ùè‚ùè‚ùè‚ùè‚ùè

t

$‚ùè‚ùè‚ùè‚ùè‚ùè‚ùè
:‚úâ‚úâ‚úâ‚úâ‚úâ‚úâ

t

vi

v j

(c)

Fig. 8. Figures for Lemma 3

s. Similarly, let vk be the last node in the sequence v1, . . . , vn such that there exists a
walk vk { t that touches C only in vk. Such a node does exist, otherwise the sink t
would not be reachable from the cycle C.

If k = 1, no acyclic path in G passes through an edge in C (see Fig. 8(a)). In such a

case, we can remove all edges in C, without removing any acyclic path in G.

Let us consider now a walk v1 { t. If all such walks have the form v1 { vk { t,
then vk is the only exit from C. Consequently, the edge (vk, vk+1 mod n) does not belong
to any acyclic path in G. Indeed all paths of the form s { vk ‚Üí vk+1 mod n { t must
return in vk after vk+1 mod n to leave the cycle C.

Otherwise, let vi (1 ‚â§ i < k) be the Ô¨Årst node in v1, . . . , vk‚àí1 that can reach
t without passing through other nodes in C and consider nodes vi+1, . . . , vk. If all
walks from s to them pass through other nodes in C, again the edge (vk, vk+1 mod n)
does not belong to any acyclic path in G. Indeed, consider a path that uses edge
(vk, vk+1 mod n). For what we have just assumed, such a path enters into the cycle C in
a node v‚Ä≤ ‚àà {vk+1 mod n, . . . , v1, . . . vi} and has to pass through edge (vk, vk+1 mod n). Since
all vertices in vk+1 mod n, . . . , v1, . . . vi can reach t only through vi or after it, the path is
cyclic (see Fig. 8(b)).

Otherwise, let v j (i < j ‚â§ k) be such that there exists a walk s { v j that does not
pass through other nodes in C. In this case, G would contain a subgraph homeomorphic
to the Wheatstone network, as given in Fig. 8(c).
‚äì‚äî

Lemma 4. Let G‚Ä≤ ‚äÜ G. Let œï be an (acyclic) Ô¨Çow at the Wardrop equilibrium for
(G, r, l). If PathA(G‚Ä≤) = PathA(G) then œï is a Ô¨Çow at the Wardrop equilibrium for
(G‚Ä≤, r, l).

Proof. By Proposition 2.2 in [18], we know that, for every p, q ‚àà P(G), if œïp > 0 then
‚Ñìp(œï) ‚â§ ‚Ñìq(œï). By hypothesis, œï assigns positive Ô¨Çow only to acyclic paths in G; thus,
p ‚àà PathA(G) = PathA(G‚Ä≤). Moreover, since G‚Ä≤ ‚äÜ G, it holds that P(G‚Ä≤) ‚äÜ P(G). Thus,
trivially, for every p, q ‚àà P(G‚Ä≤), if œïp > 0 then ‚Ñìp(œï) ‚â§ ‚Ñìq(œï). Again by Proposition 2.2
in [18], this means that œï is a Ô¨Çow at the Wardrop equilibrium for (G‚Ä≤, r, l).

Lemma 5. Let G‚Ä≤ ‚äÜ G. If PathA(G‚Ä≤) = PathA(G) then G is vulnerable if and only if G‚Ä≤
is vulnerable.

Proof. Vulnerability of G‚Ä≤ trivially entails vulnerability of G. Let us prove the opposite
implication. Let H ‚äÇ G be such that L(H, r, l) < L(G, r, l), for some r and l.

/
/
/
o
/
o


/
/
/
o
/
o
H
H
/
/
/
o
/
o
/
o
/
o
/
o
/
o
/
o
%
%
%
e
%
e
8
8
8
x
8
x
8
x
t
t
t
4
t
4
t
4
t
4
t
4
t
4
t
4
#
#
#
c
#
c
/
/
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
/
o
O
O


$
9
$
:
If H ‚äÇ G‚Ä≤, let œï be an acyclic Ô¨Çow for G at the Wardrop equilibrium (one always
exists by Proposition 2.4 of [18]). By Lemma 4, œï is a Ô¨Çow for G‚Ä≤ at the Wardrop
equilibrium; thus, L(H, r, l) < L(G‚Ä≤, r, l), i.e. G‚Ä≤ is vulnerable.

Otherwise, it cannot be H = G‚Ä≤, because PathA(H) ‚äÇ PathA(G); indeed, because of
Lemma 4, if PathA(H) = PathA(G), we would have L(H, r, l) = L(G, r, l). Thus, there is
an edge (u, v) ‚àà H such that (u, v) < G‚Ä≤; this means that (u, v) only belongs to cyclic
paths of G, because by hypothesis PathA(G‚Ä≤) = PathA(G). We now show that this implies
the existence of a simple cycle p : w { w in G containing (u, v) such that:

1. for every w‚Ä≤ ‚àà w { u, it holds that w ‚äë w‚Ä≤, and
2. for every w‚Ä≤ ‚àà v { w, it holds that w‚Ä≤ (cid:22) w.

First of all, since (u, v) belongs to a cyclic path in G, it also belongs to a simple cycle in
G, say w { w. To prove the Ô¨Årst claim, consider w‚Ä≤ , w (the case for w‚Ä≤ = w is trivial).
Then, if there was a path s { w‚Ä≤ not passing through w, then s { w‚Ä≤ { u ‚Üí v {
w { t would be an acyclic path in G, again by the assumption that (u, v) only belongs
to cyclic paths in G. Similarly, to prove the second claim, assume a walk w‚Ä≤ { t not
passing through w; then s { w { u ‚Üí v { w‚Ä≤ { t would be an acyclic path in G,
again the assumption that (u, v) only belongs to cyclic paths in G.

Then, consider H‚Ä≤ = H \ p. Trivially, PathA(H‚Ä≤) = PathA(H) and let œï‚Ä≤ be an acyclic
Ô¨Çow for H at the Wardrop equilibrium (one always exists by Proposition 2.4 of [18]).
By Lemma 4, œï‚Ä≤ is a Ô¨Çow for H‚Ä≤ at the Wardrop equilibrium and L(H, r, l) = L(H‚Ä≤, r, l).
If H‚Ä≤ ‚äÇ G‚Ä≤, then L(H‚Ä≤, r, l) < L(G‚Ä≤, r, l) and G‚Ä≤ is vulnerable. Otherwise, we can Ô¨Ånd
another simple cycle to be removed from H‚Ä≤ but this procedure has to terminate, even-
tually yielding that G‚Ä≤ is vulnerable, as desired.
‚äì‚äî

Proof of Theorem 6 For the ‚Äùif‚Äù part, we know that G admits a subgraph of the form

s‚Ä≤

u

v

t‚Ä≤

Let us consider the latency assignment l that assigns:

‚Äì 0 to all edges in u { v;
‚Äì x to the Ô¨Årst edge in s‚Ä≤ { u and in v { t‚Ä≤ and 0 to all the remaining edges in those

paths;

‚Äì 1 to the Ô¨Årst edge in s‚Ä≤ { v and in u { t‚Ä≤ and 0 to all the remaining edges in those

paths;

‚Äì ‚àû to all the remaining edges.

Trivially, this reproduces the Wheatstone network within G that, consequently, is vul-
nerable.

For the ‚Äùonly if‚Äù part, if G is not cyclic, the statement follows by Theorem 10. If
G contains cycles, by contradiction, let us suppose that it does not contain a subgraph
homeomorphic to the Wheatstone network. Then, by Lemma 3, we can transform G




O

O

O

O
$
$
$
d
$
d
$
d
:
:
:
z
:
z
:
z
$
$
$
d
$
d
$
d
:
:
:
z
:
z
:
z
into an acyclic subgraph G‚Ä≤ such that PathA(G‚Ä≤) = PathA(G). By Lemma 5, since G is
vulnerable, G‚Ä≤ is vulnerable too; thus, since G‚Ä≤ is acyclic and not TTSP (by Theorem 10),
it contains a subgraph homeomorphic to the Wheatstone network [8] and, consequently,
also G does. Absurd.
‚äì‚äî

A.5 Proofs of Section 6

Proof of Theorem 7 By Theorem 6, G admits a subgraph of the form

s

s‚Ä≤

u

v

t‚Ä≤

t

Let us consider the capacity assignment {ce}e‚ààE that assigns

‚Äì 2 to all edges in s { s‚Ä≤ and t‚Ä≤ { t;
‚Äì 1 to all edges in s‚Ä≤ { u ‚à™ s‚Ä≤ { v ‚à™ u { v ‚à™ u { t‚Ä≤ ‚à™ v { t‚Ä≤; and
‚Äì 0 to all the remaining ones.

Trivially, the Ô¨Çow assigning 1 to the path s { s‚Ä≤ { u { v { t‚Ä≤ { t is a non-maximum
saturating Ô¨Çow, since there exists a Ô¨Çow with value 2.
‚äì‚äî

Proof of Theorem 8 If G is vulnerable, then, by Theorem 6, it admits a subgraph H of
the form:

s

s‚Ä≤

u

v

t‚Ä≤

t

The subgraph H is weak. As a matter of fact, {u, v} is an mvs for H, and the walk u { v
allows us to conclude by Theorem 1.

For the converse implication, let H be a weak subgraph of G. Theorem 1 implies
that H admits an mvs T such that there exists a walk a { b in H, with {a, b} ‚äÜ T . By
minimality of T , there exist in H a walk from s to a (that does not contain b), a walk
from s to b (that does not contain a), a walk from a to t (that does not contain b), and a
walk from b to t (that does not contain a). Thus, we have found the following subgraph
of H (and, hence, also of G):

s

s‚Ä≤

a

b

t‚Ä≤

t

Notice that both s‚Ä≤ and t‚Ä≤ cannot occur in a { b, otherwise we would have a cycle in H,
in contradiction with the assumption of its acyclicity. For the same reason, a , b. Then,
we can easily conclude that G is vulnerable by Theorem 6.
‚äì‚äî




O

O

O

O
$
$
$
d
$
d
$
d
/
/
/
o
/
o
:
:
:
z
:
z
:
z
$
$
$
d
$
d
$
d
/
/
/
o
/
o
:
:
:
z
:
z
:
z



O

O

O

O
$
$
$
d
$
d
$
d
/
/
/
o
/
o
:
:
:
z
:
z
:
z
$
$
$
d
$
d
$
d
/
/
/
o
/
o
:
:
:
z
:
z
:
z



O

O

O

O
$
$
$
d
$
d
$
d
/
/
/
o
/
o
:
:
:
z
:
z
:
z
$
$
$
d
$
d
$
d
/
/
/
o
/
o
;
;
;
{
;
{
;
{
Proof of Theorem 9

(1) ‚áí (2): By Theorem 7.
(2) ‚áí (3): We prove the contrapositive and work by induction on the structure of G.

The base case is when G is a single edge (s, t). In this case, the only saturat-
ing Ô¨Çow for G is the one that saturates the capacity of (s, t); trivially, this is the
maximum Ô¨Çow.

If G is the serial composition of G1 and G2 (that are TTSP), by the inductive hy-
pothesis Gi is not edge-weak, for i ‚àà {1, 2}. Now, since E = E1 ‚à™ E2, every capacity
assignment {ce}e‚ààE is {ce}e‚ààE1 ‚à™ {ce}e‚ààE2 . Moreover, because of serial composition,
max(G, {ce}e‚ààE) = min{max(G1, {ce}e‚ààE1), max(G2, {ce}e‚ààE2 )}. Finally, since every
source-to-sink path in G is a source-to-sink path in G1 followed by a source-to-sink
path in G2, every Ô¨Çow f for G induces a Ô¨Çow with the same value f1 for G1 and
a Ô¨Çow with the same value f2 for G2. Now, by contradiction, assume that there
exists {ce}e‚ààE such that (G, {ce}e‚ààE) is edge-weak, i.e. it admits a saturating Ô¨Çow ÀÜf
such that | ÀÜf | < max(G, {ce}e‚ààE). Thus, ÀÜfi saturates all the paths of Gi, for either
i = 1 or i = 2. But this is in contradiction with the inductive hypothesis, since
| ÀÜfi| < max(Gi, {ce}e‚ààEi ).

If G is the parallel composition of G1 and G2 (that are TTSP), the proof is similar.
Just notice that in this case max(G, {ce}e‚ààE) = max(G1, {ce}e‚ààE1 ) + max(G2, {ce}e‚ààE2 ),
that every source-to-sink path in G is a source-to-sink path either in G1 or in G2
and, consequently, that every Ô¨Çow f for G induces two Ô¨Çows, f1 for G1 and f2 for
G2, such that | f | = | f1| + | f2|. By contradiction, let {ce}e‚ààE be such that (G, {ce}e‚ààE)
admits a saturating Ô¨Çow ÀÜf with | ÀÜf | < max(G, {ce}e‚ààE). Then, ÀÜfi saturates all the
paths of Gi, for i ‚àà {1, 2}. The contradiction comes from the fact that | ÀÜf1| + | ÀÜf2| <
max(G1, {ce}e‚ààE1) + max(G2, {ce}e‚ààE2 ) and from | ÀÜfi| ‚â§ max(Gi, {ce}e‚ààEi ), for both
i ‚àà {1, 2}.

(3) ‚áí (4): If G is a not TTSP DAG, then, by [8], it admits a subgraph homeomorphic

to the Wheatstone graph; such a subgraph is weak (see the proof of Theorem 8).

(4) ‚áí (1): By Theorem 8.

‚äì‚äî

