6
1
0
2

 
r
a

 

M
9
1
 
 
]

.

C
O
h
t
a
m

[
 
 

1
v
3
6
1
6
0

.

3
0
6
1
:
v
i
X
r
a

Collision Avoidance for Bi-Steerable Car Using Analytic Left Inversion

Luis A. Duffaut Espinosa† W. Steven Gray‡

Abstract— A case study is presented of a collision avoidance
system that directly integrates the kinematics of a bi-steerable
car with a suitable path planning algorithm. The ﬁrst step
is to identify a path using the method of rapidly exploring
random trees, and then a spline approximation is computed.
The second step is to solve the output tracking problem by
explicitly computing the left inverse of the kinematics of the
system to render the Taylor series of the desired input for each
polynomial section of the spline approximation. The method is
demonstrated by numerical simulation.

Index Terms— Collision avoidance, motion planning, au-

tonomous vehicles, system inversion, Chen-Fliess series

I. INTRODUCTION

A convergence of technological advances in conjunction
with changing societal attitudes suggests that autonomous
wheeled vehicles are poised to soon enter main stream
applications in business, the government, and the private
realm [10]. As this happens, it is likely that vehicle design
will evolved in new directions once the human driver and
passengers are completely replaced by a computer control
system and cargo. For example, a bi-steerable car with
independent front and rear axels provides improved maneu-
verability and handling, which would be invaluable in urban
settings to improve collision avoidance [11], [12], [19]–[22],
[25]. But such improved performance is predicated on control
methodologies that properly combine the true dynamics of
the vehicle with the proper path planning tools [1], [16].

In this paper, a case study is presented of a collision
avoidance system that directly integrates the kinematics of
a bi-steerable car with a suitable path planning algorithm.
Here collision avoidance means simply steering a vehicle
modeled as a point from a starting location to a ﬁnal location
while avoiding all stationary obstacles in between the two
locations. The ﬁrst step is solving the path planning problem.
Numerous algorithms appear in the literature which are
applicable to the collision avoidance problem, such as rapidly
exploring random trees (RRT), probabilistic roadmap (PRM),
artiﬁcial potential ﬁelds, and genetic algorithms [16]. The
second step is solving the output tracking problem. That is,
determine the control inputs so that the vehicle accurately
follows the desired path. Mathematically, this corresponds
to computing a left inverse for the system. There is an
extensive literature on this topic in the context of geometric
nonlinear control theory, see, for example, [3], [5], [13]–[15],
[23], [24]. This class of techniques generates left inverses
dynamically by driving a certain inverse dynamical system
with the desired output. While very convenient in some
situations, this method has certain limitations, like requiring
the system to be minimum phase. In addition, this approach

†Department of Electrical and Computer Engineering, George Mason

University, Fairfax, VA 22030, USA.

‡Department of Electrical and Computer Engineering, Old Dominion

University, Norfolk, Virginia 23529-0246, USA.

does not provide an explicit representation of the control
input one is seeking. Another common approach is to use the
property of ﬂatness, which allows one to explicitly compute
a left
inverse analytically provided suitable ﬂat outputs
can be identiﬁed [4], [17]. Unfortunately, these output are
sometimes not the most desirable from a physical point of
view. This turns out to the case for the bi-steerable car,
where the ﬂat outputs do not correspond to simple physical
variables like a center point on the vehicle or its speed or
orientation [12], [20]–[22]. This then makes integrating the
tracking problem with path planning problem more complex.
A ﬁnal inversion method, which is the one employed in this
paper, is to use an analytic expression for the left inverse
which is available for systems which have a well deﬁned
vector relative degree for the outputs of interest [7], [8]. They
do not have to be ﬂat outputs. The method is based on a
Fliess operator representation of input-output system, and a
combinatorial Hopf algebra technique that renders an explicit
formula for the Taylor series of the left inverse when the
output is an analytic function in the range of the input-output
map. This single formula can be pre-computed efﬁciently off-
line to arbitrary precision [2], [6], and, for example, could
be hardwired on an FPGA for real-time implementation. In
this setting, the desired output trajectory is approximated by a
spline, and then the left inverse of each polynomial section is
numerically evaluated using the inversion formula. It will be
shown here that this strategy provides a feasible and accurate
solution to the collision avoidance problem for a bi-steerable
car. For brevity, only the vehicle’s kinematics are considered.
The paper is organized as follows. In Section II, prelim-
inaries concerning Fliess operators and their inverses are
brieﬂy summarized to make the presentation more self-
contained. Then,
inverse of the
kinematics of the bi-steerable car is computed. This result
is then integrated in Section IV with the RRT path planning
algorithm and the corresponding numerical simulations are
presented. Section V provides the paper’s conclusions.

in Section III,

the left

II. PRELIMINARIES

In this section, some preliminaries concerning the theory
of Fliess operators are outlined as they provide the corner-
stone for the method presented in this paper. The interested
reader is referred to [8], [9] for a more complete treatment.

A. Fliess Operators and Their Interconnections

A ﬁnite nonempty set of noncommuting symbols X =
{x0, x1, . . . , xm} is called an alphabet. Each element of X
is called a letter, and any ﬁnite sequence of letters from X,
η = xi1 · · · xik , is called a word over X. The length of η,
|η|, is the number of letters in η. The set of all words with
length k is denoted by X k. The set of all words including
the empty word, ∅, is designated by X ∗. It forms a monoid
under catenation. The set ηX ∗ is comprised of all words

with the preﬁx η. Any mapping c : X ∗ → Rℓ is called a
formal power series. The value of c at η ∈ X ∗ is written
as (c, η) and called the coefﬁcient of η in c. Typically, c

is represented as the formal sum c = Pη∈X ∗ (c, η)η. If

the constant term (c, ∅) = 0 then c is said to be proper.
The support of c, supp(c), is the set of all words having
nonzero coefﬁcients. The collection of all formal power
series over X is denoted by RℓhhXii. It forms an associative
R-algebra under the catenation product and a commutative
and associative R-algebra under the shufﬂe product, denoted
here by ⊔⊔ . The latter is the R-bilinear extension of the
shufﬂe product of two words, which is deﬁned inductively
by (xiη) ⊔⊔ (xj ξ) = xi(η ⊔⊔ (xj ξ)) + xj ((xiη) ⊔⊔ ξ) with
η ⊔⊔ ∅ = ∅ ⊔⊔ η = η for all η, ξ ∈ X ∗ and xi, xj ∈ X.

One can formally associate with any series c ∈ RℓhhXii
a causal m-input, ℓ-output operator, Fc, in the following
manner. Let p ≥ 1 and t0 < t1 be given. For a Lebesgue
measurable function u :
[t0, t1] → Rm, deﬁne kukp =
1 ≤ i ≤ m}, where kuikp is the usual
max{kuikp :
Lp-norm for a measurable real-valued function, ui, deﬁned
on [t0, t1]. Let Lm
p [t0, t1] denote the set of all measurable
functions deﬁned on [t0, t1] having a ﬁnite k · kp norm
: kukp ≤ R}.
and Bm
Assume C[t0, t1] is the subset of continuous functions in
1 [t0, t1]. Deﬁne inductively for each η ∈ X ∗ the map
Lm
1 [t0, t1] → C[t0, t1] by setting E∅[u] = 1 and letting
Eη : Lm

:= {u ∈ Lm

p (R)[t0, t1]

p [t0, t1]

Exi ¯η[u](t, t0) =Z t

t0

ui(τ )E¯η[u](τ, t0) dτ,

where xi ∈ X, ¯η ∈ X ∗, and u0 = 1. The input-output
system corresponding to c is the Fliess operator

Fc[u](t) = Xη∈X ∗

(c, η) Eη[u](t, t0).

c

p (R)[t0, t0 + T ] into Bℓ

If there exist real numbers Kc, Mc > 0 such that |(c, η)| ≤
KcM |η|
|η|!, ∀η ∈ X ∗, then Fc constitutes a well deﬁned
mapping from Bm
q(S)[t0, t0 + T ]
for sufﬁciently small R, T > 0, where the numbers p, q ∈
[1, ∞] are conjugate exponents, i.e., 1/p + 1/q = 1. (Here,
|z| := maxi |zi| when z ∈ Rℓ.) The set of all such locally
convergent series is denoted by Rℓ
LChhXii. On the other
hand, if |(c, η)| ≤ KcM |η|
c , ∀η ∈ X ∗, then the operator is
well deﬁned over [0, T ] for all R, T > 0. These are called
globally convergent series, and the set of all such series
is denoted by Rℓ
GChhXii. A Fliess operator Fc deﬁned on
p (R)[t0, t0 + T ] is said to be realized by a state space
Bm
realization

˙z = g0(z) +

y = h(z),

m

Xi=1

gi(z) ui, z(t0) = z0

(1a)

(1b)

where each gi is an analytic vector ﬁeld expressed in local
coordinates on some neighborhood W ⊆ Rn of z0, and h
is an analytic function on W, if (1a) has a well deﬁned
solution z(t), t ∈ [t0, t0 + T ] on W for any given input
u ∈ Bm

p (R)[t0, t0 + T ], and

Fc[u](t) = h(z(t)),

t ∈ [t0, t0 + T ].

In this case,
generating series c are computed by

the coefﬁcients of the i-th component of

(ci, η) = Lgη hi(z0), η ∈ X ∗,

(2)

where

Lgη hi := Lgj1 · · · Lgjk

hi, η = xjk · · · xj1 ,

the Lie derivative of hi with respect to gj is deﬁned as

Lgj hi : W → R : z 7→

∂hi
∂z

(z) gj(z),

and Lg∅ hi = hi.

that

When Fliess operators Fc and Fd are connected in a
parallel-product fashion, it is known that FcFd = Fc ⊔⊔ d.
If Fc and Fd with c ∈ RℓhhXii and d ∈ RmhhXii are
interconnected in a cascade manner, the composite system
Fc ◦ Fd has the Fliess operator representation Fc◦d, where
c◦ d denotes the composition product of c and d as described
in [8]. This product is associative and R-linear in its left
argument c. In the event
two Fliess operators are
interconnected to form a feedback system, the closed-loop
system has a Fliess operator representation whose generating
series is the feedback product of c and d, denoted by c@d.
This product can be explicitly computed via Hopf algebra
methods. The basic idea is to consider the set of operators
c ∈ RmhhXii}, where I denotes the
Fδ = {I + Fc
identity map, as a group under composition. It is convenient
to introduce the symbol δ as the (ﬁctitious) generating
series for the identity map. That is, Fδ := I such that
I + Fc := Fδ+c = Fcδ with cδ := δ + c. The set of all such
generating series for Fδ is denoted by RhhXδii. This set
also forms a group under the composition product induced
by operator composition, namely, cδ ◦ dδ := δ + d + c ˜◦ d,
where ˜◦ denotes the modiﬁed composition product [8]. The
group (RhhXδii, ◦, δ) has coordinate functions that form a
Fa`a di Bruno type Hopf algebra. In which case, the group
(composition) inverse c◦−1
can be computed efﬁciently via
the antipode of this Hopf algebra [2], [6], [8]. This inverse
also provide an explicit expression for the feedback product,
namely, c@d = c ◦ (δ − d ◦ c)◦−1.

:

δ

B. Left Inversion of Multivariable Fliess Operators

It was shown in [26] that Fc will map every input which
is analytic at t0 to an output which is also analytic at t0
LChhXii. In [7] an explicit formula was
provided c ∈ Rℓ
developed for calculating the left inverse of a multivariable
mapping Fc given a real analytic function in its range.
Without loss of generality assume t0 = 0. Note that every c ∈
RhhXii can be decomposed into its natural and forced com-
0)xk
0
and cF := c − cN . A condition under which the left inverse
of Fc exists is provided by the following deﬁnition

ponents, that is, c = cN + cF , where cN :=Pk≥0(c, xk

integer such that supp(cF,i) ⊆ xri−1

Deﬁnition 1: Given c ∈ RmhhXii, let ri ≥ 1 be the
0 X ∗, where
largest
i = 1, 2, . . . , m. Then the component series ci has relative
degree ri if the linear word xri−1
xj ∈ supp(ci) for some
j ∈ {1, . . . , m}, otherwise it is not well deﬁned. In addition,
c has vector relative degree r = [r1 r2 · · · rm] if each ci

0

has relative degree ri and the m × m matrix

A =


(c1, x
(c2, x

r1−1
0
r2−1
0

...

x1)
x1)

(c1, x
(c2, x

x2)
x2)

r1−1
0
r2−1
0

...

· · ·
· · ·

...

(c1, x
(c2, x

xm)
xm)

r1−1
0
r2−1
0

...

(cm, x

rm−1
0

x1)

(cm, x

rm−1
0

x2) · · · (cm, x

rm−1
0

xm)




has full rank. Otherwise, c does not have vector relative
degree.

0

This notion of vector relative degree agrees with the usual
deﬁnition in the state space setting [15]. In particular, c
has vector relative degree r only if for each i the series
(xri−1
xj)−1(ci) is non proper for some j. Here the left-shift
operator for any xi ∈ X is deﬁned on X ∗ by x−1
(xiη) = η
with η ∈ X ∗ and zero otherwise. Higher order shifts are
deﬁned inductively via (xiξ)−1(·) = ξ−1x−1
(·), where
ξ ∈ X ∗. The left-shift operator is assumed to act linearly
and componentwise on RmhhXii. The shufﬂe inverse of any
series C ∈ Rm×mhhXii is given by

i

i

C ⊔⊔ −1 = ((C, ∅)(I − C′)) ⊔⊔ −1 = (C′) ⊔⊔ ∗(C, ∅)−1,

where C′ = I − (C, ∅)−1C is proper, i.e., (C′, ∅) = 0,

and (C′) ⊔⊔ ∗ := Pk≥0(C′) ⊔⊔ k. The relationship between

C ⊔⊔ −1 and the multiplicative inverse operator (FC )−1, that
is, FC (FC )−1 = (FC )−1FC = I, is (FC )−1 = FC ⊔⊔ −1.

Let X0 := {x0}, and R[[X0]] denotes the set of all
commutative series over X0. When c ∈ R[[X0]], Fc[u](t)
[u](t) =
0 )tk/k!. The main inversion tool used in the paper

reduces to the Taylor series Pk≥0(c, xk
Pk≥0(c, xk

is given next.

Theorem 1: Suppose c ∈ RmhhXii has vector relative
degree r. Let y be analytic at t = 0 with generating
series cy ∈ Rm
0), k =
0, 1, . . . , ri − 1, i = 1, 2, . . . , m. Then the input

LC[[X0]] satisfying (cyi, xk

0) = (ci, xk

0 )Exk

0

u(t) =

(cu, xk
0)

tk
k!

,

(3)

∞

Xk=0

is the unique real analytic solution to Fc[u] = y on [0, T ]
for some T > 0, where

,

(4)

cu =(cid:16)(cid:2)C ⊔⊔ −1

⊔⊔ (xr

0)−1(c − cy)(cid:3)◦−1(cid:17)N

the i-th row of (xr
(i, j)-th entry of C is (xri−1

0)−1(c − cy) is (xri

xj)−1(ci).

0

0 )−1(ci − cyi), and the

Observe that this theorem describes the outputs that can
be successfully tracked by Fc, namely, those whose Taylor
series coefﬁcients satisfy certain matching conditions. (The
same conditions appear in the classical papers on dynamic
inversion.) For example, if m = 2 and the vector relative
degree is (2, 2), the Taylor series of the output are subject
to the constraints (cy1, ∅) = (c1, ∅), (cy2, ∅) = (c2, ∅),
(cy1, x0) = (c1, x0), and (cy2 , x0) = (c2, x0), which in turn
puts constraints on the class of admissible output paths.

III. LEFT INVERSE OF BI-STEERABLE CAR KINEMATICS
Consider the bi-steerable car shown in Figure 1. For
simplicity, only the kinematics are considered. So the car is
assumed to have zero mass and move in the plane with the

speed of the car u1 =p ˙x2 + ˙y2 and the front axle steering

angular velocity u2 = α as inputs. The kinematics of the

y

L

!

k!

Forward axle

Rear axle

 

x

Fig. 1. Bi-steerable car

system are therefore

˙x = u1 cos(θ + α),
˙y = u1 sin(θ + α),

˙θ = u1

sin(α − f (α))
L cos(f (α))

,

˙α = u2,

where f (α) := kα with k ∈ R. These dynamics assume the
usual constraints of rolling without slippage of the wheels,
namely,

0 = ˙yf orward cos(θ + α) − ˙xf orward sin(θ + α),
0 = ˙yrear cos(θ + f (α)) − ˙xrear sin(θ + f (α)).

Setting z1 = x, z2 = y, z3 = θ, z4 = α, the outputs are
picked to be the coordinates of the front axle center yi =
zi, i = 1, 2. The corresponding two-input, two-output state
space realization is

cos(z3 + z4)
sin(z4 + z4)
sin((1−k)α)

L cos(kα)

0

˙z1
˙z2
˙z3
˙z4

=





y2 (cid:19) =(cid:18) z1
(cid:18) y1

z2 (cid:19) .




u1 +


0
0
0
1




u2

(5a)

(5b)

Hereafter, the focus is on the k = −0.7 case, which as
explained in [20] is sufﬁcient for the existence of ﬂat outputs.
But this fact in inconsequential here since ﬂat outputs will not
be used. The generating series, c, can be computed directly
from (2) using the vector ﬁelds and output function given in
(5):

c1 = z1,0 + co x1 −

sin(1.7z4,0)
cos(0.7z4,0)

si x2

1 − si x1x2

− co x1x2x2 −

sin(1.7z4,0)
cos(0.7z4,0)

co x1x2x1 + · · ·

c2 = z2,0 + si x1 +

sin(1.7z4,0)
cos(0.7z4,0)

co x2

1 + co x1x2

− si x1x2x2 −

sin(1.7z4,0)
cos(0.7z4,0)

si x1x2x1 + · · · ,

0.5

Fc1

0

−0.5

−1

−1.5

−2

−2.5

 
0

1.4

1.2

1

0.8

0.6

0.4

0.2

0

 
0

Fc2

 

1.5

 

1.5

NDSolve
8th degree approximation

NDSolve
8th degree approximation

0.5

0.5

t

t

1

1

Fig. 2. Mathematica computed (NDSolve) and Fliess operator approx-
imated (degree 8) step response of bi-steerable car (u1(t) = 1.5 and
u2(t) = 0.8, t > 0)

where co := cos(z3,0 + z4,0) and si := sin(z3,0 + z4,0).
In this case, c ∈ R2
GChhXii with X = {x0, x1, x2} since
all sines and cosines in the numerator of every coefﬁcient
can be bounded by 1. Therefore, after some additional
calculations a conservative choice for the growth constants
is Kc = max{z1,0, z2,0} and Mc = 2.4 sec(0.7z4,0). With
z1,0 = z2,0 = z3,0 = 0, z4,0 = z5,0 = 0.2, the step
response (u1(t) = 1.5 and u2(t) = 0.8, t > 0) of the system
was computed using the NDSolve Mathematica function
[18] and is compared against a degree eight Fliess operator
GChhXii, the output
approximation in Figure 2. Since c ∈ R2
y = Fc[u] is well deﬁned on [0, ∞) for all u ∈ Bm
1 [0, T ](R)
and any ﬁnite R, T > 0. [27].

A simple calculation shows that the relative degrees of y1
and y2 are both one, but the system does not have a well
deﬁned vector relative degree. Applying dynamic extension
on u1 yields the augmented system

˙z1
˙z2
˙z3
˙z4
˙z5







=


z5 cos(z3 + z4)
z5 sin(z4 + z4)
sin((1−k)α)
z5

L cos(kα)

0
0




+


0
0
0
1
0




u2+


0
0
0
0
1




¯u1,

(6)

where the new input ¯u1 is taken as the derivative of the
original input u1. This system has vector relative degree r =
[r1 r2] = [2 2] with r1 + r2 = 4 < 5 = n and generating
series

These series are also elements of R2
GChhXii since again
all sines and cosines in the numerator can be bounded
by 1 so that conservative growth constants are Kc =
max{z1,0, z2,0, z5,0} and Mc = 2.4z5,0 sec(0.7z4,0). The
decoupling matrix

A = (C, ∅) =(cid:18) z5,0 si

z5,0 co

co

si (cid:19)

is clearly nonsingular as long as z5,0 6= 0.

Given a desired output function

y(t) =

(cy, xk
0)

tk
k!

,

∞

Xk=0

(7)

(8)

where cy = [cy1 , cy2]T is the generating series of y, the left
inverse cu = [c¯u1 , cu2]T is computed directly from (3)-(4). It
is sufﬁcient here to consider polynomial outputs up to degree
0) = vij for i = 0, 1, 2, 3 and j = 1, 2.
three, so let (cyj , xi
The series

d =(cid:18) d1

d2 (cid:19) := C ⊔⊔ −1

is found to be

⊔⊔ (xr

0)−1(c − cy)

d1 =

v12 si
z5,0

−

v22 co
z5,0

+ z5,0

sin(1.7z4,0)
cos(0.7z4,0)

z5,0

+(cid:18)(cid:18) v13
+(cid:18)v12
+(cid:18) v22 si

z5,0

+0.7z5,0

+ v22

sin(1.7z4,0)
cos(0.7z4,0)

sin(1.7z4,0)

cos(0.7z4,0)(cid:19) si
z5,0(cid:19) co(cid:19) x0

v23

−

+ 1.7z5,0

cos(1.7z4,0)
cos(0.7z4,0)

sin(1.7z4,0) tan(0.7z4,0)

cos(0.7z4,0)

+  v22 co

z2
5,0

−

v12 co
z2
5,0

+

d2 = −v12 co − v22 si

+

v22 co

z5,0 (cid:19) x1
cos(0.7z4,0)! x2 + · · · ,

sin(1.7z4,0)

−(cid:18)v13co − z5,0

sin(1.7z4,0)
cos(0.7z4,0)

+ (v12 si − v22 co) x1 + · · ·

(v22 co + v12 si) + v23si(cid:19) x0

The composition inverse of d is computed componentwise
using the recursive method in [2], [6], [8]. In which case,
the formulas for c¯u1 and cu2 are, respectively,

v22si
z5,0

−

v12co
z5,0

− z5,0

sin(1.7z4,0)
cos(0.7z4,0)

c¯u1 =(cid:0)d◦−1

1

(cid:1)N =

+

1
z2

5,0 (cid:18) − 2v12v22 cos(2(z3,0 + z4,0))

sin(1.7z4,0) cos(1.7z4,0)

c1 = z1,0 + z5,0 co x0 + z5,0 si x0x1 + co x0x2

+ 1.7z4
5,0

cos(0.7z4,0)2

− v13z5,0 si

− z2
5,0

sin(1.7z4,0)
cos(0.7z4,0)

si x2

0 + · · ·

c2 = z2,0 + z5,0 si x0 + z5,0 co x0x1 + si x0x2

+ z2
5,0

sin(1.7z4,0)
cos(0.7z4,0)

co x2

0 + · · · .

+ 1.7v12z2
5,0

cos(1.7z4,0)
cos(0.7z4,0)

+ v2

12 sin(2(z3,0 + z4,0)) − v2

+ 0.7z4
5,0

sin(1.7z4,0)2 tan(0.7z4,0)

cos(0.7z4,0)2

si − v22z2
5,0

sin(1.7z4,0)
cos(0.7z4,0)
22 sin(2(z3,0 + z4,0))

si

2

z

13

12

11

10

9

8

7

6

5

4

3

2

1

0

−1

−2

−9

Start

−8

−7

−6

−5

−4

−3

−2

−1

End

0
z1

1

2

3

4

5

6

7

8

9

2

z

13

12

11

10

9

8

7

6

5

4

3

2

1

0

−1

−2

 
−9

Start

−8

−7

−6

−5

−4

−3

−2

−1

End

0
z1

1

2

3

4

5

6

7

8

9

Fig. 3. Map of area with obstacles

Fig. 4. RRT used to identify the shortest path

 

 

2

z

13

12

11

10

9

8

7

6

5

4

3

2

1

0

−1

−2

 
−9

Start

−8

−7

−6

−5

−4

−3

−2

−1

End

0
z1

1

2

3

4

5

6

7

8

9

Fig. 5. Shorted path extracted from the RRT

+ z0,5 co (cid:18)v23 − 1.7v22z5,0

cos(1.7z4,0)
cos(0.7z4,0)

−z5,0

sin(1.7z4,0)
cos(0.7z4,0)

(v12 + 0.7v22 tan(0.7z4,0))(cid:19)(cid:19) x0 + · · ·

1

z5,0 (cid:18) v2

12
2

+

v2
22
2

cos(2(z3,0 + z4,0)) + v23z5,0 si

cu2 =(cid:0)d◦−1

2

+ v13z5,0 co +

(cid:1)N = v22si + v12co +

22 − v2

(v2

12)

2

−v12v22 sin(2(z3,0 + z4,0))(cid:19) x0 + · · ·

Some key features of these expressions are:

i. The formulas are exact if not truncated. But, of course,
truncation is necessary for implementation. The trun-
cation gives the degree of approximation. Here the
degree of approximation for c¯u1 = (d◦−1
)N and
cu2 = (d◦−1
)N means their truncation is to degree 6.
These truncated inputs are then fed into the 8th degree
approximation of series c via the composition product
described in [8].

1

2

ii. The formulas only need to be computed once. They
can therefore be loaded directly into a micro-controller
inside the vehicle. Then based on measurements of
the current position and steering angle, the input for
tracking the next section of the desired path can be
quickly computed by just numerically evaluating the
formula.

iii. Flat outputs are not required for computing these left

inverses.

iv. One can increase the degree of approximation of the
output tracking by including more input terms if the
computing power is available.

IV. COLLISION AVOIDANCE SYSTEM

A collision avoidance system is now described based on
the left inversion input formula for the bi-steerable car model
developed in the previous section. The basic steps of the
algorithm are as follows:

i. Map the area and obstacles where the bi-steerable car
moves and provide a start location and an end location.

ii. The RRT path planning algorithm described in [16] then
uses the data from the previous step to compute the path
between the start and end locations by ﬁrst computing
a tree and then identifying the shortest path within the
tree from the start location to the end location.

iii. The shortest path is then smoothed and approximated

by a cubic spline.

iv. Each spline section, which is a cubic polynomial, is fed
to the left inversion formula in order to compute the
corresponding control inputs ¯u1 and u2.

v. The inputs ¯u1 and u2 are ﬁnally used to drive the bi-

steerable car.

Consider the following speciﬁc example:

i: Suppose the area with obstacles is the one shown in
Figure 3. Pick the start and end locations to be:

Start :
End :

(−1.5, 9.5)
(0, −1).

ii: The RRT generated for this map is shown in Figure 4.
The shortest path between the given start and end locations
exacted from this RRT is shown in Figure 5.

2

z

13

12

11

10

9

8

7

6

5

4

3

2

1

0

−1

−2

 
−9

RRT shortest path
Smooth path
Cubic spline approximation

 

Start

−8

−7

−6

−5

−4

−3

−2

−1

End

0
z1

1

2

3

4

5

6

7

8

9

Fig. 6. Shortest, smoothed and spline approximated paths

iii: The shortest path is then smoothed and approximated
by cubic splines as shown in Figure 6. The constant terms
of each cubic spline section must coincide with the ﬁnal
position of the previous section, This means that one does
not need to ﬁt the constant terms of the spline approximation.
That is, the condition (c, ∅) = (cy, ∅) in Theorem 1 is always
satisﬁed by the cubic splines in the path approximations. The
linear coefﬁcient of the spline approximation is also subject
to the range conditions of Theorem 1. However, since z4 and
z5 in (6) are just the integrals of u2 and ¯u1, respectively, their
corresponding initial conditions z4,0 and z5,0 can be chosen
arbitrarily as long as z5,0 6= 0, otherwise the decoupling
matrix (7) is singular. Observe that

20

¯u1

0

−20

−40

−60

−80

−100

−120

0

u2

60

40

20

0

−20

−40

−60

−80

−100

−120

−140

0

0.1

0.2

0.3

0.4

0.1

0.2

0.3

0.4

0.5
t

0.5
t

0.6

0.7

0.8

0.9

1

0.6

0.7

0.8

0.9

1

Fig. 7. Control inputs ¯u1 and u2

of the path was chosen to have duration tsim = 0.02. The
left inverse formulas in this case give

¯u1(t) =7.74 − 195.52t + 1592.16t2 + 12925.9t3

− 443203.0t4 + 4.26 × 106t5 + 2.83 × 106t6

and

u2(t) = 6.36 − 142.17t + 386.62t2 − 226.02t3
− 2648.52t4 + 1280.47t5 + 76475.8t6.

Since the degree of the approximation was chosen to be 6,
these inputs give the following errors:

(c, x0) =(cid:18) z5,0 cos(z3,0 + z4,0)

z5,0 sin(z3,0 + z4,0) (cid:19) ,

(9)

y1(t) − ˆy1(t) = 1.33 × 106t7 − 5.10 × 106t8

where z3,0 is known and ﬁxed. Hence, one can always ﬁnd
z4,0 and z5,0 such that (c, x0) matches the desired coefﬁcient
(cy, x0), which comes from the spline approximation. Here
the time interval for the simulation have been normalized to
[0, 1] since only the kinematics are being considered.

iv: The control inputs are now computed section by section.
The ﬁrst spline section has initial conditions

z1,0 = −1.5, z2,0 = 9.5, z3,0 = 1.5,

and the desired outputs of the path are

cy1 = −1.5 + 10.75x0 − 28.15x2

0 + 185.15x3
0

and

cy2 = 9.5 + 14.40x0 + 13.07x2

0 − 24.89x3
0.

As expected, the constant coefﬁcients are automatically equal
to the start position of the car. Also, (9) is solved for z4,0 and
z5,0 6= 0 so that (c1, x0) = (cy1 , x0) = 10.75 and (c2, x0) =
(cy2, x0) = 14.40, which gives

z4,0 = −4.00028, z5,0 = −17.97.

This solution is not unique. Since the overall time of the
simulation was normalized, the time interval for each section

− 2.02 × 107t9 + 3.47 × 107t10 + · · ·

and

y2(t) − ˆy2(t) = − 1.24 × 106t7 + 4.39 × 106t8

+ 2.09 × 107t9 − 2.82 × 107t10 + · · · ,

where yi is the i-th component of y having generating series
cy, and ˆyi = c ◦ cu is truncated to degree 6. The computed
control inputs are shown in Figure 7.
iv: Finally, the computed control inputs ¯u1 and u2 are used to
drive the bi-steerable car as shown in Figure 8. In the same
ﬁgure, the bi-steerable car path is overlapped, as comparison,
with the cubic spline approximation of the shortest path
(avoiding obstacles) computed by the RRT algorithm. The
degree of approximation and smoothness of the bi-steerable
car path can be tuned by increasing or decreasing the
number of partitions of the cubic spline approximation, and
the degree of approximation of the computed left inverses.
Tracking performance will ultimately be bounded by the
amount of computational power available.

V. CONCLUSIONS

A collision avoidance system was described for a bi-
steerable car based on a left inversion formula for Fliess
operators whose generating series have a well deﬁned vector
relative degree. This allows one to integrate directly the

Cubic spline approximation
Bi-steerable car path

 

Start

[8]

, Fa`a di Bruno Hopf algebra of the output feedback group for
multivariable Fliess Operators, Systems & Control Letters, 74 (2014)
64–73.

[9] W. S. Gray, L. A. Duffaut Espinosa, and M. Thitsa, Left inversion
of analytic nonlinear SISO systems via formal power series methods,
Automatica, 50 (2014) 2381–2388.

2

z

13

12

11

10

9

8

7

6

5

4

3

2

1

0

−1

−2

 
−9

[10] A. Hars, Autonomous

cars: The

next

Inventivio
www.inventivio.com/innovationbriefs/2010-01.

Innovation

2010-01,

Briefs

revolution
Nuremberg,

looms,
2010,

[11] J. Hermosillo, C. Pradalier, S. Sekhavat, C. Laugier, and G. Baille,
Towards motion autonomy of a bi-steerable car: Experimental
is-
sues from map-building to trajectory execution, Proc. 2003 IEEE
Inter. Conf. on Robotics & Automation, Taipei, Taiwan, 2003.

[12] J. Hermosillo and S. Sekhavat, Feedback control of a bi-steerable
car using ﬂatness application to trajectory tracking, Proc. 2003 ACC,
Denver, CO, 2003, pp. 3567–3572.

[13] R. M. Hirschorn, Invertibility of nonlinear control systems, SIAM

Journal on Control and Optimization, 17 (1979) 289–297.

[14]

, Invertibility of multivariable nonlinear control systems, IEEE

Transactions on Automatic Control, AC-24 (1979) 855–865.

[15] A. Isidori, Nonlinear Control Systems, 3rd Ed., Springer-Verlag, Lon-

don, 1995.

[16] S. LaValle, Planning Algorithms, Cambridge University Press, New

York, 2006.

[17] J. L´evine, Analysis and Control of Nonlinear Systems: A Flatness-

based Approach, Springer, Berlin, 2009.

[18] Wolfram Research, Inc., Mathematica, Version 10.0, Champaign, IL,

2014.

[19] P. Petrov, Nonlinear path following control for a bi-steerable vehicle,

Information Technologies and Control, 1 (2009) 14–19.

[20] S. Sekhavat and J. Hermosillo, Cycab bi-steerable cars: a new family
of differentially ﬂat systems, Advanced Robotics, 16 (2002) 445–462.
[21] S. Sekhavat, J. Hermosillo, and P. Rouchon, Motion planning for a bi-
Steerable car, Proc. 2001 IEEE Inter. Conf. on Robotics & Automation,
Seoul, South Korea, 2001, pp. 3294–3299.

[22] S. Sekhavat, P. Rouchon, and J. Hermosillo, Computing the ﬂat outputs
of Engel differential systems, the case study of the bi-steerable car,
Proc. 2001 ACC, Arlington, VA, 2001, pp. 3576–3581.

[23] S. N. Singh, A modiﬁed algorithm for invertibility in nonlinear
systems, IEEE Transactions on Automatic Control, AC-26 (1981) 595–
598.

[24]

, Invertibility of observable multivariable nonlinear systems, IEEE

Transaction on Automatic Control, AC-27 (1981) 487–489.

[25] S. A. Tchenderli-Braham and F. Hamerlain, Trajectory tracking with a
hybrid control applied to a bi-steerable car, Proc. 2nd Inter. Conf. on
Systems and Computer Science Villeneuve d’Ascq, France, 2013,
pp. 252–256.

[26] Y. Wang, Differential Equations and Nonlinear Control Systems, Ph.D.

dissertation, Rutgers University, New Brunswick, NJ, 1990.

[27] I. M. Winter-Arboleda, W. S. Gray, and L. A. Duffaut Espinosa,
Expanding the class of globally convergent Fliess operators, Proc.
22nd Inter. Symp. on the Mathematical Theory of Networks and
Systems, Minneapolis, USA, 2016, under review.

−8

−7

−6

−5

−4

−3

−2

−1

End

0
z1

1

2

3

4

5

6

7

8

9

Fig. 8. Cubic spline approximated path and bi-steerable car trajectory

kinematics of the car and a path planning algorithm without
the need for passing through a ﬂat output as is done in
other methods. In principle, the full dynamics could also be
inverted to give a more realistic collision avoidance system.
The method was demonstrated by numerical simulation.

REFERENCES

[1] A. de Luca, G. Oriolo, and M. Vendittelli, Control of wheeled mobile
robots. Experimental overview, in RAMSETE: Articulated and Mobile
Robots for SErvices and TEchnologies, S. Nicosia, B. Siciliano,
A. Bicchi, and P. Valigi, Eds., Springer, London, 2001, pp. 181–226.
[2] L. A. Duffaut Espinosa, K. Ebrahimi-Fard, and W. S. Gray, A
combinatorial Hopf algebra for nonlinear output feedback control
systems, Journal of Algebra, 453 (2016) 609–643.

[3] H. W. Engl and P. K¨ugler, Nonlinear inverse problems: Theoretical
aspects and some industrial applications, in Multidisciplinary Methods
for Analysis, Optimization and Control of Complex Systems, V. Ca-
passo and J. Periaux, Eds., Springer, Heidelberg, 2005 pp. 3–48.

[4] M. Fliess, J. L´evine, P. Martine and P. Rouchon, Flatness and defect
of non-linear systems: introductory theory and examples, International
Journal of Control, 61 (1995) 1327–1361.

[5] N. H. Getz, Dynamic Inversion of Nonlinear Maps with Applications
to Nonlinear Control and Robotics, Ph.D. dissertation, UC Berkeley,
Berkeley, CA, 1996.

[6] W. S. Gray, L. A. Duffaut Espinosa, and K. Ebrahimi-Fard, Recursive
algorithm for the antipode in the SISO feedback product, Proc. 21st
Inter. Symp. on the Mathematical Theory of Networks and Systems,
Groningen, The Netherlands, 2014, pp. 1088–1093.

, Analytic left inversion of multivariable Lotka-Volterra models,
Proc. 54th IEEE Conf. on Decision and Control, Osaka, Japan, 2015,
pp. 6472–6477.

[7]

