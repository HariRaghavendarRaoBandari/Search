Motion and Communication Co-optimization with Path Planning

and Online Channel Estimation†

Usman Ali∗, Hong Cai∗∗, Yasamin Mostoﬁ∗∗ and Yorai Wardi∗

develop an algorithm for maximizing the lifetime of wireless
sensor networks considering both communication and motion
costs of the sensors. Ref. [20] considers a dynamic co-
optimization problem in the setting of optimal control and
develops a Hamiltonian-based algorithm for its solution. All
of the references [17], [18], [19], [20] focus on the robotics
and optimization aspects of the problem while using over-
simpliﬁed models for channel and communication energy
costs. Realistic models of channel fading [10] are used in
[21] and [13] in designing a co-optimization strategy for
balancing a robot’s speed with transmission rate, and [22]
develops an effective algorithm for realizing that strategy.

6
1
0
2

 
r
a

M
 
5

 
 
]

.

C
O
h
t
a
m

[
 
 

1
v
2
7
6
1
0

.

3
0
6
1
:
v
i
X
r
a

Abstract— This paper considers the problem of optimally bal-
ancing motion energy and communication transmission energy
of a mobile robot tasked with transmitting a given number of
data bits to a remote station, while navigating to a pre-speciﬁed
destination in a given amount of time. The problem is cast in
the setting of optimal control, where the robot has to choose its
path, acceleration, and transmission rate along the path so as to
minimize its energy required for transmission and motion, while
satisfying various power and communication constraints. We
use realistic models for the robot’s channel estimation, motion
dynamics, and power and energy costs. The main contribution
of the paper is to show how to co-optimize robot’s path along
with other communication and motion variables. Two versions
of the problem are solved: the ﬁrst is deﬁned ofﬂine by assuming
that all the channel measurements are taken before the robots
starts moving, while in the second the channel estimation is
updated while the robot is in motion, and hence it is solved
online. In both cases we utilize an in-house algorithm that
computes near-optimal solutions in little time, which enables its
use in the online setting. The optimization strategy is described
in detail and validated by simulation of realistic scenarios.

I. INTRODUCTION

Communication-aware mobile robotics is an emergent
ﬁeld of enquiry whose origins are in two related areas
that have been extensively researched in the past twenty
years: mobile sensor networks [1], [2], [3], and networked
robotics systems [4], [5], [6], [7], [8]. A central problem
in communication-aware robotics is in co-optimization of
sensing, communication, and navigation under physical and
resource constraints. More speciﬁcally, the problem of bal-
ancing transmission energy with motion energy has been the
focus of research in recent years [9], [10], [11], [12], [13],
and it is also the subject of this paper.

While optimization of transmission energy and motion
energy has been traditionally explored separately in the
respective literatures on communications and robotics (e.g.,
[14], [15], [16]), only recently the problem of co-optimizing
the two forms of energy has begun to attract attention. In
[17], the authors propose an efﬁcient approximate path plan-
ning algorithm that minimizes motion and communication
energy costs. Ref. [18] optimizes relay conﬁgurations in
data-intensive wireless sensor networks. In [19], the authors

1239225 and NeTS-1321171.

†Research supported in part by the NSF under Grant Numbers CNS-
∗School of Electrical and Computer Engineering, Georgia Insti-
tute of Technology, Atlanta, GA 30332. Email: usmanali@gatech.edu,
ywardi@ece.gatech.edu.
∗∗Department of Electrical and Computer Engineering, University
of California, Santa Barbara, CA 93106. Email: hcai@ece.ucsb.edu,
ymostoﬁ@ece.ucsb.edu.

Ref. [22] is the starting point of this paper. It considers
a robot required to transmit a given number of bits in a
given amount of time to a remote station, while traversing
a predetermined path. The channel quality is variable along
the path, and it is predicted by the realistic model described
in [21]. The considered problem is to compute the proﬁles of
the robot’s acceleration and spectral efﬁciency (transmission
rate per unit bandwidth) that minimize the combined energy
spent on transmission and motion. We cast the problem in
the framework of optimal control, and solved it by using an
in-house algorithm that is simple to code and was shown to
yield fast convergence.

This paper extends the problem and methodology devel-
oped in [22] in the following two ways. First, it adds the
challenging element of path planning by lifting the restriction
that the robot has to follow a pre-determined path. Rather, it
has to compute an optimal trajectory. Second, it considers an
online scenario where the channel quality, generally obtained
by measurements, is updated while the robot is in motion
thereby requiring a re-evaluation of the optimal trajectory
for the cost to go, in contrast to [22] which does a one-time
channel prediction and co-optimization before the robot starts
moving. We point out that we do not use model-predictive
control or rolling horizons, but rather compute the entire
trajectory of the cost-to-go performance functional to the
given ﬁnal time. These enhancements over the setting in
[22] pose signiﬁcant computational challenges. The proposed
scheme handles these challenges in an effective way, as
shown by satisfactory solution for the example-problems
presented in the sequel.

The rest of the paper is organized as follows. Section
II formulates the problem and discusses relevant existing
results. Section III, considering an elaborate example, solves
the problem ofﬂine, while section IV applies the online
version of the algorithm. Finally, Section V concludes the

paper and points out various directions for future research.

II. PROBLEM FORMULATION

This section formulates the optimal control problem, de-
scribes the channel prediction technique employed, presents
the algorithm used, and recounts results of its application to
the ﬁxed-path problem presented in [22].
A. Problem Deﬁnition.

Consider a robot that has to traverse a path between a
source point S ∈ R2 and a destination point D ∈ R2 while
transmitting a given number of bits to a remote station in a
given time-horizon [0, tf ]. The problem is to determine the
robot’s path, acceleration, and transmission rate as functions
of time t ∈ [0, tf ], that minimize the total energy required
for transmission and motion. The power required for motion
depends on the robot’s velocity and acceleration, while its
transmission power depends on its position relative to the
remote station, transmission rate, and the channel quality as
will be detailed below. The channel quality is assessed by
known estimation techniques that are based on spatial mea-
surements which are performed by various devices (such as
static sensors in the ﬁeld or crowdsourcing) and transmitted
to the robot periodically. Generally the robot has to maintain
a threshold reception-quality at the receiver (remote station)
which requires a larger transmission power when the channel
quality is lower.

The motion dynamics of the robot follow Newton’s Law

as follows,

˙x1(t) = x2(t),
˙x2(t) = u(t),

(1)
where x1 ∈ R2 is the position of the robot in the plane, x2 ∈
R2 denotes its velocity, and u ∈ R2 is its acceleration. The
initial condition of this equation is x1(0) = S and x2(0) = 0.
According to Ref. [15], the power required for the robot’s
motion has the form

Pm(t) = k1||u(t)||2 + k2||x2(t)||2 + k3||x2(t)|| + k4

+ k5||u(t)|| + k6||u(t)|| · ||x2(t)||,

(2)
for given constants ki ≥ 0, i = 1, . . . , 6. The power required
for transmitting data to the remote station is given by

2R(t) − 1

K

Pc(t) =

s(x1(t)),

(3)
where R(t) ≥ 0 is the spectral efﬁciency of the channel
at time t and position x1(t), K is a constant depending
on the threshold bit error rate acceptable at the receiver,
and s(x1(t)) is the estimated channel quality at position
x1(t) ∈ R2; see Section II-B for details. Let Q be the total
number of bits the robot has to transmit, and let B denote the
channel’s bandwidth. Then the following equation represents
the constraint that the robot has to transmit Q bits during its
motion,

(cid:90) tf

0

R(t)dt =

Q
B

:= c.

this constraint without

To represent
the integral, which
would be more amenable to an application of the algorithm
described below, we introduce an auxiliary state variable,
x3 ∈ R, deﬁned by the equation

˙x3 = R(t),

(4)

with the boundary conditions x3(0) = 0 and x3(tf ) = c.
Other ﬁnal-time constraints on the state variable (position
and velocity) are x1(tf ) = D and x2(tf ) = 0. We also
assume upper-bound constraints on u(t) and R(t) of the form

0 ≤ ||u(t)|| ≤ umax,
0 ≤ R(t) ≤ Rmax,

(5)

for given umax > 0 and Rmax > 0.
The related optimal control problem is deﬁned as follows.
Its input is (u(t), R(t)) ∈ R2 × R, t ∈ [0, tf ], its state is
(x1(t), x2(t), x3(t)), and its dynamics are given by Eqs. (1)
and (4) with the initial conditions x1(0) = S, x2(0) = 0,
and x3(0) = 0. Its performance function, to be minimized,
is

(cid:0)Pm(t) + γPc(t)(cid:1)dt,

(6)

(cid:90) tf

¯J :=

0

where Pm(t) and Pc(t) are the motion power and transmis-
sion power deﬁned, respectively, by Eqs. (2) and (3), and
γ > 0 is a given constant. The problem is to minimize
¯J subject to the above dynamic equations, the upper-bound
constraints on the input as deﬁned by Eq. (5), and the ﬁnal-
state constraints x1(tf ) = D, x2(tf ) = 0, and x3(tf ) = c.
We handle the ﬁnal-state constraints with a penalty func-
tion of the form C1||x1(tf )−D||2 +C2||x2(tf )||2 +C3||x3−
c||2, for constants C1 > 0, C2 > 0, and C3 > 0. The
resulting optimal control problem now has the following
form: Minimize the cost functional J deﬁned as

(cid:90) tf
s(x1) + γ(cid:0)k1||u(t)||2 + k2||x2(t)||2
+ k3||x2(t)|| + k4 + k5||u(t)|| + k6||u(t)||˙||x2(t)||(cid:1)(cid:19)

dt
+ C1||x1(tf ) − D||2 + C2||x2(tf )||2 + C3||x3(tf ) − c||2,
(7)

(cid:18) 2R(t) − 1

J =

K

0

subject to the dynamic equations

˙x1(t) = x2(t),
˙x2(t) = u(t),
˙x3(t) = R(t),

x1(0) = S
x2(0) = 0
x3(0) = 0,

and the constraints

||u(t)|| ≤ umax,
0 ≤ R(t) ≤ Rmax.

B. Online Channel Prediction

Assuming the common MQAM modulation for a robot’s
communication to the remote station, the required transmit
power at time t can be characterized as [23]

˜Pc(t) = (2R(t) − 1)/(KΥ(x1(t))),

(8)

where K = −1.5/ ln(5pb,th), pb,th is the given Bit Error
Rate (BER) threshold at the receiver, R(t) is the spectral
efﬁciency at time t, x1(t) ∈ R2 is the robot’s position
at time t, and Υ(x1(t)) the instantaneous channel-to-noise
ratio (CNR) at x1(t). It is well known that the CNR can be
modeled as a random process with three components: path
loss, shadowing and multipath fading[23]. As shown in [10],
based on a small number of a priori channel measurements,
a Gaussian random variable, ΥdB(q), can best characterize
the CNR (in the dB domain) at an unvisited location q, the
mean and variance of which are given by

ˆθ + ΨT(q)Φ−1(cid:0)Y − HQ ˆθ),

ΥdB(q) = Hq
Σ(q) = ˆξ2

dB + ˆρ2

dB − ΨT(q)Φ−1Ψ(q),

... H T
qm

]T , Φ = Ω + ˆρ2

where Y is the stacked vector of m a priori gathered
CNR measurements, Q = {q1, ..., qm} denotes the mea-
surement positions, Hq = [1 − 10 log10((cid:107)q − qb(cid:107))],
dB Im with [Ω]i,j =
HQ = [H T
q1
dB exp(−(cid:107)qi − qj(cid:107)/ˆη), for i, j ∈ {1, ..., m}, and Ψ(q) =
ˆξ2
dB exp(−(cid:107)q − qm(cid:107)/ˆη)]T . The
dB exp(−(cid:107)q − q1(cid:107)/ˆη) ... ˆξ2
[ ˆξ2
terms ˆθ = [ ˆKPL ˆnPL]T , ˆξdB, ˆη and ˆρdB are the estimated
channel parameters. See [10] for more details on the esti-
mation of channel parameters and the performance of this
framework in channel prediction.

Based on this framework, the CNR at unvisited location
x1(t) can be predicted as a lognormal random variable (in
the linear domain). The expected trasmit power Pc(t) is given
by

2R(t) − 1

E

Pc(t) =

Note that for lognormally distributed Υ(x1(t)), we have

1

Υ(x1(t))

= exp

1

,

Υ(x1(t))

(10)
where Υ(x1(t)) = 10ΥdB(x1(t))/10. Equation (10) provides
an estimate of the predicted channel quality at x1(t) and we
, substituting which in Eq. (9)
let s(x1(t)) = E
leads to Eq. (3) for computing the transmit power.

Υ(x1(t))

(cid:104)

1

This framework is suitable to a setting where the channel
prediction is updated as more channel measurements become
available. Assume that the robot has a few channel measure-
ment collected a priori (e.g. by static sensors in the ﬁeld),
based on which an initial prediction of channel quality over
the workspace can be computed. The robot travels along the
path obtained from minimizing J as deﬁned in (7) with the
initial channel prediction. As the robot moves, it is provided
with additional channel measurements (by gathering more
samples along its path, through crowdsourcing and/or by
other robots in the ﬁeld), which enables it to predict the
channel quality more accurately. With such additional data, it
solves the problem again for the remaining path, where in Eq.
(7) the starting time is the present time, say t0 ∈ [0, tf ], and
the initial condition (state) consists of the state x(t0) that has
been obtained by the motion and transmission dynamics up

1

(cid:21)
(cid:20)
(cid:33)
(cid:19)2 Σ(x1(t))

Υ(x1(t))

.

2

K

(cid:32)(cid:18) ln 10
(cid:105)

10

(cid:20)

E

(cid:21)

to time t0. The details of this online optimization procedure
will be presented in Section IV.

C. Hamiltonian-Based Algorithm

Optimization algorithms typically are based on two com-
puted objects at a given iteration: a direction (e.g., of
descent), and a step size along it. Recently we developed
an algorithm which is suitable for a class of power-aware
optimal control problems [20], [22] and [24]. Cumulative
experience with it reveals some favorable computational
properties including fast convergence towards a local min-
imum. This does not mean fast asymptotic convergence,
which characterizes an algorithm’s behavior close to a local
minimum, but rather large strides towards a region of a
(local) minimum. A key innovation in the algorithm is its
choice of a descent direction, which is not based on gradient
descent but rather follows an alternative approach requiring
little computing efforts. We next explain the structure of
the algorithm and summarize its performance on the power-
aware problem considered in [22].

Consider the abstract Bolza optimal control problem where

the system’s dynamics are deﬁned by the equation

˙x = f (x, u)

with an initial condition x(0) := x0, where x ∈ Rn, u ∈
Rk, and f : Rn × Rk → Rn is Lipschitz continuous in x
and continuous in u. Given a ﬁnal time tf > 0, a running
cost function L : Rn × Rk → R, and a terminal-state cost
function φ : Rn → R, deﬁne the cost functional as

(cid:90) tf

0

The optimal control problem, considered, is to minimize J
subject to the pointwise constraints u(t) ∈ U, where U ⊂ Rk
is an input-constraint set. We make the following assumption:
Assumption 1: 1). The function f (x, u) is afﬁne in u ∈ U
for every x ∈ Rn, and the function L(x, u) is convex in
u ∈ U for every x ∈ Rn.
2). The set U is compact and convex.

Let p(t), t ∈ [0, tf ], denote the costate (adjoint) trajectory

deﬁned by the equation

˙p = −(cid:16) ∂f

∂x

(cid:17)(cid:62)

p −(cid:16) ∂L

(cid:17)(cid:62)

∂x

(x, u)

with the boundary condition p(tf ) = ∇φ(x(tf ), and let

H(x, u, p) := p(cid:62)f (x, u) + L(x, u)

denote the Hamiltonian function (see, e.g., Ref. [25]). The
kind of problems for which our algorithm is suitable have the
property that, for given x ∈ Rn and p ∈ Rn, a minimum
value of the Hamiltonian H(x, w, p), over w ∈ U, can be
computed via a simple, explicit formula.

Any implementation of the algorithm would require ap-
proximations associated with computations performed only
at time-points t lying in a ﬁnite grid in the interval [0, tf ].
However, it is easier to describe the algorithm in its abstract,
conceptual form where computations are performed at every

(9)

J :=

L(x, u)dt + φ(x(tf )).

t ∈ [0, tf ]. This is what we do in the present abstract descrip-
tion, but will specify implementation details, including the
choice of a grid, when describing simulation experiments in
the sequel. In the following description of the algorithm, we
refer to the control function u(t), t ∈ [0, tf ], by the boldface
notation u.

ALGORITHM

Parameters: Constants α ∈ (0, 1) and β ∈ (0, 1). Given a

control u, compute the next control unext as follows:

1. Direction from u: Compute (numerically) the state and
costate trajectories x(t) and p(t), t ∈ [0, tf ]. For every t ∈
[0, tf ], compute a pointwise (t-dependent) minimizer of the
Hamiltonian denoted by u(cid:63)(t), namely, a point u(cid:63)(t) ∈ U
satisfying

(cid:16)

H(x(t), w, p(t)) | w ∈ U(cid:17)

u(cid:63)(t) ∈ argmin

.

Deﬁne u(cid:63) to be the function u(cid:63)(t), t ∈ [0, tf ].1 Deﬁne the
direction from u to be d(t) := u(cid:63)(t) − u(t), namely, in
functional notation, d = u(cid:63) − u.

2. Step size along the direction d: Deﬁne

(cid:90) tf
(cid:0)H(x(t), u(cid:63)(t), p(t)) − H(x(t), u(t), p(t))(cid:1)dt.
(cid:110)
(cid:111)
j = 0, 1, . . .(cid:12)(cid:12) J(u + βjd) − J(u) ≤ αβjθ(u)

θ(u) =
Compute k ∈ {0, 1, . . . ,} deﬁned as

k = min

0

and set the step size, λ, to be λ = βk.

3. Update: Set unext to be

unext = u + λd.

As we pointed out, the main innovation of the algorithm
is in the choice of the direction in Step 1, while Step 2
describes a standard Armijo step size; see [26] for extensive
discussions thereof.

The direction is not based on explicit gradient compu-
tations but rather comprises a form of conjugate gradient,
and we believe that this plays a role in the fast convergence
of the algorithm that has been noted in various simulation
experiments. In particular, Fig. 2 and Table I in [22], consid-
ering a one-dimensional power-aware problem, show that the
algorithm makes most of its descent towards the minimum
value of J in under 10 iterations. The next section exhibits
similar performance of the algorithm for the path-planning
problem at hand.

III. PATH PLANNING WITH MOTION AND

COMMUNICATION CO-OPTIMIZATION

In this section, we consider the application of the algo-
rithm to the problem deﬁned in section II. The Hamiltonian

1There may arise measurability issues due to the explicit characterization
of u(cid:63)(t) for all t in the uncountable set [0, tf ]. However, in a grid-based
implementation these issues will be avoided since t would lie in a ﬁnite set.

s(x1) + γ(cid:0)k1||u||2

associated with the optimal control problem (7) is

H(x, [u, R], p) = pT

+ k2||x2||2 + k3||x2|| + k4 + k5||u|| + k6||u||||x2||(cid:1),

2 u + p3R +

1 x2 + pT

2R − 1

K

(12)
where the costates p1 ∈ R2 , p2 ∈ R2, and p3 ∈ R are
deﬁned by the adjoint equations

˙p1 = − 2R − 1
(cid:18)
K
˙p2 = −p1 − γ

∂s(x1)

,

∂x1

˙p3 = 0,

2k2x2 + k3

x2

||x2|| + k6||u|| x2
||x2||

(cid:19)

,

with terminal constraints p1(tf ) = 2C1(x1(tf ) − D),
p2(tf ) = 2C2x2(tf ) and p3(tf ) = 2C3x3(tf ) − c), respec-
tively.

In the forthcoming we assume that k5 = k6 = 0 in (12) as
we did in [15]. The minimizer of this Hamiltonian subject
to the input constraints can be seen to be given by
||p2|| ≤ umax
||p2|| > umax,

u(cid:63) =

2γk1

if

if

1

1

,

− p2
− p2||p2|| umax,
(cid:18) −p3K

2γk1

2γk1

(cid:19)

ln(2)s(x1)
if

, if p3 ≤ − (ln(2)s(x1))
1

(cid:18) −p3K

(cid:19)

K

ln

ln(2)
otherwise.

ln(2)s(x1)

> Rmax



1

ln

ln(2)

Rmax,

0,

R(cid:63) =

,
(11)

APPLICATION:

/

Consider a robot that is tasked to move from the initial
point S = (20, 40) to the ﬁnal point D = (10, 5) in
the plane, and it has to transmit 150 bits/Hz to a remote
station located at qb = (5, 5). The time budget available
for the task is 40 seconds. The acceleration and spectral
efﬁciency can take maximum values of umax = 0.5m/s2 and
Rmax = 6 Bits/Hz
sec, respectively. The balancing factor
between motion and communication was set to γ = 0.01,
and the constants C1, C2 and C3 are set to 10, 50 and
10, respectively. The Armijo step size parameters are set to
α = 0.1 and β = 0.5. The initial controls u0(t) and R0(t) are
both set to zero. The integration step size for the simulation is
set to dt = 0.1 seconds, and the algorithm is programmed to
run for 500 iterations. However, the algorithm is terminated
whenever the Armijo parameter k in (11) is greater than 50,
indicating that a local minimum has been approached.

This robotic operation is performed under a simulated
wireless channel with realistic parameters over an area of
50m×50m. The channel parameters based on [10] and [22],
are KP L = −41.34, nP L = 3.86, ξdB = 3.20, η = 3.09m
and ρdB = 1.64. The receiver thermal noise is −110 dBm
and the BER threshold is set to pb,th = 2 × 10−6. This
channel can be predicted with few measurements over the

ﬁeld by using the methodology summarized in Section II-
B. To illustrate this point, Fig. 1 shows a sample simulated
wireless channel generated with the parameters listed above,
for the 250, 000 points in the plane. It is then predicted at
all these points based on only 500 a priori known randomly-
spaced channel samples (0.2%) over the ﬁeld and the result
is shown in Fig. 2. The two results are quite similar.

Fig. 1. Simulated wireless channel over the workspace.

Fig. 2. Predicted channel based on 500 measurements.

A typical cost (J) vs. iteration count is depicted in Fig. 3.
Evidently the algorithm reaches values close to its obtained
minimum in few iterations. In fact, the computed cost is
reduced from the initial value of 2.3872×105 to 799.63 after
20 iterations, while the cost after 56 iterations is 565.13 when
k became greater than 50. Fig. 3 also shows the tail of the
cost trajectory and evidently it starts ﬂattening after iteration
20. The 56 steps of the algorithm took 0.83 seconds of
CPU time on an Intel dual-core computer with i5 processor
running at 2.7 GHz.

The total motion and communication cost (6), excluding
the penalty term, is ¯J = 475.10, and the ﬁnal values of

Fig. 3. Cost as function of iteration count.

state variables are x1(tf ) = (9.8, 5), x2(tf ) = (0.2,−0.8),
and x3(tf ) = 149.7. We note a mild discrepancy from the
desired ﬁnal values of x1(tf ) = (10, 5), x2(tf ) = (0, 0),
and x3(tf ) = 150, but it can be reduced by choosing larger
penalty terms C1, C2, and C3. As a matter of fact, a run of
the algorithm with C1 = 500, C2 = 500, and C3 = 500 gave
ﬁnal states of x1(tf ) = (9.99, 5), x2(tf ) = (−0.08,−0.68),
and x3(tf ) = 149.99; an initial cost of J = 1.1913×107, and
a ﬁnal total mobility and communication cost of ¯J = 497.04
after 500 iterations. The CPU time of the run was 7.14
seconds. It is not surprising that the initial cost is higher since
the penalty terms are larger, and for the same reason, the
algorithm drives the control parameters to a more restricted
set and hence the ﬁnal energy cost is expected to be higher
as well. The CPU times often are larger in penalty-function
methods with larger penalty terms.

Fig. 4 shows the log plot of predicted channel quality
(s(x1) = E[1/Υ(x, y)], where Υ(x, y) is the received CNR
at position x1 = (x, y)) and the path taken by the robot in the
plane. Smaller values of s(x1) correspond to good channel
quality and vice versa. The robot starting and end positions
are marked as a square and a diamond, respectively, in all the
ﬁgures. Instead of following a straight line between them, the
robot takes a detour towards areas with predicted relatively
good channel quality. For instance, the point of best channel
quality is qb = (5, 5), namely the location of base station,
and hence the robot veers towards this point before turning
away towards its destination point.

Fig. 5 depicts a three-dimensional graph of the robot’s
motion, where the t axis representing time and the motion is
in the x− y plane. The upper, blue curve represents the ﬂow
of time from 0 to 40 seconds, and the position of the robot
at time t is seen by projecting the corresponding point on
the upper curve onto the x − y plane, where it is indicated
by a corresponding point on the red curve. Fig. 6 shows the
acceleration of the robot along its path, where lengths of the
arrows represent its magnitude, and Fig. 7 shows the speed

0102030405060iterations00.511.522.5J×105Plot of Cost vs Iterations2025303540455055iterations200400600800JTail of Costof the robot along its path.

Fig. 6. Acceleration of the robot along its path.

Fig. 4.
channel quality.

Path followed by the robot, veering towards regions of better

Fig. 7. Velocity of the robot along its path.

Fig. 5. Position of the robot as a function of time.

The spectral efﬁciency of the robot is shown along its path
in Figure 8, where the path is marked by ﬁlled red circles,
and the magnitude of spectral efﬁciency at corresponding
points is marked in blue. Fig. 9 shows the spectral efﬁciency
vs time. It can be seen that the robot transmits with higher
spectral efﬁciency and hence at a higher data rate in regions
of better channel quality.2 This is not surprising since, in
regions of higher channel quality, the robot can transmit more
message bits to the base station with less communication
power.

2Assuming a constant available bandwidth, transmission rate is propor-

tional to spectral efﬁciency.

These ﬁgures show that the robot veers towards regions
of predicted better channel-quality. Within these regions the
required transmission power is lower, and hence the robot
slows down and increases spectral efﬁciency and transmis-
sion rate in order to send a larger number of message bits.

IV. ONLINE OPTIMIZATION

This section extends the algorithm to a realistic and
practical online setting, where the robot obtains new channel
measurements while in motion. It does not discard the older
measurements, but rather appends them by the new data in
order to enhance its channel estimation.

The online optimal control problem is to minimize the cost

040102030t30y2040Position of Robot Vs. Time plot201810x1614121008timeposition8101214161820x510152025303540yAcceleration u at different points in planeAccelerationPosition00.20.4400.60.81||v||1.21.4Velocity at different points in planey202018x1614121008velocitypositionwhere t0 ∈ [0, tf ] is the time at which the optimization
is performed, and the terms a1 and a2 are the current
position and velocity of the robot at time t0, and ¯c :=
(c − x3(t−
0 )) is the number of bits per unit frequency that
remains to be transmitted in the time-interval [t0, tf ]. The
online approach solves this problem each time a channel
estimation is performed, typically at a ﬁnite number of times
during the horizon [0, tf ]. The initial control point of each
such a run of the algorithm consists of the remaining input
control computed by its previous run.

The considered problem is the one discussed in Section
III, except that the robot performs channel prediction every
10 seconds, and each prediction is based on 100 new channel
measurements taken at random locations. Also the initial
run, at t0 = 0, solves the ofﬂine problem with 100 channel
samples. The combined time for channel prediction and a
run of the algorithm was about 2 seconds and took under 50
iterations of the algorithm’s run.

The results of the simulation are shown in Fig. 10 and Fig.
11, where the position of the robot at the end of each pred-
ication and optimization cycle (10 seconds) is indicated by
a circle. Fig. 10 shows the computed optimal trajectories for
each prediction-optimization cycle from the current time to
the ﬁnal time. A concatenation of the computed trajectories,
which the robot actually would traverse, is indicated by the
red path in Fig. 11, while the dashed blue path indicates the
trajectory computed by the ofﬂine algorithm at time t0 = 0,
based on the initial channel prediction. The total energy
consumed (Eq. (6)) in the ofﬂine solution (dashed blue path
Fig. 11) is ¯J = 371, while the solution of the online problem
(red path in Fig. 11) yields a lower value, ¯J = 304.

Fig. 8. The robot’s spectral efﬁciency along its path.

Fig. 9. The robot’s spectral efﬁciency vs. time.

functional Jt0, deﬁned as

(cid:18) 2R(t) − 1

(cid:90) tf
s(x1) + γ(cid:0)k1||u(t)||2 + k2||x2(t)||2
+ k3||x2(t)|| + k4 + k5||u(t)|| + k6||u(t)||||x2(t)||(cid:1)(cid:19)

dt

Jt0 =

t0

K

+ C1||x1(tf ) − D||2 + C2||x2(tf )||2 + C3||x3(tf ) − ¯c)||2,
(13)

subject to the dynamics

˙x1(t) = x2(t),
˙x2(t) = u(t),
˙x3(t) = R(t),

x1(t0) = a1
x2(t0) = a2
x3(t0) = 0

and the constraints

0 ≤ ||u(t)|| ≤ umax,
0 ≤ R(t) ≤ Rmax,

Fig. 10. Online optimization after every 10 seconds.

V. CONCLUSIONS AND FUTURE RESEARCH

We considered the problem of co-optimization of com-
munication and motion power of a robot that is required
to transmit a given number of bits to a remote station in a

20Spectral efficiency at different points in plane1500.51401.52x2.5R33.53044.510y201050Spectral EfficiencyPosition0510152025303540t (sec)3.23.43.63.844.2RSpectral Efficiency Vs Time-505101520x0510152025303540yOnline Optimizationupdate 0update 1update 2update 3[10] M. Malmirchegini and Y. Mostoﬁ, “On the spatial predictability of
communication channels,” IEEE Transactions on Wireless Communi-
cations, vol. 11, no. 3, pp. 964–978, March 2012.

[11] A. Ghaffarkhah and Y. Mostoﬁ, “Communication-aware motion plan-
ning in mobile networks,” IEEE Transactions on Automatic Control,
special issue on Wireless Sensor and Actuator Networks, vol. 56,
no. 10, pp. 2478–2485, 2011.

[12] Y. Yan and Y. Mostoﬁ, “Robotic router formation in realistic com-
munication environments,” IEEE Transactions on Robotics, vol. 28,
no. 4, pp. 810 – 827, August 2012.

[13] ——, “To go or not to go on energy-aware and communication-aware
robotic operation,” IEEE Transactions on Control of Network Systems,
vol. 1, no. 3, pp. 218 – 231, July 2014.

[14] A. J. Goldsmith and S.-G. Chua, “Variable-rate variable-power MQAM
for fading channels,” IEEE Transaction on Communications, vol. 45,
no. 10, pp. 1218–1230, October 1997.

[15] P. Tokekar, N. Karnad, and V. Isler, “Energy-optimal trajectory plan-

ning for car-like robots,” Autonomous Robots, pp. 1–22, 2013.

[16] Y. Mei, Y.-H. Lu, Y. C. Hu, and C. S. G. Lee, “Deployment of
mobile robots with energy and timing constraints,” IEEE Transaction
on Robotics, vol. 22, no. 3, pp. 507–522, June 2006.

[17] C. C. Ooi and C. Schindelhauer, “Minimal energy path planning for
wireless robots,” Mobile Networks and Applications, vol. 14, no. 3,
pp. 309–321, January 2009.

[18] F. El-Moukaddem, E. Torng, G. Xing, and G. Xing, “Mobile relay
conﬁguration in data-intensive wireless sensor networks,” IEEE Trans-
actions on Mobile Computing, vol. 12, no. 2, pp. 261–273, 2013.

[19] C. Tang and P. McKinley, “Energy optimization under informed
mobility,” IEEE Transactions on Parallel and Distributed Systems,
vol. 17, no. 9, pp. 947–962, 2006.

[20] H. Jaleel, Y. Wardi, and M. Egerstedt, “Minimizing mobility and com-
munication energy in robotic networks: An optimal control approach,”
in Proceedings of the American Control Conference, Portland, OR,
2014, pp. 2662 – 2667.

[21] Y. Yan and Y. Mostoﬁ, “Co-optimization of communication and
motion planning of a robotic operation under resource constraints and
in fading environments,” IEEE Transactions on Wireless Communica-
tions, vol. 12, no. 4, pp. 1562–1572, 2013.

[22] U. Ali, Y. Yan, Y. Mostoﬁ, and Y. Wardi, “An optimal control approach
for communication and motion co-optimization in realistic fading
environments,” in Proceedings of the American Control Conference,
2015, pp. 2930–2935.

[23] A. Goldsmith, Wireless Communications.

Cambridge University

Press, 2005.

[24] M. Hale, Y. Wardi, H. Jaleel, and M. Egerstedt, “Hamiltonian-based
algorithm for optimal control of switched-mode hybrid systems,” in
Technical Memorandum, Georgia Tech, 2014.

[25] A. E. Bryson and Y.-C. Ho, Applied optimal control: optimization,

estimation and control. CRC Press, 1975.

[26] E. Polak, Optimization: algorithms and consistent approximations.

Springer-Verlag New York, Inc., 1997.

Fig. 11. Ofﬂine Vs. Online optimized Trajectories

pre-speciﬁed amount of time, while moving between a given
starting point and an end point. The problem is to compute
the robot’s optimal path,and acceleration and transmission
rate along this path. Both ofﬂine and online versions of
the problem are considered and solved by simulation of
realistic channel environments. Future work would focus on
extending the results from the case of a single robot to that
of multiple agents having to perform coordinated tasks while
maintaining formation in the face of limited energy sources.

REFERENCES

[1] J. Cortes, S. Martinez, T. Karatas, and F. Bullo, “Coverage control for
mobile sensing networks,” in Proceedings of the IEEE International
Conference on Robotics and Automation, vol. 2, 2002, pp. 1327–1332.
[2] Y. Mostoﬁ, T. Chung, R. Murray, and J. Burdick, “Communication
and Sensing Trade Offs in Decentralized Mobile Sensor Networks: A
Cross-Layer Design Approach,” in Proceedings of the International
Conference on Information Processing in Sensor Networks, Los An-
geles, CA, April 2005, pp. 118–125.

[3] N. E. Leonard, D. Paley, F. Lekien, R. Sepulchre, D. M. Fratantoni,
and R. E. Davis, “Collective motion, sensor networks, and ocean
sampling,” Proceedings of the IEEE, vol. 95, no. 1, pp. 48–74, 2007.
[4] F. Bullo, E. Frazzoli, M. Pavone, K. Savla, and S. L. Smith, “Dynamic
vehicle routing for robotic systems,” Proceedings of the IEEE, vol. 99,
no. 9, pp. 1482–1504, September 2011.

[5] M. M. Zavlanos, M. B. Egerstedt, Y. C. Hu, and G. J. Pappas, “Graph-
theoretic connectivity control of mobile robot networks,” Proceedings
of the IEEE, vol. 99, no. 9, pp. 1525 – 1540, July 2011.

[6] H.-L. Choi, L. Brunet, and J. How, “Consensus-based decentralized
auctions for robust task allocation,” IEEE Transactions on Robotics,
vol. 25, no. 4, pp. 912–926, 2009.

[7] S. L. Smith, M. Schwager, and D. Rus, “Persistent robotic tasks: Mon-
itoring and sweeping in changing environments,” IEEE Transaction on
Robotics, vol. 28, no. 2, pp. 410–426, April 2012.

[8] J. Marden, G. Arslan, and J. Shamma, “Cooperative control and po-
tential games,” IEEE Transactions on Systems, Man, and Cybernetics,
Part B: Cybernetics, vol. 39, no. 6, pp. 1393–1407, 2009.

[9] Y. Mostoﬁ, M. Malmirchegini, and A. Ghaffarkhah, “Estimation of
communication signal strength in robotic networks,” in Proceedings
of the IEEE International Conference on Robotics and Automation,
Anchorage, Alaska, May 2010, pp. 1946–1951.

-505101520x510152025303540yOffline Vs Online Optimizationinitial guessoptimized trajectory