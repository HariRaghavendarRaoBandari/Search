6
1
0
2

 
r
a

 

M
7
1

 
 
]
L
F
.
s
c
[
 
 

1
v
6
2
4
5
0

.

3
0
6
1
:
v
i
X
r
a

A Short Note on Inﬁnite Union/Intersection

of Omega Regular Languages ∗

Wanwei Liu

School of Computer Science

National University of Defense Technology

Changsha, China, 410073

1 A Basic Observation

The most impressive non-star-free property, ﬁrst pointed out by Wolper [Wol83],
“p holds at every even moment” (we in what follows refer to it as P(2)) can-
not be expressed by any LTL [Pnu77] formula. As a consequence, numerous
extensions or LTL have been presented, such as ETL [VW94], QLTL [SVW87],
RLTL [LS07], linear-time µTL [BB87] etc, and all of them are known to be as ex-
pressive as (nondeterministic) B ¨uchi automata [B ¨uc62], alternatively, ω-regular
languages.

Indeed, L (P(2)) = Tk∈N L (X2kp), and this indicates that star-free languages
are not closed under inﬁnite intersection. It naturally enlightens us to make
one step ahead, and now the question of interest is:

“Are ω-regular languages closed under inﬁnite union/intersection?”

For this, we just consider the language Sk∈N L (P(k)), which consists of all
ω-words along which p holds periodically.
Theorem 1 The language Sk∈N L (P(k)) is not ω-regular.
Proof. Assume by contradiction that this language is ω-regular, then there is
a nondeterministic B ¨uchi automaton A precisely recognizing it. Namely, each
ω-word being of the form (p; ¬pk)ω must belong to L (A), where k ∈ N.

W.o.l.g., suppose that A has n states, and let us ﬁx some m > n + 1, then A

has an accepting run over the word w = (p; ¬pm)ω, say σ(0), σ(1), . . .

From the Pumping lemma, for each t ∈ N, there exists a pair (i, j), s.t.
0 < i < j < m + 1, and σ(t × (m + 1) + i) = σ(t × (m + 1) + j). This implies that, for
each ℓ, the word

[(p · ¬pi−1) · (¬p)(j−i)×ℓ · (¬p)m− j] · (p · ¬pm)ω

∗The author would thank Normann Decker, Daniel Thoma, Fu Song, Lei Song & Lijun Zhang

for the fruitful discussions on this problem.

1

is also acceptable by A with the run

σ(0), σ(1), . . . , σ(i), σ(i + 1), . . . , σ(j) = σ(i), . . . , σ(i + 1), . . . , σ(j)
|                                                   {z                                                   }

, σ(j + 1), . . .

ℓ times

which is deﬁnitely accepting.

Likewise and stepwise, we may obtain a sequence of omega words as fol-

lowings:

- w0 = (p · ¬pm)ω.

- w1 = (p · ¬pL1) · (p · ¬pm)ω.

- w2 = (p · ¬pL1) · (p · ¬pL2) · (p · ¬pm)ω.

- · · ·

where L1 < L2 < L3 < · · ·

Then, A also has an accepting run on the limit of the sequence

w∞ = (p · ¬pL1) · (p · ¬pL2) · (p · ¬pL3) · . . . .

thus we can conclude that w∞ ∈ L (A).

However, w∞ could not have a “period” on p — because, for every number
k, there must exist some Lc > k — this implies that the distance between two
adjacent occurrences of p will be larger than k in the future.

Sk∈N L (P(k)) is regular.

Thus, we have got a contradiction1, and it lies from the assumption that
(cid:3)
Observe that each L (P(k)) is regular, but it is not the case for the union of
all such languages, and hence regular languages are not closed under inﬁnite
union and/or intersection.

2 Adding Step Variables and Quantiﬁers?

As a possible solution of expressing the aforementioned property, one may or-
thogonally add step variables as well step quantiﬁers in temporal logics involving
next operator (X).
In a (closed) formula, a step variable is introduced by a
quantiﬁer and appears associated with a next operator.

Syntax and semantics of such kind of extensions can be naturally and suc-
cinctly obtained w.r.t. the underlying logics. As an example, let P be the set
of propositions, and let K be the collection of all step variables, formulae (in
PNF, ranging over f , g, etc) of LTL with such features can be described by the
following abstract grammar.

f F ⊤ | ⊥ | p | ¬p | f ∧ f | f ∨ f | X f | Xk f | f U f | f R f | ∃k. f | ∀k. f

1Remind that an ω-word w ∈ L (A) iﬀ p rises periodically along w.

2

where p ∈ P and k ∈ K . The satisfaction (|=) of a formula can be deﬁned w.r.t.
an ω-word π ∈ (2P)ω, a position i ∈ N and a valuation v : K → N. Most cases
are deﬁned as routine, and

• π, i, v |= Xk f iﬀ π, i + v(k), v |= f .

• π, i, v |= ∃k. f (resp. π, i, v |= ∀k. f ) iﬀ π, i, v[k/n] |= f for some (resp. for

every) n ∈ N.

One can, of course, choose linear µTL as the base logic2. Henceforth, we

obtain formulae like

∀k.XkXkp

and

∃k.νZ.(p ∧ XkZ).

Actually, the former is just P(2), and the latter precisely describes the property
“p occurs periodically” — which is not an ω-regular property.

3 On Decidability of Such Extensions

Although adding step variables and step quantiﬁers to logics seems to be a
natural and succinct solution, we in this section reveal an inadequate feature of
this mechanism — the satisfiability problem, even if for the “core fragment”
given by

f F ⊥ | ⊤ | p | ¬p | f ∧ f | f ∨ f | X f | Xk f | ∃k. f | ∀k. f

is not decidable!

But before giving the proof, let us deﬁne some syntactic sugars:

• We respectively abbreviate X . . . X f
|  {z  }
n times

n ∈ N and k ∈ K .

and Xk . . . Xk f
|     {z     }
n times

as Xn f and Xn·k f , where

• We sometimes directly write Xt1Xt2 f as Xt1+t2 f , provided that each ti is of
the form (P j nj · k j) + n, where n and each nj are natural numbers and each
each ki ∈ K .

Note that in this setting, both the addition (+) and the multiplication (·)
are communicative and associative. Meanwhile, “·” is distributive w.r.t. “+”,
namely, t1 · t2 + t1 · t3 can be rewritten as t1 · (t2 + t3).

Moreover, for convenience, when f is a formula involving no free variable,
we directly write π, i, v |= f as π, i |= f . Further, we write π |= f (resp. π, v |= f )
in place of π, i |= f (resp. π, i, v |= f ) in the case of i = 0.

Theorem 2 The satisfiability problem of the core logic is not decidable.

2 Note that to deﬁne semantics of such an extension, another valuation from Z to 2N is also

required, where Z is the set consisting of all predicate variables.

3

Proof. The main observation is that “each formula of Peano arithmetic3 has a
peer expression in this fragment, and they are of the same satisﬁability”.

To show this, we need to build the following predicates:

1. Fix a proposition p ∈ P, and let Lp , ∀k1.∀k2.¬∀k3.(Xk1+k3p ↔ Xk1+k2+k3+1p).
Actually, Lp just depicts the “non-shifting property” of p. i.e., if π |= Lp then
for each i, j ∈ N with i < j, there is some t having: either “π, i + t |= p and
π, j + t 6|= p” or “π, i + t 6|= p and π, j + t |= p”. (Just view k1 as i and view
k1 + k2 + 1 as j.)

2. Let L=(k1, k2) , Lp ∧ ∀k.(Xk1+kp ↔ Xk2+kp).
Hence, π, i, v |= L=(k1, k2) iﬀ v(k1) = v(k2).

3. Let L<(k1, k2) , ∃k.L=(k1 + k + 1, k2).

Clearly, π, i, v |= L<(k1, k2) iﬀ v(k1) < v(k2).

4. Subsequently, we use L+(k1, k2, k3) to denote L=(k1 + k2, k3).

According to the deﬁnition, π, i, v |= L+(k1, k2, k3) iﬀ v(k1 + k2) = v(k3).

5. Now, let us ﬁx another proposition q ∈ P and deﬁne

Lq , q ∧ Xq ∧ ∀k1.∃k2.Xk1+k2q ∧

∀k1.∀k2.∀k3.(Xk1q ∧ Xk2q ∧ Xk3 q
∧L<(k1, k2) ∧ L<(k2, k3)
∧∀k4.(L<(k1, k4) ∧ L<(k4, k2) ∨ L<(k2, k4) ∧ L<(k4, k3) → ¬Xk4q)
→ ∃k5.∃k6.(L+(k5, k1, k2) ∧ L+(k6, k2, k3) ∧ L+(2, k5, k6)))

We may assert that π, i |= Lq iﬀ i is a complete square number (i.e., i = j2
for some j). Let us explain : The ﬁrst line indicates that q holds inﬁnitely
often, and it holds at the positions of 0 and 1. For every three adjacent
positions k1, k2, k3 at which q holds (hence, q does not hold between k1
and k2, nor between k2 and k3), we have |k3 − k2| = 2 + |k2 − k1|. Inductively,
we can show that q becomes true only at 0, 1, 4, . . . , (n − 1)2, n2, (n + 1)2,
. . . . (The encoding of Lq is enlightened by [Sch10].)

6. We let

L2(k1, k2) , Lq ∧Xk2q∧Xk2+2·k1+1q∧¬∃k3.(L<(k2, k3)∧L<(k3, 2·k1+k2+1)∧Xk3q)

then we have that π, v |= L2(k1, k2) iﬀ v(k2) = (v(k1))2.

7. As the last step, we deﬁne that

L×(k1, k2, k3) , ∃k4.∃k5.∃k6.(L2(k1, k4) ∧ L2(k2, k5)

∧L2(k1 + k2, k6) ∧ L=(k4 + k5 + 2 · k3, k6))

3Peano arithmetic is just a fragment of ﬁrst order logic, with the signature consisting of naturals,
the function +, × (respectively be interpreted as addition and multiplication), and the predicate <
(whose canonical interpretation is “less than”). cf. [Pea89].

4

Then in the case of π, i, v |= L×(k1, k2, k3), we may get the following con-
straints:

v(k4) = (v(k1))2
v(k5) = (v(k2))2
v(k6) = (v(k1) + v(k2))2
v(k6) = v(k4) + v(k5) + 2 × v(k3)






and we subsequently have v(k3) = v(k1) × v(k2).

Now, we can see that “addition”, “multiplication”, and the “less than” relation
over natural numbers can be encoded in terms of the core logic. Since quantiﬁers
are also involved here, then the satisfiability problem of Peano arithmetic can
be reduced to that of the core logic — the former is known to be undecidable
(cid:3)
(cf. [G ¨od31, Chu36]).

4 Further Discussions

As we have seen, to gain the expressiveness of inﬁnite union/intersection of (a
family of) regular languages, an admissible approach is to cooperate with step
variables and quantiﬁers in the logic — however, it suﬀers from the undecid-
ability of satisfiability.

To tackle this, we need to investigate new mechanisms — it should both
enhance the expressiveness and keep the logic decidable. So far, we are not
aware of it, and it seems that employing more powerful existing automata, say
pushdown automata, is also not feasible.

References

[BB87]

B. Banieqbal and H. Barringer. Temporal logic with ﬁxed points.
In B. Banieqbal, H. Barringer, and A. Pnueli, editors, Temporal Logic in
Speciﬁcation, volume 398 of Lecture Notes in Computer Science, pages
62–74. Springer-Verlag, 1987.

[B ¨uc62]

J.R. B ¨uchi. On a decision method in restricted second order arithmetic.
In Proc. Int. Congr. Method and Philosophy of Science 1960, pages 1–12,
Palo Alto, CA, USA, 1962. Stanford University Press.

[Chu36] A. Church. A note on the Entscheidungsproblem. Journal of Symbolic

Logic, 1:101–102, 1936.

[G ¨od31] K. G ¨odel.

¨Uber formal unentscheidbare s¨atze der principia math-
ematica und verwandter system, I. Monatshefte f ¨ur Methematik und
Physik, 38:173–198, 1931.

[LS07] M. Leucker and C. S´anchez. Regular linear temporal logic. In Proceed-
ings of the 4th international conference on Theoretical aspects of computing,

5

volume 4711 of Lecture Notes in Computer Science, pages 291–305.
Springer-Verlag, 2007.

[Pea89] G. Peano. Arithmetices principia, nova methodo, exposita,. Bocca, Torino,

1889.

[Pnu77] A. Pnueli. The temporal logic of programs.

In Proc. of 18th IEEE
Symposium on Foundation of Computer Science (FOCS’ 77), pages 46–57.
IEEE Computer Society, 1977.

[Sch10] N. Schweikardt. On the expressive power of monadic least ﬁxed

point logic. Theoretical Computer Science, 350(2–3):1123–1135, 2010.

[SVW87] A. P. Sistla, M. Y. Vardi, and P. Wolper. The complementation problem
for B ¨uchi automata with applications to temporal logic. Theoretical
Computer Science, 49:217–237, 1987.

[VW94] M. Y. Vardi and P. Wolper. Reasoning about inﬁnite computations.

Information and Computation, 115(1):1–37, November 1994.

[Wol83] P. Wolper. Temporal logic can be more expressive. Information and

Control, 56(1–2):72–99, 1983.

6

