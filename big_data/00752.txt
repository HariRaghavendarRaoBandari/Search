6
1
0
2

 
r
a

M
 
2
 
 
]
n
a
-
a
t
a
d

.
s
c
i
s
y
h
p
[
 
 

1
v
2
5
7
0
0

.

3
0
6
1
:
v
i
X
r
a

The Laura++ Dalitz Plot Fitter

Thomas Latham1,a)

1Department of Physics, University of Warwick, Coventry, CV4 7AL, United Kingdom.

a)Corresponding author: T.Latham@warwick.ac.uk

Abstract. The Laura++ software package is designed for performing ﬁts of amplitude models to data from decays of spin-0
particles into ﬁnal states containing three spin-0 particles — so-called Dalitz-plot analysis. An overview of the amplitude formalism
and its software implementation is given as well as summaries of recently added features and planned future developments.

INTRODUCTION

The Laura++ software package was originally developed by members of the University of Warwick particle physics
group working on the BaBar experiment. The group was working on amplitude analyses of the decays of B mesons
to three-body ﬁnal states containing charmless pseudoscalar mesons, such as pions and kaons, i.e. Dalitz-plot analy-
ses [1]. The Laura++ software was originally designed as a dedicated package for performing Dalitz-plot analyses,
with the aim of being more straightforward to use but at the same time faster than the few packages that were then be-
ing used within the BaBar experiment. The package was subsequently used in numerous publications from the BaBar
collaboration, both amplitude analyses [2, 3, 4, 5, 6, 7, 8] and other analyses of 3-body decays [9, 10, 11, 12, 13],
from the LHCb collaboration [14, 15, 16, 17, 18] and in some phenomenological works [19, 20]. In September 2013
the code was publicly released on the HepForge website [21] and now has numerous users within the BaBar, Belle,
Belle II, LHCb, BES III and CMS collaborations. The software consists of a set of C++ classes that are built into
a library and a selection of example applications that link against that library. The only external dependency is the
ROOT scientiﬁc software framework [22].

AMPLITUDE MODELS

The majority of use cases of the package involve the formation of amplitude models for the decay of a spin-0 parent
particle into three spin-0 children. The two main modes of operation are then to use those models to either generate
events using Monte Carlo methods or to ﬁt the models to existing data (from experiment, simulation, etc.) in order
to determine the parameters of interest. One of the more commonly used amplitude models is the so-called isobar
model [23, 24, 25], which consists of describing the total decay amplitude by a sum of the contributing amplitudes,
each with a complex coeﬃcient:

N(cid:88)

A(x, y) =

c j F j(x, y)

(1)

j=1

where x and y are the Dalitz-plot coordinates (i.e. they represent the position within the three-body phase space), c j
is the complex coeﬃcient for the contributing amplitude j and F j(x, y) the corresponding dynamical function. The F j
functions are set within the code by choosing:
•
•
•

a particular model for the resonance (or nonresonant) lineshape, e.g. a relativistic Breit–Wigner,
the two ﬁnal-state particles to which the resonance decays,
if appropriate, the mass, width and spin of the contributing resonance.

There are numerous models to choose from, as well as many pre-set values for the mass, width and spin of known
resonances. For example, one could use the following code snippet to deﬁne an isobar model for the decay B+ →
K+π+π− containing three resonances, K∗(892)0, ρ(770)0 and f0(980), and a uniform nonresonant component:
// Define the parent and daughter particles
LauDaughters* daughters = new LauDaughters("B+", "K+", "pi+", "pi-");
// Define the veto regions in the Dalitz plot
LauVetoes* vetoes = new LauVetoes();
// Define the efficiency variation across the Dalitz plot
LauEffModel* effModel = new LauEffModel(daughters, vetoes);
// Define the dynamics and resonances
LauIsobarDynamics* sigModel = new LauIsobarDynamics(daughters, effModel);
LauAbsResonance* reson(0);
reson = sigModel->addResonance("K*0(892)",
reson = sigModel->addResonance("rho0(770)",
reson = sigModel->addResonance("f_0(980)",
reson->setResonanceParameter("g1",0.2);
reson->setResonanceParameter("g2",1.0);
reson = sigModel->addResonance("NonReson",

2, LauAbsResonance::RelBW);
1, LauAbsResonance::GS);
1, LauAbsResonance::Flatte);

0, LauAbsResonance::FlatNR);

The ﬁrst argument to the addResonance function identiﬁes the resonance in order to obtain the pre-set values for
the mass, width and spin. The second argument indicates which of the ﬁnal state particles (numbered from 1 to 3) is
produced, together with the resonance, in the decay of the parent particle. The third argument indicates the model to
be used for this contribution. Each of the contributions in this example uses a diﬀerent amplitude model: relativistic
Breit–Wigner, Gounaris–Sakurai [26], Flatt´e [27], uniform nonresonant. One can also see an example of how to
modify the values of model parameters, in this case the couplings to the ππ and KK channels in the Flatt´e model.

The complex coeﬃcients are the main parameters of interest in most ﬁts to data and must be expressed in terms

of real numbers. In the simplest case, they can be expressed either in terms of the real and imaginary part

c j ≡ x j + i y j ,

(2)

or of the magnitude and phase

(3)
However, the code to provide the complex coeﬃcients to the model is essentially the same in all cases, except for the
“concrete” type that is instantiated. For example, using the form from Eq. 3 for the resonances deﬁned in the example
above:

c j ≡ a j eiθ j .

// Define the fitting model
LauSimpleFitModel* fitModel = new LauSimpleFitModel(sigModel);
// Create the coefficients for each contribution to the model
std::vector<LauAbsCoeffSet*> coeffset;
coeffset.push_back( new LauMagPhaseCoeffSet("K*0(892)",
coeffset.push_back( new LauMagPhaseCoeffSet("rho0(770)",
coeffset.push_back( new LauMagPhaseCoeffSet("f_0(980)",
coeffset.push_back( new LauMagPhaseCoeffSet("NonReson",
// Supply the coefficients to the model
std::vector<LauAbsCoeffSet*>::iterator iter=coeffset.begin();
for ( ; iter!=coeffset.end(); ++iter) {

kTRUE,

0.00,
kTRUE) );
1.00,
0.53,
1.39, kFALSE, kFALSE) );
0.27, -1.59, kFALSE, kFALSE) );
0.54, -0.84, kFALSE, kFALSE) );

fitModel->setAmpCoeffSet(*iter);

}
Note that one component (the K∗(892)0 in the above example) must act as the reference amplitude, i.e. it must have its
coeﬃcient value ﬁxed. Furthermore, it is often chosen that this reference amplitude should be real and of unit magni-
tude, as is the case in the above example. When considering decays of particle and antiparticle and the possible eﬀects
of CP violation that might arise, the parameterisations can become more complicated. Several such parameterisations
are provided by the package.

FIGURE 1. Events generated by Laura++ in the B+ → K+π+π− Dalitz plot, where the model contains only the ρ(770)0 and f0(980)
resonances. The magnitudes of the two resonances are the same, while their relative phase is either (left) 0◦ or (right) 180◦.

Figure 1 shows the results of running Laura++ in generator mode for a simpliﬁed model containing just the
ρ(770)0 and f0(980) resonances for diﬀerent values of the relative phase of the two resonances. The events are plotted
in the mππ vs. cos θππ plane, where cos θππ is the angle between the kaon and the oppositely charged pion, calculated
in the rest frame of the ππ system. The diﬀerent phases give rise to very diﬀerent patterns of interference.

The ability to factorise the isobar coeﬃcients and the resonance dynamics gives rise to great speed beneﬁts if
the parameters of the resonance model are ﬁxed in the ﬁts to data. The integrals required to normalise the PDF need
only be calculated once under these circumstances and the cached values can then be used in all iterations of the ﬁts.
Similarly, the values of the resonance dynamics can be calculated once for each event in the data sample and these
values cached. In early versions of the Laura++ software, it was not possible to ﬂoat resonance parameters since this
caching mechanism was employed strictly, i.e. no recalculations were allowed. However, recently a new caching and
bookkeeping system has been developed in order to minimise the number of calculations that need be performed at
any given iteration of the ﬁt. As such it is now possible (from v3r0 onwards) to ﬂoat resonance parameters, although
there is still some associated time penalty for such ﬁts.

In extension to the isobar model there are various approaches implemented for modelling the S-wave, includ-
ing the K-matrix [28] and quasi-model-independent methods [29]. An ongoing dialogue with theory colleagues will
hopefully yield further improvements in this area in the near future. One avenue currently being explored is the use of
Veneziano models [30].

MODELLING EXPERIMENTAL EFFECTS

When analysing experimental data one must also account for presence of background processes and the acceptance
of the experiment. The variation of both the frequency of backgrounds and the signal reconstruction eﬃciency over
the phase space can be provided to Laura++ in the form of two-dimensional histograms. These can be either in the
conventional Dalitz-plot coordinates or in the so-called “square Dalitz plot” [3]. They can be used as they are or
interpolation methods (either linear or using cublic splines) can be applied to smooth them. It is also possible to apply
vetoes to particular regions of the phase space, e.g. to remove a peaking background, and to model the migration of
mis-reconstructed signal events. Furthermore it is possible to include variables other than the Dalitz-plot coordinates
in the maximum likelihood ﬁt in order to improve the discrimination between signal and the various background
categories. Many diﬀerent PDF shapes are implemented in Laura++ to describe the non-DP variables, including
forms that allow for correlations between the shape parameters and the DP position. This feature was used extensively
in the recent analysis of B+ → K0

Sπ+π0 by the BaBar collaboration [8].

ADVANCED FEATURES

There are models that can be used to ﬁt for CP violation in decay, which have been used in the analyses of Refs. [4,
5, 8]. A work in progress is to update the time-dependent models, used to cross-check the main ﬁt in Ref. [6], to be

]2c [GeV/ppm0.60.811.2ppqcos1-0.8-0.6-0.4-0.2-00.20.40.60.81]2c [GeV/ppm0.60.811.2ppqcos1-0.8-0.6-0.4-0.2-00.20.40.60.81FIGURE 2. Eﬃciency variation over the phase space for two diﬀerent trigger categories in the recent LHCb analysis of B+ →
D−K+π+. Figures from Ref. [17].

more general. In particular, it is of interest to allow for a non-zero diﬀerence of widths (∆Γ) of the mass eigenstates,
to account for uncorrelated production environments such as pp collisions at the LHC and to include the eﬀects of
variation of acceptance with decay time. Once completed this will be made public in an upcoming release.

A recently added feature is an implementation of the Jfit framework [31] to perform simultaneous ﬁts to multiple
data samples. Originally devised for performing joint ﬁts of data from diﬀerent experiments, this framework is also
extremely useful for many other purposes, such as handling diﬀerent reconstruction or trigger categories that can give
rise to diﬀerent eﬃciency or background distributions over the Dalitz plot. Figure 2 shows the eﬃciency variation over
the phase space for the two diﬀerent trigger categories used in the recent LHCb analysis of B+ → D−K+π+ [17], which
made use of this simultaneous ﬁtting feature. In addition it could be used for performing coupled-channel analyses
or for ﬁtting simultaneously to multiple decay modes in order to extract CP violation observables following methods
such as those proposed in Refs. [32, 33, 19, 34].

SUMMARY

An overview of the Laura++ software package for performing Dalitz-plot analyses has been presented. It is a mature
package that has been used in many published analyses, mainly from the BaBar and LHCb collaborations. It is under
active development, with a number of new features added recently and others in the pipeline. The package is open
source and available for download from the HepForge website [21]. The website contains documentation to enable
new users to get started quickly with the examples included with the package. There are also mailing lists that allow
questions to be asked to the developers and to obtain announcements of new releases.

ACKNOWLEDGMENTS

Laura++ has been developed with support from the University of Warwick, the Science and Technology Facilities
Council (United Kingdom) and the European Research Council under FP7. The authors of the package (Thomas
Latham, John Back and Paul Harrison) would like to thank the following people for their invaluable contributions to
the development and documentation of the package: Sian Morgan, Tim Gershon, Pablo del Amo Sanchez, Jelena Ilic,
Eugenia Puccio, Mark Whitehead, Daniel Craik, Rafael Coutinho, Charlotte Wallace, Juan Otalora, Adlene Hicheur.
Many thanks also go to numerous members of the BaBar and LHCb collaborations for their helpful input.

REFERENCES

[1]
[2]

[3]

R. H. Dalitz, Phil. Mag. 44, 1068–1080 (1953).
B. Aubert et al. (BaBar), Phys. Rev. D72, p. 072003 (2005), [Erratum: Phys. Rev.D74,099903(2006)],
arXiv:hep-ex/0507004 [hep-ex] .
B. Aubert et al. (BaBar), Phys. Rev. D72, p. 052002 (2005), arXiv:hep-ex/0507025 [hep-ex] .

Efficiency00.00020.00040.00060.00080.0010.00120.00140.00160.00180.002'm00.20.40.60.81'q00.10.20.30.40.50.60.70.80.91LHCb SimulationEfficiency00.00010.00020.00030.00040.00050.00060.00070.00080.00090.001'm00.20.40.60.81'q00.10.20.30.40.50.60.70.80.91LHCb Simulation[4]
[5]
[6]
[7]
[8]
[9]
[10]
[11]
[12]
[13]
[14]
[15]
[16]
[17]
[18]
[19]
[20]

[21]
[22]
[23]
[24]
[25]
[26]
[27]
[28]
[29]
[30]
[31]
[32]
[33]
[34]

B. Aubert et al. (BaBar), Phys. Rev. D78, p. 012004 (2008), arXiv:0803.4451 [hep-ex] .
B. Aubert et al. (BaBar), Phys. Rev. D79, p. 072006 (2009), arXiv:0902.2051 [hep-ex] .
B. Aubert et al. (BaBar), Phys. Rev. D80, p. 112001 (2009), arXiv:0905.3615 [hep-ex] .
P. del Amo Sanchez et al. (BaBar), PoS ICHEP2010, p. 250 (2010), arXiv:1007.4464 [hep-ex] .
J. P. Lees et al. (BaBar), Submitted to Phys. Rev. D, (2015), arXiv:1501.00705 [hep-ex] .
B. Aubert et al. (BaBar), Phys. Rev. Lett. 99, p. 221801 (2007), arXiv:0708.0376 [hep-ex] .
B. Aubert et al. (BaBar), Phys. Rev. D78, p. 091102 (2008), arXiv:0808.0900 [hep-ex] .
B. Aubert et al. (BaBar), Phys. Rev. D79, p. 051101 (2009), arXiv:0811.1979 [hep-ex] .
P. del Amo Sanchez et al. (BaBar), Phys. Rev. D82, p. 031101 (2010), arXiv:1003.0640 [hep-ex] .
J. P. Lees et al. (BaBar), Phys. Rev. D84, p. 092007 (2011), arXiv:1109.0143 [hep-ex] .
R. Aaij et al. (LHCb), Phys. Rev. Lett. 113, p. 162001 (2014), arXiv:1407.7574 [hep-ex] .
R. Aaij et al. (LHCb), Phys. Rev. D90, p. 072003 (2014), arXiv:1407.7712 [hep-ex] .
R. Aaij et al. (LHCb), Phys. Lett. B740, 158–167 (2015), arXiv:1410.4170 [hep-ex] .
R. Aaij et al. (LHCb), Phys. Rev. D91, p. 092002 (2015), arXiv:1503.02995 [hep-ex] .
R. Aaij et al. (LHCb), Phys. Rev. D92, p. 012012 (2015), arXiv:1505.01505 [hep-ex] .
T. Latham and T. Gershon, J. Phys. G36, p. 025006 (2009), arXiv:0809.0872 [hep-ph] .
s → K0
Sπ+π− decays,” in Inter-
T. Gershon, T. Latham, and R. S. Coutinho, “Probing CP violation in B0
national Conference on High Energy Physics 2014 (ICHEP 2014) Valencia, Spain, July 2-9, 2014 (2014)
arXiv:1411.2018 [hep-ph] .
T. Latham, J. Back, and P. Harrison, http://laura.hepforge.org.
R. Brun, F. Rademakers, et al., http://root.cern.ch.
G. N. Fleming, Phys. Rev. 135, B551–B560 (1964).
D. Morgan, Phys. Rev. 166, 1731–1759 (1968).
D. Herndon, P. Soding, and R. J. Cashmore, Phys. Rev. D11, p. 3165 (1975).
G. J. Gounaris and J. J. Sakurai, Phys. Rev. Lett. 21, 244–247 (1968).
S. M. Flatte, Phys. Lett. B63, p. 224 (1976).
S. Chung, J. Brose, R. Hackmann, E. Klempt, S. Spanier, et al., Annalen Phys. 4, 404–430 (1995).
E. M. Aitala et al. (E791 Collaboration), Phys. Rev. D73, p. 032004 (2006), arXiv:hep-ex/0507099 .
A. P. Szczepaniak and M. R. Pennington, Phys. Lett. B737, 283–288 (2014).
E. Ben-Haim, R. Brun, B. Echenard, and T. E. Latham, arXiv:1409.5080 [physics.data-an] .
M. Ciuchini, M. Pierini, and L. Silvestrini, Phys. Rev. D74, p. 051301 (2006), arXiv:hep-ph/0601233 .
M. Gronau, D. Pirjol, A. Soni, and J. Zupan, Phys. Rev. D75, p. 014002 (2007), arXiv:hep-ph/0608243 .
T. Gershon, Phys. Rev. D79, p. 051301 (2009), arXiv:0810.2706 [hep-ph] .

