6
1
0
2

 
r
a

 

M
8
1

 
 
]

G
C
.
s
c
[
 
 

1
v
4
4
9
5
0

.

3
0
6
1
:
v
i
X
r
a

Lower Bounds for Graph Exploration

Using Local Policies

Aditya Kumar Akash1, S´andor P. Fekete2, Seoung Kyou Lee3, Alejandro

L´opez-Ortiz4, Daniela Maftuleac4, and James McLurkin3

1 IIT Bombay, Mumbai, India. adityakumarakash@gmail.com

2 TU Braunschweig, Braunschweig, Germany. s.fekete@tu-bs.de
3 Rice University, Houston, TX, USA. sl28,jmclurkin@rice.edu

4 Univ. of Waterloo, Waterloo, ON, Canada. alopez-o,dmaftule@uwaterloo.ca

Abstract. We give lower bounds for various natural node- and edge-
based local strategies for exploring a graph. We consider this problem
both in the setting of an arbitrary graph as well as the abstraction of a
geometric exploration of a space by a robot, both of which have been ex-
tensively studied. We consider local exploration policies that use time-of-
last-visit or alternatively least-frequently-visited local greedy strategies
to select the next step in the exploration path. Both of these strate-
gies were previously considered by Cooper et al. (2011) for a scenario in
which counters for the last visit or visit frequency are attached to the
edges. In this work we consider the case in which the counters are as-
sociated with the nodes, which for the case of dual graphs of geometric
spaces could be argued to be intuitively more natural and likely more ef-
ﬁcient. Surprisingly, these alternate strategies give worst-case superpoly-
nomial/exponential time for exploration, whereas the least-frequently-
visited strategy for edges has a polynomially bounded exploration time,
as shown by Cooper et al. (2011).

1

Introduction

We consider the problem of a mobile agent or robot exploring an arbitrary graph.
This is a well-studied problem in the literature, both in geometric and combi-
natorial settings. The robot or agent may wish to explore an arbitrary graph,
e.g. a social network or the graph derived from the exploration of a geometric
space. In the latter case, this is often modeled as an exploration task in the dual
graph, where nodes correspond to rooms or regions, and edges corresponds to
paths from one region to another [1,4,6]. In either setting, the goal is to explore
every node in the graph (i.e., a corresponding region in space) in the smallest
possible worst-case time. More formally, the question is this:
Given an unknown graph G and a local exploration policy, what is the time when
the last node is visited as a function of the size of the graph G?

There are several natural local strategy candidates for exploring a graph. We
consider only strategies that use a local policy at each node for selecting the
immediate neighbor that is visited next. The selection of neighbor can be done

using one of the following policies: (1) Least Recently Visited vertex (LRV-v), (2)
Least Recently Visited edge (LRV-e), (3) Least Frequently Visited vertex (LFV-v),
and (4) Least Frequently Visited edge (LFV-e).

In the strategies above, we assume that each vertex or node holds an asso-
ciated value, reﬂecting the last time it was visited (for the case of least recently
visited strategies) or a counter of the total times it has been explored (for least
frequently visited policies). Then the robot selects the neighboring vertex or ad-
jacent edge with lowest value, i.e., oldest time stamp or least frequently visited.
Because we are hoping to minimize the time to visit every vertex (the dual of
a region in the geometric space), it would seem more natural to consider ﬁrst the
LRV-v strategy or failing that, the LFV-v strategy. However, up until now, the
only strategies with known theoretical worst-case bounds are LRV-e and LFV-e.
However, it has been an open problem whether these natural node-based
policies are eﬃcient. In an experimental study [7], we consider the task of pa-
trolling (i.e. repeatedly visiting) a polygonal space that has been triangulated
in a pre-established fashion. This problem can be modelled as exploration of
the dual graph of the triangulation. This was the original motivation to study
the problem of exploring graphs in general, and the dual graphs of triangulation
in particular. In that paper we sketch an exponential lower bound for LRV-v.
In this work, we give a superpolynomial lower bound for LFV-v for exploring
a graph. This is in sharp contrast to the edge case, for which LFV-e has poly-
nomially bounded exploration time. In particular, we show that there exist a
graph on n vertices and n − 1 edges corresponding to the dual of a convex de-
composition of a polygon where the convex polygons are fat and of limited area
n/2) in the worst case. In the process
and such that the exploration time is Θ(n
we show full proofs for lower bounds for the LRV-v, sketched in the experimen-
tal study [7], and give lower bounds for the LRV-e and worst-case behavior for
LFV-e in graphs of degree 3, thus extending the results by Yanovski et al. and
Cooper et al. [3,9] which are shown only for graphs of higher degree in the so-
called ANT model. This model has also been studied by Bonato et al. [2] with
expected coverage time for random graphs.

√

Table 1. Summary of results

Local policy

Graph class

Lower bound

Upper bound

LRV-v

LRV-e

LFV-v

LFV-e

general graphs

exp(Θ(n)) follows from Thm 1

duals of triangulations

exp(Θ(n)) Thm 1

general graphs

duals of triangulations

general graphs

duals of triangulations

√

exp(Θ(n)) [3]
Ω(n2) Thm 2
n/2) [5,8]
Ω(n
Ω(n2) Thm 5

general graphs

Ω(n2) follows from Thm 6

duals of triangulations

Ω(n2) Thm 6

exp(Θ(n))
exp(Θ(n))
exp(Θ(n))
exp(O(n))

O(n δd) follows from Thm 4

O(n δd) Thm 4
O(m · d) [3]
O(m · d) Cor 1

Related Work We study policies that require only local information, which can
be maintained by simple devices. The policy Least Recently Visited is known to
have worst-case exploration times that are exponential in the size of the graph,
as shown by Cooper et al. [3]. More recently, the present authors (inspired by
empirical considerations) studied LRV-v, LFV-v and LFV-e in the context of
robot swarms and studied the observed average case using simulations.

The exponential lower bound for LFV-v was shown by Koenig et al. [5] while

Malpani et al. give exponential lower bounds for LRV-e on general graphs [8].

Summary of Results In this work we suggest that LFV-e should be the preferred
choice and complement this result by giving (1) an exponential lower bound for
the worst case for LRV-v of triangulations, (2) a quadratic lower bound for the
worst case for LRV-e of triangulations, (3) an exact bound on the maximum
frequency diﬀerence of two neighboring nodes in LFV-v, (4) a quadratic lower
bound for LFV-v in graphs of degree 3, (5) a quadratic lower bound for LFV-
e in graphs of degree 3 and, most importantly, (6) a superpolynomial lower
bound for the worst-case of LFV-v when the graph corresponds to a small convex
decomposition of a polygon.

2 Worst-Case Behavior of LRV-e and LRV-v

The worst-case behavior of LRV-e in arbitrary graphs can be exponential in the
number of nodes in the graph, provided we allow a maximum degree of at least
4. That is, for every n, there exists a graph with n vertices in which the largest
exploration time for an edge is exp(Θ(n)) [3]. Fig. 1 illustrates one such graph
(with vertices of degree 4). The starting edge is leftmost in the graph and the
last edge to be visited is the rightmost one. The diamond-like subgraph is such
that when reached by a left-to-right path results in the path not passing through
to the edges on the right on every two-out-of-three occasions. In this sense the
gadget reﬂects back 2/3rds of all paths.

If we connect Θ(n) such gadgets in series, we will require a total of (3/2)Θ(n)
paths, starting from the left for at least one of them to reach the rightmost
edge in the series. Given that our scenario is based on visiting (dual) vertices,

Fig. 1. Graph with n vertices with a chain of n/7 gadgets. A single gadget is colored
in red for illustration purposes. Exploring takes exponential time in the worst case [3].

it is natural to consider the worst-case behavior of LRV-v for the special class

n7Fig. 2. This ﬁgure depicts (1) a hexagonal polygonal region with holes in black lines
(2) its triangulation GP in red lines and (3) the dual graph of the triangulation GD
shown in blue lines.

of planar graphs of maximum degree 3 that can arise as duals of triangulations.
Until now, this has been an open problem. Moreover, it also makes sense to
consider the worst-case behavior of LRV-e for the same special graph class,
which is not covered by the work of Cooper et al. [3].

Theorem 1. There are dual graphs of triangulations(in particular, planar graphs
with n vertices of maximum degree 3), in which LRV-v leads to a largest explo-
ration time for a node that is exponential in n.

Proof. Consider the graph GD with n vertices in Fig. 3, which contains (n−1)/9
identical components (each containing 9 vertices) connected in a chain. This
graph is the dual of the triangulation of the polygon in black lines shown in
Fig. 2. Observe that every vertex has degree at most 3. We prove the claimed
exponential time bound by recursively calculating the time taken to complete
one cycle in the transition diagram shown in Fig. 4.

Fig. 3. The dual graph GD illustrated in blue in Fig. 2.

We monitor the movement of a robot from this situation onwards. Let Tn
denote the time taken to complete one cycle of GD, i.e., the time taken by a
robot to start from and return to the ﬁrst vertex of the ﬁrst component of GD.
Similarly, let Ti denote the cycle which starts on the leftmost vertex s reaching
the i gadget on the left-to-right path and back to s. Hence the graph will be fully
explored when we ﬁrst reach the last component. This requires three consecutive
visits to the next-to-last (penultimate) component in the path, the ﬁrst two visits
are reﬂected back to the starting node s, and the last goes through.

From the possible paths illustrated in Fig. 4, we can observe that the vertex
u is visited only during the beginning and end of the cycle, while the vertex v is
visited twice in this cycle. It is not hard to check that the summation of visits
to all edges in one component during one cycle is 22. Using this we can see a

stFig. 4. Two possible LRV-v alternating paths on each component of the graph GD.

simple recursion as follows:

Ti ≥ 22 + 2 · Ti−1, T0 = 0

Solving this equation, we get Tn ≥ 22· (2n− 1), and hence the last vertex t in the
path is visited after at least 2 · Tn−1 ≥ 22 · (2n − 2) steps, which is exponential
(cid:117)(cid:116)
in the number n of nodes of graph GD, as claimed.
As it turns out, the lower bound for LRV-e in [3], i.e., for time stamping

vertices instead of edges, also holds for graphs of max degree 3 as follows.

Fig. 5. This ﬁgure depicts (1) a hexagonal polygonal region in black lines (2) its tri-
angulation GP in red lines and (3) the dual graph of the triangulation GD shown in
blue lines.

Fig. 6. The dual graph GD consisting of a chain of n/6 cycles from Fig. 5.

Theorem 2. There are dual graphs of triangulations (in particular, planar graphs
with n vertices of maximum degree 3), in which LRV-e leads to a largest explo-
ration time for a node that is quadratic in n.

uvuvuvStep1Step2Step3uvuvuvStep1Step2Step3Proof. Consider the graph GD of Fig. 6 which consists of a chain of n/6 cycles of
length 4 connected in series. As illustrated in Fig. 7, each component is traversed
initially following the colored oriented paths from step 1 and further alternating
the paths from step 2k and 2k + 1, for k positive integer. When all nodes have
time stamp zero we can choose to visit the nodes in any arbitrary order.5

Fig. 7. LRV-e strategy on each component of the graph GD.

In other words, the ﬁrst time a component is traversed, the path changes
direction and goes back to the start. The rest of the times when the component
is traversed, the direction does not change. Thus, in order to traverse the ith
component in the chain, we need to traverse the ﬁrst i − 1 components in the
chain. The total time, i.e. the number of steps, to reach the rightmost vertex in
(cid:117)(cid:116)

the chain comes to(cid:80)n/6

i=1(i − 1) = n(n−6)

12 = Θ(n2).

3 Worst-Case Behavior of LFV-v and LFV-e

First, we provide evidence that a polynomial upper bound on the worst-case
latency (i.e. time between consecutive visits) is unlikely for LFV-v. We start by
showing some interesting properties of graphs explored under LFV-v. It would
seem at ﬁrst that the nodes in a path followed by the robot form a non-increasing
sequence of frequency values. This is so as we seemingly always select a node of
lowest frequency. However, if all neighbors of a node have the same or higher
frequency, then the destination node will have strictly larger frequency than the
present node (see Figs. 8 and 9).

We also observe that it is possible to create dams or barriers by having a
ﬂower conﬁguration in the path (see Fig. 10). We reach the center of the ﬂower

5 In general, this property holds whenever there are several neighboring nodes with
the lowest time stamp. For example, in a star starting from the center we visit all
neighboring nodes in arbitrary order until all of them have time stamp 1. At this
point we can once again choose an arbitrary order to visit the neighbors anew.

Step1Step2kStep2k+1Fig. 8. A path being traversed from left to right with its frequency histogram below.
Initially all nodes have frequency zero. Then half way through the path traversal nodes
to left have frequency 1 and nodes to the right are still at zero.

Fig. 9. A path with a corresponding staircase pattern in the histogram.

and then take the loops or petals, thus increasing the count of the center (see
histogram on Fig. 10). Then the robot moves past the center node of the ﬂower,
which forms a barrier that impedes the robot from traversing from right to left
past the center of the ﬂower, until the count of the nodes to the right of the path
has risen to match that of the barrier. With these three basic conﬁgurations

Fig. 10. A path with a “ﬂower” conﬁguration which creates a barrier.

(path, staircase, ﬂower) in hand, we can combine them to create a graph in
which the starting node s has δ(s) neighbors as shown in Fig. 11 where we can
see that of the δ(s) neighbors δ(s)− 1 have simple paths leading back to s. These
paths go via a distinguished neighbor called u which is shared by all the paths
from which they connect by a single shared edge to s. Each of the paths is a
staircase with barriers (see Figs. 9 and 10). That is for each time we go from s
to one of the ﬁrst δ − 1 neighbors we then climb a staircase up to u. Then from
u we enter the other staircases from the “high” side until stopped by a barrier,

Freq11Freq1Freq23451Freq2345Frequuwhich makes us return to u and eventually revisiting s from this last neighbor.
This shows the following theorem.

Theorem 3. There exists a conﬁguration for LFV-v in which some neighbors
of the starting vertex have a frequency count of k, while the starting point has a
frequency count of k δ. Moreover, the value of k can be as high as Θ(n/δ).

Fig. 11. A conﬁguration in which the frequency of the starting point s is much larger
than the majority of its neighbors.

This result provides some indication that the worst-case ratio between smallest
and largest frequency labels of vertices may be exponential, which would arise if
we could construct an example in which the ratio of the respective frequencies
of two neighbors is the degree δ. Observe that δ can be Θ(n) in the worst case.
From this it can be shown that at most δd steps are required to explore the
graph, where d and δ are the diameter and the maximum degree of the graph.

Lemma 1. Consider a graph GD explored using the strategy LFV-v. Let g de-
note the frequency of the starting node s at time t and let δ(s) be the number of
neighbors of s. Then there are at least g mod δ neighbors with frequency at least
(cid:98)g/δ(cid:99) + 1 and the remaining neighboring nodes have frequency at least (cid:98)g/δ(cid:99).
Proof. By induction on g. Denote as g(cid:48) = g − 1, f = (cid:98)g/δ(cid:99), f(cid:48) = (cid:98)g(cid:48)/δ(cid:99).
Basis of induction. g = 0. In this case f = (cid:98)0/δ(cid:99) = 0, so we have trivially at
least (0 mod δ) = 0 nodes with frequency at least 1 and the rest of the nodes
have frequency at least 0. For good measure the reader may wish to prove the
case g = 1.
Induction step. When g increases by one, we have either (1) f = f(cid:48) or (2)
f = f(cid:48) + 1.
In case (1) the robot explores a neighbor with min frequency at least f(cid:48) = f
whose frequency increases to f +1, thus increasing the number of neighbors with
that frequency by 1 (if no such neighbor exists this means all neighbors already
have frequency at least f + 1 and hence it trivially holds that at least (g mod δ)
neighbors have frequency at least f + 1).

In case (2) when f = f(cid:48) + 1 we have (cid:98)(g − 1)/δ(cid:99) + 1 = (cid:98)g/δ(cid:99) which implies
(g mod δ) = 0 and (g − 1 mod δ) = δ − 1. Hence all but one of the neighbors
are guaranteed to have frequency at least f(cid:48) + 1 (which is equal to f ) and there

sstaircasesδ−1uis at most one neighbor with frequency f(cid:48) which is the min and gets visited
thus increasing its frequency to f(cid:48) + 1 = f . This means that now all neighbors
have frequency at least f and trivially at least (δ(s) mod δ) = 0 neighbors have
(cid:117)(cid:116)
frequency at least f + 1, as claimed.
Theorem 4. The highest frequency node in a graph with unvisited nodes, using
LFV-v, has frequency bounded by δd, where δ is the degree of the node and d the
diameter of the graph.

Proof. Consider any shortest path from an unvisited node to the node with
highest frequency. The path is of length at most the diameter d of the graph. In
each step the increase in frequency is at most a factor δ over the unvisited node
hence the frequency of the most visited node is bounded by δd.
(cid:117)(cid:116)
However, there is no known example of a dual of a triangulation graph displaying
this worst-case behavior.

Theorem 5. There exist graphs with n vertices of maximum degree 3, in which
the largest exploration frequency for a node, using LFV-v, is Θ(n2).

Proof. This proof follows the outline of the proof of Theorem 2 for the same
graph GD represented in Fig. 5. As illustrated in Fig. 12, each of GD’s compo-
nents is traversed initially following the colored oriented paths from step 1 and
further alternating the paths from step 2k and 2k + 1.

Fig. 12. LFV-v strategy on each component of the graph GD.

In other words, the ﬁrst time a component is traversed, the path changes
direction and goes back to the start. The rest of the times when the component
is traversed, the direction does not change. Thus, in order to traverse the ith
component in the chain, we need to revisit the ﬁrst i − 1 components in the
chain, which is Θ(n2).
(cid:117)(cid:116)

Step1Step2kStep2k+1Note that using LFV-e on the graph shown in Fig. 6, each component of the
graph is traversed using the exact same strategy as shown in Fig. 12 for LFV-v.

Theorem 6. There exist graphs with n vertices of maximum degree 3, in which
the largest exploration frequency for an edge, using LFV-e, is Θ(n2).

[3] In a graph G with at most m edges and diameter d, the latency

Theorem 7.
of each edge when carrying out LFV-e is at most O(m · d).
This allows us to establish a good upper bound on LFV-e in our setting.

Corollary 1. Let GD = (VD, ED) be the dual graph of a triangulation, with
|VD| = n vertices and diameter d. Then the latency of each vertex when carrying
out LFV-e is at most O(n · d).
Proof. Since GD is planar, it follows that n ∈ Θ(m), where m = |ED| is the
number of edges of GD. Because patrolling an edge requires visiting both of its
(cid:117)(cid:116)
vertices, the claim follows from the upper bound of Theorem 7.
We note that this bound can be tightened for regions with small aspect ratio,

for which the diameter is bounded by the square root of the area.

Corollary 2. For regions with diameter d ∈ O(√n), the latency of each dual

vertex when carrying out LFV-e is at most O(n1.5).

4 A Graph with Superpolynomial Exploration Time

Koenig et al. gave a graph requiring superpolynomial exploration time, thus
proving the theorem:

n/2) on an n
Theorem 8.
vertex graph. This holds even if the graph is planar and has sublinear maximum
degree.

[5] LFV-v has worst-case exploration time Ω(n

√

We illustrate a similar construction for completeness. The graph is a caterpillar

tree where the central path has (cid:96) + 2 = (cid:98)√n(cid:99) vertices, and without loss of

generality we assume (cid:96) to be odd (see Fig. 13). The root which we term node 0,
has b + c + 1 leaves (for some constant c > 10 and value b to be determined later)
as children plus one edge connecting to the path, for a total degree of b + c + 2.
The ith node in the path has b − i + 1 leaves as children and is connected in a
path; hence node i has degree b − i + 3, for 1 ≤ i ≤ (cid:96). The last node in the path
has b + 1 leaves as children and degree b + 2.
We start from the root and as all nodes have visit frequency 0 we can choose
to visit the nodes in any arbitrary order. Recall that this property holds whenever
there are several neighboring nodes with the lowest frequency. From the root we
visit all leaves save one, thus increasing the frequency of the root to b + c + 1
and then proceed down the path. Then for a node i, 1 ≤ i ≤ (cid:96) in the path, if i is
odd we arbitrarily follow the path leaving the leafs with frequency 0, while if i

Fig. 13. A caterpillar tree requiring superpolynomial exploration time.

is even we visit all leaves ﬁrst and then proceed down the path, thus increasing
the frequency of node i to b− i + 2. In the last node in the path we visit all of its
b + 1 children and then return to it with a ﬁnal frequency of b + 2. More formally



freq(i) =

b + c + 1 if i = 0
if 1 ≤ i ≤ (cid:96) is odd
1
b − i + 2 if 1 ≤ i ≤ (cid:96) is even
if i = (cid:96) + 1
b + 2

At this point the last node in the path has all of its neighbors of degree 1 so we
arbitrarily choose to move up the path as shown in Fig. 13 (column 2). Observe
that node (cid:96) in the path has b−(cid:96)+1 leaves with frequency 0 and the two neighbors
in the path have frequency Θ(b), so the robot will visit the leaves Θ(b) times
until it matches the smallest frequency of the two neighbors in the path, which
in this case is the node (cid:96) − 1 above with frequency b − (cid:96) + 3. This gives a total
frequency of (b − (cid:96) + 1)(b − (cid:96) + 3) + 2. Up the path now, node (cid:96) − 1 has b − (cid:96) + 2
leaves of frequency 1 and a neighbor above it in the path also of frequency 1.
Since there is a tie we arbitrarily visit one leaf once more before proceeding
upwards in the path thus leaving node (cid:96)− 1 with frequency b− (cid:96) + 6. We repeat
this pattern alternating between odd and even thus obtaining the expression:

(cid:26) (b − i + 1)(b − i + 3) + 2 if i is odd

if i is even

freq(i) =

b − i + 6

Here we have the following crucial property:

0b-2b-5bb-1b-3b-4b-61b1b-21b-41b+c+1b+c111100001111000011110000111100001111b+1b+20b-2b-5bb-1b-3b-4b-6b+c+1b+c11111111111111b+1b+2(b-4)(b-6)+2b-42b-2(b-2)(b-4)+2b-2b2bb(b-2)+22b+2(b+2)b+2b+21110b-2b-5bb-1b-3b-4b-6b+c+1b+c1111b+1b-4b-2b(b+2)b+2b+2(b-1)[b(b-2)b(b-2)+3(b-3)[(b-2)(b-2)(b-4)+3(b-5)[(b-4)(b-4)(b-6)+3(b+1)[(b-4)(b-4)(b-6)+2(b-2)(b-4)+2b(b-2)+2(b-4)(b-6)+3(b-4)+2]+3(b-6)+2]+3(b-6)+3]+2+2]+30b-2b-5bb-1b-3b-4b-6b+c+1b+c1111b+1b(b+2)b+2b+2(b-1)[b(b-2)+2]+3b(b-2)+3(b-3)[(b-2)(b+1)[(b-4)(b-2)(b-4)+2b(b-2)+2(b-4)(b-6)+3(b-6)[(b-5)((b-4)(b-5)[(b-4)(b-5)[(b-2)(b-2)(b-4)+3(b-5)[(b-2)(b-4)[(b-5)((b-2)(b-6)+2)+3]+4(b-4)+3)+4](b-6)+2]+3(b-4)+3]+4(b-6)+3]+2(b-4)+3]+4(b-4)+2]+30b-2b-5bb-1b-3b-4b-6b+c+1b+c1111b+1b(b+2)b+2b+2(b-1)[b(b-2)+2]+3b(b-2)+3(b-3)[(b-2)(b-4)+2]+3(b-2)(b-4)+2b(b-2)+2(b-5)[(b-2)(b-4)[(b-5)((b-2)(b-6)[(b-5)((b-4)(b-5)[(b-6)((b-5)((b-4)(b+1)[(b-4)(b-6)[(b+1)((b-4)(b+1)[(b-6)((b+1)(b-6)[(b+1)((b-4)((b-4)(b-6)+3)+2)+5](b-6)+2)+3)+4]+5(b-6)+3+2]+5(b-4)+3)+4](b-6)+2)+3]+4(b-6)+3)+2]+3(b-6)+3]+2(b-4)+3]+4Claim. The parent of a node in the path has higher frequency than its child in
the path, i.e. freq(i) > freq(i + 2) for i ≤ (cid:96) − 2
Proof. Substituting in the expression above we have,

freq(i) − freq(i + 2) = (b − i + 1) 4 > 0
freq(i) − freq(i + 2) = (b − i + 6) − (b − i + 4) = 2 > 0

if i is odd

if i is even

(cid:117)(cid:116)
and the property holds as claimed.
Observe that when node i in the path is reached, node i− 1 has larger frequency
than node i + 1 hence the robot visits its leaf children freq(i + 1) many times,
and ends up with a frequency of the number of children times the frequency of
node i + 1 plus two.

freq(i) =

b (b + 2) + 2
if i = 1
(b − i + 1)(b − i + 3) + 3
if 1 < i ≤ (cid:96) is odd
(b − i + 1)[(b − i)(b − i + 4) + 2] + 3 if 1 < i ≤ (cid:96) is even
(b + 1)[(b − (cid:96) + 1)(b + 2) + 3] + 2
if i = (cid:96) + 1

Observe that the property that freq(i) > freq(i + 2) holds just as before for i ≤
(cid:96)− 3. Let us establish this as an invariant. First consider freq(i) as a polynomial
in b and we have that the degrees form the sequence 1, 2, 3, 2, 3, . . . , 2, 3 as shown
in column 3 of Table 1, and using the claim above we get:



Invariant 9 If a node in the path has parent and child in the path with frequency
of degree 3, then the frequency of the parent is higher than the frequency of the
child. I.e. if deg(freq(i − 1)) = deg(freq(i + 1)) then freq(i − 1) > freq(i + 1) for
i ≤ (cid:96) − 2.
Using this invariant and Table 1 we can study the change in degrees as we proceed
up the path, starting from node (cid:96) + 1 in column 4. This node has frequency of
degree 3 and its upper neighbor has frequency of degree 2 so its new frequency
is Θ(b3) and its frequency degree remains unchanged. Then we move to node (cid:96)
whose two neighbors have frequency degree 3 hence its new frequency is Θ(b4) as
shown in column 4 of Table 1. At this point the degree of the child of the current
node is higher than the degree of the parent in the path (recall that Invariant 9
holds only for i ≤ (cid:96)− 2) and hence we continue upward until we reach node (cid:96)− 2
whose child and parent have degree 3. This node then increases its frequency to
degree 4 and moves down as per Invariant 9.
Note that the last node visited in the upward path is given by the invariant.
Speciﬁcally the degree of the frequency of node i at pass j for i ≥ 1 and j ≥ 3 is



Degi,j =

if i is even and j < (cid:96) − i
2
if i is odd and j < (cid:96) − i
3
if i is even, j is odd and j ≥ (cid:96) − i
j − (cid:96) − i
j − (cid:96) − i + 1 if i is even, j is even and j ≥ (cid:96) − i
j − (cid:96) − i + 2 if i is odd, j is odd and j ≥ (cid:96) − i
j − (cid:96) − i + 1 if i is odd, j is even and j ≥ (cid:96) − i
j
j − 1

if i = (cid:96) + 1, j is odd
if i = (cid:96) + 1, j is even

↓

1
0
1
0
1
0
1
0
1
0
1
0
1
0
1

↑

1
2
1
2
1
2
1
2
1
2
1
2
1
2
1

↓

1
2
3
2
3
2
3
2
3
2
3
2
3
2
3

↑

1
2
3
2
3
2
3
2
3
2
3
4
3
4
3

↓

1
2
3
2
3
2
3
2
3
2
3
4
5
4
5

↑

1
2
3
2
3
2
3
2
3
4
3
4
5
6
5

↓

1
2
3
2
3
2
3
2
3
4
5
6
7
6
7

↑

1
2
3
2
3
2
3
4
3
4
5
6
7
8
7

↓

1
2
3
2
3
2
3
4
5
6
7
8
9
8
9

↓

1
2
3
4
5
4
.
.
.

↑

↓

↑

1
2
3
4
3
4
5
6
7
8
9

1
1
2
2
3
3
2
2
3
3
4
4
5
3
6
4
7
5
8
6
9
7
10 10
8
11 11
9
10 10 12
9
11 11

Table 2. Evolution of the degrees of the frequencies. Each column represents the
frequency degrees during a traversal of the path. The arrow indicates the direction of
traversal. In a downward trajectory the last node in the path is always reached, whereas
in an upward trajectory we indicate with bold the extent of the nodes visited in each
pass. Rows are numbered 0, 1, . . . , (cid:96) + 1 while columns are numbered 1, 2, . . . , (cid:96) − 2.

The relation above has as exit condition when j = (cid:96) − 2. At this point the
upward path reaches the top node and ﬁnally visits the leaf of the root left
unvisited in the very ﬁrst step (see Fig. 13). The largest degree is attained in the
last node of the path which has frequency of degree j. Hence if we set b = √n
we obtain a polynomial of degree (√n)
n/2) thus
proving Theorem 8.

n−2) = Θ(n

√

(cid:96)−2

= Θ((n1/2)

√

5 Conclusions

In this paper we give (1) an exponential lower bound for the worst case for LRV-
v of triangulations (2) a quadratic lower bound for the worst case for LRV-e of
triangulations (3) an exact bound on the maximum degree diﬀerence between
two neighboring nodes in LFV-v (4) a quadratic lower bound for LFV-v in graphs
of degree 3 and, most importantly, (5) a superpolynomial lower bound for the
worst-case of LFV-v.

We conjecture that for graphs of maximum degree 3, the performance of

LFV-v is quadratic and its average coverage time is linear.

References

1. Aaron Becker, S´andor P. Fekete, Alexander Kr¨oller, Seoung Kyou Lee, James
McLurkin, and Christiane Schmidt. Triangulating unknown environments using

robot swarms. In Proc. 29th Annu. ACM Sympos. Comput. Geom., pages 345–346,
2013.

2. Anthony Bonato, Rita M. del R´ıo-Chanona, Calum MacRury, Jake Nicolaidis,
Xavier P´erez-Gim´enez, Pawe(cid:32)l Pra(cid:32)lat, and Kirill Ternovsky. The robot crawler num-
ber of a graph. Proceedings of the 11th Workshop on Algorithms and Models for the
Web Graph (WAW), 2015.

3. Colin Cooper, David Ilcinkas, Ralf Klasing, and Adrian Kosowski. Derandomizing
random walks in undirected graphs using locally fair exploration strategies. Dis-
tributed Computing, 24(2):91–99, 2011.

4. S´andor P. Fekete, Seoung Kyou Lee, Alejandro L´opez-Ortiz, Daniela Maftuleac, and
James McLurkin. Patrolling a region with a structured swarm of robots with lim-
ited individual capabilities. In International Workshop on Robotic Sensor Networks
(WRSN), 2014.

5. Sven Koenig, Boleslaw Szymanski, and Yaxin Liu. Eﬃcient and ineﬃcient ant
coverage methods. Annals of Mathematics and Artiﬁcial Intelligence - Special Issue
on Ant Robotics, 31(1):41–76, 2001.

6. Seoung Kyou Lee, Aaron Becker, S´andor P. Fekete, Alexander Kr¨oller, and James
McLurkin. Exploration via structured triangulation by a multi-robot system with
In 2014 IEEE International Conference on
bearing-only low-resolution sensors.
Robotics and Automation, ICRA 2014, Hong Kong, China, pages 2150–2157, 2014.
7. Daniela Maftuleac, SeoungKyou Lee, S´andor P. Fekete, Aditya Kumar Akash, Ale-
jandro L´opez-Ortiz, and James McLurkin. Local policies for eﬃciently patrolling a
triangulated region by a robot swarm. In International Conference on Robotics and
Automation (ICRA), pages 1809–1815, 2015.

8. Navneet Malpani, Yu Chen, Nitin H. Vaidya, and Jennifer L. Welch. Distributed
token circulation in mobile ad hoc networks. IEEE Transactions on Mobile Com-
puting, 4(2):154–165, 2005.

9. Vladimir Yanovski, Israel A. Wagner, and Alfred M. Bruckstein. A distributed ant

algorithm for eﬃciently patrolling a network. Algorithmica, 3(37):165–186, 2003.

