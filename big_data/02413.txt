Dynamic Clustering in Social Networks using

Louvain and Infomap Method

Pascal Held, Benjamin Krause, and Rudolf Kruse

Otto von Guericke University of Magdeburg

Department of Knowledge Processing and Language Engineering

Universit¨atsplatz 2, 39106 Magdeburg, GERMANY

pascal.held@ovgu.de

benjamin.krause@st.ovgu.de

rudolf.kruse@ovgu.de

http://fuzzy.cs.uni-magdeburg.de

6
1
0
2

 
r
a

M
8

 

 
 
]
I
S
.
s
c
[
 
 

1
v
3
1
4
2
0

.

3
0
6
1
:
v
i
X
r
a

Abstract. Finding communities or clusters in social networks is a fa-
mous topic in social network analysis. Most algorithms are limited to
static snapshots, so they cannot handle dynamics within the underlying
graph.
In this paper we present a modiﬁcation of the Louvain community detec-
tion method to handle changes in the graph without rerunning the full
algorithm. Also, we adapted the Louvain greedy approach to optimize
the Infomap measure.
The main idea is, to recalculate only a small area around the changes.
Depending on the graph size and the amount of changes, this yields a
massive runtime decrease.
As validation data, we provide a graph generator, which produces spe-
ciﬁc community structures, at given times and also intermediate steps to
transform the graph from one to another speciﬁc graph.
Experiments show that runtime decrease is possible without much loss
of quality. These values depend on the reprocessed area inside the graph.

Keywords: Dynamic Graph Clustering, Community Detection, Lou-
vain, Infomap, Graph Generator

1

Introduction

In the last years social networks became very popular. This is not limited to large
public social networks like Facebook or Twitter. There are also a bunch of hidden
networks with social network characteristics like communication networks [10],
co-authorship networks [12] or structure networks e.g. in websites [13]. Also in
human beings are such networks, like protein-protein-interaction networks [7] or
relations between diﬀerent brain regions [15].

Nowadays, social network analysis is a broad research area with diﬀerent top-
ics. Some of them are analysis of social relations, special characteristics of single
entities in groups, or density based analysis of diﬀerent sub graphs. Another

2

Held, Krause, Kruse

core area is the analysis of community structure within the network [5], which
is focused in this paper.

Most approaches are based on the assumption that the network structure is

static. Alternatively, diﬀerent time stamps can be compared.

If we look on interaction networks [6], like comment, share, or like activities

on Facebook, we will ﬁnd continuously changing networks.

In this paper we will present an algorithm, which can handle changes in
the network. To do so, we change only some parts of the existing partitioning
without running the whole algorithm again. This yields improved runtime.

2 Terminology

First, we give a brief introduction into graphs and community detection in social
networks.

2.1 Graph
Networks of information of any kind can be modeled as graphs. A graph is an
ordered tuple G = (V, E), where V is a set of unique vertices or nodes and
E ⊆ V × V is a set of edges or links [3].
If ∀v1,v2∈V : (v1, v2) ∈ E ⇒ (v2, v1) ∈ E holds true, the graph is undirected,
A weighted graph changes the deﬁnition of E to a set of tuples ((u, v), w),
where (u, v) is the already deﬁned 2-element subset of V and w is the weight of
the edge, specifying its importance [5]. These edges can be referred to via the
weight matrix A, where Ai,j is the weight of the edge between node i and node
j.

otherwise directed.

For dynamic graphs we assume having a list of static graphs for a given time
interval [9]. Each of these static graphs or graph steps represent a time step in
that interval. If you take two consecutive steps and compare nodes and edges,
only a few changes relative to the size of the graphs should be seen.

2.2 Community Structure and Clustering
To ﬁnd clusters, groups of nodes that are associated in some way, is one of the
main tasks of graph analysis. Given a graph G = (V, E), there is a subgraph
C = (Vc, Ec) with Vc ⊆ V and Ec ⊆ E. The internal degree of C is the number
of edges that lead from one node in C to another node in C. The external degree
on the other hand is the number of edges from nodes in C to the rest of the
graph. These values can hint to C being a good cluster. If the internal degree
is very high and the external degree is very low, C could be an appropriate
cluster [5].

The main task is, to ﬁnd a clustering, meaning a division in clusters, so that
every node is assigned to one cluster. This clustering should consider the com-
munities present in the graph as good as possible. There are diﬀerent methods

Dynamic Clustering using Louvain and Infomap

3

for measuring the quality of a clustering. In this work, we mainly focus on the
modularity [4] and the infomap [14] measures.

For dynamic graphs, the task is quite similar [1]. Fore every step, a parti-
tion is needed. There are several other subtasks, like ﬁnding communities which
are given implicitly in several steps and might not be visible in a static snap-
shot. Furthermore, tracing and recognizing communities in dynamic graphs is a
important but diﬃcult task and won’t be considered in this work.

3 Related Work

Two well-known community detection algorithms are the Louvain method which
is based on modularity and the Infomap algorithm.

3.1 Louvain Clustering

The Louvain algorithm [4] is a greedy agglomerative hierarchical Clustering ap-
proach which utilizes the modularity measure. It was originally designed for un-
weighted, undirected graphs but can easily be adapted to weighted and directed
graphs. Equation 1 shows the calculation of the modularity measure, where nc
is the number of clusters, lc is the number of intra-cluster edges, dc is the sum
of degrees of all nodes in c and m is the number of edges in the graph.

"

ncX

c=1

(cid:19)2#

(cid:18) dc

2m

−

lc
m

Q =

(1)

In this method, the partition is initialized with every node in its own cluster.
Then, for each node the modularity gain for shifting it to neighboring clusters
is computed. The largest positive gain is chosen and the node is moved. This is
done until no node is moved in a full iteration. Then, the graph is modiﬁed in
a way that every cluster is merged into a single node, while intra-cluster edges
are added as loops and inter-cluster edges between the same clusters are merged
into a single edge and have there weights added. This induced graph is used in
the next iteration, until there is no gain to get by shifting another node. The
modularity ranges between -1 and 1. A value of 1 would represent the perfect
clustering with no edges between clusters and all clusters densely connected.
Lower measure hints to a worse result, while values below 0 indicate a really
terrible clustering and are rarely reached.

To compute the gain ∆Q of moving a node i into the cluster C, not the new
modularity of the whole clustering is computed, a local value which represents
the gain can be computed more eﬃciently instead, as shown in Equation 2.

"P

(cid:18)P

(cid:19)2#

"P

(cid:18)P

∆Q =

in +ki,in
2m

−

tot +ki
2m

−

−

in

2m

tot

2m

(cid:19)2#

(cid:19)2

(cid:18) ki

2m

−

(2)

4

Here,P

Held, Krause, Kruse

in is the sum of the weights of the links inside the cluster C,P

is the degree of the cluster, ki is the degree of the node i, ki,in is the sum of the
weights of links from i to nodes in C.

tot

3.2 Infomap Clustering
The Infomap measure was designed to measure the quality of a clustering by esti-
mating the length of a code for paths through the graph utilizing the probability
ﬂow of random walks [14]. In contrast to maximizing modularity, the fundamen-
tal approach of Infomap clustering is to utilize ﬂows in the graph. This works
well if clusters have a connected ﬂow inside, meaning that if you randomly follow
the direction of edges, you tend to stay inside the same cluster. It does not work
if there is little or no ﬂow at all or if a random walk ends up in deadlocks a lot.
In this work, we used an approximation to this Infomap value as described
i∈c si of a
j∈V aij, the sum of all edge weights
i,j∈c aij
is the sum of all intra-cluster edge weights. The total volume M = vV of the
graph is the sum of the volume of all nodes in the graph, which is twice the sum
of all edge weights for weighted and twice the number of edges for unweighted

in [11]. Equation 3 shows the formula used. The volume vc = P
cluster c is the sum of the strengths si =P
aij incident to that node, of all nodes in c. The within weight wc =P
graphs. The normalized within weight bwc = wc/M and the normalized volume
bvc = vc/M of cluster c are used to compute the actual wlogv value.

Qwlogv(C) =X

c∈C

bwc log(bvc)

(3)

Since Equation 3 consists of a sum over values speciﬁc for each cluster, the
calculation of the gain of moving a node is easy to implement. The overall gain
of the clustering can be computed by just calculating the new values for the
cluster the node was moved out of and the cluster it was moved into. This is
very similar to the way Louvain computes the gain of moving a node.

4 Algorithm

To adapt static clustering algorithms to dynamic tasks, we concentrated on using
as much information from already processed steps as possible and iterate as few
nodes and edges as possible, based on intelligently deciding which parts of the
graphs are worth to be processed.

The basic idea is, to use the partition computed in the last step and min-
imize the number of iterated nodes by using information about what areas in
the current graph were actually changed in the ﬁrst place. We initialize the al-
gorithm with the last partition and optimize the procedure of iterating over the
nodes to compute the current partition. In the ﬁrst iteration of the dendrogram
generation, we only iterate nodes which are close to an edge which was changed
from the last to the current graph. Being near can be interpreted as directly
being adjacent to such an edge or having a path to an adjacent node which is

Dynamic Clustering using Louvain and Infomap

5

shorter or equal to a given threshold. This distance can be used to tweak the
accuracy and the runtime of the algorithm.

Only iterating potentially relevant nodes leads to decreased complexity and

gives a good base for the basic algorithm to work on.

The algorithm is based on the assumption that the dynamic graph has a
relatively low amount of changes compared to the number of edges. If every
node is near a changed edge, this algorithm doesn’t provide any advantages.

4.1 Modiﬁcation

The initial graph is processed in the same way as in the static algorithm. For
every following step, a modiﬁed version of the last partition is used. It is mod-
iﬁed in that way, that labels of nodes which are close to changes in the graph
are deleted or the nodes are moved to their own separated cluster. This refers to
the standard Louvain initialization, where every node starts in its own cluster.
Changes are directly loaded via a speciﬁc ﬁle type we saved our graphs into.
Whether a node is close depends on the delete range chosen. This range de-
termines the length of the shortest path a node must have to a node directly
involved in a change to be close. A delete range of zero only includes nodes,
which are adjacent to an edge changed since the last step. Any higher value
increases the area, which is reset.

Figure 1 shows an example. Given the edge (6, 8) has changed since the last
step. Whether the edge was added, deleted or simply had it’s weight changed
does not matter. For a delete range of 0, the set of nodes to be processed only
contains 6 and 8, the nodes directly involved in the change. If the delete range is
increased to 1, the nodes 6, 8, and their neighbors are added, which leads to the
set {0, 4, 5, 6, 7, 8, 9}. A delete range of 2 furthermore adds the nodes 1, 2 and 3.
This is only a small-scaled example to show what inﬂuence the delete range has
on the area which is to be examined.

The modiﬁed partition is passed to the algorithm with a list of all aﬀected
nodes. In the ﬁrst iteration of the algorithm, only these nodes are processed.
This yields to a massive speed boost, because the ﬁrst level of the dendrogram,
where the most nodes have to be iterated, takes most of the processing time. By
reducing the number of these nodes, the time conserved can be substantial. The
following levels of the dendrogram consider the full graph. A higher delete range
means that more nodes have to be processed on the ﬁrst level and therefore the
algorithm needs more time.

For each algorithm we use the same method to deal with noise. In order
to detect noise clusters, we iterate over all clusters and determine their sizes.
Clusters with less than a minimum amount of nodes will have all their nodes
transferred to a designated noise cluster. The default number of nodes a cluster
needs to persist is two. That way, only single node clusters will be removed.

6

Held, Krause, Kruse

7

8

0

1

4

2

3

5

6

9

Fig. 1: Example for the inﬂuence of delete range. A change happened between
6 and 8 (dashed edge). Nodes to be iterated for delete range 0 are displayed as
orange circles, nodes for delete range 1 are green diamonds and nodes for delete
range 2 are blue pentagons.

5 Dynamic Graph Generation

To evaluate the novel methods, we designed a graph generator to produce dy-
namic graphs with controllable ground truth. The idea is to generate graphs
with a given number of clusters and a given number of nodes in these clusters.
To realize this, a graph generator was created, which creates single graph steps,
which serve as controllable base graphs, and computes the intermediate graphs
via diﬀerences between two graph steps. The whole procedure can be seen in
Algorithm 1 and 2. Each graph step is assembled by creating a single Barab´asi-
Albert graph for each of the desired clusters and merging these graphs to a
single graph (see [2] and [8]), where each of the cluster graphs serves as a clearly
separated cluster (see Figure 2 and 3).

0

1

4

2

3

5

6

9

7

8

2

3

0

1

4

5

6

9

7

8

Fig. 2: Two separately generated
Barab´asi-Albert graphs

Fig. 3: Resulting graph after merg-
ing both Barab´asi-Albert graphs

Dynamic Clustering using Louvain and Infomap

7

The merge is executed with every two pairs of graphs, to receive graphs with
two clusters in the ﬁrst step. These are recursively merged until a single graph
with the requested number of clusters results. Figure 4 shows an example for a
graph generated with this method.

We used the minimal merge, which conserves the structure of both graphs
merged and connects them with additional edges via preferential attachment.
This way, the desired structure, where each merged graph serves as a single, well-
seperated cluster, can be achieved. Due to preferential attachment the Barab´asi-
Albert model is particularly suitable. It creates graphs with exponentially dis-
tributed node degrees, which serve great as a single cluster with hubs and border
nodes.

Fig. 4: Example for a generated graph with 2000 nodes and 20 clusters

Additionally, a number of intermediate steps between the predeﬁned steps is
given. To ﬁll these, the diﬀerences, namely edges to add or to delete, between
two graph steps are computed. The required changes are distributed between
the intermediate time steps and applied one after another. This way, each inter-
mediate graph receives some of the changes needed to advance to the next time
step. When the last changes are applied, the resulting graph matches the target
graph step.

In Figure 5 you can see an example for such a transition. The clusters shift
from two vertically aligned clusters to one central and one surrounding cluster.
Edges are colored referring to their state of change (constant, add, or delete).

This procedure is applied to all consecutive pairs of graph steps, until we
get a dynamic graph, which has a graph step at the beginning and a number
of sequences of a given number of intermediate graphs and a subsequent graph

8

Held, Krause, Kruse

0

1

4

2

3

5

6

9

7

8

2

3

0

1

4

5

6

9

7

8

(a) Example start graph

(b) Example target graph

Fig. 5: Example for morphing from start to target graph. Constant edges are
blue {(0, 1), (0, 2), (1, 4), (5, 6), (5, 8), (7, 8), (7, 9), (8, 9)}, deleted edges are
orange {(0, 3), (1, 2), (1, 3), (2, 9), (3, 4), (4, 6), (5, 7), (6, 8)}, added edges are
green {(0 ,4), (1, 9), (2, 3), (2, 5), (2, 6), (3, 5), (3, 6), (3, 9), (4, 8), (4, 9)}.

step. The detailed algorithms for creating a dynamic graph and creating a single
graph given a graph step can be seen in Algorithm 1 and 2.

The resulting dynamic graph has some properties additional to the ones spec-
iﬁed. The ﬁrst, last, and every predeﬁned graph step are fairly easy to cluster,
because the clusters are strongly separated. The intermediate steps can be a lit-
tle bit more challenging, because a good community structure is not guaranteed.
How hard the clustering exactly is is dependent on how diﬀerent the two con-
secutive graph steps are and how many intermediate steps between predeﬁned
graphs there are.

6 Experiments and Results

Using the generated dynamic graphs as described in section 5, we measured
modularity, Infomap value, and time for each dynamic approach and its static
base method. The eﬀects of the delete range parameter and diﬀerent dynamic
graph properties like number of nodes and number of changes per time step were
analyzed.

6.1 Experiment Setup

Each graph step of the dynamic graph is clustered multiple times with each
of the four algorithms (Louvain, Louvain-dyn, Infomap and Infomap-dyn). For
each algorithm, the average time is measured and evaluation values, Modularity
and Infomap value, are computed from the resulting partitions. This was done
multiple times per graph to ﬁnd an appropriate average.

Table 1 shows average evaluation values for a sample graph with 3000 nodes.
Depending on the delete range chosen, the time taken by the dynamic algorithms

Dynamic Clustering using Louvain and Infomap

9

compared to the static ones ranges from about 22 % to about 106 %. The eval-
uation values stay at about 100 % and for Infomap even tend to improve when
compared to the static algorithm. This shows how great the gain in complexity
can be, without loosing much quality. Due to the greedy approach used by both
base algorithms and the nature of the Infomap value, the usage of information
collected in the previous step seems to improve the overall quality slightly. The
user has a wide array of options for choosing the parameter delete range.

Table 1: Percentage of dynamic evaluation values compared to static for delete
ranges 0 to 3 on a graph with 3000 nodes, 2200 steps, 10 changes per step and
20 to 30 clusters with about equal size, respectively

Time Modularity

Infomap wlogv

Louvain
delete range 0
delete range 1
delete range 2
delete range 3
Infomap
delete range 0
delete range 1
delete range 2
delete range 3

36,24 %
40,65 %
64,61 %
106,02 %

22,78 %
30,65 %
57,69 %
86,99 %

99,28 %
99,28 %
99,80 %
99,86 %

101,54 %
101,22 %
100,49 %
100,00 %

93,25 %
93,22 %
96,44 %
99,20 %

96,22 %
100,39 %
100,41 %
99,85 %

In the following we will describe experiments which analyze the inﬂuence
of diﬀerent parameters and graph properties. In each case, the corresponding
parameter was modiﬁed.

6.2 Delete Range
It was observed that a very low range could cause the algorithm to be trapped
in a local optima. This is due to the fact that the algorithm concentrates on
local changes and might not react to more global changes if the observed area
around changes is too low. Experiments have shown that a range of at least 2
proves feasible in the chosen scenarios, as seen in Figure 6. This can also be
seen in Table 1. The value of 96 % for the Infomap wlogv value of Infomap for
delete range 0 can be explained this way. The dynamic algorithm was not able
to escape the local optimum, while this is not the case for higher delete ranges.
The spiky curve that comes with delete range 2 could be explained by the
algorithm alternating between two solutions, one being close to the one given
by the static method, and one with a lower rating. With a higher delete range
comes a higher time consumption, as already described in Subsection 4.1.

For the given data, Louvain took 0.72 s in average, while Louvain-dyn only
took 0.47 s. That is a massive boost in computation time while the local optimum

10

Held, Krause, Kruse

can be overcome and the quality of the clustering stays comparable. For a delete
range of 3 on the other hand, Louvain-dyn took 0.77 s. Therefore it is necessary
to estimate, which value for delete range is appropriate and useful for the given
task. The same behavior can be observed with Infomap and the Infomap value.
This can be seen in Figure 8.

A curious observation in Figure 7 was, that with delete range 0, the dynamic
method can actually outperform the static one. This might be due to the fact
that the local optimization is more robust to changes and might adjust better
to changing networks.

7 Conclusion

In this paper, we present an adaption of the Louvain community detection
method to handle changes in dynamic graphs. We propose to run the standard
algorithm only on parts of the graph. After initialization of the partition, only
nodes, which are close to changes, will be processed. Depending on the deﬁnition
of close, this yields a massive runtime reduction. Additionally we implemented
the Infomap score as an alternative objective function.

As we are working on dynamic graphs, we provide a graph generator that
generates graph steps with strong community structure and intermediate steps
that transform one given graph into another one.

In experiments we could show that the dynamic adaption of the algorithm
produces similar results with respect to the modularity measure and the Infomap
score, with lower calculation time. In larger graphs local changes aﬀect a much
lower percentage of the whole graph, which yields further runtime advantage.

A modularity optimization with a delete range of zero could yield getting

stuck in local optima. Higher delete ranges could ﬁx this behavior.

Future work could transfer the approach presented to an Infomap clustering
without the wlogv approximation. For that task, a formula to eﬃciently compute
the gain of moving a node must be developed. Also the inﬂuence of the delete
range should be investigated for other graph parameters, like very huge graphs
with fewer changes per step.

Dynamic Clustering using Louvain and Infomap

11

Fig. 6: Modularity for Louvain and Louvain-dyn with delete range 0 and 2. The
Louvain values for delete range 2 are identical. A local optimum can’t be left
with delete range 0, but it works with delete range 2.

Fig. 7: Modularity for Infomap and Infomap-dyn with delete range 0 and 2.
Modularity of Infomap-dyn for delete range 0 is even over the values of the
static method.

12

Held, Krause, Kruse

Fig. 8: Infomap value (wlogv) for Infomap and Infomap-dyn with delete range 0
and 2. As with Louvain, a local optimum can’t be left with delete range 0, but
it works with delete range 2.

Dynamic Clustering using Louvain and Infomap

13

A Appendix

Algorithm 1 generate dyn graph
1: Input: m, graph steps, time step distance
2:
3: graph list ← {}
4: last graph ← generate graph(m, graph steps.pop(0))
5: graph list.add(last graph)
6: while |graph steps| > 0 do
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25: end while
26: return graph list

current graph = graph list.get last()
for change := 0 to |changes per time step| do

choice ← random choice(add, remove)
if choice == add then

end if
end for
graph list.add(current graph)

end for
last graph ← next graph

next graph ← generate graph(m, graph steps.pop(0))
edges to add, edges to remove ← diﬀerences(last graph, next graph)
number of changes ← |edges to add| + |edges to remove|
changes per time step ← {}
changes per time step ← distribute evenly(number of changes, time step distance)
for time step := 1 to |time step distance| do

add random edge to graph(current graph, edges to add)

else

remove random edge from graph(current graph, edges to remove)

cluster list.add(barabasi graph(cluster size, m))

Algorithm 2 generate graph
1: Input: m, graph step = list of cluster sizes
2:
3: cluster list ← {}
4: for all cluster size in graph step do
5:
6: end for
7: while |cluster list| > 1 do
8:
9:
10:
11:
12: end while
13: return current graph

merge graph1 ← cluster list.pop(0)
merge graph2 ← cluster list.pop(0)
current graph ← minimal merge(merge graph1, merge graph2)
cluster list.add(current graph)

References

1. Aston, N., Hu, W.: Community detection in dynamic social networks. Communi-

2. Barab´asi, A.L., Albert, R.: Emergence of scaling in random networks. science

cations and Network 2014 (2014)

286(5439), 509–512 (1999)

14

Held, Krause, Kruse

Press (1976)

(2010)

3. Biggs, N., Lloyd, E.K., Wilson, R.J.: Graph Theory, 1736-1936. Oxford University

4. Blondel, V.D., Guillaume, J.L., Lambiotte, R., Lefebvre, E.: Fast unfolding of
communities in large networks. Journal of Statistical Mechanics: Theory and Ex-
periment 2008(10), P10008 (2008)

5. Fortunato, S.: Community detection in graphs. Physics Reports 486(3), 75–174

6. Golder, S.a., Wilkinson, D.M., Hubennan, B.a.: Rhythms of social interaction:
Messaging within a massive online network. Proc. 3rd Communities Technol. Conf.
C T 2007 pp. 41–66 (2007)

7. Han, J.D.J., Bertin, N., Hao, T., Goldberg, D.S., Berriz, G.F., Zhang, L.V., Dupuy,
D., Walhout, A.J.M., Cusick, M.E., Roth, F.P., Vidal, M.: Evidence for dynami-
cally organized modularity in the yeast protein-protein interaction network. Nature
430(6995), 88–93 (2004)

8. Held, P., Dockhorn, A., Kruse, R.: On merging and dividing social graphs. Journal

of Artiﬁcial Intelligence and Soft Computing Research 5(1), 23–49 (2015)

9. Holme, P., Saram¨aki, J.: Temporal networks. Physics reports 519(3), 97–125 (2012)
10. Klimt, B., Yang, Y.:
sti-
tutep1, wwceasccaers2004168 (2004), http://scholar.google.com/scholar?hl=
en&btnG=Search&q=intitle:Introducing+the+Enron+Corpus#0

Introducing the Enron Corpus. Mach. Learn.

11. van Laarhoven, T., Marchiori, E.: Graph clustering with local search optimization:
The resolution bias of the objective function matters most. Physical Review E
87(1), 012812 (2013)

12. Leskovec, J., Kleinberg, J., Faloutsos, C.: Graph Evolution: Densiﬁcation and

Shrinking Diameters 1(1) (2006), http://arxiv.org/abs/physics/0603229

13. Leskovec, J., Lang, K.J., Dasgupta, A., Mahoney, M.W.: Community Structure
in Large Networks: Natural Cluster Sizes and the Absence of Large Well-Deﬁned
Clusters p. 66 (2008), http://arxiv.org/abs/0810.1355

14. Rosvall, M., Bergstrom, C.T.: Maps of random walks on complex networks reveal
community structure. Proceedings of the National Academy of Sciences 105(4),
1118–1123 (2008)

15. Rubinov, M., Sporns, O.: Complex network measures of brain connectivity: Uses
and interpretations. Neuroimage 52(3), 1059–1069 (2010), http://dx.doi.org/
10.1016/j.neuroimage.2009.10.003

