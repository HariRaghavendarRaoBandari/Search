6
1
0
2

 
r
a

M
 
6
1

 
 
]

.

A
N
h
t
a
m

[
 
 

1
v
0
1
1
5
0

.

3
0
6
1
:
v
i
X
r
a

Domain decomposition algorithms for the two dimensional nonlinear
Schrödinger equation and simulation of Bose-Einstein condensates

Christophe Besse∗1 and Feng Xing†2

1Institut de Mathématiques de Toulouse UMR5219, Université de Toulouse; CNRS, UPS IMT,

F-31062 Toulouse Cedex 9, France.

2Laboratoire de Mathématiques J.A. Dieudonné, UMR 7351 CNRS, University Nice Sophia
Antipolis, team COFFEE, INRIA Sophia Antipolis Méditerranée, Parc Valrose 06108 Nice

Cedex 02, France, and BRGM Orléans France

March 17, 2016

Abstract

In this paper, we apply the optimized Schwarz method to the two dimensional nonlinear Schrödinger
equation and extend this method to the simulation of Bose-Einstein condensates (Gross-Pitaevskii
equation). We propose an extended version of the Schwartz method by introducing a preconditioned
algorithm. The two algorithms are studied numerically. The experiments show that the preconditioned
algorithm improves the convergence rate and reduces the computation time. In addition, the classical
Robin condition and a newly constructed absorbing condition are used as transmission conditions.

Keywords. nonlinear Schrödinger equation, rotating Bose–Einstein condensate, optimized Schwarz

method, preconditioned algorithm, parallel algorithm

Math. classiﬁcation. 35Q55; 65M55; 65Y05; 65M60.

1

Introduction

We are interested in solving the nonlinear Schrödinger equation and the Gross-Pitaevskii (GPE) equation
by the optimized Schwarz method. A large number of articles and books [16–18] are devoted to this method
for diﬀerent kinds of equations, for example the Poisson equation [21], the Helmholtz equation [14, 19]
and the convection-diﬀusion equation [23]. Recently, the authors of [5, 12, 13, 20] applied the domain
decomposition method to the linear or nonlinear Schrödinger equation. More speciﬁcaly, in [12, 13], the
authors proposed some newly eﬃcient and scalable Schwarz methods for 1d or 2d linear Schrödinger
equation and for 1d nonlinear Schrödinger equation. These new algorithms could ensure high scalability
and reduce computation time. In this paper, we extend these works to the two dimensional nonlinear
case.
(xl, xr) × (yb, yu), xl, xr, yb, yu ∈ R and t ∈ (0, T ) with general real potential V (t, x, y) + f (·) reads

The nonlinear Schrödinger equation deﬁned on a two dimensional bounded spatial domain Ω :=

(cid:26) i∂tu + ∆u + V (t, x, y)u + f (u)u = 0, (t, x, y) ∈ (0, T ) × Ω,

(1)

u(0, x, y) = u0(x, y),

∗christophe.besse@math.univ-toulouse.fr
†feng.xing@unice.fr

1

∂nu = 0, (x, y) ∈ (xl, xr) × {yb, yu},

Su = −ip · u, p ∈ R+,

∂nu + Su = 0, (x, y) ∈ {xl, xr} × (yb, yu),

where u0 ∈ L2(Ω) is the initial datum. We complement the equation with homogeneous Neumann
boundary condition on bottom and top boundaries and Fourier-Robin boundary conditions on left and
right boundaries. They read:
(2)
where ∂n denotes the normal directive, n being the outwardly unit vector on the boundary ∂Ω (see Figure
1). The operator S is given by
(3)
(4)
where Γ = {xl, xr} × (yb, yu). The Laplace–Beltrami operator ∆Γ is ∂2
y in our case. The operator S in
(4) is a pseudo diﬀerential operator constructed recently in [2] as an absorbing boundary operator, which
is used to approximate the exact solution of the problem deﬁned on R2, restricted to a bounded space
domain.

or Su = −i(cid:112)i∂t + ∆Γ + V + f (u)u,

n

xl

Ω

y

yu

yb

n

n

n

x

xr

Figure 1: Spatial bounded domain Ω = (xl, xr) × (yb, yu).

Recently, the Schwarz algorithms have been applied to the one dimensional linear or nonlinear Schrödinger

equation [13]. If the potential is linear and independent of time, then an interface problem allows to con-
struct a global in space operator. It is possible to assemble it in parallel without too much computational
eﬀorts. Thanks to this operator, a new algorithm was introduced which is mathematically equivalent to
the original Schwarz algorithm, but requires less iterations and computation time. If the potential is gen-
eral, the authors used a pre-constructed linear operator as preconditioner, which leads to a preconditioned
algorithm. The preconditioner allows to reduce both the number of iterations and the computation time.
These new algorithms have been extended to the two dimensional linear Schrödinger equation [12], which
also shows the eﬀectiveness of the new algorithms. In this article, we propose to extend the results to the
2d nonlinear case and to the simulation of Bose-Einstein condensates. Following the naming in [13], we
refer to the algorithm given by (6) as “the classical algorithm” and to the algorithm that will be presented
in Section 3 as “the preconditioned algorithm”.

The paper is organized as follows. We present in section 2 the the classical algorithm and some details
about the discretization. A preconditioned algorithm is presented in section 3. In section 4, we present
the implementation of these algorithms on parallel computers. Numerical experiments are performed in
section 5 and we focused on simulation of Bose-Einstein condensates. The last section draws a conclusion
and suggests some future directions of research.

2 Classical algorithm

2.1 Classical optimized Schwarz algorithm
Let us discretize uniformly with NT intervals the time domain (0, T ). We deﬁne ∆t = T /NT to be the
time step. The usual semi-discrete in time scheme developed by Durán and Sanz-Serna [15] applied to

2

(1) reads as

un − un−1

∆t

i

+ ∆

un + un−1

2

+

Vn + Vn−1

un + un−1

2

2

+ f (

un + un−1

2

)

un + un−1

2

= 0, 1 (cid:54) n (cid:54) NT

where un(x, y), (x, y) ∈ Ω denotes the approximation of the solution u(tn, x, y) to the Schrödinger equation
(1) at time tn = n∆t and Vn(x, y) = V (tn, x, y). By introducing new variables vn = (un + un−1)/2 with
v0 = u0 and Wn = (Vn + Vn−1)/2, this scheme can be written as

(5)

where the operator Lx is deﬁned by

Lxvn = 2i

un−1
∆t

,

Lxvn :=

2i
∆t

vn + ∆vn + Wnvn + f (vn)vn.

For any 1 ≤ n ≤ NT , the equation (5) is stationary. We can therefore apply the optimized Schwarz
method. Let us decompose the spatial domain Ω into N subdomains Ωj = (aj, bj), j = 1, 2, ..., N without
overlap as shown in Figure 2 for N = 3. The Schwarz algorithm is an iterative process and we identify
the iteration number thanks to label k. We denote by vk
j,n the solution on subdomain Ωj at iteration
k = 1, 2, ... of the Schwarz algorithm (resp uk
j,n). Assuming that u0,n−1 is known, the optimized Schwarz
algorithm for (5) consists in applying the following sequence of iterations for j = 2, 3, ..., N − 1



(6)

Lxvk
∂nj vk
∂nj vk

2i
j,n =
∆t
j,n + Sjvk
j,n + Sjvk

uj,n−1, (x, y) ∈ Ωj,
j,n = ∂nj vk−1
j,n = ∂nj vk−1

j−1,n + Sjvk−1
j+1,n + Sjvk−1

j−1,n, x = aj, y ∈ (yb, yu),
j+1,n, x = bj, y ∈ (yb, yu),

with a special treatment for the two extreme subdomains Ω1 and ΩN since the boundary conditions are
imposed on {x = a1} × (yb, yu) and {x = bN} × (yb, yu)

∂n1vk

1,n + Sjvk

1,n = 0, x = aj,

∂nN vk

N,n + Sjvk

N,n = 0, x = bN .

y

Ω2

n2

Ω1

n2

Ω3

x

xl = a1

b1 = a2

b2 = a3

b2 = xr

Figure 2: Domain decomposition without overlap, N = 3.

Various transmission operator S can be considered. The ﬁrst one is the classical widely used Robin

transmission condition

(7)

Robin : Sjv = −ip · v, p ∈ R+.

Traditionally, the optimal transmission operator is given in term of transparent boundary conditions
(TBCs). For the nonlinear two dimensional Schrödinger equation, we only have access to approximated

3

m(cid:88)

m(cid:88)

version of the TBCs given by the recently constructed absorbing boundary condition Sm
we used as the transmission condition

pade [2, 3] which

(8)

Sm

pade :

Sjv = −i

am
s v + i

am
s dm

s ϕj,s, x = aj, bj.

s=0

s=1

∆t

padev = −i
Sm

The operator Sm
cally it is approximated by Padé approximation of order m

pade [2, 3] is originally constructed by using some pseudo diﬀerential techniques. Numeri-

(cid:114) 2i
+ ∆Γj + W + f (v)v ≈(cid:16) − i
m(cid:88)
s = eiθ/2/(cid:0)m cos2( (2s−1)π
4m )(cid:1), dm
s = eiθ tan2( (2s−1)π
(cid:17)
(cid:16) 2i

where Γj = {x = aj, bj}× (yb, yu). The Laplace-Beltrami operator ∆Γj is ∂yy in our case and the constant
coeﬃcients are am
4 . The auxiliary
4m ), s = 0, 1, ..., m, θ = π
functions ϕj,s, j = 1, 2, ..., N,s = 1, 2, ..., m are deﬁned as solution of the set of equations
ϕj,s(x, y) = v, (x, y) ∈ (aj, bj) × (yb, yu).

+ ∆Γj + W + f (v) + dm
s

+ ∆Γj + W + f (v) + dm

s )−1(cid:17)

m(cid:88)

s dm
am
s (

am
s + i

2i
∆t

s=0

s=1

(9)

v,

∆t

Let us introduce the ﬂuxes lk

j,n and rk

j,n deﬁned as

lk
j,n(y) = ∂nj vk
rk
j,n(y) = ∂nj vk

j,n(aj, y) + Sjvk
j,n(bj, y) + Sjvk

j,n(aj, y), y ∈ (yb, yu),
j,n(bj, y), y ∈ (yb, yu),

with a special deﬁnition for the two extreme subdomains: lk
be splitted into local problems on subdomains Ωj, j = 1, 2, ..., N

1,n = rk

N,n = 0. Thus, the algorithm (6) can

(10)

and ﬂux problems

(11)

(cid:40) lk+1

j,n = −rk
j,n = −lk
rk+1



Lxvk
∂nj vk
∂nj vk

2i
j,n =
∆t
j,n + Sjvk
j,n + Sjvk

uj,n−1,
j,n = lk
j,n = rk

j,n, x = aj,
j,n, x = bj,

j−1,n + 2Sjvk
j+1,n + 2Sjvk

j−1,n(bj−1, y), j = 2, 3, ..., N,
j+1,n(aj+1, y), j = 1, 2, ..., N − 1.

2.2 Preliminaries related to space discretization
Without loss of generality, we present the space discretization of the semi-discrete Schrödinger equation
deﬁned on the bounded domain (a, b) × (yb, yu), a, b ∈ R

(12)



v + ∆v + W (x, y)v + f (v)v =

2i
∆t
∂nv + Sv = l(x, y), x = a, y ∈ (yb, yu),
∂nv + Sv = r(x, y), x = b, y ∈ (yb, yu),
∂nv = 0, y = yb, y = yu,

2i
∆t

h(x, y),

where W (x, y)v + f (v)v plays the role of the semi-discrete potential in (5) and l(x, y), r(x, y) are two
functions. The operator S is Robin or Sm

pade given respectively by (7) and (8).

4

If f (cid:54)= 0, then the system (12) is nonlinear. The computation of v is accomplished by a ﬁxed point
procedure. If we consider the Robin transmission condition, we take ζ 0 = h and compute the solution v
as the limit of the iterative procedure with respect to the label q, q = 1, 2, ...

For the transmission condition Sm
ϕs, s = 1, 2, ..., m are computed as the limit (with respect to q) of ζ q and φq
solutions of the following coupled system

s = 0, s = 1, 2, ..., m. The unknowns v and
s, s = 1, 2,··· , m, which are

(13)

(14)

(cid:17)

ζ q =

2i
∆t

h,

(cid:16) 2i



+ ∆ + W + f (ζ q−1)
∆t
∂nζ q − ip · ζ q = l, x = a,
∂nζ q − ip · ζ q = r, x = b.
pade, we take ζ 0 = h and φ0



(cid:0) 2i
(cid:0) 2i

∆t

2i
∆t

+ ∆ + Wn + f (ζ q−1(cid:1)ζ q =
m(cid:88)
m(cid:88)

(cid:1)φq
m(cid:88)
s = ζ q − f (ζ q−1)φq−1
m(cid:88)
s dm
am

+ W + ∆Γ + dm
s

s = l, x = a,

s ζ q + i
am

s φq

s=0

s=1

h,

s

am
s dm

s φq

s = r, x = b.

am
s ζ q + i

,

∆t
∂nζ q − i

∂nζ q − i

s=0

s=1

respect to (cid:82)

The spatial approximation is realized with the standard Q1 ﬁnite element method with uniform mesh.
The mesh size of a discrete element is (∆x, ∆y). We denote by Nx (resp. Ny) the number of nodes in x
(resp. y) direction on each subdomain. Let us denote by v (resp. h) the nodal interpolation vector of
v (resp. h), ζq the nodal interpolation vector of ζ q, l (resp. r) the nodal interpolation vector of l(x, y)
(resp. r(x, y)), M the mass matrix, S the stiﬀness matrix and MW the generalized mass matrix with
Ω W vφdx. Let MΓ the boundary mass matrix, SΓ the boundary stiﬀness matrix and MΓ
(resp. MΓ
Γ f (v)φdΓ). We
denote by Ql (resp. Qr) the restriction operators (matrix) from Ω to {a} × (yb, yu) (resp. {b} × (yb, yu))
r ) where “·(cid:62)” is the standard notation of the transpose of a matrix or a vector. The
and Q(cid:62) = (Q(cid:62)
matrix formulation for (13) is therefore given by

W ) the generalized boundary mass matrix with respect to (cid:82)

Γ W vφdΓ (resp. (cid:82)

l , Q(cid:62)

W

(15)

where A = 2i
∆t
condition Sm

pade, we have

M − S + MW . The size of this linear system is Nx × Ny. If we consider the transmission



ζq
φq
1
φq
2...
φq
m

A

(cid:16)A + ip · MΓ + MΓ

 :=
A + i((cid:80)m



 −

2i
∆t

Mh
0
0
...
0

,

r

(cid:19)

··· Bm

Mh − MΓQ(cid:62)(cid:18)l


 .

MΓ · Q(cid:62)(cid:18)l


(cid:19)

Dm

...

r

0
...
0



ζq
φq
1
φq
2...
φq
m

(cid:17)

f (ζq−1)

ζq =

2i
∆t

s ) · MΓ B1 B2
D2

D1

s=1 am
C
C
...
C
f (ζq−1)ζq−1
M
f (ζq−1)φq−1
MΓ

1

...
f (ζq−1

j

MΓ

φq−1

m

)

5

 −

(16)

=

with

MΓQ(cid:62), 1 (cid:54) s (cid:54) m,

Bs = −iam
s dm
s
C = −QMΓ,
2i
Ds = Q(
∆t

MΓ − SΓ + MΓ

W + dm
s

MΓ)Q(cid:62), 1 (cid:54) s (cid:54) m.

It is a linear system with unknown (ζq, φq
boundary and ϕs is the nodal interpolation of ϕs. The vectors v and ϕs are computed by

s is the nodal interpolation of φq

m) where φq

1, ..., φq

s on the

v = lim

q→∞ ζq, ϕs = lim

q→∞ φq

s, s = 1, 2, ..., m.

In addition, the discrete form of the transmission operator S is given by

(17)

Robin : Sv = −ip · v, p ∈ R+,
pade : Sv = −i
Sm

am
s v + i

m(cid:88)

m(cid:88)

am
s dm

s ϕs.

Remark 2.1. The Sm
of the Robin transmission condition. The cost of the algorithm with the Sm
therefore more expensive.

pade transmission condition involves a larger linear system to solve than the one
pade transmission condition is

s=0

s=1

If the potential is linear f = 0, then from the system (12) we have

(18)

and

(19)

(20)

Robin :

v =

(cid:16)A + ip · MΓ(cid:17)


 =
s ) · MΓ −(cid:88)

v
ϕ1
ϕ2
...
ϕm

2i
∆t

s

Mh
0
0
...
0

,

r

2i
∆t

(cid:19)
Mh − MΓQ(cid:62)(cid:18)l
(cid:19)
MΓ · Q(cid:62)(cid:18)l
 −


 .
Mh − MΓQ(cid:62)(cid:18)l

(cid:17)

0
...
0

r

v =

2i
∆t

r

(cid:19)

.

(cid:16)A + i(
m(cid:88)

am

BsD−1

Cs

s=1

s=1

Spade: A

Directly from the deﬁnition of A, (19) can be written as one equation for v

Note that numerically, we implement (18) and (19) to compute v (and ϕs, s = 1, 2, ..., m).

2.3 Classical discrete algorithm
Following what is done for the complete domain Ω × [0, T ], we discretize the equations (10) and (11) on
each subdomain Ωj at each time step n = 1, 2, ..., NT . Accordingly, on each subdomain Ωj, let us denote
by

Mj − Sj + Mj,Wn where Mj is the mass matrix, Sj is the stiﬀness matrix, Mj,Wn is the

• Aj,n = 2i

generalized mass matrix with respect to(cid:82)

∆t

Wnvφdx,

Ωj

6

the generalized boundary mass matrix with respect to (cid:82)

boundary mass matrix with respect to(cid:82)

Wn

• MΓj

f (v)φdΓ where Γj = {x = aj, bj} × (yb, yu),

Γj

WnvφdΓ, MΓj

f

Γj

the generalized

• Qj,l and Qj,r the restriction operators (matrix) from Ωj to its boundary {aj} × (yb, yu) and {bj} ×

(yb, yu) respectively, Q(cid:62)

j = (Q(cid:62)

j,l, Q(cid:62)

j,r),

• Bj,s, Cj, Dj,n,s the matrix associated with the operator Sm
pade,
• vk
j,n (resp. uk
j,n).
j,n (resp. rk
j,n) the nodal interpolation vector of lk

j,n) the interpolation vectors of vk

j,n (resp. uk

j,n (resp. rk

j,n). The classical algorithm is
We denote by lk
initialized by an initial guess of l0
j,n, j = 1, 2, ..., N. The boundary conditions for any subdomain
Ωj at iteration k + 1 involve the knowledge of the values of the functions on adjacent subdomains Ωj−1
and Ωj+1 at prior iteration k. Thanks to the initial guess, we can solve the Schrödinger equation on each
subdomain, allowing to build the new boundary conditions for the next step, communicating them to
other subdomains. This procedure is summarized in (21) for N = 3 subdomains at iteration k.

j,n and r0

 Solve−−−→

rk

1,n
lk
2,n
rk
2,n
rk
3,n

−→

vk

vk
vk

1,n

2,n

3,n

−rk

−lk
−rk
−lk

1,n + 2S(Q1,rvk
2,n + 2S(Q2,lvk
2,n + 2S(Q2,rvk
3,n + 2S(Q3,lvk

1,n)
j,n)
j,n)
N,n)

 Comm.

−−−−→

 .

rk+1

1,n
lk+1
2,n
rk+1
2,n
lk+1
3,n

(21)

Let us deﬁne the discrete interface vector by
n = (rk,(cid:62)
gk,(cid:62)

1,n ,··· , lk,(cid:62)

j,n , rk,(cid:62)

j,n ,··· , lk,(cid:62)
N,n).

Thanks to this deﬁnition, we give a new interpretation to the algorithm which can be written as

(22)
where I is identity operator and Rh,n is an operator. The solution to this iteration process is given as the
solution to the discrete interface problem

n = Rh,ngk
gk+1

n = I − (I − Rh,n)gk
n.

(I − Rh,n)gn = 0.

Remark 2.2. If f = 0, the discretization of (10) on each subdomain is

(23)

(24)

Robin :

(cid:16)Aj,n + i(
m(cid:88)

Spade:

(cid:17)

(cid:16)Aj,n + ip · MΓj
s ) · MΓj − m(cid:88)

am

s=1

s=1

j,n−1 − MΓj Q(cid:62)(cid:18)lk

(cid:19)

vk

j,n =

2i
∆t

Muk

(cid:17)

Bj,sD−1

j,n,s

Cj

vk

j,n =

2i
∆t

Muk

,

j,n
rk
j,n

j,n−1 − MΓj Q(cid:62)(cid:18)lk

(cid:19)

.

j,n
rk
j,n

3 Preconditioned algorithm
The application of the nonlinear operator Rh,n to gk
preconditioner P −1 in (22), which leads to a preconditioned algorithm

n is expensive. In this section, we propose to add a

(25)

n = I − P −1(I − Rh,n)gk
gk+1
n.

7

Here P is a non singular matrix. To deﬁned it, let us consider the free Schrödinger equation with a zero
potential V = 0, f = 0. We show in Propositions 3.1 and 3.2 that in this case, the operator Rh,n is linear

Rh,ngk

n = Lhgk

n + dn,

where Lh is a block matrix as deﬁned by (26) and dn is a vector (the notation “MPI j” is used in the next
section). The matrix Lh is independent of the time step n. The size of each block X k,l is Ny × Ny.

(26)

Lh =



(cid:122)(cid:125)(cid:124)(cid:123)

MPI 0

(cid:122)

(cid:125)(cid:124)

(cid:123)

(cid:122)

X 2,1 X 2,2

MPI 1

MPI 2

(cid:125)(cid:124)

(cid:123)

(cid:122)

MPI N−2

(cid:125)(cid:124)

(cid:123) MPI N−1
(cid:122)(cid:125)(cid:124)(cid:123)

X 1,4

X 2,3 X 2,4

X 3,1 X 3,2

X 3,3 X 3,4

···

···

X N−1,1 X N−1,2

X N−1,3 X N−1,4

X N,1



.

Thus, we propose here

P = I − Lh.

Note that since Lh is independent of time step n, the preconditioner is constructed once and used for all
time steps.
Proposition 3.1. For the Robin transmission condition, assuming that V = 0 and f = 0, the matrix Lh
takes the form (26) and Lh is independent of time step n. In addition, if the subdomains are equal, then

(27)

X 2,1 = X 3,1 = ··· = X N,1, X 2,2 = X 3,2 = ··· = X N−1,2,
X 2,3 = X 3,3 = ··· = X N−1,3, X 1,4 = X 2,4 = ··· = X N−1,4.

Proof. First, by some straight forward calculations using (23) and (21), we can verify that

(28)

and d(cid:62)

n = (d(cid:62)

n,1,r, ..., d(cid:62)

n,j,l, d(cid:62)

X j,1 = −I − 2ip · Qj,l(Aj,n + ip · MΓj )−1MΓj Q(cid:62)
j,l,
X j,2 = −2ip · Qj,l(Aj,n + ip · MΓj )−1MΓj Q(cid:62)
j,r,
X j,3 = −2ip · Qj,r(Aj,n + ip · MΓj )−1MΓj Q(cid:62)
j,l,
X j,4 = −I − 2ip · Qj,r(Aj,n + ip · MΓj )−1MΓj Q(cid:62)
j,r,
n,j,r, ..., d(cid:62)

n,N,r)(cid:62) with

(29)

dn,j,l = 2ip · Qj−1,r(Aj−1,n + ip · MΓj−1)
2i
∆t
dn,j,r = 2ip · Qj+1,l(Aj+1,n + ip · MΓj+1)−1 2i
∆t

uj−1,n, j = 2, 3, ..., N,
uj+1,n, j = 1, 2, ..., N − 1.

Secondly, since V = 0, then

(30)

Mj,Wn = 0, Aj,1 = Aj,2 = ... = Aj,NT =

Mj − Sj, j = 1, 2, ..., N.

2i
∆t

8

Thus, the blocks X j,1, X j,2, X j,3 and X j,4 are both independent of time step n.

Finally, thanks to the hypothesis of the proposition, the geometry of each subdomain is identical. Thus,
the various matrices coming from the assembly of the ﬁnite element methods are the same. Therefore,
we have

M1 = M2 = ... = MN ,

S1 = S2 = ... = SN , MΓ1 = MΓ2 = ... = MΓN ,

(31)
The conclusion follows directly from (28).

Q1,l = Q2,l = ... = QN,l, Q1,r = Q2,r = ... = QN,r.

pade. If the potential is zero, then the
Proposition 3.2. Let us consider the transmission condition Sm
matrix Lh takes the form (26) and Lh is independent of time step n. In addition, if the subdomains are
equal, then (27) is true.
Proof. The proof is almost same as that of the proposition 3.1. Using (24) and (21) gives
(32)
X j,1 = −I − 2Qj,l

Bj,sD−1

m(cid:88)

m(cid:88)

D−1

am

i

am
s + i

am
s dm
s

j,l,

j,n,s

j,n,s

m(cid:88)
m(cid:88)

s=1

s=0

am
s + i

s=1

am
s dm
s

D−1

j,n,s

Cj

am
s + i

m(cid:88)

s=1

am
s + i

am
s dm
s

m(cid:88)

D−1

j,n,s

Cj

am
s dm
s

D−1

j,n,s

s=1

Cj

(cid:17)(cid:16)Aj,n + i(
s ) · MΓj −(cid:88)
m(cid:88)
(cid:17)(cid:16)Aj,n + i(
s ) · MΓj −(cid:88)
m(cid:88)
(cid:17)(cid:16)Aj,n + i(
s ) · MΓj −(cid:88)
m(cid:88)
(cid:17)(cid:16)Aj,n + i(
m(cid:88)
s ) · MΓj −(cid:88)

Cj

am

am

am

s=1

s=1

s=1

s=1

s=1

Bj,sD−1

j,n,s

Cj

Bj,sD−1

j,n,s

Cj

Bj,sD−1

j,n,s

Cj

(cid:17)−1MΓj Q(cid:62)
(cid:17)−1MΓj Q(cid:62)
(cid:17)−1MΓj Q(cid:62)
(cid:17)−1MΓj Q(cid:62)

j,r,

j,l,

Cj

j,r.

(cid:16)
m(cid:88)
m(cid:88)
(cid:16)

s=0

s=0

(cid:16)
(cid:16)

i

i

X j,2 = −2Qj,l

X j,3 = −2Qj,r

X j,4 = −I − 2Qj,r

i

s=0

s=1

s=1

s=1

Under these assumptions, we have (30) and (31). In addition, the matrix associated with the transmission
condition Sm

pade satisfy

B1,s = B2,s = ... = BN,s, C1 = C2 = ... = CN , D1,n,s = D2,n,s = ... = DN,n,s, s = 1, 2, ...m,

and Dj,n,s = Q( 2i

∆t

MΓj − SΓj + MΓj

Wn

+ dm
s

MΓj )Q(cid:62) is independent of time step n since MΓj

Wn

= 0.

Intuitively, the free semi-discrete Schrödinger operator without potential is a rough approximation of

the semi-discrete Schrödinger operator with potential:

2i
∆t

u + ∆u ≈ 2i
∆t

u + ∆u + V u + f (u)u.

In other words, V u + f (u)u is a perturbation of the free semi-discrete Schrödinger operator. Thus, the
matrix Lh can be seen as an approximation to

I − Rh,n.

Based on the previous propositions, it is suﬃcient to compute only four blocks X 2,1, X 2,2, X 2,3 and X 2,4
to construct the preconditioner P . It will be shown in the following section that the construction can be
implemented in a parallel way.

4 Parallel implementation

We present the parallel implementation of the classical algorithm (22) and the preconditioned algorithm
(25) in this section. We ﬁx one MPI process per subdomain [22]. We use the distributed matrix, vector
and iterative linear system solver avalaible in PETSc library [6].

9

4.1 Classical algorithm
The discrete interface vector gk
is located in MPI process 0, lk
process N − 1.

n is stored in a distributed manner in PETSc form. As shown by (33), rk
1,n
j,n and rk
N,n is in MPI

j,n are in MPI process j − 1, j = 2, 3, ..., N − 1 and rk

(33)

gk
n =



rk

1,n...

lk
j,n
rk

j,n...

rk
N,n



(cid:9)MPI 0
(cid:27)
(cid:9)MPI N − 1

MPI j − 1

As shown by (21) for N = 3, at iteration k, vk
and the boundary values are communicated.

j,n, j = 1, 2, ..., N is computed on each subdomain locally

4.2 Preconditioned algorithm
Thanks to the analysis yielded in previous section, we can build explicitly Lh with few computations.
For the Robin transmission condition, it is is based on the formulas (28). For the transmission condition
pade, the idea is equivalent, but involves (32). According to the proposition (3.1), the column s of X 2,1
Sm
and X 2,3 are

X 2,1es = −es − 2ip · Q2,l(Aj,n + ip · MΓj )−1MΓ2Q(cid:62)
X 2,3es = −2ip · Q2,r(Aj,n + ip · MΓj )−1MΓ2Q(cid:62)
2,les,

2,les,

where es = (0, 0, ..., 1, ...0) ∈ CNT ×Ny, all its elements are zero except the s-th, which is one. The element
2,les being a vector, it is necessary to compute one time the application of (Aj,n + ip · MΓj )−1 to
MΓ2Q(cid:62)
vector. Similarly, we have

X 2,2es = −2ip · Q2,l(Aj,n + ip · MΓj )−1MΓ2Q(cid:62)
2,res,
X 2,4es = −es − 2ip · Q2,r(Aj,n + ip · MΓj )−1MΓ2Q(cid:62)

2,res,

∆t

Mj − Sj for V = 0, f = 0. To know the ﬁrst Ny columns of X 2,1, X 2,2,
Let us recall that Aj,n = 2i
X 2,3 and X 2,4, we only have to compute 2Ny times the application of (Aj,n + ip · MΓj )−1 to vector. In
other words, this amounts to solve the Schrödinger equation on a single subdomain 2Ny times to build
the matrix Lh. The resolutions are all independent. Therefore, we can solve them on diﬀerent processors
using MPI paradigm. We ﬁx one MPI process per domain. To construct the matrix Lh, we use the N
MPI processes to solve the equation on a single subdomain (ex. (0, T )×Ω2) 2Ny times. Each MPI process
therefore solves the Schrödinger equation on a single subdomain maximum

Nmpi := [

2Ny
N

] + 1 times,

where [x] is the integer part of x. This construction is therefore super-scalable in theory. Indeed, if N is
doubled, then the size of subdomain is divided by two and Nmpi is also approximately halved.
Concerning the computational phase, the transpose of Lh is stored in a distributed manner using the
library PETSc. As shown by (26), the ﬁrst block column of Lh lies in MPI process 0. The second and
third blocks columns are in MPI process 1, and so on for other processes. In addition, for any vector y,
the vector x := P −1y is computed by solving the linear system

with Krylov methods (GMRES or BiCGStab).

P x = y

10

5 Numerical results

We implement the algorithms in a cluster consisting of 92 nodes (16 cores/node, Intel Sandy Bridge
E5-2670, 32GB/node). We ﬁx one MPI process per subdomain and 16 MPI processes per node. The
communications are handled by PETSc and Intel MPI. The linear systems related to (15), (2.2), (18) and
(19), are solved with the LU direct method using MKL Pardiso library. The convergence condition for
our algorithms is (cid:107) gk+1

n (cid:107)< 10−10, n = 1, 2, ..., NT . The initial vectors are

n − gk

• g0
• g0

1 = random vector,
n−1, n = 2, 3, ..., NT .

1 = 0 or g0
k→∞ gk

n = lim

Since the convergence properties for diﬀerent time steps n = 1, 2, ..., NT are similar, we only consider the
number of iterations required for convergence of the ﬁrst time step n = 1. As mentioned in [17], using the
zero initial vector could give wrong conclusions associated with the convergence. Thus, the zero vector is
used when one wants to evaluate the computation time, while the random vector is used when comparing
the transmission conditions. The theoretical optimal parameter p (resp. m) in the transmission condition
Robin (resp. Sm

pade) is not at hand for us, we then seek the best parameter numerically for each case.

This section is composed of two subsections. The ﬁrst one is devoted to the Schrödinger equation. In

the second, we consider the simulation of Bose-Einstein condensates.

5.1 Schrödinger equation
We decompose the physical domain (−16, 16) × (−8, 8) into N equal subdomains without overlap. The
ﬁnal time T and the time step ∆t are ﬁxed to be T = 0.5 and ∆t = 0.01 in this subsection. We consider
two diﬀerent meshes

∆x = 1/128, ∆y = 1/8,

∆x = 1/2048, ∆y = 1/64,

where the size of cell is ∆x × ∆y. The potential and the initial datum (Figure 3) are

V = |u|2,

u0(x, y) = e−x2−y2−0.5ix,

which give rise to a solution that propagates slowly to the negative side in y direction and undergoes
dispersion. It is possible to solve numerically the Schrödinger equation on the entire domain Ω with the
ﬁrst mesh (∆x = 1/128, ∆y = 1/8) under the memory limitation (32G). We compare in this sub section
the classical and the preconditioned algorithms, as well as the two transmission conditions.

5.1.1 Comparison of the classical algorithm and the preconditioned algorithm
We are interested in observing the robustness, the number of iterations of the ﬁrst time step, the compu-
tation time involving the transmission condition Sm
pade. The zero vector is used as the initial vector g0
1.
We denote by Nnopc (resp. Npc) the number of iterations required for convergence with the classical algo-
rithm (resp. the preconditioned algorithm). Tnopc and Tpc denote the computation times of the classical
algorithm and the preconditioned algorithm respectively. In addition, we denote by T ref the computation
time to solve numerically on a single processor the Schrödinger equation on the entire domain.

First, we consider a mesh with ∆x = 1/128, ∆y = 1/8. We make the tests for N = 2, 4, 8, 16, 32
subdomains. The convergence history of the ﬁrst time step is presented in Figure 4 for N = 2 (left) and
N = 32 (right). Table 1 shows the number of iterations of the ﬁrst time step and the computation times.

11

Figure 3: Initial datum |u0|.

We can see that all the algorithms are robust and scalable. The number of iterations is independent of
number of subdomains. This independence has already been observed for one dimensional Schrödinger
equation for small N [13, 20]. In addition, the preconditioner allow to reduce number of iterations and
computation time.

Figure 4: Convergence histories of the ﬁrst time step for N = 2 (left) and N = 32 (right). The mesh is ∆x = 1/128,
∆y = 1/8.

N

Nnopc
Npc
T ref
Tnopc
Tpc

2
18
6

4
18
6

1106.2
356.2

571.2
180.5

8
18
6
93.7
297.4
92.1

16
18
6

32
18
6

161.8
50.3

85.2
26.6

Table 1: Number of iterations and total computation time (seconds) of the algorithms with the mesh ∆x = 1/128,
∆y = 1/8.

12

024681012141618Number of iterations10-1110-1010-910-810-710-610-510-410-310-210-1100101102Absolute ResidualClassicalPreconditioned024681012141618Number of iterations10-1110-1010-910-810-710-610-510-410-310-210-1100101102Absolute ResidualClassicalPreconditionedSecondly, we reproduce the same tests with the mesh ∆x = 1/2048, ∆y = 1/64. The convergence
history of the ﬁrst time step, the total computation times are shown in Figure 5 and Table 2. The
algorithms are both robust for N = 1024, but not scalable from N = 512 to N = 1024. The classical
algorithm loses scalability since if we use more subdomains used to decompose Ω, then more iterations
are required for convergence. Concerning the preconditioned algorithm, the computational time is larger
with N = 1024 compared to N = 512 since the application of the preconditioner increases with larger
N. However, the preconditioned algorithm is much more eﬃcient since it can both reduce the number of
iterations and the total computation times.

Figure 5: Convergence histories of the ﬁrst time step for N = 256 (left) and N = 1024 (right) with the mesh
∆x = 1/2048, ∆y = 1/64.

N

256

Classical algorithm

3582.4
Preconditioned algorithm 596.9

512

2681.5
376.1

1024
2516.6
441.9

Table 2: Computation times (seconds) of the algorithms with the mesh ∆x = 1/2048, ∆y = 1/64.

5.1.2 Comparison of transmission conditions
pade in the framework of
In this part, we compare numerically the transmission conditions Robin and Sm
the two algorithms. The initial vector g0
1 here is a random vector to make sure that all the frequencies
are included. The time step is ﬁxed to be ∆t = 0.01 and the mesh is ∆x = 1/128, ∆y = 1/8. Figure
6 and Figure 7 present the convergence histories of the ﬁrst time step in the framework of the classical
and the preconditioned algorithms with Robin and Sm
pade transmission conditions for N = 2 and N = 32
respectively. It can be seen that in the framework of the classical algorithm, the transmission condition
pade allows the algorithm to converge faster, while in the framework of preconditioned algorithm, they
Sm
have similar histories of convergence. This observation indicates that the preconditioner P is a good
approximation of the nonlinear operator I − Rh,n. The inﬂuence of the transmission conditions is elimi-
nated by the preconditioner. In addition, we could conﬁrm the conclusion of the previous subsection: the
preconditioner reduces a lot the number of iterations required for convergence.

5.1.3 Inﬂuence of parameters
In this subsection, we study the inﬂuence of parameters in the transmission conditions:

13

0510152025303540Number of iterations10-1110-1010-910-810-710-610-510-410-310-210-1100101102103Absolute ResidualClassicalPreconditioned020406080100120140Number of iterations10-1110-1010-910-810-710-610-510-410-310-210-1100101102103Absolute ResidualClassicalPreconditionedFigure 6: Convergence histories of the ﬁrst time step of the classical algorithm (left) and the preconditioned
algorithm for N = 2. The mesh is ∆x = 1/128, ∆y = 1/8.

Figure 7: Convergence histories of the ﬁrst time step of the classical algorithm (left) and the preconditioned
algorithm for N = 32. The mesh is ∆x = 1/128, ∆y = 1/8.

14

050100150200Number of iterations10-1110-1010-910-810-710-610-510-410-310-210-1100101102Absolute ResidualRobin(p=29)Smpade(m=13)0123456Number of iterations10-1210-1110-1010-910-810-710-610-510-410-310-210-1100101102103Absolute ResidualRobin(p=28)Smpade(m=12)050100150200Number of iterations10-1110-1010-910-810-710-610-510-410-310-210-1100101102103Absolute ResidualRobin(p=29)Smpade(m=13)0123456Number of iterations10-1210-1110-1010-910-810-710-610-510-410-310-210-1100101102103Absolute ResidualRobin(p=28)Smpade(m=12)• the parameter m (order of Padé approximation) in the transmission condition Sm
• the parameter p in the transmission condition Robin.

pade,

The time step and the mesh are ﬁxed to be ∆t = 0.01 and ∆x = 1/128, ∆y = 1/8.

Firstly, we consider the inﬂuence of m in the transmission condition Sm

pade. We present in Figure 8 and
in Figure 9 the number of iterations in relation to the order of Padé approximation (m) in the framework
of the classical and the preconditioned algorithms. Both of the zero vector and the random vector are
considered as the initial vector in our tests.

• For the classical algorithm, if the initial vector is the zero vector, there exists an optimal parameter
m. This observation is not consistent with our expectations since the higher order should make
the algorithm converge faster. We believe that the zero initial vector gives us some inaccurate
information.

• For the classical algorithm, if the initial vector is a random vector, the number of iterations ﬁrst
decreases then increases by increasing the order m. We however do not have yet an explanation for
the relation between the convergence and the parameter m, which needs some more investigations.
• The parameter m is not very important for the preconditioned algorithm since the preconditioner

hides the information about the order.

Figure 8: Number of iterations vs. parameter m for N = 2 (left) and N = 32 (right) in the framework of the
classical algorithm.

Secondly, we study the inﬂuence of p in Robin transmission condition. The numbers of iterations
are presented in Table 3 with diﬀerent p for N = 2 and N = 32 (here only p = 5, 10, ..., 50 are shown).
Both the classical algorithm and the preconditioned algorithm (Cls./Pd.), as well as the diﬀerent initial
vectors (zero or random) are considered. As can be seen, for the preconditioned algorithm, the number of
iterations is almost the same in each case. For the classical algorithm, there exists an optimal p for each
case.

In conclusion, the use of the preconditioner allows to reduce both the number of iterations and the
computation time. In addition, the preconditioned algorithm is not sensitive to the transmission conditions
as well as the parameters in these transmission conditions.

5.2 Simulation of Bose-Einstein condensates
In this part, we apply the parallel algorithms to BEC simulation. Before comparing numerically the
algorithms and making dynamic simulation of quantized vortex lattices, we recall some facts about BEC.

15

2468101214161820m020406080100120Number of iterationsZero initial guessRandom initial guess2468101214161820m020406080100120140Number of iterationsZero initial guessRandom initial guessFigure 9: Number of iterations vs. parameter m for N = 2 (left) and N = 32 (right) in the framework of
the preconditioned algorithm.

p

5
10
15
20
25
30
35
40
45
50

N = 2

N = 32

Zero

Random

Zero

Random
Cls. Pd. Cls. Pd. Cls. Pd. Cls. Pd.
6
57
6
35
6
32
36
6
6
41
6
46
53
6
6
59
6
66
73
6

582
316
241
212
200
200
204
211
223
234

548
297
227
200
189
186
188
194
208
216

57
35
33
36
41
47
53
60
66
73

6
6
6
6
6
6
6
6
6
6

6
6
6
6
6
6
6
6
6
6

6
6
6
6
6
6
6
6
6
6

Table 3: Number of iterations vs. parameter p.

16

2468101214161820m5.75.85.96.06.16.26.3Number of iterationsZero initial guessRandom initial guess2468101214161820m5.75.85.96.06.16.26.3Number of iterationsZero initial guessRandom initial guess5.2.1 Gross-Pitaevski equation
A Bose–Einstein condensate (BEC) is a state of matter of a dilute gas of bosons cooled to temperatures
very close to absolute zero. Under such conditions, a large fraction of bosons occupy the lowest quantum
state, at which point macroscopic quantum phenomena become apparent. One of the models for BEC is
the Gross-Pitaevskii (GPE) equation [1, 7, 9, 11]. In this paper, we consider the GPE equation deﬁned
on a bounded spatial domain with the same boundary conditions as (1):

(34)

u(0, x, y) = u0(x, y).

2 ∆u − V (x, y)u − β|u|2u + ω · Lzu = 0, (t, x, y) ∈ (0, T ) × Ω,

(cid:26) i∂tu + 1

The constant β describes the strength of the short-range two-body interactions (positive for repulsive
interaction and negative for attractive interaction) in a condensate. The constant ω ∈ R represents the
angular velocity, the z-component of the angular momentum Lz is given by

Lz = −i(x∂y − y∂x).

The potential here is

V (x, y) =

(γ2

xx2 + γ2

y y2), γx, γy ∈ R.

1
2

The GPE equation is a type of nonlinear Schrödinger equation. One of the diﬃculties in the simulation
of Bose-Einstein condensates derives from the term of rotation. Recently, the authors of [10] introduced a
coordinate transformation that allows to write the GPE equation in this new coordinates as a nonlinear
Schrödinger equation (36) with a time-dependent potential but without the rotation term. Thus, the
algorithms that we presented in the previous sections are applicable for GPE equation. For ∀t (cid:62) 0, the
orthogonal rotational matrix A(t) is deﬁned by

The transformed Lagrange coordinate ((cid:101)x,(cid:101)y) is then deﬁned as

A(t) =

sin(ωt)
cos(ωt)

(cid:18) cos(ωt)
(cid:19)
(cid:18)x

− sin(ωt)

(cid:19)
(cid:18)x

.

(cid:19)

= A−1(t)

(cid:19)
(cid:18)(cid:101)x(cid:101)y
(cid:26) i∂t(cid:101)u + 1
2 ∆(cid:101)u − Vt(t,(cid:101)x,(cid:101)y)(cid:101)u − β|(cid:101)u|2(cid:101)u = 0, t ∈ (0, T ),
(cid:101)u(0,(cid:101)x,(cid:101)y) =(cid:101)u0((cid:101)x,(cid:101)y),

= A(cid:62)(t)

.

y
In this new coordinate, the GPE equation (34) could be written as

y

(35)

(36)

where
(37)

(cid:101)u(t,(cid:101)x,(cid:101)y) := u(t, x, y), Vt(t,(cid:101)x,(cid:101)y) := V (x, y), where (x, y)(cid:62) = A(t)((cid:101)x,(cid:101)y)(cid:62).

Formally, the only diﬀerence between the equation (36) and the Schrödinger equation (1) is the
constant in front of the Laplace operator ∆. Thus, we could directly apply the domain decomposition
algorithms to the equation (36) on the spatial domain Ω = (xl, xr) × (yb, yu). The Robin transmission
condition and the transmission condition Sm
pade are given by (7), (8) and (9). A minor modiﬁcation
concerns the constant before the operator ∆Γj in (9) which is 1

Once the solution (cid:101)u is computed numerically, it is possible to reconstruct the solution u by (37). At
time t, the computational domain of (cid:101)u(t,(cid:101)x,(cid:101)y) is Ω = (xl, xr) × (yb, yu) and the computational domain

of u(t, x, y) is A(t)Ω (see ﬁgure 10). The domains A(t)Ω for t (cid:62) 0 share a common disc. The values of
u(t, x, y) within the maximum square (the valid zone) are all in the disc, which could be computed by
interpolation. The valid zone is

2 here.

(

xl√
2

,

xr√
2

) × (

yb√
2

,

yu√
2

).

17

(a) ((cid:101)x,(cid:101)y) ∈ Ω.

(b) (x, y) ∈ A(t)Ω.

Figure 10: (a) The computational domain Ω. (b) The domain A(t)Ω at some diﬀerent times: t = 0,
t = π/4 and t = π/2 where ω = 0.5.

5.2.2 Comparison of algorithms
In this part, we ﬁx the physical domain to be Ω = (−16, 16) × (−16, 16). The initial datum is taken as a
Gaussian

−(x2+2y2)

2

, (x, y) ∈ R2,

u0(x, y) =

1

e

π1/4

where the coeﬃcients are ω = 0.4 and β = 10.15. The time step is ﬁxed as ∆t = 0.0001. Firstly, we
use a wide mesh ∆x = ∆y = 1/32, which generates 1024 × 1024 unknowns on Ω. It is possible to solve
the GPE equation (36) on the complete domain Ω under our memory limitation (32G) without using the
parallel algorithms (classical or preconditioned algorithm). However, the computation time could be very
long. Thus, we use here a small ﬁnal time T = 0.1. Using the same notations as in the previous sections,
pade transmission
we show in Table 4 the computation times of the two algorithms with Robin and Sm
conditions. Since the boundary condition imposed on Ω is associated with the transmission operator, the
reference times T ref for the two transmission condition are diﬀerent. In BEC simulation, a small time step
is necessary. According to our experiments, when a small ∆t is considered, a large m in Sm
pade transmission
pade is much
condition is needed to ensure fast convergence. Thus, the use of the transmission condition Sm
more expensive than the transmission condition Robin. We can also see that the computation times of
the classical algorithm (Tpc) and the preconditioned algorithm (Tnopc) are scalable.

N

2

4

Robin, p = 180

pade, m = 76
Sm

5.68
3.49

T ref
Tnopc
Tpc
T ref
Tnopc > 20
6.30
Tpc

2.66
1.60

10.70
3.52

8
5.68
1.28
0.77
8.41
7.40
2.30

16

32

0.68
0.44

5.07
1.68

0.33
0.24

4.23
1.37

Table 4: Computation time in hours with the mesh ∆x = ∆y = 1/32.

We make the tests with a ﬁner mesh ∆x = 1/1024, ∆y = 1/64 with the Robin transmission condition
pade is much more

since it has been seen that the implementation with the transmission condition Sm

18

expensive than with the Robin transmission condition in the context of Gross-Pitaevski equation. The
complete domain is decomposed into N = 128, 256, 512, 1024 subdomains. The computation times are
presented in Table 5. We could see that the both algorithms are scalable. In addition, the preconditioner
allows to reduce the total computation time. However, since the implementation of the preconditioner
consumes memory, the memory is not suﬃcient in the case N = 128.

N

Tnopc, p = 95
Tpc, p = 95

128
19.3

*

256
8.8
2.3

512
5.0
1.6

1024
2.1
0.8

*: the memory is not suﬃcient.

Table 5: Computation time in hours with the mesh ∆x = 1/1024, ∆y = 1/64.

5.2.3 Dynamic simulation of quantized vortex lattices
According to the studies in the previous subsection, we apply the algorithms with the Robin transmission
condition to study the dynamics of quantized vortex lattices for BEC with rotation. In this simulation,
the nonlinear potential and the parameters are

V (x, y) =

1
2

(x2 + y2), β = 1000, ω = 0.9.

The initial solution u0 is a stationary vortex lattice [4, 7]. The stationary solution φ of (34) is deﬁned as

(38)

u(t, x, y) = φ(x, y)e−iµt,

where µ is the chemical condensation potential. By substituing (38) in (34), we have

µφ = − 1
2

φ + V φ + β|φ|2φ − ωLzφ,

with the constraint of normalisation

||φ||2

2 =

|φ(x, y)|2dxdy = 1.

(cid:90)

R2

(cid:90)

β
4

R2

This is therefore a nonlinear eigenvalue problem. The eigenvalue µ can be computed from its corresponding
eigenvector φ by

µβ,ω(φ) = Eβ,ω(φ) +

|φ(x, y)|4dxdy,

where

(39)

Eβ,ω(φ) =

1
2

(cid:90)

R2

(|∇φ|2 + V |φ|2 + β|φ|4 − ωφLzφ)dxdy.

The ground state of a BEC is deﬁned as the solution of minimization problem, denoted by φg,

where S = {φ| ||φ||2 = 1, Eβ,ω < ∞}.

For our simulation, we take the solution of minimization problem as the datum initial

Eβ,ω(φg) = min
φ∈S

Eβ,ω(φ),

(40)

u0(x, y) = φg(x, y).

19

It is computed by BESP method (Backward Euler Sine Pseudospectral) [8] using GPELab [4], a matlab
toolbox developed for the computation of the ground states and the dynamics of quantum systems modeled
by GPE equations.
The complete domain Ω = (−16, 16) × (−16, 16) is decomposed into N = 32 subdomains. We ﬁx the
time step as ∆t = 0.0001. The mesh is ∆x = ∆y = 1/32. The parameter p here is p = 180. Figure 11
shows the contours of the solution |u(t, x, y)|2 at some diﬀerent times. The solution is illustrated in the
√
valid zone (−16/
2). The total computation time is about 16 hours.

2, (16 − ∆y)/

√

√

√

2, 16/

2) × (−16/

6 Conclusion and perspective

We applied the optimized Schwarz method to the two dimensional nonlinear Schrödinger equation and
GPE equation. We proposed a preconditioned algorithm which allows to reduce the number of iterations
and the computation time. According to the numerical tests, the preconditioned algorithm is not sensitive
to the transmission conditions (Robin, Sm
pade) and the parameters in these conditions. In addition, the
parallel algorithms are applied to the BEC simulation. We can obtain an accurate solution by using the
parallel algorithms and the computation time of the preconditioned algorithm is less than the classical
one.
One perspective could be to use a partially constructed I −Lh as the preconditioner in the context of

the multilevel preconditioner. The construction and the implementation should be less expensive.

Acknowledgements

We acknowledge Pierre Kestener (Maison de la Simulation Saclay France) for the discussions about the
parallel programming. This work was partially supported by the French ANR grant ANR-12-MONU-
0007-02 BECASIM (Modèles Numériques call). The ﬁrst author also acknowledges support from the
French ANR grant BonD ANR-13-BS01-0009-01.

References

[1] X. Antoine, W. Bao, and C. Besse. Computational methods for the dynamics of the nonlinear

Schrödinger/Gross–Pitaevskii equations. Comput. Phys. Commun., 184(12):2621 – 2633, 2013.

[2] X. Antoine, C. Besse, and P. Klein. Absorbing Boundary Conditions for the Two-Dimensional
Schrödinger Equation With an Exterior Potential Part I: Construction and a Priori Estimates. Math.
Model. Methods Appl. Sci., 22(10), 2012.

[3] X. Antoine, C. Besse, and P. Klein. Absorbing boundary conditions for the two-dimensional
Schrödinger equation with an exterior potential. Part II: Discretization and numerical results. Numer.
Math., 125(2):191–223, 2013.

[4] X. Antoine and R. Duboscq. Computer Physics cations GPELab , a Matlab Toolbox to solve Gross-
Pitaevskii Equations I : computation of stationary solutions. Comput. Phys. Commun., 00:1–38,
2014.

[5] X. Antoine, E. Lorin, and A. Bandrauk. Domain decomposition method and high-order absorbing
boundary conditions for the numerical simulation of the time dependent schrödinger equation with
ionization and recombination by intense electric ﬁeld. J. Sci. Comput., pages 1–27, 2014.

20

Figure 11: Contours of solution |u(t, x, y)|2 at some diﬀerent times.

21

10505101050510t=0.010505101050510t=1.010505101050510t=2.010505101050510t=3.010505101050510t=3.510505101050510t=4.0[6] S. Balay, M. F. Adams, J. Brown, P. Brune, K. Buschelman, V. Eijkhout, W. D. Gropp, D. Kaushik,
M. G. Knepley, L. C. McInnes, K. Rupp, B. F. Smith, and H. Zhang. PETSc Users Manual. Technical
Report ANL-95/11 - Revision 3.4, Argonne National Laboratory, 2013.

[7] W. Bao and Y. Cai. Mathematical theory and numerical methods for Bose-Einstein condensation.

Kinet. Relat. Model., 6(1):1–135, Dec. 2012.

[8] W. Bao, I.-L. Chern, and F. Y. Lim. Eﬃcient and spectrally accurate numerical methods for comput-
ing ground and ﬁrst excited states in Bose–Einstein condensates. J. Comput. Phys., 219(2):836–854,
2006.

[9] W. Bao and Q. Du. Computing the ground state solution of Bose–Einstein condensates by a nor-

malized gradient ﬂow. SIAM J. Sci. Comput., 25(5):1674–1697, 2004.

[10] W. Bao, D. Marahrens, Q. Tang, and Y. Zhang. A Simple and Eﬃcient Numerical Method for Com-
puting the Dynamics of Rotating Bose–Einstein Condensates via Rotating Lagrangian Coordinates.
SIAM J. Sci. Comput., 35(6), 2013.

[11] W. Bao, P. A. Markowich, and H. Wang. Ground, Symmetric and Central Vortex States in Rotating

Bose-Einstein Condensates. Commun. Math. Sci., 3(1):57–88, 2005.

[12] C. Besse and F. Xing. Domain decomposition algorithms for two dimensional linear Schrödinger

equation. 2015.

[13] C. Besse and F. Xing. Schwarz waveform relaxation method for one dimensional Schrödinger equation

with general potential. Preprint, arXiv: 1503.02564, 2015.

[14] Y. Boubendir, X. Antoine, and C. Geuzaine. A quasi-optimal non-overlapping domain decomposition

algorithm for the Helmholtz equation. J. Comput. Phys., 231(2):262–280, 2012.

[15] A. Durán and J. Sanz-Serna. The numerical integration of relative equilibrium solutions. The non-

linear Schrodinger equation. IMA J. Numer. Anal., 20(2):235–261, Apr. 2000.

[16] M. J. Gander. Optimized Schwarz Methods. SIAM J. Numer. Anal., 44(2):699–731, Jan. 2006.

[17] M. J. Gander. Schwarz methods over the course of time. Electron. Trans. Numer. Anal., 31:228–255,

2008.

[18] M. J. Gander and L. Halpern. Méthodes de décomposition de domaine. Encyclopédie électronique

pour les ingénieurs, 2012.

[19] M. J. Gander, F. Magoules, and F. Nataf. Optimized Schwarz methods without overlap for the

Helmholtz equation. SIAM J. Sci. Comput., 24(1):38–60, 2002.

[20] L. Halpern and J. Szeftel. Optimized and quasi-optimal Schwarz waveform relaxation for the one
dimensional Schrödinger equation. Math. Model. Methods Appl. Sci., 20(12):2167–2199, Dec. 2010.

[21] P.-L. Lions. On the Schwarz alternating method. III: a variant for nonoverlapping subdomains. Third

Int. Symp. domain Decompos. methods Partial Diﬀer. equations, 6:202–223, 1990.

[22] Message Passing Interface Forum. MPI : A Message-Passing Interface Standard Version 3.0. Technical

report, 2012.

[23] F. Nataf and F. Rogier. Factorization of the convection-diﬀusion operator and a (possibly) non

overlapping Schwarz method. Contemp. Math., 1994.

22

