6
1
0
2

 
r
a

 

M
5
1

 
 
]

M
D
.
s
c
[
 
 

1
v
0
9
6
4
0

.

3
0
6
1
:
v
i
X
r
a

A 2.542-Approximation for Precedence Constrained
Single Machine Scheduling with Release Dates and

Total Weighted Completion Time Objective

Martin Skutella∗

March 16, 2016

Abstract

We present a √e/(√e−1)-approximation algorithm for the nonpre-

emptive scheduling problem to minimize the total weighted completion
time of jobs on a single machine subject to release dates and precedence
constraints. The previously best known approximation algorithm dates
back to 1997; its performance guarantee can be made arbitrarily close
to the Euler constant e [18].

1

Introduction

We consider the following classical machine scheduling problem denoted by

1| rj , prec|P wjCj in the standard classiﬁcation scheme of Graham, Lawler,
Lenstra, and Rinnooy Kan [12]. We are given a set of jobs N = {1, 2, . . . , n}
and for every job j ∈ N a processing time pj ≥ 0, a release date rj ≥ 0,
and a weight wj ≥ 0. The jobs j ∈ N need to be processed during non-
overlapping time intervals of length pj, and j’s processing must not start
before its release date rj. Moreover, there are precedence constraints given
by a partial order “≺” on N where j ≺ k means that job j must be completed
before job k may be started, that is, j’s processing interval must precede k’s.
We may therefore without loss of generality assume throughout the paper
that j ≺ k implies rj ≤ rk. The objective is to minimize the total weighted
completion time Pj∈N wjCj where Cj denotes the ﬁrst point in time at
which j’s processing is completed.

∗TU Berlin, Institute of Mathematics, MA 5-2, Straße des 17. Juni 136, 10623 Berlin,

Germany, martin.skutella@tu-berlin.de

1

Complexity. Even for unit job weights, the special cases of the problem

without non-trivial release dates 1| prec|P Cj (i.e., rj = 0 for all j ∈ N )
or without precedence constraints 1| rj |P Cj are strongly NP-hard; see,

In preemptive scheduling, the processing of a job
e.g., [8, problem SS4].
may be repeatedly interrupted and resumed at a later point in time.
In
the absence of precedence constraints, the problem with unit job weights

1| rj , pmtn|P Cj can be solved in polynomial time [3], but for arbitrary
weights 1| rj, pmtn|P wjCj is strongly NP-hard. Without non-trivial re-
lease dates preemptions are superﬂuous such that 1| prec, pmtn|P Cj is
equivalent to 1| prec|P Cj and thus strongly NP-hard.

List scheduling. Before dipping into the rich history of approximation
algorithms for these scheduling problems, we ﬁrst discuss the most important
algorithmic ingredient for both heuristic and exact solutions: list scheduling.
Consider a list representing a total order on the set of jobs N , extending
the given partial order “≺”. A straightforward way to construct a feasible
schedule is to process the jobs in the given order as early as possible with
respect to release dates. A schedule constructed in this way is a list schedule.
Depending on the given list and the release dates of jobs, the machine
might remain idle when one job is completed but the next job in the list is
not yet released. On the other hand, if job preemptions are allowed, it is
certainly not advisable to leave the machine idle while another job at a later
position in the list is already available (released) and waiting. Instead, we
better start this job and preempt it from the machine as soon as the next
job in the list is released. In preemptive list scheduling we process at any
point in time the ﬁrst available job in the list. The resulting preemptive
schedule is feasible (as j ≺ k implies rj ≤ rk) and is called preemptive list
schedule.

Known techniques and results. There is a vast literature on approx-
imation algorithms for the various scheduling problems mentioned above.
Here we only mention those results that are particularly relevant in the
context of this paper and refer to Chekuri and Khanna [5] for a more
comprehensive overview. Various kinds of linear programming (LP) relax-
ations have proved to be useful in designing approximation algorithms. One
of the simplest and most intuitive classes of LP relaxations is based on
completion time variables only. These LP relaxations were introduced by
Queyranne [16] and ﬁrst used in the context of approximation algorithms
by Schulz [17], who presents a 2-approximation algorithm for the problem

2

1| prec|P wjCj and a 3-approximation algorithm for 1| rj , prec|P wjCj;

see also Hall, Schulz, Shmoys, and Wein [13]. These algorithms compute
an optimal LP solution and then do list scheduling in order of increasing
LP completion times. Moreover, Hall et al. [13] show that preemptive list
scheduling in order of increasing LP completion times is a 2-approximation

algorithm for 1| rj, prec, pmtn|P wjCj.

Phillips, Stein, and Wein [15] and Hall, Shmoys, and Wein [14] introduce
the idea of list scheduling in order of so-called α-points to convert preemptive
schedules to nonpreemptive ones. For α ∈ (0, 1], the α-point of a job with re-
spect to a preemptive schedule is the ﬁrst point in time when an α-fraction of
the job has been completed. Goemans [10] and Chekuri, Motwani, Natara-
jan, and Stein [6] show that choosing α randomly leads to better results. In
particular, Chekuri et al. [6] present an e/(e−1)-approximation algorithm for
1| rj |P Cj by starting from an optimal preemptive schedule. Goemans [10]
and Goemans, Queyranne, Schulz, Skutella, and Wang [11] give approxima-
tion results for the more general weighted problem 1| rj |P wjCj based on

a preemptive schedule that is an optimal solution to an LP relaxation in
time-indexed variables. Similarly, Schulz and Skutella [18] give an (e + ε)-

Bansal and Khot prove in a recent landmark paper [4] that there is no

approximation algorithm for 1| rj , prec|P wjCj for any ε > 0.
(2 − ε)-approximation algorithm for 1| prec|P wjCj, assuming a stronger

version of the Unique Games Conjecture. Amb¨uhl, Mastrolilli, Mutsanas,
and Svensson [2], based on earlier work of Correa and Schulz [7] and Amb¨uhl
and Mastrolilli [1], prove an interesting relation between the approximability

of 1| prec|P wjCj and the vertex cover problem
Our contribution. We present a √e/(√e − 1)-approximation algorithm
for 1| rj , prec|P wjCj based on the following two ingredients: (i) For the
problem 1| rj, prec, pmtn|P wjCj we slightly strengthen the 2-approxima-

tion result of Hall et al. [13] and show that preemptive list scheduling in order
of increasing LP completion times on a machine running at double speed
yields a schedule whose cost is at most the cost of an optimal schedule on
a regular machine; see Section 2. (ii) Modifying the analysis of Chekuri et
al. [6] we show how to turn the preemptive schedule on the double speed
machine into a nonpreemptive schedule on a regular machine while increas-

ing the objective function by at most a factor of √e/(√e− 1); see Section 3.

We conclude with a conjecture in Section 4.

3

2 Optimal preemptive schedules under resource

augmentation

In this section we consider the preemptive single machine scheduling prob-
lem with release dates, precedence constraints and total weighted completion

time objective 1| rj, prec, pmtn|P wjCj. The best known approximation

result for this problem is a 2-approximation algorithm due to Hall et al. [13]
that is based on an LP relaxation in completion time variables originally
introduced by Queyranne [16] and later reﬁned by Goemans [9, 10] for prob-
lems involving release dates. Let S ⊆ N denote a set of jobs and deﬁne

p(S) := Xj∈S

pj

and

rmin(S) := min
j∈S

rj.

The LP relaxation in completion time variables Cj, j ∈ N , looks as follows:

wjCj

min Xj∈N
s.t. Cj ≤ Ck
p(S) Xj∈S

1

pjCj ≥ rmin(S) + 1

2 p(S)

for all j ≺ k,
for all S ⊆ N .

(1)

Goemans [10] argues that constraints (1) hold for a feasible schedule, even
if (Cj)j∈N denotes the vector of mean busy times of jobs instead of the
larger completion times. Moreover, despite their exponential number, these
constraints can be separated in polynomial time by eﬃcient submodular
function minimization [9]. Thus, an optimal solution C ∗ to the LP relaxation
can be found in polynomial time. Reindex the set of jobs such that

C ∗
1 ≤ C ∗

2 ≤ ··· ≤ C ∗

n

and

(j ≺ k ⇒ j < k).

(2)

Hall et al. [13] show that preemptive list scheduling according to list (2)
yields a feasible preemptive schedule with completion times Cj ≤ 2 · C ∗
j ,
j ∈ N , and thus a 2-approximate solution. Exactly the same analysis implies
a slightly stronger result in terms of resource augmentation as we show in
the next lemma. We imagine a machine running at double speed such that
each job j ∈ N needs to be processed for pj/2 time units only.
Lemma 1. Preemptive list scheduling according to list (2) on a machine
running at double speed yields a feasible preemptive schedule with completion
times C ′

j ≤ C ∗

j for all j ∈ N .

4

k ≤ C ′
Proof. For j ∈ N let S denote the subset of jobs k ≤ j such that (i) C ′
j,
(ii) the preemptive list schedule does not leave the double speed machine
idle between times C ′
j, and (iii) only jobs ℓ ≤ j are being processed
between times C ′
2 p(S).
Moreover,

j. By deﬁnition of S we get C ′

j = rmin(S) + 1

k and C ′

k and C ′

C ∗
j ≥

1

p(S) Xj∈S

which concludes the proof.

pjC ∗

j ≥ rmin(S) + 1

2 p(S) = C ′
j,

Lemma 1 implies the following main result of this section.

Theorem 1. For a single machine running at double speed one can obtain in
polynomial time a preemptive list schedule whose total weighted completion
time is at most the optimal total weighted completion time of a preemptive
schedule for a regular single machine.

3 Scheduling in order of alpha-points

In this section we show how to turn a preemptive schedule on the double
speed machine into a nonpreemptive schedule on a regular machine while
increasing the total weighted completion time by a factor at most 2.542.

Theorem 2. Given a feasible preemptive list schedule S′ on a double speed
machine with completion times C ′
j, j ∈ N , one can obtain in polynomial
time a feasible nonpreemptive schedule on a regular speed machine with total
weighted completion time

Xj∈N

wjCj ≤

√e
√e − 1 Xj∈N

wjC ′
j.

Theorems 1 and 2 together yield the new approximation result for the

scheduling problem under consideration.

The proof of Theorem 2 relies on list scheduling in order of α-points: For
0 < α ≤ 1, the α-point C ′
j(α) of job j with respect to schedule S′ is the ﬁrst
point in time when job j has been processed for α · pj/2 time on the double
speed machine. Consider the list schedule Sα obtained by scheduling jobs in
order of increasing C ′
j(α) on a regular speed machine (notice that this order
is in line with the precedence constraints as the preemptive schedule S′ is
feasible). Let C α
j denote job j’s completion time in the list schedule Sα.

5

Moreover, for a ﬁxed job k, let ηj denote the fraction of job j ∈ N that has
been processed in schedule S′ on the double speed machine by time C ′
k. In
particular,

C ′

k ≥ Xj∈N

ηj

pj
2

.

(3)

The following lemma and its proof are slight modiﬁcations of the obser-

vations presented in [19, Sec. 2.3.1] and [20, Sec. 3.1]; see also [6].

Lemma 2.

C α
k ≤ C ′

k + Xj:ηj ≥α(cid:16)1 +

α − ηj

2

(cid:17)pj.

(4)

Proof. Consider the jobs j ∈ N in order of non-increasing α-points C ′
j(α)
and iteratively convert the preemptive schedule S′ into a nonpreemptive
schedule by applying the following steps:

(i) remove the ﬁrst α · pj/2 units of job j that are processed before C ′
and leave the machine idle during the corresponding time intervals;

j(α)

(ii) delay the entire processing that is done later than C ′
(iii) remove the remaining (1 − α) · pj/2 units of job j from the machine

j(α) by pj;

and shrink1 the corresponding time intervals;

(iv) process job j in the released time interval between time C ′

j(α) and

C ′

j(α) + pj.

By construction, the resulting schedule is feasible for a regular speed ma-
chine and processes the jobs in order of increasing α-points. Moreover, it is
not diﬃcult to observe that job j’s completion time is equal to the right-
hand side of (4) (see [19, Sec. 2.3.1] for details). Thus, as the list schedule
processes jobs as early as possible in order of increasing α-points, the right
hand side of (4) is an upper bound on C α

k and the result follows.

We now draw α randomly from (0, 1] with density function

f (α) :=

eα/2

2(√e − 1)

.

1Shrinking a time interval means to discard the interval and pull forward, by the

corresponding amount, any processing that occurs later.

6

Notice that for 0 ≤ η ≤ 1

Z η

0

f (α)(cid:16)1 +

α − η
2 (cid:17) dα =

η

2(√e − 1)

.

Thus, by Lemma 2,

E[C α

k ] ≤ C ′

k + Xj∈N

pj Z ηj

0

f (α)(cid:16)1 +

= C ′

k +

1

√e − 1 Xj∈N

ηj

pj
2 ≤

α − ηj

2
√e
√e − 1

(cid:17) dα

C ′
k,

where the last inequality follows from (3). By linearity of expectation, the
expected total weighted completion time of the nonpreemptive list schedule

in order of random α-points is at most √e/(√e − 1) times larger than the

total weighted completion time of the given preemptive schedule S′.

To complete the proof of Theorem 2 we need to derandomize the choice
of α. In a preemptive list schedule, preemption of a job can only occur when
another job is released. In particular, there can be at most n−1 preemptions
and therefore at most n combinatorially diﬀerent choices of α. As observed
by Goemans [10], an α minimizing the total weighted completion time of
the resulting list schedule can thus be found in O(n2) time.

We conclude this section with the following remark: Instead of using
a uniform value α for the jobs’ α-points, the same result can be achieved
based on job-dependent αjs. For details we refer to [19, Sec. 2].

4 Concluding remarks

Despite our enthusiastic yet ultimately fruitless eﬀorts to improve the pre-
sented approximation result, we feel that the new performance guarantee

On the other hand, the history of approximation algorithms for the special

√e/(√e − 1) is hardly the last word on the considered scheduling problem.
case 1| prec|P wjCj and, in particular, more recent non-approximability re-

sults make it seem somewhat unlikely to achieve a performance ratio strictly
better than 2. Therefore, and due lack of imagination of other meaningful
approximation ratios, we conclude with the following conjecture, granting
an extra +ε in the performance ratio to the release dates.

Conjecture 1. For any ε > 0, there is a (2 + ε)-approximation algorithm

for 1| rj, prec|P wjCj.

7

Acknowledgements. This work is supported by the Einstein Foundation
Berlin.

References

[1] C. Amb¨uhl and M. Mastrolilli. Single machine precedence constrained scheduling is

a vertex cover problem. Algorithmica, 53:488–503, 2009.

[2] C. Amb¨uhl, M. Mastrolilli, N. Mutsanas, and O. Svensson. On the approximability
of single-machine scheduling with precedence constraints. Mathematics of Operations
Research, 36:653–669, 2011.

[3] K. R. Baker. Introduction to Sequencing and Scheduling. John Wiley & Sons, New

York, 1974.

[4] N. Bansal and S. Khot. Optimal long code test with one free bit. In Proceedings
of the 50th Annual IEEE Symposium on Foundations of Computer Science, pages
453–462, 2009.

[5] C. Chekuri and S. Khanna. Approximation algorithms for minimizing average
weighted completion time. In J. Leung, editor, Handbook of Scheduling: Algorithms,
Models, and Performance Analysis. CRC Press, 2004.

[6] C. S. Chekuri, R. Motwani, B. Natarajan, and C. Stein. Approximation techniques
for average completion time scheduling. SIAM Journal on Computing, 31:146–166,
2001.

[7] J. R. Correa and A. S. Schulz. Single machine scheduling with precedence constraint.

Mathematics of Operations Research, 30:1005–1021, 2005.

[8] M. R. Garey and D. S. Johnson. Computers and Intractability: A Guide to the Theory

of NP–Completeness. Freeman, San Francisco, 1979.

[9] M. X. Goemans. A supermodular relaxation for scheduling with release dates. In
W. H. Cunningham, S. T. McCormick, and M. Queyranne, editors, Integer Program-
ming and Combinatorial Optimization, volume 1084 of Lecture Notes in Computer
Science, pages 288–300. Springer, 1996.

[10] M. X. Goemans.

Improved approximation algorithms for scheduling with release
dates. In Proceedings of the 8th Annual ACM–SIAM Symposium on Discrete Algo-
rithms, pages 591–598, New Orleans, LA, 1997.

[11] M. X. Goemans, M. Queyranne, A. S. Schulz, M. Skutella, and Y. Wang. Single
machine scheduling with release dates. SIAM Journal on Discrete Mathematics,
15:165–192, 2002.

[12] R. L. Graham, E. L. Lawler, J. K. Lenstra, and A. H. G. Rinnooy Kan. Optimization
and approximation in deterministic sequencing and scheduling: A survey. Annals of
Discrete Mathematics, 5:287–326, 1979.

[13] L. A. Hall, A. S. Schulz, D. B. Shmoys, and J. Wein. Scheduling to minimize average
completion time: Oﬀ-line and on-line approximation algorithms. Mathematics of
Operations Research, 22:513–544, 1997.

[14] L. A. Hall, D. B. Shmoys, and J. Wein. Scheduling to minimize average completion
time: Oﬀ-line and on-line algorithms. In Proceedings of the 7th Annual ACM–SIAM
Symposium on Discrete Algorithms, pages 142–151, Atlanta, GA, 1996.

8

[15] C. Phillips, C. Stein, and J. Wein. Minimizing average completion time in the presence

of release dates. Mathematical Programming, 82:199–223, 1998.

[16] M. Queyranne. Structure of a simple scheduling polyhedron. Mathematical Program-

ming, 58:263–285, 1993.

[17] A. S. Schulz. Scheduling to minimize total weighted completion time: Performance
guarantees of LP-based heuristics and lower bounds. In W. H. Cunningham, S. T.
McCormick, and M. Queyranne, editors, Integer Programming and Combinatorial
Optimization, volume 1084 of Lecture Notes in Computer Science, pages 301–315.
Springer, 1996.

[18] A. S. Schulz and M. Skutella. Random-based scheduling: New approximations and
LP lower bounds. In J. Rolim, editor, Randomization and Approximation Techniques
in Computer Science, volume 1269 of Lecture Notes in Computer Science, pages 119–
133. Springer, 1997.

[19] M. Skutella. Approximation and Randomization in Scheduling. PhD thesis, Technis-

che Universit¨at Berlin, Germany, 1998.

[20] M. Skutella. List scheduling in order of α-points on a single machine. In E. Bampis,
K. Jansen, and C. Kenyon, editors, Eﬃcient Approximation and Online Algorithms:
Recent Progress on Classical Combinatorial Optimization Problems and New Appli-
cations, volume 3484 of Lecture Notes in Computer Science, pages 250–291. Springer,
2006.

9

