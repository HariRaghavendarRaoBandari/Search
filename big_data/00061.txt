6
1
0
2

 

b
e
F
 
6
2

 
 
]

.

A
N
h
t
a
m

[
 
 

1
v
1
6
0
0
0

.

3
0
6
1
:
v
i
X
r
a

Isogeometric analysis for turbulent ﬂow ∗

March 2, 2016

Bohum´ır Bastla,b, Marek Brandnera,b, Jiˇr´ı Egermaiera,b,

Krist´yna Mich´alkov´aa,b, Eva Turnerov´aa,b

aEuropean Centre of Excellence New Technologies for the Information Society,

University of West Bohemia in Pilsen, Univerzitn´ı 22, 306 14 Plzeˇn, Czech

bUniversity of West Bohemia, Department of Mathematics, Univerzitn´ı 22,

Republic

306 14 Plzeˇn, Czech Republic

Abstract

The article is devoted to the simulation of viscous incompressible tur-
bulent ﬂuid ﬂow based on solving the Reynolds averaged Navier-Stokes
(RANS) equations with diﬀerent k − ω models. The isogeometrical ap-
proach is used for the discretization based on the Galerkin method. Pri-
mary goal of using isogeometric analysis is to be always geometrically
exact, independent of the discretization, and to avoid a time-consuming
generation of meshes of computational domains. For higher Reynolds
numbers, we use stabilization SUPG technique in equations for k and
ω. The solutions are compared with the standard benchmark example of
turbulent ﬂow over a backward facing step.

Keywords:

equations;

Isogeometric analysis; turbulent ﬂow; k − ω; Navier-Stokes

1

Introduction

The main goal of our work is to propose and implement the numerical model for
solving turbulent ﬂow based on the Galerkin approach with NURBS basis func-
tions. We show that it is possible to eﬀectively solve turbulent ﬂow described
by the Navier-Stokes equations with k − ω turbulent model by the isogeometric
manner.

∗This work has been supported by Technology agency of the Czech Republic through the
project TA03011157 ”Innovative techniques for improving utility qualities of water turbines
with the help of shape optimization based on modern methods of geometric modelling.”

1

The objectives of isogeometric analysis based on NURBS (non-uniform ratio-
nal B-splines) are to generalize and improve ﬁnite element analysis. It means to
provide more accurate modelling of geometries and to exactly represent shapes
such as circles, cylinders, ellipsoids, etc. Due to exact geometry at the coarsest
level of discretization it is possible to eliminate geometrical errors. It also much
simpliﬁes mesh reﬁnement of industrial geometries by eliminating communica-
tion with the CAD description of geometry. Further reﬁnement of the mesh or
increasing the order of basis functions are very simple, eﬃcient and robust. At
the same time, isogeometric analysis has many features in common with ﬁnite
element analysis. For example the isoparametric concept in which dependent
variables and the geometry share the same basis functions. Then the mesh, and
the corresponding basis, can be reﬁned and order-elevated while maintaining the
original exact geometry. Then the isogeometric methodology can be an useful
tool for computational ﬂuid dynamics, in particular, turbulent ﬂows.

High Reynolds number turbulent ﬂows are important in many applications.
Turbulent ﬂows involve multiscale space and time-developing ﬂow physics. The
dynamic of all relevant scales of the ﬂow described by the Navier-Stokes equa-
tions can be solved by the direct numerical simulation (DNS) approach, which is
too expensive for most practical ﬂows. Therefore the most common approach is
the Reynolds-Averaged Navier-Stokes (RANS), which simulates the mean ﬂow
and eﬀects of all turbulent scales. The eﬃcient intermediate approach is large
eddy simulation (LES), which can simulate signiﬁcant ﬂow unsteadiness that
RANS cannot handle. In the absence of universal turbulence theory there exist
many developments and improvements of the schemes including the empirical
information.

2 Navier-Stokes equations

The model of viscous ﬂow of an incompressible Newtonian ﬂuid can be described
by the Navier-Stokes equations in the common form

∂u
∂t

+ ∇p + u · ∇u − ν∆u = f ,
∇ · u = 0,

in Ω × (cid:104)0, T(cid:105),
in Ω × (cid:104)0, T(cid:105),

(1)

where Ω ⊂ Rd (dimension d = 1, 2, 3) is the computational domain, T > 0 is the
ﬁnal time, u = u(x, t) is the vector function describing ﬂow velocity, p = p(x, t)
is the pressure function, ν describes kinematic viscosity and f additional body
forces acting on the ﬂuid. We do not assume only very small Reynolds numbers,
but there are still some ”limits” for which this model gives reasonable solution or
it is necessary to use very ﬁne discretization. The initial-boundary value problem
is considered as the system (1) together with a suitable initial conditions and
the following boundary conditions

u = w on ∂ΩD × (cid:104)0, T(cid:105)
on ∂ΩN × (cid:104)0, T(cid:105)

− np = 0

ν

∂u
∂n

(Dirichlet condition),

(Neumann condition).

(2)

2

If the velocity is speciﬁed everywhere on the boundary, then the pressure solu-
tion is only unique up to a hydrostatic constant.

The Navier-Stokes equations describe turbulent incompressible ﬂow. This
ﬂow contains many eddies of diﬀerent sizes which are changing in time. The
numerical methods for solving turbulent models are divided into the following
categories:

• Direct numerical simulation (DNS)

The average ﬂux and all turbulent ﬂuctuations are computed. It means,
that we use FEM (or FVM etc.) method directly to solve the Navier-
Stokes equations. It is necessary to use a very ﬁne mesh to compute small
turbulent ﬂuctuations of the ﬂow and a short time step for non-stationary
problem. Therefore this approach is very computationally expensive.

• Reynolds Averaged Navier Stokes (RANS)

This approach simulates only average ﬂux and eﬀects of this ﬂux to the
ﬂow.
It uses the time averaged Navier-Stokes equations. The special
term appears in the equations which is approximated by the appropriate
approaches. The most common approaches are k − ε or k − ω models.
RANS is very often used in practice.

• Large Eddy Simulation (LES)

LES simulates behaviour of large eddies which is realized by averaging of
the Navier-Stokes equations in space dimension thus the small eddies are
not considered. The behaviour of small eddies is described by the so called
subgrid scale model, which can be for example computed by RANS.

3 RANS models

RANS is the most common model for solving the Navier-Stokes equations in-
cluding turbulence. It is based on decomposition of the solution into the time-
averaged value and ﬂuctuation value.
In two dimensions, the solution u =
u(x1, x2, t) and p = p(x1, x2, t) is decomposed by the following way

u (x1, x2, t) = ¯u (x1, x2) + u(cid:48) (x1, x2, t) ,
p (x1, x2, t) = ¯p (x1, x2) + p(cid:48) (x1, x2, t) ,

(4)
where ¯u, ¯p are time-averaged values and u(cid:48), p(cid:48) are ﬂuctuation ones. Substituting
(3) and (4) to the system (1) we arrive at (see [7] for details)

(3)

+ ¯u · ∇ ¯u = −∇¯p + ν∆ ¯u − u(cid:48) · ∇u(cid:48),

∂ ¯u
∂t

∇ · ¯u = 0,

3

(5)

(6)

The solution are the functions ¯u, ¯p, the ﬂuctuation values are not determined.
The equations contain the unknown term

This term is approximated by the following relation (see [4] for details)

u(cid:48) · ∇u(cid:48).

νT

(cid:18)
(cid:0)∇ ¯u + (∇ ¯u)T(cid:1) − 2
(cid:34) ∂ ¯u1
(cid:34) ∂ ¯u1

(cid:35)

3

(cid:35)

(cid:19)

− u(cid:48) · ∇u(cid:48) = ∇ ·

(cid:34) ∂ ¯u1

∂x1
∂ ¯u2
∂x1

where I is identity matrix and (in 2D case)

∇ ¯u + (∇ ¯u)T =

∂ ¯u1
∂x2
∂ ¯u2
∂x2

+

∂x1
∂ ¯u1
∂x2

∂ ¯u2
∂x1
∂ ¯u2
∂x2

=

∂x1
∂ ¯u1
∂x2

Function νT is the so-called turbulent viscosity deﬁned by

νT =

k
ω

,

kI

,

+ ∂ ¯u1
∂x1
+ ∂ ¯u2
∂x1

∂ ¯u1
∂x2
∂ ¯u2
∂x2

+ ∂ ¯u2
∂x1
+ ∂ ¯u2
∂x2

(7)

(8)

(cid:35)

.

(9)

(12)

(13)

where k is the turbulent kinetic energy and ω is the speciﬁc dissipation. Our goal
is to determine these quantities k and ω in order to approximate (8). Several
approaches can be applied but the common way is k−ω model which is described
in the following part.

Substituting (8) to (5) RANS equations can be written in the form

(cid:124)

(cid:123)(cid:122)

(cid:125)

∂ ¯u
∂t

+ ¯u · ∇ ¯u = −∇¯p + ∇ · [(ν + νT )∇ ¯u]
ν∆ ¯u+∇·(νT ∇ ¯u)
∇ · ¯u = 0.

+∇ · (νT (∇ ¯u)T ) − 2
3

∇k,

(10)

(11)

3.1 Basic k − ω model

This model adds two extra equations to the RANS system, i.e. the transport
equation for the turbulent kinetic energy k and the equation for the speciﬁc
dissipation ω.

Transport equations for kinetic energy and speciﬁc dissipation have the form

(cid:20)(cid:18) νT

σk

(cid:17)2

(cid:19)

(cid:21)

(cid:17)2

(cid:16) ∂ ¯u1

∂x1

(cid:16) ∂ ¯u1

∂x2

+ ¯u · ∇k = ∇

∂k
∂t

+ ν

∇k

+ νT f − Cµkω,

+ ¯u · ∇ω = ∇[(σωνT + ν)∇ω] + Cω1

∂ω
∂t

ω
k

νT f − Cω2ω2,

(cid:16) ∂ ¯u2

(cid:17)2

2|∇ ¯u +∇ ¯uT|2,
where ¯u = (¯u1, ¯u2), f =
and σω, σk, Cµ, Cω1 and Cω2 are constants with the standard choice of values:
σω = 0.5, σk = 2.0, Cµ = 0.09, Cω1 = 0.52 and Cω2 = 0.072. For details about
k − ω model see [2, 3, 6].

+ ∂ ¯u2
∂x1

= 1

+ 2

+ 2

∂x2

4

The solution of system (12) and (13) deﬁnes the turbulent viscosity νT by

the relation (9).

(9)

∂k
∂t

∂ω
∂t

For simplicity the equations (12) and (13) can be separated with the help of

(cid:19)

(cid:21)

(cid:20)(cid:18) νT

σk

+ ¯u · ∇k = ∇ ·

+ ν

∇k

+ νT f − Cµ

k2
νT

,

+ ¯u · ∇ω = ∇ · [(σωνT + ν)∇ω] + Cω1f − Cω2ω2.

(14)

(15)

3.2 Low Reynolds number model (LRN)

One of the common problems in turbulent modelling is computing turbulent
ﬂow inﬂuenced by the adjacent wall. There is a boundary layer, where the
velocity changes from the no-slip condition at the wall to its free stream value.
The standard method of solving this problem is to apply a very ﬁne mesh close
to the wall. This is the so called integration method, which necessitates an LRN
type of turbulence model. On the other hand, this method does not need any
wall-function approximation which is a common tool for obtaining near wall
values in other methods. The region under wall inﬂuence diminishes in the case
of higher Reynolds numbers.

We shortly describe two turbulent LRN models, which we use for numerical

experiments.

3.2.1 Wilcox 1993

This model is in detail described in [1]. The equations for k and ω are deﬁned
as

∂k
∂t
∂ω
∂t

= Pk − β∗kω + ∇ · [(ν + σ∗νt)∇k] ,

= α

Pk − βω2 + ∇ · [(ν + σ∗νt)∇ω] ,

ω
k

(16)

(17)

(cid:19)

,

+

∂uj
∂xi

Rβ

(cid:16) ReT
(cid:17)4
(cid:16) ReT
(cid:17)4 ,
(cid:18) ∂ui

Rβ

∂xj

1
2

where

α =

5
9α∗

νt = α∗ k
ω

,

α∗ =

α∗
0 + ReT
Rk
1 + ReT
Rk

,

β∗ =

9
100

5
18 +

1 +

α0 + ReT
Rω
1 + ReT
Rω
1
10

α0 =

, ReT =

k
νω

, Pk = 2νtSij

∂ui
∂xj

, Sij =

, α∗

0 =

β
3

, β =

, σ∗ =

3
40

1
2

, Rβ = 8, Rk =

27
10

, Rω = 6,

where ReT is turbulent Reynolds number. The turbulent viscosity is deﬁned as
νT = νt in this model.

5

3.2.2 Low Reynolds number version of Wilcox (2006) k − ω two-

equation model

This model is in detail described in [8]. The equations for k and ω are deﬁned
as

∂k
∂t
+ ¯u ·∇ω =

+ ¯u · ∇k = P − β∗kω + ∇ ·[(ν + σkνt)∇k] ,
γω
k

P − βω2 + ∇ · [(ν + σωνt)∇ω] +

σd
ω

∇k · ∇ω,

(18)

(19)

∂ω
∂t

where

(cid:18)
 ,

P = τij

τij = νt

(cid:17)4

∂ui
∂xj

 100 β0

1 +

,

(cid:16) ReT
(cid:17)4
(cid:16) ReT

Rβ

Rβ

27 +

2Sij − 2
3

∂uk
∂xk

γ =

13
25

(cid:19)
(cid:32) α0 + ReT

− 2
3

δij

Rω
1 + ReT
Rω

kδij,

(cid:33)

(α∗)−1,

β∗ = 0.09

(cid:40)

σd =

0,
1
8 ,

for ∂k
∂xj
for ∂k
∂xj

∂ω
∂xj
∂ω
∂xj

≤ 0,
> 0,

ReT =

, α∗ =

k
νω

α∗
0 + ReT
Rk
1 + ReT
Rk

, α∗

0 =

β0
3

,

Rβ = 8, Rk = 6, Rω = 2.61, α0 =

1
9

,

β0 = 0.0708.

As mentioned above, solving the two equation model leads to the approximation
of the Reynolds stresses (8). However, using LRN Wilcox k − ω model (2006),
the turbulent viscosity νT is not deﬁned by the expression (9) again, but the
modiﬁed expression is used instead

where

(cid:34)

ˆω = max

ω, Clim

4 Numerical model

νT = α∗ k
ˆω

(cid:115)

2SijSij

β∗
α∗

,

(cid:35)

,

Clim =

7
8

.

In this section, we describe some numerical aspects and techniques on which the
model is based.

4.1 NURBS approximation

NURBS surface of degree p, q is determined by a control net P (of control
points Pi,j, i = 0, . . . , n, j = 0, . . . , m), weights wi,j of these control points and
two knot vectors U = (u0, . . . , un+p+1), V = (v0, . . . , vm+q+1) and is given by a
parametrization

S(u, v) =

=

Pi,jRi,j(u, v).

(20)

j=0 wi,jPi,jNi,p(u)Mj,q(v)

j=0 wi,jNi,p(u)Mj,q(v)

(cid:80)n
(cid:80)n

i=0

(cid:80)m
(cid:80)m

i=0

n(cid:88)

m(cid:88)

i=0

j=0

6

B-spline basis functions Ni,p(u) and Mj,q(v) are determined by knot vectors U
and V and degrees p and q, respectively, by a formula (for Ni,p(u), Mj,q(v) is
constructed by the similar way)

(cid:26) 1 ui ≤ t < ui+1,

Ni,0(u) =

Ni,p(u) =

0 otherwise,
u − ui
ui+p − ui

Ni,p−1(u) +

ui+p+1 − u
ui+p+1 − ui+1

Ni+1,p−1(u).

(21)

Knot vector is a non-decreasing sequence of real numbers which determines
the distribution of a parameter on the corresponding curve/surface. B-spline
basis functions (see Figure 1) of degree p are C p−1-continuous in general. Knot
repeated k times in the knot vector decreases the continuity of B-spline basis
functions by k − 1. Support of B-spline basis functions is local – it is nonzero
only on the interval [ti, ti+p+1] in the parameter space and each B-spline basis
function is non-negative, i.e., Ni,p(t) ≥ 0,∀t.

T = (0, 1, 2, . . . , 7), p = 1

T = (0, 1, 2, . . . , 7), p = 3

T = (0, 0, 0, 0, 1, 2, 3, 4, 4, 4, 4)

T = (0, 0, 0, 1, 2, 2, 3, 3, 3)

Figure 1: B-spline basis functions.

4.2 Galerkin approach

Let V be a velocity solution space and V0 be the corresponding space of test
functions, i.e.,

V = {u ∈ H 1(Ω)d|u = w on ∂ΩD},
V0 = {v ∈ H 1(Ω)d|v = 0 on ∂ΩD}.

(22)

Then a weak formulation of the stationary boundary value problem is: ﬁnd
u ∈ V and p ∈ L2(Ω) such that

(cid:90)

(cid:90)

(cid:90)

(cid:90)

v · ∂u
∂t

+ ν

Ω

∇u : ∇v +

(u · ∇u)v −

Ω

Ω

p∇ · v =

Ω

Ω

q∇ · u = 0,

f · v,∀v ∈ V0,
∀q ∈ L2(Ω).

(cid:90)
(cid:90)

Ω

7

Further, we use Galerkin approach with general basis functions. The discrete
weak solution is deﬁned by ﬁnite dimensional spaces V h ⊂ V , W h ⊂ L2(Ω) and
their basis functions. Then we look for uh ∈ V h and ph ∈ W h such that for all
test functions vh ∈ V h

(cid:90)

vh · ∂uh
∂t

+ ν

Ω

(cid:90)

0 ⊂ V0 and qh ∈ W h
∇uh : ∇vh +

(cid:90)

Ω

Ω

(uh · ∇uh)vh −

ph∇ · vh =

f · vh,

(cid:90)

Ω

qh∇ · uh = 0.

(23)

(cid:90)
(cid:90)

Ω

Ω

Isogeometric approach consists in taking the solution uh as a linear combination
i ∈ V h and the solution ph is written as a linear combination
of basis functions Ru
i ∈ W h, where Ru
of basis functions Rp
i are NURBS description of a
computational domain. In 2D, the solution has the form

i and Rp

d(cid:88)

nu

v(cid:88)

nu

np(cid:88)

uh =

(u1i, u2i)T Ru

i +

(u∗

1i, u∗

2i)T Ru
i ,

ph =

piRp
i ,

(24)

i=1

i=nu

d +1

i=1

where nu
d is the number of points where the Dirichlet boundary condition is not
deﬁned. The discrete problem can be written (using implicit Euler method) in
matrix form

 A + C
(cid:20) un
(cid:21)

0
B1

−

1
un
2

1

2

1

2

1

2

1

0

u∗

 =
 un+1
(cid:20) u∗
(cid:21)

un+1
pn+1

−BT
A + C −BT
0
B2

0
B∗

0
B∗

A∗ + C∗

 A∗ + C∗
(cid:3)
, A∗ = (cid:2)Aij
m = (cid:2)Bmij
C∗ = (cid:2)Cij
(cid:3)
1≤i≤nu
j · J−1)| det J|,
i · J−1) · (∇Ru
(cid:2)(∇Ru

(cid:3)| det J|,

j · J−1) · em

1≤i≤np,nu

, B∗

1≤i≤nu

d ,nu

d ,nu

(cid:3)

2

(∇Ru

v

,
d +1≤j≤nu
d +1≤j≤nu
v
,
d +1≤j≤nu

v

(25)

,

,

(26)

(27)

=

0 C
0
0

 C 0
(cid:3)
= (cid:2)Aij
Bm = (cid:2)Bmij
= (cid:2)Cij
(cid:3)

A

C

(cid:3)

where

d

1≤i≤nu

d ,1≤j≤nu
1≤i≤np,1≤j≤nu
d
,

v ,1≤j≤nu

1≤i≤nu

d

Aij = ν∆t

(cid:90)

Ω

(cid:90)

Bmij = ∆t

Rp
i

Cij =

Ω
Ru

j | det J|,

i Ru

(cid:90)

Ω

m = {1, 2} and J is Jacobi matrix of a mapping from parametric domain to the
computational domain. If np > nu
d then the system matrix has not the full rank
- so we can choose the basis Ru

i and Rp

i arbitrary.

8

4.3 Nonlinear iteration

Because of non-linearity of Navier-Stokes equations it is necessary to solve the
problem iteratively with linear problem in every step. One of the possibilities
is to use the Picard’s method. Here we mention the stationary problem for
simplicity, the time derivative has no eﬀect to the explanation of this method.
First the non-linear residuum from weak formulation is computed by the
values uk and pk (for example by the solution of the Stokes problem). The
residuum Rk and rk satisfy

(cid:90)

(cid:90)

(cid:90)

Rk =

f · v − ν

∇uk : ∇v −

(uk · ∇uk)v +

Ω

rk = −

Ω

q∇ · uk.

Ω

Ω

pk∇ · v,

(28)

(29)

(cid:90)

(cid:90)

Ω

We consider the exact solution u and p as the sum of the solution of the current
iteration and ﬂuctuation of the solution u = uk + δuk and p = pk + δpk.
Substituting this solution to the weak formulation and using the equalities (28)
and (29) we have

Rk =

f · v − ν

∇δuk : ∇v −

(uk · ∇δuk) −

(cid:90)

(cid:90)

(cid:90)

(cid:90)

Ω

(δuk · ∇uk) −

Ω

(δuk · ∇δuk)v +

pk∇ · v,

(30)

(cid:90)

Ω

−

(cid:90)
(cid:90)

Ω

Ω

Ω

rk = −

q∇ · δuk.

Ω

We assume that the quadratic term (cid:82)
(cid:82)

(δuk · ∇δuk)v and also the linear term
(δuk · ∇uk)v are suﬃciently small and we neglect them. We obtain the linear
problem (30) for ﬂuctuations δuk ∈ V0 and δpk ∈ L2(Ω). These deﬁne the
following step uk+1 = uk + δuk. Therefore we search for uk+1 ∈ V and pk+1 ∈
L2(Ω) so that for all functions v ∈ V0 and q ∈ L2(Ω) the following relation is
valid

Ω

Ω

∇uk+1 : ∇v +

(uk · ∇uk+1)v −

pk+1∇ · v =

ν

f · v,

(cid:90)

(cid:90)

(cid:90)

Ω

Ω

(cid:90)
(cid:90)

Ω

Ω

q∇ · uk+1 = 0.

(31)

The solution of the Stokes problem is used as the initial condition for the iter-
ative cycle.

Ω

9

We use Galerkin method and deﬁne the ﬁnite-dimensional spaces V h ⊂ V,
0 ⊂ V0, W h ⊂ L2(Ω) and their basis functions. Find uh ∈ V h and ph ∈ W h
V h
so that all functions vh ∈ V h

(cid:90)

ν

∇uk+1

h

: ∇vh +

Ω

Ω

(cid:90)

(cid:90)
0 a qh ∈ W h satisfy
h · ∇uk+1
(cid:90)

)vh −

(uk

Ω

h

Ω

(cid:90)

h ∇ · vh =
pk+1

f · vh, (32)

Ω

qh∇ · uk+1

h

= 0.

(33)

h and pk

The solution uk
h is written as linear combination of the basis functions
(see (24)) and it is substituted to (32) and (33). The sequence of the solutions
h) ∈ V h × W h converges to the weak solution. The system has the matrix
h, pk
(uk
form:

 A + N (uk)

0
B1

0

−B1
A + N (uk) −B2
0

 uk+1
 =
 f1 − (A∗ + N∗(uk)) · u∗
 ,

f2 − (A∗ + N∗(uk)) · u∗

uk+1
pk+1

B2

=

1

2

1

2

where

(cid:3)
A =(cid:2)Aij
N (u) =(cid:2)Nij(u)(cid:3)
(cid:3)
Bm =(cid:2)Bmij

d

1≤i≤nu

1≤i≤nu

d ,1≤j≤nu
d ,1≤j≤nu
1≤i≤np,1≤j≤nu

d

d

(cid:90)

Ω

(cid:90)
(cid:90)

Ω

Aij = ν

Nij(u) =

Bmij =

(∇Ru

i · J−1) · (∇Ru
 nu
v(cid:88)
(cid:2)(∇Ru
j · J−1) · em

(u1l, u2l)Ru
l

l=1

Ru
i

Rp
i

,

,

2

B∗

1 + B∗

1 · u∗
B∗

2 · u∗
(cid:3)
A∗ =(cid:2)Aij
, N∗(u) =(cid:2)Nij(u)(cid:3)
(cid:3)
m =(cid:2)Bmij
j · J−1)| det J|,
 · (∇Ru
(cid:3)| det J|.

1≤i≤nu

d +1≤j≤nu

v

,

d ,nu
1≤i≤nu

1≤i≤np,nu

d +1≤j≤nu
,

d ,nu
d +1≤j≤nu

v

v

| det J|,

j · J−1)

(34)

,

(35)

Ω

4.4 SUPG - Streamline Upwind/Petrov-Galerkin

Solving of the advection-diﬀusion equations can lead to numerical nonstability
(for example the Navier-Stokes equations for high Reynolds numbers). One of
the methods to reduce nonphysical oscillations is based on the construction of
test function v in special form (see for example [5])

v = v + τSu · ∇v,

(36)

10

where

(cid:18)

coth P − 1
P

(cid:19)

τS =

h

2 deg(u)(cid:107)u(cid:107)

(37)

and h is the element diameter in the direction of u and P =
is the lo-
cal P´eclet number which determines whether the problem is locally convection
dominated or diﬀusion dominated. In our test examples we use this SUPG sta-
bilization method only for solving the k − ω equations, it is not applied to the
solution of RANS equations.

(cid:107)u(cid:107)h
2ν

5 Computational scheme (algorithm)

This section is devoted to a more precise description of systems of linear alge-
braic equations arising from solving RANS equations with k − ω model via an
isogeometric approach. Currently, these linear systems are solved with direct
solver and we investigate suitable preconditioning strategies for preconditioned
GMRES to be used. The implicit Euler method is used for the time discretiza-
tion.

5.1 Navier-Stokes equations

function spaces V =(cid:8)ϕ ∈ H 1 (Ω) : ϕ|∂Ω = w(cid:9), V0 =(cid:8)ψ ∈ H 1 (Ω) : ψ|∂Ω = 0(cid:9) .

We formulate weak solution for RANS system (10), (11). Let us consider
Then we search for ¯u ∈ V , ¯p ∈ L2(Ω) and k ∈ L2(Ω) so that all test functions
v ∈ V0 and q ∈ L2(Ω) satisfy
¯un+1 · vdΩ + ∆tν

∇ ¯un+1 · ∇vdΩ − ∆t

pn+1 · ∇vdΩ =

(cid:90)

(cid:90)

(cid:90)

(cid:90)

¯un · vdΩ − ∆t

Ω

(cid:90)

Ω

Ω

( ¯un+1 · ∇ ¯un+1)vdΩ −

Ω

T (∇ ¯un+1)T · ∇vdΩ +
νn

2
3

∆t

(cid:90)

Ω

(38)

kn · ∇vdΩ,

Ω

=

(cid:90)

Ω

T∇ ¯un+1 · ∇vdΩ − ∆t
(cid:90)
νn

(cid:90)

Ω

−∆t

q∇ · ¯un+1dΩ = 0.

(39)
0 ⊂ V0 and W h ⊂ L2(Ω)
Now we consider ﬁnite dimensional spaces V h ⊂ V , V h
i ∈ W h. The solution ¯uh ∈ V h,
with basis functions Ru
¯ph ∈ W h and kh ∈ W h have the forms of linear combinations of basis functions

i and Rk

Ω

¯un+1

h =

)Ru
i ,

¯un

h =

(¯un

1i, ¯un

2i)Ru
i ,

i ∈ V h, Rp
N(cid:88)

(¯un+1

, ¯un+1

1i

2i

N(cid:88)

i=1

¯pn+1
h =

N(cid:88)
N(cid:88)

i=1

i Rp
¯pn+1
i ,

¯pn
h =

i Rp
¯pn
i ,

i=1

i=1

11

(40)

(41)

kn
h =

i Rk
kn
i .

(42)

We consider vh ∈ V h

0 . Substituting to (38) and (39) we obtain

+∆t

(¯un

1l, ¯un

2l)Ru
l

∇Ru

i Ru

j dΩ

+∆t

∇Ru

(cid:123)(cid:122)
i ∇Ru

A

Ω

(cid:125)

j dΩ

+

+∆t(Q1)i,j] −

j dΩ

¯pn+1
i ∆t

(¯un

1i, ¯un

i Ru

j dΩ

] − ∆t(Q2)i,j+

i=1

N(cid:88)
(cid:90)
(cid:124)

Ω

(¯un+1

1i

, ¯un+1

2i

)[

Ru

N(cid:88)
(cid:33)

i=1

N ( ¯u)

(cid:123)(cid:122)

(cid:90)
(cid:124)

Ω

(cid:123)(cid:122)
i ∇Ru
Rp

B1,B2

j dΩ

(cid:125)

+

2
3

∆t

N(cid:88)

(¯un+1

1i

i=1

E2

(cid:125)(cid:124)
(cid:123)(cid:122)

∂Ru
i
∂x1
∂Ru
i
∂x2

E3

∂Ru
j
∂x1
∂Ru
j
∂x2

(cid:123)
(cid:125)

dΩ

dΩ

(cid:90)
(cid:124)

(cid:125)
(cid:125)

C

j dΩ

i Ru

+∆tν

(cid:123)(cid:122)
(cid:90)
(cid:124)

(cid:125)
(cid:123)(cid:122)
T∇Ru
i ∇Ru
νn
Ω
(cid:90)
(cid:124)

2i)[

Ru

E1

Ω

j dΩ
,

C

(cid:123)(cid:122)
(cid:125)
(cid:125)

(cid:90)
(cid:124)

(cid:90)
(cid:124)

Ω

Ω

F1,F2

(cid:123)(cid:122)
i ∇Ru
Rk
(cid:123)(cid:122)
j∇ · Ru
Rp

B1,B2

(cid:125)
N(cid:88)
N(cid:88)

i=1

=

i=1

kn
i

, ¯un+1

2i

)

i dΩ

= 0,

 , (Q2)i,j =
 ¯un+1

1

2

¯un+1
¯pn+1

Ω

Ω

i=1 ¯un
2i

i=1 ¯un
1i


(cid:122)
(cid:90)
(cid:80)N
(cid:90)
(cid:80)N
(cid:124)
 =
 F T
 ,
 ¯un

1
F T
2
0

2∆t

3

1
¯un
2
¯pn

(cid:32) N(cid:88)
(cid:90)
(cid:124)
− N(cid:88)

l=1

Ω

i=1

where

(Q1)i,j =

νn
T

νn
T

Ω


(cid:122)
(cid:90)
(cid:90)
(cid:124)
 A1

Ω

The equations (43), (44) can be written in the matrix form

0 −∆tBT
0 A2 −∆tBT
B1 B2

0

2

1



C

−∆tE5

0

−∆tE4 0
0
0

C
0

+

where

A1 = C + ∆tνA + ∆tN ( ¯u) + ∆tE1 + ∆tE2,

12

(43)

(44)

 .

(cid:123)
(cid:125)

dΩ

dΩ

(45)

∂Ru
j
∂x2
∂Ru
j
∂x1

νn
T

νn
T

E4

∂Ru
i
∂x1
∂Ru
i
∂x2

(cid:125)(cid:124)
(cid:123)(cid:122)
 kn+

E5

and

A2 = C + ∆tνA + ∆tN ( ¯u) + ∆tE1 + ∆tE3

1 =(cid:0)¯un+1
2 =(cid:0)¯un+1
¯pn+1 =(cid:0)¯pn+1

¯un+1

¯un+1

(cid:1) , ¯un
(cid:1) , ¯un
(cid:1) , ¯pn = (¯pn

1 = (¯un
2 = (¯un

11 , ¯un+1
12 , . . . , ¯un+1
1N
21 , ¯un+1
22 , . . . , ¯un+1
2N
, . . . , ¯pn+1
, ¯pn+1
N
1 , kn
2 , . . . , kn

1

11, ¯un
21, ¯un
1 , ¯pn

12, . . . , ¯un
22, . . . , ¯un
2 , . . . , ¯pn

1N ) ,

2N ) ,

N ) ,

N ) .

2
kn = (kn
5.2 k − ω turbulent model
We consider k − ω model based on the equations (14), (15). Similar approach
can be used for LRN models described in the section 3.2. If kn, ωn are approx-
imations of unknown functions at the time step tn, then the approximations
kn+1, ωn+1 can be determined by the following relations (implicit Euler method
is used, ¯u is supposed from previous time layer tn)
kn+1 − kn

(cid:20)(cid:18) νn

(kn+1)2

(cid:19)

(cid:21)

+ ¯un · ∇kn+1 = ∇

+ ν

T
σk

∇kn+1

+ νn

T f n − Cµ

, (46)

νn
T

∆t

ωn+1 − ωn

+ ¯un ·∇ωn+1 = ∇[(σωνn

T + ν)∇ωn+1] + Cω1f n − Cω2(ωn+1)2. (47)
Using the similar approach as in the previous section (see Appendix for

∆t

details and deﬁnitions of matrices) we can formulate the following system

(cid:21)

(cid:21)(cid:20) kn+1

ωn+1

=

(cid:20) X11
(cid:21)

+

0

0 X22

(cid:20) ∆tF k(νn

T , kn+1) + ∆t∇F k(νn

T , f n)
∆tCω1F ω(f n) + ∆tCω1∇F ω(f n)

(cid:21)

,

(48)

(cid:20) Y11

0

=

0
Y22

where

(cid:21)(cid:20) kn

ωn

X11 = Ak + ∆tCk(νn

1 (νn
+∆tDk + ∆t∇Dk + ∆tCµ∇Bk

T ) + ∆tCµBk

X22 = Aω + ∆tCω(νn

T ) + ∆tCω2Bω

T , kn+1) + ∇Ak + ∆t∇Ck(νn
1 (νn

T , kn+1),

1 (ωn+1) + ∇Aω + ∆t∇Cω(νn

T ) +

T ) +

+∆tDω + ∆t∇Dω + ∆tCω2∇Bω

1 (ωn+1),

Y11 = Ak + ∇Ak,
Y22 = Aω + ∇Aω,

and kn+1 = (kn+1
and ωn+1 = (ωn+1

, kn+1
, ωn+1

1

2

1

2

, . . . , kn+1
, . . . , ωn+1

N )T , kn = (kn
N )T , ωn = (ωn

1 , kn

2 , . . . , kn

N )T
2 , . . . , ωn

1 , ωn

N )T .

13

Figure 2: The solution of turbulent ﬂow based on turbulent model (14), (15).
The upper pictures illustrate streamlines at the times 2.5s, 5s, 7.5s and 10s. The
lower picture illustrates distribution of the turbulent viscosity (in logaritmic
scale) at the time 10s.

6 Numerical experiments

We present the numerical experiment devoted to the turbulent ﬂow with Re =
4000 (Re = U L
ν , U is the maximum velocity of the ﬂuid, L is a characteris-
tic linear dimension, ν = 10−3) through the L-shape domain. All quantities

14

Figure 3: The solution of turbulent ﬂow based on turbulent model (16), (17).
The upper pictures illustrate streamlines at the times 2.5s, 5s, 7.5s and 10s. The
lower picture illustrates distribution of the turbulent viscosity (in logaritmic
scale) at the time 10s.

are mentioned in base SI units. The domain with the initial NURBS elements
(they are further reﬁned) is shown at the Figure 5. We consider the left inﬂow
boundary, right outﬂow boundary and the remaining boundaries as the solid
walls. The velocity u is deﬁned by the parabolic proﬁle with maximum value
umax = [3, 0] at the inﬂow boundary and zero at the solid walls. The homoge-

15

Figure 4: The solution of turbulent ﬂow based on turbulent model (18), (19).
The upper pictures illustrate streamlines at the times 2.5s, 5s, 7.5s and 10s. The
lower picture illustrates distribution of the turbulent viscosity (in logaritmic
scale) at the time 10s.

neous Neumann condition is deﬁned at the outﬂow boundary. The homogeneous
Neumann condition is deﬁned for the pressure at the whole boundary. We set
k = 10−6 and ω = 1 at the inﬂow boundary and solid walls. At the outﬂow
boundary there is deﬁned the homogeneous Neumann condition too.

The initial condition for the pressure, k and ω is constant in the whole

16

Figure 5: L-shaped domain with the NURBS elements.

domain, p = 0, k = 10−6 and ω = 1. The initial velocity distribution is deﬁned
by the auxiliary solution of the Stokes problem. The solution of the problems
based on turbulent models described in sections 3.1 and 3.2 is illustrated at the
Figures 2, 3 and 4. We use time step ∆t = 0.05.
It can be seen the diﬀerence between the simulation results obtained by the
basic k − ω model (section 3.1) and the LRN models (section 3.2), see Figures
2–4. The main reason is the amount of turbulent viscosity produced by diﬀerent
models in this case, i.e., basic k − ω model produces more turbulent viscosity
than other two models (compare lower pictures in Figures 2–4).

7 Conclusion

In the paper, we focused on a numerical modelling of turbulent ﬂows. We
developed and tested an isogeometric analysis based solver for RANS equations
with several variants of k − ω models. The presented results show that the
isogeometric analysis is a suitable tool for solving such complex problems. In the
future, we plan to generalize our solver to three space dimensions in order to be
able to simulate ﬂows in water turbines. Moreover, we will test another turbulent
models and suitable stabilization techniques necessary for solving turbulent ﬂow
problems with high Reynolds numbers.

Appendix
The equation (46) is multiplied by the test function ϕk + τk ¯uu · ∇ϕk and the
equation (47) is multiplied by the test function ϕω + τω ¯un · ∇ϕω. Then we
integrate over Ω and use Green’s theorem by assuming that ϕk, ϕω ∈ V0 = {ψ ∈
H 1(Ω) : ψ|∂Ω = 0}. We search for k, ω ∈ V = {ϕ ∈ H 1(Ω) : ϕ|∂Ω = g} so that
all functions ϕk ∈ V0 and ϕω ∈ V0 satisfy

(cid:90)

Ω

(cid:18) νn

T
σk

(cid:19)

+ ν

(cid:90)

Ω

17

(cid:90)

(cid:90)

Ω

+∆tCµ

kn+1ϕkdΩ + ∆t

∇kn+1 · ∇ϕkdΩ +

(kn+1)2

Ω

νn
T

ϕkdΩ +

kn+1τk ¯un · ∇ϕkdΩ −

(cid:90)

Ω

−∆t

(cid:20)(cid:18) νn
(cid:90)

T
σk

(cid:19)

+ ν

∇kn+1

(cid:90)

(cid:21)

· ∇(τk ¯un · ∇ϕk)dΩ +

+∆tCµ

(kn+1)2

τk ¯un · ∇ϕkdΩ =

Ω

νn
T

(cid:90)

knϕkdΩ − ∆t

¯un · ∇kn+1ϕkdΩ + ∆t

Ω

knτk ¯un · ∇ϕkdΩ − ∆t

Ω

Ω

Ω

T f nϕkdΩ +
νn
¯un · ∇kn+1τk ¯un · ∇ϕkdΩ +
T f nτk ¯un · ∇ϕkdΩ.
νn

(cid:90)

+∆t

Ω

(cid:90)

Ω

+

=

(cid:90)

(cid:90)

(cid:90)

(cid:90)

Ω

ωn+1ϕωdΩ + ∆t

(ωn+1)2ϕωdΩ +

+∆tCω2
−∆t

[(σωνn

(cid:90)
(cid:90)
(cid:90)

Ω

Ω

Ω

(σωνn

(cid:90)
T + ν)∇ωn+1 · ∇ϕωdΩ +
ωn+1τω ¯un · ∇ϕωdΩ −
T + ν)∇ωn+1] · ∇(τω ¯un · ∇ϕω)dΩ +
(ωn+1)2τω ¯un · ∇ϕωdΩ =

+∆tCω2

(cid:90)

Ω

Ω

(cid:90)

Ω

f nϕωdΩ +
¯un · ∇ωn+1τω ¯un · ∇ϕωdΩ +
f nτω ¯un · ∇ϕωdΩ.

(cid:90)

+∆tCω1

Ω

(cid:90)

(cid:90)

=

(cid:90)

Ω

+

ωnϕωdΩ − ∆t

¯un · ∇ωn+1ϕωdΩ + ∆tCω1

Ω

ωnτω ¯un · ∇ϕωdΩ − ∆t

Ω

Ω

Now we consider ﬁnite dimensional spaces V h ⊂ V and V h
functions Rk
forms of linear combinations of basis functions

i ∈ V h and Rω

i=1

kn
h =

kn+1
h =

kn+1
i Rk
i ,

0 ⊂ V0 with basis
i ∈ V h
0 . The solutions kh ∈ V h and ωh ∈ V h have the
N(cid:88)
N(cid:88)
h =
0 and ϕω ∈ V h
N(cid:88)

0 . Substituting to the previous equations we

N(cid:88)
N(cid:88)

(cid:18) νn

ωn+1
i Rk

i , ωn

i Rk
ωn
i ,

i Rk
kn
i ,

ωn+1

h =

(49)

(50)

i=1

i=1

i=1

∇Rk

i · ∇Rk

j dΩ

+

kn+1
i

[

Rk

i Rk

j dΩ

+∆t

+ ν

T
σk

Ω

i=1

(cid:90)
(cid:124)

Ω

(cid:90)
(cid:124)

(cid:125)

(cid:123)(cid:122)

Ak

(cid:125)

(cid:19)
(cid:123)(cid:122)

Ck

We consider ϕk ∈ V h
have

18

(cid:90)
(cid:124)

Ω

1
νn
T

Rk

i Rk
j

N(cid:88)
(cid:123)(cid:122)

l=1

Bk

l (k)

(

νn
T
σk

+ ν)∇Rk

i τk((

+∆tCµ

(cid:90)
(cid:124)

Ω

+∆t

(cid:32)

(cid:90)
(cid:124)

Ω

· (Rk

i ∇Rk

j )dΩ

(cid:33)

¯un

mRu
m

(cid:123)(cid:122)

∇Ak

τk

Ω

(cid:32)

+

l dΩ

(cid:90)
(cid:124)
(cid:125)
l · ∇Ru
l )∇Rk
(cid:123)(cid:122)
¯un
(cid:33)

∇Ck

N(cid:88)
N(cid:88)

m=1

l=1

(cid:34)

j + (

kn+1
l Rk

N(cid:88)
N(cid:88)

l=1

m=1

j ))dΩ

l )(∇ · ∇Rk
(cid:33)(cid:35)

¯un

l Ru

(cid:32) N(cid:88)

kn+1
l Rk

l

l=1

dΩ

+∆tCµ

τk

¯un

mRu
m

+

+

+

+

(cid:125)
(cid:125)
(cid:125)
(cid:125)

∇Rk

j

N(cid:88)

l=1

1
νn
T

l (k)

(

+∆t

Ω

∇Bk

i ·
(cid:123)(cid:122)
Rk
(cid:90)
(cid:124)
(cid:32) N(cid:88)
(cid:123)(cid:122)
(cid:32)
N(cid:88)

l=1
∇Dk

·

τk

m=1

¯un

l Ru

i Rk

j )dΩ

l ) · (∇Rk
(cid:123)(cid:122)

Dk

(cid:33)

¯un

l Ru
l

(∇Rk

i · ∇Rk

] =

· (∇Rk

] +

j )dΩ

(cid:125)
(cid:125)
T f n · ∇Rk

j )dΩ

i Rk

j dΩ
,

(cid:125)

(cid:33)

¯un

mRu
m

(cid:123)(cid:122)

∇Ak

N(cid:88)

l=1

(cid:123)(cid:122)

∇F k

+∆t

N(cid:88)

i=1

=

τk

¯un

mRu
m

(cid:90)
(cid:124)

Ω

(cid:32)
(cid:90)
(cid:124)
(cid:90)
(cid:124)

Ω

N(cid:88)

m=1

(cid:123)(cid:122)

Ak

(cid:123)(cid:122)

F k

kn
i [

Rk

i Rk

j dΩ

+

(cid:125)

(cid:33)
(cid:90)
(cid:124)
(cid:125)

Ω

ωn+1

i

Rω

Ω

Ω

[

(cid:90)
(cid:124)
N(cid:88)
(cid:123)(cid:122)

l=1

Bω

l (ω)

i τω((

N(cid:88)

i=1

Rω

i Rω
j (

(cid:90)
(cid:124)
T + ν)∇Rω

Ω

(cid:90)
(cid:124)

Ω

(cid:90)
(cid:124)

19

+∆t

νn
T f nRk

j dΩ

+∆t

τk(

¯un

l Ru

l )νn

Aω

+

i Rω

(cid:123)(cid:122)

j dΩ

l )dΩ

(cid:125)
(cid:125)
l · ∇Ru
(cid:123)(cid:122)
¯un

∇Cω

N(cid:88)

l=1

j dΩ

j )dΩ

+∆t

(σωνn

i · ∇Rω

Cω

(cid:123)(cid:122)
T + ν)∇Rω
(cid:123)(cid:122)
l )(∇·∇Rω

m)(Rω

mRu

l Ru

∇Aω

¯un

¯un

N(cid:88)
N(cid:88)

i ∇Rω

m=1

j +(

Ω

(τω

(cid:90)
(cid:124)
l )∇Rω

Ω

j ))dΩ

l=1

+

+

+

(cid:125)
(cid:125)
(cid:125)

+∆tCω2

ωn+1
l Rω

(cid:90)
(cid:124)

Ω

+∆t

(σωνn

(cid:33)

¯un

mRu
m

(cid:32)

τω

N(cid:88)

m=1

(cid:90)
(cid:124)

Ω

+∆tCω2

+∆t

Ω

(cid:90)
(cid:124)
N(cid:88)

i=1

τω

(cid:32)
(cid:90)
(cid:124)
(cid:90)
(cid:124)

Ω

Ω

N(cid:88)

m=1

¯un

mRu
m

Aω

(cid:123)(cid:122)
(cid:123)(cid:122)

F ω

(cid:125)
(cid:125)

=

ωn
i [

Rω

i Rω

j dΩ

+

l (ω)

(

Ω

+∆t

∇Bω

i ·
Rω

(cid:34)
(cid:123)(cid:122)
(cid:90)
(cid:124)
(cid:32) N(cid:88)
(cid:123)(cid:122)
(cid:32)
N(cid:88)
(cid:90)
(cid:124)

l=1
∇Dω

τω

Ω

m=1

·

(cid:33)
(cid:90)
(cid:124)

Ω

∇Rω

j

l=1

(cid:32) N(cid:88)
N(cid:88)
(cid:33)

¯un

l=1

¯un

l Ru
l

(∇Rω

(cid:33)(cid:35)

ωn+1
l Rω

l

dΩ

+

+

(cid:125)
(cid:125)

] =

] +

j dΩ

.

(cid:125)

l Ru

i Rω

j dΩ

(cid:33)

l ) · ∇Rω
(cid:123)(cid:122)
i · ∇Rω

Dω

j dΩ

j )dΩ

i · ∇Rω
Rω

(cid:125)
(cid:125)
l )f n · ∇Rω
(cid:123)(cid:122)

∇F ω

¯un

mRu
m

(cid:123)(cid:122)
N(cid:88)

∇Aω

l=1

+∆tCω1

f nRω

j dΩ

+∆tCω1

τω(

¯un

l Ru

References

[1] J. Bredberg, On the Wall Boundary Condition for Turbulence Models,

Chalmers University of Technology, Sweden, 2000.

[2] I.B. Celik, Introductory Turbulence Modeling. Lecture Notes, West Vir-

ginia University, 1999.

[3] L. Davidson, An Introduction to Turbulence Models, Chalmers University

of Technology, Sweden, 2011.

[4] L. Davidson, Fluid Mechanics, Turbulent Flow and Turbulence Modeling,
Lecture Notes in MSc courses, Chalmers University of Technology, Sweden,
2013.

[5] V. John, P. Knobloch, On spurious oscillations at layers diminishing
(SOLD) methods for convection-diﬀusion equations: Part I: A review, Com-
put. Methods Appl. Mech. Engrg. 196 (2007) 2197–2215.

[6] O. Petit, Towards Full Predictions of the Unsteady Incompressible in Ro-
tating Machines, Using OpenFOAM, Chalmers University of Technology,
Sweden, 2012.

[7] H.K. Versteeg, W. Malalasekera, An Introduction to Computational Fluid

Dynamics - Second Edition, Prentice Hall, 2007.

20

[8] D.C. Wilcox, Formulation of the k-omega turbulence model revisited. AIAA

J. 46 (2008) 2823–2838.

21

