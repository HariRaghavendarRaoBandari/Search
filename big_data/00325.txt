6
1
0
2

 
r
a

M
1

 

 
 
]

.

O
C
h
t
a
m

[
 
 

1
v
5
2
3
0
0

.

3
0
6
1
:
v
i
X
r
a

The Diameters of Transportation Polytopes satisfy the

Hirsch Conjecture

S. Borgwardt1, J. A. De Loera2, and E. Finhold3

1 Technische Universit¨at M¨unchen
2 University of California, Davis

3 Hausdorﬀ Research Institute for Mathematics, Bonn

Abstract. We show that the Hirsch conjecture holds for all two-way M ×N transporta-
tion polytopes and all their faces. In particular, the combinatorial diameter of M ×N
transportation polytopes is bounded above by M + N − 1.

Keywords: Diameter of polyhedra, Hirsch conjecture, transportation polytopes.

MSC[2012]: 52B05, 90C05, 90C08

1

Introduction

Transportation problems model the minimum-cost of transporting goods from M suppliers to N
demand locations, where each of these M + N locations sends, respectively receives, a speciﬁed
quantity of a product (we assume demand is equal to supply and that the cost is given by
the sum of the costs at each connection). The set of possible feasible solutions of the problem
correspond to the points of a certain convex polytope, a transportation polytope. Transportation
problems are one of the founding problems of optimization theory [15] and continue to be among
the fundamental problems in mathematical programming, statistics, and many other ﬁelds. See
[9,10,19,23] and references therein for detailed information about transportation polytopes.

The combinatorial diameter of a polyhedron is the maximum number of edges (or 1-faces)
needed to connect any two of its vertices. Alternatively, it can be deﬁned as the diameter of the
skeleton (or 1-skeleton) of the polyhedron. Motivated by the study of the worst-case performance
of the simplex algorithm to solve linear optimization problems, researchers have considered the
geometric problem of deciding what is the largest possible (combinatorial) diameter of convex
polytopes with given number of facets and dimension (see [8,17] for an overview about this
problem and its implications in optimization theory). It is well-known that network ﬂow problems
and transportation problems (which are bipartite networks) are among the simplest possible linear
optimization problems because they have strongly polynomial time solution and, for integral input
data, have integer vertices too (see [22]). Thus it is somewhat surprising that the exact diameter
of transportation polytopes has until now remained open. The goal of this paper is to present a
solution of this problem.

One of the most famous conjectures associated with the diameter is the Hirsch conjecture,
stated in 1957 by Warren M. Hirsch [7]. It claimed an upper bound of f −d on the (combinatorial)
diameter any d-dimensional polyhedron with f facets. It is known to be true for several special
classes of polyhedra (see [17] for a list), such as (0, 1)-polytopes [20] or dual transportation
polyhedra [1], and some of these results extend to lattice polytopes, e.g., [11,12]. Today, we know
the Hirsch bound does not hold in general, neither for unbounded polyhedra nor for bounded
polyhedra [18,21]. The polynomial upper bounds on the diameter of totally unimodular polytopes
presented in [3,13] immediately give polynomial bounds for classical transportation polytopes too,
and even for all network polytopes.

For M ×N transportation polytopes, the Hirsch conjecture essentially claims an upper bound
of M + N − 1. More precisely, one can state the diameter bound of a transportation polytope
as M + N − 1 − µ, where µ is the number of so-called critical pairs of a supply and a demand
node. These are the variables that are strictly positive in every feasible solution to our trans-
portation problem. For transportation polytopes, all polynomial bounds have been improved in
the literature, where the best published upper bound is 8(M + N − 2) in [6]. It is linear, but it is

essentially a factor of eight away from the bound claimed by the Hirsch conjecture (see [9] for an
overview). In prior work, the Hirsch bound was shown to hold for 2×N and 3×N transportation
polytopes [5,9]. The so-called partition polytopes [4] and the Birkhoﬀ polytopes [2], both classes
of 0, 1-transportation polytopes, satisfy even much lower bounds. Here we ﬁnally prove the Hirsch
conjecture is true for all M ×N transportation polytopes.

Theorem 1. The diameter of an M ×N transportation polytope is bounded above by M + N −
1 − µ, where µ is the number of critical pairs of the transportation polytope. Therefore, the Hirsch
conjecture is true for all M ×N transportation polytopes.

Note that for all M, N with M ≥ 3, N ≥ 4 there are concrete M ×N transportation polytopes
that have no critical pairs and attain the bound of M +N −1 [23]. Therefore, this class of polytopes
belongs to the collection of so-called Hirsch-sharp polytopes [14,16].

To prove Theorem 1, we give an algorithm that connects any two vertices of a transportation
polytope by a walk on the skeleton that has length at most M + N − 1 − µ. We remark this is
not necessarily a walk of minimum length between the two vertices. However, this walk stays in
the minimal face containing both vertices. Therefore, we get the following corollary.

Corollary 1. All faces of two-way transportation polytopes satisfy the Hirsch conjecture.

Our paper is structured as follows. In Section 2, we recall the necessary background on trans-
portation polytopes and introduce our general notation. In Section 3, we present our algorithm
that constructs a walk on the skeleton of the polytopes adhering to the bounds in Theorem 1.
Section 4 is dedicated to the correctness proof of the algorithm.

2 Preliminaries

This section follows [5], but we specialize the notation for our discussion of walks on the skeleton
of transportation polytopes.

An M ×N transportation problem has M supply points and N demand points. Each supply
point holds a quantity ui > 0 and each demand point needs a quantity vj > 0 of a product. The
vectors u = (u1, . . . , uM ) and v = (v1, . . . , vN ) are the margins for the transportation polytope.
The total supply equals the total demand, so formally PM
j=1 vj. Let yij ≥ 0 denote
the ﬂow from supply point i to demand point j. Then the set of feasible ﬂows y ∈ RM ×N can be
described as

i=1 ui = PN

N
P
j=1
M
P
i=1

yij = ui

i = 1, ..., M,

yij = vj

j = 1, ..., N,

yij ≥ 0

i = 1, ..., M, j = 1, ..., N.

The set of real solutions of this system constitutes the transportation polytope TP(u, v).

When discussing an M ×N transportation problem, it is common practice to think of the
supply and demand points as nodes in the complete bipartite graph KM,N . In the following we
denote supply nodes by σ and demand nodes by δ. For a feasible solution of a transportation
problem, we deﬁne the support graph as the subgraph of KM,N that contains precisely the edges
of non-zero ﬂow.

In general, the points of transportation polytopes do not have connected support graphs.
However, this is the case for the vertices of non-degenerate transportation polytopes. An M ×N
transportation polytope is non-degenerate if every vertex of the polytope has exactly M + N −
1 non-negative entries. This is the case if and only if there are no non-empty proper subsets
I ( {1, . . . , M } and J ( {1, . . . , N } such that Pi∈I ui = Pj∈J vj, see [23]. Note that for
each degenerate M ×N transportation polytope there is a non-degenerate M ×N transportation
polytope of the same or larger combinatorial diameter [23]. Therefore, it suﬃces to consider non-
degenerate transportation polytopes to prove upper bounds. We exploit this in the upcoming
proof.

When studying the combinatorial diameter, the vertices of a polytope are of special interest.
For transportation polytopes the vertices can be characterized in terms of their support graphs:

2

A feasible solution y is a vertex if and only if its support graph contains no cycles, that is, it is
a spanning forest. Observe that a vertex is uniquely determined by (the edge set of) its support
graph and the vertices of non-degenerate transportation polytopes are given by spanning trees
(see for example [19]). Therefore, we refer to the support graphs of vertices of transportation
polytopes, as well as to the vertices themselves, simply as trees and typically denote them by
the capital letters O (for ‘original’ tree), F (for ‘ﬁnal tree’), and C and C ′ (for the ‘current’ and
‘succeeding’ tree, corresponding to neighboring vertices of the transportation polytope). Here,
the margins of the polytope play an important role: They deﬁne which trees appear as vertices
of the polytope, and which do not.

We continue with characterizing the 1-dimensional faces of the transportation polytope in
terms of the support graphs. (Note that, to avoid confusion, we use the term ‘edge’ only for the
edges of the underlying support bipartite graph, but not for the 1-faces of the transportation
polytope.)

Proposition 1 (see Lemma 4.1 in [23]).

Let C and C ′ be two trees that correspond to vertices of an M ×N transportation polytope
TP(u, v). Then the vertices are adjacent in the 1-skeleton of TP(u, v) if and only if C ∪ C ′
contains a unique cycle.

In particular, walking from some vertex to a neighboring vertex in the polytope (taking a step
on the skeleton / walking along a 1-face of the polytope) corresponds to changing the ﬂow on the
edges of KM,N : Being at a vertex (spanning tree) C, we insert an arbitrary edge {σ, δ} /∈ C into
C. This closes a cycle of even length. We alternately increase and decrease ﬂow on the edges of
this cycle, where we increase on the edge we inserted. All edges are changed by the same amount
which is the minimum existing ﬂow among the edges that are decreased. Due to non-degeneracy
(which we may assume here) this deletes exactly one edge and hence leads to a tree C ′ that is
a neighboring vertex of the transportation polytope. Note that the ﬂow on the edges in C is
determined by the margins of the polytope, so the margins determine which edge is deleted when
inserting an edge.

As mentioned before, to prove validity of the Hirsch conjecture, we have to show an upper
bound of f − d = M + N − 1 − µ on the combinatorial diameter of M ×N transportation
polytopes for µ the number of critical pairs. A critical pair (σ, δ) corresponds to an edge {σ, δ}
that is present in the support graph of any feasible solution. Equivalently, they are the variables
satisfying yij > 0 for all feasible solutions y. To see that M + N − 1 − µ is in fact the Hirsch
bound, note that the dimension of an M ×N transportation polytope is d = (M − 1)(N − 1) [19],
and for non-degenerate transportation polytopes the number of facets is f = M · N − µ. This
follows immediately from Theorem 2 in [19].

Example 1 (Critical pairs). Consider a 2×3 transportation polytope with supply nodes σ1, σ2
with margins u1 = 5, u2 = 3 and demand nodes δ1, δ2, δ3 with margins v1 = 4, v2 = 2, v3 = 3.
Then the edge {σ1, δ1} has to be present in every feasible tree: Demand node δ1 with demand
v1 = 4 cannot be connected only to the supply node σ2 with total supply u2 = 3. The Figure
1 illustrates two trees that correspond to vertices of the polytope. Nodes are labeled with the
margins, edges with the ﬂow.

v1 = 4

v2 = 2

v3 = 2

v1 = 4

v2 = 2

v3 = 2

4

1

1

2

2

1

3

2

u1 = 5

u2 = 3

u1 = 5

u2 = 3

Fig. 1. The edge connecting the nodes with margins 5 and 4 is present in both trees.

Note that the two trees diﬀer in exactly one edge and thus are neighbors in the 1-skeleton
of the polytope. In particular, this example shows that even though the edge corresponding to

3

the critical pair is present in any tree, the ﬂow on this edge might change during a walk on
the skeleton of the transportation polytope. Therefore, we cannot simply disregard the edge and
assume to have a transportation polytope without considering the critical pairs.
⊓⊔

Note that M + N − 1 − µ is precisely the maximum number of edges in which two trees, within
the same transportation polytope, can diﬀer. In particular, for proving the Hirsch conjecture for
M ×N transportation polytopes it is enough to show that there is a ﬁnite sequence of steps from
the original tree O to the ﬁnal tree F that inserts the edges in F one after another such that no
inserted edge is deleted at a later point.

However, the following example illustrates the big diﬃculty of this approach. It was ﬁrst
mentioned in [6] and shows that it might be necessary to delete an edge that is contained in the
ﬁnal tree and only reinsert it at a later point.

Example 2. Consider the walk from a tree O to a tree F in Figure 2 on the skeleton of a trans-
portation polytope. All supply nodes (bottom row) have supply 3, all demand nodes (top row)
have demand 2. The edges are labeled with the current ﬂow; the dashed edges are the edges we
insert in the respective pivot:

2

1

1

2

2

2

1

1

1
1

2

2

tree O

pivot 1

pivot 2

pivot 3

tree F

Fig. 2. A walk from tree O to tree F of length three.

Note that O and F diﬀer by only two edges and that all edges that are not in O are in F ,
and vice versa. No matter which edge we insert in the ﬁrst step, we have to delete an edge that is
contained in F . Then we need at least two more steps, as we still have to insert two edges from
F and can only insert exactly one edge in a single step. Therefore the walk above is a walk of
minimum length between O and F .
⊓⊔

Note that in Example 2, we do not delete an edge that was inserted in a previous step, so we
do not obtain a contradiction with the approach we propose. In fact, we will show how to ﬁnd
such a sequence of at most M + N − 1 − µ steps for all transportation polytopes, which proves
the validity of the Hirsch conjecture for all transportation polytopes.

It is important to be aware of the fundamental role that the margins play for a walk on
the skeleton of a transportation polytope. The margins deﬁne which particular spanning trees
of KM,N appear as vertices of the polytope. In contrast, the problem for (graphical) matroid
polytopes PM(KM,N ) of complete bipartite graphs is much easier. The vertices of the matroid
polytope of the graph KM,N correspond to all the spanning trees of KM,N and any two spanning
trees diﬀering in exactly one edge correspond to neighboring vertices. Therefore, any two vertices
of PM(KM,N ) are connected by a walk on the skeleton of the polytope of length equal to the number
of edges in which the spanning trees diﬀer. In particular, in such a sequence we never have to delete
an edge that is contained in the target spanning tree, so that the situation from Example 2 does
not occur in the graphical matroid case. Thus proving the Hirsch conjecture for graphical matroid
polytopes is a purely combinatorial process, whereas an analysis for transportation polytopes
requires the margins.

3 Algorithm

We present an algorithm that constructs a walk from a tree O to a tree F on the skeleton
of a non-degenerate transportation polytope. The walk is fully speciﬁed by the concrete ﬁnite
sequence of trees, starting with O, ending with F , where each tree diﬀers from the previous one
by exactly one edge. Before we give a pseudo-code description of the algorithm, let us explain
its most important features in some detail. The algorithm is based on the following important
principle:

4

Construct a sequence of trees from a tree O to a tree F by successively inserting edges contained

in F such that no previously inserted edge is ever deleted.

To keep track of the edges that may not be deleted, we shade them. There will be two general

situations in which we shade an edge:

– Whenever we insert an edge from F into the current tree, we shade it.
– We may shade an edge from F that already exists in the current tree.

Note that the ﬁrst case corresponds to a step on the skeleton of the transportation polytope from
a tree C to a tree C ′. When inserting an edge into a tree, we also delete an unshaded edge. In
contrast, we keep the current tree in the second case. We will often refer to both of the above
situations at the same time. We then write “(insert and) shade an edge”.

In our discussion, we will frequently refer to a tree and the set of shaded edges in the tree at

the same time. To this end, we introduce the following two terms:

– We call a tree with a (not necessarily strict) subset of edges shaded a partially shaded tree.
– We call a tree with all edges shaded a fully shaded tree. As we only shade edges from F in

our algorithm, F is the only tree that may be fully shaded.

The most important aspect of our algorithm is the order in which edges are (inserted and)
shaded; recall Example 2. Based on the edge that we insert in the current tree, the margins of
the transportation polytope deﬁne which edge is deleted. The order of insertion is determined by
the following labeling of the edges in F , in which every edge is labeled + or −.

– Choose an arbitrary demand node δ∗ and, in F , consider all paths starting at δ∗.
– Label edges on these paths alternatingly + and −, beginning with a +.

+

−

δ∗

demand nodes

−−

−+

−++

−

+

++

−

supply nodes

Fig. 3. A labeling of the edges in F .

Figure 3 is an example for such a labeling. Note that in particular

– each supply node is incident to exactly one +edge,
– each demand node 6= δ∗ is incident to exactly one −edge, and
– δ∗ is only incident to +edges.

These labels for edges in F will not change during our algorithm and can be preprocessed.
The main part of the algorithm then begins with an original tree O and all edges unshaded. In
each iteration, we (insert and) shade an edge from the ﬁnal tree F . When inserting an edge, the
margins tell us which edge will be deleted. We proceed like this until we reach F with all edges
shaded.

We now have a closer look at an iteration of the algorithm. Let C be a partially shaded tree.
We take a supply node σ that satisﬁes a special property in C; such a supply node is guaranteed
to exist, which we will prove in Section 4. We then consider the edges that are incident to σ in
F and that are still unshaded. We either shade one of these edges in C ∩ F , or we insert an edge
from F \C and then shade it. Thus in each iteration we shade an edge and obtain a succeeding
tree C ′ with one additional edge shaded. The decision of which edge to (insert and) shade is
based on the above labeling: For each supply node, the unique incident +edge will be the last
edge to be shaded.

5

Algorithm 1 gives a description in pseudo-code of the method: Steps 1 and 2 describe the
preprocessing of the labeling for the edges in F and the initialization of the algorithm. The main
loop is stated in Step 3 and we refer to each run through the loop as an iteration of the algorithm.
Note that the actual walk on the skeleton greatly depends on the labeling we ﬁx in the beginning.
It has an impact on the if-else clauses in the main loop and also aﬀects the subroutine (Algorithm
2). Choosing a diﬀerent labeling, i.e. taking another demand node δ∗ (Step 1 of Algorithm 1)
may change the walk signiﬁcantly; this might even change the number of steps (the length of the
walk on the skeleton). The same holds for choosing a diﬀerent initial supply node σ (Step 2 of
Algorithm 1). Thus the constructed walk is not necessarily of minimum length.

Algorithm 1 Hirsch-walk in Transportation Polytopes

Input: Trees O and F corresponding to vertices of an M ×N transportation polytope TP(u, v)

Output: A sequence S of trees corresponding to a walk from O to F on the skeleton of TP(u, v) of
length at most M + N − 1 − µ, where µ is the number of critical pairs of TP(u, v)

1. Choose an arbitrary demand node δ∗ and consider all paths in F starting at δ∗. Label the edges on

these paths alternatingly + and −, beginning with a +.

2. Choose an arbitrary supply node σ. All edges in O are unshaded. Start with sequence S only con-

taining O. Set C = O, the current tree of the walk.

3. repeat

– if there is an unshaded −edge incident to σ in F then

(insert and) shade any unshaded −edge e incident to σ into C to obtain
the succeeding tree C ′
if the edge e was inserted (not only shaded) then

append C ′ to the end of S
set δ ′ as the demand node incident to the deleted edge

else

set δ ′ = δ

– else

(insert and) shade the unique +edge e incident to σ into C to obtain
the succeeding tree C ′
if the edge e was inserted (not only shaded) then

append C ′ to the end of S
set δ ′ as the demand node incident to the deleted edge

else

set δ ′ = δ

if δ∗ is only incident to shaded edges in C ′ then

return S and stop

– Update σ by calling Algorithm 2 with input δ ′ and C ′
– Set C = C ′

end repeat

Algorithm 2 Find New Supply Node σ.

Input: Demand node δ ′ and a partially shaded tree C ′ (with +/−labels for the shaded edges), corre-
sponding to a vertex of TP(u, v)
Output: Supply node σ with the (SIN) property in C ′; see Section 4

– if there is an unshaded edge {σ ′, δ ′} in C ′ then

return σ = σ ′

– else

set σ ′′ as the supply node of the unique −edge {σ ′′, δ ′} incident to δ ′
return σ = σ ′′

6

Let us illustrate how the algorithm works by applying it to the problematic Example 2. The

remainder of this paper is dedicated to proving the correctness of the algorithm.

Example 3 (Example 2 revisited). We show a run of Algorithm 1 for the instance from Example
2. As before, we want to connect O and F as depicted in Figure 4 with a walk on the skeleton of
the transportation polytope. Figure 4 also shows a choice of δ∗ and the corresponding labeling
of the edges in F according to Step 1 in Algorithm 1.

δ∗

++

−

−

tree O

tree F

Fig. 4. Initial tree O with all edges unshaded and ﬁnal tree F with edge labels.

δ ′

δ

δ = δ ′

δ

δ ′

δ ′ = δ∗

δ

σ ′

σ ′

iteration 1

pivot 1

σ = σ ′′

iteration 2

σ ′′

σ ′

iteration 3

pivot 2

σ ′

iteration 4

pivot 3

Fig. 5. The iterations of Algorithm 1 for the input from Figure 4.

The algorithm inserts and shades edges in four iterations of Algorithm 1, which are depicted
in Figure 5. As we will see, iterations 1,3, and 4 correspond to actual steps on the skeleton of
the underlying transportation polytope. In constrast, iteration 2 illustrates a situation where we
remain at the current tree. The names of supply nodes and demand nodes in the ﬁgure correspond
to the notation used in Algorithms 1 and 2. In particular, recall that in each iteration we (insert
and) shade an edge incident to the current supply node σ. Further, recall that δ refers to the
demand node of this edge. Let us follow a run of Algorithm 1 for this example in some detail:

The σ for the ﬁrst iteration is the initial supply node chosen in Step 2 of the algorithm. We
begin with all edges unshaded. By inserting and shading the −edge {σ, δ}, we delete the edge
{σ, δ′}, so in particular an edge incident to δ′. This demand node δ′ is the input for the ﬁrst
call of the subroutine to ﬁnd a new supply node (Algorithm 2). There still is the unshaded edge
{δ′, σ′} incident to δ′ in the succeeding tree, so the subroutine returns the supply node σ′ and
we continue with it as the new supply node σ.

In the second iteration, there is a −edge {σ, δ} incident to the new σ in F that already exists
in the current tree, but is still unshaded. We choose {σ, δ} and only shade it (no insertion).
Therefore we have δ′ = δ. Since there is no unshaded edge incident to δ′, the subroutine returns
the supply node σ′′ of the unique −edge incident to δ′ as the new σ for the next iteration. (In
this case, it is the same supply node as for the previous iteration.)

In iteration 3, there is only one edge {σ, δ} (a +edge) left to shade incident to the new σ. We
insert and shade it. This deletes the unshaded edge incident to δ′. There are no unshaded edges
incident to δ′ and thus we continue with σ′′, the supply node of the unique −edge incident to δ′.
In iteration 4, we again insert the only unshaded edge {σ, δ} (a +edge) incident to σ. This
deletes the unshaded edge incident to δ′ = δ∗. Now δ∗ is only incident to shaded edges in the
new tree C ′. This is the stopping criterion for Algorithm 1. We reached the ﬁnal tree F with all
edges shaded.
⊓⊔

7

4 Proof of Correctness

We now turn to a proof of correctness for Algorithm 1. First, we introduce some specialized
notation and two properties for trees, respectively their nodes, that are at the core of the proof.

4.1 Well-Connectedness and the UNO and SIN properties

We introduce some terminology to distinguish two states for each node in the current tree.

Deﬁnition 1. Let C be the partially shaded current tree and F the ﬁnal tree.

We say a supply node σ is well-connected if all edges that are incident to σ in F exist in the

current tree C and are shaded (’nothing left to insert’). Otherwise it is open.

A demand node δ is well-connected if it is not incident to an unshaded edge in C (’nothing

to delete’). Otherwise it is open.

A shaded edge incident to at least one well-connected node is a well-connected edge.

Note that to detect well-connectedness during a run of Algorithm 1, it is enough to consider
the current tree and the edge labels from F . For the demand nodes, this is obvious. A supply node
is well-connected if and only if it is incident to a shaded +edge. This is because the algorithm
ﬁrst (inserts and) shades all −edges incident to a supply node and only then the unique +edge.
Further, shaded edges are not deleted.

The well-connected edges together with their incident nodes form an important structure for

our proofs.

Deﬁnition 2. A (well-connected) component in a partially shaded tree C is a connected subgraph
induced by the well-connected edges. Further, each node not incident to a well-connected edge
forms a component by itself.

The components are exactly the connected components we would obtain by deleting all edges that
are not well-connected from the current tree. Note that every node and every well-connected edge
belongs to a unique component. Also, every shaded +edge belongs to some component (its supply
node is well-connected). However, this is not always the case for shaded −edges as its supply and
demand node might both be open (edges to insert / unshaded edges); see also Example 4 below.

Deﬁnition 3. We say a component of a partially shaded tree C satisﬁes property (UNO) ( unique
open node property) if it contains a unique open node. (UNO) holds in a partially shaded tree C
if all its components satisfy (UNO).

We will show that Algorithm 1 always preserves property (UNO) until we reach the ﬁnal tree
F with all edges shaded and all nodes well-connected (see Lemma 1). This property is crucial for
our arguments in the following.

Besides (UNO), we need a second property. It is concerned with the supply node σ that is
incident to the edge we (insert and) shade. We distinguish odd and even edges with respect to σ:
Every edge of the current tree lies on a unique path starting at σ. We number the edges on these
paths, where the edges incident to σ are the ﬁrst edges. Then an edge is odd with respect to σ if
it has an odd numbering, otherwise it is even. In particular, these paths alternate between odd
and even edges. The property (UNO) now imposes a condition on the odd edges on the paths
starting at σ.

Deﬁnition 4. A supply node σ satisﬁes property (SIN) ( supply node insertion property) in a
partially shaded tree C if all edges that are odd with respect to σ are unshaded edges or (shaded)
−edges incident to well-connected demand nodes.

The odd edges on paths starting at a supply node σ are of particular interest: They are the
only edges that could theoretically be deleted when inserting an edge incident to σ – depending
on the margins. However, as we will see, by following Algorithms 1 and 2, the odd edges on paths
starting at σ that are already shaded will not be deleted. In fact, Algorithm 2 returns a supply
node with the (SIN) property. Proving these statements is a key part of our upcoming proof.

Typically, we will only distinguish between odd and even edges on paths starting at a ﬁxed
supply node σ when showing that σ satisﬁes the (SIN) property. To have a simple wording, we

8

will refer to these edges only as odd or even if the context is clear, i.e. if it is clear which node is
being considered.

We close this subsection by illustrating the above terms and properties with some examples.
As we will see in the outline of the proof, the (UNO) and (SIN) properties will be crucial for our
arguments.

Example 4 (UNO). In this example, we illustrate several well-connected components and their
open/well-connected nodes. The bold edges are shaded, circles indicate the components. Recall
that all shaded edges are contained in the ﬁnal tree F and thus have a + or − label. A supply
node is well-connected if and only if it is incident to a shaded +edge, while demand node is
well-connected if and only if there are no unshaded edges incident to this node.

In the left-hand component in Figure 6, supply node σ is open as there is no +edge incident
to σ and therefore there is an edge left to insert. All other nodes are well-connected. In the
right-hand component, demand node δ is the unique open node as it is incident to an unshaded
edge. In particular, both components satisfy (UNO).

δ

− − + + − +

+ + − + + − −

σ

Fig. 6. Components with unique open nodes σ and δ, respectively.

Figure 7 illustrates a conﬁguration in which two components are connected by a shaded −edge
{σ, δ}. This edge is not well-connected because both endpoints are open: σ is not incident to a
+edge while δ is incident to an unshaded edge. Note that (UNO) holds in both components.

δ

−

−

+ − +

σ

Fig. 7. Two components satisfying (UNO), connected by a shaded edge.

Finally, Figure 8 depicts two components that do not satisfy (UNO): They have two open
nodes each, σ and δ, respectively δ and δ′. Observe that all shaded edges are well-connected as
they are incident to a well-connected supply or demand node.

δ

δ

δ ′

− −

+ −

+ −

+ −

σ

Fig. 8. Components with two open nodes each (σ and δ / δ and δ′).

⊓⊔

9

Example 5 (SIN). We illustrate the property (SIN) with the tree depicted in Figure 9. Edges
highlighted by wavy lines are the odd edges on paths starting at σ. These edges are either
unshaded or they are shaded (bold) −edges with well-connected demand node (δ1 and δ2 in
Figure 9 are not incident to an unshaded edge and thus well-connected). There are no conditions
on the even edges on paths starting at σ.

δ1

−

+

−

σ

δ2

−

+

Fig. 9. A node σ with the (SIN) property.

Recall that the odd (wavy) edges are the ones that might be deleted when inserting an edge
incident to σ. However, (UNO), (SIN), and our insertion strategy (ﬁrst −edges, then +edge)
imply that we always delete an unshaded edge. In particular, a shaded −edge will not be deleted
if it is incident to a well-connected demand node.
⊓⊔

Example 6 (Example 3 revisited). We illustrate the well-connected nodes and components through-
out the run of the algorithm in Example 3.

−

−−

start (O)

after iteration 1

after iteration 2

+

− −

+

−+

−

after iteration 3

after iteration 4 (F )

Fig. 10. Components (encircled) and well-connected nodes (ﬁlled) throughout a run of Algorithm
1.

Note that not all shadings aﬀect the components (iteration 1). In the other iterations, smaller
components are successively merged to larger ones as nodes and edges become well-connected.
Components can be joined

– when a supply node becomes well-connected by (inserting and) shading the +edge incident

to the node (see bottom right node in iteration 3) or

– when the last unshaded edge incident to a demand node is shaded (top center in iteration 2)

or deleted (top right in iteration 3).

Then the open node of one of the components becomes the open node of the new, larger compo-
nent. In particular, the tree satisﬁes (UNO) in any iteration.
⊓⊔

10

4.2 Outline of the proof

Before starting with the actual proof, let us brieﬂy outline its main points. The key aspect is to
show that we avoid deletion of a shaded edge. We do so in the following way (which precisely
corresponds to Algorithms 1 and 2):

– If the current tree satisﬁes (UNO), then deletion of a shaded edge can be avoided if we (insert
and) shade an edge incident to a supply node satisfying (SIN); ﬁrst all −edges are shaded
and only then the unique +edge. (Lemma 3)

– When proceeding like this, we keep the (UNO) property throughout the whole walk from O
to F . Further we can always ﬁnd a new supply node with the (SIN) property for the next
iteration. (Lemma 4)

Lemma 1 and 2 are auxiliary statements. In the end, we combine our results to obtain Theorem

1 and Corollary 1.

Recall that the margins of a transportation polytope determine which trees appear as vertices
and which edge is deleted when inserting an edge into a tree. An important aspect of the proof
is that we can avoid dealing with explicit margins by performing only very few case distinctions
based on which edges are deleted. This allows for a less technical proof.

4.3 The Proof

We now begin with the proof of correctness of our algorithm. First, we establish some tools for
our later analysis.

Recall that our algorithm has to stop if C is fully shaded. Then in particular C = F , as we
only shade edges contained in the ﬁnal tree F . The ﬁrst lemma states a criterion to detect this
situation.

Lemma 1. Let C be a partially shaded tree, corresponding to a vertex of a transportation polytope
TP(u, v). If there is a component without an open node in C, then C is fully shaded.

Proof. It is standard practice to think of a transportation problem as a min-cost ﬂow problem on
a bipartite network. The feasible ﬂows for given margins u, v correspond to the maximum ﬂows
in this network. Thus the diﬀerence of two feasible ﬂows is a circulation, which is well-known to
decompose into a set of cycles with ﬂow through them [13]. Therefore, the diﬀerence yF − yC of
the feasible ﬂows yC , yF of two trees C and F can be decomposed into such a set of cycles. In
particular, for any edge e = {σi, δj} with yF
ij, there is a cycle C in any such decomposition
that increases ﬂow on e.

ij > yC

Now let K be a component in the current tree C with all nodes well-connected and assume C
is not fully shaded. Let V be the node set of the underlying bipartite graph. Then in particular,
V (K) is not connected to V − V (K) by a shaded edge in C (but by an unshaded edge). Similarly,
V (K) and V − V (K) are connected in F by at least one edge e. This edge e cannot exist in
C already: Assume it does. Then e has to be unshaded. Otherwise it would be a shaded edges
incident to a well-connected node in K and thus would be a well-connected edge. There are no
unshaded edges incident to well-connected demand nodes, so e has to be incident to a supply
node in V (K). This contradicts the deﬁnition of a well-connected supply node. Thus e still has
to be inserted and it must be incident to a demand node of the component K.

Recall that in any cycle decomposition of the circulation yF − yC there is a cycle C that
increases ﬂow on e. C connects V (K) and V − V (K) by at least one other edge e′ 6= e. The edge
e′ is unshaded or does not even exist in C. Otherwise it would be well-connected.

Note that any pair of supply node and demand node is connected by an odd number of edges.
Every pair of two demand nodes is connected by an even number of edges. Further, ﬂow on the
edges in the cycle C is alternately increased and decreased. Thus, ﬂow on the edge e′ has to be
increased if it is incident to a supply node and decreased if it is incident to a demand node of
K. But there are no such edges: For the supply nodes of K, all edges connecting to V − V (K)
are edges to delete (with ﬂow to decrease) and for the demand nodes all such edges are edges to
insert (ﬂow to increase), a contradiction. Thus C is fully shaded.
⊓⊔

11

The above statement will result in a termination criterion. The next lemma is a simple but

useful observation.

Lemma 2. Let C be a partially shaded tree, corresponding to a vertex of a transportation polytope
TP(u, v). Assume that in C, there is a supply node satisfying (SIN). Then there is no demand
node only incident to shaded +edges in C. In particular, every well-connected demand node is
incident to a shaded −edge.

Proof. Assume there is a demand node δ only incident to shaded +edges. Then, for any supply
node, one of these shaded +edges is an odd edge. But this is a contradiction to having a supply
node with the (SIN) property in C.
⊓⊔

In Lemma 3 we prove the key aspect for the correctness of our algorithm: The properties
(UNO) and (SIN) and our shading order (ﬁrst −edges, then the unique +edge) imply that no
shaded edge is deleted.

Lemma 3. Let C be a partially shaded tree, corresponding to a vertex of a transportation polytope
TP(u, v), and assume the following four conditions hold:

1. (UNO) holds in the partially shaded current tree C.
2. There are no shaded +edges incident to open supply nodes.
3. We (insert and) shade an edge e incident to a supply node σ satisfying (SIN) in C.
4. If in C there is a −edge incident to σ left to (insert and) shade, then edge e is a −edge. Else,

e is the unique +edge incident to σ.

Then no shaded edge is deleted in this step.

Proof. If we only shade an existing edge, the statement is trivial. Let e = {σ, δ} be the edge we
insert into the tree C. Recall that the margins of TP(u, v) determine the ﬂow on the edges of the
tree C, and thus in particular determine the edge {σ′, δ′} that is deleted in this step. Let C ′ be
the succeeding tree. Now assume {σ′, δ′} was shaded in C. Note that by (SIN) for σ in C, {σ′, δ′}
was a −edge with δ′ well-connected in C. Let K be the component in C that contains both σ′
and δ′. Then E(K) − {σ′, δ′} induces two connected components, the component Kδ′ containing
δ′ and Kσ′ containing σ′.

First observe that the open node of component K (in C) must be contained in Kσ′ . To see
this, assume all nodes in Kσ′ are well-connected. Then each supply node must be incident to a
shaded +edge and by Lemma 2 each demand node is incident to a shaded −edge. Further, all
these edges are contained in Kσ′ . But then Kσ′ has at least |V (Kσ′ )| many edges, a contradiction
to being cycle-free as a subgraph of a tree.

Thus, all nodes in the other connected component Kδ′ are well-connected in C and therefore
also in C ′. This is because by deﬁnition, inserting and shading an edge cannot make a node open
again. If {σ, δ} does not connect to Kδ′ , then Kδ′ forms a component in C ′ and all nodes in this
component are well-connected. Lemma 1 implies C ′ = F , a contradiction to {σ′, δ′} ∈ F \C ′.

Kσ ′

δ ′

δ

Kδ′

−+−

+ +

+−

+ −

+

σ ′

+

σ
−−

Fig. 11. The dotted edge {σ′, δ′} was deleted and the bold dashed edge {σ, δ} was inserted; circles
illustrate Kσ′, Kδ′ and the component with open node σ in C. In this example, the unnamed
left-most supply node is the open node in Kσ′.

12

Therefore, {σ, δ} has to connect to Kδ′, so one of σ or δ is contained in Kδ′ . All supply nodes
in Kδ′ were already well-connected in C, but σ was not. Thus δ belongs to Kδ′. Figure 11 depicts
the situation. Observe that δ is incident to a −edge in C by Lemma 2. Further, recall that there
is at most one −edge incident to each demand node. Therefore, {σ, δ} is a +edge. In particular,
this is the unique +edge incident to σ and thus σ is well-connected in C ′ (note that the shaded
−edge that we deleted was not incident to σ as then F would contain a cycle). Therefore, {σ, δ}
is well-connected in C ′ and its insertion merged the components of σ and δ to a larger component
in C ′. But this component does not have an open node: We already saw that all nodes in δ’s
component Kδ′ are well-connected in C ′. Further σ was the unique open node of its component,
but σ is well-connected now. Again Lemma 1 implies C ′ = F , but we have {σ′, δ′} ∈ F \C ′.

Therefore, when inserting {σ, δ}, we do not delete a shaded edge incident to a well-connected
⊓⊔

demand node. This proves the claim.

Lemma 4 is the ﬁnal statement we need to see the correctness of Algorithm 1. We show that
the termination criterion is correct and we prove that assumptions 1 and 2 from Lemma 3 (and 4)
are indeed satisﬁed when following Algorithm 1 – (UNO) holds in each iteration and Algorithm
2 returns a node satisfying (SIN) in the succeeding tree. The observations from Example 6 are
particularly helpful in the proof.

Lemma 4. Let C be a partially shaded tree, corresponding to a vertex of a transportation polytope
TP(u, v), and assume the following four conditions hold:

1. (UNO) holds in the partially shaded current tree C.
2. There are no shaded +edges incident to open supply nodes.
3. We (insert and) shade an edge e incident to a supply node σ satisfying (SIN) in C.
4. If in C there is a −edge incident to σ left to (insert and) shade, then edge e is a −edge. Else,

e is the unique +edge incident to σ.

Then one of the following holds:

(i) Let δ∗ be the demand node only incident to +edges in F . If δ∗ is well-connected in the
succeeding tree C ′, then C ′ is fully shaded, that is, it equals the ﬁnal tree F and all edges are
shaded.

(ii) Otherwise, there is an open supply node with the (SIN) property in the succeeding tree C ′
and we can ﬁnd such a node by proceeding as in Algorithm 2. In particular, C ′ is not fully
shaded. Further, (UNO) holds in the tree C ′.

Proof. Our proof goes as follows: We will show that if C ′ is not fully shaded, then there is a
supply node satisfying (SIN) in C ′ (see cases 1 and 2). But if there is a supply node with the
(SIN) property, then δ∗ cannot be well-connected in C by Lemma 2. Thus, if δ∗ is well-connected,
then C ′ is fully shaded. This proves (i).

Clearly, if δ∗ (or any other node) is not well-connected, then C ′ cannot be fully shaded.
We show the remaining statements from (ii) in cases 1 and 2. Observe that the selection of a
new supply node with the (SIN) property in C ′ in cases 1 and 2 matches precisely the routine
described in Algorithm 2.

We ﬁrst summarize some fundamental observations. Let e = {σ, δ} be the edge we (insert and)
shade in the tree C, yielding the succeeding tree C ′. Recall that if we perform an actual insertion,
then the margins determine which edge is deleted, and thus they determine the succeeding tree
C ′.

All nodes/edges that were well-connected in C are still well-connected in C ′, as by Lemma
3 no shaded edge is deleted. At most two nodes might become well-connected in this step: The
supply node σ (which is the case if and only if {σ, δ} is a +edge) and the demand node δ if we
only shade an edge, respectively, the node δ′ incident to the edge deleted in case we perform an
insertion.

All shaded edges incident to σ in C are already well-connected by (SIN) for σ in C. In partic-
ular, they all belong to the component with open node σ. Therefore, the only edges that might
become well-connected are {σ, δ} and the shaded edges incident to the demand node δ (if only
shading), respectively, δ′ (if insertion/deletion). If we get new well-connected edges, we join sev-
eral smaller components to a larger component.

13

Case 1 The edge {σ, δ} already exists in C, so we only shade it.

In C, σ and δ are the unique open nodes of their components, because there is the edge {σ, δ}
left to shade at σ and δ is incident to an unshaded edge {σ, δ}. Every supply node σ′ connected
to δ by an unshaded edge or a −edge in C ′ is open in C ′, as σ′ cannot be incident to a shaded
+edge by the (SIN) property for σ in C (see also Figure 12).

First assume δ is open in C ′. This case is depicted in the left-most picture in Figure 12. Then
δ is still incident to an unshaded edge {σ′, δ} and σ′ is open. Further, σ′ satisﬁes (SIN) in C ′.
To see this, note that for all edges not lying on the path connecting σ and σ′ this follows from
(SIN) for σ in C (these edges have the same ’parity’ with respect to both nodes σ and σ′). The
path connecting σ and σ′ consists of exactly two edges of which {σ′, δ} is the only odd edge for
σ′. But this edge is unshaded.
For (UNO), observe that the shading only aﬀects the components if {σ, δ} is a +edge, in which
case σ becomes well-connected. But then we joined the two components with open node σ and
δ, respectively, to a larger component with unique open node δ. Thus (UNO) holds in C ′.

Otherwise, shading the edge {σ, δ} makes δ well-connected. If δ is only incident to shaded +edges
in C ′, then C ′ is fully shaded. The reason is that δ is well-connected, and thus the edge {σ, δ}
also is well-connected. Therefore, we joined the two components with open nodes σ and δ to a
single component in C ′. But this larger component does not have an open node, as both σ and
δ are well-connected in C ′ (recall that σ is incident to the shaded +edge {σ, δ}). Therefore, we
reached F with all edges shaded by Lemma 1.

Thus, if C ′ is not fully shaded, then δ is incident to its unique −edge {σ′′, δ} in C ′ and it is
shaded (note that σ′′ = σ is possible); see center and right-hand side of Figure 12. Recall that
σ′′ is open in C ′ and observe that it satisﬁes (SIN) in C ′. This is because the odd edge {σ′′, δ}
is a −edge incident to a well-connected demand node. For the remaining odd edges the property
follows from (SIN) for σ in C.

For (UNO), observe that {σ, δ} and {σ′′, δ} became well-connected. σ, σ′′, and δ were open in
C, but δ is well-connected in C ′. Therefore, we merged the components with open nodes σ, σ′′,
and δ, respectively, to a larger component. Further, σ′′ is the unique open node of this component.
For σ = σ′′, this is obvious. Otherwise σ is well-connected in C ′, as {σ, δ} has to be a +edge.
This is because there is at most one −edge incident to every demand node, which is {σ′′, δ} in
this situation. Therefore, (UNO) holds in C ′. This concludes case 1.

δ

+

δ

+ −

δ

+−

σ

− −

σ′

σ

− −

σ′′

σ′′ = σ

− −

Fig. 12. Possible conﬁgurations when shading {σ, δ} (from left to right): δ open, δ well-connected
and σ′′ 6= σ, δ well-connected and σ′′ = σ. The circles illustrate the components in C.

14

Case 2 We inserted and shaded {σ, δ} and deleted an unshaded edge incident to δ′ (possibly with
δ′ = δ).

In C, σ and δ′ are the unique open nodes of their components, because there is the edge {σ, δ}
left to insert at σ and δ′ is incident to an unshaded edge. Observe that every supply node σ′
connected to δ′ in C ′ by an unshaded edge or a −edge is open in C ′. To see this, recall that a
supply node is open if and only if it is not incident to a shaded +edge. Thus we have to show
that there is no shaded +edge incident to σ′. {σ′, δ′} is no shaded +edge by assumption. Any
other edge incident to σ′ in C is an odd edge with respect to σ and thus cannot be a shaded
+edge by (SIN) for σ in C. Thus σ′ is open in C and, if σ′ 6= σ, σ′ is also open in C ′.
For the case σ′ = σ, observe that {σ, δ′} /∈ C ∩ C ′. To see this, assume {σ, δ′} ∈ C ∩ C ′. Then this
edge is contained in the cycle that describes the step from C to C ′ and it is neither the inserted
edge nor the deleted edge. We delete (decrease) another edge incident to δ′, so {σ, δ′} must be
increased in this step. But the increased edge incident to σ is the edge we insert, a contradiction.
Thus, if {σ, δ′} ∈ C ′, then {σ, δ′} has to be the edge we inserted. So in particular this edge is
shaded. Further, if it is a shaded −edge, then σ is open by our shading order (by condition 4:
ﬁrst −edges, then the unique +edge). Figure 13 depicts the situations that may arise in case 2.

First assume δ′ is open in C ′. Then δ′ is still incident to an unshaded edge {σ′, δ′} and σ′ is
open by the above argument. Further, σ′ satisﬁes (SIN) in C ′: The odd edge {σ′, δ′} is unshaded.
The inserted edge {σ, δ} is even for σ′. For all remaining edges, it follows from (SIN) for σ in C
(note that after inserting {σ, δ} and deleting {σ′, δ′}, odd (respectively even) edges for σ′ in C ′
are odd (respectively even) with respect to σ in C; see also Figure 13).

As δ′ stays open in C ′, the components are aﬀected only if the inserted edge {σ, δ} is well-
connected in C ′. If {σ, δ} is a −edge, then σ is still open in C ′. In case δ = δ′, δ is open by
assumption. If δ 6= δ′, then δ is open in C ′, as δ is incident to an unshaded edge in C by
Lemma 2 and as δ 6= δ′, δ is still incident to this unshaded edge in C ′. Thus, in both cases, the
components are not aﬀected if {σ, δ} is a −edge. If {σ, δ} is a +edge, the step from C to C ′ joins
the components of σ and δ to a larger component whose unique open node is the one from δ’s
component. In particular, (UNO) holds in C ′.

Now assume that the deletion of the edge incident to δ′ makes δ′ well-connected. If δ′ is only
incident to shaded +edges in C ′, then C ′ is fully shaded: Unless we inserted the edge {σ, δ′}
and it is a +edge, all shaded +edges incident to δ′ in C ′ are already well-connected in C. Thus
the component with open node δ′ in C does not change, but it does not have an open node in
C ′. If we inserted the +edge {σ, δ′}, then we joined the components with open nodes σ and δ′,
respectively, to a larger component. As σ and δ′ are well-connected in C ′, this component in C ′
does not have an open node. In either case, we reached F with all edges shaded by Lemma 1.

Thus, if δ′ is well-connected in C ′ and C ′ is not fully shaded, then δ′ is incident to its unique
−edge {σ′′, δ′} in C ′ and the edge is shaded (note that σ′′ = σ is possible). Recall that σ′′ is
open in C ′ and observe that it satisﬁes (SIN). This is because the odd edge {σ′′, δ′} is a −edge
incident to a well-connected demand node. For all other odd edges the property follows just like
for σ′ in the case where δ′ was open.

δ′

σ

σ.

σ.

δ

Fig. 13. Insertion of {σ, δ} deletes the dotted edge incident to δ′ (wavy: odd edges for σ in C).
The two σ. may refer to σ′ or σ′′.

15

For (UNO), observe that δ′ and the incident −edge {δ′, σ′′} became well-connected in this step.
Therefore, we joined the components with open nodes δ′ and σ′′, respectively, to a component
with open node σ′′. As before, the components containing σ and δ, respectively, are joined in case
{σ, δ} is a +edge. Note that δ = δ′ is possible; then σ′′ is the open node of the whole component.
This concludes case 2.
⊓⊔

Combining all our results, we obtain

Proof of Theorem 1. We have to show that for any two vertices of a non-degenerate transportation
polytope TP(u, v), Algorithm 1 ﬁnds a walk on the skeleton of TP(u, v) of length at most M +
N − 1 − µ connecting them, where µ is the number of critical pairs of TP(u, v).

First, recall the prerequisites used for both Lemma 3 and 4:

1. (UNO) holds in C.
2. There are no shaded +edges incident to open supply nodes.
3. σ satisﬁes (SIN) in C.

We refer to these prerequisites as conditions 1 to 3.

Algorithm 1 starts with an original tree O in which all edges are unshaded. (UNO) is satisﬁed
as every node forms its own component with exactly one open node (condition 1). As there are no
shaded edges, condition 2 is satisﬁed trivially. Further, all supply nodes satisfy (SIN) (condition
3).

Thus we may assume that we are at a partially shaded tree C and have a supply node σ such
that all of the above conditions are satisﬁed. Clearly, Algorithm 1 chooses an edge e to (insert
and) shade as follows.

4. If in C there is a −edge incident to σ left to (insert and) shade, then edge e is a −edge. Else,

e is the unique +edge incident to σ.

Then, by Lemma 3, this step does not delete a shaded edge. Therefore, the succeeding tree C ′
satisﬁes condition 2. If δ∗ is well-connected in C ′, then we reached the ﬁnal tree F with all edges
shaded by Lemma 4 (i). Thus, our termination criterion as stated in Algorithm 1 is correct.
Otherwise, by Lemma 4 (ii), the succeeding tree C ′ satisﬁes (UNO) (condition 1) and contains a
supply node satisfying (SIN) (condition 3). Such a supply node σ′ is found by Algorithm 2. We
continue with another iteration, with C ′ and σ′ satisfying conditions 1 to 3.

It remains to show that the sequence produced by Algorithm 1 has length at most M + N −
1 − µ. As we shade every edge we insert and we never delete a shaded edge, every edge is inserted
at most once. We only insert edges contained in F and there are exactly M + N − 1 such edges.
However, the edges corresponding to the µ critical pairs exist in every tree. Therefore, Algorithm
1 does not perform an insertion when shading them. Thus, we have at most M + N − 1 − µ steps
along the skeleton of the transportation polytope. This completes the proof of Theorem 1. The
⊓⊔
Hirsch Conjecture is true for all transportation polytopes.

Proof of Corollary 1. First note that a face of a transportation polytope is described by the set
of edges that do not exist in any support graph of its vertices. Thus the walk constructed by
Algorithm 1 stays in the face (of minimum dimension) containing the two vertices corresponding
to the trees O and F . Further, observe that when restricting to a face, the dimension of the face
and its number of facets both are reduced by the same number k, which is the number of edges
that are never used.
⊓⊔

Acknowledgments

The ﬁrst author gratefully acknowledges support from the Alexander-von-Humboldt Founda-
tion. The second author is grateful for the support received through an NSA grant. The second
and third author gratefully acknowledge the support from the Hausdorﬀ Research Institute for
Mathematics (HIM) in Bonn.

16

References

1. M. L. Balinski. The Hirsch Conjecture for Dual Transportation Polyhedra. Mathematics of Opera-

tions Research, 9(4):629–633, 1984.

2. M. L. Balinski and A. Russakoﬀ. On the Assignment Polytope. SIAM Review, 16:516–525, 1974.
3. N. Bonifas, M. Di Summa, F. Eisenbrand, N. H¨ahnle, and M. Niemeier. On Sub-determinants and

the Diameter of Polyhedra. Discrete Computational Geometry, 52:102–115, 2014.

4. S. Borgwardt. On the diameter of partition polytopes and vertex-disjoint cycle cover. Mathematical

Programming, Series A, 141:1–20, 2013.

5. S. Borgwardt, J. A. De Loera, E. Finhold, and J. Miller. The hierarchy of circuit diameters and trans-
portation polytopes. Discrete Applied Mathematics, http://dx.doi. org/10.1016/j.dam.2015.10.017,
2015.

6. G. Brightwell, J. Heuvel, and L. Stougie. A Linear Bound on the Diameter of the Transportation

Polytope. Combinatorica, 26:133–139, 2006.

7. G. Dantzig. Linear Programming and Extensions. Princeton Univ. Press, 1963.
8. J. A. De Loera. New Insights into the Complexity and Geometry of Linear Optimization. Optima,

newsletter of the Mathematical Programming Society, 87:1–13, 2011.

9. J. A. De Loera and E. D. Kim. Combinatorics and geometry of transportation polytopes: An update,
in Discrete Geometry and Algebraic Combinatorics, volume 625 of Contemporary Mathematics, pages
37–76. American Math. Society, 2014.

10. J. A. De Loera, E. D. Kim, S. Onn, and F. Santos. Graphs of transportation polytopes. Journal of

Combinatorial Theory - Series A, 116:1306–1325, 2009.

11. A. Del Pia and C. Michini. On the Diameter of Lattice Polytopes. Discrete & Computational

Geometry, to appear, http://dx.doi.org/10.1007/s00454-016-9762-x, 2016.

12. A. Deza, G. Manoussakis, and S. Onn. Euler Polytopes and Convex Matroid Optimization. eprint

arXiv:1512.08018, 2015.

13. L. R. Ford and D. R. Fulkerson. Flows in Networks. Princeton Univ. Press, 1962.
14. K. Fritzsche and F. B. Holt. More polytopes meeting the conjectured Hirsch bound. Discrete

Mathematics, 205 (1-3):77–84, 1999.

15. F. L. Hitchcock. The distribution of a product from several sources to numerous localities. Journal

of Mathematics and Physics, 20:224–230, 1941.

16. F. B. Holt and V. Klee. Many Polytopes Meeting the Conjectured Hirsch Bound. Discrete &

Computational Geometry, 20:1–17, 1998.

17. E. D. Kim and F. Santos. An Update on the Hirsch Conjecture. Jahresbericht der Deutschen

Mathematiker-Vereinigung, 112(2):73–98, 2010.

18. V. Klee and D. W. Walkup. The d-step conjecture for polyhedra of dimension d < 6. Acta Mathe-

matica, 117:53–78, 1967.

19. V. Klee and C. Witzgall. Facets and Vertices of Transportation Polyhedra. Mathematics of the

Decision Science, Part 1. Lectures in Applied Mathematics, 11:257–282, 1968.

20. D. Naddef. The Hirsch conjecture is true for (0, 1)-polytopes. Mathematical Programming, 45:109–

110, 1989.

21. F. Santos. A counterexample to the Hirsch Conjecture. Annals of Mathematics, 176:383–412, 2012.
22. A. Schrijver. Combinatorial Optimization - Polyhedra and Eﬃciency. Springer, 2003.
23. V. A. Yemelichev, M. M. Koval¨ev, and M. K. Kravtsov. Polytopes, Graphs and Optimisation. Cam-

bridge University Press, 1984.

17

