6
1
0
2

 
r
a

 

M
9
2

 
 
]
h
p
-
c
o
s
.
s
c
i
s
y
h
p
[
 
 

2
v
1
8
7
5
0

.

3
0
6
1
:
v
i
X
r
a

Identifying optimal targets of network attack by belief propagation

Salomon Mugisha1,2 and Hai-Jun Zhou1,2∗

1State Key Laboratory of Theoretical Physics, Institute of Theoretical Physics,

Chinese Academy of Sciences, Zhong-Guan-Cun East Road 55, Beijing 100190, China

2School of Physical Sciences, University of Chinese Academy of Sciences, Beijing 100049, China

(Dated: March 18, 2016)

For a network formed by nodes and undirected links between pairs of nodes, the network optimal
attack problem aims at deleting a minimum number of target nodes to break the network down into
many small components. This problem is intrinsically related to the feedback vertex set problem that
was successfully tackled by spin glass theory and an associated belief propagation-guided decimation
(BPD) algorithm [H.-J. Zhou, Eur. Phys. J. B 86 (2013) 455]. In the present work we apply a slightly
adjusted version of BPD (with approximately linear time complexity) to the network optimal attack
problem, and demonstrate that it has much better performance than a recently proposed Collective
Information algorithm [F. Morone and H. A. Makse, Nature 524 (2015) 63–68] for diﬀerent types of
random networks and real-world network instances. The BPD-guided attack scheme often induces
an abrupt collapse of the whole network, which may make it very diﬃcult to defend.
Key words: network targeted attack; optimal inﬂuence; feedback vertex set; collapse; spin glass

I.

INTRODUCTION

Consider a network or graph G formed by N nodes and
M undirected links between pairs of these nodes, how to
delete a minimum number of nodes (the optimal targets
of attack) to break the network down into many discon-
nected small components? This optimization problem is
one of the fundamental structural problems in network
science [1], and it has very wide practical applications,
especially in protection of network structure [2–4] and
in surveillance and control of various network dynami-
cal processes such as the transmission of infective disease
[5–7]. Besides their structural importance, the optimal
target nodes of network attack also play signiﬁcant roles
in network information diﬀusion. Indeed many of these
nodes are inﬂuential spreaders of information and are the
key objects in viral marketing and network advertisement
[8–10].

The breakdown of a network’s giant connected compo-
nent is the collective eﬀect caused by a set S of nodes.
There are extremely many candidate solutions for the
network attack problem, and minimizing the size of such
a set S is an intrinsically diﬃcult combinatorial optimiza-
tion issue. This problem belongs to the NP-hard class of
computational complexity, no one expects it to be exactly
solvable by any polynomial algorithm. So far the network
optimal attack problem has mainly been approached by
heuristic methods which select target nodes based on lo-
cal metrics such as the node degree (number of attached
links) [2–4] and the node eigenvector centrality [11, 12].
For sparse random networks it is well known that
the typical length of loops diverges with the number
N of nodes in a linear way, and short loops of length
L (cid:28) ln(N ) are very rare [13–15]. In such networks the
small connected components are mostly trees (no loop

∗Corresponding author. Email: zhouhj@itp.ac.cn

inside), while each giant component includes a ﬁnite frac-
tion of all the nodes and an exponential number of long
loops. If these long loops are all cut the giant component
will again break into a set of small tree components. For
random network ensembles, therefore, the optimal attack
problem is essentially equivalent to another celebrated
global optimization, namely the minimum feedback ver-
tex set problem [16]. A feedback vertex set (FVS) for
a network G is a set of nodes which, if deleted, would
break all the loops in the network and leave behind a
forest (that is, a collection of tree components). In other
words, a FVS is a node set that intersects with every loop
of the network, and a minimum FVS is just a node set of
smallest size among all the feedback vertex sets. Because
small components of spare random networks are mostly
trees, a minimum FVS is essentially a minimum set of
target nodes for the network attack problem.

Although the minimum FVS problem is also NP-hard
and seems to be even harder than the network optimal
attack problem (because the long loops are global con-
straints), a very convenient mapping of this optimization
problem to a locally constrained spin glass model was
achieved in 2013 [17]. By applying the replica-symmetric
mean ﬁeld theory of statistical mechanics to this spin
glass model, the minimum FVS sizes and hence also the
minimum numbers of targeted attack nodes are quantita-
tively estimated for random Erd¨os-Reny´ı (ER) and ran-
dom regular (RR) network ensembles [17], which are in
excellent agreement with rigorously derived lower bounds
[18] and simulated-annealing results [19, 20]. Inspired by
the spin glass mean ﬁeld theory, an eﬃcient minimum-
FVS construction algorithm, belief propagation-guided
decimation (BPD), was also introduced in [17], which is
capable of constructing close-to-minimum feedback ver-
tex sets for single random network instances and also for
correlated networks. To solve the optimal attack problem
for a network containing a lot of short loops, the BPD
algorithm can be adjusted slightly by stopping the cut
of loops within each small connected component. This

modiﬁed BPD algorithm can produce a nearly-minimum
set of target nodes to break the giant components.

In 2015, Morone and Makse re-visited the network
optimal attack problem and introduced an interest-
ing heuristic Collective Information (CI) algorithm [21].
(These authors called the network optimal attack prob-
lem as the optimal inﬂuence problem to emphasize its
relevance to network information spreading, and called
the optimal targets of attack as the optimal inﬂuencers;
in the present paper we stick to the more conventional
names.) In the CI algorithm, each node i is assigned an
impact value which counts the number of out-going links
at the surface of a ‘ball’ of radius (cid:96) centered around i; and
then the highest-impact nodes are sequentially deleted
from the network (and the impact values of the remain-
ing nodes are updated) until the largest component of
the remaining network becomes suﬃciently small. This
CI algorithm was tested on random networks and a set of
real-world networks and it was suggested that it beats ex-
isting heuristic algorithms [21]. Morone and Makse also
compared the results obtained by CI and BPD on a sin-
gle random scale-free network and they found “evidence
of the best performance of CI” [21].

The CI algorithm is local in nature, it considers only
the local structure within distance (cid:96) to each focal node to
build the node importance metric. The suggestion that
such a local-metric algorithm is capable of beating the
BPD algorithm, a distributed message-passing algorithm
taking into account the global loop structure of the net-
work, is indeed quite surprising. Given the importance of
the optimal attack problem in network science, and con-
sidering that only a single network instance was checked
in [21], we feel it is our duty to perform a systematic
comparative study on the CI and the BPD algorithm. In
the present paper, after brieﬂy reviewing the most essen-
tial building blocks of the CI and the BPD algorithm,
we describe simulation results obtained on three random
network ensembles (random ER and RR networks, whose
structures are homogeneous; and random scale-free net-
works, whose structures are heterogeneous), and a set of
real-world network instances (whose structures are het-
erogeneous and highly correlated, and there are an abun-
dant number of short loops inside).

Our extensive simulation results convincingly demon-
strate that the BPD algorithm oﬀers qualitatively supe-
rior solutions to the network optimal attack problem for
random and real-world networks. Our data reveal that,
both for random and for real-world networks, the solu-
tions constructed by the CI algorithm are far from being
optimal. For example, to break an internet network in-
stance (IntNet2 of Table I, with N ≈ 1.7 × 106 nodes)
following the recipe oﬀered by CI one would have to at-
tack ≈ 1.4 × 105 nodes simultaneously, but actually the
job can be ﬁnished by attacking only ≈ 7.3× 104 nodes if
instead the recommendations of the BPD algorithm are
adopted. For sparse networks the running time of the
BPD algorithm scales almost linearly with the number
N of nodes in the network, so it is ideally suitable for

2

treating network instances of extreme sizes.

Let us close this introductory section by pointing out
a potential challenge that network defense practitioners
might have to consider in the near future. Imagine that
certain group of antisocial agents (e.g., terrorists) plans
to carry out an intentional distributed network attack by
destroying a small set of target nodes speciﬁed by the
BPD algorithm or other loop-focused global algorithms.
Under such a BPD-guided distributed attack, our exam-
ple results of Fig. 1 (solid line) and Fig. 2 suggest that the
network remains to be globally intact and connected be-
fore it undergoes a sudden and abrupt collapse. For the
defense side, such a ‘no serious warning’ situation might
make it very diﬃcult to distinguish between intentional
attacks and random localized failures and to carry out
timely reactions. We leave this issue of theoretical and
practical importance to further serious investigations.

II. A BRIEF REVIEW ON CI AND BPD

As we already introduced, the goal of the network op-
timal attack problem is to construct a minimum node
set S for an input network G so that the sub-network
induced by all the nodes not in S has no connected com-
ponent of relative size exceeding certain small threshold θ
(e.g., θ = 0.01 or even smaller). The CI algorithm of [21]
and the BPD algorithm of [17] are two heuristic solvers
for this NP-hard optimization problem. For pedagogical
reasons we summarize in this section the main algorith-
mic steps of these two solvers. We do not delve into the
underlying statistical physical ideas and concepts but en-
courage the reader to consult the original references.

Starting from the input network G with N nodes and
M links, both the CI and the BPD algorithm kick nodes
out of the network in a sequential manner. Let us denote
by G(t) the remaining network at time t of the deletion
process, and denote by di(t) the degree (number of neigh-
boring nodes) of a node i in G(t). At the initial time t = 0
all the nodes are present so G(0) is identical to G, and
di(0) = di with di being the degree of node i in G.

A. The Collective Inﬂuence algorithm

At each time point t the collective inﬂuence strength,

CI(cid:96)(i; t), of a node i ∈ G(t) is computed as

CI(cid:96)(i; t) =(cid:2)di(t) − 1(cid:3) (cid:88)

(cid:2)dj(t) − 1(cid:3) ,

(1)

j∈∂Ball(i,(cid:96); t)

where ∂Ball(i, (cid:96); t) denotes the set formed by all the
nodes of G(t) that are at distance (cid:96) to node i [21]. The
integer (cid:96) is an adjustable parameter of the CI algorithm.
The CI strength gives a heuristic measure of a node’s in-
formation spreading power. It is a product of two terms.

The ﬁrst term,(cid:0)di(t) − 1(cid:1), is node i’s direct capacity of

information transmission; the second term sums over the

3

FIG. 2: The relative size g(t) of the largest connected compo-
nent at algorithmic time t of the BPD-guided attack process,
for six real-world networks of diﬀerent sizes N (see Table I):
Citation (pluses), P2P (crosses), Friend (squares), Authors
(circles), WebPage (triangles), Grid (diamonds). At each time
interval δt = 1/N of the targeted attack process, a node cho-
sen by the BPD algorithm (with x = 12) is deleted along with
all the attached links.

formula for this probability is

(cid:104)
1 + (cid:80)

k∈∂i(t)

1
(1−q0
k→i)
k→i+qk
q0
k→i

(cid:105) (cid:81)

j∈∂i(t)

j→i + qj
[q0

j→i]

,

q0
i =

1 + ex

(2)
where x is an adjustable re-weighting parameter, and
∂i(t) denotes node i’s set of neighboring nodes at time
t. The quantity q0
j→i(t) in Eq. (2) is the probability that
the neighboring node j is suitable to be deleted if node
i is absent from the network G(t), while qj
j→i(t) is the
probability that this node j is suitable to be the root
node of a tree component in the absence of node i [17].
These two auxiliary probability values are estimated self-
consistently through the following set of belief propaga-
tion (BP) equations:

q0
i→j =

,

zi→j(t)

1

ex(cid:81)

(cid:2)q0

(cid:3)

(3a)

k∈∂i(t)\j

k→i + qk

k→i

qi
i→j =

(3b)
where ∂i(t)\j is the node subset obtained by removing
node j from set ∂i(t), and zi→j(t) is a normalization con-
stant determined by

zi→j(t)

,

zi→j(t) = 1 + ex (cid:89)
×(cid:104)

1 +

k∈∂i(t)\j

(cid:2)q0
(cid:88)

k→i + qk

k→i
(1 − q0
q0
l→i + ql

l→i)
l→i

(cid:105)

.

(4)

l∈∂i(t)\j

(cid:3)

At each time step t, we ﬁrst iterate the BP equation
(3) on the network G(t) a number of rounds, and then

FIG. 1: The relative size g(t) of the largest connected com-
ponent as a function of algorithmic time t, for an ER net-
work with N = 105 nodes and mean node degree c = 3. At
each time interval δt = 1/N of the targeted attack process,
a node chosen by the CI algorithm or by the BPD algorithm
is deleted along with all the attached links. The three sets of
simulation data obtained by the CI algorithm correspond to
ball radius l = 2 (dotted line), l = 3 (dashed line), and l = 4
(long-dashed line), respectively. The BPD results (solid line)
are obtained at ﬁxed re-weighting parameter x = 12.

information transmission capacity (cid:0)dj(t) − 1(cid:1) of all the

nodes j at a distance (cid:96), it can be understood as node i’s
capacity of information broadcasting.

After the CI strengths of all the nodes in network G(t)
are updated using Eq. (1), a node which has the highest
CI strength is deleted along with all its attached links;
then the time increases to t ← t+ 1
N , and the CI strength
of the remaining nodes are again updated. This iteration
process continues until the largest connected component
of the remaining network becomes very small.

As an example we plot in Fig. 1 the relative size g(t)
of the largest connected component of an ER network
with mean node degree c = 3. Initially the network has a
giant component of relative size g(0) ≈ 0.9412; this giant
component then shrinks with time t gradually and ﬁnally
disappears when about 0.16N nodes are removed.

The results of the CI algorithm are not sensitive to
the particular choice of the ball radius (cid:96) (see Fig. 1 and
discussions in [21]). For simplicity we ﬁx (cid:96) = 4 in the
remaining part of this paper, except for the two smallest
networks of Table I (for which (cid:96) = 2 is used).

B. Belief propagation-guided decimation

The BPD algorithm is rooted in the spin glass model
for the feedback vertex set problem [17]. At each time
point t of the iteration process, the algorithm estimates
the probability q0
i (t) that every node i of the remain-
ing network G(t) is suitable to be deleted. The explicit

00.20.40.60.81.000.040.080.120.160.2g(t)tBPDCI l=4CI l=3CI l=200.20.40.60.81.000.10.20.30.4g(t)t4

C. Gradual decrease versus abrupt drop

Figure 1 clearly shows that, compared to the CI al-
gorithm, the BPD algorithm constructes a much smaller
target node set for the same ER network instance. This
superiority holds true for all the networks we examined
(see next section). We also notice from Fig. 1 that, dur-
ing the CI-guided attack process the size of the giant
connected component decreases gradually and smoothly.
On the other hand, if the attacked nodes are chosen ac-
cording to the BPD algorithm, the giant component ini-
tially shrinks slowly and almost linearly and the decrease
in size is roughly equal to the increase in the number of
deleted nodes; but as the giant component’s relative size
reduces to ≈ 0.76 after a fraction ≈ 0.133 of the nodes
are deleted, the network is in a very fragile state and the
giant component suddenly disappears with the deletion
of an additional tiny fraction of nodes.

Such an abrupt collapse phenomenon, which resem-
bles the phenomenon of explosive percolation [22–24],
is also observed in the BPD-guided attack processes on
other random network ensembles and real-world networks
(Fig. 2). It may be a generic feature of the BPD-guided
network attack.
Indeed the BPD algorithm is not de-
signed to break a network down into small pieces but is
designed to cut loops in the most eﬃcient way. This loop-
cutting algorithmic design principle may explain why the
collapse of a giant connected component occurs at the lat-
est stage of the attack process and is abrupt. We expect
that during the BPD-guided attack process, the most
signiﬁcant changes in the network is that the number
of loops in the giant components decreases quickly. A
highly connected node that bridges two or more parts
of the network will only have a low probability of being
deleted if it does not contribute much to the loops of the
network [17].

III. COMPARATIVE RESULTS

We now apply the CI and the BPD algorithm on a
large number of network instances. We adopt the same
criterion used in [21], namely that after the deletion of a
set S of nodes the largest connected component should
have relative size ≤ θ = 0.01.

Following [21], when applying the CI algorithm to a
network G, we ﬁrst delete a draft set of nodes from the
network until the largest component of the remaining net-
work contains no more than θN nodes. We then reﬁne
this set by sequentially moving some nodes back to the
network. Each of these displaced nodes has the property
that its addition to the network will not cause an in-
crease in the size of the largest network component and
will only cause the least increase in the size of a small
component. The ﬁnal set S of deleted nodes after this re-
ﬁnement process is regarded as a solution to the optimal
network attack problem. This same reﬁnement process
is also adopted by the BPD algorithm. We ﬁrst apply

FIG. 3: The relationship between the running time t of the
BPD algorithm and the number N of nodes in an ER network
of mean degree c = 3. All the simulations of this ﬁgure are
carried out on a relatively old desktop computer (Intel-6300,
1.86 GHz, 2 GB memory). The dashed line is the ﬁtting curve
t = aN ln(N ) with ﬁtting parameter a = 2.93 × 10−5 (time
unit is second).

use Eq. (2) to estimate the probability of choosing each
node i ∈ G(t) for deletion. The node with the highest
probability of being suitable for deletion is deleted from
network G(t) along with all its attached links. The algo-
rithmic time then increases to t ← t + 1
N and the next
BPD iteration begins. This node deletion process stops
after all the loops in the network have been destroyed
[17]. Then we check the size of each tree component in
the remaining network. If a tree component is too large
(which occurs only rarely), we delete an appropriately
chosen node from this tree to achieve a maximal decrease
in the tree size.

As an illustration of the BPD iteration process, we
record in Fig. 1 (solid line) the relative size g(t) of the
largest connected component of an ER random network
at each algorithmic time t. At t ≈ 0.137 the BPD-guided
attack stops, resulting in a ﬁnal target node set of size
≈ 0.137N . Qualitatively similar plots are obtained for
real-world network instances (see Fig. 2).

The BPD algorithm is very fast.

It ﬁnishes in few
minutes when applied on the large example network of
Fig. 1 and most of the network instances of Table I. In
terms of scaling, if the link number M of the network is
of the same order as the node number N (i.e., the net-
work is sparse), then the running time of the BPD algo-
rithm is proportional to N ln N (see Fig. 3 for a concrete
demonstration for the case of ER networks). Therefore
this algorithm is applicable to extremely huge network
instances. The original BPD code for the minimum feed-
back vertex set problem and its slightly adjusted version
for the network optimal attack problem are both avail-
able at power.itp.ac.cn/∼zhouhj/codes.html.

10-1100101102103104210212214216218220222224time (s)N5

FIG. 4: Fraction ρ of removed nodes for Erd¨os-R´enyi ran-
dom networks of mean degree c (A) and regular random net-
works of degree K (B). Each CI (diamond) or BPD (circle)
data point is the averaged result over 48 network instances
(size N = 105); the standard deviation is of order 10−4 and
is therefore not shown. The cross symbols are the predic-
tions of the replica-symmetric (RS) mean ﬁeld theory on the
minimum relative size of the target node sets [17]. The plus
symbols of (B) are the mathematical lower bound (LB) on the
minimum relative size of the target node sets [18]. The re-
weighting parameter of the BPD algorithm is ﬁxed to x = 12
for ER networks and x = 7 for RR networks; the ball radius
parameter of the CI algorithm is ﬁxed to (cid:96) = 4.

BPD to construct a FVS for the input network, then a
few additional nodes are deleted break very large trees.
Finally some of the nodes in the deleted node set S are
added back to the network as long as they cause the least
perturbation to the largest connected component and its
increased relative size is still below θ. This reﬁnement
process recovers some of the deleted short loops.

A. ER and RR network ensembles

We ﬁrst consider Erd¨os-Reny´ı random networks and
regular random networks. An ER network of N vertices

FIG. 5: Fraction ρ of removed nodes for scale-free random
networks of mean degree c and degree decay exponent γ = 3.0
(A) and γ = 3.5 (B). Each CI (diamond) or BPD (circle)
data point is the averaged result over 48 network instances
(size N = 105) generated through the static method [25]; the
standard deviation (not shown) of each data point is of order
10−4. The re-weighting parameter of the BPD algorithm is
ﬁxed to x = 12; the ball radius parameter of the CI algorithm
is ﬁxed to (cid:96) = 4.

and M = (c/2)N links is generated by ﬁrst selecting M
diﬀerent node pairs uniformly at random from the whole
set of N (N − 1)/2 candidate pairs and then add a link
between the chosen two nodes. Each node in the network
has c attached links on average. A RR network is more
regular in the sense that each node has exactly the same
number K of nearest neighbors; it is generated by ﬁrst
attaching to each node K half-links and then randomly
connecting two half-links into a full link (excluding self-
links and multiple-links).

The target node set S for breaking down a random
network contains an extensive number ρN of nodes. We
ﬁnd that the BPD algorithm obtains qualitatively better
solutions than the CI algorithm, in the sense that ρBP D
is much smaller than ρCI (Fig. 4). For example, the
CI-guided attack scheme would need to delete a fraction
ρCI ≈ 0.52 of all the nodes to break down an ER network

0.10.20.30.40.50.624681012ρcA    (ER)CIBPDRS0.20.30.40.50.624681012ρKB    (RR)CIBPDRSLB0.10.20.30.44681012ρcA    (SF γ=3.0)CIBPD0.10.20.30.40.54681012ρcB    (SF γ=3.5)CIBPDof mean degree c = 10, while the BPD-guided scheme
only needs to delete a smaller fraction ρBP D ≈ 0.48. The
diﬀerence in performance between CI and BPD is even
more pronounced on RR networks (Fig. 4B).

Indeed there is not much room to further improve over
the BPD algorithm. As we show in Fig. 4 the value
of ρBP D almost overlaps with the predicted minimum
value by the replica-symmetric mean ﬁeld (which is non-
rigorously believed to be a lower bound to the true min-
imum value). For the RR network ensemble, the value
of ρBP D is also very close to the rigorously known lower
bound for the minimum value [18], while the empirical
value ρCI obtained by the CI algorithm is far beyond
this mathematical bound (Fig. 4B).

B. Scale-free random network ensembles

signed a ﬁtness value fi = i−ξ/(cid:80)N

We then examine random scale-free (SF) networks.
The static method [25] is followed to generate a single
SF network instance. Each node i ∈ {1, 2, . . . , N} is as-
j=1 j−ξ with 0 ≤ ξ < 1
being a ﬁxed parameter. A total number of M = (c/2)N
links are then sequentially added to the network: ﬁrst a
pair of nodes (i, j) is chosen from the network with prob-
ability fifj and then a link is added between i and j if
it does not result in a self-link or a multiple-link. The
resulting network has a power-law degree distribution, so
the probability of a randomly chosen node to have d (cid:29) 1
attached links is proportional to d−γ with the decay ex-
ponent being γ = 1 + 1/ξ [25]. There are many highly
connected (hub) nodes in a SF network, the degrees of
which greatly exceed the mean node degree c.

The BPD-guided attack scheme is again qualitatively
more eﬃcient than the CI-guided attack scheme (Fig. 5).
For example, the BPD algorithm only needs to delete a
fraction ρBP D ≈ 0.338 of all the nodes to break down a
SF network with mean degree c = 10 and decay exponent
λ = 3.0, while the CI algorithm would need to delete a
larger fraction ρCI ≈ 0.366 of the nodes. At the same
mean node degree c, the gap between ρCI and ρBP D
seems to enlarge slowly with the power-law exponent γ.
Since there exist many hub nodes, one would expect
that the optimal attack problem is easier to solve on SF
random networks than on homogeneous network. Seeing
that the BPD algorithm performs perfectly for ER and
RR random networks, we believe the solutions obtained
on SF networks are also very close to be minimum tar-
geted attack sets. Further computer simulations [19, 20]
and replica-symmetric mean ﬁeld computations [17] need
to be carried out to conﬁrm this conjecture.

C. Real World Network

Finally we compare CI and BPD on real-world network
instances, which are usually not completely random nor

6

TABLE I: Comparative results of the CI and the BPD algo-
rithm on a set of real-world network instances. N and M are
the number of nodes and links of each network, respectively.
The targeted attack set (TAS) sizes obtained by CI and BPD
are listed in the 4th and 5th column, and the feedback vertex
set (FVS) sizes obtained by these algorithms are listed in the
6th and 7th column. The BPD algorithm is run with ﬁxed
re-weighting parameter x = 12, and the ball radius parameter
of CI is ﬁxed to (cid:96) = 4 except for the RoadEU and the PPI
network, for which (cid:96) = 2.

Network

N

M

1417
6646
6594
12572
93439

TAS
CI BPD
152
209
350
424
476
320
161
198
3588 2583

FVS
CI BPD
91
107
RoadEU
362
391
PPI
663
512
Grid
215
248
IntNet1
9429
8317
Authors
420877 14518 13454 16470 15390
Citation
147892 10726 9292
9285
P2P
950327 32340 26696 48425 38831
Friend
Email
1186
364481 21465 1064 20801
WebPage 875713 4322051 106750 50878 257047 208641
RoadTX 1379917 1921660 133763 20676 319128 239885
IntNet2
1696415 11095298 144160 73229 318447 228720

1177
2361
4941
6474
23133
34546
62586
196591
265214

9710

completely regular but have rich local and global struc-
tures (such as communities and hierarchical levels). Ta-
ble I lists the twelve network instances considered in this
work. There are ﬁve infrastructure networks: the Eu-
ropean express road network (RoadEU [26]), the road
network of Texas (RoadTX [27]), the power grid of west-
ern US states (Grid [28]), and two Internet networks at
the autonomous systems level (IntNet1 and IntNet2 [29]).
Three of the remaining networks are information commu-
nication networks: the Google webpage network (Web-
Page [27]), the European email network (Email [30]), and
a research citation network (Citation [29]). This set also
includes one biological network (the protein-protein in-
teraction network [31]) and three social contact networks:
the collaboration network of condensed-matter authors
(Author [30]), a peer-to-peer interaction network (P2P
[32]), and an online friendship network (Friend [33]).

For each of these network instances the BPD algorithm
constructs a much smaller targeted attack node set than
the CI algorithm does. In some of the network instances
the diﬀerences are indeed very remarkable (e.g., the Grid
network, the Email network and the RoadTX network
in Table I). When we compare the sizes of the feedback
vertex sets we again observe considerable improvements
of the BPD algorithm as compared to the CI algorithm.
Similar to what happens on random networks (Fig. 1),
when the BPD-guided attack scheme is applied to these
real-world networks, the giant network components do
not change gradually but experience abrupt collapse
transitions (see Fig. 2 for some examples).

IV. CONCLUSION

In this work we demonstrated that the network opti-
mal attack problem, a central and diﬃcult optimization
problem in network science, can be solved very eﬃciently
by a BPD message-passing algorithm that was originally
proposed to tackle the network feedback vertex set prob-
lem [17]. In terms of time complexity, the BPD algorithm
is almost a linear algorithm (see Fig. 3), so it is appli-
cable even to extremely huge real-world networks. Our
numerical results also demonstrated that the local Col-
lective Information algorithm of [21] can not oﬀer nearly
optimal solutions to the network optimal attack problem
(which was re-named as the network optimal inﬂuence
problem in [21]). As an empirical algorithm designed to
cut loops most eﬃciently, we believe BPD will be very
useful in network resilience studies and in help identifying
the most inﬂuential nodes.

Another major observation was that the BPD-guided
attach causes an abrupt breakdown of the network. This

7

latter dynamical property, combined with requiring only
a minimum number of target nodes, may make the BPD-
guided attack scheme a very dangerous strategy if it is
adopted for destructive purposes. The society might need
to seriously evaluate such a potential threat and, if nec-
essary, to implement suitable prevention protocols.

Acknowledgments

HJZ thanks Dr. Yuliang Jin for bringing Ref. [21]
to his notice. This work was supported by the Na-
tional Basic Research Program of China (grant number
2013CB932804), by the National Natural Science Foun-
dation of China (grant numbers 11121403 and 11225526),
and by the Knowledge Innovation Program of Chinese
Academy of Sciences (No. KJCX2-EW-J02). The ﬁrst
author (S.M.) is supported by a CAS-TWAS president
fellowship.

[1] D.-R. He, Z.-H. Liu, and B.-H. Wang. Complex Systems
and Complex Networks. Higher Education Press, Beijing,
2009.

[2] R. Albert, H. Jeong, and A.-L. Barab´asi. Error and at-
tack tolerance of complex networks. Nature, 406:378–382,
2000.

[3] D. S. Callaway, M. E. J. Newman, S. H. Strogatz, and
D. J. Watts. Network robustness and fragility: Percola-
tion on random graphs. Phys. Rev. Lett., 85:5468–5471,
2000.

[4] K. Erez R. Cohen, D. ben-Avraham, and S. Havlin.
Breakdown of the internet under intentional attack.
Phys. Rev. Lett., 86:3682–3685, 2001.

[5] R. Pastor-Satorras and A. Vespignani. Epidemic spread-
ing in scale-free networks. Phys. Rev. Lett., 86:3200–
3203, 2001.

[6] F. Altarelli, A. Braunstein, L. Dall’Asta, J. R. Wake-
ling, and R. Zecchina. Containing epidemic outbreaks
by message-passing techniques. Phys. Rev. X, 4:021024,
2014.

[7] A. Guggiola and G. Semerjian. Minimal contagious sets
in random regular graphs. J. Stat. Phys., 158:300–358,
2015.

[8] M. Richardson and P. Domingos. Mining knowledge-
sharing sites for viral marketing. In Proceedings of 8th
ACM SIGKDD International Conference on Knowledge
Discovery and Data Mining, pages 61–70. ACM, 2002.

[9] D. Kempe, J. Kleinberg, and E. Tardos. Maximizing the
spread of inﬂuence through a social network. Theory of
Computing, 11:105–147, 2015.

[10] F. Altarelli, A. Braunstein, L. Dall’Asta,

and
R. Zecchina. Optimizing spread dynamics on graphs
by message passing. J. Stat. Mech.: Theor. Exp., page
09011, 2013.

ﬂuence of nodes revisited: A markov chain analysis of epi-
demic process on networks. Chin. Phys. Lett., 29:048903,
2012.

[13] E. Marinari and R. Monasson. Circuits in random graphs:
from local trees to global loops. J. Stat. Mech.: Theor.
Exp., page P09004, 2004.

[14] E. Marinari, R. Monasson, and G. Semerjian. An al-
gorithm for counting circuits: Application to real-world
and random graphs. Europhys. Lett., 73:8–14, 2005.

[15] G. Bianconi and M. Marsili. Loops of any size and hamil-
ton cycles in random scale-free networks. J. Stat. Mech.:
Theor. Exp., page P06005, 2005.

[16] R. M. Karp. Reducibility among combinatorial problems.
In E. Miller, J. W. Thatcher, and J. D. Bohlinger, edi-
tors, Complexity of Computer Computations, pages 85–
103, New York, 1972. Plenum Press.

[17] H.-J. Zhou. Spin glass approach to the feedback vertex

set problem. Eur. Phys. J. B, 86:455, 2013.

[18] S. Bau, N. C. Wormald, and S. Zhou. Decycling numbers
of random regular graphs. Random Struct. Alg., 21:397–
413, 2002.

[19] S.-M. Qin and H.-J. Zhou. Solving the undirected feed-
back vertex set problem by local search. Eur. Phys. J.
B, 87:273, 2014.

[20] P. Galinier, E. Lemamou, and M. W. Bouzidi. Apply-
ing local search to the feedback vertex set problem. J.
Heuristics, 19:797–818, 2013.

[21] F. Morone and H. A. Makse. Inﬂuence maximization in
complex networks through optimal percolation. Nature,
524:65–68, 2015.

[22] D. Achlioptas, R. M. D’Souza, and J. Spencer. Explosive
percolation in random networks. Science, 323:1453–1455,
2009.

[23] O. Riordan and L. Warnke. Explosive percolation is con-

[11] P. Bonacich. Power and centrality: A family of measures.

tinuous. Science, 333:322–324, 2011.

Amer. J. Sociol., 92:1170–1182, 1987.

[12] P. Li, J. Zhang, X.-K. Xu, and M. Small. Dynamical in-

[24] Y. S. Cho, S. Hwang, H. J. Herrmann, and B. Kahng.
Avoiding a spanning cluster in percolation models. Sci-

ence, 339:1185–1187, 2013.

[25] K.-I. Goh, B. Kahng, and D. Kim. Universal behavior of
load distribution in scale-free networks. Phys. Rev. Lett.,
87:278701, 2001.

[26] L. ˇSubelj and M. Bajec. Robust network community de-
tection using balanced propagation. Eur. Phys. J. B,
81:353–362, 2011.

[27] J. Leskovec, K. J. Lang, A. Dasgupta, and M. W. Ma-
honey. Community structure in large networks: Natural
cluster sizes and the absence of large well-deﬁned clus-
ters. Internet Math., 6:29–123, 2009.

[28] D. J. Watts and S. H. Strogatz. Collective dynamics of

’small-world’ netowrks. Nature, 393:440–442, 1998.

[29] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graphs over
time: densiﬁcation laws, shrinking diameters and pos-
sible explanations. In Proceedings of the eleventh ACM
SIGKDD international conference on Knowledge discov-
ery in data mining, pages 177–187. ACM, New York,
2005.

8

[30] J. Leskovec, J. Kleinberg, and C. Faloutsos. Graph evolu-
tion: Densiﬁcation and shrinking diameters. ACM Trans-
actions on Knowledge Discovery from Data, 1:2, 2007.

[31] D. Bu, Y. Zhao, L. Cai, H. Xue, X. Zhu, H. Lu, J. Zhang,
S. Sun, L. Ling, N. Zhang, G. Li, and R. Chen. Topolog-
ical structure analysis of the protein-protein interaction
network in budding yeast. Nucleic Acids Res., 31:2443–
2450, 2003.

[32] M. Ripeanu, I. Foster, and A. Iamnitchi. Mapping the
gnutella network: Properties of large-scale peer-to-peer
systems and implications for system design. IEEE Inter-
net Comput., 6:50–57, 2002.

[33] E. Cho, S. A. Myers, and J. Leskovec. Friendship and
mobility: User movement in localation-based social net-
works.
In ACM SIGKDD International Conference o
Knowledge Discovery and Data Mining, pages 1082–1090,
San Diego, CA, USA, 2011.

