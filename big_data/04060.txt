6
1
0
2

 
r
a

 

M
3
1

 
 
]

R
G
.
s
c
[
 
 

1
v
0
6
0
4
0

.

3
0
6
1
:
v
i
X
r
a

Modelling Developable Ribbons

Using Ruling Bending Coordinates

Zherong Pan, Jin Huang, Member, IEEE, Hujun Bao, Member, IEEE

1

Abstract—This paper presents a new method for modelling the dynamic behaviour of developable ribbons, two dimensional strips
with much smaller width than length. Instead of approximating such surface with a general triangle mesh, we characterize it by a set
of creases and bending angles across them. This representation allows the developability to be satisﬁed everywhere while still leaves
enough degree of freedom to represent salient global deformation. We show how the potential and kinetic energies can be properly
discretized in this conﬁguration space and time integrated in a fully implicit manner. The result is a dynamic simulator with several
desirable features: We can model non-trivial deformation using much fewer elements than conventional FEM method. It is stable under
extreme deformation, external force or large timestep size. And we can readily handle various user constraints in Euclidean space.

Index Terms—Developable Surface, Ribbon Simulation, Reduced Conﬁguration

!

1 INTRODUCTION
Developable surfaces are ubiquitous in our daily life. Although
their continuous properties have been well understood [1],
their accurate modelling and discretization is still an open
problem. Recently, methods have been proposed in [2], [3]
to model these surfaces statically. In this paper, we takes a
step further to model the dynamic properties of developable
ribbons, a special type of developable surfaces that can be
isometrically mapped to two-dimensional strips with much
smaller width (latitude dimension) than length (longitude di-
mension). Developable ribbons have seen a lot of applications
for modelling stylish hairs, satin bows or ﬁlms.

FEM solver is clearly a competitive solution for modelling
developable surfaces, using either conforming [4] or non-
conforming triangle meshes [5]. However, none of these
methods are geometrically accurate in that their conﬁguration
space is not a subset of the true developable shape space. As
a result, on conforming meshes large stiffness energies have
to be introduced to limit the stretch, which in turn leads to
the locking phenomena. On the other hand, the hard length
constraints in [6] on non-conforming meshes greatly limit the
timestep size. Moreover, the reconstructed conforming meshes
are again not exactly developable and usually suffer from noisy
perturbation.

Key to our dynamic ribbon simulator is a novel conﬁgu-
ration space that parameterizes a subset of the developable
shape space which is large enough to cover most non-trivial
deformations. Speciﬁcally, we describe the shape of ribbon
by a set of creases along the centerline and bending angles
across them, see Fig. 1. This method is in direct contrary to
previous reduced models such as [7], where various constrains
are introduced to pull the shape towards the true shape space.
These constraints usually lead to stability issue or locking

• The authors are with the State Key Lab of CAD& CG, Zhejiang University,

Hangzhou 310058, China.
E-mail: pzr19882@hotmail.com, {hj, bao}@cad.zju.edu.cn.

phenomena. Instead, our novel representation guarantees that
the ribbon can be isometrically mapped to material space.
As a result, no additional constraints are needed, making our
method stable under large external force or timestep size.
Moreover, the whole timestepping scheme can be formulated
as a single optimization, which greatly simpliﬁes implementa-
tion. We noticed that a similar idea has been exploited in [8],
[9] for modelling helical rod.

Under this conﬁguration space, we present a proper dis-
cretization of the kinetic and potential energies. Our discretiza-
tion scheme bears several desirable features: First, material
space remeshing and world space deformations are modelled
uniformly; Energy gradients can be analytically evaluated
allowing quasi-newton method to converge efﬁciently; The R3
vertex positions x j,y j are reintroduced as auxiliary variables
so that conventional collision handlers can be trivially port to
our new formulation. In conclusion, our contributions can be
summarized as follows:

• A novel parameterization of salient global deformations

of developable ribbon.

• A discrete timestepping scheme that can be efﬁciently

integrated in a fully implicit manner.

• An optimization-based framework for multi-ribbon sim-
ulation allowing ﬂexible user constraints and collision
resolution.

The rest of the paper is organized as follows. After brieﬂy
reviewing the related works, we ﬁrst describe the transfer
function between R3 and our conﬁguration space in section 3.
We then present our discretization scheme for the kinetic and
potential energies in section 4. Finally, in section 5, we go
into some implementation details of our optimization strategy,
constrain and collision handling before we conclusion our
discussion.

2 RELATED WORKS
Rod Modelling The theory of elasticity for 1D rod has been
established in [10]. Later on, various discretization scheme for

2

Fig. 1. Illustration of our conﬁguration space. The centerline of a ribbon is evenly segmented into n elements separated
by creases. The angles between these creases and the centerline are θi and the ﬁnal shape of the ribbon in R3 is
reconstructed by bending along these creases. The corresponding bending angles are ψi. Given these parameters θi
and ψi, the two ends of each crease, x j and y j, can then be derived analytically.

this model has been developed and applied in robotics [11],
virtual surgery [12] and computer animation [13], [8], [14],
[15], [9].

These discretization schemes fall in two categories: [13]
and [14] adopted a hybrid representation. In their method,
the centerline is discretized in R3 with a frame attached to
each segment. This conﬁguration space is not a subset of the
true developable shape space so that additional constrains are
needed for inextensibility and consistency between the frames
and the centerline. Our method is more closely related to [8],
[14] and [9] where the conﬁguration space is parameterized
solely by the differentials of positions in R3. These methods
share the advantage that no extra constraints are needed. But a
reconstruction procedure is required to recover R3 variables.
Despite these similarities, none of them can be directly used to
model developable ribbons because their conﬁguration space
has only a small
intersection with the developable shape
space. For example, one may extend a rod along its binormal
directions to get a ribbon-like surface but its deformation away
from the centerline is not isometric as illustrated in Fig. 2.

Fig. 2. Compared with our method (top), extending a
twisted rod (red) along binormal directions (top) doesn’t
give isometric deformation (area error=4.7%)

Finite Element Shells Finite element method is another
promising alternative for modelling thin shells, see [16] for a
description of their continuous model. The discrete counterpart
has been introduced into the graphics community in [17], [18].
But these methods model elastic, instead of developable shells.
Later, it is shown in [19] that isometric deformation can be
approximated on a conforming mesh by enforcing hard length
constraints in a post-projection step. Moreover, this method
has the good property that bending energies become quadratic
[20]. Although in this work we adopt the dihedral angle based
formulates following [17], [18], our bending energies are also
quadratic since we treat the bending angles as our generalized

coordinates.

However, although a developable surface can be approxi-
mated using [19], a triangular conforming mesh has insufﬁ-
cient degrees of freedom to cover the developable shape space,
leading to the so-called locking phenomena. This problem
is resolved in [6] by enforcing the length constraints on a
non-conforming mesh. However, [6] suffers from noisy vertex
perturbation when a conforming mesh is reconstruction for
rendering and collision resolution. Also, the fast-projection
involved in [19], [6] greatly limits the timestep size and stabil-
ity. Compared with these methods, our formulation allows the
same or even higher accuracy with much less elements since
no discretization along the latitude direction is needed.

Developable Surface Modelling Our method is also closed
related to previous efforts towards static developable surfaces
modelling. Among these works, [21] describes a rectifying
developable surface by the envelop of its rectifying planes.
However, their method cannot be directly used for dynamic
modelling since the centerline is represented by an B`ezier
curve, on which inextensible and other consistency constraints
are hard to formulate. Developable surfaces have also been
known in the community of architectural design as PQ meshes
[22]. Like [13], developability in their method depends on a set
of nonlinear constraints to be satisﬁed. Finally, our representa-
tion is most closely related to [3], where a developable surface
is characterized explicitly by creases and bending angles. But
we emphasize that, since the correct dynamic behaviour of
a developable ribbon heavily depends on the material space
crease direction changes, [3] cannot be directly used to this
end because their crease directions are hard to parameterize.

3 RULING-BENDING COORDINATES
One unique property of a developable surface S is that the
Gaussian Curvature is zero everywhere. As a result, each
point on S is attached to a ruling line or crease along which
normal is constant and the ribbon is bended by angle ψ.
the world space shape of S can be
As is noted in [3],
characterized by these crease directions and bending angles
up to rigid transformation. In our formulation, these two sets
of parameters deﬁne our conﬁguration space. However, the
crease directions for a general developable surface is hard to
parameterize. Fortunately, we have observed that for S with
much larger longitude then latitude dimension, a large subset

of salient deformations can be modelled with only creases
that pass through the ribbon centerline, see Fig. 3 for an
illustration. We can then parameterize our crease direction by
c = tan(θ ), where θ is the angle between the crease and the
centerline.

Fig. 3. Non-trivial global deformations (brown) can be
modelled using only creases that cross the centerline.
However, some local deformations (red) is excluded from
our shape space.

Speciﬁcally, given S with longitude dimension l and latitude
dimension w, we ﬁrst segment its centerline into n elements
E0,··· ,n−1. Then, between any two consecutive elements we
introduce creases with directions c1,··· ,n−1 and bending angles
ψ1,··· ,n−1. Since we don’t allow singularity points, any two
consecutive creases cannot intersection, leading to a set of
crease constraints:

|c1| ≤ ∆cmax

|c j − c j+1| ≤ ∆cmax

|cn−1| ≤ ∆cmax,
(1)
where 1 ≤ j < n − 1 and ∆cmax = 2l
wn. In practice, we set
∆cmax = 0.95 2l
wn to avoid degenerate triangles in the recon-
structed mesh for collision handling. When these constraints
are satisﬁed, our conﬁguration space is thus parameterized by
< ci,ψi >.

Like [8], a reconstruction procedure is needed to recover
R3 positions of bottom rim vertices x0,··· ,n and top rim vertices
y0,··· ,n. The material space positions of these vertices are:

¯x j =<

l j
n

− wc j
2

,−w
2

,0,1 > ¯y j =<

l j
n +

wc j
2

,

w
2

,0,1 >,

where we need to introduce boundary crease directions c0 =
cn = 0. Here we used homogeneous coordinates for conve-
nience. Their world space positions x j and y j can then be
derived by applying a series of crease transformations:

Π j
i=0Ti

¯x j

x j =

(2)
where T j is a rigid rotation by angle ψ j along crease c j. In this
equation, we again need to introduce boundary value Tn = Id.

y j =

¯y j,

Π j
i=0Ti

(cid:104)

(cid:105)

(cid:104)

(cid:105)

3

For T0, if the ﬁrst segment of the ribbon is ﬁxed, we simply
have T0 = Id as well. While if the ribbon is attached to a
ﬂoating frame, T0 is a global rigid transformation:

(cid:18) expw

0

(cid:19)

,

t
1

T0 =

parameterized by rotation vector w and translation t. If this
is the case, our conﬁguration space is parameterized by the
set of variables < c,ψ,w,t >. For numerical optimizaiton, our
dynamic simulator heavily depends on an analytical formula
for ∇x j = ∂x j/∂ < c,ψ,w,t >. We leave their derivations to
Appendix A. ∇y j can be found following the same procedure.
Besides, when extra torsional forces are applied on the ribbon,
we formulate them as additional constraints on the normal
directions in world space. For element E j, its normal direction
n j can be calculate by:

(cid:104)

(cid:105)

n j =

Π j
i=0Ti

¯n,

(3)

where ¯n =< 0,0,1,0 >. Its derivative ∇n j can be found
similarly.

4 DISCRETE EQUATION OF MOTION
The above conﬁguration space naturally encodes the shape of
a globally deformed developable ribbon. To ﬁnd its motion
in temporal domain, we have to discretize the equation of
motion. To simplify our presentation, we start from temporal
discretization using the Implicit Euler method. It has a simple
variational form, which has been exploited in e.g. [23]:

argmin<c,ψ,w,t>n+1

ρ
2

(cid:13)(cid:13)(cid:13)(cid:13)Xn+1 − Xn

h

(cid:13)(cid:13)(cid:13)(cid:13)2

M

− Vn

+V,

where X is position vector assembled from x j,y j and Vn =
(Xn − Xn−1)/h. Here, V denotes the internal or external
potential energy terms. Since the ribbon mesh will deform in
material space, the mass matrix M derived from conventional
FEM method is dependent on the crease direction c. See
Appendix B for more details.

In this work, since the conﬁguration space is a subset of
the true shape space, no stiffness energies are need to limit
stretch and we are left with bending energies to be considered.
Since we have the bending angles as an independent variable,
bending energies based on dihedral angles [4], [18] become
quadratic in ψ in our case. Speciﬁcally, for each crease
between Ei−1,Ei, we introduce:

V bend
i

=

H2dx ≈ nw(1 + c2

i )ψ2
i

,

l

(cid:113)

where Di is a diamond element between Ei−1,Ei with area
lw/n. This formula is derived in a similar way to [17]. The
i ψi which
mean curvature measure of Di
follows from the tube theory [24] and the mean curvature is
then approximated in a area averaged manner. Although [3]
adopted a more accurate form, taking the change of mean
curvature along ruling into consideration, the difference is
insigniﬁcant compared with our simpliﬁed form.

¯Hi = w

1 + c2

is

Other potential terms are discrete version of external forces
or soft constraints. For example, the gravitational potential

(cid:90)

Di

energies are simply: V grav = −ρgT MXn+1. In addition to these
terms, we add a small regularization to resolve the ambiguity
of crease directions for a ﬂat ribbon,preferring ruling directions
orthogonal to the centerline. The ﬁnal V is:

(cid:17)

+ β c2
i

+V user,

(cid:16)

V = V grav +

n−1
∑

i=1

αV bend

i

where α is the bending stiffness coefﬁcient and β = 0.1 in all
our examples. We also added an additional term V user for user
controllability.

On the other hand, our compact conﬁguration space poses
great challenge on spatial discretization of the kinetic term.
This is because < c,ψ > encodes material space remeshing
(by changing c) and world space deformation in a uniform
manner. As a result, R3 positions Xn+1 and Xn may not
correspond to the same points ¯Xn+1 and ¯Xn in material space
and cannot be subtracted directly. A common practice here
is to temporarily ﬁx c to ensure material space consistency
and perform remeshing regularly. Although this strategy has
been successfully adopted in conventional FEM shell solver
such as [25], it fails to work with our method because our
conﬁguration space is so compact that bending angles along
cannot cover a large enough subset of the true developable
shape space, leading to severe locking artifact, see Fig. 4.

4

ﬁnal form of optimization becomes:

h

M

+V.

(cid:13)(cid:13)(cid:13)(cid:13)2

s.t. constraints 1

− R( ¯Xn+1,Vn)

(cid:13)(cid:13)(cid:13)(cid:13)Xn+1 − R( ¯Xn+1,Xn))

argmin<c,ψ,w,t>n+1 f
f (cid:44) ρ
2
to emphasize that R3 positions Xn here is not
We want
required to be reconstructed from our generalized coordi-
nates, allowing the ribbon to temporarily deviate from the
developable shape space. This ﬂexibility enables conventional
collision handlers to be easily integrated into our framework.
Our solver for this nonlinear optimization is detailed in
section 5, which heavily relies on an analytical formula for
the energy gradient. A naive way of gradient evaluation may
follow from Appendix A and chain rule. But we show in
Appendix C that it could be greatly accelerated by evaluating
in an adjoint mode.

5 THE SOLVER FRAMEWORK
In this section, we present our full-featured multi-ribbon solver
framework,
including various user constraints or external
forces handling and collision resolution. Algorithm 1 provides
an outline of our two-step pipeline. In the ﬁrst substep, the
optimization problem is solved for each ribbon in parallel to
predicate a desired new conﬁguration where the R3 vertex
positions are reconstructed. The collision handler then ﬁnds
a corrected collision free R3 positions in the second substep,
temporarily leaving the developable shape space.

Algorithm 1 one timestep of ribbon solver
Input: a mesh with vertices < Xn,Vn >
Input: a set of user constraints C(X) ≥ 0
1: for each ribbon r do
< c,ψ,w,t >n+1
2:
< ˜Xn+1
3:
4: end for
5: < Xn+1,Vn+1 >=resolveCollision(< ˜Xn+1, ˜Vn+1 >)

r >=reconstruct(< c,ψ,w,t >n+1

r =optimize(< Xn

r >,Cr)
r

, ˜Vn+1

r ,Vn

)

r

(cid:46) in parallel

Fig. 4. A torsional
force is applied to a ribbon with
one end ﬁxed. Due to our compact conﬁguration space,
bending angles alone cannot cover large enough subset
of the developable shape space (top). The naive method
of updating crease direction once every 5 frames (middle)
still suffer from large deviation from the ground truth
(bottom).

We thus need to introduce a resampling operation R satis-

fying:

¯xn+1
j = R(¯xn+1

j

, ¯Xn)

¯yn+1
j = R(¯yn+1

j

, ¯Yn),

(4)

where R is assumed to be piecewise linear in its ﬁrst parameter.
In fact, since all vertices lie on the top or bottom rim of the
ribbon, R is a simple 1D-interpolation. We can then deﬁne a
valid subtraction as: (Xn+1 − R( ¯Xn+1,Xn))/h− R( ¯Xn+1,Vn),
where R(X,•) means apply resampling on each 3× 1 block
of X. Note that in this way we have essentially encoded
remeshing and deformation in a single optimization, and our

For the optimization in our ﬁrst substep, since the analytical
Hessian matrix of equation 2 is too costly to evaluate, Newton-
type solvers becomes largely unavailable. We thus choose the
L-BFGS-B algorithm [26] as our underlying solver, which is
wrapped into an Augmented-Lagrangian framework [27] to
handle nonlinear constraints.

5.1 Constraints
Now we discuss several types of constraints supported by our
framework. The most important is the non-intersecting ruling
constraints. Since these constraints are large in number, we
transform them into box constraints by a variable substitution
as:

∆ci = ci − ci−1

2 ≤ i < n− 1,

so that they can be handled by the L-BFGS-B algorithm. We
are thus left with only two general linear constraints:

|c1 +

n−1
∑

i=2

∆ci| ≤ ∆cmax,

to be handled by the Augmented-Lagrangian framework.
is the loop constraint

Another common constraint

requires the two ends of a ribbon to be connected:

that

x0 = xn

y0 = yn n0 = nn−1

for the orientable case or:

x0 = yn

y0 = xn n0 = −nn−1

for the non-orientable case. These constraints are useful for
modelling a ribbon chain or the Mobius band, see Fig. 5.

Finally, a lot of interesting deformations are resulted from
torsional forces which is introduced into our framework as
additional normal guiding energies: V user = K/2(cid:107)n − n0(cid:107)2.
Other kinds of common user constraints can be added as
in conventional FEM methods. Now we can summarize our
optimization substep in algorithm 2.

2 min(C(X) + λ /µ,0)2

g = µ
initial guess < c1,∆c,ψ,w,t >k−1= P < c,ψ,w,t >k−1
< c1,∆c,ψ,w,t >k= L BFGS B( f + g,|∆c| ≤ ∆cmax)
< c,ψ,w,t >k= P−1 < c1,∆c,ψ,w,t >k
if (cid:107) < c,ψ,w,t >k−1 − < c,ψ,w,t >k (cid:107) < 1e−4 then

Algorithm 2 optimize(< Xn,Vn >,C)
1: < c,ψ,w,t >0=< c,ψ,w,t >n,λ = 0, µ = 1e3
2: for k = 1,2,3,··· do
3:
4:
5:
6:
7:
8:
9:
10:
11:
12: end for

λ = min(λ + µC(X),0)

return < c,ψ,w,t >k

end if

else

5.2 Collision Resolution
One advantage of our formulation is that existing collision
detection and resolution methods can be trivially plugged into
our framework as a post processor. After a new conﬁguration
< c,ψ,w,t >n+1 is returned by our optimizer, a triangle mesh
with vertices ˜Xn+1 is reconstructed and passed to the collision
handler, which in turn ﬁnds a closest collision free mesh with
vertices: Xn+1. Although this mesh may not lie in the devel-
opable shape space, its distance to our conﬁguration space is
very close in our experiments. Moreover, this developability
error will not accumulate because a valid conﬁguration is
always recovered by our ﬁrst substep at next frame.

To work the best with our method, one need to be careful
in choosing of underlying continuous collision handler. There
are generally two methods for resolving a large amount of
continuous collisions:
local methods based on randomized
impulses [28] and globally coupled methods such as non-rigid
impact zone [29]. Since the closeness to a valid conﬁguration
is important in our case, we choose to use globally coupled
handlers. Speciﬁcally, we solve a quadratic programming of
the following form to resolve a set of collision constraints
Ccoll are returned by the detector:
E(X)
Ccoll(X) ≥ 0,

argmin
s.t.

5

where E is some closeness measure. In the original work
2(cid:107)Xn+1 − ˜Xn+1(cid:107)2. This measure leads
[29], E is simply E = 1
to diagonal Hessian so that the QP problem can be solved
efﬁciently in its dual form for a very large mesh, especially
when the number of constraints are much smaller than number
of vertices. Although this measure totally ignores the stiffness
between vertices, this choice is appropriate for most cloth
animation setups where a small timestep size is used.

But

in our case,

the situation is reversed. Due to our
compact representation, the reconstructed mesh is orders of
magnitude smaller for comparable results than FEM method.
As a result, the number of potential constraints are usually
comparable to the number of vertices. On the other hand, since
we used fully implicit method, our solver is stable under large
timestep. Unfortunately, such large timestep size also makes
the collision force stiff. As a result, ignoring internal stiffness
in E(X) would lead to large discrepancy between ˜Xn+1 and
Xn+1. This may introduce large developability error and ﬁnally
cause collision failure due to degenerated or ﬂipped triangles
which is illustrated in Fig. 6.

Fig. 6. A frame from the same animation as bottom
Fig. 12. Compared with conventional method (left), the
collision handler can be greatly stabilized with additional
Esti f f
e

terms (right) under large timestep size.

Out of these considerations, we add an quadratic artiﬁcial
stiffness term to E(X). Speciﬁcally, for each edge e of the
reconstructed triangle mesh with vertices ˜x1, ˜x2, we introduce
2 (cid:107)(x1 − x2)− (˜x1 −
additional energy terms: Esti f f
˜x2)(cid:107)2, where K is an artiﬁcial stiffness coefﬁcient set to 1e2
in all our examples. The new QP problem:
Esti f f
e

(x1,x2) = K

argmin

(X)

e

E(X) +∑
Ccoll(X) ≥ 0

e

s.t.

is again solved in its dual form using the active set method,
where the dual Hessian CH−1CT
is calculated by pre-
factorizing the sparse Hessian H and solve the sparse right
hand side CT . Since our mesh is rather small, the overhead of
this solve is neglectable.

6 RESULTS AND VALIDATIONS
The stability, accuracy and efﬁciency of our method is eval-
uated using several benchmark tests, the performance of our

6

Fig. 5. Our algorithm can robustly handle nonlinear loop constraints. In this example, an non-orientable loop constraint
is assigned to each of the 9 ribbons, forming a Mobius chain.

solver on all examples is summarized in table 1. In a ﬁrst set of
tests illustrated in Fig. 7, we apply large torsional or dragging
forces on a ribbon with or without loop constraint. Fortunately,
our optimizer presents no performance degradation in both
cases. The stability is also validated in temporal domain.

Fig. 8. Helix unrolling of a ribbon with length=1m and
width=0.05m segmented into 50 elements. Under different
timestep size h = 0.01s on the left and h = 0.05s on the
right, our solver ﬁnds consistent results.

Scene
Extreme Torsion
Extreme Dragging
Torsion (ours)
Torsion (C-FEM)
Torsion (NC-FEM)
Helix Unrolling (h=0.01)
Helix Unrolling (h=0.05)
Ribbon Falling
Double Chain
Mobius Chain

Ribbon
50× 1
50× 1
50× 1
50× 10
50× 10
50× 1
50× 1
150× 1

(50× 1)× 18
(50× 1)× 9

Opt./[Coll.](sec)

Inner/Outer

0.015
0.03
0.06
0.36
3.0
0.045
0.12

2.12/1.2
2.18/2.5
2.24/2.1

270/1
432/4
110/1
N/A
N/A
414/1
439/1
981/1
321/5
3417/5

Fig. 7. Stability test on a ribbon with length=1m and
width=0.05m segmented into 50 elements. Top row: twist-
ing the spherical ribbon by 4π with strong normal con-
straints. Bottom row: a looped ribbon under large drag-
ging force.

In this subsequent test, we compared two simulated helix
unrolling sequences under different timestep size. Our solver
ﬁnds a reasonably consistent result with h up to 0.05s, see
Fig. 8.

To demonstrate our advantage over previous methods, we
compared our solver with conventional FEM methods using
(non-)conforming mesh. For the conforming solver, we have
to introduce an artiﬁcial stiffness term which is set to 1e8.
According to Fig. 9 and the accompanying video, the con-
forming solver would suffer from noisy spatial error due to
locking phenomena and the non-conforming solver instead
suffers from noisy temporal error due to the conforming
reconstruction procedure and additional boundary constraints.
By contrast, our method on a much smaller mesh faithfully
regenerates the zigzag ruling pattern without any instability in

TABLE 1

Time cost for one step of our solver. From left to right:

number of ribbon segments in longitude/latitude

dimension, average time cost for optimization/collision

detection if applicable and number of inner/outer

iterations taken by the optimizer. All tests are done on a
single desktop computer with dual Intel Xeon E5-2630

CPU and 128Gb memory.

both spatial and temporal domain.

In addition, we investigated the accuracy of our kinetic
energy formulation by showing the consistency with conven-
tional FEM methods again. However, as is shown in Fig. 9,
FEM solver cannot serve as a valid groundtruth. To resolve
this contradiction, we observe that our method is equivalent
to an conventional FEM solver with dynamic remeshing re-
specting the ruling direction. In view of this, we work on
an animation sequence generated using our method, and for
any two consecutive frames i and i + 1, we insert all vertices
to get a combined mesh with material space vertex positions
¯Zi (cid:44) ( ¯Xi, ¯Xi+1). From this mesh with world space vertex
positions Zi = (Xi,R( ¯Xi+1,Xi)), we perform time integration

7

Fig. 10. The animation of free helix unrolling with h = 0.01s. Visualization of discrepancy between Zi+1
(brown) at t = 0s,0.25s,0.5s,0.75s,1s, from left to right. For reference, Zi is also shown in green.

FEM (red) and Zi+1

Fig. 9. Twisting a ribbon with length=1m and width=0.1m
segmented into 50 longitude elements and 10 latitude
elements. From top to bottom: our method, FEM solver on
a conforming mesh and FEM solver on a non-conforming
mesh.

using FEM method on conforming mesh to predicate a new
combined mesh with world space vertex positions Zi+1
FEM,
which is then compared with Zi+1 (cid:44) (R( ¯Xi,Xi+1),Xi+1). This
essentially compares the per-frame discrepancy between our
method and FEM method with remeshing factored out. The
result is visualized in Fig. 10, which validates the accuracy
of our formulation. Unfortunately, such accuracy is achieved
at the cost of an additional resampling operator R. There is
however a naive simpliﬁcation to our kinetic term by lumping
all the mass to the centerline, giving a simpliﬁed objective
energy:
f (cid:44) n
∑

i )/2(cid:13)(cid:13)2

(cid:13)(cid:13)(xn+1

i + yn+1

i − xn

+V,

i − yn

i )/2h− (˙xn

i + ˙yn

Mi
2

i=0

which just takes the average of velocities and positions along
the ruling direction for the centerline. Here Mi is the constant
lumped mass for the ith centerline vertex. Such approximation
works well in some cases such as Fig. 10 but may lead to
severe artifact elsewhere. An extreme example is shown in
Fig. 11.

One major disadvantage of our algorithm is that the perfor-
mance degenerates with the number of segments according to
Fig. 13. The bottleneck of our method is the evaluation of ∇x j
and ∇y j which is quadratic in n, which can be largely removed

Fig. 11. A ribbon rotating along the centerline (no gravity).
If lumped kinetic energy is used, the ribbon won’t even
deform since f = 0 is always achieved at the rest state
(top). While our formulation correctly captures the trian-
gular ruling pattern (middle), which ﬁnally leads to large
deformation due to centrifugal force (bottom).

using the adjoint method. But longer ribbon won’t affect the
stability our method. In the falling ribbon example of Fig. 12,
we used a long ribbon with 150 segments. In this case the
overhead of optimization dominates our solver pipeline.

The stability of collision and contact handling is illustrated
in Fig. 12 as well. For both of these examples we used h =
0.01. Under such large timestep size, our new closeness metric
E is an indispensable component especially for the double
ribbon chain example. Due to the stiffness of collision forces,
conventional non-rigid impact zone solver generates extremely
distorted triangles and quickly fails after the ﬁrst few segments
of the chain get in contact.

7 CONCLUSION AND DISCUSSION
In conclusion, the paper presents an conﬁguration space that
covers a large subset of the shape space of developable ribbon.
Based on this conﬁguration space, we develop a optimization
based ribbon simulator with ﬂexible user controllability and
robust collision handling. Thanks to the compactness of the
conﬁguration space, the solver is locking free compared with
previous FEM based methods. This enables the solver high
ﬁdelity on a very small mesh. Moreover, it presents better
stability in both temporal and spatial domain over conventional
methods [17], [6].

8

[2]

[3]

P. Bo and W. Wang, “Geodesic-controlled developable surfaces for
modeling paper bending,” Computer Graphics Forum, vol. 26, no. 3,
pp. 365–374, 2007.
[Online]. Available: http://dx.doi.org/10.1111/j.
1467-8659.2007.01059.x
J. Solomon, E. Vouga, M. Wardetzky, and E. Grinspun, “Flexible
developable surfaces,” Computer Graphics Forum, vol. 31, no. 5,
pp. 1567–1576, 2012. [Online]. Available: http://dx.doi.org/10.1111/j.
1467-8659.2012.03162.x

[4] E. Grinspun, A. N. Hirani, M. Desbrun, and P. Schr¨oder, “Discrete
shells,” in Proceedings of
the 2003 ACM SIGGRAPH/Eurographics
symposium on Computer animation. Eurographics Association, 2003,
pp. 62–67.

[5] E. English and R. Bridson, “Animating developable surfaces using

nonconforming elements,” ACM Transaction on Graphics, 2008.

[7]

[6] ——, “Animating developable surfaces using nonconforming elements,”
in ACM Transactions on Graphics (TOG), vol. 27, no. 3. ACM, 2008,
p. 66.
J. Spillmann and M. Teschner, “Corde: Cosserat rod elements for the
dynamic simulation of one-dimensional elastic objects,” in In Proc. ACM
SIGGRAPH/Eurographics Symposium on Computer Animation, 2007,
pp. 63–72.
F. Bertails, B. Audoly, M.-P. Cani, B. Querleux, F. Leroy, and J.-L.
L´evˆeque, “Super-helices for predicting the dynamics of natural hair,” in
ACM Transactions on Graphics (TOG), vol. 25, no. 3. ACM, 2006,
pp. 1180–1187.

[8]

[9] R. Casati and F. Bertails-Descoubes, “Super space clothoids,” ACM

Transactions on Graphics (TOG), vol. 32, no. 4, p. 48, 2013.

[10] E. Cosserat and F. Cosserat, “Th´eorie des corps d´eformables,” Paris,

1909.

[11] S. Javdani, S. Tandon, J. Tang, J. F. O’Brien, and P. Abbeel, “Modeling
and perception of deformable one-dimensional objects,” in Robotics and
Automation (ICRA), 2011 IEEE International Conference on.
IEEE,
2011, pp. 1607–1614.

[12] D. K. Pai, “Strands: Interactive simulation of thin solids using cosserat
models,” Computer Graphics Forum, vol. 21, no. 3, pp. 347–352, 2002.
[Online]. Available: http://dx.doi.org/10.1111/1467-8659.00594

[13] J. Spillmann and M. Teschner, “C o r d e: Cosserat rod elements for the
dynamic simulation of one-dimensional elastic objects,” in Proceedings
of the 2007 ACM SIGGRAPH/Eurographics symposium on Computer
animation. Eurographics Association, 2007, pp. 63–72.

[14] M. Bergou, M. Wardetzky, S. Robinson, B. Audoly, and E. Grinspun,
“Discrete elastic rods,” in ACM Transactions on Graphics (TOG),
vol. 27, no. 3. ACM, 2008, p. 63.

[15] F. Bertails, “Linear time super-helices,” in Computer graphics forum,

vol. 28, no. 2. Wiley Online Library, 2009, pp. 417–426.

[16] P. G. Ciarlet, Theory of shells. Elsevier, 2000.
[17] E. Grinspun, A. N. Hirani, M. Desbrun, and P. Schr¨oder, “Discrete
shells,” in Proceedings of
the 2003 ACM SIGGRAPH/Eurographics
symposium on Computer animation. Eurographics Association, 2003,
pp. 62–67.

[18] R. Bridson, S. Marino, and R. Fedkiw, “Simulation of clothing
with folds and wrinkles,” in Proceedings of
the 2003 ACM SIG-
GRAPH/Eurographics symposium on Computer animation. Eurograph-
ics Association, 2003, pp. 28–36.

[19] R. Goldenthal, D. Harmon, R. Fattal, M. Bercovier, and E. Grin-
spun, “Efﬁcient simulation of inextensible cloth,” ACM Transactions on
Graphics (TOG), vol. 26, no. 3, p. 49, 2007.

[20] M. Wardetzky, M. Bergou, D. Harmon, D. Zorin, and E. Grinspun,
“Discrete quadratic curvature energies,” Computer Aided Geometric
Design, vol. 24, no. 8, pp. 499–518, 2007.

[21] P. Bo and W. Wang, “Geodesic-controlled developable surfaces for
modeling paper bending,” in Computer Graphics Forum, vol. 26, no. 3.
Wiley Online Library, 2007, pp. 365–374.

[22] Y. Liu, H. Pottmann, J. Wallner, Y.-L. Yang, and W. Wang, “Geometric
modeling with conical meshes and developable surfaces,” in ACM
Transactions on Graphics (TOG), vol. 25, no. 3. ACM, 2006, pp.
681–689.

[23] S. Martin, B. Thomaszewski, E. Grinspun, and M. Gross, “Example-
based elastic materials,” in ACM Transactions on Graphics (TOG),
vol. 30, no. 4. ACM, 2011, p. 72.

[24] D. Cohen-Steiner and J.-M. Morvan, “Restricted delaunay triangulations
and normal cycle,” in Proceedings of the nineteenth annual symposium
on Computational geometry. ACM, 2003, pp. 312–321.

[25] R. Narain, A. Samii, and J. F. O’Brien, “Adaptive anisotropic remeshing
for cloth simulation,” ACM Transactions on Graphics (TOG), vol. 31,
no. 6, p. 152, 2012.

Fig. 12. Our method handles collision and contact ro-
bustly. Top: A long ribbon falling on the ground. Bottom:
impact of two ribbon chains with 9 ribbons each.

Fig. 13. Time cost of ﬁnding the rest shape of a mobius
band for ribbon of different length, using simple chain
rule (red) or the adjoint method (blue) energy gradient
evaluation.

We also noticed several drawbacks of the method. A clear
problem is that our conﬁguration parameters are densely
related to vertex positions, which limits the scalability in
terms of both time and memory for extremely long chain.
The optimizer would also require more gradient evaluations
for longer ribbon. To alleviate this problem, it is worth ex-
ploring acceleration techniques such as Newton-type optimizer
with an approximate Hessian or massive parallelism. Another
major drawback is that, as the width of ribbon increase, our
conﬁguration space represents a smaller subspace of the true
shape space. And sometimes user may want to recover some
local deformation. In these cases, locally deformed patches can
be reintroduced by coupling the solver to conventional FEM
methods or model reduction techniques such as [30].

REFERENCES
[1] M. P. Do Carmo and M. P. Do Carmo, Differential geometry of curves

and surfaces. Prentice-hall Englewood Cliffs, 1976, vol. 2.

(cid:17)(cid:19)(cid:21)(cid:23)(cid:25)(cid:18)(cid:17)(cid:53)(cid:74)(cid:78)(cid:70)(cid:1)(cid:9)(cid:84)(cid:70)(cid:68)(cid:10)(cid:22)(cid:17)(cid:18)(cid:17)(cid:17)(cid:18)(cid:22)(cid:17)(cid:19)(cid:17)(cid:17)(cid:19)(cid:22)(cid:17)(cid:20)(cid:17)(cid:17)(cid:47)(cid:80)(cid:15)(cid:1)(cid:52)(cid:70)(cid:72)(cid:78)(cid:70)(cid:79)(cid:85)9

d f

=

∂ f
∂X

APPENDIX C
ADJOINT MODE GRADIENT EVALUATION
In order to evaluate

d f

d<c,ψ>, we start from the chain rule:
∂X

∂N

∂ f

+

,

∂ < c,ψ >

∂ < c,ψ >

d< c,ψ >
where the ﬁrst two terms can then be evaluated in an adjoint
mode by exploiting the special structure of equation 2 and
equation 3, which is composed of two passes as illustrated
in Algorithm 3. In this way, the algorithmic complexity is
reduced from O(n2) to O(n).

∂ < c,ψ >

+

∂ f
∂N

Algorithm 3 Adjoint Gradient Evaluation
Input: < c,ψ >
Output:
d<c,ψ>

d f

(cid:46) forward pass

(cid:46) backward pass
(cid:46) adjoint variable

)T ∂ f
∂y j

+ (T ∂ ¯y j
∂ c j

j + ∂ f
¯yT
∂n j

¯nT )

1: T = Id
2: for j = 0,··· ,n do
3:
4:
5:
6: end for
7: evaluate f , ∂ f

T = TT j
x j = T¯x j
y j = T¯y j

∂X , ∂ f
∂N ,

∂ f

∂ <c,ψ>

d f

12:
13:

)T ∂ f
∂x j

d<c,ψ> = ∂ f

8:
∂ <c,ψ>
9: A = 0
10: for j = n,··· ,0 do
+ (T ∂ ¯x j
11:
∂ c j

d f
= d f
dc j
dc j
T = TT−1
j
A = T−T
j ATT
j+1
j + ∂ f
A = A + TT ( ∂ f
¯xT
∂x j
∂y j
+ A: ∂T j
d f
∂ c j
dc j
+ A: ∂T j
d f
16:
dψ j
∂ψ j
17: end for

= d f
dc j
= d f
dψ j

14:

15:

[26] R. H. Byrd, P. Lu, J. Nocedal, and C. Zhu, “A limited memory algo-
rithm for bound constrained optimization,” SIAM Journal on Scientiﬁc
Computing, vol. 16, no. 5, pp. 1190–1208, 1995.

[27] J. Nocedal and S. J. Wright, “Numerical optimization, second edition,”

Numerical optimization, pp. 497–528, 2006.

[28] R. Bridson, R. Fedkiw, and J. Anderson, “Robust treatment of collisions,
contact and friction for cloth animation,” in ACM Transactions on
Graphics (ToG), vol. 21, no. 3. ACM, 2002, pp. 594–603.

[29] D. Harmon, E. Vouga, R. Tamstorf, and E. Grinspun, “Robust treatment
of simultaneous collisions,” in ACM Transactions on Graphics (TOG),
vol. 27, no. 3. ACM, 2008, p. 23.

[30] D. Harmon and D. Zorin, “Subspace integration with local deforma-
tions,” ACM Transactions on Graphics (TOG), vol. 32, no. 4, p. 107,
2013.

APPENDIX A
EXPLICIT FORMULA FOR x j AND ∇x j
Since Tk for 1 ≤ k < n is just rigid rotation, they have simple
analytical form:



Tk =

cos(ψk)+c2
k

c2
k +1

ck−ckcos(ψk)
sin(ψk)(cid:113)

c2
k +1

c2
k +1
0

ck−ckcos(ψk)

c2
k +1
1+c2
kcos(ψk)
c2
k +1

(cid:113)
−cksin(ψk)
c2
k +1
0

(cid:113)
−sin(ψk)
c2
(cid:113)
k +1
cksin(ψk)
c2
k +1
cos(ψk)

0

ckklcos(ψk)−ckkl

n(c2

k +1)

kl−klcos(ψk)
(cid:113)
(cid:113)
c2
n
k +1
−klsin(ψk)
c2
n
k +1
1

 ,

whose partial derivatives ∂Tk/∂ ck and ∂Tk/∂ wk can be found
using a symbolic software. We omit these here to save space.
And for the global rigid transformation, we have:

(cid:32) ∂expw

∂wk
0

(cid:33)

0
1

∂T0
∂wk

=

(cid:18) 0 ek

0

1

(cid:19)

,

∂T0
∂tk

=

where ∂expw/∂wk can be found using the Rodriguez’s for-
mula. Now ∇x j can be founding using simply chain rule:

(cid:104)
(cid:104)

(cid:104)
(cid:104)

(cid:105) ∂Tk
(cid:105) ∂Tk
(cid:105)

∂ ck

∂ψk
Π j
i=1Ti

Πk−1
i=0 Ti
Πk−1
i=0 Ti
∂T0
∂wk

(cid:104)

∂x j
∂ ck
∂x j
∂ψk
∂x j
∂wk

=

=

=

Π j
i=k+1Ti
∂x j
∂tk

=

¯x j

(cid:105)
(cid:105)

(cid:104)
(cid:104)

¯x j +

¯x j
∂T0
∂tk

(cid:105) ∂ ¯x j
(cid:105)

∂ ck

¯x j.

Π j
i=1Ti

Π j
i=k+1Ti

Π j
i=0Ti

.

APPENDIX B
THE MASS MATRIX

Without loss of generality, we use linear shape function for
each quad element. In this case, element Ei would contribute
a 12× 12 mass block of the following form:



−∆cnw2+4lw

−∆cnw2+4lw

Mi =

−∆cnw2+4lw

−∆cnw2+4lw

∆cnw2+4lw

∆cnw2+4lw

∆cnw2+4lw

∆cnw2+4lw

lw
36n

72n
lw
18n

36n

lw
18n

36n
lw
36n

72n

72n
lw
36n

36n
lw
18n

36n
lw
18n

72n
lw
36n

where ∆c = ci+1 − ci.

⊗ Id3×3,

