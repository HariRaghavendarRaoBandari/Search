6
1
0
2

 
r
a

M
1

 

 
 
]
T
G
.
s
c
[
 
 

1
v
9
0
5
0
0

.

3
0
6
1
:
v
i
X
r
a

A Game-Theoretic Approach for Detection of Overlapping Communities

in Dynamic Complex Networks

Elham Havvaei∗ and Narsingh Deo†

Department of Computer Science

University of Central Florida

(Dated: March 3, 2016)

Complex networks tend to display communities which are groups of nodes cohesively connected
among themselves in one group and sparsely connected to the remainder of the network. Detecting
such communities is an important computational problem, since it provides an insight into the
functionality of networks. Further, investigating community structure in a dynamic network, where
the network is subject to change, is even more challenging. This paper presents a game-theoretical
technique for detecting community structures in dynamic as well as static complex networks. In
our method, each node takes the role of a player that attempts to gain a higher payoﬀ by joining
one or more communities or switching between them. The goal of the game is to reveal community
structure formed by these players by ﬁnding a Nash-equilibrium point among them. To the best
of our knowledge, this is the ﬁrst game-theoretic algorithm which is able to extract overlapping
communities from either static or dynamic networks. We present the experimental results illustrating
the eﬀectiveness of the proposed method on both synthetic and real-world networks.
Keywords: Community Structure; Dynamic Network; Extremal Optimization; Nash Equilibrium

I.

INTRODUCTION

Community detection problem in complex networks
has been the subject of intensive studies throughout the
last decade [1]. There is no formal or universally ac-
cepted deﬁnition for the notion of community.
Intu-
itively, a community can be seen as a dense group of
nodes which has more edges within itself than to the
nodes outside of the group. Community structure is the
set of all such communities in a network. Being able to
extract community structure within a network provides a
deeper insight through the functionality of systems rep-
resented as networks. Most complex networks such as
social or biological networks exhibit community struc-
ture properties. In social networks a community is inter-
preted as a group of people who may have common in-
terests, ethnicity or geographic location. Protein-protein
interaction network is an example of a biological network
displaying community structure in which proteins in a
community are likely to have the same functionality[2].
Most techniques for detecting community structures par-
tition networks into disjoint communities. However, most
networks inherently have overlapping community struc-
In social networks, people may be a member of
ture.
multiple social communities.
In citation networks, re-
searchers may collaborate with diﬀerent research groups.
In the protein-protein interaction network, a large frac-
tion of proteins reside in multiple protein complexes, at
the same time. Thus, in contrast to disjoint community
detection, techniques for detecting overlapping commu-
nity structure where a node is able to reside in multiple
communities reveal a deeper feature of many real-world

∗ ehavvaei@cs.ucf.edu
† deo@cs.ucf.edu

networks [3–5]. Fundamentally, most complex networks
in the real world are highly dynamic. In each timestep, a
dynamic network is subject to a series of changes where
new nodes or edges either appear or some existing ones
vanish. Tracking and monitoring changes happening in
a community structure while the network is experiencing
a series of events (including adding or removing nodes or
edges), give an insight into the future functionality of the
system. Therefore, pursuing the evolution of community
structures over time in dynamic networks is more infor-
mative in comparison to its static counterparts, and it is
also more challenging. An online community detection
algorithm which is capable of updating the community
structure at each timestep, should be able to exploit the
history of the community structure instead of starting
from scratch. Fundamentally, most complex networks in
the real world are highly dynamic. In each timestep, a
dynamic network is subject to a series of changes where
new nodes or edges either appear or some existing ones
vanish. Tracking and monitoring changes happening in
a community structure while the network is experiencing
a series of events (including adding or removing nodes
or edges), give an insight into the future functionality of
systems. Therefore, pursuing the evolution of community
structure over time in dynamic networks is more infor-
mative in comparison to its static counterparts, and it is
also more challenging. An online community detection
algorithm which is capable of updating the community
structure at each timestep, should be able to exploit the
history of community structure instead of starting from
scratch. A major advance in the study of community de-
tection problem was made by Newman and Girvan who
introduced a quality measure Q, called modularity [6].
Given a community structure C = {c1, c2, ..., ck} in a cor-
responding network G = (V, E) with node set V and the
edge set E (n = |V |, m = |E|). The modularity is com-

puted as

(cid:88)

c∈C

Q =

L(c)

m

− (

d(c)
2m

)2,

(1)

where the sum runs over all communities. L(c) is the
number of edges inside community c and d(c) is the sum
of degrees of nodes in c. Modularity was designed to mea-
sure the strength of partition of a network into commu-
nities. High value of this measure implies a community
structure with dense communities which has more num-
ber of intra-edges within communities than the expected
value of such number in a random partition. Optimiz-
ing the modularity value is recognized as a NP-complete
problem [7]. Therefore, a vast number of works have been
devoted to optimizing this measure by employing approx-
imation and heuristic methods. The focus of this paper
is on extracting overlapping as well as non-overlapping
community structures from either static or dynamic com-
plex networks. We aim at, maximizing the modularity
value by establishing a game among the nodes of the
networks as players.
Initially, each player resides in a
singleton community and their goal is to maximize their
payoﬀs by choosing to reside in one or more communities.
The ideal state of the game is to reach a Nash equilibrium
point where no player has a tendency to deviate from her
situation by taking a unilateral action. In our context, a
Nash equilibrium point implies that players are not able
to gain a higher payoﬀ by changing their communities,
unilaterally. Further, an extremal optimization method
is employed in order to perform the search and direct the
game to the Nash equilibrium point.

II. RELATED WORK

There exist various techniques in literature which try
to extract good quality community structures from com-
plex networks. Some methods reduce the community de-
tection problem to the graph partitioning, in which the
graph is divided into a predeﬁned number of communities
such that the number of inter-edges crossing the network
is minimal[8]. One drawback of graph portioning is that,
generally, the number of communities is unknown. Hier-
archical clustering is another technique which considers
a hierarchical structure for the underlying networks and
applies an agglomerative [9] or divisive [10] method to
build a hierarchy of clusters. Hierarchical clustering tech-
nique requires a deﬁnition for similarity measure to group
similar nodes together. One advantage of this technique
is that there is no need for preliminary knowledge about
the size or number of clusters. However, since each level
of hierarchy corresponds to one partition of the network,
choosing the one as a true community structure without
any quality function is problematic.

In principle, most techniques try to deﬁne a quality
function and by maximizing it, obtain a high quality
community structure [11, 12]. Modularity (Q) is the best

2

known quality function used as the quality index of ex-
tracted community structure [6]. Modularity maximiza-
tion is NP-complete since the number of possible divi-
sions of a network into communities exceeds any power
of the network size (number of nodes). Therefore, many
works have been proposed to approximate Q and obtain
a fair value of this measure by using greedy [9, 13], ex-
tremal optimization [14], simulated annealing [15–17] or
spectral optimization methods [18, 19].
In most tech-
niques in literature, the extracted community structure
is a set of disjoint communities. However, it is more rea-
sonable to have overlapping community structure where
a node is not restricted to merely belonging to one sin-
gle community. A very popular method to extract over-
lapping community structure is the clique percolation
method (CPM) introduced in [20]. CPM builds a com-
munity structure by percolating a k-clique, i.e., a com-
plete graph of k nodes, over a network. In this context,
a community structure is the union of all k-cliques that
can be reached from each other through the percolation
process. Trivially, since the k-cliques can share nodes,
the resulting community structure is overlapping. One
limitation of CPM is to make an assumption about the
value k. Besides, another critical problem with CPM is
its failure networks which have fewer number of cliques.
Another well-known method for detection of overlap-
ping communities includes Link Partitioning that con-
siders communities as groups of links/edges rather than
nodes. In this method, a node is overlapping if its inci-
dent edges belong to more than one community [21, 22].
Moreover, non-negative matrix factorization is another
technique, borrowed from machine learning and used for
overlapping community detection [3, 4]. This method,
generally, possesses a high complexity due to matrix mul-
tiplication.

Despite the diﬃculty of static community detection
where the nodes and edges are ﬁxed, this problem has
also been studied on dynamic networks [23–27]. Sev-
eral evolutionary clustering methods [28] have been pro-
posed to extract evolving clusters, in such a way that the
changes occurring in each timestep are not dramatic and
in a user point of view the transitions seem smooth. In
another attempt, AFOCS [29] tries to categorize changes
happening in a network, and to take an appropriate ac-
tion, accordingly, to update the community structure. As
an example, adding a new edge inside an existing com-
munity is considered as one category.

A more recent approach for community detection in-
volves game-theoretic techniques which considers nodes
of networks as rational decision makers [27, 30, 31]. In
this line of work, nodes are considered as a set of play-
ers who decide to join or leave communities with respect
to their payoﬀs. Typically, at the start of community
detection games, players reside in singleton communities
[30, 31] or are distributed randomly to some number of
communities [27]. The choice of payoﬀ function plays
an important role in the quality of extracted community
structures. One possible payoﬀ function is the contribu-

tion of each individual to the global modularity value.
Therefore, by establishing a game among the nodes of
networks as the players, instead of directly optimizing a
global objective function, the players are appointed to
take actions and maximize it as they seek to maximize
their own payoﬀs. Since, generally, achieving the max-
imum possible payoﬀ does not exist, Nash equilibrium
is often employed as the solution concept in games with
no cooperation among the players. Nash equilibrium is
a situation where no player has the tendency to deviate
from her strategy while the strategy of others are kept
unchanged.

III. OVERLAPPING COMMUNITY

DETECTION GAME

The main contribution of this paper is to set up a game
with the ultimate goal of identifying overlapping commu-
nities which maximizes modularity Q in the extracted
communities using an extremal optimization method.
We refer to our method as Overlapping Communities Ex-
tremal Optimization (OCEO). In this method, each node
takes a role as a player. A pair of players are considered
neighbors if there is an edge between them. The neigh-
boring set of player pi is deﬁned as

Npi = {pj ∈ V | ∃ e(pi, pj) ∈ E}.

(2)

The number of players is ﬁnite and payoﬀ of each player
is a function of chosen action from the player’s strategy
space. The players can only act on their turn. The ele-
ments of the game are as follows:

• Players: {p1, p2, ..., pn} denotes the set of players.
Each player corresponds to a node in the set V .

• Strategies: The strategy space available to each
player pi is to join an adjacent community or leave
one of her current communities. A community c
is considered adjacent to a player if at least one of
the player’s neighbors resides in c. The set of all
adjacent communities for the player pi is deﬁned as

AC(pi) = {c ∈ C | (∃ pj ∈ Npi)
∧ (c ∈ COM(pj))},

(3)

where COM(i) is the set of all communities that
player i resides in. The strategy spaces of players
(the set of adjacent communities) are ﬁnite which
leads to a ﬁnite game.

• Payoﬀs: As stated, modularity Q is the global
variable to optimize. The idea is to appoint players
in the game to maximize it for us by deﬁning payoﬀ
function of players proportional to their contribu-
tions to the modularity Q. In [14], the contribution
of each individual i to modularity Q, by residing in
community c, is computed as

qi(c) = Li(c) − ki × d(c)
2m

,

(4)

3

where Li(c) is the number of edges player i has
inside community c, ki is the degree of the player
(degree of the associated node) and d(c) is the sum
of degrees of all players residing in c. The total
contribution of player i to the modularity is the
sum of qi(c) over all communities that i belongs to.
Speciﬁcally,

(cid:88)
(cid:80)
i qi where i ∈ V . In our game,
Note that Q = 1
2m
we deﬁne the payoﬀ function of each player i in
community c as the contribution of the mentioned
player to the global modularity by residing in c,
rescaled by the degree of the player:
− d(c)
2m

c∈COMi

ui(c) =

qi(c)

Li(c)

=

ki

ki

qi =

qi(c).

(5)

.

(6)

Due to the rescaling, the payoﬀ of each associated
player would be relative to their own degree and
also normalized in the interval [-1,1] with 1 being
the highest payoﬀ a player can gain. Therefore dur-
ing the game as long as the players attempt to im-
prove their payoﬀs, modularity Q is optimized.
The total payoﬀ of pi is the sum of all pi’ payoﬀs
in all communities pi resides in, which is computed
as

(cid:88)

c∈COM(i)

ui =

ui(c).

(7)

In order to obtain a high quality community struc-
ture which corresponds to a high value of modularity, a
heuristic search, based on extremal optimization is em-
ployed to perform a local search. Extremal optimiza-
tion algorithm, proposed by Boettcher and Percus [32],
ﬁnds high quality solutions for hard optimization prob-
lems by successively improving the undesirable compo-
nents of the sub-solution. In other words, extremal op-
timization works on a single candidate solution and per-
forms a local modiﬁcation to the worst components by
treating each of the components as species evolving lo-
cally through the process [33]. In the context of our game,
extremal optimization keeps two solutions, that each of
which corresponds to a community structure. One com-
munity structure preserves the best community structure
found so far, and the other evolves through some number
of iterations by performing a modiﬁcation in the strategy
of worst-payoﬀ players. OCEO is a non-cooperative game
since the players’ decisions are made independently and
there is no collaboration or coalition among the players.
One of the most fundamental ideas for non-cooperative
games is the concept of Nash equilibrium introduced by
Nash [34]. Nash equilibrium point of a game is a situation
in which no player can gain a higher payoﬀ by taking a
unilateral action. Existence of Nash equilibrium depends
on the choice of the payoﬀ function in a game with ﬁnite
number of players.

A. Existence of Nash Equilibrium in OCEO

In this section, we prove the existence of Nash equilib-
rium in OCEO by characterizing it as a potential game,
introduced by Monderer and Shapley [35]. In every ﬁ-
nite potential game, the existence of Nash equilibrium
is guaranteed [36]. First, we deﬁne the notions required
for the deﬁnition of potential games. Consider strategy
proﬁle χ = (χ1, χ2, ..., χn) as a set of players’ strategies
in the game in which χi denotes the strategy of player
i.
In our game χi is interpreted as a set of commu-
nities that player i resides in and χ is capable of re-
vealing the community structure of the underlying net-
work. A reduced strategy proﬁle χ−i is the strategy pro-
ﬁle χ for all players excluding the strategy of player i,
i.e., χ−i = (χ1, χ2, ..., χi−1, χi+1, ..., χn). We also use
(χ−i, χ(cid:48)
i) to denote a strategy proﬁle where the strategy
of player i is replaced with strategy χ(cid:48)
i.

Deﬁnition 1: A game Γ(V, χ,{ui}i∈V ) with ui : χ(cid:1)
potential function φ : χ(cid:1) R such that ∀i ∈ V , ∀x−i ∈

R, is called an exact potential game, if it possesses a
χ−i, ∀x(cid:48)

i) − φ(x) = ui(x−i, x(cid:48)

i) − ui(x),

(8)

i ∈ χi:
φ(x−i, x(cid:48)

which means the change in the payoﬀ of player i by tak-
ing a unilateral action x(cid:48)
i is equal to the change in the
global potential function. There is a weaker class of po-
tential games, called weighted potential which admits a
ω−potential function.
Deﬁnition 2: Let ω = {ωi}i∈V be a vector of positive
weights. Game Γ is weighted potential if it admits a

ω−potential function φ : χ(cid:1) R:

φ(x−i, x(cid:48)

i) − φ(x) = ωi(ui(x−i, x(cid:48)

i) − ui(x)).

(9)

Note that the exact potential games are subset of
weighted potential games with ωi = 1 for each player
i ∈ V . it is proved that in every ﬁnite exact or weighted
potential games, the best response dynamics, i.e., dynam-
ics in which each player chooses a strategy with highest
payoﬀ, given the strategies of the other players, converges
to a Nash equilibrium in a ﬁnite number of iterations [36].

Lemma 1: OCEO is a weighted potential game.

Proof: By considering the choice of payoﬀ function u,
deﬁned in Equation 7, and assigning weight vector ω =
for each player i ∈ V , it can be
(ωi)i∈V where ωi = 1
veriﬁed that OCEO accepts the following ω−potential
ki
function:

(cid:88)

c∈χ

φ(χ) =

L(c) − 1
2m

(cid:88)

kikj.

(10)

i<=j

COM (i)=COM (j)∈χ

Therefore, OCEO possesses at least one Nash equilib-
rium point and we aim at ﬁnding such a point which cor-
responds to the highest value of modularity Q. In order
to incorporate the Nash equilibrium concept into OCEO,
we use a domination relation, Nash ascendancy, intro-
duced by Lung, et al., [37] to direct the search performed

4

by extremal optimization towards the Nash Equilibrium
point. This relation enables the comparison of two so-
lutions in Nash sense and determines which solution is
closer to an equilibrium. Further, the use of this rela-
tion reduces the computational complexity of the search
in comparison with the deterministic Nash equilibrium
relation [37].
In [27], Nash ascendancy relation is de-
ﬁned for two non-overlapping community structures. By
extending this relation to overlapping community struc-
tures, community structure D precedes P in Nash sense,
if there are more number of players who prefer D over P :

ζ(D, P ) > ζ(P, D),

(11)

where ζ(D, P ) is the number of players who prefer their
communities assignments in community structure D over
P . More formally, ζ(D, P ) is deﬁned as

ζ(D, P ) = |{pi | ui(D) > ui(P )}|,

(12)
where |S| denotes cardinality of set S. In other words,
if D Nash ascends P , there are fewer number of play-
ers pi who can increase their payoﬀs by switching from
COMD(i) to COMP (i) than vice-versa and as a result,
D seems more stable than P in Nash-sense.

B. Extremal Optimization Over Overlapping

Community Detection Game

Assume initially each player resides in a singleton com-
munity. Community structure D is initialized as the set
of all these singleton communities. Our purpose is to
evolve D through some number of iterations by employ-
ing extremal optimization. Intuitively by giving the turn
to a player pi with the least payoﬀ in particular com-
munity ci ∈ COMD(i) to perform some actions, that
player is provided a chance to improve her total pay-
oﬀ by leaving ci or joining a new community available
on her strategy space. We deﬁne pairs of <pi, c>, in
which pi is a player who belongs to community c.
In
case of overlapping community structure, there are mul-
tiple pairs <pi, .>. In our method, we rank such pairs
<pi, .> according to their corresponding payoﬀi(.) and
keep all the sorted pairs in a pairs-pool. Thus, the ﬁrst
ranked pair corresponds to a player who has the least
payoﬀ in the associated community. In each iteration, γ
pairs are chosen based on a selection mechanism from the
pool. For each selected pair <pi, c>, player pi tries to im-
prove her payoﬀ by joining a new community or leaving
c. In our selection mechanism, we naturally favor pairs
with the lower payoﬀ. We apply truncation selection in
which the γ top-ranked pairs are selected from the pool.
Within the selected set of pairs there is no further selec-
tion and all corresponding players have a chance to take
action. To avoid early convergence, when the best solu-
tion has not been updated for η iterations, we switch from
truncation to tournament selection method for the next
iteration which we call that impulse iteration. A tour-
nament consists of picking δ (known as tournament size)

pairs from the pool using a uniform distribution proba-
bility. The winner of the tournament is the one with the
lower value of payoﬀ. Choosing γ pairs requires running
γ tournaments. The selection pressure is adjusted by the
tournament size. Small assignment of δ brings in more
randomness in the selection process and the pure ran-
domness occurs when δ = 1. On the other hand, larger
value of δ results in more selection of worst-payoﬀ pairs
which contradicts with our initial purpose of employing
tournament selection. In our method, η = 5 and δ = 3
work the best. OCEO proceeds as follows to evolve the
single community structure D:

1. Community structures D and P are initialized as
each player resides in a singleton community. Com-
munity structure P is used to store the best D
found in each iteration.

2. The payoﬀs of players, in each community they re-
side, belonging to community structure D are com-
puted.

3. Pairs of <i, c> are sorted according to the payoﬀ
of player i in c and are maintained in a pairs-pool.

4. γ pairs are chosen from the pairs-pool based on
truncation selection. The selection method is
switched to tournament selection if it is an impulse
iteration. For each selected pair <i, c> player i,
performs the following actions:

• Finds a community c(cid:48) among her strategy
space with the maximum payoﬀ by joining it
and joins c(cid:48) if ui(c(cid:48)) > min(ui(c), 0.2)
• Leaves c if ui(c) < 0.2

The selected players, by performing actions, mod-
ify the community structure D. Note that the pro-
posed algorithm is also capable of detecting non-
overlapping communities by forcing the players to
leave their current communities upon joining one
with higher payoﬀ.

5. If the resulting D Nash-ascends P , P is replaced
by D. This replacement implies that the resulting
D is the best solution found so far. Otherwise, D
keeps performing the search without being stored.

6. Steps 4-5 are repeated until either the maximum
number of iterations is reached or P has not been
updated for ψ iterations after the last update.
Upon termination, highly overlapped communities
in the community structure P will be merged to-
gether and it is returned as the solution.
In our
method, two communities are considered highly
overlapped if the division of common nodes to the
size of smaller community exceeds 70%.

In step 4, after players’ movements, payoﬀs of all in-
volved players need to be recalculated. When a player pi
joins/leaves community c, the payoﬀs of all players who

5

reside in c should be updated according to Equation 6,
and the pair <pi, c> should be inserted/deleted to/from
the pairs-pool. In each iteration, the average number of
players whose payoﬀs are imposed to change is γ|c|, where
|c| is the average number of players in one community. In
the worst case, γ|c| is of the order of O(|V |). Payoﬀs of
all other players remain unchanged. In order to keep the
pairs-pool sorted, there is no need to sort the whole pool
after applying the updates. Instead, we sort the updated
pairs and merge them into the pairs-pool which is already
sorted. In our method, we limit the players to reside in at
most κ communities at the same time. Consequently, the
maximum size of pairs-pool is κ|V | and the complexity
of keeping the pairs-pool updated, in each iteration, is of
the order of O(γ|c| logγ|c|
). The pseudocode
of the explained process is presented in Algorithm 1.

+γ|c| logκ|V |

C. Parameter Settings

There are a number of parameters whose values can
have a considerable inﬂuence in the performance of the
algorithm.

• Number of selected players (γ): This parameter
determines the number of players who will be pro-
vided the chance to play simultaneously and change
their strategies, in each iteration. The higher the
size of a network, the greater number of players
will be selected to play. Thus, parameter γ should
be proportional to the size of network. In an ideal
situation, no pair of selected players should be adja-
cent. For clariﬁcation, assume two selected players
A and B are adjacent who reside in communities c1
and c2, respectively. Obviously, c2 appears in the
strategy space of the player A and may persuade A
to join c2. Further, assume upon the joining of A to
c2, in the meantime, B leaves c2. In this case, how-
ever rare, A’s payoﬀ estimate would be impaired,
since A relies on the current strategy of her adja-
cent players. More nodes are adjacent to each other
when the network possesses a high average degree.
Thus, the number of selected players should be re-
lated to both size of network and also the average
degree of nodes:

γ =

N
ˆk

.

(13)

• Max-Iteration: As shown in Algorithm 1, the game
is repeated until either the maximum number of it-
erations reaches or the best solution obtained, does
not get updated for ψ iterations. We set the Max-
Iteration and ψ to 2000 and 100, respectively.

Algorithm 1 Overlapping Community Detection Game

1: Initialize P and D as each player resides in a singleton

community

6

2: Initialize κ = 3
3: for each player pi ∈ V do
ui(c) ← Li(c)− ki×d(c)

4:

2m

for each community c ∈ COM i(D) do

ki

end for

5:
6:
7: end for
8: Sort pairs <i, c> with respect to ui(c) and keep them in
9: temp ← 0, iteration ← 0
10: while iteration < M AX-Iteration do
11:
12:

temp >= 5 then
Pick and evict γ pairs from the pairs-pool based

the pairs-pool

if

13:
14:

15:
16:
17:

18:
19:
20:
21:

on tournament selection

else

Pick and evict γ pairs from the pairs-pool based

on truncation selection

end if
for each selected pair <i, c> do

space with the maximum payoﬀ by joining it

Player i ﬁnds a community c(cid:48) among her strategy
Player i joins c(cid:48) if ui(c(cid:48)) > min(ui(c), 0.2)
Player i leaves c if ui(c) < 0.2

end for
Recalculate payoﬀs of involved pairs and update the

pairs-pool

else

end if
if

if D Nash-ascends P then

D ← P
temp ← 0
temp ← temp + 1
temp ≡ ψ then
break

22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32: end while
33: Merge highly overlapped communities
34: return P

end if
iteration ← iteration + 1

D. OCEO Complexity

Let ˆk be the average degree of players in a network.
Then, the time complexity O(γˆk) is required for γ play-
ers to search through their strategy spaces and ﬁnd the
best communities to join. As stated above, the com-
plexity of eﬃciently updating the pairs-pool is of the
order of O(|V | log
). Further, in each it-
eration, for determining the Nash-ascendency relation,
payoﬀ of each involved player in the dummy and par-
ent communities need to be compared which results in
O(|V |) comparisons. Therefore,
in overall, the com-
plexity of OCEO is of the order of O(MAX-Iteration
×(|V | log

+|V | logκ|V |

+|V | logκ|V |

|V |

|V |

)).

(a)

(b)

FIG. 1: (a) A network of identical cliques as

communities connected by single edges, known as ring
network. Each clique is complete graph of size m, Km.

If the number of cliques exceeds

m, modularity

√

optimization merges each pair of connected cliques and
introduce it as a community (represented by dash lines)

(b) A closer view of a ring network with m = 4.

E. Resolution Limit and the solution mechanism

Modularity optimization is one of the most popular
methods for community detection. However it fails to
detect smaller communities than some scale and tends
to merge such communities to gain a higher modu-
larity value. This phenomenon, known as resolution
limit, merges two connected communities c1 and c2 when
d(c1) × d(c2) < 2m [31].
In fact, modularity is a sum
of terms and it establishes a trade-oﬀ between number of
terms (which corresponds to the number of communities)
and magnitude of each term.
Fortunato, et al. [38] designed a network, known as ring
network, which consists of identical cliques as modules
connected by single edges to two other modules to mani-
fest the drawback of modularity optimization. Ring net-
work, shown in Figure 1a, has a clear modular structure
where each community corresponds to a module/clique
and the expectation is that any community detection al-
gorithm, including a modularity optimization method ex-
tracts the true community structure. However, in this
type of network, if the number of modules exceeds
m,
modularity optimization fails to extract each module as
one community and merges two or more modules together
to increase the modularity value. For illustration pur-
poses, we consider a ring network with 50 modules where
each module is a complete graph K4. As can be com-
puted, this network has 200 nodes and 350 edges and the
number of modules exceeds
m. Figure 1b exhibits a
closer view of two arbitrary connected modules of this
network. A simplistic modularity optimization mecha-

√

√

7

(a)

(c)

(b)

(d)

FIG. 2: a) NMI of OCEO, Game, EO and CNM in the presence of small built-in communities. b) Comparison

among OCEO, EO and Game based on average NMI for detecting non-overlapping communities. Higher NMI value
indicates closer proximity to the ground-truth communities. c) Comparison among OCEO, AFOCS and Game for

detecting overlapping communities d) NMI of OCEO and AFOCS over a network evolving through 4 snapshots

nism suﬀers from resolution limit and fails to detect the
true modular structure.
It ﬁnds a partition in which
modules are merged together into groups of two, lead-
ing to the maximum modularity value (represented with
dotted lines). In our method, this issue is addressed and
the algorithm is capable of identifying each module as
a community. In this network, combining two or more
modules together into one community would increase the
modularity value. Therefore, there should exist some
number of players who make more contribution to the
modularity value and also gain a higher payoﬀ upon the
merger. Remember that the payoﬀ of each player is the
contribution of that individual rescaled by the degree
of that player. Considering the two modules, in Fig-
ure 1b, as separate communities, contribution of players
{2, 3, 6, 7} to modularity are all the same and equal to
q{2,3,6,7} = 3− 3×14
2×350 = 2.94. Accordingly, for the players
{1, 4, 5, 8}, it is equivalent to q{1,4,5,8} = 3− 4×14
2×350 = 2.92.
By merging these two modules together, the ﬁrst set of
players including players 1 and 8 experience a drop in
their contribution to the modularity (and also their pay-
oﬀs) since non of them have an edge to another module
while the sum of degree of the players in the resulted com-
munity has increased (an increase in the second term of
Equation 4). In this case q{2,3,6,7} = 3 − 3×28
2×350 = 2.88
and q{1,8} = 3 − 4×28
2×350 = 2.84. On the other hand, two
players 4 and 5 make a higher contribution due to the

existence of an edge connecting them, which is equal to
q{4,5} = 4− 4×28
2×350 = 3.84. The whole point is that the in-
crease in the contribution of players 4 and 5 are greater
than the loss of other players which leads to a higher
global modularity and as a result, the merger of the two
modules. However, OCEO is capable of detecting all
modules as communities, despite the fact that true com-
munity structure has the lower modularity value. The
mechanism to resolve this issue is embedded in Nash as-
cendancy relation where the preferences of all individuals
are taken into account, regardless of magnitude of the
change in their payoﬀs or contributions to the modular-
ity value. According to Equation 12, the true community
structure Nash ascends the one with the pairs of adjacent
modules as communities since there are fewer number of
players who prefer the false community structure. Fun-
damentally, the true partition is inherently more stable
in Nash sense. Hence, the Nash ascendancy relation, in
addition to directing the game to the Nash equilibrium
point, resolves the resolution limit in OCEO by consid-
ering the preferences of majority of players.

F. OCEO on Dynamic Networks

The dynamic network Gd = {G1, G2, ..., Gt} is deﬁned
as a set of network snapshots evolving over time. Each

Gi is a snapshot of the network Gd at timestep i. The
problem of community detection in a dynamic network
is to detect the community structure at each timestep by
using the extracted one of the previous snapshot. Our ap-
proach for dealing with the dynamic aspect is the same
as one proposed in [27]. At each timestep, when receiv-
ing the next snapshot, OCEO reinitializes the commu-
nity structure P such that each player resides in a sin-
gleton community while D keeps performing the search.
By keeping the D unchanged, the information from the
community structure of previous snapshot is utilized.

IV. EXPERIMENTAL RESULTS

In this section, we compare the eﬀectiveness of OCEO
on both synthetic and real-world networks with other
community detection algorithms.
In the following, we
describe datasets, metrics and analysis.

A. Datasets

Synthetic Networks: Lancichinetti, et al., present a
benchmark (LFR benchmark) for community detection
algorithms [39]. The LFR benchmark generates static
networks with built-in community structure. The conﬁg-
uration of generated networks depends on various user-
speciﬁed parameters. Number of nodes is N , k speciﬁes
the average degree of nodes and kmax is the upper bound
on degrees of nodes. The mixing parameter µ is the frac-
tion of edges that a node has to the nodes outside of
its community. Therefore, as we decrease µ we obtain
a clear set of communities with fewer number of inter-
edges. Later, the authors adapted the LFR benchmark
to generate overlapping communities [40]. Parameter On
speciﬁes the number of overlapping nodes and Om con-
trols the number of membership of overlapping nodes.

Real-world Networks: We present the performance
of OCEO on several real-world complex networks with
the absent of ground-truth communities: Zachary’s
karate club [41], Jazz musician network [42] and C. el-
egans metabolic network [14].

Metrics: Investigating the eﬀectiveness of community
detection algorithms involves deﬁning a similarity mea-
sure between the extracted community structure and the
partition one wishes to discover. The most popular mea-
sure to compare the similarity between the delivered com-
munity structure and the ground-truth communities is
Normalized Mutual Information (NMI). We have used an
implementation [43] of NMI measure made available by
McDaid, et al., for sets of overlapping communities [44].
Further, we use modularity value of obtained commu-
nity structures and number of identiﬁed communities as
additional measures when the ground-truth community
structure is unknown. For each dataset, we run OCEO
20 times due to the non-deterministic aspect of the game
and report the average values of NMI or modularity.

8

B. Analysis

In the ﬁrst experiment we show the eﬀectiveness of our
method for resolving the resolution limit problem on the
LFR benchmark graphs with implanted non-overlapping
communities where mixing parameter varies. The net-
works consist of 1,000 nodes and 5,000 edges where de-
gree of each node is exactly set to 10, and the size of each
built-in community is 10. These networks meet the reso-
lution limit condition wherein d(c1)× d(c2) < 2m for two
adjacent communities, c1 and c2. A strict modularity
optimization method fails to resolve the small commu-
nities which were unambiguously deﬁned. We compare
our method with three modularity optimization meth-
ods: EO [14], Game [30] and CNM [13]. The results
in Figure 2a, implies that EO and CNM fail to detect
the important substructure of the network. In the mean-
time, OCEO achieves a signiﬁcantly better result and
also outperforms Game. Among all these methods EO
achieves the highest modularity by merging most com-
munities into groups of two.

For investigating the performance of OCEO in de-
tecting non-overlapping communities, we contrast OCEO
with the following methods: Game, AFOCS and CNM.
The ﬁrst two algorithms are also capable of detecting
overlapping communities as well as non-overlapping ones.
However for the purpose of this experiment the overlap-
ping aspect is disabled. We compare these methods for
the increasing range of mixing parameter values in net-
works of N=5000 where (cid:104)k(cid:105) = 50. The size of implanted
communities lies between 50 and 200. As can be seen
in Figure 2b, EO and OCEO are very competitive and
both are far better than Game in detecting ground-truth
community structures.

Further, we extend our experiments to examine the
eﬃciency of our method on identifying overlapping com-
munities in static networks. Figure 2c displays the per-
formance of OCEO, Game and AFOCS over networks
of n = 1000, m= 7368 and (cid:104)k(cid:105) = 15. A node can be-
long to at most three distinct communities. The x-axis
presents fraction of nodes belonging to multiple commu-
nities in the corresponding networks with mixing pa-
rameter µ = 0.1. OCEO and Game clearly outper-
forms AFOCS in detecting overlapping community struc-
tures. Our method is able to achieve NMI over 90% when
the overlapping threshold is less than 0.2. However, as
the fraction of overlapping nodes increases, OCEO and
AFOCS tend to obtain a lower NMI. The reason is that
these methods merge two communities together when the
fraction of joint nodes is higher than a threshold and
consequently an increment in the number of overlapping
nodes leads to more merger of communities. In this ex-
periment the overlapping threshold is set to 0.6 for both
methods. It is worth mentioning that the running time of
OCEO is signiﬁcantly lower than the Game. The main
reason behind Game’s long running time is the way it
tries to reach a local equilibrium.
It randomly picks a
node and chooses the better operation among the possi-

Dataset Size QOCEO #COCEO QEO
#CEO
0.37 ± 0 6.6 ± 0.51 0.41 ± 0
4 ± 0
Zachary
0.44 ± 0 3.8 ± 0.12
0.44 ± 0
0.42 ± 0 24 ± 1.33 0.43 ± 0 8.75 ± 1.16

34
198
453

6 ± 0

Jazz

C. elegans

9

TABLE I: Modularity and number of communities obtained by OCEO and EO on diﬀerent real-world complex

networks

ble strategies (join, leave or switch). This process repeats
until no node can improve itself for a long number of it-
erations. The uperbound for this recurrence is of the
order of O(m2) which explains the slow convergence of
the Game.

We next observe the performance of OCEO on dy-
namic networks in comparison with AFOCS. The syn-
thesized network used for this experiment is generated
by LFR benchmark with n = 5000, m = 147324, wherein
10% of nodes are overlapping. The network is evolving
through four snapshots where each of which comprises
25% of data. The results are presented in Figure 2d. As
expected, both methods obtain increasing values of NMI
as the network evolves and perform very well by achiev-
ing NMI values being above 90% when received the last
snapshot.

In Table I, we present the performance of OCEO on
several real-world complex networks with the absence of
ground-truth communities:
the Zachary’s karate club,
Jazz musician network and C. elegans metabolic. We
have run OCEO and EO for 20 trials. According to these
results, compared to EO, OCEO is capable of identifying
a greater number of communities and at the same time
achieving a high modularity value.

V. CONCLUSION

In this paper, we have proposed a game-theoretic
method, OCEO, to detect communities in complex net-
works. To the best of our knowledge the proposed
method is the ﬁrst game-theoretic algorithm, capable of
extracting overlapping as well as non-overlapping com-
munities on either static or dynamic complex networks.
Nodes as players try to maximize their payoﬀs by choos-
ing one or more communities to join. The payoﬀ of play-
ers, in their communities is proportional to their contri-
butions to the modularity value Q. Therefore, global
modularity is optimized through the iterations, while
players improve their payoﬀs, and the game is propelled
to converge to a Nash-equilibrium point among the play-
ers. The choice of individuals’ payoﬀ function and also
the way the game drags itself to a Nash-equilibrium re-
solve the major issue of modularity optimization, resolu-
tion limit and distinguish our method from strict mod-
ularity optimization. Experimental results demonstrate
the eﬀectiveness of OCEO, in terms of obtaining high
values of NMI and modularity from both synthetic and
real-world networks in a reasonable time.

[1] S. Fortunato, Physics Reports 486, 75 (2010).
[2] J. Chen and B. Yuan, Bioinformatics 22, 2283 (2006).
[3] I. Psorakis, S. Roberts, M. Ebden, and B. Sheldon, Phys-

[14] J. Duch and A. Arenas, Physical review E 72, 027104

(2005).

[15] R. Guimera, M. Sales-Pardo, and L. A. N. Amaral, Phys-

ical Review E 83, 066114 (2011).

ical Review E 70, 025101 (2004).

[4] J. Yang and J. Leskovec (ACM, 2013) pp. 587–596.
[5] S. Zhang, R.-S. Wang, and X.-S. Zhang, Physica A: Sta-
tistical Mechanics and its Applications 374, 483 (2007).
[6] M. E. Newman and M. Girvan, Physical review E 69,

026113 (2004).

[7] U. Brandes, D. Delling, M. Gaertler, R. G¨orke, M. Hoe-
and D. Wagner, arXiv preprint

fer, Z. Nikoloski,
physics/0608255 (2006).

[16] D. He, J. Liu, D. Liu, D. Jin, and Z. Jia (IEEE, 2011)

pp. 1151–1155.

[17] J. Reichardt and S. Bornholdt, Physical Review E 74,

016110 (2006).

[18] S. White and P. Smyth (SIAM, 2005) pp. 76–84.
[19] M. E. Newman, Physical Review E 88, 042822 (2013).
[20] I. Der´enyi, G. Palla, and T. Vicsek, Physical review let-

ters 94, 160202 (2005).

[8] B. W. Kernighan and S. Lin, Bell system technical jour-

[21] Y.-Y. Ahn, J. P. Bagrow, and S. Lehmann, Nature 466,

nal 49, 291 (1970).

761 (2010).

[9] M. E. Newman, Physical review E 69, 066133 (2004).

[22] T. Evans and R. Lambiotte, Physical Review E 80,

[10] F. Radicchi, C. Castellano, F. Cecconi, V. Loreto, and
D. Parisi, Proceedings of the National Academy of Sci-
ences of the United States of America 101, 2658 (2004).
[11] Z. Li, S. Zhang, R.-S. Wang, X.-S. Zhang, and L. Chen,

016105 (2009).

[23] N. P. Nguyen, T. N. Dinh, Y. Xuan, and M. T. Thai

(IEEE, 2011) pp. 2282–2290.

[24] D. Greene, D. Doyle, and P. Cunningham (IEEE, 2010)

Physical review E 77, 036109 (2008).

pp. 176–183.

[12] M. Gong, B. Fu, L. Jiao, and H. Du, Physical Review E

[25] Y. Sun, J. Tang, J. Han, M. Gupta, and B. Zhao (ACM,

84, 056101 (2011).

2010) pp. 137–146.

[13] A. Clauset, M. E. Newman,

and C. Moore, Physical

review E 70, 066111 (2004).

[26] D. S. Bassett, M. A. Porter, N. F. Wymbs, S. T. Grafton,
J. M. Carlson, and P. J. Mucha, Chaos: An Interdisci-

10

plinary Journal of Nonlinear Science 23, 013142 (2013).
and A. Andreica, PloS one 9,

[27] R. I. Lung, C. Chira,

[35] D. Monderer and L. S. Shapley, Games and economic

behavior 14, 124 (1996).

e86891 (2014).

[28] D. Chakrabarti, R. Kumar,

and A. Tomkins (ACM,

2006) pp. 554–560.

[36] O. Candogan, A. Ozdaglar,

and P. A. Parrilo, ACM
Transactions on Economics and Computation 1, 11
(2013).

[29] N. P. Nguyen, T. N. Dinh, S. Tokala, and M. T. Thai

[37] R. I. Lung and D. Dumitrescu, Int. J. of Computers,

(ACM, 2011) pp. 85–96.

Communications & Control 3, 364 (2008).

[30] W. Chen, Z. Liu, X. Sun, and Y. Wang, Data Mining

[38] S. Fortunato and M. Barth´elemy, Proceedings of the Na-

and Knowledge Discovery 21, 224 (2010).

tional Academy of Sciences 104, 36 (2007).

[31] P. J. McSweeney, K. Mehrotra, and J. C. Oh, in Proceed-
ings of the 2012 International Conference on Advances in
Social Networks Analysis and Mining (ASONAM 2012)
(IEEE Computer Society, 2012) pp. 227–234.

[39] A. Lancichinetti, S. Fortunato, and F. Radicchi, Physical

review E 78, 046110 (2008).

[40] A. Lancichinetti and S. Fortunato, Physical Review E 80,

016118 (2009).

[32] S. Boettcher and A. Percus, Artiﬁcial Intelligence 119,

[41] W. W. Zachary, Journal of anthropological research , 452

275 (2000).

(1977).

[33] S. Boettcher and A. G. Percus, arXiv preprint

[42] P. M. Gleiser and L. Danon, Advances in complex sys-

math/9904056 (1999).

[34] J. Nash, Annals of mathematics , 286 (1951).

tems 6, 565 (2003).

[43] Https://github.com/aaronmcdaid/Overlapping-NMI.
[44] A. F. McDaid, D. Greene, and N. Hurley, arXiv preprint

arXiv:1110.2515 (2011).

