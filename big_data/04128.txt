Optimal Event-Driven Multi-Agent Persistent Monitoring of a Finite

Set of Targets

1Division of Systems Engineering, 2Department of Mechanical Engineering , 3Department of Electrical and Computer Engineering

Nan Zhou1, Xi Yu2, Sean B. Andersson1,2, and Christos G. Cassandras1,3

Boston University, Boston, MA 02215, USA

E-mail:{nanzhou,xyu,sanderss,cgc}@bu.edu

6
1
0
2

 
r
a

 

M
4
1

 
 
]

.

C
O
h
t
a
m

[
 
 

1
v
8
2
1
4
0

.

3
0
6
1
:
v
i
X
r
a

Abstract— We consider the problem of controlling the move-
ment of multiple cooperating agents so as to minimize an
uncertainty metric associated with a ﬁnite number of targets. In
a one-dimensional mission space, we adopt an optimal control
framework and show that the solution is reduced to a simpler
parametric optimization problem: determining a sequence of
locations where each agent may dwell for a ﬁnite amount of
time and then switch direction. This amounts to a hybrid system
which we analyze using Inﬁnitesimal Perturbation Analysis
(IPA) to obtain a complete on-line solution through an event-
driven gradient-based algorithm which is also robust with
respect to the uncertainty model used. The resulting controller
depends on observing the events required to excite the gradient-
based algorithm, which cannot be guaranteed. We solve this
problem by proposing a new metric for the objective function
which creates a potential ﬁeld guaranteeing that gradient values
are non-zero. This approach is compared to an alternative
graph-based task scheduling algorithm for determining an
optimal sequence of target visits. Simulation examples are
included to demonstrate the proposed methods.

I. INTRODUCTION

Systems consisting of cooperating mobile agents are often
used to perform tasks such as coverage control [1], [2],
surveillance, and environmental sampling. The persistent
monitoring problem arises when agents must monitor a
dynamically changing environment which cannot be fully
covered by a stationary team of agents. Thus, persistent
monitoring differs from traditional coverage tasks due to the
perpetual need to cover a changing environment [3], [4]. A
result of this exploration process is the eventual discovery
of various “points of interest” which, once detected, become
“targets” or “data sources” which need to be monitored.
This setting arises in multiple application domains ranging
from surveillance, environmental monitoring, and energy
management [5], [6] down to nano-scale systems tasked
to track ﬂuorescent or magnetic particles for the study of
dynamic processes in bio-molecular systems and in nano-
medical research [7], [8]. In contrast to [3], [4] where every
point in a mission space must be monitored, the problem we
address here involves a ﬁnite number of targets (typically
larger than the number of agents) which the agents must
cooperatively monitor through periodic visits.

* The work of Cassandras and Zhou is supported in part by NSF under
grants CNS-1239021, ECCS-1509084, and IIP-1430145, by AFOSR under
grant FA9550-15-1-0471, and by ONR under grant N00014-09-1-1051. The
work of Andersson and Yu is supported in part by the NSF through grant
ECCS-1509084.

Each target may be viewed as a dynamic system in itself
whose state is observed by agents equipped with sensing ca-
pabilities (e.g., cameras) and which are normally dependent
upon their physical distance from the target. The objective of
cooperative persistent monitoring in this case is to minimize
an overall measure of uncertainty about the target states. This
may be accomplished by assigning agents to speciﬁc targets
or by designing motion trajectories through which agents
reduce the uncertainty related to a target by periodically
visiting it (and possibly remaining at the target for a ﬁnite
amount of time). Viewed as an optimization problem, the
goal is to jointly minimize some cost function that captures
the desired features of the monitoring problem [9]. As long
as the numbers of agents and targets is small, it is possible
to identify sequences that yield a globally optimal solution;
in general, however, this is a computationally complex pro-
cedure which does not scale well [10].

Rather than viewing this problem as a scheduling task
which eventually falls within the class of traveling sales-
man or vehicle routing problems [11],
in this paper we
follow earlier work in [4] and introduce an optimal control
framework whose objective is to control the movement of
agents so as to collect information from targets (within agent
sensing ranges) and ultimately minimize an average metric of
uncertainty over all targets. An important difference between
the persistent monitoring problem in previous work [3] and
the current setting is that there is now a ﬁnite number of
targets that agents need to monitor as opposed to every point
in the mission space. In a one-dimensional mission space, we
show that the optimal control problem can be reduced to a
parametric optimization problem. In particular, every optimal
agent trajectory is characterized by a ﬁnite number of points
where the agent switches direction and by a dwelling time
at each such point. As a result, the behavior of agents under
optimal control is described by a hybrid system. This allows
us to make use of Inﬁnitesimal Perturbation Analysis (IPA)
[12], [13] to determine on-line the gradient of the objective
function with respect to these parameters and to obtain a
(possibly local) optimal trajectory. Our approach exploits
an inherent property of IPA which allows virtually arbitrary
stochastic effects in modeling target uncertainty. Moreover,
IPA’s event-driven nature renders it scalable in the number
of events in the system and not its state space.

A potential drawback of event-driven control methods is
that they obviously depend on the events which “excite” the

controller being observable. However, this is not guaranteed
under every feasible control: it is possible that no such events
are excited, in which case the controller may be useless.
The crucial events in our case are “target visits” and it is
possible that such events may never occur for a large number
of feasible agent trajectories which IPA uses to estimate a
gradient on-line. At the heart of this problem is the fact that
the objective function we deﬁne for a persistent monitoring
problem has a non-zero cost metric associated with only a
subset of the mission space centered around targets, while
all other points have zero cost, since they are not “points of
interest”. This lack of event excitation is a serious problem
in many trajectory planning and optimization tasks [14]–
[16]. In this paper we solve this problem using a new
cost metric introduced in [17] which creates a potential
ﬁeld guaranteeing that gradient values are generally non-zero
throughout the mission space and ensures that all events are
ultimately excited.

The rest of the paper is organized as follows. Section
II formulates the optimal control problem and Section III
presents a Hamiltonian analysis which characterizes the
optimal solution in terms of two parameter vectors specifying
switching points and associated dwelling times. In Section
IV we provide a complete solution obtained through event-
driven IPA gradient estimation, and solve the problem of
potential lack of event excitation through a modiﬁed cost
metric. Section V presents our graph-based scheduling ap-
proach and Section VI includes several simulation results.

II. PERSISTENT MONITORING PROBLEM FORMULATION
We consider N mobile agents moving in a one dimen-
sional mission space [0, L] ⊂ R. Let the position of the
agents at time t be sj(t) ∈ [0, L], j = 1, . . . , N, following
the dynamics:

˙sj(t) = uj(t)

(1)

i.e., we assume that the agent can control its direction and
speed. Without loss of generality, after proper rescaling, we
further assume that the speed is constrained by |uj (t)| ≤ 1,
j = 1, . . . , N. As will become clear, the agent dynamics
in (1) can be replaced by a more general model of the
form ˙sj(t) = gj(sn) + bjuj(t) without affecting the main
results of our analysis. Finally, an additional constraint may
be imposed if we assume that the agents are initially located
so that sj (0) < sj+1 (0), j = 1, . . . , N − 1, and we wish to
prevent them from subsequently crossing each other over all
t:

sj (t) − sj+1 (t) ≤ 0

(2)

The ability of an agent to sense its environment is modeled
by a function pj(x, sj) that measures the probability that
an event at location x ∈ [0, L] is detected by agent j. We
assume that pj(x, sj) = 1 if x = sj, and that pj(x, sj)
is monotonically nonincreasing in the distance |x − sj|,
thus capturing the reduced effectiveness of a sensor over
its range which we consider to be ﬁnite and denoted by
rj. Therefore, we set pj(x, sj) = 0 when |x − sj| > rj.
Although our analysis is not affected by the precise sensing

model pj(x, sj), we will limit ourselves to a linear decay
model as follows:

pj(x, sj) = max{1 − |sj − x|

rj

, 0}

(3)

Unlike the persistent monitoring problem setting in [3],
here we consider a known ﬁnite set of targets located at
xi ∈ (0, L), i = 1, . . . , M (we assume M > N to
avoid uninteresting cases where there are at least as many
agents as targets, in which case every target can be assigned
to at least one agent). We can then set pj(xi, sj (t)) ≡
pij(sj (t)) to represent the effectiveness with which agent
j can sense target i when located at sj (t). Accordingly, the
joint probability that xi ∈ (0, L) is sensed by all N agents
simultaneously (assuming detection independence) is

Pi(s(t)) = 1 − N(cid:89)

j=1

[1 − pij(sj(t))]

(4)

where we set s(t) = [s1 (t) , . . . , sN (t)]T. Next, we deﬁne
uncertainty functions Ri(t) associated with targets i =
1, . . . , M, so that they have the following properties: (i)
Ri(t) increases with a prespeciﬁed rate Ai if Pi (s(t)) = 0
(we will later allow this to be a random process {Ai(t)}),
(ii) Ri(t) decreases with a ﬁxed rate Bi if Pi (s(t)) = 1
and (iii) Ri(t) ≥ 0 for all t. It is then natural to model
uncertainty dynamics associated with each target as follows:
if Ri(t) = 0,Ai ≤ BiPi (s(t))
otherwise

Ai − BiPi (s(t))

(cid:26) 0

˙Ri(t) =

(5)
where we assume that initial conditions Ri(0), i = 1, . . . , M,
are given and that Bi > Ai > 0 (thus, the uncertainty strictly
decreases when there is perfect sensing Pi (s(t)) = 1).

Our goal is to control the movement of the N agents
through uj (t) in (1) so that the cumulative average uncer-
tainty over all targets i = 1, . . . , M is minimized over a ﬁxed
time horizon T . Thus, setting u (t) = [u1 (t) , . . . , uN (t)] we
aim to solve the following optimal control problem P1:

(cid:90) T

M(cid:88)

0

i=1

min
u(t)

J =

1
T

Ri(t)dt

(6)

subject
to the agent dynamics (1), uncertainty dynamics
(5), control constraint |uj(t)| ≤ 1, t ∈ [0, T ], and state
constraints (2). Figure 1 is a polling model version for
problem P1 where each target is associated with a “virtual
queue” where uncertainty accumulates with inﬂow rate Ai.
The service rate of this queue is time-varying and given
by BiPi (s(t)), controllable through the agent position at
time t. This interpretation is convenient for characterizing
the stability of such a system over a mission time T : For
0 BiPi(s(t))dt.
Alternatively, we may require that each queue becomes
empty at least once over [0, T ]. Note that this analogy readily
extends to two or three-dimensional settings.

each queue, we may require that(cid:82) T

0 Ai <(cid:82) T

generally involves the solution of a two-point-boundary-
value problem. However, we will next prove some structural
properties of an optimal trajectory, based on which we show
that it is fully characterized by a set of parameters, thus
reducing the optimal control problem to a much simpler
parametric optimization problem.

We begin by assuming that targets are ordered accord-
location so that x1 < ··· < xM . Let
ing to their
r = maxj=1,...,N{rj} and a = max{0, x1 − r}, b =
min{L, xM + r}. Thus, if sj(t) < x1− r or sj(t) > xM + r,
then it follows from (3) that pij(sj(t)) = 0 for all targets
i = 1, . . . , M. Clearly, this implies that the effective mission
space is [a, b], i.e.,

a ≤ sj(t) ≤ b,

j = 1, . . . , N

(12)
imposing an additional state constraint for P1. We will show
next that on an optimal trajectory every agent is constrained
to move within the interval [x1, xM ]. This implies that every
agent must switch its direction no later than reaching the ﬁrst
or last target (possibly after dwelling at the switching point
for a ﬁnite time interval). To establish this and subsequent
results, we will make a technical assumption that no two
events altering the dynamics in this system can occur at the
exact same time.
Assumption 1: Suppose that an agent switches direction
at θ ∈ [a, b]. For any j = 1, . . . , N, i = 1, . . . , M, t ∈ (0, T ),
and any  > 0, if sj(t) = θ, sj(t − ) > θ or if sj(t) = θ,
sj(t − ) < θ, then either Ri(τ ) > 0 for all τ ∈ [t − , t] or
Ri(τ ) = 0 for all τ ∈ [t − , t].
j (t) ≤ xM ,
t ∈ [0, T ], j = 1, . . . , N.
j (t) ≥ x1 for any agent j.
j (t0) = −1. In view of
Suppose that s∗
(12), assume that agent j reaches a point θ ∈ [a, x1) at
time t1 > t0 where it switches direction; we will show that
θ /∈ [a, x1) using a contradiction argument. There are two
cases to consider:
Case 1: θ = a. Assuming s∗
(t−
1 ) = 0 by a contradiction argument. If λ∗
λ∗
recall that u∗
Since the constraint a − sj(t) ≤ 0 is active, λ∗
experience a discontinuity so that
(t−
1 ) = λ∗

Proposition 1: In an optimal trajectory, x1 ≤ s∗
Proof. We ﬁrst prove that s∗

j (t1) = a, we ﬁrst show that
1 ) (cid:54)= 0,
(t−
(t−
1 ) > 0 from (11).
(t) may

(13)
where πj ≥ 0 is a scalar multiplier associated with the
constraint a−sj(t) ≤ 0. It follows that λ∗
(t−
1 )+
πj > 0. Since the Hamiltonian in (7) and the constraint
a − sj(t) ≤ 0 are not explicit functions of time, we have
[18] H∗(x(t−
1 ), u(t+
1 ))
which, under Assumption 1, reduces to

1 ) = −1, therefore λ∗

j (t0) = x1 and u∗

1 ) − πj
(t+

1 ), λ(t−

1 ), u(t−

1 )) = H∗(x(t+

1 ) = λ∗
(t+

1 ), λ(t+

j (t−

λ∗

sj

sj

sj

sj

sj

sj

sj

sj

sj

1 )u∗
(t+

j (t−
(t−
λ∗
1 ) = λ∗
1 )u∗
j (t+
(14)
1 )
1 ) ≥ 0 (since
j (t−
(t−
1 ) < 0. However, u∗
1 )u∗
Recall that λ∗
j (t+
1 ) ≥
1 )u∗
therefore λ∗
j (t+
(t+
the agent switches control),
sj
0 which violates (14). This contradiction implies that
(t−
˙λ∗
λ∗
1 ) =

(t−
1 ) = 0. Recalling (4) and (9), we get

sj

sj

sj

sj

Fig. 1: A 1D polling model interpretation of problem P1

III. OPTIMAL CONTROL SOLUTION

In this section, we derive properties of

the optimal
control solution of problem P1 and show that
it can
be reduced to a parametric optimization problem. This
will allow us to utilize an Inﬁnitesimal Perturbation Anal-
ysis (IPA) gradient estimation approach [12] to ﬁnd a
complete optimal solution through a gradient-based algo-
rithm. We begin by deﬁning the state vector x(t) =
[R1(t), ...RM (t), s1(t)...sN (t)] and associated costate vector
λ = [λ1(t), ..., λM (t), λs1 (t), ..., λsN (t)]. As in [3], since the
discontinuity in the dynamics of Ri(t) in (5), the optimal
state trajectory may contain a boundary arc when Ri(t) = 0
for some i; otherwise, the state evolves in an interior arc.
Thus, we ﬁrst analyze such an interior arc. Using (1) and
(5), the Hamiltonian is

M(cid:88)

M(cid:88)

N(cid:88)

H(x, λ, u) =

Ri(t) +

λi(t) ˙Ri(t) +

λsj (t)uj(t)

i=1

i=1

j=1

The costate dynamics are
˙λi(t) = − ∂H
∂Ri(t)

= −1,

λi(T ) = 0

(7)

(8)

M(cid:88)

i=1

(cid:40)

˙λsj (t) = − ∂H
∂sj (t)

=

λi (t) Bi

∂Pi(s(t))

∂sj(t)

,

λsj (T ) = 0

(9)
Applying the Pontryagin Minimum Principle to (7) with
u(cid:63)(t), t ∈ [0, T ), denoting an optimal control, a necessary
condition for optimality is

H (x(cid:63), λ(cid:63), u(cid:63)) =

uj∈[−1,1], j=1,...,N
from which it immediately follows that

min

H (x, λ, u)

(10)

u∗
j (t) =

1
−1

if λsj (t) < 0
if λsj (t) > 0

(11)

Note that there exists a possibility that λsj (t) = 0 over some
ﬁnite singular intervals [18], in which case u∗
j (t) may take
values in { −1, 0, 1}.

Similar to the case of the persistent monitoring problem
studied in [3], the complete solution requires solving the
costate equations (9), which in turn involves the determina-
tion of all points where Ri(t) = 0, i = 1, . . . , M. This

(cid:80)M
i=1,Ri(cid:54)=0 λ∗

i (t−

(cid:81)
d(cid:54)=j[1 − pid(s∗

d(t−

sj

sj

sj

sj

sj

sj

sj

sj

sj

sj

sj

sj

sj

sj

j (t+

1 ) Bi
rj

1 ) = −1, u∗

j (t−
1 ), λ(t−

i (t) > 0. Moreover, pid(s∗

1 ))]. Under As-
sumption 1, there exists δ > 0 such that during interval
(t1 − δ, t1), no Ri(t) ≥ 0 becomes active, hence no λ∗
i (t)
encounters a jump for i = 1, . . . , M and it follows from
d(t)) (cid:54)= 1 for at least
(8) that λ∗
some d (cid:54)= j since we have assumed that M > N. Thus,
(t) > 0, for all t ∈ (t1 − δ, t1). However, since
we have ˙λ∗
agent j is approaching a, there exists some δ(cid:48) < δ, such that
(t) ≥ 0. Thus
j (t) = −1 for all t ∈ (t1 − δ(cid:48), t1), and λ∗
u∗
for t ∈ (t1 − δ(cid:48), t1), we have λ∗
(t) ≥ 0 and ˙λ∗
(t) > 0.
(t−
This contradicts the established fact that λ∗
1 ) = 0. We
conclude that θ (cid:54)= a.
Case 2: θ ∈ (a, x1). Assuming s∗
j (t1) = θ, we
1 ) ≥ 0. Since the
still have u∗
Hamiltonian (7) is not an explicit function of time, we
have H∗(x(t−
1 )) = H∗(x(t+
1 ), λ(t+
1 ), u(t+
1 ))
which leads to (14) under Assumption 1. First, we assume
(t−
λ∗
1 ) < 0, we have λ∗
1 ) > 0
(t−
j (t−
1 )u∗
and the left hand side of (14) gives λ∗
1 ) < 0.
On the other hand, in order to satisfy (14), we must have
(t−
1 ) < 0. However, if λ∗
1 ) > 0 and λ∗
u∗
j (t+
(t+
1 ) > 0 and
(t1) < 0 and λ∗
1 ) < 0, then either ˙λ∗
λ∗
(t+
(t1) = 0, or
sj
λ∗
(t) experiences a discontinuity at t1. We show that neither
sj
condition is feasible. The ﬁrst one violates our assumption
(t1) (cid:54)= 0, while the second one is not feasible since at
that λ∗
t = t1 the constraint a−sj(t) ≤ 0 is not active. This implies
(t−
that λ∗
1 ) = 0. Again, under Assumption 1, the same
(t) ≥ 0
argument as in Case 1 can be used to show that λ∗
(t) > 0 for all t ∈ (t1 − δ(cid:48), t1). This contradicts
and ˙λ∗
(t−
the established fact that λ∗
1 ) = 0 and we conclude that
θ /∈ (a, x1).
Combining both cases, we conclude that θ /∈ [0, x1), which
j (t) ≥ x1. The same line of argument can be
implies that s∗
used to show that s∗

1 ) (cid:54)= 0. Since u∗
(t−

1 ), u(t−
j (t−

j (t) ≤ xM .(cid:4)
in conjunction with (11),

Proposition 1,

1 ) (cid:54)= 0, λsj (t+

leads to the
conclusion that the optimal control consists of each agent
moving with maximal speed in one direction until it reaches
a point in the interval [x1, xM ] where it switches direction.
However, the exclusion of the case λsj (t) = 0 allows the
possibility of singular arcs along the optimal
trajectory,
deﬁned as intervals [t1, t2] such that λsj (t) = 0 for all
t ∈ [t1, t2] and λsj (t−
2 ) (cid:54)= 0. The next result
establishes the fact that we can exclude singular arcs from an
agent’s trajectory while this agent has no target in its sensing
range.
Lemma 1: If |sj(t)− xi| > rj for any i = 1, . . . , M, then
j (t) (cid:54)= 0.
u∗
Proof. We proceed with a contradiction argument. Sup-
j (t1) − xi| >
pose that u∗
j (t) (cid:54)= 0 (without loss of
rj for all i = 1, . . . , M and that u∗
j (t3)−xi| = rj
generality, let u∗
for some i = 1, . . . , M and |s∗
j (t3 + ∆) − xi| < rj for
t3 + ∆ > t3 > t2. In other words, agent j eventually
reaches a target i that it can sense at t = t3. Assume that
j (t), t ∈ [t1, t3 + ∆] is replaced by u(cid:48)
u∗
j(t) as follows:
j(t) = 1 for t ∈ [t1, t3 + ∆ + t1 − t2] and u(cid:48)
u(cid:48)
j(t) = 0 for

j (t) = 0 for t ∈ [t1, t2] such that |s∗
j (t) = 1) for t > t2 so that |s∗

sj

sj

sj

(cid:48)

R(cid:48)

t3+∆+t1−t2

j(t3 + ∆ + t1 − t2) = s∗

i(t)dt ≤ (cid:82) t3+∆

j(t) is still no higher than that under u∗

(6) we have (cid:82) t3+∆

t ∈ (t3 +∆+t1−t2, t3 +∆]. In other words, the agent moves
to reach s(cid:48)
j (t3 + ∆) and then stops.
The two controls are thereafter identical. Then, referring to
R∗
i (t)dt
t3+∆+t1−t2
since under u(cid:48)
j(t) the agent may decrease Ri(t) over [t3 +
∆ + t1 − t2, t3] whereas under u∗
j (t) this is impossible since
j (t) − xi| > rj over this time interval. Since the cost in
|s∗
(6) is the same over [0, t3 + ∆ + t1 − t2) and (t3 + ∆, T ],
j (t) = 0 when |sj(t) − xi| > rj cannot be
it follows that u∗
j (t) = 0 for all t ∈ [0, T ], i.e., the agent
optimal unless u∗
never moves and never senses any target, in which case the
j (t).(cid:4)
cost under u
Based on Lemma 1, we conclude that singular arcs in
an agent’s trajectory may occur only while it is sensing a
target. Intuitively, this indicates that it may be optimal for
an agent to stop moving and dwell in the vicinity of one or
more targets that it can sense so as to decrease the associated
uncertainty functions to an adequate level before it proceeds
along the mission space. The next lemma establishes the fact
that if the agent is visiting an isolated target and experiences
a singular arc, then the corresponding optimal control is
u∗
j (t) = 0. An isolated target with position xi is deﬁned
to be one that satisﬁes |xi − xj| > 2r,for all j (cid:54)= i where
r was deﬁned earlier as r = maxj=1,...,N{rj}. Accordingly,
the subset I (cid:118) {1, . . . , M} of isolated targets is deﬁned as
I = {i : |xi−xj| > 2r, j (cid:54)= i ∈ {1, ..., M}, r = max
{rj}}
j=1,...,N
(15)
j (t) − xk| < rj for some j = 1, . . . , N
(t) = 0, t ∈ [t1, t2], then

and isolated target k ∈ I. If λ∗
u∗
j (t) = 0.
Proof. The proof is along the same line as Proposition III.3
in [3]. Assume that λ∗
(t) = 0 over a singular arc [t1, t2].
Let H∗ ≡ H(x∗, λ
∗
, u∗). Since the Hamiltonian along an
optimal trajectory is a constant, we have dH∗
dt = 0. Therefore,
recalling (7),

Lemma 2: Let |s∗

sj

sj

dH∗
dt

=

i (t) + ˙λ∗

i (t) ˙R∗

(cid:104) ˙R∗
M(cid:88)
(cid:104) ˙λ∗
N(cid:88)

i=1

sj

j=1

+

(t)u∗

(cid:105)

i (t)

i (t) + λ∗
i (t) ¨R∗
(cid:105)

(t) ˙u∗

j (t)

= 0

sj

j (t) + λ∗
N(cid:88)

=

i=1

(cid:105)

i (t)+

(t)u∗

λ∗
i (t) ¨R∗

(cid:104) ˙λ∗

i (t) = −1 from (8), this reduces to
M(cid:88)

and since ˙λ∗
dH∗
dt
(16)
Deﬁne S(t) = {j|λsj (t) = 0, ˙λsj (t) = 0} as the set of
agents in singular arcs at t and ¯S(t) as the set of all remaining
agents. If j ∈ S(t), then ˙λ∗
(t) ˙u∗
j (t) = 0.
If j ∈ ¯S(t), then λ∗
j (t) = ±1 and
˙u∗
j (t) = 0. Therefore, we rewrite (16) as

j (t) + λ∗
j (t) = 0 since u∗

j (t)+λ∗

(t) ˙u∗

(t)u∗

(t) ˙u∗

j (t)

j=1

sj

sj

sj

sj

sj

= 0

M(cid:88)

i=1

dH∗
dt

=

(cid:88)

j∈ ¯S(t)

λ∗
i (t) ¨R∗

i (t) +

˙λ∗

sj

(t)u∗

j (t) = 0

(17)

(cid:16)

1 −

Recalling (5), when Ri(t) (cid:54)= 0, we have ˙Ri = Ai − Bi

(cid:81)N

n=1

¨R∗
i (t) =

(cid:104)

1 − pij

(cid:0)sj(t)(cid:1)(cid:105)(cid:17)
= − N(cid:88)

˙R∗
i (t)

d
dt

u∗
j (t)Bi

j=1

. Therefore,

(cid:104)

(cid:89)

d(cid:54)=j

∂pij(s∗
∂s∗

j

j (t))

(cid:105)

1 − pid(s∗

d(t))

(cid:104)

(cid:89)

d(cid:54)=j

(18)

(cid:105)

1 − pid(s∗

d(t))

(19)

Moreover, from (9), we have

M(cid:88)

i=1,Ri(cid:54)=0

˙λ∗

sj

(t) =

λ∗
i (t)Bi

∂pij(s∗
∂s∗

j

j (t))

Combining (17)-(19), we get
dH∗
dt

=

i=1
Ri(cid:54)=0

− M(cid:88)
(cid:88)
(cid:88)

+

=

j∈ ¯S(t)

j=1

N(cid:88)
M(cid:88)
M(cid:88)

i=1
Ri(cid:54)=0

j∈S(t)

i=1
Ri(cid:54)=0

j (t)λ∗
u∗

i (t)Bi

∂pij(s∗
∂s∗

j

j (t))

1 − pid(s∗

d(t))

u∗
j (t)λ∗

i (t)Bi

u∗
j (t)λ∗

i (t)Bi

∂pij(s∗
∂s∗

j

j (t))

∂pij(s∗
∂s∗

j

j (t))

1 − pid(s∗

d(t))

1 − pid(s∗

d(t))

d(cid:54)=j

(cid:104)
(cid:89)
(cid:89)
(cid:89)

d(cid:54)=j

d(cid:54)=j

(cid:104)
(cid:104)

(cid:105)

(cid:105)
(cid:105)

j

j (t))

j (t))

= 0

(20)
|s∗
j (t) − xk| < rj and k
Since we have assumed that
j (t)) (cid:54)= 0 and
is an isolated target, it follows that pkj(s∗
pij(sj(t)) = 0 if i (cid:54)= k. Therefore, ∂pkj (s∗
(cid:54)= 0 and
∂s∗
∂pij (s∗
= 0 for all i (cid:54)= k and (20) reduces to
(cid:88)
∂s∗
addition Bi > 0 and (cid:81)

j∈S(t)
(21)
Observe that, from (8), λi(t) > 0 when Ri(t) (cid:54)= 0, t < T . In
d(t))] (cid:54)= 0. Therefore,
to satisfy (21) for all t ∈ [t1, t2], we must have u∗
j (t) = 0,
for all j ∈ S(t).(cid:4)

d(cid:54)=j[1 − pkd(s∗

∂pkj(s∗
∂s∗

1 − pkd(s∗

u∗
j (t)λ∗

(cid:89)

k(t)Bi

j (t))

d(t))

(cid:104)

(cid:105)

d(cid:54)=j

= 0

j

j

sj

that

j (t+

j (t−

j (t) = xk.

1 ) = u∗

2 ), then s∗

Proposition 2: Let |s∗

j (t) = xk, t ∈ [t1, t2].

We can further establish the fact

if an agent j
experiences a singular arc while sensing an isolated target
k, then the optimal point to stop is such that s∗
j (t) − xk| < rj for some j =
1, . . . , N and isolated target k ∈ I. If λ∗
(t) = 0, t ∈ [t1, t2],
and u∗
j (t) = 0, t ∈ [t1, t2].
Proof. By Lemma 2, we know that u∗
We use a contradiction argument similar to the one used in
j (t) = xk, t ∈ [t1, t2]. Suppose that
Lemma 1 to show that s∗
j (t−
u∗
j (t) =
xk − ∆ < xk. Note that at the end of the singular arc
u∗
1 ) = u∗
j (t+
j (t+
2 ). This implies that
j (t), t ∈ [t1, t2 + ∆] is
j (t2 + ∆) = xk. Assume that u∗
s∗
j(t) = 1 for t ∈ [t1, t1 + ∆]
replaced by u(cid:48)

1 ) = 1 (without loss of generality) and that s∗
2 ) = 1 since u∗

j(t) as follows: u(cid:48)

j (t−

t1

t1

R(cid:48)

i (t) < ˙R(cid:48)

j(t1 + ∆) = s∗

i(t)dt < (cid:82) t2+∆

referring to (6) we have (cid:82) t2+∆

j(t) = 0 for t ∈ (t1 + ∆, t2 + ∆]. In other words, the
and u(cid:48)
agent moves to reach s(cid:48)
j (t2 + ∆) = xk and
then stops. The two controls are thereafter identical. Then,
R∗
i (t)dt
since ˙R∗
i(t) due to (5) and the fact that pkj(sj(t))
is monotonically decreasing in |sj(t) − xk|. Since the cost
in (6) is the same over [0, t1) and (t2 + ∆, T ], it follows that
j (t) = xk−∆ cannot be optimal. The same argument holds
s∗
for any ∆ > 0, leading to the conclusion that s∗
j (t) = xk,
t ∈ [t1, t2]. A similar argument also applies to the case
j (t) = xk + ∆ > xk.(cid:4)
s∗
Finally, we consider the case with the state constraint (2).
We can then prove that this constraint is never active on an
optimal trajectory, i.e., agents reverse their directions before
making contact with any other agent.
Proposition 3: Under the constraint sj(t) ≤ sj+1(t), on
an optimal trajectory, sj(t) (cid:54)= sj+1(t) for all t ∈ (0, T ),
j = 1...N.
III.4 in [3] and is, therefore, omitted.(cid:4)

Proof. The proof is almost identical to that of Proposition

The above analysis, including Propositions 1-3, fully char-
acterize the structure of the optimal control as consisting
j (t) ∈ {−1, 0, 1} depending
of intervals in [0, T ] where u∗
entirely on the sign of λsj (t). Based on this analysis, we can
parameterize P1 so that the cost in (6) depends on a set of
(i) switching points where an agent switches its control from
uj(t) = ±1 to ∓1 or possibly 0, and (ii) dwelling times if
an agent switches from uj(t) = ±1 to 0. In other words, the
optimal trajectory of each agent j is totally characterized by
two parameter vectors: switching points θj = [θj1, θj2...θjΓ]
and dwelling times ωj = [ωj1, ωj2...ωjΓ(cid:48)] where Γ and Γ(cid:48)
are prior parameters depending on the given time horizon.
This deﬁnes a hybrid system with state dynamics (1), (5).
The dynamics remain unchanged in between events that
cause them to change, i.e., the points θj1, . . . , θjΓ above and
instants when Ri(t) switches from > 0 to 0 or vice versa.
Therefore, the overall cost function (6) can be parametrically
expressed as J(θ, ω) and rewritten as the sum of costs over
corresponding interevent intervals over a given time horizon:

(cid:90) τk+1(θ,ω)

K(cid:88)

M(cid:88)

k=0

τk(θ,ω)

i=1

J(θ, ω) =

1
T

Ri(t)dt

(22)

time. This will allow us to
where τk is the k-th event
apply IPA to determine a gradient ∇J(θ, ω) with respect
to these parameters and apply any standard gradient-based
optimization algorithm to obtain a (locally) optimal solution.

IV. INFINITESIMAL PERTURBATION ANALYSIS

As concluded in the previous section, optimal agent tra-
jectories may be selected from the family {s(θ, ω, t, s0)}
with parameter vectors θ and ω and a given initial condition
s0. Along these trajectories, agents are subject to dynamics
(1) and targets are subject to (5). An event (e.g., an agent
stopping at some target xi) occurring at
time τk(θ, ω)
triggers a switch in these state dynamics. IPA speciﬁes how
changes in θ and ω inﬂuence the state s(θ, ω, t, s0), as well

as event times τk(θ, ω), k = 1, 2, . . ., and, ultimately the cost
function (22). We brieﬂy review next the IPA framework for
general stochastic hybrid systems as presented in [12].
Let {τk(θ)}, k = 1, . . . , K, denote the occurrence times
of all events in the state trajectory of a hybrid system with
dynamics ˙x = fk(x, θ, t) over an interval [τk(θ), τk+1(θ)),
where θ ∈ Θ is some parameter vector and Θ is a given
compact, convex set. For convenience, we set τ0 = 0
and τK+1 = T . We use the Jacobian matrix notation:
x(cid:48)(t) ≡ ∂x(θ,t)
, for all state and event
time derivatives. It is shown in [12] that
x(cid:48)(t) +

k ≡ ∂τk(θ)

x(cid:48)(t) =

and τ(cid:48)

∂fk(t)

∂fk(t)

(23)

∂θ

∂θ

∂θ
for t ∈ [τk, τk+1) with boundary condition:

∂x

d
dt

x(cid:48)(τ +

k ) = x(cid:48)(τ−

k ) + [fk−1(τ−

k ) − fk(τ +

k )]τ(cid:48)

k

(24)

k ) in (24), we need to determine τ(cid:48)

for k = 0, ...K. In order to complete the evaluation of
x(cid:48)(τ +
k. If the event at τk
is exogenous, τ(cid:48)
k = 0. However, if the event is endogenous,
there exists a continuously differentiable function gk : Rn ×
Θ → R such that τk = min{t > τk−1 : gk (x (θ, t) , θ) =
0} and

+

∂gk
∂x

∂gk
∂θ

k = −[
τ(cid:48)

k )]−1(

x(cid:48)(τ−
k ))

as long as ∂gk

as L(x, θ, t), so the cost

fk(τ−
∂gk
(25)
∂x
k ) (cid:54)= 0. (details may be found in [12]).
∂x fk(τ−
Denote the time-varying cost along a given trajectory
interval
is
k=0 Jk(x, θ). Differentiating and applying the
terms of the
k are mutually canceled with τ0 =

is Jk(x, θ) = (cid:82) τk+1
J(x, θ) = (cid:80)K

Leibnitz rule with the observation that all
form L(x(τk), θ, τk)τ(cid:48)
0, τK+1 = T ﬁxed, we obtain

L(x, θ, t)dt and the total cost

in the k-th interevent

τk

(cid:90) τk+1
(cid:90) τk+1

∂
∂θ

τk

K(cid:88)
K(cid:88)

k=0

∂J(x, θ)

∂θ

=

=

L(x, θ, t)dt

∂L(x, θ, t)

x(cid:48)(t) +

∂L(x, θ, t)

∂x

∂θ

τk

k=0

In our setting, we have L(x, θ, t) = (cid:80)M

i=1 Ri(t) from
the state
(22), which is not an explicit
x(t) = [R1(t), ...RM (t), s1(t)...sN (t)]. Thus, the gradient
∇J(θ, ω) = [ ∂J(θ,ω)

function of

∂ω ]T reduces to

, ∂J(θ,ω)

∂θ

dt

(26)

K(cid:88)

M(cid:88)

(cid:90) τk+1(θ,ω)

k=0

i=1

τk(θ,ω)

∇J(θ, ω) =

1
T

∇Ri(t)dt

(27)

where ∇Ri(t) = [ ∂Ri(t)

∂θ , ∂Ri(t)

∂ω ]T.

Applying (23)(24)(25), we can evaluate ∇Ri(t). In con-
trast to [3], in our problem agents are allowed to dwell on
every target and IPA will optimize these dwelling times.
Therefore, we need to consider all possible forms of control
sequences: (i) ±1 → 0, (ii) 0 → ±1, and (iii) ±1 → ∓1.
We can then obtain from (5):

G ∂sj (τ +
k )
∂θjξ

(cid:40)0
(cid:40)0
(cid:2)1 − pi(sd(t))(cid:3) ∂pi(sj )

G ∂sj (τ +
k )
∂ωjξ

∂sj

∂Ri(t)
∂θjξ

=

∂Ri(τ +
k )
∂θjξ

−

if Ri(t) = 0, Ai < BiPi(s(t))

(t − τk) otherwise

(28)

∂Ri(t)
∂ωjξ

=

∂Ri(τ +
k )
∂ωjξ

−

if Ri(t) = 0, Ai < BiPi(s(t))

(t − τk) otherwise

(cid:81)

d(cid:54)=j

where G = Bi
± 1

.

(29)
=

and ∂pi(sj )

sj

rj
First, let us consider the events that cause switches in
˙Ri(t) in (5) at time τk. For these events, the dynamics of
sj(t) are continuous so that ∇sj(τ−
k ). For target
i,

k ) = ∇sj(τ +

∇Ri(τ−
k )



0

∇Ri(τ +

k ) =

if
˙Ri(τ +
if
˙Ri(τ +

˙Ri(τ−
k ) = 0,
k ) = Ai − BiPi(s(τ +
k )).
k ) = Ai − BiPi(s(τ−
˙Ri(τ−
k ) = 0.

k )),

Second,

(30)
let us consider events that cause switches in
˙sj(t) = uj(t) at time τk. For these events, the dynamics
of Ri(t) are continuous so that ∇Ri(τ−
k ). In
and ∂sj (τ +
order to evaluate (28) and (29), we need ∂sj (τ +
k )
k )
.
∂ωjξ
∂θjξ
Clearly, these are not affected by future events and we only
have to consider the current and prior control switches. Let
θjξ and ωjξ be the current switching point and dwelling time.
Again, applying (23)(24)(25), we have
k ) = 0

k ) = ∇Ri(τ +

Case 1: uj(τ−

(τ +

if l = ξ
if l < ξ

k ) =
k ) = 0 for all l ≤ ξ
(τ +

(cid:40)
k ) = ±1, uj(τ +
1
∂sj
∂θjl
0
∂sj
∂ωjl
k ) = 0, uj(τ +
k ) − uj(τ +
(τ−
∂sj
∂θjl
sgn(θjl − θj(l−1))
k ) − uj(τ +
(τ−
∂sj
k )
∂θjl
−sgn(θj(l+1) − θjl)

(cid:1) if l = ξ
k )sgn(cid:0)θjξ − θj(ξ−1)
k ) = ±1
(cid:104)
(cid:105)

(31)

(32)

if l < ξ

Case 2: uj(τ−

∂sj
∂θjl

(τ +

k )=



∂sj
∂ωjl
Case 3: uj(τ−

k ) = −uj(τ +
(τ +
k )
k ) = ±1, uj(τ +
k ) = ∓1

for all l ≤ ξ

(cid:40)

∂sj
∂θjl

(τ +

k ) =

2
− ∂sj

∂θjl

if l = ξ
if l < ξ

(τ−
k )

(33)
(34)

(35)

Details of these derivations can be found in [3]. An
important difference arises in Case 2 above, where τk =
|θj1 − a| + ωj1 + ... + |θjξ − θj(ξ−1)| + ωjξ. We eliminate
the constraints on the switching location that θjξ ≤ θj(ξ−1)
if ξ is even and θjξ ≥ θj(ξ−1) if ξ is odd.

The event excitation problem. Note that all derivative
times
updates above are limited to events occurring at
τk(θ, ω), k = 1, 2, . . .. Thus, this approach is scalable in
the number of events characterizing the hybrid system, not
its state space. While this is a distinct advantage, it also
involves a potential drawback. In particular, it assumes that
the events involved in IPA updates are observable along
a state trajectory. However, if the current trajectory never
reaches the vicinity of any target so as to be able to sense
it and affect the overall uncertainty cost function, then any
small perturbation to the trajectory will have no effect on the
cost. As a result, IPA will fail as illustrated in Fig. 2: here,
the single agent trajectory s1(θ, ω, t) is limited to include
no event. Thus, if a gradient-based procedure is initialized
with such s1(θ, ω, t), no event involved in the evaluation of
∇Ri(t) is “excited” and the cost gradient remains zero.

Fig. 2: An example of no event excitation leading to a failure
of IPA ﬁnding an optimal agent trajectory. The yellow bar is the
segment of the space covered by the agent.

In order to overcome this problem, we propose a modiﬁ-
cation of our cost metric by introducing a function V (·) with
the property of “spreading” the value of some Ri(t) over all
points w ∈ Ω ≡ [0, L]. Recalling Proposition 1, we limit
ourselves to the subset B = [x1, xM ] ⊂ Ω. Then, for all
points w ∈ B, we deﬁne V (w, t) as a continuous density
function which results in a total value equivalent to the
i=1 Ri(t). We impose
the condition that V (w, t) be monotonically decreasing in
the Euclidean distance (cid:107)w − xi(cid:107). More precisely, we deﬁne
d+
which ensures that d+
i (w) = r > 0
is ﬁxed for all points within the target’s vicinity, w ∈
[xi − r, xi + r]. We deﬁne

weighted sum of the target values (cid:80)M
i (w) = max(cid:0)(cid:107)w − xi(cid:107), r(cid:1) where r = minj=1,...,N{rj}

i (w) ≥ r. Thus, d+

V (w, t) =

αiRi(t)
d+
i (w)

(36)

Note that V (w, t) corresponds to the “total weighted reward
density” at w ∈ B. The weight αi may be included to capture
the relative importance of targets, but we shall henceforth
set αi = 1 for all i = 1, . . . , M for simplicity. In order to
differentiate points w ∈ B in terms of their location relative
to the agents states sj(t), j = 1, . . . , N, we also deﬁne the
travel cost function

Q(w, s(t)) =

(cid:107)sj(t) − w(cid:107)

(37)

Using these deﬁnitions we introduce a new objective function

j=1

M(cid:88)

i=1

N(cid:88)

(cid:90) τk+1
(cid:90) τk+1

τk

(cid:90)
(cid:90)

∂
∂θ

=

component, which is added to the objective function in (6):

J2(t) =

Q(w, s(t))V (w, t)dw

(38)

(cid:90)

B

The signiﬁcance of J2(t) is that it accounts for the movement
of agents through Q(w, s(t)) and captures the target state
values through V (w, t). Introducing this term in the objective
function in the following creates a non-zero gradient even if
the agent trajectories are not passing through any targets. We
now deﬁne the metrics in (22) as J1(t) and incorporate the
parametric J2(t) as an addition.

(cid:2)J1(θ, ω, t)+e−βtJ2(θ, ω, t)(cid:3)dt

(cid:90) T
where J1(θ, ω, t) =(cid:80)M

J(θ, ω, T ) =

θ∈Θ,ω≥0

min

1
T

0

(39)
i=1 Ri(t) is the original uncertainty
metric. This creates a continuous potential ﬁeld for the
agents which ensures a non-zero cost gradient even when the
trajectories do not excite any events. This non-zero gradient
will induce trajectory adjustments that naturally bring them
toward ones with observable events. The inclusion of the
factor e−βt with β > 0 is included so that as the number of
IPA iterations increases, the effect of J2(θ, ω, t) is dimin-
ished and the original objective is ultimately recovered. The
IPA derivative of J2(θ, ω, t) is

Q(w, θ, ω, s(t), t)V (w, θ, ω, t)dw

B

(cid:104) ∂Q(w, θ, ω, s(t), t)

V (w, θ, ω, t)

τk

B

∂θ

+ Q(w, θ, ω, s(t), t)

∂V (w, θ, ω, t)

∂θ

dw

(cid:105)

(40)

(41)

∂θ

i=1

the second part

if no events occur,

is zero, since (cid:80)M

where the derivatives of Q(w, θ, ω, s(t), t) and V (w, θ, ω, t)
are obtained following the same procedure described previ-
ously. Before making this modiﬁcation, the lack of event
excitation in a state trajectory results in the total derivative
(27) being zero. On the other hand, in (41) we observe
in the integral,
that
which involves ∂V (·)
∂Ri(t)
∂θ = 0 at all
t. However, the ﬁrst part in the integral does not depend
on events, but only the sensitivity of Q(w, θ, ω, s(t), t)
in (37) with respect to the parameters θ, ω. As a result,
agent trajectories are adjusted so as to eventually excite
desired events and any gradient-based procedure we use in
conjunction with IPA is no longer limited by the absence of
event excitation.
IPA robustness to uncertainty modeling. Observe that
the evaluation of ∇Ri (t), hence ∇J(θ, ω), is independent
of Ai, i = 1, . . . , M, i.e., the parameters in our uncer-
tainty model. In fact, the dependence of ∇Ri (t) on Ai,
i = 1, . . . , M, manifests itself through the event times τk,
k = 1, . . . , K, that do affect this evaluation, but they, unlike
Ai which may be unknown, are directly observable during
the gradient evaluation process. Thus,
the IPA approach
possesses an inherent robustness property: there is no need
to explicitly model how uncertainty affects Ri(t) in (5).
Consequently, we may treat Ai as unknown without affecting

the solution approach (the values of ∇Ri (t) are obviously
affected). We may also allow this uncertainty to be modeled
through random processes {Ai(t)}, i = 1, . . . , M. Under
mild technical conditions on the statistical characteristics of
{Ai(t)} [12], the resulting ∇J(θ, ω) is an unbiased estimate
of a stochastic gradient.

V. GRAPH-BASED SCHEDULING METHOD

While the IPA-driven gradient-based approach described
in Sec. IV offers several compelling advantages, it is not
guaranteed to ﬁnd a global optimum. In addition, it has been
shown that in mission spaces of dimension greater than one,
optimal trajectories cannot be described parametrically [4].
This motivates the use of an alternative approach where the
targets are viewed as discrete tasks, leading naturally to a
graph-based description of the problem [6], [19]–[22]. This
higher level of abstraction allows one to guarantee an optimal
solution,
increase in
computational complexity. It is worth highlighting, however,
that the complexity of such schemes is driven by the size
of the graph and they are thus essentially invariant to the
underlying dimensionality of the mission space.

the cost of a signiﬁcant

though at

Fig. 3: Time sequence of a single agent on a given trajectory. The
ti are the time points where the agent begins to move to the next
target in the sequence. Each move takes ∆ti units of time followed
by a dwell period of ∆di units of time during which information
is collected from the target.

j , t2

As illustrated in Fig. 3, our approach to the discrete setting
is to divide the overall planning time horizon T for agent j
j }, j =
into a sum of Kj consecutive time steps {t1
j = 0. The dependence on j indicates that
1, . . . , N, with t1
each agent may have a different discretization. We denote
= T . Each step k ∈
the end of the K-th step as tK+1
{1, ..., Kj} begins with a travel stage where the agent moves
to a particular target i. Under the assumption that during the
transition between targets each agent moves at its maximum
speed of |uj| = 1, the travel time is

j , ..., tKj

j

∆tk

j = |sk

j ) − xi|.

j (tk

(42)

Upon arriving at a target, the agent dwells for a time ∆dk
j .
Note that due to the range-based nature of the sensing, the
uncertainty actually begins to decrease before the arrival of
the agent at the target and continues to decrease after the
agent has departed until the target is out of the sensing range.
The problem of optimizing the uj to minimize the average
uncertainty over all the targets has been translated into a
mixed integer programming (MIP) problem to select the
sequence of targets and the dwell time at each target. Letting
ji be a binary variable denoting whether agent j is assigned
ak

to target i at time step k, this MIP is

(cid:90) T

M(cid:88)

i=1

0

min
ji,∆dk
ak
j

J =

1
T

Ri(t)dt

M(cid:88)

i=1

ak
ji = 1,

∀j, k

s.t. ak

ji ∈ {1, 0},
K(cid:88)

∆tk

j + ∆dk

j ≤ T,

∀j.

(43)

(44)

(45)

k=1

Note that we assume that each agent is assigned to a
maximum of only one target at any one time. The IPA-driven
approach has no such restriction. We break the solution of
this problem into three parts: enumeration of all feasible
trajectories, calculation of the cost of the feasible trajectories,
and then selection of the optimal trajectory based on those
costs. We focus on the case of a single agent for simplicity
of description before generalizing to the multiple agent case.
The ﬁrst part, namely determining feasible trajectories, is
straightforward. Given the ﬁxed time horizon T , the target
locations, the locations of the agent at the start of the time
horizon, and the maximum speed of the agent, a feasible
trajectory is one where the sequence of targets can all be
visited within the time horizon. Similarly,
the third part
simply involves comparing the trajectories and selecting the
one with the minimal cost.

In the second part, the cost of each feasible trajectory
must be determined. Suppose we have a given feasible
trajectory with K targets in its sequence. Note that because
a trajectory may include multiple visits to the same target,
K may be larger than m (and may be much larger for large
time horizons and small m). Let {i1, i2, . . . , iK} denote the
indices of the targets in the sequence. From (43), the cost of
this trajectory is given by the optimization problem

(cid:90) T

M(cid:88)

Ri(t)dt

i=1

0

∆tk + ∆dk ≤ T.

J =

min
∆dk
j

s.t.

1
T

K(cid:88)

k=1

Our approach to solving this optimization problem is to setup
a recursive calculation. As illustrated in Fig. 3, since the
travel times ∆ti are completely determined by the sequence
alone, optimizing over the dwell
to
optimizing the switching times ti. Assume for the moment
that the switching times through tK−1 have been determined
(and thus the ﬁrst K − 2 dwell times, ∆d1, . . . , ∆dK−2 are
known). The two ﬁnal dwell times are completely determined
by selecting the time tK at which to switch the agent from
target iK−1 to target iK. This then gives us a simple single
variable optimization problem

times is equivalent

J =

min
∆TK

1
∆T

(RiK−1 (t) + RiK (t)) dt

where ∆T = T − tK−1. This allows the ﬁnal switching
time to be expressed as a function of the previous time

(cid:90) T

tK−1

tK = tK(tK−1). Repeating this leads to an expression of the
optimal switching times as a nested sequence of optimization
functions which can be solved numerically.

This same optimization procedure can be generalized to
the case of multiple agents. The primary challenge is that
the set of feasible trajectories, and the calculation of the
cost of those trajectories, quickly becomes intractable since
all possible combinations of assignments of multiple agents
must be considered. The computational complexity can be
mitigated somewhat by taking advantage of known properties
of optimal solutions (as described in Sec. III).

Since the computationally complexity is exponential in the
length of the time horizon, this approach is most feasible over
short horizons. In prior work on linear systems, it was shown
that an appropriately deﬁned periodic schedule is sufﬁcient
to ensure the entire system remains controllable [23], [24].
In the current context, this translates to being able to keep
the uncertainty of each of the targets arbitrarily close to zero.
Motivated by this, we typically apply our discrete approach
over a relatively short time horizon. If the resulting optimal
trajectory is periodic, we extend it to longer horizons by
simply repeating it.

VI. SIMULATION EXAMPLES

To demonstrate the performance of the gradient-based
algorithm using the IPA scheme described in Sec. IV, we
present two sets of numerical examples. The ﬁrst set uses
deterministic target locations and dynamics. The results are
compared against the optimal found by the discrete schedul-
ing algorithm of Sec. V. The second set demonstrates the
robustness of the IPA scheme with respect to a stochastic
uncertainty model.

The ﬁrst simulation consists of a single agent performing
a persistent monitoring task on three targets over a time
horizon of 100 seconds. The targets are located at positions
x1 = 5, x2 = 10, x3 = 15 and their uncertainty dynamics
in (5) are deﬁned by the parameters Ai = 1, Bi = 5, and
Ri(0) = 1 for all i. The agent has a sensing range of 2 and
is initialized with s(0) = 0, u(0) = 1. The results from the
IPA gradient descent approach are shown in Fig. 4. The top
image shows the optimal trajectory of the agent determined
after 1000 iterations of the IPA gradient descent while the
bottom shows the evolution of the overall cost as a function
of iteration number. The agent is moving through a periodic
cycle of x1 → x2 → x3 → x2 → x1 ··· , dwelling for a short
time at each target before moving to the next. Notice that the
agent dwells for a shorter time at the center target since it
visits that location twice per cycle. The second image in the
ﬁgure shows that gradient descent converges within the ﬁrst
100 iterations. This simulation aims to test the event driven
IPA scheme with the discrete scheduling algorithm which
yields optimal but suffers from computational intensity. Thus,
we start with a short time horizon T = 100s. Event-driven
IPA optimizes the trajectory fast but
the convergence is
somewhat unstable due to the lack of events within a short
time horizon. The ﬁnal cost is 26.11. The bottom images in
Fig. 4 show the evolution of the target uncertainties.

Fig. 4: A single agent monitoring three targets using the IPA-
driven gradient descent algorithm. (top image) Agent trajectory.
(second image) Calculated cost as a function of iteration in the
gradient descent. The ﬁnal cost is 26.11. (bottom images) Target
uncertainties along the trajectory.

The corresponding result based on the discrete setting of
Sec. V is essentially the same with the agent moving through
the three targets in a periodic fashion as shown in Fig. 5. The
only deviation from the IPA scheme occurs at the end of the
horizon where the discrete approach returns to the center
target. The ﬁnal cost was 25.07, matching that of the IPA
approach and thus verifying the approximate optimality of
the solution found in Fig. 4.

The next simulation involves two agents and ﬁve targets
over a time horizon of 500 seconds. The targets are located
at x1 = 5, x2 = 7, x3 = 9, x4 = 13, x5 = 15. The
uncertain dynamics were the same as in the single agent,
three target case. As before, the agents have a sensing range
of 2 and are initialized at s1(0) = s2(0) = 0, with u1(0) =
u2(0) = 1. The results from the event-driven IPA gradient
descent approach are shown in Fig. 6. The solution is again
periodic with the agents dividing the targets into two groups.
Notice that the single agent on targets x4 and x5 is able to
keep the uncertainties very close to zero since the targets
are quite close relative to the sensing range of the agent.
The other agent is able to hold its middle target (x2) close
to zero since it is visited more often. The uncertainties of
targets x1 and x3 rise and decrease to zero constantly. The
corresponding result based on the discrete setting is shown in
Fig. 7. Rather than solve over the full horizon, the problem
was solved over a 60 second horizon and then the periodic
trajectory repeated to ﬁll the 500 second horizon. The results
are again very close to the event-driven IPA method.

Fig. 5: A single agent monitoring three targets using the optimal
discrete assignment and dwelling time. The ﬁnal cost is 25.07. (top
image) The agent trajectory is almost the same as in Fig. 4. (bottom
images) Target uncertainties along the trajectory.

Note that the optimal trajectories in both one and two agent
examples are bounded between [5, 15] (positions of the ﬁrst
and last target), which is consistent with Proposition 1.

As mentioned earlier, the IPA robustness property allows
us to handle stochastic uncertainty models at targets. We
show a one-agent example in Fig. 8b where the uncertainty
inﬂow rate Ai(t) is uniformly distributed between [0, 2] for
all targets. In Fig. 8c, we introduce randomness by allowing
target positions to vary uniformly over [xi− 0.25, xi + 0.25].
In both cases, the optimal cost in the stochastic models in
Figs. 8b and 8c are close to the optimal cost of the determin-
istic case Fig. 8a where the parameter Ai and target positions
xi are the means of the associated random processes in the
stochastic models. As expected, the convergence depends on
the variance of these random processes.

The event excitation issue is addressed in Fig. 9a, where
the agent trajectory is initialized so that it is not close to
any of the targets. Using the original problem formulation
(without the inclusion of J2(θ, ω, t) in (39), the initial tra-
jectory and cost remain unchanged. After adding J2(θ, ω, t),
the blue, green, and red curves in Fig. 9c show the trajectory
adjustment after 5, 10, and 15 iterations respectively. After
100 iterations, the cost converges to 30.24 as shown in Fig.
9b which is close to the optimal cost in Fig. 8a where the
target dynamics are the same.

VII. CONCLUSION

We have formulated a persistent monitoring problem with
the objective of controlling the movement of multiple coop-
erating agents so as to minimize an uncertainty metric asso-

Fig. 6: Two agents monitoring ﬁve targets using the IPA gradient
descent algorithm. (top image) Agent trajectories. (second image)
Calculated cost as a function of iteration. The ﬁnal cost is 4.99.
(bottom images) Target uncertainty values along the above trajec-
tories.

Fig. 7: Two agents monitoring ﬁve targets using the discrete
assignment and dwelling time. The ﬁnal cost was 4.92. (top image)
Agent trajectories. (bottom images) Target uncertainty values along
the above trajectories.

(a) Example of deterministic target model. Target positions
5, 7, 15, dynamics parameter Ai = 1, B = 5, r = 2. J∗(θ, ω) =
29.40.

(a) A trajectory where IPA fails due to lack of event excitation.
Top plot: agent trajectory. Bottom plot: cost convergence.

(b) Example with stochastic uncertainty processes. Ai ∼ U (0, 2).
J∗(θ, ω) = 42.46.

(b) IPA optimization after event excitation. Top plot: optimal agent
trajectory. Bottom plot: cost convergence. J∗(θ, ω) = 30.24.

(c) Example with stochastic target locations ∼ U (xi − 0.25, xi +
0.25). J∗(θ, ω) = 34.89.
Fig. 8: Examples demonstrating IPA robustness with respect to
stochastic uncertainty. (a)(b)(c) Top plot: optimal trajectory s∗(t).
Bottom plot: cost convergence.

(c) Trajectory adjustments with event excitation after 5 (blue), 10
(green), and 15 (red) iterations.
Fig. 9: The event excitation issue. After adding J2(θ, ω, t), the
trajectory adjusts to include targets, the cost converges to 30.24
which is close to the optimal cost
in Fig.8a where the target
dynamics are the same.

ciated with a ﬁnite number of targets. We have established
properties of the optimal control solution which reduce the
problem to a parametric optimization one. A complete on-
line solution is given by Inﬁnitesimal Perturbation Analysis
(IPA) to evaluate the gradient of the objective function with
respect to all parameters. We also address the case when
IPA gradient estimation fails because of the lack of event
excitation. We solve this problem by proposing a new metric
for the objective function which creates a potential ﬁeld
guaranteeing that gradient values are non-zero. This approach
is compared to an alternative graph-based task scheduling
algorithm for determining an optimal sequence of target

visits. Ongoing research is investigating how to extend these
methodologies to higher dimensional mission spaces.

REFERENCES

[1] M. Zhong and C. G. Cassandras, “Distributed coverage control and
data collection with mobile sensor networks,” Automatic Control, IEEE
Transactions on, vol. 56, no. 10, pp. 2445–2455, 2011.

[2] X. Sun and C. G. Cassandras, “Optimal dynamic formation control of
multi-agent systems in environments with obstacles,” arXiv preprint
arXiv:1508.04727, 2015.

[3] C. Cassandras, X. Lin, and X. Ding, “An optimal control approach to
the multi-agent persistent monitoring problem,” IEEE Transactions on
Automatic Control, vol. 58, no. 4, pp. 947–961, 2013.

[4] X. Lin and C. Cassandras, “An optimal control approach to the multi-
agent persistent monitoring problem in two-dimensional spaces,” in
Proc. of the IEEE Conference on Decision and Control.
IEEE, 2013,
pp. 6886–6891.

[5] N. Michael, E. Stump, and K. Mohta, “Persistent surveillance with
a team of mavs,” in 2011 IEEE/RSJ International Conference on
Intelligent Robots and Systems, 2011.

[6] S. L. Smith, M. Schwager, and D. Rus, “Persistent monitoring of
changing environments using a robot with limited range sensing,”
in Proc. of
the IEEE International Conference on Robotics and
Automation (ICRA).

IEEE, 2011, pp. 5448–5455.

[7] Z. Shen and S. B. Andersson, “Tracking Nanometer-Scale Fluorescent
Particles in Two Dimensions With a Confocal Microscope,” IEEE
Transactions on Control Systems Technology, vol. 19, no. 5, pp. 1269–
1278, Sep. 2011.

[8] S. M. Cromer Berman, P. Walczak, and J. W. Bulte, “Tracking stem
cells using magnetic nanoparticles,” Wiley Interdisciplinary Reviews:
Nanomedicine and Nanobiotechnology, vol. 3, no. 4, pp. 343–355,
2011.

[9] B. Horling and V. Lesser, “A survey of multi-agent organizational
paradigms,” The Knowledge Engineering Review, vol. 19, no. 04, pp.
281–316, 2004.

[10] J. Yu, S. Karaman, and D. Rus, “Persistent monitoring of events with
stochastic arrivals at multiple stations,” Robotics, IEEE Transactions
on, vol. 31, no. 3, pp. 521–535, 2015.

[11] E. Stump and N. Michael, “Multi-robot persistent surveillance plan-
ning as a vehicle routing problem,” in Automation Science and
Engineering (CASE), 2011 IEEE Conference on.
IEEE, 2011, pp.
569–575.

[12] C. G. Cassandras, Y. Wardi, C. G. Panayiotou, and C. Yao, “Perturba-
tion analysis and optimization of stochastic hybrid systems,” European
Journal of Control, vol. 16, no. 6, pp. 642–661, 2010.

[13] Y. Wardi, R. Adams, and B. Melamed, “A uniﬁed approach to inﬁnites-
imal perturbation analysis in stochastic ﬂow models: the single-stage
case,” Automatic Control, IEEE Transactions on, vol. 55, no. 1, pp.
89–103, 2010.

[14] M. Schwager, D. Rus, and J.-J. Slotine, “Decentralized, adaptive
coverage control for networked robots,” The International Journal of
Robotics Research, vol. 28, no. 3, pp. 357–375, 2009.

[15] M. Cao, A. S. Morse, C. Yu, B. Anderson, S. Dasgupta et al.,
“Maintaining a directed, triangular formation of mobile autonomous
agents,” Communications in Information and Systems, vol. 11, no. 1,
p. 1, 2011.

[16] K.-K. Oh and H.-S. Ahn, “Formation control and network localization
via orientation alignment,” Automatic Control, IEEE Transactions on,
vol. 59, no. 2, pp. 540–545, 2014.

[17] Y. Khazaeni and C. G. Cassandras, “Event excitation for event-
driven control and optimization of multi-agent systems,” in IEEE
International Workshop on Discrete Event Systems(WODES).
IEEE,
2016.

[18] A. E. Bryson, Applied optimal control: optimization, estimation and

control. CRC Press, 1975.

[19] X. Lan and M. Schwager, “Planning periodic persistent monitoring
trajectories for sensing robots in gaussian random ﬁelds,” in IEEE
International Conference on Robotics and Automation (ICRA).
IEEE,
2013, pp. 2415–2420.

[20] M. Lahijanian, J. Wasniewski, S. B. Andersson, and C. Belta, “Motion
planning and control from temporal logic speciﬁcations with proba-
bilistic satisfaction guarantees,” in IEEE International Conference on
Robotics and Automation (ICRA).

IEEE, 2010, pp. 3227–3232.

[21] S. L. Smith, J. Tumova, C. Belta, and D. Rus, “Optimal path planning
for surveillance with temporal logic constraints,” The International
Journal of Robotics Research, p. 0278364911417911, 2011.

[22] N. Mathew, S. L. Smith, and S. L. Waslander, “A graph-based approach
to multi-robot rendezvous for recharging in persistent
tasks,” in
Robotics and Automation (ICRA), 2013 IEEE International Conference
on.

IEEE, 2013, pp. 3497–3502.

[23] X. Yu and S. B. Andersson, “Effect of switching delay on a networked
control system,” in Proc.of the IEEE Conference on Decision and
Control (CDC).

IEEE, 2013, pp. 5945–5950.

[24] X. Yu and S. B. Andersson, “Preservation of system properties for
networked linear, time-invariant control systems in the presence of
switching delays,” in Proc. of the IEEE Conference on Decision and
Control.

IEEE, 2014, pp. 5260–5265.

