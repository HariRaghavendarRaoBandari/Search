Better bounds for coalescing-branching random walks

Michael Mitzenmacher ∗
michaelm@eecs.harvard.edu

Harvard University

Rajmohan Rajaraman†
Northeastern University
rraj@ccs.neu.edu

Scott Roche ‡

Northeastern University and

Akamai Technologies
str7@cornell.edu

6
1
0
2

 
r
a

 

M
9
1

 
 
]
S
D
.
s
c
[
 
 

1
v
9
0
1
6
0

.

3
0
6
1
:
v
i
X
r
a

ABSTRACT
Coalescing-branching random walks, or cobra walks for short,
are a natural variant of random walks on graphs that can
model the spread of disease through contacts or the spread
of information in networks. In a k-cobra walk, at each time
step a subset of the vertices are active; each active vertex
chooses k random neighbors (sampled indpendently and uni-
formly with replacement) that become active at the next
step, and these are the only active vertices at the next step.
A natural quantity to study for cobra walks is the cover time,
which corresponds to the expected time when all nodes have
become infected or received the disseminated information.

In this work, we extend previous results for cobra walks
in multiple ways. We show that the cover time for the 2-
cobra walk on [0, n]d is O(n) (where the order notation hides
constant factors that depend on d); previous work had shown
the cover time was O(n·polylog(n)). We show that the cover
time for a 2-cobra walk on an n-vertex d-regular graph with
conductance φG is O(φ−2
G log2 n), signiﬁcantly generalizing
a previous result that held only for expander graphs with
suﬃciently high expansion. And ﬁnally we show that the
cover time for a 2-cobra walk on a graph with n vertices
is always O(n11/4 log n); this is the ﬁrst result showing that
the bound of Θ(n3) for the worst-case cover time for random
walks can be beaten using 2-cobra walks.

Categories and Subject Descriptors
G.3 [Probability and Statistics]: Stochastic processes;
Probabilistic Algorithms; G.2.2 [Discrete Mathematics:
Graph Theory]: Graph algorithms

∗This work was supported in part by NSF grants CNS-
1228598, CCF-1320231, and CCF-1535795.
†Supported in part by NSF CCF-1422715, NSF CCF-
1535929, and an ONR grant
‡Supported in part by NSF CCF-1216038 and NSF CCF-
1422715.

ACM ISBN 978-1-4503-2138-9.
DOI: 10.1145/1235

Keywords
Random Walks, Networks, Information Spreading, Cover
Time, Epidemic Processes

1.

INTRODUCTION

Random walks provide a fundamental mathematical model
for many basic network processes. In disease models, trans-
mission of a virus can be modeled by the virus moving ac-
cording to a random walk on a graph representing a human
contact network; computer viruses can be modeled simi-
larly [18, 28, 13]. Variants of random walks can also be used
for information dissemination, using message-passing proto-
cols where a message is passed from neighbor to neighbor
via a random walk [9, 17]. Such protocols require little state
information and are robust to various types of faults, and
are therefore useful in many distributed networks [4]. More
generally, random walks provide a fundamental primitive
for network algorithms for information propagation, search,
routing, and load balancing.

In many of these settings, a central measure of interest is
the cover time, the expected time for the random walk to
cover all of the vertices of the underlying network. In disease
models, this corresponds to the time until all vertices in the
network have been exposed to the virus; in message-passing
protocols, this corresponds to the time until all vertices have
received the message.

Parallel random walks provide a natural generalization of
standard random walks, with multiple random walks travers-
ing the network simultaneously, and several papers have an-
alyzed the performance of parallel random walks (as we de-
scribe in the related work section). A related variant, less
well-studied and understood, are coalescing-branching ran-
dom walks, or cobra walks for short [13]. In a cobra walk, at
each time step, a subset of the vertices are active; typically
in the initial state a single vertex would be active. At each
time step, each active vertex chooses k random neighbors
(sampled independently and uniformly with replacement)
that become active at the next step. A vertex is active at
step t if and only if it was chosen by an active vertex in the
previous step. When k > 1, each walk branches at that step
into multiple walks, but multiple walks then coalesce when
they reach the same vertex at the same time. We refer to
a cobra walk where at each time step a vertex chooses k
active neighbors as a k-cobra walk for convenience. (One
could further study variations where the branching varied
based on the vertex or the time step, or was governed by a
random distribution; we do not do that here.)

As examples of cobra walks, in the message passing set-

ting, a k-cobra walk corresponds to a network where a vertex
may send k outgoing copies of the message to neighbors dur-
ing a time step instead of just one. In disease networks, a
cobra walk corresponds to an idealized process within the
Susceptible Infected Susceptible model (or SIS model):
in
each time step, an infected agent infects k random neigh-
bors and recovers, but can be infected again (including at
the next time step).

In contrast to results in parallel random walks, where the
number of walks is a parameter, in cobra walks the number
of active vertices varies over time and its behavior depends
signiﬁcantly on the network. One might expect cobra walks
to yield signiﬁcant improvements in the cover time over stan-
dard random walks, based on their power to reproduce, even
if limited by coalescence. The goal of our work is to formally
and theoretically bound the performance of cobra walks, fo-
cusing on the cover time. While our results have potential
applications to distributed protocols and disease models, as
suggested above, we also believe that k-cobra walks are a
natural mathematical model worthy of study in their own
right.
1.1 Our Results and Techniques

We are motivated by the prior work [13], which obtained
bounds on the cover time of cobra walks on trees, grids, and
expanders. Our work pushes those results further, in several
directions. Our primary results are the following:

• We show that the cover time for the 2-cobra walk on
[0, n]d is O(n), where the constant in the order notation
can depend on d. This improves on the previous bound
of O(n· polylog(n)) [13]. With respect to n, our result
is optimal.

• We show that the cover time for the 2-cobra walk for a
d-regular graph with conductance φG is O(φ−2
G log2 n).
This generalizes a similar result in [13] for expander
graphs with suﬃciently high expansion. Our new re-
sult holds for any d-regular graph, and expresses the
bound as a function of the conductance.

• We provide a result for general graphs, showing that
the cover time for a 2-cobra walk is always O(n11/4 log n).
For standard random walks, there are graphs where the
cover time is Θ(n3). This is the ﬁrst result showing
that cobra walks can beat the corresponding worst-
case bound for random walks. We also establish an
O(n2−1/d log n) upper bound on the cover time for
arbitrary d-regular graphs, again improving the tight
quadratic bound for standard random walks.

Our main techniques involve making use of the parallelism
inherent in cobra walks, and by thinking of cobra walks as a
union of biased random walks. In some settings we can show
the cobra walk goes through an initial phase that instanti-
ates a large number of essentially parallel random walks, and
then analyze the behavior of these random walks. Here we
have to take care of the dependency challenges introduced by
coalescing, as random walks can essentially disappear when
several collide at a vertex.
In other settings, we think of
our cobra walk as being a single walk moving toward a spe-
ciﬁc vertex, and then eventually taking a union bound over
all vertices. At each step, we can choose to follow the ac-
tive vertex that moves toward the target vertex and discard

the others. This approach simpliﬁes the analysis by allow-
ing us to focus on a single walk, where now the k choices
correspond to a bias in the walk that we can model. The
downside is such an analysis, however, is that it does not
take full advantage of the power of parallelism inherent to
cobra walks.

1.2 Background and Related Work

The cobra walk process has structural similarities with
several other fairly diverse stochastic processes: branching
processes, gossip protocols, and random walks (including
parallel random walks, coalescing random walks, and other
variants). Despite these commonalities, cobra walks resist
being fully described by any of these other processes; fur-
thermore, analysis techniques used for these other processes
often have no clear use or power in analyzing cobra walks.
Branching and coalescing processes. Branching pro-
cesses appear in many disciplines, from nuclear physics to
population genetics, on various discrete and continuous struc-
tures [19, 22, 6]. Another related topic is the study of co-
alescing processes and voter models (see, for example [11]).
Naturally, there is also work on processes that contain both
branching and coalescing elements [3, 26], although unlike
our work these analyses tend to operate in continuous time
and on either restricted topologies or inﬁnite spaces. The
restriction of cobra walks to discrete time eﬀectively dis-
allows the use of diﬀerential-equation based analysis that
often yields results in continuous-time processes (see, for
example [18, 20, 28]).
Gossip and rumor-spreading mechanisms Gossip-based
algorithms have been used successfully to design eﬃcient
distributed algorithms for a variety of problems in networks
such as information dissemination, aggregate computation,
constructing overlay topologies, and database synchroniza-
tion (e.g., see [9] and the references therein). There are three
major variants of gossip-based processes: push-based mod-
els, in which the members of the set of informed vertices
each select a neighbor and inform that neighbor (if it is not
already informed), pull-based models, in which uninformed
vertices select neighbors and poll them for information, and
push-pull, which is a combination of the ﬁrst two.

Cobra walks bear the closest resemblance to push-based
gossip models. Indeed, [17] show that the push process com-
pletes in every undirected graph in O(n log n) steps with
high probability, and this bound has been conjectured to
hold for cobra walks [13]. However, the similarity between
the two is in many ways superﬁcial.
If we view a gossip
process as a Markov chain on the state space of the set of
all subsets of vertices (representing the sets of possible in-
formed vertices), this Markov chain has a single absorbing
state (assuming the graph is connected) in which every ver-
tex is informed. On the other hand, performing a similar
projection of a cobra walk onto a Markov chain of the 2n
possible subsets of vertices that could be active at any time,
we see that there is no absorbing state and with the addition
of self-loops, the chain can be made ergodic.
Random walks and parallel random walks. Cobra
walks also resemble standard random walks and parallel
variants. For simple random walks, the now classic work
of Feige [15, 16] showed that the cover time on any graph
lies between Θ(log n) and O(n3). A formal model of biased
random walks was introduced in [5] with the motivation
of studying imperfect sources of randomness. Speciﬁcally,

these biased walks allow a controller to ﬁx, at each step of
the walk, the next step with a small probability, with the
aim of increasing the stationary probability at a target set
of vertices. A variant of the biased walk of [5] plays a signif-
icant role in our analysis of cobra walks for general graphs.
Additional work has considered speeding up the cover time
by modifying the underlying process. Adler et al [1] studied
a process on the hypercube in which in each round a vertex is
chosen uniformly at random and covered; if the chosen ver-
tex was already covered, then an uncovered neighbor of the
vertex is chosen uniformly at random and covered. For any
d-regular graph, Dimitrov and Plaxton showed that a simi-
lar process achieves a cover time of O(n + (n log n)/d) [12].
For expander graphs, Berenbrink et al showed a simple vari-
ant of the standard random walk that achieves a linear (i.e.,
O(n)) cover time [7].

Parallel random walks, ﬁrst studied in [8] for the special
case where the starting vertices are drawn from the station-
ary distribution and in [2] for arbitrary starting vertices, also
appear related to cobra walks. Nearly-tight results on the
speedup of cover time as a function of the number of parallel
walks have been obtained by [14] for several graph classes
including the cycle, d-dimensional meshes, hypercube, and
expanders. However, again the similarity is somewhat su-
perﬁcial. A parallel random walk with k independent walks
can be mapped to a undirected random walk on a graph
known as the tensor product. As such, much of the machin-
ery of the analysis of simple random walks can be applied
to the parallel case. Applying a similar approach to a co-
bra walk is not feasible, although for cobra walks one can
convert the tensor product into a directed graph, changing
the topology signiﬁcantly. As such, generally the techniques
that can be used for parallel random walks cannot be used
directly for the cobra walk. Indeed, one can view the de-
pendencies on the positions of the other pebbles in a cobra
walk as a manifestation of this diﬀerence. Cobra walks suf-
fer from the “time’s arrow” eﬀect:
locally, most individual
steps are reversible, but as a cobra walk expands, the like-
lihood that it will coalesce back to a single vertex grows
exponentially unlikely. Despite these diﬃculties, the tensor
product graph can be useful when studying the movement
of a small number of pebbles in a cobra walk, and we make
use of this technique in obtaining a general bound based on
conductance.

2. PRELIMINARIES

Let G be a connected graph with vertex set V and edge
set E, and let |V | = n, except for the case when we are
analyzing the grid, in which case we let V = [0, n]d. A k-
coalescing-branching (k-cobra) walk is deﬁned as follows: It
starts at time t = 0 at an arbitrary vertex v, at which a
pebble is placed.
In the next and every subsequent time
step, every pebble in G clones itself k − 1 times (so that
there are now k indistinguishable pebbles at each vertex that
originally had a pebble). Each pebble then independently
selects a neighbor of its current vertex uniformly at random
and moves to it. Once all pebbles have made their moves,
the coalescing phase begins:
if two or more pebbles are at
the same vertex they coalesce into a single pebble, and the
next round begins.

For time step t, St is the active set, which is the set
of all vertices of G that have a pebble. Deﬁne the cover
time of a cobra walk to be the maximum over all vertices v

of expectation of the minimum time T at which all vertices
have belonged to some St for t ≤ T when the cobra walk
is started at v. We note that while our results are stated
as bounds on the cover time, all of the results in this paper
actually give bounds on the time to cover all the vertices in
the graph with high probability, as is clear from the proofs.
Hence we may also refer to the time at which all vertices have
been covered, where the meaning is clear. The hitting time
H(u, v) is the expectation of the minimum time it takes
for any pebble originating from a cobra walk that starts
at u to reach v. The maximum hitting time hmax is
maxu,v∈V H(u, v).

We make use of an extension of Matthews’ Theorem, which
relates the cover time of a random walk to the maximum hit-
ting time. The following theorem was proven in [13]:

Theorem 1. Let G be a connected graph on n vertices.
Let W be a cobra walk on G starting at an arbitrary ver-
tex. Then the cover time of W on G is bounded above by
O(hmax log n); in fact W covers all of G in O(hmax log n)
steps with high probability.

Finally, we make use of a combinatorial property of the
graph, the conductance. Deﬁne the conductance of a set S ⊆

V as φ(S) = |∂(S)|/vol(S), where ∂(S) =P(u,v):u∈S,v /∈S 1
and vol(S) =Pu∈S d(u). Then the conductance ΦG of the

graph is minS:vol(S)≤vol(V )/2 φ(S). For the purposes of this
paper, we say that a d-regular graph is an ǫ-expander if the
conductance of the graph is greater than or equal to ǫ.

3. TIGHT RESULTS FOR GRIDS

We show that the cover time for the d-dimensional grid
using a 2-cobra walk [0, n]d is O(n), where the order nota-
tion hides constant factors and other terms that depend on
d; indeed, we show all vertices are covered in O(n) steps with
high probability. Previous work has shown that the cover
time is O(npolylog(n)) [13].1 Our result is clearly tight in its
dependence on n. Moreover, it shows that in some circum-
stances one can avoid using tools such as Matthews’ The-
orem, which had been used previously in this setting [13],
and necessarily adds in an additional logarithmic factor in
the number of vertices over the hitting time.

The case of d = 2 is simple and instructive; we sketch
a proof, but do not go into full detail as we have a more
detailed proof for the general case.

Lemma 2. The 2-cobra walk on [0, n]2 has cover time O(n).

Proof. Let v0 be the starting vertex of the walk. We
show that with high probability all vertices are reached within
O(n) steps, and the result follows, because if every vertex is
hit within T steps with probability p, the expected time to
cover all vertices is bounded above by T /p.

Let v1 = (x1, y1) be some other vertex on the grid. Let
Xt be the Manhattan distance between the closest pebble of
the cobra walk and v1 after t steps, which we will refer to as
time t. (All distances in this section will refer to Manhattan
distances.) Let ut = (at, bt) be some arbitrary vertex with a
pebble of distance Xt from v1 at time t. We show by cases
that there is drift so that the expectation of Xt decreases

1We note that the results of [13] use a slightly diﬀerent no-
tation, working with n total nodes, or [0, n1/d − 1]d. We
have opted to work over [0, n]d for convenience.

linearly over time, even when at each step we pessimistically
consider only the single vertex ut and not other additional
pebbles; it follows from standard results in random walks
v1 is reached after O(n) steps with probability 1− O(1/n3).
Hence all vertices are covered after O(n) steps with proba-
bility 1 − O(1/n), and the result follows.
If x1 6= at and y1 6= bt, the probability that at least
one of the two pebbles at ut moves closer to v1 is at least
1 − (1/2)2 = 3/4, since each pebble moves closer to v1
with probability at least 1/2.
(It can be more if a peb-
ble is v1 is on the boundary of a grid.) If either x1 = at or
y1 = bt but not both, the probability that at least one of the
two pebbles at ut moves closer to v1 could be as small as
1−(3/4)2 = 7/16 < 1/2, since each pebble could moves close
to v1 with probability only 1/4. (This probability would be
1 − (2/3)2 = 5/9 if for example x1 = at = n, but oﬀ the
grid boundary this is not the case.) Over one step, then, the
expected distance may be increasing. So we instead con-
sider two steps. It is important to note that if the distance
increases on the ﬁrst of the two steps but (at least) one peb-
ble moves so that x1 6= at and y1 6= bt after the ﬁrst step, it
improves our probability that the distance decreases in the
second step. We ﬁnd taking cases, assuming that ut is at
least distance 2 from the boundary and from v1, that Xt
increases by 2 by with probability 1
256 . Xt
16
decreases by 2 by with probability 7
(Similar
16
(better) results can be shown when ut is near a boundary.)
We therefore see that Xt has negative drift (except at
Xt = 1, where the drift is slightly positive), and therefore
the time to reach 0 can be shown to be O(n) with probability
1 − O(1/n) as claimed.

4 = 41
16 + 1
16 = 49
256 .

7

9

2

1

The analysis above suggests technical diﬃculties to over-
come with a direct approach for general d; the behavior is
slightly diﬀerent at the boundaries of the grid (though one
could always work on the toroidal grid), and when coordi-
nates match in one or more dimensions, it makes analyzing
the drift more diﬃcult. The analysis makes clear that for
any ﬁxed d, there should be a large enough constant value of
k so that the cover time for the k-cobra walk is O(n) on the
d-dimensional grid [0, n]d. One just needs a large enough
value of k so that the pebble nearest a target vertex drifts
toward that vertex.

We actually show the stronger result that the 2-cobra walk
has cover time O(n) on the d-dimensional grid [0, n]d, where
the order notation hides constants that depend on d. We
prove this below; we have not aimed to optimize the con-
stant factors. The intuition for the proof is the following.
If we look at the distance between the closest point on the
cobra walk and our target vertex in any single dimension,
it behaves like a biased random walk, with a bias toward
0. Hence, after O(n) steps, each individual dimension has
matched coordinates, with high probability. Indeed, if each
chain was an independent biased random walk with constant
bias (independent of d), after O(dn) steps we would expect
each independent walk to be near its stationary distribution,
in which case each chain would be at 0 with some constant
probability γ, and hence it would take roughly γd steps for
all chains to be at 0 simultaneously. Sadly, as usual, the
fact that the chains are not themselves independent causes
signiﬁcant technical challenges.

Theorem 3. The 2-cobra walk has cover time O(n) on

the d-dimensional grid [0, n]d for any constant d.

Proof. We break the proof into steps. As in Lemma 2,
we consider the distance to a target vertex over all dimen-
sions for some pebble generated by the 2-cobra walk. We
pessimistically keep track of only a single pebble. Specif-
ically, our state at time t can be deﬁned as follows. Let
(z1,0, z2,0, . . . , zd,0) be such that the distance from the initial
pebble to the target vertex is zi,0 for the ith grid dimension.
More generally, assume there is some pebble at the tth step
so that (z1,t, z2,t, . . . , zd,t) gives the distance from that peb-
ble to the target vertex in each dimension. We update the
zi,t values over time steps as follows. If our two choices of
pebbles generated from that pebble move in the same dimen-
sion, we choose the pebble that moves closer to the target, if
such a pebble exists. If our two choices of pebbles generated
from that pebble move in diﬀerent dimensions i and j, there
are several cases. If zi,t = 0 but zj,t 6= 0, we choose the peb-
ble that moves in dimension j. If zi,t = 0 and zj,t = 0, we
choose the pebble randomly. If zi,t 6= 0 and zj,t 6= 0, if both
choices of pebbles move closer or both move farther away
from the target, we choose the pebble randomly; otherwise
we choose the pebble that moves closer.

Lemma 4. In each dimension, we have that if zi,t 6= 0,
then zi,t changes in the next step with probability at least
1/(2d − 1), and conditioned on the ith dimension being the
value that changes, it decreases with probability at least 1/2+
1/(8d − 4). If zi,t = 0, it increases in the next step with
probability at most 2/(d + 1).

Proof. This follows directly from the description above.
We note that worst case with regard to the bias is when
one dimension has zi,t 6= 0 and zj,t 6= 0 for j 6= i. In this
case, the only bias that favors the ith dimension decreasing
rather than increasing stems for both choices being in the ith
dimension. With probability 2(d−1)/d2 the pebble is chosen
to move in the ith dimension and some other dimension,
in which case the pebble is equally likely to move closer
or further to the target. With probability 1/d2 dimension
i is chosen for both moves, in which case it moves closer
with probability 3/4. Hence, conditioned on zi,t changing,
it increases with probability
(d − 1)/d2 + (3/4)/d2
2(d − 1)/d2 + 1/d2 =

d − 1/4
2d − 1

8d − 4

1
2

=

1

+

as claimed.

With regard to which dimension moves, we notice that
when zi,t 6= 0, the probability of moving is least when we
are on the boundary in the ith dimension (and hence there
is just one move in that dimension), and other dimensions
are not. When zi,t = 0, that dimension is most likely to
move if all others are on the boundary. The above bounds
reﬂect these cases.

Our multi-dimensional biased random walk has a natural in-
terpretation as a discrete time queueing system, where cus-
tomers arrive and wait at a randomly chosen queue, where
the arrival rate is slightly smaller than the departure rate
(except when a queue is empty). In this setting, our ques-
tion concerns the time until the system empties from a given
starting state. Surprisingly, despite this connection, we could
not ﬁnd a statement corresponding to our desired result in
the literature.

The following follows easily from the bias shown above.

Lemma 5. In each individual dimension, if zi,0 is bounded
above by n, then with probability 1 − O(1/nd+1), zi,t hits 0
in O(d2n) steps.

Proof. Let X be the number of steps taken in the ith
dimension over the ﬁrst 64d2n steps. Then by Lemma 4,
E[X] > 32dn, and using a Chernoﬀ bound (e.g., [24, Exercise
4.7])

Pr(X ≤ 16dn) ≤ (e/2)−8dn.

The expected diﬀerence between the number of steps that
decrease zi,t and the number of steps that increase zi,t grows
with X, so we pessimistically condition on X ≥ 16dn. Sup-
pose that in this case that 0 is never reached, so the bias
remains in eﬀect over all 16dn steps. Let Y be number of
decreases in the ﬁrst 16dn steps. Then E[Y ] ≥ 8dn + 2n,
and again using a Chernoﬀ bound (e.g., [24, Exercise 4.7])

Pr(Y ≤ 8dn + n | X ≥ 16dn) ≤(cid:18)

e−δ

(1 − δ)(1−δ)(cid:19)−8dn+2n

,

where δ = 1/(8d + 2). Notice that if Y ≥ 8dn + n then in
fact 0 was reached. Hence the total probability that 0 is not
reached is bounded above by
Pr(Y ≤ 8dn + n | X ≥ 16dn) + Pr(X ≤ 16dn) ≤ (e/2)−8dn
which is clearly O(1/nd+1).

Similarly, the following result is standard for biased ran-

dom walks.

Lemma 6. Once zi,t hits 0, with probability 1−O(1/nd+2),
it will remain below cd ln n for some constant cd (depending
on d) over the next 100d2n2 steps.

Proof. We may pessimistically assume that all n2 steps
are performed in the ith dimension. By the natural cou-
pling we have that the probability that zi,t reaches cd ln n
in exactly k steps after it hits 0 is less than the probability
in equilibrium that a biased random walk with probability
1
2 + 1
8d−4 is at cd ln n. (Technically, the biased random walk
doesn’t have an equilibrium distribution, because of parity;
it will be an even number of steps from its starting point
after an even number of steps. We can add an arbitrarily
small self-loop probability and increase the number of steps
accordingly; we use n2 steps and assume the appropriate
equilibrium distribution for convenience.) The equilibrium
distribution for this biased random walk, where πj is the
probability of being at j in equilibrium, is easily found by
detailed balance equations, which yield

2

4d − 1(cid:18) 4d − 3
4d − 1(cid:19)k

.

πj =

As πj is geometrically decreasing, for j = cd ln n for some
constant cd we have πk will be less than 1/(100d2nd+4), and
hence over the 100d2n2 time steps we see zi,t never reaches
cd ln n with probability 1 − O(1/nd+2).

We now use the following lemma, which in a slightly dif-
ferent form appears in Theorem 7 of []. We sketch the proof
for completeness.

Lemma 7. Starting from (z1,t, z2,t, . . . , zd,t), where each
zi,t is at most cd ln n, with probability Ω(1/(ln ln n)c) for
some constant c, there is a u = α ln n such that for some
k ≤ u, zi,t+k = 0 for all i = 1, . . . , d.

Proof. The analysis is broken into phases. The ﬁrst
phase is of length O(ln n), the second phase is of length
O((ln n)1/2), and the jth phase is of length O((ln n)1/2j−1
).
All phases have the same basic structure, except for the
last. Within each phase, there are d subphases. In the ith
subphase, we assume that the ith coordinate zi,t moves ac-
cording to a biased random walk as previously described; in
all other phases, we pessimistically assume that it moves
according to an unbiased random walk. Our goal
is to
show that in each phase, each dimension moves closer to
zero; in particular, after the jth phase, all the zi,t are at
O((ln n)1/2j
) with constant probability. This is shown us-
ing Chernoﬀ bounds (see Theorem 7 of [] for the corre-
sponding calculation). It follows that after O(ln ln ln) phases
each zi,t will be bounded by a constant with probability
Ω(1)O(ln ln ln n) = Ω(1/(ln ln n)c). At that point, there is a
constant probability that the target vertex will be reached
in a constant number of steps.

Putting this all together now yields the theorem that the
cover time for the 2-cobra random walk on [0, n]d is O(n)
where the order notation hides constant factors that can
depend on d. Lemma 5 shows that for each dimension i,
zi,t hits 0 within the ﬁrst 64d2n2 steps with high probabil-
ity. Hence, by Lemma 6, after 64d2n2 steps all zi,t are at
most cd ln n with high probability. We are therefore in a
state where we reach the target vertex within an additional
O(ln n) steps with probability Ω(1/(ln ln n)c). If we have not
reached the target vertex, however, we are still within cd ln n
distance in each dimension with high probability. That is,
let E1 be the event that we did not reach the target ver-
tex within the α ln n steps of Lemma 7, and let E2 be the
event that some zi,t is more than cd ln n after those α ln n
steps. We have by Lemma 6 that this is a low probability
event (at least up through an additional 36d2n2 steps), so
we can consider a polylogarithmic number of repeated tri-
als of α ln n steps. As each trial succeeds with probability
Ω(1/(ln ln n)c), we can conclude that we hit the target vertex
with probability at least 1−O(1/nd+1) within O(n) steps. It
follows via a union bound that with probability 1 − O(1/n)
all vertices are hit within O(n) steps, from which it readily
follows that the cover time is O(n).

We remark that this proof, while achieving O(n) bounds,
appears quite loose in the constant factors. As our proof
does not directly take advantage of the large number of
pebbles within the system, we believe the bounds could be
tightened with respect to the dependence on d. Even with
this bound, we expect there remains further work to fully
understand the behavior of cobra walks on grids.

We also remark that the multi-step case analysis used in
Lemma 2 can similarly be used to show that 2-cobra walks
on k-ary trees have cover times that are proportional to the
graph’s diameter when k = 2 or k = 3. We conjecture that
in fact the cover time for 2-cobra walks on k-ary trees is
proportional to the diameter for every constant k, where
the constant of proportionality may depend on k, similar to
Theorem 3 for grids.

4. COVER TIME FOR A GRAPH WITH AR-

BITRARY CONDUCTANCE

In this section, we signiﬁcantly improve and extend the
results ﬁrst developed in [13], which provided an O(log2 n)

bound for the cover time of a k-cobra walk on a d-regular
expander with an expansion only achieved by graphs such
as random d−regular expanders and Ramanujan expanders.
Here, we provide the ﬁrst known bound for the cover time of
cobra walks on a d-regular graph of arbitrary conductance
Φ. While the upper bound is not useful for graphs with
very low conductance, there are a wide class of graphs be-
yond expanders for which this guarantees rapid coverage
”
e.g. the hypercube, power-law graphs, and random geomet-
ric graphs. For this section and the rest of the paper, we
work exclusively with 2-cobra walks, and use cobra walks to
mean 2-cobra walks where the meaning is clear.

Theorem 8. Let G be a bounded-degree, d-regular graph
with conductance ΦG. Then a cobra-walk starting at any
vertex will cover G in O(d4Φ−2
G log2(n)) rounds, with high
probability.

From this general bound, we have the following corollary,

which corresponds to the previous result of

[13].

Corollary 9. Let G be a bounded-degree d-regular ǫ-
expander graph. Then a cobra walk starting at any vertex
v will cover G in O(log2(n)) rounds with high probability
when d ∈ O(1).

Due to the extreme diﬃculty of analyzing the progress of
a cobra walk explicitly, we follow [13] and analyze a process
that, while conceptually similar to a cobra walk, has more
structured rules which allow us to analyze walks taken by
individual pebbles with only limited dependence on one an-
other. Furthermore, this process stochastically dominates
the cobra walk when starting from the same vertex with re-
spect to the time to cover all of the vertices. Any upper
bound on the cover time for this process therefore automat-
ically applies to the cover time of a cobra walk as well.

This process, which we refer to as Walt, can be deﬁned as
follows: We start with δn pebbles for some constant δ ≤ 1/2,
distributed arbitrarily among the vertex set V . Further-
more, we assume that the pebbles have a total ordering,
and that each pebble knows its position in the ordering. In
this process, unlike in the cobra walk, no pebbles split or co-
alesce – the total number of pebbles is an invariant. Pebbles
interact with one another according to two simple rules. For
each time step:

1. If one or two pebbles are co-located in time and space:
at vertex v at time t, each pebble chooses a random
neighbor from N (v) independently u.a.r and moves to
that vertex.

2. If three or more pebbles are at v at time t, the two
pebbles with the lowest order each pick a vertex inde-
pendently from N (v) u.a.r. and move to their chosen
vertex. Label these vertices u, w (keeping in mind that
u = w is allowed). The remaining pebble(s) at v then
each independently pick u with probability 1/2 or w
with probability 1/2 and move to the vertex they have
chosen.

The process Walt can be viewed, at a single step, as a
coalescing random walk in which the threshold for coales-
cence is three pebbles at the same vertex, rather than the
standard two. As an added condition, the third and higher
pebbles at a vertex (w.r.t. to the total ordering of pebbles)

chooses which of the ﬁrst two pebbles to coalesce with via
an unbiased coin ﬂip.

If we are observing, for a single time step, a vertex v at
which two or more pebbles (or zero, trivially) have landed,
we would be unable to distinguish between a cobra walk
and a Walt process. On the other hand, if we observe a
vertex v at which a single pebble has landed, we would be
able to distinguish. In Walt, in the next step, the pebble at
v will act like a simple random walk and move to a single
neighbor. On the other hand, in the cobra walk, there is
some probability p two neighbors will receive a pebble from
v, and probability 1 − p only one neighbor will. Thus, the
active set of Walt can be viewed as a (possibly proper) subset
of the active set of a cobra walk when both are started from
the same initial state. Therefore, at any future time t, the
size of the active set of a cobra walk (viewed as a random
variable) stochastically dominates the size of the active set
of Walt. We can then ”invert” this argument to show that
the cover time of Walt stochastically dominates the cover
time of the cobra walk.

Finally, for technical reasons, we make the Walt process
a lazy process. That is, at each step, with probability 1/2
all pebbles remain in their same position. With probability
1/2 a step proceeds with the probabilities described above.
(Thus, to obtain the unconditioned probabilities of any par-
ticular action, we need to multiply the above probabilities
through by 1/2.)

Lemma 10. Let G be a d-regular graph. Let S ⊂ V be a
subset of the vertices of G such that |S| < n/2. Consider C,
a cobra walk which begins at all the vertices of S, and W ,
a Walt process which begins at all the vertices of S and in
which we are allowed to place an arbitrary number of pebbles
at each v ∈ S, both at time t = 0. Let τC(S) be the ﬁrst time
all the vertices are covered by C and let τW (S) be the ﬁrst
time all the vertices are covered by W . Then there exists a
coupling under which τC(S) ≤ τW (S).

Proof. Without loss of generality, let us assume that the
initial conﬁguration of W is such that no v ∈ S has only one
pebble. Deﬁne a sequence K0, K1, . . . associated with C and
K′1, K′2, . . . associated with W where K
i is the set of vertices
that have been covered by C (W , respectively) at time i. G
is covered when KT = n. With each series we associate
another two series ∆(0,1), ∆(1,2), . . . and ∆′(0,1), ∆′(1,2), . . .,
where ∆(i,j) represents |Kj| − |Ki|. Note that unlike the
sequence of active sets of each process, the K and ∆ series
are monotonically non-decreasing.

′

time at whichPτC

The ﬁrst time τC that all vertices for C are covered is the
i=0 ∆(i,i+1) = n, and similarly for τW . We
now show that C dominates W statewise for each ∆(i,i+1) ,
∆′(i,i+1). Note that, as a random variable, the distribution
of ∆(0,1) and ∆′(0,1) are exactly the same, since we stipulated
that every v ∈ S for W has more than one pebble. How-

ever, considering step (1, 2), we have that Pr(cid:2)∆′(1,2) ≥ c(cid:3) ≤
Pr(cid:2)∆(1,2) ≥ c(cid:3) by the simple fact that in the (0, 1) step there

was a chance in W that the group of pebbles of at least one
of the vertices of S would do the following: let w and x be
the two nodes picked by the pebbles of v to walk to during
(0, 1). If x = w then C and W are equivalent. If x 6= w,
then with some ﬁnite probability (proportional to the num-
ber of pebbles at v), all but one of the pebbles would go
to w, and only one pebble would go to x (or vice versa).
W.l.o.g. assume x receives only one pebble. Thus in the

round (1, 2), whereas any C in the exact same state has a
non-zero probability of creating two pebbles from x, W has
zero chance of doing this and can no longer mimic C.

Since Pr(cid:2)∆′(1,2) ≥ c(cid:3) ≤ Pr(cid:2)∆(1,2) ≥ c(cid:3),
Pr(cid:2)∆′(i,j) ≥ c(cid:3) ≤ Pr(cid:2)∆(i,j) ≥ c(cid:3) for all (i, j) by induction,

since for each additional step K′i probabilistically occupies
a smaller set of vertices than Ki and we can again apply
the reasoning above. (Note that just observing this occurs
on the step (1, 2) is suﬃcient to prove the claim). There-
fore, using the statewise stochastic dominance argument, it
follows that Pr [τW (S) ≥ K] ≥ Pr [τC(S) ≥ K].

it follows that

We are now ready to prove Theorem 8. This proof uses
the machinery developed in the proofs of [13, Theorem 16
and Lemma 17]. We ﬁrst make note of the new ideas needed
to provide a general bound on the cover time in terms of
the conductance of the graph. For completeness, we have
refactored the proof with the changes necessary to prove
our conductance claim and present it in its entirety here.

One signiﬁcant diﬀerence with previous work is the follow-
ing. The previous analysis consisted of two stages, with the
ﬁrst stage providing an exponential growth in the number
of pebbles, but requiring the graph to have extremely high
expansion. In contrast, we begin our analysis of Walt with a
large number of pebbles, all of which are located at a single
initial, arbitrary vertex v, and compare this to a cobra walk
that starts at v. In [13], the analysis was broken up into two
stages. In the ﬁrst stage, a cobra walk process was analyzed
directly and it was shown that after O(log n) rounds, the
size of the cobra walk went from 1 vertex in the active set to
δn vertices in the active set, with high probability. However,
one restrictive requirement was that the (vertex) expansion
ǫ of the graph G needed to be extremely high, satisfying the
inequality:

1

ǫ2(1 − δ) + δ

>

d(de−k + (k + 1)) − k2
d(e−k + (k − 1)) − k2

2

2

where k is the branching factor of the cobra walk (2, for our
purposes) and d is the degree of G. Only some families of
expanders, such as Ramanujan graphs and random regular
graphs with high degree, would satisfy this condition. Once
the cobra walk reaches δn active vertices, we replace the
cobra walk with a Walt in which we position one Walt pebble
at each vertex that was active in the cobra walk at the time
at which we perform the swap. The analysis then proceeds
from this point to show that every vertex will have been
visited by at least one pebble of Walt with high probability
in O(log2 n) time.

Since the stochastic dominance of the cover time of Walt
over a cobra walk holds for all starting distributions of the
pebbles on the vertices of G, it also therefore holds for the
starting distribution in which all δn pebbles begin at the
same vertex. This allows us to work exclusively with Walt
for the entire analysis, bypassing the analysis of the cobra
walk as it grows from one active node to a linear number of
active nodes and therefore dropping the requirement that G
have extremely high expansion.

The second contribution of our new analysis is the deriva-
tion of bounds on the probability of coverage of vertices in
terms of the conductance of the graph. As a consequence,
we are able to derive bounds that hold for regular graphs
with arbitrary values of d and arbitrary ΦG.

Proof of Theorem 8: To prove the theorem, we break up
Walt into epochs of length s, where s = f (ΦG, n). As we will
see, the function f has the form f (ΦG, n) = O(Φm
G log n), for
m a constant. We show that each vertex v has a constant
probability of being hit by at least one pebble at the exact
time step the epoch ends. We then go through O(log n)
epochs to boost the probability v is covered to a suﬃciently
high probability and then take a union bound over every
vertex to obtain the result.

We ﬁrst prove that in a particular epoch vertex v will be
hit by at least one pebble with constant probability. Deﬁne
Ei to be the event that pebble i for i ∈ 1, . . . , δn covers
an arbitrary vertex v at time s. Then the event that v

is hit by at least one pebble is S Ei. Note that for any

two pebbles i, j it is not safe to assume that Ei and Ej
are independent, since i and j may cross paths during their
walks and have their transition probabilities aﬀected by the
rules of Walt. However, we can use a second-order inclusion-
exclusion inequality to lower-bound the probability:

Pr"[i

Ei# ≥Xi

Pr [Ei] − Xi,j:i6=j

Pr [Ei ∪ Ej]

Thus, we need to show that, for the r.h.s., the ﬁrst quantity
is a constant and the second quantity is smaller.

The ﬁrst part is fairly straightforward. Pr [Ei] can be
viewed as the (marginal) probability that a simple random
walk of pebble i hits v as time s. Indeed, if we only observe
the movement of i and ignore all other pebbles, its tran-
sition probability to any adjacent vertex from its current
vertex is always 1/d, regardless of the number of pebbles at
the current vertex. Since this reduces to analyzing a simple
random walk, we can use the well-known result that after
O(log n/f (ΦG)) time the probability that i will be at v will
be within a ±1/2n interval around 1/n, assuming that G
is regular and the stationary distribution is the normalized
uniform vector. For example, we can use the following result
from [25] to bound the maximum diﬀerence between compo-
nents of the probability distribution of the walk after t steps
and the stationary distribution:

|pt(v) − π(v)| ≤s d(v)

d(u)

e−tν2 ≤ e−tΦ2

G/2,

where the quantity in the square root is 1 because of the
regularity of the graph, and we have substituted Φ2
G/2 for
ν2, the second largest eigenvalue of the normalized Laplacian

of G. Thus, for t >

2 log(2n)

Φ2
G

, Pr [Ei] ≤ 1/2n.

Next we establish an upper bound for Pr [Ei ∩ Ej] using
the joint (dependent) walks of pebbles i and j. Without loss
of generality, assume that i has a lower order than j, and
that if i and j are co-located in time and space, then not
only is i the lower order, but j must behave like a third-
or-greater priority pebble and choose the same vertex that
i next hops to with probability 1/2. (Note that under this
assumption, the total probability that j moves to the same
vertex as i is 1/2 + 1/2d, a fact which will be important
shortly).

We can view the random walks of i and j as a random
walk over a graph with the topology of the tensor product
graph G × G. The tensor product graph has the Cartesian
product V (G) × V (G) as its vertex set, and an edge set
deﬁned as follows: vertex (u, u′) ∈ V (G × G) has an edge

to (v, v′) ∈ V (G × G) if and only if (u, v), (u′, v′) ∈ E(G).
The random walk we construct on G× G is slightly diﬀerent
than a simple random walk on the same graph: we make the
edges directed, and we attach weights to them such that the
walk on the directed graph D(G × G) is isomorphic to the
movement of pebbles i,j in a Walt on G.
We will show in the next Lemma that the walk on D(G×
G) has a stationary distribution, that this stationary distri-
bution is close to 1/n2, and that the walk converges rapidly
to it. Thus, after s steps, the probability that i and j
are at the same vertex in G is bounded from above by
2/(n2 + x) + 1/n4.

Once we have established bounds for Pr [Ei] , Pr [Ei ∩ Ej],

we can apply them to the full expression and get:

Prh[ Eii ≥ Xi

Pr [Ej ∩ Ei]

1
2n −

Pr [Ei] −

1

1

2Xi6=j
2 δn
2!(cid:18) 2
(δn2 − n)(cid:18) 2

n2 + n

n2 + n

+

+

1

n4(cid:19)
n4(cid:19)

1

≥ δn
δ
2 −
δ
2 −

≥

≥

δ
4
2δ2
4

Finally, to complete the proof, we have the following lemma:

Lemma 11. Let G and s be deﬁned as in Theorem 8. Let
i, j be two pebbles walking on G according to the rules of
Walt If Ei ∩ Ej are deﬁned as the event in which i and j are
both located at (arbitrarily chose) vertex v at time s, then
Pr [Ei ∩ Ej] ≤

1
n4 .

n2 + 2

+

2

Proof. We ﬁrst make a few observations about the topol-
ogy of graph G × G. There are two classes of vertices: the
ﬁrst class involves all vertices that have the form (u, u) (and
recall that u ∈ V (G)). A pebble at (u, u) would correspond
to two pebbles occupying u in the paired walk on i, j on G.
Label the set of such vertices S1. The cardinality of Si is
n. The remaining vertices, which belong to what we label
S2, are of the form (u, v), for u 6= v. There are n2 − n such
vertices. Also note that in the undirected graph G× G, each
vertex has degree d2. Further, every vertex in S1 will have
d neighbors also in S1, by virtue of the regularity of G.

Many of the spectral properties of G apply to G × G.
Because G is an ǫ-expander, the transition probability ma-
trix of a simple random walk on G has a second eigenvalue
α2(G) bounded away from zero by a constant.
It is well
known (c.f. [21]) that the transition probability matrix of a
simple random walk on G× G will have α2(G× G) = α2(G),
which we will refer to as α2 henceforth.
Next, we transform the (undirected) graph G × G into a
directed graph D(G × G) according to the following rules:
For every undirected edge (x, y) in G× G, we replace it with
2 directed edges: x → y and y → x. As mentioned, every
vertex in S1 will have d neighbors also in S1, meaning that
there will be one directed arc x → y for every vertex x ∈ S1
and y ∈ N (x) for y in either S1, S2. We next add an addi-
tional d copies of edge x → y for every such original edge. It
is relevant for the analysis to note that the regularity of the
subgraph of G × G induced on S1 implies that every vertex
in D(G × G) will have an equal number of out and in arcs.
Therefore D(G×G) is an Eulerian digraph, a fact which will

be important when calculating the stationary distribution of
a walk on this graph.

Next, we calculate the transition probabilities of a random
walk on D(G × G). An outgoing edge from x is picked with
probability 1/d. However, when we compute the probability
of transitioning to a neighboring vertex, there is a diﬀerence
between nodes in S1 and S2. In S2, each transition occurs
with probability 1/d2, as in the case of a symmetric walk.
Note that this includes transitions to nodes in S1 as well
as within S2. On the other hand, the probabilities of tran-
sitions from nodes in S1 are modiﬁed. The probability of
transitioning from a vertex x ∈ S1 to one of its d2 − d neigh-
bors in S2 is 1/2d2. The probability of transition to another
neighbor in S1 is (d + 1)/2d2 (on account of the multiple
edges). Thus, the walk on digraph D(G × G) corresponds is
isomorphic to the joint walk of pebbles i, j on G according
to the rules of Walt.

Because the walk on D(G× G) is irreducible, it has a sta-
tionary distribution π, which is the (normalized) eigenvector
of the dominant eigenvalue of the transition matrix M of the
walk on D(G× G). Furthermore, because D(G× G) is Eule-
rian, the stationary distribution of vertex x is exactly given
by: d+(x)/|E|, where d+(x) is the out-degree of x. There-
fore there are only two distinct values of the components of
for all x ∈ S1, π(x) = 2/(n2 + n),
the stationary vector:
while for all y ∈ S2, π(y) = 1/(n2 + n).
A note of caution: because G and G × G have such nice
spectral properties, and because D(G × G) represents such
a minor modiﬁcation of G × G it would be natural to infer
that D(G × G) also has many of the same nice properties
(particularly, the property of rapid convergence). However,
it is often the case that properties of Markov chains on undi-
rected graphs do not also hold for Markov chains on directed
graphs. Thus, we must carefully check our rapid convergence
hypothesis. Fortunately, following closely the work of [10],
we can indeed verify that the walk on D(G × G) converges
rapidly to its stationary distribution.
For succinctness of notation denote D = D(G × G). Con-
sider the function Fπ : E(D) → ℜ given by Fπ(x, y) =
π(x)P (x, y), where π(x) is the x-th component of the sta-
tionary distribution of the walk on D and P (x, y) is the
associated transition probability moving from x to y. Then
Fπ is the circulation associated with the stationary vec-
tor as shown in Lemma 3.1 of
[10]. Note that a circula-
tion is any such function that satisﬁes a balance equation:

Pu,u→v F (u, v) =Pw,v→w F (v, w).

ﬁned as:

There is a Cheeger constant for every directed graph, de-

h(G) = inf
S

Fπ(∂S)

min{Fπ(S), Fπ( ¯S)}

where Fπ(∂S) =Pu∈S,v /∈S F (u, v), F (v) =Pu,u→v F (u, v),
and F (S) =Pv∈S F (v) for a set S. Furthermore, Theorem

5.1 of [10] shows that the second eigenvalue, λ, of the Lapla-
cian of D satisﬁes:

(1)

(2)

2h(D) ≥ λ ≥

h2(D)

2

The Laplacian of a directed graph is deﬁned somewhat
diﬀerently than the Laplacian of an undirected graph. How-
ever, because we will not use the Laplacian directly in our
analysis, we refer the reader to [10] for the deﬁnition. We
will directly bound the Cheeger constant for D, and hence
produce a bound on the second eigenvalue of the Laplacian.

This second bound will then be used to provide a bound on
the convergence of the chain to its stationary distribution.
First, w.l.o.g., assume that Fπ(S) is smaller than its com-
plement. Furthermore assume that S is the set that sat-
isﬁes the inf condition in the Cheeger constant. We have

Fπ(∂S) =Px→y,x∈S,y∈ ¯S π(x)P (x, y), and
Fπ =Px→y,x∈S π(x)P (x, y). The ﬁrst sum occurs over all

(directed) edges that cross the cut of S, while the second
sum occurs over all edges leaving vertices in S: the numer-
ator and denominator of the conductance ΦG×G. Thus we
can provide a lower bound for the entire Cheeger constant:

h(D) = inf

S

Fπ(∂S)

min{Fπ(S), Fπ( ¯S)}

≥ ΦG×G

Pminπmin
Pmaxπmax
1

= ΦG×G ·

1
4d2
1
2

(n2 + n)

2

=

ΦG×G
4d2

(n2 + n)

where Pmax is 1/2 because of the lazy property of Walt.

Next, we show that G and G × G have the same con-
ductance. As we noted earlier, G and G × G have the same
second-smallest Laplacian eigenvalue ν1. From [27], we know
that they have the same spectral gap γ, deﬁned as 1− λ(G)
where λ is the second largest eigenvalue of the adjacency
matrix of G. From Theorem 4.14, we also know that the
spectral expansion (gap) of G is equal to αǫ2/2, where α is
the fraction of edges that are self loops and ǫ is the edge
expansion of G, which for d-regular graphs is the same as
the conductance ΦG. Thus, ΦG = ΦG×G.

We then apply the lower (directed) Cheeger inequality to

have λ ≥

Φ2
G
32d4 .

We now show rapid convergence (in logarithmic time in
n) of the walk on D to the stationary distribution. To mea-
sure distance from the stationary distribution, we use the
Ξ-square distance:

(P t(y, x) − π(x))2

π(x)

(3)

2



∆′(t) = max

y∈V (D) Xx∈V (D)

It is straightforward to show that any distance in the ∆′
metric is no smaller than a distance using a total-variational
distance metric. Hence the distribution of a random walk
starting anywhere in D will be close to its stationary distri-
bution w.r.t. each component vertex.

We next apply Theorem 7.3 from [10].

Theorem 12. Suppose a strongly connected directed graph
G on n vertices has Laplacian eigenvalues 0 = λ0 ≤ λ1 ≤
. . . ≤ λn−1. Then G has a lazy random walk with the rate of
convergence of order 2λ−1
1 (− log minx π(x)). Namely, after
at most t ≥ 2λ−1

1 ((− log minx π(x) + 2c) steps, we have:

∆′(t) ≤ e−c

Recall that we provided a lower bound for λ, the second-
smallest eigenvalue of the Laplacian of D in terms of the
conductance of ΦG. We can thus apply the above theorem
to show that after at most:

s =

32d4
Φ2

G (cid:0)log(n2 + n) + 4 log(n2)(cid:1)

1
steps we will have ∆′(t) ≤
n4 . For the random walk on
D, after a logarithmic number of steps s (in n), a walk that
starts from any initial distribution on V (D) will be within
n−4 distance of the stationary distribution of any vertex.

Mapping our analysis back directly to the coupled walk of
i, j on G, it then holds that Pr [Ei ∩ Ej] ≤ 2/(n2 + n) + 1/n4
when pebbles i and j start from any initial position.

5. COVER TIME FOR GENERAL GRAPHS
In this section, we show that the cover time of 2-cobra
walks for general graphs is O(n11/4 log n). For δ-regular
graphs, we obtain an improved bound of O(n2−1/δ log n).
We establish the bounds on the cover time by proving that
for any start vertex u and any target vertex v, the hitting
time from u to v, denoted by H(u, v), is O(n11/4) for general
graphs and O(n2−1/δ) for δ-regular graphs. We then apply
Matthews’ Theorem (Theorem 1), which actually give a high
probability result.

To analyze the cobra walk, we consider biased versions of
the standard random walk; in each step, with some prob-
ability, instead of moving to a neighbor chosen uniformly
at random, the walk moves to a vertex as determined by a
memoryless controller whose aim is to reach a certain target
vertex. The biased walk we analyze is a variant of ǫ-biased
walks deﬁned in [5]. In Section 5.1, we review the ǫ-biased
walks of [5] and introduce and analyze our variant, which we
call inverse-degree-biased walks. In Section 5.2, we use 1/δ-
biased walks to derive an O(n2−1/δ) bound on the hitting
time of the cobra walk on δ-regular graphs, improving on the
quadratic bound for standard random walks. In Section 5.3,
we use inverse-degree-biased walks to derive an O(n11/4)
bound on the hitting time of the cobra walk on nonregular
graphs, improving on the cubic bound for standard random
walks.
5.1 Biased random walks

An ǫ-biased walk on G is deﬁned as follows: in each step,
with probability 1 − ǫ one of the neighbors is selected uni-
formly at random, and the walk moves there; with probabil-
ity ǫ, a controller gets to select which neighbor to move to.
The controller can be probabilistic, but it is time indepen-
dent. The primary motivation for biased random walks is
to study how much can a controller increase the occupancy
probabilities at a targeted subset S of the vertices in the sta-
tionary distribution. A central result of [5] is the following
lower bound achieved by an optimal controller in an ǫ-biased
walk.

Theorem 13

(Theorem 2 of [5]). Let G = (V, E) be
a connected graph, S ⊂ V , v ∈ S and x ∈ V . Let ∆(x, v) be
the length of the shortest path between vertices x and v in G
and ∆(x, S) = minv∈S ∆(x, v). Let β = 1 − ǫ. There is an
ǫ-bias strategy for which the stationary probability at S (i.e.
the sum of the stationary probabilities of v ∈ S) is at least

Pv∈S d(v)

Pv∈S d(v) +Px /∈S β∆(x,S)−1d(x)

.

(4)

The bias in an ǫ-biased walk is constant (ǫ) at each ver-
tex. To analyze the cobra walk, we deﬁne a biased walk

in which the bias available to the controller at each vertex
of the graph varies with the vertex. Speciﬁcally, we deﬁne
the inverse-degree-biased walk with target x: if the walk is
at x, then the next vertex visited is a neighbor of x chosen
uniformly at random; if the walk is at vertex v 6= x, then
with probability 1 − 1/d(v) one of the neighbors is selected
uniformly at random and the walk moves there, and with
probability 1/d(v) a controller gets to select which neighbor
to move to. The goal of the controller is to minimize the
hitting time to x.

Our main motivation for introducing inverse-degree-biased
walks is the following dominance argument. For any pair of
vertices u and v, let H∗(u, v) denote the smallest hitting
time to v achievable by an inverse-degree-biased walk with
target v, starting at u. Recall that H(u, v) denotes the hit-
ting time at v for a cobra walk starting at u.

Lemma 14. For any pair of vertices u and v, H(u, v) ≤

H∗(u, v).

Proof. Our proof is by a coupling argument. Consider
the cobra walk starting at u at time 0. For any vertex x and
any time t, let E∗t (x) denote the event that x is active in the
cobra walk at the start of round t. For any vertex x, any
neighbor y of x, and any time t, let P ∗t (x, y) be the proba-
bility that y is active at the start of round t + 1 conditioned
on the event that x is active at the start of round t. That
is,

P ∗t (x, y) = Pr[E∗t+1(y) | E∗t (x)].

We next consider any inverse-degree-biased walk starting
from u. Let Et(x) denote the event that the walk is at vertex
x at the start of round t. Let P ′t (x, y) be the probability that
the inverse-degree-biased walk is at y at the start of round
t + 1, conditioned on the event that the walk is at x at the
start of round t. By the deﬁnition of the cobra walk and
the inverse-degree-biased walk, we have the straightforward
derivation.

P ∗t (x, y) = 1 −(cid:18)1 −

1

d(u)(cid:19)2

1

≥

=

2
d(u) −
1

d(u)

≥ P ′t (x, y).

d(u)2

+(cid:18)1 −

1

d(u)(cid:19) 1

d(u)

We now invoke a standard coupling argument to obtain
that for any round t and any vertex x, the probability that
x is active in the cobra walk at the start of round t is at
least the probability that the inverse-degree-biased walk is
at x at the start of round t. This also implies that the
expected time for u to become active in the cobra walk is at
most the expected time to hit x in the inverse-degree-biased
walk. Setting x = v and choosing the inverse-degree-biased
walk to be one that minimizes the hitting time to v yields
H(u, v) ≤ H∗(u, v).
5.2 O(n2−1/δ ) hitting time for δ-regular graphs
For the case of δ-regular graphs, the inverse-degree-biased
walk with target v is exactly a 1/δ-biased walk with target
v. We invoke Theorem 13 for δ-regular graphs with β =
1−1/δ, and letting S equal {v}. We calculate a lower bound
on stationary probability at v of the 1/δ-biased walk with

target v, we need to determine the maximum value that

Px6=v β∆(x,v)−1 can take. We calculate this maximum value,

over all graphs with maximum degree δ, hence yielding an
upper bound for δ-regular graphs as well. Let ni denote the
number of vertices within i hops of v. Then, we have

Xx6=v

β∆(v,x)−1 = Xi≥1

niβi.

Since the degree is at most δ, we have the following con-
straints on the nis, given by the number of vertices within
a certain number of hops from v.

.

X1≤i≤j

Since β < 1, and the total number of vertices is bounded by

ni ≤ min


(δ − 1)i

n − 1, δ1 + X1≤i<j
n, the sumPi≥1 niβi is maximized when
n1 = δ
nj = δ(δ − 1)j 1 < j < L,
where L is the smallest j such that δ(cid:16)1 +P1≤i<j (δ − 1)i(cid:17)
is at least n − 1. Then, we have nL = n − 1 −Pj<L nj .

With elementary algebra, we calculate the value of L as

L = log(δ−1)(cid:20) (n − 1)

(δ − 2) + 1(cid:21) .
We now boundPx6=v β∆(x,v)−1 as follows.
Xx6=v

β∆(v,x)−1 = δβ0 + (δ − 1)δβ2 + δ(δ − 1)2β2

δ

+ . . . + δ(δ − 1)L−1βL−1

= d L−1Xi=0
((δ − 1)β)i!
(δ − 1)β − 1 (cid:21)
= d(cid:20) ((δ − 1)β)L − 1
≤ Ch((δ − 1)β)Li

where C = δ/((δ − 1)β − 1).

With some minimal algebra, we can see that:
(δ − 1)logδ−1(n−1)(δ−2)/δ+1 = (n − 1)(δ − 2)/δ + 1 < n

and that

βL = (1 − 1/δ)logδ−1(n−1)(δ−2)/(δ−1)+1

≤ (δ − 1)(−1/δ) logδ−1((n−1)(δ−1)/(δ−2)+1)
= (cid:20) (n − 1)(δ − 2) + δ

(cid:21)−1/δ

< n−1/δ.

δ

Therefore, the stationary distribution at v is at least 1/(1 +
n1−1/δ), giving a return time to v of at most 1 + n1−1/δ.
Using the tree-traversal argument and noting that it will
take, in expectation, d returns to current vertex v to make
one “progress” step in the traversal in expectation for a total
cost of δn1−1/δ per progress step. Thus, the total cost of
coverage will be 2δCn2−1/δ = O(n2−1/δ ) for constant δ.

Theorem 15. Let G be a ﬁnite, δ-regular graph. Then
δ ), for any

the hitting time of a cobra walk on G is in O(n2− 1
constant δ.

5.3 O(n11/4) hitting time for general graphs

To bound H(u, v) in a general graphs, let P be a shortest-
hop path from u to v, given by the sequence of vertices
u = u0, u1, u2, . . . , u|P| = v. Then

H(u, v) ≤

|P|−1Xi=0

H(ui, ui+1).

(5)

Let R(x) denote the minimum return time to x among all
inverse-degree-biased walks with target x. We have

Furthermore, we have

R(x) = 1 + Xy∈N(x)
H(ui, ui+1) ≤ 1 + Xy∈N(ui),y6=ui+1
≤ 1 + Xy∈N(ui),y6=ui+1
≤ 1 + Xy∈N(ui),y6=ui+1
≤ R(ui) + Xy∈N(ui),y6=ui+1
= R(ui) +(cid:18)1 −

H∗(y, x)

d(x)

.

(6)

H(y, ui+1)/d(ui)

H(y, ui) + H(ui, ui+1)

d(ui)

H∗(y, ui) + H(ui, ui+1)

d(ui)

H(ui, ui+1)/d(ui)

1

d(ui)(cid:19) H(ui, ui+1).

(The second step follows from the fact that the hitting time
from y to ui+1 is at most the sum of the hitting times from
y to ui and from ui to ui+1. The third step follows from
Lemma 14. The fourth step follows from Equation 6. The
ﬁnal equality holds since ui has d(ui) neighbors.)

The above equation easily yields H(ui, ui+1) ≤ d(ui)R(ui),

which combined with Equation 5 yields

H(u, v) ≤

|P|−1Xi=0

H(ui, ui+1) ≤

|P|−1Xi=0

d(ui)R(ui).

(7)

We prove the following extension of Theorem 13, applied
to inverse-degree-biased walks. For the sake of completeness,
we include the proof, which essentially mimics the proof of
Theorem 2 in [5].

Lemma 16. Let G = (V, E) be a connected graph and S be
an arbitrary subset of V . For a given path P , let σ(P ) denote

the productQy∈P (1− 1/d(y)). For v ∈ S and x ∈ V − S, let
bσ(x, v) denote the maximum, over all paths P from x to v,
of σ(P ). Let bσ(x, S) denote the minimum, over all v ∈ S,
of bσ(x, v). There is an inverse-degree-biased walk for which

the stationary probability at S (i.e. the sum of the stationary
probabilities of v ∈ S) is at least

Pv∈S d(v)

Proof. Deﬁne a probability distribution πM : πM (v) =

γd(v) for v ∈ S and πM (x) = γbσ(x, S)d(x) for x /∈ S, where

γ =

.

.

Pv∈S d(v) +Px /∈S(bσ(x, S)d(x))
Pv∈S d(v) +Px /∈S(bσ(x, S)d(x))

1

Let M be the transition probability matrix for which the sta-
tionary distribution given by Metropolis Theorem [5, The-
orem 1] [23] is πM . Deﬁne the following transition prob-
ability matrix: Px,x = 0 for all x ∈ V , and for y 6= x,
Px,y = Mx,y/(1 − Mx,x). We now argue that Mx,y ≥ (1 −
1/d(x))/d(x) for any neighbor y of x. By the Metropolis
Theorem, Mx,y is either 1/d(x) or πM (y)/(d(y)πM(x)). In
the former case, the desired lower bound on Mx,y is trivial.
In the latter case, we have

Mx,y = bσ(y, S)

d(x)bσ(x, S) ≥

1 − 1/d(x)

d(x)

,

where the last inequality follows from the fact thatbσ(y, S) ≥
(1 − 1/d(x))bσ(x, S). We thus obtain Px,y ≥ Mx,y ≥ (1 −

1/d(x))/d(x) for any neighbor y of x. So P is a transition
probability matrix of an inverse-degree-biased walk.

We next show that for each vertex in S, its stationary
probability under P is at least its stationary probability un-
der M . Let H M (x, v) and H P (x, v) denote the hitting time
to v under the walks deﬁned by P and M , respectively, with
start vertex x. For each vertex x 6= v, we have

H M (x, v) = 1 + Mx,xH M (x, v) + Xy∈N(x)

Mx,yH M (y, v),

which yields

H M (x, v) =

1

1 − Mx,x

≥ 1 + Xy∈N(x)

+ Xy∈N(x)

Mx,y

1 − Mx,x

H M (y, v)

Px,yH M (y, v).

By [5, Lemma 1], for every x ∈ V and v ∈ S, H M (x, v) ≥
H P (x, v). If we denote the return time to vertex v in the
walks under P and M by RP (v) and RM (v), respectively,
we obtain that

RM (v) = 1 + Xy∈N(v)
= 1 + Xy∈N(v)
≥ 1 + Xy∈N(v)

= RP (v).

Mv,yH M (y, v)

Pv,yH M (y, v)

Pv,yH P (y, v)

We thus have

πP (S) ≥ πM (S) =

Pv∈S d(v)

Pv∈S d(v) +Px /∈S d(x)bσ(x, S)

.

Corollary 17. Let v be an arbitrary vertex of G. There
exists a bias strategy for the inverse-degree-biased walk such
that the return time to v in the walk is at most

d(v) +Px6=vbσ(x, v)d(x)

d(v)

.

Proof. The result follows from Lemma 16, setting S =
{v} and noting that the return time to v equals the inverse
of the stationary probability at v.

For our analysis, it is more convenient to work with an

lowing lemma. Let p(y, x) denote the weight of the shortest

upper bound on bσ(x, v) (for each x and v) as given the fol-

bound of 1; otherwise, we use the bound 22j /n3/2. So we
have

Xui∈P

e−p(x,ui) = Xj:2j≤√n

O(2j ) + Xj:2j >√n(cid:16)2j ∗ e−22j /n 3/2(cid:17)

= O(n1/2) + O(n3/4) = O(n3/4).

Since d(x) for each x is at most n− 1 and the length of P is
at most n, we get the desired bound of O(n11/4).

Theorem 20. The hitting and cover times for a 2-cobra

walk on a graph with n vertices are O(n11/4) and O(n11/4 log n),
respectively.

Proof. For any start vertex u and target vertex v, let P
be a shortest-hop path from u to v, given by the sequence
of vertices u = u0, u1, u2, . . . , u|P| = v. By Lemma 14 and
Equation 7 we have

H(u, v) ≤ H∗(u, v) ≤

|P|−1Xi=0

d(ui)R(ui),

which, by Lemma 19, is O(n11/4). The bound on the cover
time follows from Matthews’ Theorem, Theorem 1.

6. CONCLUSION

We have derived several improved results for cobra walks.
However, there remain many open problems, and correspond-
ing gaps in our understanding. We have shown that for d-
dimensional grids on [0, n]d the cover time is proportional
to n, even for 2-cobra walks. The dependence on d, how-
ever, has not been determined, and more generally we would
like to ﬁnd a larger collection of graph types for which the
cover time for 2-cobra walks is proportional to the diameter.
Better results for general graphs are still open; we optimisti-
cally conjecture that for 2-cobra walks the worst case cover
time on a graph with n vertices is only O(n log n). (The star
graph shows that it can be Ω(n log n).) Perhaps most impor-
tantly, we believe there should be better methods available
for analyzing cobra walks. Our results utilize techniques
based on parallelism and bias, but we do not believe they
are as yet taking full advantage of the power of cobra walks.

!

|P|−1Xi=0

d(ui)R(ui) ≤

≤

≤

|P|−1Xi=0
|P|−1Xi=0
|P|−1Xi=0

≤ 3n +

d(ui)R(ui)

d(ui)

d(ui)  d(ui) +Px6=ubσ(x, u)d(x)
d(x)e−p(x,ui)
d(ui) + Xx6=ui
|P|−1Xi=1 Xx6=ui
d(x)
e−p(x,ui) .

|P|−1Xi=1

d(x)e−p(x,ui)

≤ 3n +Xx∈V

path from y to x in G, where we assign a weight of 1/d(z)
for each vertex z.

e−p(x,v).

Proof. Let P ′ denote a path between x and v such that

Lemma 18. For all vertices x and v, bσ(x, v) is at most
bσ(x, v) = σ(P ). Then, we have
bσ(x, v) = Yy∈P ′

(1 − 1/d(y)) ≤ Yy∈P ′

e−1/d(y) = e−p(x,v).

Lemma 19. For start vertex u and target v, let P be a
shortest-hop path from u to v, given by the sequence of ver-
tices u = u0, u1, u2, . . . , u|P| = v. Then, we have

d(ui)R(ui) = O(n11/4).

|P|−1Xi=0

Proof. By Lemma 14 and Corollary 17, we have

e−p(x,ui)(cid:17).

(The second step follows from Corollary 17. The third step
follows from Lemma 18. The fourth step follows from the
elementary claim that the sum of the degrees of vertices
along any shortest path in an n-vertex graph is at most
3n; e.g., see [17, Proof of Theorem 2.1]. The ﬁnal step is
obtained by rearranging the summations.)

We next place an upper bound onPx∈V (cid:16)d(x)P|P|−1

We claim that the number of vertices ui in P to which any
vertex x has paths of length at most L is at most 2L. This
is because two vertices a and b that are more than 2L hops
away in P would have a path of 2L hops via x, a contradic-
tion.

i=1

Consider a vertex ui, for some i. Consider any path from
x to ui that minimizes p(x, ui). No vertex in the graph
has edges to more than √n vertices along this path. If it
did, then we could short-cut and decrease the sum of the
reciprocals of the degrees 1/√n < √n/(n − 1). Therefore,
any path that minimizes p(x, ui) has a total degree of at
most n3/2. If the length L of the path is less than √n, then
p(x, ui) ≥ 0; otherwise, p(x, ui) ≥ L2/n3/2.
We now show that for any vertex x, P|P|−1
e−p(x,ui) is
O(n3/4). We partition the ui according to their hop-distance
from x. Fix j and consider all vertices in P that are distance
between 2j−1 and 2j from x. By our claim above, there are
at most 2j such vertices. If 2j ≤ √n, then we use the trivial

i=1

for the cover time of multiple random walks. volume
412, pages 2623 – 2641, 2011. Selected Papers from
36th International Colloquium on Automata,
Languages and Programming (ICALP 2009).

[15] U. Feige. A tight upper bound on the cover time for

random walks on graphs. 1993.

[16] Uriel Feige. A tight lower bound on the cover time for
random walks on graphs. Random Struct. Algorithms,
6(4):433–438, July 1995.

[17] Uriel Feige, David Peleg, Prabhakar Raghavan, and

Eli Upfal. Randomized broadcast in networks. Random
Structures & Algorithms, pages 447–460, 1990.

[18] Ayalvadi J. Ganesh, Laurent Massouli, and Donald F.
Towsley. The eﬀect of network topology on the spread
of epidemics. In INFOCOM, pages 1455–1466. IEEE,
2005.

[19] Theodore E. Harris. The theory of branching processes.
Die Grundlehren der Mathematischen Wissenschaften,
Bd. 119. Springer-Verlag, Berlin, 1963.

[20] David A. Kessler. Epidemic size in the sis model of
endemic infections. Journal of Applied Probability,
45(3):757–778, 09 2008.

[21] David Asher Levin, Yuval Peres, and Elizabeth Lee

Wilmer. Markov chains and mixing times. Providence,
R.I. American Mathematical Society, 2009. With a
chapter on coupling from the past by James G. Propp
and David B. Wilson.

[22] Neal Madras and Rinaldo Schinazi. Branching random

walks on trees. Stochastic Processes and their
Applications, 42(2):255 – 267, 1992.

[23] M. Metropolis, A. Rosenbluth, M. Rosenbluth,

A. Teller, and M. Teller. Equation of state calculations
by fast computing machines. Journal of Chemical
Physics, 21:1087–1092, 1953.

[24] Michael Mitzenmacher and Eli Upfal. Probability and

computing: Randomized algorithms and probabilistic
analysis. Cambridge University Press, 2005.

[25] Daniel Spielman. Lecture notes in spectral graph

theory, 2012.

[26] Rongfeng Sun and Jan M Swart. The brownian net.

The Annals of Probability, 36(3):1153–1208, 2008.

[27] Salil P. Vadhan. Pseudorandomness. Foundations and
Trends in Theoretical Computer Science, 7(1-3):1–336,
2011.

[28] Piet Van Mieghem. The n-intertwined sis epidemic

network model. Computing, 93(2-4):147–169,
December 2011.

7. REFERENCES
[1] Micah Adler, Eran Halperin, Richard M. Karp, and

Vijay V. Vazirani. A stochastic process on the
hypercube with applications to peer-to-peer networks.
In Proceedings of the Thirty-ﬁfth Annual ACM
Symposium on Theory of Computing, STOC ’03, pages
575–584, New York, NY, USA, 2003. ACM.

[2] Noga Alon, Chen Avin, Michal Koucky, Gady Kozma,
Zvi Lotker, and Mark R. Tuttle. Many random walks
are faster than one. In Proceedings of the Twentieth
Annual Symposium on Parallelism in Algorithms and
Architectures, SPAA ’08, pages 119–128, New York,
NY, USA, 2008. ACM.

[3] Siva R. Arthreya and Jan M Swart.

Branching-coalescing particle systems. Probability
Theory and Related Fields, 131(3):376–414, 2005.

[4] J. Augustine, G. Pandurangan, P. Robinson, S. Roche,
and E. Upfal. Enabling robust and eﬃcient distributed
computation in dynamic peer-to-peer networks. In
Foundations of Computer Science (FOCS), 2015 IEEE
56th Annual Symposium on, pages 350–369, Oct 2015.
[5] Yossi Azar, Andrei Z Broder, Anna R Karlin, Nathan

Linial, and Steven Phillips. Biased random walks. In
Proceedings of the twenty-fourth annual ACM
symposium on Theory of computing, pages 1–9. ACM,
1992.

[6] Itai Benjamini and Sebastian M¨uller. On the trace of

branching random walks. arXiv preprint
arXiv:1002.2781, 2010.

[7] Petra Berenbrink, Colin Cooper, Robert Els¨asser,

Tomasz Radzik, and Thomas Sauerwald. Speeding up
random walks with neighborhood exploration. In
Proceedings of the Twenty-ﬁrst Annual ACM-SIAM
Symposium on Discrete Algorithms, SODA ’10, pages
1422–1435, Philadelphia, PA, USA, 2010. Society for
Industrial and Applied Mathematics.

[8] Andrei Broder. Generating random spanning trees. In
Foundations of Computer Science, 1989., 30th Annual
Symposium on, pages 442–447, Oct 1989.

[9] Jen-Yeu Chen and Gopal Pandurangan.

Almost-optimal gossip-based aggregate computation.
SIAM J. Comput., 41(3):455–483, 2012.

[10] F. Chung. Laplacians and the cheeger inequality for

directed graphs. Annals of Combinatorics, 9:1–19,
2005.

[11] Colin Cooper, Robert Els¨asser, Hirotaka Ono, and

Tomasz Radzik. Coalescing random walks and voting
on graphs. In Proceedings of the 2012 ACM
Symposium on Principles of Distributed Computing,
PODC ’12, pages 47–56, New York, NY, USA, 2012.
ACM.

[12] Nedialko B. Dimitrov and C. Greg Plaxton. Optimal

cover time for a graph-based coupon collector process.
In Proceedings of the 32Nd International Conference
on Automata, Languages and Programming,
ICALP’05, pages 702–716, Berlin, Heidelberg, 2005.
Springer-Verlag.

[13] Chinmoy Dutta, Gopal Pandurangan, Rajmohan

Rajaraman, and Scott Roche. Coalescing-branching
random walks on graphs. ACM Trans. Parallel
Comput., 2(3):20:1–20:29, November 2015.

[14] Robert Elsasser and Thomas Sauerwald. Tight bounds

