Identifying Randomly Activated Users via

Sign-Compute-Resolve on Graphs

6
1
0
2

 
r
a

M
7

 

 
 
]
T
I
.
s
c
[
 
 

1
v
0
0
0
2
0

.

3
0
6
1
:
v
i
X
r
a

ˇCedomir Stefanovi´c∗, Dejan Vukobratovi´c†, Jasper Goseling‡, Petar Popovski∗

∗Department of Electronic Systems, Aalborg University, Aalborg, Denmark, Email: {cs,petarp}@es.aau.dk

†Department of Power, Electronics and Communication Engineering, University of Novi Sad, Serbia, Email: dejanv@uns.ac.rs

‡Stochastic Operations Research, University of Twente, The Netherlands, Email: j.goseling@utwente.nl

Abstract—In this paper we treat the problem of identiﬁcation
of a subset of active users in a set of a large number of potentially
active users. The users from the subset are activated randomly,
such that the access point (AP) does not know the subset or
its size a priori. The active users are contending to report their
activity to the AP over a multiple access channel. We devise
a contention algorithm that assumes a combination of physical-
layer network coding and K-out-of-N signature coding, allowing
for multiple detection of up to K users at the access point. In
addition, we rely on the principles of coded slotted ALOHA
(CSA) and use of successive interference cancellation to enable
subsequent resolution of the collisions that originally featured
more than K users. The objective is to identify the subset of
active users such that the target performance, e.g., probability
of active user resolution and/or throughput is reached, which
implies that the duration of the contention period is also not
known a priori. In contrast to standard CSA approaches, in the
proposed algorithm each user, active or not, has a predeﬁned
schedule of slots in which it sends its signature. We analyze the
performance of the proposed algorithm both in the asymptotic
and non-asymptotic settings. We also derive an estimator that,
based on the observation of collision multiplicities, estimates how
many users are active and thereby enables tuning of the length
of the contention period.

I. INTRODUCTION

In wireless communications there are often scenarios in
which a large number of terminals (i.e., users) are associated
with the same access point. However, at a given time, the
subset of users that is active and has data to send is random.
This requires a random access protocol for identiﬁcation of
the subset of active users. Such protocol can be used, e.g., to
schedule the users after the identiﬁcation procedure, such that
each user can deliver its data to the access point. Alternatively,
if each user has a small amount of data to send, this can be
done using the random access protocol.

Slotted ALOHA (SA) [1] is a widely used random access
solution that offers simple implementation, but suffers from
low throughput. Namely, a typical SA premise is that collisions
of two or more user packets in a slot are destructive, posing the
key limitation on the performance. However, recent advances
layer have given rise to motivation to relax
on physical
or even discard this assumption. Particularly,
the recently
proposed coded slotted ALOHA (CSA) [2] exploits successive
interference cancellation to resolve collisions, providing for
expected throughputs that asymptotically tend to 1 – the upper
limit on performance in absence of capture effect and/or

multiple user detection. Another recent advance is the use
of physical-layer network coding (PLNC) for random access
[3], [4], transforming the collisions into the (noiseless) sums
of colliding packets. In particular, if K-out-of-N signature
coding for multiple access [5] is combined with PLNC [4],
[6], [7], sums of up to K packets can be directly resolved.

In this paper we assume a scenario in which a subset of
users is activated in a batch, such that neither the identities
nor the number of active users in the subset are known. We
propose a random access algorithm that exploits combination
of CSA and sign-compute-resolve frameworks [6] in order to
identify the active users. The batch arrival is resolved within
a contention period, consisting of equal-length slots, whose
start and termination are signaled by the AP. On slot level
the contention is based on the principles of sign-compute-
resolve, brieﬂy introduced as follows. The active users contend
with packets that are PLNC-encoded representation of their
signatures, where the signatures are unique representations
of the user identities. If there are up to K user packets
colliding in a slot, their PLNC-decoded sum is immediately
resolvable into constituent signatures. If there are more than
K packets colliding in a slot, the PLNC-decoded sum can
not be resolved and is stored for later use. Further, the active
users transmit their PLNC encoded signatures in multiple slots,
according to the pseudorandom transmissions schedules. These
schedules are predeﬁned and there is one-to-one mapping
from the signature of each user (active or not) to the speciﬁc
transmission schedule. A resolution of a signature in any of
the slots, enables its removal, i.e., cancellation, from all other
slots in which it appears and which contain more than K
colliding packets. In this way, previously unresolved sums
may become resolvable into constituent signatures, instigating
new iterations of signature cancellations and resolutions; this
is a founding feature of CSA methods. The above described
random access scheme is executed until the AP decides that
the target performance is reached, which may be when the pre-
deﬁned fraction of users has been resolved and/or throughput
is maximized. In this respect, as the number of active users
is unknown, the AP has to obtain its estimate along with the
resolution of their signatures in order to decide whether the
target performance has been reached.

The pivotal goal of the paper is to analyze the proposed
random access method and assess its potential. We also

evaluate the proposed method both in the asymptotic and non-
asymptotic settings, for a simple instance of the scheme in
which the transmission schedules of the users are deﬁned such
that each slot has the same number of potentially active users.
We also develop an estimator that ﬁts naturally in the proposed
framework, allowing for the termination of the scheme that
adapts to the actual number of active users.

The rest of the text is organized as follows. In Section II
we provide a brief account of the related work. System model
is presented in Section III. The analysis of the asymptotic
performance and the derivation of the proposed estimator is
provided in Section IV. The evaluation of the proposed scheme
is performed in Section V. Section VI concludes the paper.

II. RELATED WORK

Coded slotted ALOHA, i.e., codes-on-graphs based design
and optimization of slotted ALOHA with successive interfer-
ence cancellation (SIC) was established in [8]. This initial
work was followed by application of different coding-for-
erasures methods in CSA framework [9], [10]. A CSA variant
that exploits multiple user detection in a setting similar to
ours was addressed in [11]. The typical assumptions in these
papers, as well as in CSA framework in general [2], is that
the number of the active users is a priori known, such that the
parameters of the scheme, like frame lengths and probability
distributions that control transmission schedules of the users,
can be optimized with respect to it. In contrast, the random
access strategy proposed in this paper assumes that only
the probability distribution governing the number of active
users is known. Another important difference to standard
CSA is that the active users in standard CSA independently
and uncoordinatedly establish their transmission schedules,
whereas in this paper the transmission schedules of all users
are determined by the AP, but actually followed only by the
active users that are a priori unknown. In terms of codes-on-
graphs, we consider a design of right-node degree-distribution
in rateless coding framework [12] for up to K-out-of-N
decoding scenario, where only an a priori unknown fraction
of the input symbols (i.e., users) and the corresponding edges
in the graph actually exist (i.e., are active). On the other hand,
the standard CSA considers a decentralized design of left-node
degree-distribution when the number of active users is a priori
known.

Combination of PLNC and signature coding in SA frame-
work was considered in [4], [7] and in tree-splitting framework
in [6]. Unlike in [4], [7], we consider a SIC-enabled scenario,
such that the random access strategy is optimized on the basis
of the contention period.

III. SYSTEM MODEL

We consider a scenario where there are N users and N
is known by the AP. The user population is homogenous,
i.e., all users have the same transmission capabilities and are
considered equally important. Time is slotted, the slots are
grouped in contention periods, and the users are synchronized
on the slot and on the contention period basis. We consider a

single contention period. The length of the contention period
M is not speciﬁed a priori, but determined on the ﬂy by the
AP, which also signals its termination.

We consider a batch arrival resolution, where the probability
of a user arriving, i.e., being active at the start of the contention
period, denoted by pA, is a priori known. We assume that

pA =

α
N

≪ 1.

(1)

The number of active users NA is a binomially distributed ran-
dom variable with mean E[NA] = pAN = α and probability
mass function (pmf)

p(n) = P[NA = n] =(cid:18)N

n(cid:19)pn

A(1 − pA)N −n ≈

αn
n!

e−α, (2)

for 0 ≤ n ≤ N . The rest of the N − NA users are inactive.

Each user has a unique signature Ui, which is a sequence
of integers taking values in {0, . . . , q}. The length of these
signatures is speciﬁed below. The goal of the AP is to learn
the set of active users through their signatures. The users apply
power control when transmitting, such that the multiple access
channel (MAC) they experience can be modeled as a Gaussian
MAC with unit channel gains. Further, the active users also
apply PLNC, i.e., user i transmits Xi = PLNC(Ui). The AP
observes in slot j (henceforth denoted as sj)

Xi + Zj, j = 1 . . . M,

(3)

Yj = Xi∈Aj

where Aj is the set of active users that transmitted in slot j
and Zj is additive white Gaussian noise with unit variance.
We assume the use of reliable PLNC [13], where the rates
are selected in a way that the sum of the interfering signals i
decoded reliably and the noise is effectively eliminated, such
that the AP obtains

Ui,

(4)

Vj = Xi∈Aj

and the MAC channel effectively becomes an integer adder
channel.1 This is depicted in Fig. 1.

The user signatures are codewords of a K-out-of-N signa-
ture code for the integer adder channel [5], [6], such that the
AP is able to unambiguously, i.e., uniquely resolve Vj into
constituent signatures if |Aj| ≤ K. In [5], [6] it was shown
that the signatures can be constructed such that their length
is L ≈ K log N bits. The use of signature coding allows for
the generalization of the concept of the collision, as now the
AP is able to directly exploit the slots in which there are
K or less active users. In essence, joint application of PLNC
and signature coding effectively provides an error-free multiple
user detection of up to K users at the AP.

Finally, we assume that

the AP is capable of storing
unresolved sums Vj and performing SIC, through which the
sums that contain more than K signatures of the active users
may become useful in later stages.

1Note that PLNC is commonly speciﬁed in terms of operations in the ﬁnite
ﬁeld Fq. We adopt the framework of [7] in which the connection to integer
operations is made precise and refer the reader to [7] for further details.

+ users

!" # $%&’()"*

[0, dS], whose conditional pmf is

p(dA|dS, n) = P[|Aj| = dA|dS, n]

AP

!/

,9

Slot 9

=((cid:0) n

dA(cid:1)(cid:0) N −n

dS−dA(cid:1)/(cid:0) N

dS(cid:1), n ≥ dA

n < dA

0,

,

(6)

which, for ﬁxed dS and when n, N → ∞, can be approxi-
mated as

!
"
"
"
!
"
"
"
!

!/

/012

3 4-

,- # .
5556
7- # $%&’8" ,- # .

/012

)/

Fig. 1: Contention in slot sj. Users active in sj are marked in
blue. The AP a priori knows only the set of potentially active
users in sj, but not which of them are actually active.

A. Access Strategy

Our interest is to design an access strategy that, given the
uncertainty in the set of the active users and knowing only
pA and N , achieves favorable performance in the terms of the
probability of identifying active/inactive users and/or through-
put (both parameters are formally deﬁned later). We adopt an
approach in which the transmission schedule of each user is
ﬁxed at the beginning of the contention period by the AP and
signaled to the users. This could be achieved, e.g., via beacon
by which the AP signals the start of the contention period
and informs the users about their transmission schedules.2 The
transmission schedule effectively applies to active users only
and deﬁnes in which slots of the contention period the users
should transmit their signatures. The design of the schedules is
crucial for the achievement of an effective resolution strategy,
when both the set and the size of the set of active users is a
priori not known.

For the design of the schedules, we adopt an approach in-
spired by the rateless coding paradigm [12], [14]. Speciﬁcally,
the pivotal design parameter of the considered approach is the
speciﬁcation of the number of potentially active users in all
slots sj, denoted as slot degrees |sj|; this is done according
to a predeﬁned slot degree distribution

N

ΩdS = P[|sj| = dS], 1 ≤ dS ≤ N, and

ΩdS = 1.

(5)

XdS =1

Observe that slot degrees are independent identically dis-
tributed (i.i.d) random variables, with the expected value
β = E[|s|]. Further, after specifying |sj|, the AP schedules
|sj| users in slot sj by choosing them uniformly randomly
from the set of all users (comprising both active and inactive
users). Therefore, only a random subset of users Aj from |sj|
scheduled ones is actually present in the slot, corresponding
to the active users. Assume that |sj| = dS and NA = n. The
number of active users |Aj| is a random variable in the range

2This could be effectively done by broadcasting a common seed, which in
combination with the user signatures, determines the transmission schedules.

p(dA|dS, n) ≈(cid:18)dS

dA(cid:19)(cid:16) n

N(cid:17)dA(cid:16)1 −

The active-degree distribution of a slot is

n

N(cid:17)dS−dA

,

(7)

ΨdA = P[|Aj| = dA] =

for 0 ≤ dA ≤ N .

N

N

Xn=1

XdS=1

p(dA|dS, n)ΩdS p(n),

(8)

In order to avoid non-unique resolvability of the signature
sums when |Aj| > K, one could set max |sj| = K, ∀j.
However, such an approach is too restrictive and it is beneﬁcial
to allow max(|sj|) > K, as shown in later sections. In order
to cope with the case when it happens that |Aj| > K, we
assume that the AP is able to infer how many signatures are
actually present in the sum Vj. This could be done, e.g., using
an indicator symbol that is set to 1 and located at a ﬁxed and
the same position in every signature, such that the sum of
these symbols indicates the value of |Aj| [5], [6]. We further
comment on this issue in Section IV-B.

From the user perspective, the assigned schedule deﬁnes:
(i) how many times a user sends a replica of its signature,

which is denoted as the user degree |ui|, 1 ≤ i ≤ N ,

(ii) slots in which these replicas occur.
It can be shown that the user degrees are characterized by the
user degree distribution

P[|ui| = dU ] = ΛdU ≈(cid:18)M β

dU (cid:19)(cid:18) 1

N(cid:19)dU (cid:18)1 −

1

N(cid:19)M β−dU

(9)

= (cid:0) M

N β(cid:1)dU

dU !

e− M

N β, 1 ≤ dU ≤ M,

(10)

where M is the length of the contention period that
is
adaptively determined, M β is the total number of signature
transmissions taking place in the contention period, and the
expected user degree is E [|u|] = M

N β.
B. Resolution of the Active Users Status

The algorithm for the resolution of the user-activity status
resembles the iterative belief-propagation erasure decoding of
rateless codes [12], with a difference that up to K simulta-
neous transmissions can be resolved. Speciﬁcally, after each
slot, the AP performs PLNC decoding, stores the received
signature sum (4) and attempts resolution of the involved
signatures. If the AP succeeds (i.e.,
there were up to K
signatures in the sum),
then it also removes the resolved
signatures from all previously stored and unresolved signature
sums, in which these signatures may be involved, i.e., the

AP performs successive interference cancellation.3 In the next
step, the AP attempts to resolve the signature sums that were
affected by SIC in the previous step. Note that, after resolution
of a signature sum, the AP also implicitly learns which of
the potentially involved signatures (i.e., users) are inactive;
however, this information does not help resolution of the active
signatures in the proposed framework.

C. Performance Parameters

The basic performance parameter of interest is the condi-
tional probability of resolving an active user, given that there
are NA = n users active,

pR(M |n) =

NR(M |n)

n

,

(11)

where NR(M, n) is the number of the resolved active users
during M slots of the contention period, given that NA = n.
Averaging over NA produces

pR(M ) =

N

Xn=1

pR(M |n) p(n) ≈

N

Xn=1

NR(M |n)

n

αn
n!

e−α,

(12)

We are also interested in throughput, i.e., the rate by which
the AP resolves user activity status over slots. The throughput
conditioned on NA = n is

NR(M |n)

T (M |n) =

M K
and the average throughput is

=

pR(M |n) n

M K

,

(13)

T (M ) =

N

Xn=1

T (M |n) p(n) ≈

1

M K

N

Xn=1

pR(M |n)

αne−α
(n − 1)!

.

(14)

where the normalization through factor K takes into account
the overhead required by the signature coding.

D. Graph Representation

We represent the contention process through a graph, see
Fig. 2. The nodes on the left represent users and the nodes
on the right represent slots of the contention period. There
are two types of users, active - marked in blue, and inactive
- marked in white. In line with the description of the access
strategy, all the edges of the graph are pre-determined before
the contention period starts, corresponding to the individual
schedules. Among them, only the edges incident to the active
users are actually realized and correspond to the signatures’
transmissions; these edges are represented by solid lines. The
edges corresponding to the inactive users are represented by
dashed lines. Before the resolution starts, the AP does not
know which edges in the graph are actually active/inactive.

The resolution algorithm, in terms of graph representation,
can be seen as removal of the involved edges, see Fig. 3.
Speciﬁcally, when the signature sum is resolved, all edges
incident to a slot are removed; this holds both for the active

! users

" slots

!

# active users

! $ !

#

inactive  users

!
"
"
"
!
"
"
"
!

!
"
"
"
!
"
"
"
!

!
"
"
"
!
"
"
"
!

Fig. 2: Graph representation of the contention period.

and inactive edges, as the latter do not contribute to the sum.
Finally, when an edge incident to a user node is removed, then
all the other edges incident to the same user node are also
removed; this corresponds to the SIC step of the algorithm.

IV. ANALYSIS

A. Asymptotic Probability of User Activity Status Resolution
We derive the probability of user activity status resolution
in asymptotic setting when N → ∞, using the approach that
is based on the and-or tree evaluation [15]. In order to foster a
tractable analysis, we use the following approximation to (14)

T (M ) ≈ T (M | E[NA]) = T (M |α),

(15)

where E[NA] = α, see (1). In other words, we develop the
analysis for the expected number of active users. In further
text, we drop the subscript referring to user/slot, when there
is no ambiguity.

We assume that

the decoding algorithm is in its l−th
iteration. We start by considering a slot node, as depicted in
Fig. 4(a), and assume that there are dA ≥ 1 active edges. We
consider one of the randomly chosen active edges that has not
been removed in previous iterations and by rA(l|dA) denote
the probability that the edge is not removed in the current
iteration. Finally, by yA(l − 1) we denote the probability that
an active edge incident to the slot was not removed in the
previous iteration.4

The probability that an active edge incident to a slot is not

removed in the current iteration is:

rA(l|dA) = 1−

min(dA,K)

−

Xh=1 (cid:18)dA − 1

h − 1(cid:19)yA(l − 1)h−1(1 − yA(l − 1))dA−h,

(16)

3Recall that the AP deﬁnes the schedules and thereby knows in which slots

4For a more detailed introduction to and-or tree evaluation, we refer the

the signature replicas occur.

interested reader to [15].

(a)

(b)

(c)

(d)

!"

!!#

!’

!(

!$

!)

%" &

%*&

%+&

!"

!!#

!’

!(

!$

!)

%" &

%*&

%+&

!"

!!#

!’

!(

!$

!)

%" &

%*&

%+&

!"

!!#

!’

!(

!$

!)

%" &

%*&

%+&

Fig. 3: An example graph of user resolution for 2-out-of-N signature coding. (a) Contention outcome. (b) The signature sums
in s2 and s3 are resolved, where s2 contains no active signatures and s3 contains sum of signatures U1 and U4. (c) Replicas
of U1 and U4 are cancelled from s1, leaving two active signatures in the corresponding sum. (c) U3 and U6 are resolved in s1.

active user

pR(M |α) = 1 − lim
l→∞

yA(l),

(a)

%& ’)!&

!& # $

(& ’ # $

(& ’ # $

!* # $

(b)

(& ’)!"

!" # $

%& ’

%& ’

. . .

.  .  .

. . .

active users

inactive  users

Fig. 4: (a) Slot and (b) user nodes in and-or tree evaluation.

for dA ≥ 1, which is due to the properties of the K-out-of-
N signature coding. On the other hand, if any of the edges
incident to a user node with degree dU becomes removed,
Fig. 4(b), all other edges are also removed in the SIC step.
Using analogous notation, this is expressed as

yA(l|dU ) = rA(l)dU −1.

(17)

In order to derive unconditional probabilities of not remov-
ing an edge incident to a slot/user node, we need edge-oriented
degree distribution [15], i.e., the probabilities that an edge is
incident to a slot/user node of a certain degree; these are

ψdA =

, dA ≥ 1, and λdU =

, dU ≥ 1. (18)

The probability that an active edge incident to a slot node is
not removed in iteration l is
∞

rA(l) =

ψdArA(l|dA),

(19)

dA ΨdA

Pj Ψj

dU ΛdU

Pi Λi

XdA=1

The probability that an edge incident to a user node is not
removed in iteration l is

yA(l) =Xdu

λdU yA(l|dU ) =XdU

≈ e−(1+ǫ)β(1−rA(l)),

λdU rA(l)dU −1

(20)

(21)

N .
where (1 + ǫ) = M

The and-or tree evaluation starts with the initial value

yA(0) = 1, and outputs the probability of user resolution:

(22)

(23)

from which the asymptotic throughput can be derived as

T (M |α) =

pR(M |α) pA

(1 + ǫ)K

.

B. Estimating Number of Active Users

In order to keep track of the probability of the user
resolution, the AP has also to learn the value of NA, i.e.,
how many users are active. A way to estimate NA is to use
the information on how many active users |Aj| are involved
in the sum Vj. As elaborated in Section III, we assume that
every signature contains an indicator symbol, the sum of which
informs the AP of the number of the active signatures |Aj|
involved in Vj, j = 1, . . . , M , see (4). Nevertheless, due to
the operating range of the AP receiver, it is sensible to assume
that there is an upper limit on |Aj|, denoted by Kmax, after
which the AP only knows that the number of active signatures
is equal to or larger than Kmax. We consider only the case
when Kmax ≥ K, for obvious reasons. In further text, we
propose a simple maximum a posteriori (MAP) estimator that
makes use of the observations of |Aj |, 1 ≤ j.

The a priori probability that the number of active users NA
is equal to n is given by (2). Assume for the time being that
the exact value of |Aj| can be detected. With a slight abuse
of notation, where we denote by |sj| and |Aj | the realizations
of the slot degree and the number of the active users in slot
sj, the a posteriori probability that NA = n is

p(n | |A1|, . . . , |Am|; |s1|, . . . , |sm|) =

p(|A1|, . . . , |Am| | |s1|, . . . , |sm|; n) p(n)

p(|A1|, . . . , |Am| | |s1|, . . . , |sm|)
j=1 p(|Aj| | |sj|, n) p(n)

,

j=1 p(|Aj| | |sj|)

=

= Qm
Qm

(24)

(25)

where m denotes the current number of the observed slots and
where we used the fact that the selection of the slot degrees
and of the users is independent over slots. The MAP estimator
provides n that maximizes (24), i.e.,

arg max

{p(n | |A1|, . . . , |Am|; |s1|, . . . ,|sm|)},

n

(26)

or, equivalently,

arg max

n

{log(p(n | |A1|, . . . , |Am|; |s1|, . . . ,|sm|))}.

(27)

Further, we have

log(p(n | |A1|, . . . , |Am|; |s1|, . . . , |sm|)) = log(p(n))+

m

m

+

log(p(|Aj| | |sj|, n)) −

log(p(|Aj | | |sj|)).

(28)

Xj=1

Xj=1

Instead of maximizing (28), it is equivalent to maximize

m

Xj=1

F (m, n) =

log(p(|Aj| | |sj|, n)) + log(p(n)).

(29)

The maximum can be obtained by solving the equation

∂F (m, n)

∂n

=

m

Xj=1(cid:26) |Aj|

n

+ log α −

|sj| − |Aj|

N − n (cid:27) +

1
h

+ γ = 0,

(30)

−

n

Xh=1

where γ is the Euler–Mascheroni constant, and where we
substituted (6) and (2) into (29).

The estimation is performed after each observed slot, upon
execution of the signature resolution algorithm. Speciﬁcally,
after each observed slot sj, the AP detects whether |Aj| ≤
K. If yes, the AP resolves the sum Vj and iterates SIC and
signature resolution step, as described in Section III. After the
signature resolution, the AP obtains up-to-date information on
all Aj, 1 ≤ j ≤ m, which may include learning the exact
values of some |Aj | for which the AP previously only knew
that |Aj | ≥ Kmax. Using all |Aj| that are exactly known,
the AP solves (30) and obtains the current estimate of NA.
Obviously, as the slots of the contention period elapse, the
estimate becomes more reﬁned. We note that disregarding the
slots for which it remains only known that |A| ≥ Kmax is
clearly a suboptimal solution, but it allows for an analytically
elegant estimator (30).

V. EVALUATION

As an illustration, we evaluate the performance of the
proposed scheme in a simpliﬁed instance in which all slot
degrees |sj| are equal and set to β, i.e.,

Ωds =(1,

0,

ds = β,
otherwise.

(31)

We do not investigate the optimality of such an approach
in the paper, and the design of more involved slot degree-
distributions which may offer improved performance is part
of our ongoing work. In the rest of the text we assume that
the probability of user activation is pA = 0.2.

1

0.8

0.6

0.4

0.2

0

* , K=1
pR
* , K=2
pR
* , K=4
pR
* , K=8
pR
pU, K=1
pU, K=2
pU, K=4
pU, K=8
0.25

0.05

0.1

0.15

M / N

0.2

(a) Maximal probability of active user resolution p∗
bound pU .

R and its upper

*

T

*

β

0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0

90
80
70
60
50
40
30
20
10
0

K=1
K=2
K=4
K=8

0.05

0.1

0.15

M / N

0.2

0.25

(b) Maximal asymptotic throughput T ∗.

K=1
K=2
K=4
K=8

0.05

0.1

0.15

M /N

0.2

0.25

(c) Optimal slot degree β ∗.

Fig. 5: Asymptotic performance, pA = 0.2.

A. Asymptotic Performance

In the asymptotic case, when N → ∞, it can be shown that

(18) becomes

ψdA =(cid:18) β − 1

dA − 1(cid:19)pdA−1

A

(1 − pA)β−dA, dA ≥ 1,

(32)

which, combined with (19) and (21), enables the evalution.

Fig. 5 shows the asymptotic performance for constant sj.
In particular, the ﬁgure depicts (a) the maximal probability
of resolution p∗
R, (b) the corresponding maximal expected
throughput T ∗, and (c) the corresponding optimal slot degree
N , i.e.,
β∗ for which p∗
the number of slots in the contention period vs the total number

R is achieved, as functions of the ratio M

K
1
2
4
8

¯fR,E
0.92
0.82
0.78
0.73

¯fR,A
0.92
0.82
0.77
0.73

∗

T
0.82
0.83
0.78
0.78

∆nE
0.01
-0.01
-0.01
0.01

|∆nE|

0.05
0.05
0.05
0.05

β ∗
15
21
33
54

TABLE I: Performance for pA = 0.2, N = 1000, H = 0.7.

N ≈ 0.2

K = pA

K ; note that M = pAN

of users. Obviously, Fig. 5(a) shows that increase in K allows
R. Also, all the curves corresponding to
for faster increase in p∗
R show a threshold-like behavior characteristic for CSA [2],
p∗
i.e., there is a steep increase at a certain value of M/N when
R happens
the SIC gain emerges. This steep increase in p∗
K is the minimum
at M
number of slots required to resolve NA = pAN users in the
proposed scenario. Fig. 5(a) also depicts the upper limit on
the probability of the active user resolution pU = 1 − P[|ui| =
0] ≈ 1 − e− M β∗
N , i.e., the upper bound assumes that all users
that transmitted at least once become resolved. Obviously, as
K grows, the gap between p∗
R and pU narrows. Fig. 5(b) shows
that T ∗ is maximized for M = pAN
K , and that the maximum
values of T ∗ slowly increase with K. This means that investing
in signature coding, i.e., increasing K, does not notably impact
throughput in this simple scheme, but does beneﬁt attaining
the upper bound on the pR performance. Finally, Fig. 5(c)
shows that β∗ increases with K, which could be expected.

B. Non-asymptotic Performance

Non-asymptotic performance is evaluated via simulations
for N = 1000, Kmax = 10 and varying β. The aim is to
maximize the expected throughput, i.e., to ﬁnd the optimal β,
when the estimated fraction of resolved (active) users fR,E is
above a predeﬁned threshold H.5 In each simulation run, the
slots are added and user resolution and estimation executed
until fR,E = NR
≥ H, where NR and NE are the current
NE
number of resolved active users and the current estimate of the
total number of active users, respectively. When fR,E ≥ H,
then NR, NE, the actual number of active users NA and the
length of the contention period M are recorded.

NA

NA

Table I presents performance parameters for H = 0.7: (i)
fR,E, (ii) the actual fraction of resolved users fR,A = NR
,
NA
(iii) the maximal throughput T ∗ = NR
M , (iv) the relative
estimation error ∆nE = NE −NA
, and (v) the relative absolute
error |∆nE| = |NE −NA|
, averaged over simulation runs for
(vi) β∗ that maximizes the average throughput. Obviously,
¯fR,E is rather close to ¯fR,A and the estimation errors are
small. Further, ¯fR,E is actually considerably larger than H. In
particular, choice of H = 0.7 corresponds to the value of p∗
R
R as M
in Fig. 5(a) for which there is a sharp increase in p∗
N
grows, which is due to SIC; this corresponds to a sudden jump
in fR,E well above H in a course of a single slot in the non-
asymptotic scenario.6 The values of β∗ are quite close to the

5This is just one way to optimize the scheme; one could also consider a
target estimation accuracy, or maximize expected throughput and disregard
H, etc. Such exploration of the design space exceeds the scope of this work.

6The same phenomenon was observed in [9].

ones presented in Fig. 5(c), for which the corresponding p∗
R
∗ is lower than in the asymptotic
is equal to ¯fR,A. Finally, T
case, which can be expected in CSA-based schemes [8], [9].

VI. CONCLUDING REMARKS

We presented a scheme for the resolution of batch arrival
of the unknown subset of users, leveraging on sign-compute-
resolve and CSA frameworks. In contrast to standard CSA,
we considered design of the slot-degree distributions when
the number active users is a priori not known. We developed
analytical description of the asymptotic performance and the
estimator of the number of active users, which is an integral
part of the proposed scheme. We evaluated the scheme in
a simple instance in which all slot degrees are the same.
Optimization of the slot-degree distribution and the criteria
for the contention termination are part of our ongoing work.

ACKNOWLEDGMENT

The research presented in this paper was supported in part
by the Danish Council for Independent Research, Grant No.
DFF-4005-00281, and in part by COST Action IC1104.

The authors would like to thank Marko Angjelichinoski for

the software implementation of the estimator.

REFERENCES

[1] L. G. Roberts, “Aloha packet system with and without slots and capture,”
SIGCOMM Comput. Commun. Rev., vol. 5, no. 2, pp. 28–42, Apr. 1975.
[2] E. Paolini, C. Stefanovic, G. Liva, and P. Popovski, “Coded Random
Access: How Coding Theory Helps to Build Random Access Protocols,”
IEEE Commun. Mag., vol. 53, no. 6, pp. 144–150, Jun. 2015.

[3] K. Censor-Hillel, B. Haeupler, N. Lynch, and M. Médard, “Bounded-
Contention Coding for Wireless Networks in the High SNR Regime,”
in Distributed Computing. Springer, 2012, pp. 91–105.

[4] J. Goseling, “A Random Access Scheme with Physical-layer Network
Coding and User Identiﬁcation,” in Proc. IEEE ICC 2014, MASSAP
Workshop, Sydney, Australia, Jun. 2014.

[5] D. Danyev, B. Laczay, and M. Ruszinko, “Multiple Access Adder
Channel,” in Multiple Access Channels, E. Biglieri and L. Gyorﬁ, Eds.
IOS press, 2007, pp. 26–53.

[6] J. Goseling, C. Stefanovic, and P. Popovski, “Sign-Compute-Resolve
for Random Access,” in Proc. 52nd Annual Allerton Conference, Mon-
ticello, IL, USA, Sep. 2014.

[7] ——, “A Pseudo-Bayesian Approach to Sign-Compute-Resolve Slotted
ALOHA,” in IEEE ICC 2015, MASSAP Workshop, London, UK, Jun.
2015.

[8] G. Liva, “Graph-Based Analysis and Optimization of Contention Reso-
lution Diversity Slotted ALOHA,” IEEE Trans. Commun., vol. 59, no. 2,
pp. 477–487, Feb. 2011.

[9] C. Stefanovic and P. Popovski, “ALOHA Random Access that Operates
as a Rateless Code,” IEEE Trans. Commun., vol. 61, no. 11, pp. 4653–
4662, Nov. 2013.

[10] E. Paolini, G. Liva, and M. Chiani, “Coded Slotted ALOHA: A Graph-
Based Method for Uncoordinated Multiple Access,” IEEE Trans. Inf.
Theory, vol. 61, no. 12, pp. 6815 – 6832, Dec. 2015.

[11] M. Ghanbarinejad and C. Schlegel, “Irregular Repetition Slotted
ALOHA with Multiuser Detection,” in Proc. of IEEE WONS, Banff,
AB, Canada, Mar. 2013.

[12] M. Luby, “LT Codes,” in Proc. of 43rd IEEE FOCS, Vancouver, BC,

Canada, Nov. 2002.

[13] B. Nazer and M. Gastpar, “Reliable Physical Layer Network Coding,”

Proceedings of the IEEE, vol. 99, no. 3, pp. 438–460, Mar. 2011.

[14] C. Stefanovic, P. Popovski, and D. Vukobratovic, “Frameless ALOHA
protocol for Wireless Networks,” IEEE Comm. Lett., vol. 16, no. 12, pp.
2087–2090, Dec. 2012.

[15] M. G. Luby, M. Mitzenmacher, and A. Shokrollahi, “Analysis of
Random Processes via And-Or Tree Evaluation,” in Proc. of 9th ACM-
SIAM SODA, San Francisco, CA, USA, Jan. 1998.

