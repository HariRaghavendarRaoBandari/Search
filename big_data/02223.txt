6
1
0
2

 
r
a

M
7

 

 
 
]

.

R
P
h
t
a
m

[
 
 

1
v
3
2
2
2
0

.

3
0
6
1
:
v
i
X
r
a

Realizable monotonicity for continuous-time Markov processes

P. Dai Pra∗†1, P.-Y. Louis‡§2, and I. G. Minelli¶3

1Dipartimento di Matematica Pura ed Applicata, Universit`a degli Studi di Padova,

2Institut f¨ur Matematik, Universit¨at Potsdam, Am neuen Palais, 10 – Sans Souci,

via Trieste 63, I-35131 Padova, Italy

3Dipartimento di Matematica Pura ed Applicata, Universit`a degli Studi di Padova,

via Trieste 63, I-35131 Padova, Italy

14469 Potsdam, Germany

Post-print of Stochastic Processes and their Applications,

120 (6), June 2010, pp. 959–982

doi:10.1016/j.spa.2010.03.002

Creative Commons Attribution Non-Commercial No Derivatives License

Received 20 October 2008; received in revised form 23 February 2010; accepted 26

February 2010 Available online 7 March 2010

http://www.sciencedirect.com/science/article/pii/S0304414910000499

Abstract

We formalize and analyze the notions of stochastic monotonicity and realizable mono-
tonicity for Markov Chains in continuous-time, taking values in a ﬁnite partially ordered set.
Similarly to what happens in discrete-time, the two notions are not equivalent. However, we
show that there are partially ordered sets for which stochastic monotonicity and realizable
monotonicity coincide in continuous-time but not in discrete-time.

Markov processes, coupling, partial ordering, stochastic monotonicity, realizable monotonic-

Keywords

ity, monotone random dynamical system representation

2000 MSC: Primary: 60J27 Secondary: 60J10, 60E15, 90C90

∗daipra@math.unipd.it
†P. Dai Pra and I. G. Minelli thank the ESF research networking program RDSES and the Institut f¨ur Mathe-

matik of Universit¨at Potsdam for ﬁnancing stays in Potsdam.

‡louis@math.uni-potsdam.de
§P.-Y. Louis thanks the Mathematics Department of the University of Padova for ﬁnancing stays in Padova.
¶minelli@math.unipd.it

1

1

Introduction

The use of Markov chains in simulation has raised a number of questions concerning qualitative
and quantitative features of random processes, in particular in connection with mixing properties.
Among the features that are useful in the analysis of eﬀectiveness of Markov Chain Monte Carlo
(MCMC) algorithms, a relevant role is played by monotonicity. Two notions of monotonicity have
been proposed, for Markov chains taking values in a partially ordered set S (poset from now on).
To avoid measurability issues, which are not relevant for our purposes, we shall always assume
S to be ﬁnite. Moreover, all Markov chains are implicitly assumed to be time-homogeneous.

Deﬁnition 1.1. A Markov chain (ηt), t ∈ R+ or t ∈ Z+, on the poset S, with transition
probabilities Pt(x, y) := P (ηt = y|η0 = x), is said to be stochastically monotone (or, more brieﬂy,
monotone) if for each pair w, z ∈ S with w ≤ z there exists a Markov chain (Xt(w, z)) on S × S
such that

i.) X0(w, z) = (w, z);

ii.) each component (X i

t (w, z)), i = 1, 2 is a Markov chain on S with transition probabilities

Pt(·, ·);

iii.) X 1

t (w, z) ≤ X 2

t (w, z) for all t ≥ 0.

There are various equivalent formulations of stochastic monotonicity. For instance, deﬁning

the transition operator Ttf (x) :=Py∈S f (y)Pt(x, y), then the chain is stochastically monotone if

and only if for every t ≥ 0 Tt maps increasing functions to increasing functions. See Theorem 5
in [KKO77] for this generalization to continuous-time dynamics of the well-known Strassen’s
result (Theorem 2.4 in [Lin92]). This characterization can be turned (see Section 2) into a simple
algorithm for checking stochastic monotonicity of Markov chains in terms of the element of the
transition matrix (in discrete-time) or in terms of the inﬁnitesimal generator (in continuous-time).
References on the relations between this monotonicity concept and the existence and construc-
tion of a monotone coupling for some family of processes in continuous-time, such as diﬀusions
or interacting particle systems, are [Che91, FYMP97, FF97, LS98] and references therein.

For various purposes, including simulation, a stronger notion of monotonicity has been intro-

duced.

Deﬁnition 1.2. A Markov chain (ηt), t ∈ R+ or t ∈ Z+, on the poset S, with transition
probabilities Pt(x, y) := P (ηt = y|η0 = x), is said to be realizably monotone if there exists a
Markov chain (ξt(·)) on SS such that

i.) ξ0 = Id;

ii.) for every ﬁxed z ∈ S, the process (ξt(z)) is a Markov chain with transition probabilities

Pt(·, ·);

iii.) if w ≤ z, then for every t ≥ 0 we have ξt(w) ≤ ξt(z).

In other words, realizable monotonicity means that we can simultaneously couple, in an
order preserving way, all processes leaving any possible initial state. This property becomes
relevant when one aims at sampling from the stationary measure of a Markov chain using the
Propp and Wilson coupling from the past algorithm (see [PW96]) which we brieﬂy summarize in
Subsection 2.4. Notice that if realizable monotonicity holds, the simultaneous order preserving
coupling ξt can be extended to all SS. Indeed, for f ∈ SS, we can deﬁne ˜ξt := ξt ◦ f . We have

2

˜ξ0 = f and property ii.) holds true for ˜ξt, while property iii.) has to be replaced by f (w) ≤
f (z) ⇒ ˜ξt(w) ≤ ˜ξt(z).

We recall that in [FM01] a more general deﬁnition of stochastic monotonicity and realizable

monotonicity for a system of probability measures is considered:

Deﬁnition 1.3. Let A and S be two partially ordered sets. A system of probability measures on
S indexed in A, (Pα : α ∈ A) is said to be stochastically monotone if Pα is stochastically smaller

than Pβ (denoted Pα 4 Pβ) whenever α ≤A β, i.e. R f dPα ≤R R f dPβ for every increasing

function f : S → R whenever α ≤A β.
The system (Pα : α ∈ A) is said to be realizably monotone if there exists a probability space
(Ω, F, P) and a system of S-valued random variables (Xα : α ∈ A) with P(Xα ∈ ·) = Pα(·) such
that Xα ≤S Xβ whenever α ≤A β.

If the transition probabilities, or the inﬁnitesimal generator, are given, no simple rule for
checking realizable monotonicity is known. Since, obviously, realizable monotonicity implies
stochastic monotonicity, a natural question is to determine for which posets the converse is
true. This problem has been completely solved in [FM01] for discrete-time Markov chain (see
Theorem 1.5 here). More precisely, it has been solved as a particular case of the more general
problem of equivalence between stochastic and realizable monotonicity for systems of probability
measures Pα w.r.t (A, S) where A = S = S, Pα = P (α,
· ) with P (·, ·) denoting the Markov
chain’s transition probability on S. Notice that the realizable monotonicity of (P (α, · ), α ∈ S)
is equivalent to the one for discrete-time Markov chains given in Deﬁnition 1.2 through the
construction

( ξ0(z) = z,

ξt(z) = X (t)

ξt−1(z) ∀t ≥ 1

where (X (t)
(P (α, · ), α ∈ S).

α : α ∈ S) (t ∈ Z+) is an i.i.d. sequence of copies of (Xα : α ∈ S), which realizes

In what follows, when such equivalence holds we shall say that monotonicity equivalence holds.

Let us now give the following deﬁnitions

Deﬁnition 1.4. The Hasse diagram of a poset is an oriented graph. Its vertices are the elements
of the poset. There is an edge from x to y if x (cid:22) y and x (cid:22) z (cid:22) y implies z = x or z = y ; it is
said that y covers x.

The cover graph of a poset S is the Hasse diagram regarded as an undirected graph.

By convention, y is drawn above x in the planar representation of the diagram in order to
mean there is an edge from x to y. With this convention of reading the diagram from bottom to
the top there is no need to direct any edges. See for example ﬁgures 1, 2, 3.

In the case of discrete-time Markov chains the following result holds. It is a consequence of

Theorem 4.3 stated in [FM01], (see the previous comment).

3

Theorem 1.5. Every stochastically monotone Markov chain in the poset S is also realizably
monotone if and only if the cover graph of S is acyclic, i.e. there is no loop x0, x1, . . . , xn, xn+1 =
x0 such that, for i = 0, 1, . . . , n,

i.) xi 6= xi+1;

ii.) either xi covers xi+1 or xi+1 covers xi.

In the following we call acyclic a poset which has an acyclic cover graph. The nontrivial proof

of the above statement consists of three steps.

1. For each minimal cyclic poset an example is found of a stochastically monotone Markov

chain which is not realizably monotone.

2. Given a general cyclic poset, a stochastically monotone but not realizably monotone Markov

chain is constructed by “lifting” one of the examples in step 1.

3. A proof by induction on the cardinality of the poset shows that, in an acyclic poset,

stochastically monotone Markov chains are realizably monotone.

Note there is no contradiction with the fact that on some cyclic posets, such as product spaces,
order preserving coupling may exist for some monotone Markovian dynamics. See for in-
stance [Lou05].

Our aim in this paper is to deal with monotonicity equivalence in continuous-time for time-
homogeneous regular Markov chains, i.e. Markov chains possessing an inﬁnitesimal generator
(or, equivalently, jumping a.s. ﬁnitely many times in any bounded time interval). It turns out
that if in a poset S stochastic monotonicity implies realizable monotonicity in discrete-time, then
the same holds true in continuous-time (see Corollary 2.8). The converse is not true, however;
for the posets whose Hasse diagram is represented in Figure 1 (the diamond and the bowtie,
following the terminology in [FM01]) equivalence between stochastic monotonicity and realizable
monotonicity holds in continuous-time but not in discrete-time.

b




        
❃❃❃❃❃❃❃❃

❃❃❃❃❃❃❃❃
        




d







a

c

c

a










❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃
                




d

b

Diamond

Bowtie

Figure 1: The four-points posets for which there is no equivalence between the two notions of
monotonicity in discrete time.

In this paper we do not achieve the goal of characterizing all posets for which equivalence
holds in continuous time. Via a computer-assisted (but exact) method we ﬁnd a complete list
of ﬁve- and six-point posets for which equivalence fails (see Propositions 3.1 and 3.8). Moreover
we state in the Proposition 4.4 the following: in each poset containing one of the former as an
induced sub-poset (see Deﬁnition 3.7), equivalence fails as well (this does not follow in a trivial
way).

In Section 2 we give some preliminary notions, whose aim is to put the realizable monotonicity
problem in continuous-time on a ﬁrm basis. In Section 3 we perform a systematic investigation
of the monotonicity equivalence for ﬁve and six points posets, using the software cdd+ (see

4

[cdd]). Extensions to larger posets are presented in Section 4. Some further considerations and
conjectures are contained in Section 5.

2 Preliminaries

2.1 Characterization of realizable monotonicity

Let (S, ≤) be a ﬁnite poset, and L = (Lx,y)x,y∈S be the inﬁnitesimal generator of a regular
continuous-time Markov chain on S. Assume the chain is realizably monotone and let (ξt(·))t≥0
be an order-preserving coupling. Since the original Markov chain is regular, also (ξt(·))t≥0 must
if not, for at least one z ∈ S, ξt(z) would be not regular, which is not possible by
be regular:
condition ii. in Deﬁnition 1.2. Thus (ξt(·))t≥0 admits an inﬁnitesimal generator L = (Lf,g)f,g∈SS .
Let now be ϕ : S → R, z ∈ S, and deﬁne Fϕ,z : SS → R by Fϕ,z(f ) := ϕ(f (z)). The fact that
each component of the chain generated by L is a Markov chain with generator L is equivalent to
the following statement: for all choices of ϕ, z, and all f ∈ SS,

LFϕ,z(f ) = Lϕ(f (z)).

(1)

By an elementary algebraic manipulation of (1), we can re-express (1) with the following state-
ment: for every z, x, y ∈ S, x 6= y and every f ∈ SS such that f (z) = x, we have

Lx,y = Xg∈SS:g(z)=y

Lf,g.

(2)

Now let Id denote the identity on S, and deﬁne Λ(f ) := LId,f . Note that since the Markov chain
generated by L is order preserving, necessarily LId,f > 0 ⇒ f ∈ M, where M is the set of
increasing functions from S to S. Note that, by (2), for x 6= y,

Lx,y = Xf ∈M:f (x)=y

Λ(f ).

(3)

Identity (3) characterizes the generators of realizably monotone Markov chains, in the sense
speciﬁed by the following proposition.

Proposition 2.1. A generator L is the generator of a realizably monotone Markov chain if and
only if there exists Λ : M → R+ such that (3) holds.

Proof. One direction has been proved above. For the converse, suppose (3) holds for some
Λ : M → R+. For f, g ∈ SS, deﬁne

Lf,g := Xh∈M:g=h◦f

Λ(h),

where the sum over the empty set is meant to be zero. It is easily checked that the Markov chain
generated by L is order preserving. Moreover, using (3), a simple computation shows that (2)
holds, completing the proof.

5

2.2 The cones of stochastically monotone and realizably monotone generators

Let S2 := S × S \ {(x, x) : x ∈ S}. An inﬁnitesimal generator is a matrix L = (Lx,y)x,y∈S
whose non-diagonal elements are nonnegative, while the terms in the diagonal are given by

Lx,x = −Py6=x Lx,y. Thus L may be identiﬁed with an element of the cone (R+)S2. A subset

Γ ⊆ S is said to be an up-set (or increasing set) if

x ∈ Γ and x ≤ y ⇒ y ∈ Γ.

The following proposition (see e.g. [Mas87] for the proof) gives a characterization of the gener-
ators of stochastically monotone Markov chains.

Proposition 2.2. An element L ∈ (R+)S2 is the generator of a stochastically monotone Markov
chain if and only if for every up-set Γ the following conditions hold:

• x ≤ y 6∈ Γ ⇒ Xz∈Γ
• x ≥ y ∈ Γ ⇒ Xz6∈Γ

Lx,z ≤Xz∈Γ
Lx,z ≤Xz6∈Γ

Ly,z;

Ly,z.

Remark 2.3. In what follows we shall often call monotone generator (respectively realizably
monotone generator ) the inﬁnitesimal generator of a stochastically monotone Markov Chain
realizably monotone Markov Chain). Given a generator L on S, x ∈ S and Γ ⊂ S,
(resp.

we shall use the symbol Lx,Γ to denote Pz∈Γ Lx,z . Moreover, in order to check stochastic

monotonicity of a generator we shall use the following condition, which is equivalent to the one
given in Proposition 2.2:

i) for every up-set Γ,

x ≤ y /∈ Γ ⇒ Lx,Γ ≤ Ly,Γ;

ii) for every down-set Γ,

y ≥ x /∈ Γ ⇒ Lx,Γ ≥ Ly,Γ

where a down-set is a subset Γ ⊂ S such that x ∈ Γ and y ≤ x ⇒ y ∈ Γ.

Let V := RS2 be provided with the natural Euclidean scalar product h·, ·i. For given x, y ∈ S,

Γ up-set, let W Γ,x,y ∈ RS2 be deﬁned by

for (cid:26) x ≤ y 6∈ Γ, v = y, z ∈ Γ
−1 for (cid:26) x ≤ y 6∈ Γ, v = x, z ∈ Γ

or x ≥ y ∈ Γ, v = y, z 6∈ Γ;

or x ≥ y ∈ Γ, v = x, z 6∈ Γ;

in all other cases.

W Γ,x,y

v,z =

1

0



Proposition 2.2 can be restated as follows: L ∈ (R+)S2 generates a stochastically monotone
Markov chain if and only if

hL, W Γ,x,yi ≥ 0 for every Γ, x, y.

(4)

In other words, denoting by Gmon the set of monotone generators, the elements of Gmon are
characterized by the inequalities

hL, W Γ,x,yi ≥ 0
Lx,y ≥ 0

6

for every Γ, x, y. In other words we are giving Gmon through the rays of its polar cone (see [Zie95]),
i.e. the family of vectors {W Γ,x,y, δx,y : (x, y) ∈ S2, , Γ up-set in S}, where

δx,y

v,z =(cid:26) 1 if (v, z) = (x, y)

0 otherwise.

Proposition 2.1 can also be restated to characterize the set of generators of realizably mono-

tone Markov chains as a cone in V . For f ∈ M, let If ∈ (R+)S2 be deﬁned by

(If )x,y =(cid:26) 1 if f (x) = y

0 otherwise.

(5)

Then the set Gr.mon of generators of realizably monotone Markov chains is the cone given by
linear combination with nonnegative coeﬃcients of the vectors If , i.e.

L = Xf ∈M

Λf If ,

(6)

with Λf ≥ 0. Note that in this case, since for each f ∈ M, Γ up-set, x, y ∈ S, we have
hIf , W Γ,x,yi ≥ 0, we recover the inclusion Gr.mon ⊆ Gmon. Our aim is to determine for which
posets the converse inclusion holds true.

In the next sections, when we want to emphasize the dependence on S, we shall use the notations
Gmon(S) and Gr.mon(S).

2.3 Comparison with the discrete-time case

In this subsection we establish a comparison with the discrete-time case. The claim of Corol-
lary 2.8 below relies on analogous representations in terms of cones for discrete-time transition
matrices.

Consider a Markov chain with transition matrix P . We recall the following fact.

Proposition 2.4. P = (Px,y)x,y∈S is the transition matrix of a stochastically monotone Markov

Chain if and only if, for every up-set Γ, the map x 7→Py∈Γ Px,y is increasing.

This Proposition 2.4 derives from the following general statement, which is an immediate
consequence of the Deﬁnition 1.3 : a system of probability measures (Pα : α ∈ A) on S is
stochastically monotone if and only if, for every up-set Γ ⊂ S the map α 7→ Pα(Γ) is increasing.
The discrete-time version of the argument in Subsection 2.1 shows that P is the transition
matrix of a realizably monotone Markov chain if and only if there exists a probability Π on M
such that

P = Xf ∈M

Πf If ,

(7)

where, with a slight abuse of notation, If given by (5) is now seen as a square matrix, with
the diagonal terms too. A transition probability P may be seen as an element of the convex
set [0, 1]S2 . Note in this representation the identity matrix I is the origin. Analogously to
the continuous-time case, the set of stochastically monotone transition probabilities Kmon (resp.
realizable monotone Kr.mon) is a convex set.

In what follows, we make use of the following simple fact: if L is a stochastically monotone

generator, with any ǫ > 0 such that ǫ ≤ (maxxPz6=x Lx,z)−1, P := I + ǫL is a stochastically

7

monotone transition probability. Conversely, for all ǫ > 0, L := 1
monotone generator whenever P is a stochastically monotone transition probability.

ǫ (P − I) is a stochastically

Deﬁnition 2.5. The weak monotonicity-equivalence holds for a poset S if we can ﬁnd a realiz-
ably monotone transition matrix (1 − λ)I + λP for some λ ∈]0, 1] whenever P is stochastically
monotone.

Remark 2.6. By the correspondence between stochastically monotone generators and transitions
probabilities, Deﬁnition 2.5 is equivalent to the following statement: for any stochastically mono-
tone generator L on S there exists ǫ ∈]0, 1] such that I + ǫL is a realizably monotone transition
probability on S.

Proposition 2.7. Monotonicity equivalence holds for continuous-time Markov chain on S if and
only if weak monotonicity equivalence holds for discrete-time Markov chains on S.

Proof. In view of Remark 2.6, we have to show that the following two statement are equivalent
for a generator L:

i) L is a realizably monotone generator;

ii) there exists ǫ > 0 such that I + ǫL is a realizably monotone transition probability.

We ﬁrst show ii) ⇒ i). Suppose that there exists ǫ > 0 such that the transition probability

I + ǫL = eP is realizably monotone, which means
eP = Xf ∈M
ǫ Xf ∈M

L =

1

Πf If

Πf If ,

for a suitable probability Π on M. Thus the following identity holds in (R+)S2:

which implies that L is realizably monotone.
We now show i) ⇒ ii). Let L be a realizably monotone generator. Then, for ǫ > 0 suﬃciently

realizably monotone for ǫ > 0 small enough. We have the following representation of L as an

small, eP = I + ǫL is a stochastically monotone transition probability. Let us show that eP is
element of (R+)S2: L =Pf ∈M Λf If . Note that f = Id gives no contribution to the sum above,

since IId is the zero element of (R+)S2. We may therefore assume ΛId = 0. Now, consider the
matrix in RS×S given by

We have

where δ{x,y} denotes the Kronecker delta.
Indeed, we have

Λf If .

H = ǫ Xf ∈M
Hx,y =(cid:26) ǫPf ∈M Λf δ{f (x),y} = ǫLx,y

ǫPf ∈M Λf δ{f (x),x} = ǫLx,x + ǫPf ∈M Λf

ǫLx,x = − Xy:y6=x

ǫLx,y = −ǫ Xy:y6=x Xf ∈M

Λf δ{f (x),y}

= −ǫ Xf ∈M Xy:y6=x
= ǫ Xf ∈M

Λf δ{f (x),y} = −ǫ Xf ∈M

Λf δ{f (x),x} − ǫ Xf ∈M

Λf .

8

if x 6= y
otherwise.

Λf (1 − δ{f (x),x})

Λf If − (ǫ Xf ∈M

Λf )I = Xf ∈M

ǫΛf If + (1 − Xf ∈M

ǫΛf )IId.

If we choose ǫ suﬃciently small, we can interpret the quantities

Therefore, we have

eP = I + ǫL = I + ǫ Xf ∈M
Πf :=(cid:26) ǫΛf

for f ∈ M, f 6= Id
for f = Id

1 −Pf ∈M ǫΛf

as probabilities on M and so eP is realizably monotone.

The following fact is an immediate consequence of Proposition 2.7.

Corollary 2.8. Suppose that in the poset S stochastic monotonicity and realizable monotonicity
are equivalent notions for discrete-time Markov chains. Then the equivalence holds for S-valued
continuous-time Markov Chains as well.

We summarize, in the following scheme, the main facts relating continuous and discrete-time.

All matrices are thought as elements of RS2, so the diagonal is not considered.

• P ∈ Kmon ⇒ ∀ǫ > 0, L := 1

ǫ P ∈ Gmon;

• P ∈ Kr.mon ⇒ ∀ǫ > 0, L := 1

ǫ P ∈ Gr.mon;

• L ∈ Gmon ⇒ ∃ǫL, ∀ǫ ≤ ǫL, P := ǫL ∈ Kmon;

• L ∈ Gr.mon ⇒ ∃ǫ0, P := ǫ0L ∈ Kr.mon;

• the weak monotonicity equivalence means the segment [I, P ] intersects Kr.mon whenever

P ∈ Kmon.

2.4 The ”coupling from the past” algorithm revisited

It is well known (see e.g. [Arn98, Br´e99, FG, Min04]) that regular ﬁnite state Markov processes
can be realized as Random Dynamical Systems with independent increments (shortly RDSI). To
set up notations, let (Ω, F, P) be a probability space, and (θt)t∈R be a one-parameter group (i.e.
θt+s = θt ◦ θs, θ0 = Id = identity map) of P-preserving maps from Ω to Ω, such that the map
(t, ω) 7→ θtω is jointly measurable in t and ω. We still denote by S a ﬁnite set, representing the
state space.

Deﬁnition 2.9. A Random dynamical system is a measurable map ϕ : R+ × Ω → SS such that

ϕ(0, ω) ≡ Id

ϕ(t + s, ω) = ϕ(t, θsω) ◦ ϕ(s, ω)

(8)

(9)

for every s, t ≥ 0 and ω ∈ Ω.

Note that, for t ﬁxed, ϕ(t, ·) can be seen as a SS-valued random variable.

9

Deﬁnition 2.10. A Random Dynamical System ϕ is said to have independent increments if for
each 0 ≤ t0 < t1 < · · · < tn the random variables

ϕ(t1 − t0, θt0 ·), ϕ(t2 − t1, θt1·), . . . , ϕ(tn − tn−1, θtn−1·)

are independent.

In what follows we consider the σ-ﬁelds

Ft := σ{ϕ(s, ·) : 0 ≤ s ≤ t}

F − := σ{ϕ(s, θ−t·) : 0 ≤ s ≤ t, 0 ≤ t ≤ +∞}.

The following proposition recalls Theorem 1.2.1 of [D97] (see section 2.1.3 in [Arn98] too).

Proposition 2.11. For a RDSI, the random process (ϕ(t, ·))t≥0 is a SS-valued, time-homogeneous,
Ft-Markov process. Moreover, for any S-valued, F −-measurable random variable X (in particu-
lar any X = x ∈ S constant), the process (ϕ(t, ·)(X))t≥0 is a S-valued, time-homogeneous Markov
process, whose transition probabilities do not depend on X.

The processes (ϕ(t, ·)(x))t≥0, with x ∈ S are called the one point motions of ϕ. When the one
point motions are Markov process with inﬁnitesimal generator L, we say that ϕ realizes L. It is
nothing else than a complete coupling: copies of the chain starting from every initial conditions
are realized on the same probability space.

If we are given a generator L of a Markov chain, it is not diﬃcult to realize it by a RDSI.
Let H be the set whose elements are the locally ﬁnite subsets of R. An element η ∈ H can

be identiﬁed with the σ-ﬁnite point measure Pt∈η δt; the topology in H is the one induced by

vague convergence, and the associated Borel σ-ﬁeld provides a measurable structure on H. Set
Ω′ := HS2. For ω = (ωxy)(x,y)∈S2 ∈ Ω′, we deﬁne

where τ ∈ θtωxy ⇐⇒ τ − t ∈ ωxy. Consider now a probability P on Ω′ with the following
properties:

θtω := (θtωxy)(x,y)∈S2,

i.) for (x, y) ∈ S2, ωxy is, under P, a Poisson process of intensity Lx,y;

ii.) for x ∈ S ﬁxed, the point processes (ωxy)y6=x are independent under P;

iii.) for every I, J disjoint intervals in R, the two families of random variables

{|ωxy ∩ I| : (x, y) ∈ S2} and {|ωxy ∩ J| : (x, y) ∈ S2}

are independent under P;

iv.) for every t ∈ R, P is θt-invariant.

It is easy to exhibit one example of a P satisfying i.-iv.: if Pxy is the law of a Poisson process of
intensity Lx,y, then we can let P be the product measure

P := ⊗(x,y)∈S2

Pxy.

(10)

We now construct the map ϕ pointwise in ω. Deﬁne

Ω = {ω ∈ Ω′ : ωxy ∩ ωxz = ∅ for every (x, y), (x, z) ∈ S2, y 6= z}.

By condition ii. on P, P(Ω) = 1, and clearly θtΩ = Ω for every t ∈ R. For every ω ∈ Ω the
following construction is well posed:

10

• set ϕ(0, ω) = Id for every ω ∈ Ω;

• we run the time in the forward direction. Whenever we meet t ∈S(x,y)∈S2

following updating rule:

ωxy we use the

if ϕ(t−, ω)(x) = z and t ∈ ωzy then ϕ(t, ω)(x) := y.

Proposition 2.12. (see Theorem 3.1 of [Min04]). The map ϕ constructed above is a RDSI, and
its one-point motions are Markov chains with generator L.

Conditions i.- iii. leave a lot of freedom on the choice of P. The choice corresponding to (10)

is the simplest, but may be quite ineﬃcient when used for simulations.

The following Theorem is just a version of the ”coupling from the past” algorithm for perfect

simulation ([PW96]).

Theorem 2.13. Let L be the generator of an irreducible Markov chain on S, π be its stationary
distribution, and let ϕ be a RDSI whose one-point motions are Markov chains with generator L.
Deﬁne

T (ω) := inf{t > 0 : ϕ(t, θ−tω) = constant}

where, by convention, inf ∅ := +∞. Assume T < +∞ P-almost surely. Then for each x ∈ S the
random variable ϕ(T, θ−T ·)(x) has distribution π.

Proof. Set X(ω) := ϕ(T, θ−T ω)(x) that, by deﬁnition of T , is independent of x ∈ S. For h > 0

ϕ(T + h, θ−T −hω)(x) = ϕ(T, θ−T ω)(ϕ(h, θ−T −hω)(x)) = X(ω).

Thus, since we are assuming T < +∞ a.s., we have

X(ω) = lim

t→+∞

ϕ(t, θ−tω)(x).

In particular, this last formula shows that X is F −-measurable. Denote by ρ the distribution of
X, i.e. ρ(x) := P (X = x). We have:

ϕ(h, ω)(X(ω)) = lim

t→+∞

ϕ(t + h, θ−tω)(x)

ϕ(h, ω)(ϕ(t, θ−tω)(x)) = lim
t→+∞
= lim

t→+∞

ϕ(t + h, θ−t−h(θhω))(x) = X(θhω).

By Proposition 2.11, ϕ(h, ·)(X(·)) has distribution ρehL. But, since θh is P-preserving, X(θh·)
has distribution ρ. Thus ρ = ρehL, i.e. ρ is stationary, and therefore ρ = π.

The condition P(T < +∞) = 1 depends on the particular choice of the RDSI, and it is not
granted by the irreducibility of L. For example, consider S = {0, 1} and L given by L0,1 = L1,0 =
1. We can realize this chain by letting ω01 be a Poisson process of intensity 1, and ω10 = ω01.
Clearly ϕ(t, θ−tω)(0) 6= ϕ(t, θ−tω)(1) for every t > 0, so T ≡ +∞. On the other hand, and this
holds in general, if we make the choice of P given by (10), it is not hard to see that (ϕ(t, ·))t≥0 is
an irreducible Markov chain on SS. By recurrence, any constant function is hit with probability
1 in ﬁnite time, so T < +∞ a.s.

In order to implement the Propp-Wilson algorithm, in principle one needs to run a Markov
chain on SS, which may be computationally unachievable. Some additional structure can make
the algorithm much more eﬀective.

11

Deﬁnition 2.14. Let S be a poset. A RDS on S is said to be monotone if for every t ≥ 0 and
ω ∈ Q

ϕ(t, ω) ∈ M.

Suppose a Markov chain is realized by a monotone RDSI. Then

ϕ(t, θ−tω) is constant ⇐⇒ ϕ(t, θ−tω) is constant on A,

where A is the set of points in S that are either maximal or minimal. Thus to implement the
Propp-Wilson algorithm one needs to run Markov chains starting from every point of A, that
may be much smaller than S. Moreover, the following result holds.

Theorem 2.15. Let S be a connected poset (i.e. every two points in S are connected by a path of
comparable points), and ϕ be a monotone RDSI whose one-point motions are irreducible Markov
chains. Then P(T < +∞) = 1.

Proof. Let x be minimal in S, and y1 > x. By irreducibility, given s > 0

Since ϕ(s, ω) ∈ M and M is ﬁnite, there exists f1 ∈ M with f1(y1) = x and

P(ϕ(s, ·)(y1) = x) > 0.

P(ϕ(s, ·) = f1) > 0.

Note that, necessarily, f1(x) = x, so f1 is not bijective. Set S1 := f1(S). Note that S1, with
the order induced by S, is connected, being the image of a connected posed under an increasing
function. Clearly x ∈ S1 is still minimal in S1, and |S1| < |S|. Unless |S1| = 1, the same
argument can be repeated. Take y2 ∈ S1, y2 > x, and f2 ∈ M such that f2(y2) = x and
P (ϕ(s, ω) = f2) > 0. Again f2(x) = x, so that |S2| := |f (S1)| < |S1|. After a ﬁnite number of
similar steps, we obtain a ﬁnite family f1, f2, . . . , fn ∈ M such that P(ϕ(s, ω) = fi) > 0 and

fn ◦ fn−1 ◦ · · · ◦ f1 ≡ x is constant.

(11)

Now, for k = 1, 2, . . . , n, consider the events

{ϕ(s, θ−ks·) = fn−k+1}.

Since θt is P-preserving, all these events have nonzero probability and, by independence of the
increments, they are all independent. Thus, by (11)

0 < P  n\k=1

{ϕ(s, θ−ks·) = fn−k+1}! ≤ P(ϕ(ns, θ−ns·) = const.).

Now, let t := ns and for N ≥ 1 consider the events {ϕ(t, θ−N t·) = const.}. Since they are
independent and with the same nonzero probability,

Observing that ϕ(t, θ−N t·) = const. implies ϕ(N t, θ−N t·) = const., we obtain

{ϕ(t, θ−N t·) = const.}! = 1.

{ϕ(N t, θ−N t·) = const.}! = 1.

P [N
P [N

from which P(T < +∞) = 1 follows.

12

We conclude this section by remarking that a Markov chain with generator L can be realized
by a monotone RDSI if and only if it is realizably monotone.
Indeed, if such RDSI exists,
then (ϕ(t, ·))t≥0 is a Markov chain on SS for which the conditions in Deﬁnition 1.2 are satisﬁed.
Conversely, once we have the representation in (3), a RDSI with the desired properties is obtained
as follows. For f ∈ M, let Pf be the law of a Poisson process on R with intensity Λ(f ), and, on the
appropriate product space whose elements are denoted by ω = (ωf )f ∈M, we deﬁne P := ⊗f ∈MPf .
The map ϕ is constructed pointwise in ω via the updating rule: if t ∈ ωf and ϕ(t−, ω) = g then
ϕ(t, ω) = f ◦ g.

3 Extremal generators of stochastically monotone Markov chains:

the monotonicity equivalence for “small” posets

As seen in subsection 2.2, equivalence between realizable monotonicity and stochastic monotonic-
ity of any Markov Chain on a poset S is equivalent to

Gr.mon = Gmon.

(12)

In this section we study monotonicity equivalence for posets with small cardinality.
in these cases S is acyclic. According
First note that the cases ♯S = 2, ♯S = 3 are obvious:
to Theorem 1.5, there is equivalence for discrete-time Markov chains and using the result of
Proposition 2.8 the equivalence holds for continuous-time Markov chains as well.

In order to further investigate the equality (12) we developed computer programs. The
cone Gmon is deﬁned as intersection of half spaces in (4) (so called H-representation). The
cone Gr.mon is deﬁned by its extremal rays in (6) (so called V-representation). The software cdd+
(see [cdd]) is able to compute exactly one representation given the other one. This is a C++ im-
plementation for convex polyhedron of the Double Description Method (see for instance [FP96]).
Finding the extremal rays of the cone Gmon and the (minimal) set of inequalities deﬁning the
cone Gr.mon, the inclusion Gmon ⊆ Gr.mon can be easily checked.

We operated by ﬁrst using the software GAP (see [GAP]) in order to

i.) ﬁnd the up-sets Γ related to the poset S, the vectors W Γ,x,y ∈ RS2 and then identify the

H-representation of Gmon;

ii.) compute all the increasing functions f ∈ M, identify the vectors If ∈ (R+)S2 and then ﬁnd

the V-representation of Gr.mon.

We then use the software cdd+ to produce the other representations of the cones, and the
software Scilab to test if Gmon ⊆ Gr.mon.

The diﬃculty in applying this method to posets with high cardinality is mainly due to the
combinatorial complexity of the step (ii) and to the computational time needed to cdd+ to obtain
the dual representation of the cone. Rather than to ♯S, this time is related to the number of
facets of the cones, which comes from the partial order structure. It should also be remarked
that a systematic analysis, made by generating all posets with a given cardinality, is not doable
for “moderate” cardinality. For instance, the number of diﬀerent unlabeled posets structure – up
to an order preserving isomorphism, not necessarily connected – for a given set of cardinality 16
is ∼ 4.48 × 1015. It was stated in 2002, see [BM02]. For a set of cardinality 17, the number of
unlabeled posets is till now unknown. For a set of cardinality 4, resp. 5, 6, 7, the number of
posets is respectively 16, 63, 318, 2045. See [pos] for the list.

13

Nevertheless, we were able to completely study the cases when ♯S ≤ 6. For ♯S > 6, the result

of Proposition 4.4 in the next section gives the answer for some posets.

For ♯S = 4 the two relevant poset-structure are the diamond and the bowtie. Their Hasse-
Diagram are given by the Figure 1. For those two posets, the algorithm above ensures that
Gmon = Gr.mon holds. Note that this result is known to be false in discrete-time, see for instance
examples 1.1 and 4.5 in [FM01].

Then, we studied all ﬁve-points posets which are not linearly totally ordered. For some of
these posets (see Figure 2 below), we found extremal rays L = (Lx,y)(x,y)∈S2 of Gmon which are
not in Gr.mon. One example for each poset will be given below.

In what follows, a symmetry of a poset S is a bijective map from S to S which is either order

preserving or order reversing.

Proposition 3.1. The only posets S with ♯S ≤ 5 such that (12) does not hold are, up to
symmetries, those whose Hasse-Diagrams are presented in Figure 2.

b




d




        
❃❃❃❃❃❃❃❃

❃❃❃❃❃❃❃❃
        







a

c

b

d










w

        
❃❃❃❃❃❃❃❃

❃❃❃❃❃❃❃❃
        




a




c

b

d




❃❃❃❃❃❃❃❃




                 
❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃




a

c




w




❃❃❃❃❃❃❃❃
                




w

(S1)

c

w

a

(S2)

(S3)













❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃
                 




d

b

c

a







w




❃❃❃❃❃❃❃❃
        
❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃
                







d

b

Figure 2: The ﬁve-points posets, for which there is no equivalence between the two notions of
monotonicity in continuous-time.

(S4)

(S5)

As mentioned above, Proposition 3.1 has been obtained by exact computer-aided computa-
tions. For completeness, for each one of the posets in Figure 2, we give explicitly a generator
in Gmon \ Gr.mon. We recall that, by Proposition 2.1, a generator L is realizably monotone if

and only if, for some Λ : M → R+, we have x, y ∈ S, x 6= y ⇒ Lx,y =Pf ∈M:f (x)=y Λ(f ). In

particular Lx,y = 0 ⇔ Λ(f ) = 0 for all f ∈ M such that f (x) = y. Given a function Λ as
above, we shall use the abbreviate notation Mx7→y for the set {f ∈ M : Λ(f ) > 0 and f (x) = y}.

Example 3.2. For S = S1 there is only one extremal ray L of Gmon which is not in Gr.mon. It
is given by Ld,c = Ld,b = Lb,w = Lc,w = La,w = 1, and Lx,y = 0 for each other pair x, y ∈ S1
with x 6= y. This generator is clearly monotone (the conditions of Proposition 2.2 are easily
indeed, if Proposition 2.1 holds, we have Ld,b =
veriﬁed), but it is not realizably monotone:
Λ(f ) = 1. Note that Md7→b ∩Md7→c = ∅. Moreover, for
each f ∈ Md7→b, since c < d and Λ(f ) > 0, by monotonicity of f and the fact that Lc,a = Lc,b = 0,
we have necessarily f (c) = w and then f (a) = w to maintain the ordering, i.e., f ∈ Ma7→w.

Λ(f ) = 1 and Ld,c =Pf ∈Md7→c

Pf ∈Md7→b

14

Analogously, Md7→c ⊂ Ma7→w, then 1 = La,w =Pf ∈Ma7→w Λ(f ) ≥Pf ∈Md7→b⊔Md7→c

we obtain a contradiction.

Λ(f ) = 2, so

Example 3.3. For S = S2 a generator L ∈ Gmon \ Gr.mon is given by La,c = Lw,c = Ld,c = Lb,d =
Lb,a = 1 and Lx,y = 0 for each other pair x, y ∈ S2 with x 6= y. According to Proposition 2.2
it is monotone. Assume it is realizably monotone.
If f is an increasing function on S with
f (d) = f (a) = c, since a < b < d we have f (b) = c. But Lb = 0, then necessarily Λ(f ) = 0.
This means that Md7→c ∩ Ma7→c = ∅. Moreover, (Md7→c ⊔ Ma7→c) ⊂ Mw7→c which gives the
contradiction 1 = Lw,c ≥ Ld,c + La,c = 2.

Example 3.4. For S = S3, consider the monotone generator given by La,w = Lb,w = Lc,d =
Lw,d = Ld,w = 1 and Lx,y = 0 for each other pair x, y ∈ S3 with x 6= y and suppose it is realizably
monotone. If f ∈ M and f (d) = f (a) = w, by monotonicity we have f (c) = w and then, since
Lc,w = 0, we have Λ(f ) = 0. Then Md7→w ∩ Ma7→w = ∅ and by (Md7→w ⊔ Ma7→w) ⊂ Mb7→w, it
follows that Lb,w ≥ 2, which gives a contradiction.

Example 3.5. For S = S4 we take the monotone generator given by La,b = Lw,b = Ld,b = Lb,d =
Lc,d = 1 and Lx,y = 0 for each other pair x, y ∈ S4 with x 6= y. It is clear that, if L was realizably
monotone, we should have Md7→b ∩ Mb7→d = ∅ and the inclusions Md7→b ⊂ Ma7→b ⊂ Mw7→b and
Mb7→d ⊂ Mc7→d ⊂ Mw7→b: but it is not possible, since in that case we should have Lw,b ≥ 2.

Example 3.6. For S = S5 consider the monotone generator given by Lc,a = Ld,a = Lb,a = Lw,c =
Lw,d = 1 and Lx,y = 0 for each other pair x, y ∈ S5 with x 6= y.
If L ∈ Gr.mon, we have
Mw7→d ∩ Mw7→c = ∅, Mw7→d ⊂ Mc7→a ⊂ Mb7→a and Mw7→c ⊂ Md7→a ⊂ Mb7→a, then we obtain
the contradiction 1 = Lb,a ≥ 2.

For the sake of completeness, for the posets considered in examples 3.2,..., 3.6 we give the

number of extremal rays generating the cone Gr.mon, resp. Gmon in R20, see Table 1.

Poset
S1
S2
S3
S4
S5

Gr.mon Gmon

40
41
40
46
49

41
47
42
50
53

Table 1: ♯S = 5: minimal number of extremal rays generating the cone Gr.mon, resp. Gmon, in R20

We now recall the following deﬁnition:

Deﬁnition 3.7. A subset S′ of S is said to be a sub-poset if for all x, y ∈ S′, x ≤ y in S′ implies
x ≤ y in S. S′ is said to be an induced sub-poset if for all x, y ∈ S′, x ≤ y in S′ if and only if
x ≤ y in S.

For ♯S = 6 we shall see in the next section that, if S has one of the 5-points posets above as an
induced sub-poset, then there is no equivalence between stochastic monotonicity and realizable
monotonicity. However, there are 6-points posets for which there is no equivalence and such that
we have equivalence for each one of their sub-posets.

15

Proposition 3.8. The only posets S with ♯S = 6 such that (12) does not hold are, up to
symmetries,

• those having one of the posets in Proposition 3.1 as induced sub-poset;

• those whose Hasse-Diagrams are presented in Figure 3.

Following the terminology of [FM01], the ﬁrst poset in Figure 3 is a double diamond and the

second poset is a 3-crown.

e

f

b







❃❃❃❃❃❃❃❃
        
◆◆◆◆◆◆◆◆◆◆◆◆◆

 c





❃❃❃❃❃❃❃❃
        
♣♣♣♣♣♣♣♣♣♣♣♣♣







a

d

f

a













❃❃❃❃❃❃❃❃
❃❃❃❃❃❃❃❃
♣♣♣♣♣♣♣♣♣♣♣♣♣







e

b

d

c

S6

S7

f

a

e










❃❃❃❃❃❃❃❃
        

❃❃❃❃❃❃❃❃
        










b

d

c

f

a













❃❃❃❃❃❃❃❃
❃❃❃❃❃❃❃❃
♣♣♣♣♣♣♣♣♣♣♣♣♣
        
        







e

b

d

c

S8

S9

Figure 3: The double diamond S6 and 3-crowns: S7, S8, S9.

In the next examples we shall see generators of Gmon \ Gr.mon for posets S6, S7, S8 and S9. For
the posets considered in examples 3.9,... 3.12 we give the number of extremal rays generating
the cone Gr.mon, resp. Gmon in R30 in Table 2.

P oset Gr.mon Gmon
421
914
312
132

126
684
134
84

S6
S7
S8
S9

Table 2: ♯S = 6: number of extremal rays generating the cone Gr.mon, resp. Gmon in R30

Example 3.9. Consider the monotone generator L on S6 deﬁned as follows: La,c = Ld,c = Lc,b =
Lb,e = Lf,e = 1, and Lx,y = 0 for each other pair x, y ∈ S6 with x 6= y. If L was realizably
monotone we should have Ma7→c ∩ Mc7→b = ∅, Ma7→c ⊂ Md7→c and Mc7→b ⊂ Mf 7→e ⊂ Md7→c;
but this would give the contradiction 1 = Ld,c ≥ 2.

Example 3.10. For S = S7 we take L ∈ Gmon with La,c = Lb,c = Lf,c = Ld,c = 1, Lc,d = Le,d = 1
and Lx,y = 0 for each other pair x, y with x 6= y. Suppose L is realizably monotone; then
Md7→c ∩ Mc7→d = ∅, Md7→c ⊂ Ma7→c and Mc7→d ⊂ Me7→d ⊂ Mb7→c ⊂ Mf 7→c ⊂ Ma7→c. But in
this case we have 1 = La,c ≥ Ld,c + Lc,d = 2, then L /∈ Gr.mon.

16

Example 3.11. For S = S8 we consider the same generator of Example 7; L is clearly monotone,
but realizable monotonicity of L would imply Md7→c ∩ Mc7→d = ∅, Md7→c ⊂ Mb7→c ⊂ Mf 7→c ⊂
Ma7→c and Mc7→d ⊂ Me7→d ⊂ Ma7→c, then Lac ≥ 2, which is not the case.

Example 3.12. For S = S9 let L be deﬁned by La,c = Lb,c = Le,c = 1, Lb,e = Lf,e = Ld,e = 1,
La,d = Lf,d = Le,d = 1 and Lx,y = 0 for each other pair x, y with x 6= y. L is a monotone
generator. Suppose L ∈ Gr.mon. Then, inequalities a < e and a < f imply respectively Ma7→d ∩
Me7→c = ∅ and Ma7→d ⊂ Mf 7→d. Note that we have also Me7→c ⊂ Mf 7→d:
indeed Me7→c ⊂
(Mf 7→e ∪ Mf 7→d) and, since Mb7→e ⊂ Mf 7→e and Lb,e = Lf,e = 1 we have necessarily Mb7→e =
Mf 7→e and so Me7→c ∩ Mb7→e = Me7→c ∩ Mf 7→e = ∅. Therefore we obtain the contradiction
Lf,d ≥ 2.

Remark 3.13. We recall that, in discrete-time, equivalence does not hold if the graph correspond-
ing to the Hasse diagram of the poset has a subgraph which is a cycle (in the graph-theoretic
sense). So, a look at the ﬁgures above could suggest that in continuous-time, a suﬃcient con-
dition for the failure of (12) is the presence of two cycles in the Hasse diagram. The poset in
Figure 4 (the complete 3-crown) gives a counterexample:
it has more than two cycles, but for
this set we have equivalence between the two concepts of monotonicity. In fact, more generally,
if we have a poset S = {a1, . . . , an, b1, . . . , bm} with ai < bj for i = 1, . . . , n, j = 1, . . . , m, we can
show that every monotone generator on S is realizably monotone. We use an argument analogous
to the one used in section 5 of [FM01]. Let L be a monotone generator on S and consider the
poset ˜S = {a1, . . . , an, c, b1, . . . , bm} with ai < c < bj for i = 1, . . . , n, j = 1, . . . , m. This poset
admits S as induced sub-poset and it is acyclic. Now, we take a generator ˜L on ˜S deﬁned as
h=1 Lbh,ai for i = 1, . . . , n,
k=1 Lak ,bj for j = 1, . . . , m. It is not hard to check that this generator is monotone,
and its restriction to S is given by L. Since ˜S is acyclic, then ˜L is realizably monotone. But
a monotone realization of ˜L gives a monotone realization of L too. Therefore, L is realizably
monotone.

follows: ˜Lx,y = Lx,y if x, y ∈ S, ˜Lx,c = 0 for each x ∈ S, ˜Lc,ai =Pm
˜Lc,bj =Pn

e







❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖❖
❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃
❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃❃
♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦♦
                
                




f

a










b

d

c

Figure 4: Complete 3-crown

4 Extensions to larger posets

In this section we prove some suﬃcient conditions on a poset S under which Gmon(S) 6= Gr.mon(S).
The general argument we use is analogous to the one used in the discrete-time case (see [FM01],
Theorem 4.2): we take a generator L in Gmon(S) \ Gr.mon(S) for a ”small” poset S and we deﬁne
a ”monotone extension of L to a larger poset S′”, i.e., a generator L′ ∈ Gmon(S′), where S′ is a
poset having S as induced sub-poset, such that L′
xy = Lxy for all x, y ∈ S. If this construction is
possible, L′ is not realizably monotone too. This is a consequence of the following Lemma

Lemma 4.1. Let S be an induced sub-poset of a given poset S′ and let L be a monotone generator
on S which has a monotone extension L′ to S′. Then L′ ∈ Gr.mon(S′) ⇒ L ∈ Gr.mon(S).

17

Proof. We denote by M′ and M the sets of increasing functions on S′ and S respectively. Assume
L′ ∈ Gr.mon(S′). Then, by Proposition 2.1 there exists ¯Λ : M′ → R+ such that (3) holds for L′.
Let us deﬁne Λ : M → R+ by

Λ(f ) = Xf ′∈M′,f ′|S=f

¯Λ(f ′)

for each f ∈ M. Now, since L′
x,y = Lx,y
x,x = Lx,x for
x,z = 0 for all x ∈ S, z ∈ S′ \ S. Then, by condition (3), for every
all x ∈ S and then necessarily L′
f ′ ∈ M′ with ¯Λ(f ′) > 0 we have f ′(S) ⊂ S; moreover, S is an induced sub-poset of S′, then we
have also f ′ |S∈ M. Therefore, for x, y ∈ S, x 6= y

for all x, y ∈ S, in particular we have L′

Xf ∈M:f (x)=y

Λ(f ) = Xf ∈M:f (x)=y(cid:16) Xf ′∈M′,f ′|S=f

¯Λ(f ′)(cid:17)

¯Λ(f ′)

= Xf ′∈M′,f ′(x)=y
= Xf ′∈M′

f ′|S∈M

x7→y

¯Λ(f ′) = L′

x,y = Lx,y,

then the proof is complete using for L Proposition 2.1.

As the Example below shows, Lemma 4.1 is false if S is a (not necessarily induced) sub-poset

of S′, i.e. a subset of S′ such that, for all x, y ∈ S, x ≤ y in S implies x ≤ y in S′.

Example 4.2. Let S be the poset S8 of Figure 3: it is a (not induced) sub-poset of the complete
crown of Figure 3, which we denote by S′. Now let us consider the generator L on S deﬁned by
Lf,e = Lb,e = Ld,e = 1, Le,d = La,c = Lc,a = 1 and Lx,y = 0 for each other pair x, y ∈ S with
x 6= y. It is easy to check that L is monotone as a generator both on S and on S′. Moreover,
L /∈ Gr.mon(S).
Indeed, if L was realizably monotone and M denotes the set of increasing
functions on S we should have Me7→d ⊂ Ma7→c ⊂ Mf 7→e, Mb7→e ⊂ Mf 7→e and Mb7→e ∩Me7→d = ∅
which implies the contradiction Lf,e ≥ 2. On the other hand, as a generator on the complete
crown, L is a monotone extension of itself and, by Remark 3.13, L ∈ Gr.mon(S′).

It must be stressed that the method of monotone extension of generators to larger posets
does not always work. First of all, note that, if L ∈ Gmon(S) \ Gr.mon(S) and there is an acyclic
poset S′ which has S as an induced sub-poset, it is impossible to construct a monotone extension
of L to S′: indeed, by Theorem 1.5 and Proposition 2.8 such an extension would be a generator
of Gr.mon(S′) and so, by Lemma 4.1 we should have also L ∈ Gr.mon(S).
As an example, consider the poset S9 of Figure 3 and the generator L of Example 3.12. Consider
the poset S′
9 (see Figure 5) obtained by adding to S9 the points w, w1, w2 in such a way that
a < w1 < w < w2 < d, b < w1 < f and c < w2 < e: we obtain a 9-points poset which is acyclic.
Therefore, it is impossible to obtain a monotone extension of L to S′
9.

Moreover, the example below shows that, even when S is not ”enlargeable” to an acyclic
poset (i.e., every poset having S as an induced sub-poset is non-acyclic), there are generators
which cannot be extended to every ”larger” poset.

Example 4.3. Let L be the generator on poset S8 (Figure 3) deﬁned in Example 4.2. Note that
(see Proposition 5.11 of [FM01]) S8 is not enlargeable to any acyclic poset. However, consider

18

f







w

♣♣♣♣♣♣♣♣♣♣♣♣♣

✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸




d

c

e










w2

✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸✸

♣♣♣♣♣♣♣♣♣♣♣♣♣

w1






b




a

Figure 5: An extension from poset S9: acyclic poset S′
9

8 obtained from S8 by adding a point z with z > f , z > e and z ≯ d. Suppose L′ is
z,d ≥ 1.
z,Γ ≥ 1 and z > f , it should be Lf,Γ ≥ 1, which is

a poset S′
a ”monotone extension” of L. Since {d} is a up-set, Le,d = 1 and z > e, it must be L′
Moreover Γ := {d, b, c} is a down-set; since L′
false, being Lf,Γ = 0. Thus there can be no such extension.
However, as we shall see in subsection 4.2, the method of monotone extension works for S8, in
the sense that for any poset S′ having S8 as induced sub-poset, there exists a generator L in S8
which is monotone but not realizably monotone, that can be extended to a monotone generator
in S′. But this generator L has to be chosen appropriately. For the reasons explained above, the
extensions given in Sections 4.1 and 4.2 have to be made ”case by case”.

4.1 From 5-points posets to larger posets

In this subsection we show that monotonicity equivalence does not hold for any poset S′ having
one of the 5-points posets of Figure 2 as an induced sub-poset. Note that, in this case, S′ is
non-acyclic: this is an immediate consequence of Proposition 2.7 of [FM01].

Proposition 4.4. If a poset S′ admits as induced sub-poset a poset S, whose Hasse-Diagram is
one of those in Figure 2 (up to symmetries), then monotonicity equivalence fails in S′ as well.

x,y = Lx,y for all x, y ∈ Si.

i be a poset which has Si as an induced sub-poset.

Proof. For each i = 1, . . . , 5, let S′
According to Lemma 4.1, it is enough to show that, if we choose a monotone generator L on Si
which is not realizably monotone, then we can deﬁne a stochastically monotone generator L′ on
S′
i such that L′
In each case considered below we shall pose ¯S = S′
i \ Si and deﬁne L′ in such a way that the only
new transitions allowed are the ones from elements of ¯S to elements of Si. In other words, for
xy = 0 for all x ∈ S′ and y ∈ ¯S.
each i = 1, . . . , 5, we shall pose L′
xy = Lxy for all x, y ∈ Si and L′
Note that, if Γ′ is an up-set in S′
i, then Γ = Γ′ ∩ Si is an up-set in Si and by the construction of
L′ it follows that, for each x /∈ Γ′, L′
Then (see Remark 2.3), in order to verify that L′ is monotone, it will be suﬃcient to check that,
for all x, y ∈ S′
i, with x < y, if Γ is an up-set in Si (resp. a down-set) and x, y /∈ Γ, we have
L′
x,Γ ≤ L′

x,Γ. The same property holds for down-sets.

y,Γ (resp. L′

x,Γ′ = L′

x,Γ ≥ L′

y,Γ).

Case I. Let us consider S1 and the generator L given in Example 3.2.

We have to deﬁne only transition rates from elements of ¯S to elements of S1. Consider the
partition of S′
1 \ A.
Then, if z ∈ ¯S ∩ A we pose L′
zy = 0 for each other y ∈ S1; if z ∈ ¯S ∩ B, we pose
L′
zb = L′

1 given by the sets A = {z ∈ S′

zy = 0 for each other y ∈ S1.

1 : z ≤ c} and B = S′

1 : z ≤ b} ∪ {z ∈ S′

zw = 1 and L′

zc = 1 and L′

19

Indeed, let us take x, y ∈ S′

L′ is a monotone generator.
1 with x < y. There are only three
possibilities: x, y ∈ B, x, y ∈ A or x ∈ A and y ∈ B. If x, y ∈ B, then L′
yz for each z 6= x, y
and there is nothing to verify. Now we show that if Γ is an up-set in S1 such that x, y /∈ Γ and
L′
x,Γ 6= 0 then L′
x,Γ 6= 0 if and only
if Γ = S1, then necessarily x, y ∈ ¯S ∩ A and L′
= 1. For the same reason, if x ∈ A
and y ∈ B, then Γ = S1 and 1 = L′

y,Γ. Suppose that x, y ∈ A; since, for x ∈ A we have L′

x,Γ ≤ L′

xz = L′

x,S1
= 2.

= L′

y,S1

Analogously, consider a down-set Γ in S1 with x, y /∈ Γ and L′
x,Γ = L′

y,Γ 6= 0.
If x, y ∈ A, since
each down-set in S1 contains w, we have x, y 6= w and so L′
y,Γ. If x ∈ A and y ∈ B,
then Γ = {b, a, w} or {c, a, w}. Indeed, y ∈ B and L′
y,Γ 6= 0, implies that Γ ∩ {b, c} 6= ∅. But
x is smaller or equal than at least one element of the set {b, c} and x /∈ Γ, so we cannot have
{b, c} ⊂ Γ. Therefore L′

x,Γ = 1 = L′

y,Γ.

< L′

y,S1

x,S1

z,c = L′

2 : z ≤ c} and Dc = S′

Case II. Consider the partition of S′

2 given by the sets D = {z ∈ S′

2 : z ≤ b} ∪ {z ∈ S′
z,c = 1 and L′

2 \ D. We pose, for z ∈ ¯S ∩ D, L′
z,d = 1 and L′

2 with x < y and let Γ be an up-set in S2 such that x, y /∈ Γ and L′

2 : z ≤
z,a = L′
w} ∪ {z ∈ S′
z,y = 0
for each other y ∈ S2. If z ∈ ¯S ∩ Dc, we pose L′
z,y = 0 for each other y ∈ S2.
Let us take x, y ∈ S′
x,Γ 6= 0.
Suppose ﬁrst that x, y ∈ D. Since L′
x,Γ 6= 0 we must have c ∈ Γ which implies {c, d} ⊂ Γ. Now,
if x = a and y /∈ {b, w}, we have Γ 6= S2 and Lx,Γ = 1 = Ly,Γ; if x 6= a and y ∈ {b, w} we have
{a, b, w} /∈ Γ and so Lx,Γ = 1 = Ly,Γ. Now, suppose x, y ∈ Dc. Since L′
x,Γ 6= 0 we must have
d ∈ Γ and x, y 6= d: this means that x, y ∈ ¯S ∩ Dc and so Lx,Γ = Ly,Γ. Finally, suppose that x
and y are not in the same subset of the given partition. This means that x ∈ D and y ∈ Dc. As
we saw above L′
x,Γ 6= 0 ⇒ {c, d} ⊂ Γ, then necessarily y 6= d and Ly,Γ = 2 ≥ Lx,Γ. In order to
check monotonicity of L′, we should consider also down-sets of S2, but in this case the argument
for down-sets is symmetric to the one given above for up-sets.

Case III. For the poset S3 we consider the generator L of Example 3.4 and take the partition
3 \ A. Then, if z ∈ ¯S ∩ A we
3 given by A = {z ∈ S′
z,d = 1 and

z,y = 0 for each other y ∈ S3; if z ∈ ¯S ∩ B, we pose L′

3 : z < c} and B = S′

3 : z ≤ b} ∪ {z ∈ S′

z,w = 1 and L′

z,w = L′

of S′
pose L′
L′

z,y = 0 for each other y ∈ S3.

In order to verify monotonicity of L′, take x, y ∈ S′

3 with x < y. Note that y ∈ A ⇒ x ∈ A,
therefore we can have x, y ∈ A, x, y ∈ B or x ∈ A, y ∈ B. If x, y ∈ A, then L′
y,z for each
z 6= x, y and there is nothing to check. Suppose that x ∈ A, y ∈ B. Let us take an up-set Γ in
S3 with x, y /∈ Γ and L′
y,Γ. If we take a down-set Γ in
S3 with x, y /∈ Γ and L′
x,Γ.
Now, suppose that x, y ∈ B. Let us take an up-set Γ with x, y /∈ Γ and L′
x,Γ 6= 0. Then, x, y 6= d
and, if w /∈ Γ, L′
y,Γ. If {w, d} ⊂ Γ we have x 6= w, d and (since y = c ⇒ x ∈ A) y 6= w, d, c,
therefore L′
y,Γ 6= 0, then Γ = S3 or
x,Γ.
{w, a, c} ⊂ Γ. If Γ = S3, then L′
y,Γ = 2. If {w, a, c} ⊂ Γ we have x, y 6= w, a, c and so
L′
x,Γ = L′

x,Γ 6= 0; then, {w, d} ⊂ Γ and L′
y,Γ 6= 0, since x ∈ A ⇒ x < d, we have d /∈ Γ, therefore L′

If Γ is a down-set with x, y /∈ Γ and L′

x,Γ = L′
y,Γ = 2 ≥ L′

y,Γ = 1 = L′

x,Γ = 1 ≤ L′

x,Γ = L′

x,z = L′

y,Γ = 1.

Case IV. For S4 take the generator L given in Example 3.5. Then we consider the partition
4 given by A = {z ∈ S′
4 \ (A ∪ B). Then,
z,y = 0 for each other y ∈ S4; if z ∈ ¯S ∩ B, we pose
z,y = 0 for each

z,y = 0 for each other y ∈ S4; if z ∈ C we pose L′

4 : b ≤ z ≤ d}, B = {z ∈ S′

4 : z ≥ b} \ A and C = S′

z,d = 1 and L′

z,b = 1 and L′

z,b = L′

of S′
if z ∈ ¯S ∩ A we pose L′
z,d = 1 and L′
L′
other y ∈ S4.
Now we take x, y ∈ S′
is an up-set in S4 with x, y /∈ Γ and L′
L′
x,Γ = 1 = L′

4 with x < y. Suppose that x ∈ A; then y > x ⇒ y ∈ A ∪ B.

If Γ
x,Γ 6= 0, then x, y 6= d and x /∈ Γ ⇒ b /∈ Γ, therefore
y,Γ 6= 0, note that, d ∈ Γ ⇒ x ∈ Γ,

y,Γ. If Γ is a down-set in S4 with x, y /∈ Γ and L′

20

therefore Γ ∩ {b, d} = {b} and so L′
y,Γ. Suppose now that x ∈ B; since y > x we have
also y ∈ B and there is nothing to verify. Finally, for x ∈ C, if Γ is an up-set with x, y /∈ Γ and
L′
x,Γ 6= 0 then b ∈ Γ, and so {b, d} ⊂ Γ, which implies that y (cid:3) b, i.e. y ∈ C and so L′
y,Γ.
If Γ is a down-set with x, y /∈ Γ and L′
y,Γ 6= 0, then b ∈ Γ, y ∈ A ∪ C. Moreover, if y ∈ A we have
d /∈ Γ, therefore L′

x,Γ = 1 = L′

x,Γ = L′

x,Γ = 1 = L′

y,Γ.

z,a = 1 and L′

5 : z ≤ d}, B = S′

5 : z ≤ c} ∪ {z ∈ S′

z,y = 0 for each other y ∈ S5; if z ∈ ¯S ∩ B, we pose L′

Case V. Consider the poset S5 and the generator L of Example 3.6. We take the partition
5 \ A. Then, if z ∈ ¯S ∩ A we pose
5 given by A = {z ∈ S′
z,y = 0

of S′
L′
for each other y ∈ S5.
Now we consider x, y ∈ S′
y,z for each
z 6= x, y, therefore there is nothing to verify. If x, y are not in the same set of the partition, since
y ∈ A ⇒ x ∈ A, we can have only x ∈ A and y ∈ B. Suppose that Γ is an up-set in S5 with
x, y /∈ Γ and L′
x,Γ. If Γ is a
down-set in S5 with x, y /∈ Γ and L′
y,Γ 6= 0, we have {c, d} ∩ Γ 6= ∅. Moreover, since x ≤ c or x ≤ d
and x /∈ Γ, we have Γ = {c, a, b} or Γ = {d, a, b} and in both cases we have L′

x,Γ 6= 0. Then a ∈ Γ and so c, d ∈ Γ, which implies that L′

5 with x < y. If both x, y belong to A or B, then L′

z,d = 1 and L′

y,Γ = 2 ≥ L′

z,,c = L′

x,z = L′

x,Γ = 1 = L′

y,Γ.

4.2 From 6-points posets to larger posets

As we saw in the preceding subsection, for a poset of cardinality 6 having one of the 5-points posets
of Figure 2 as an induced sub-poset, there is not equivalence between stochastic monotonicity
and realizable monotonicity. Therefore, the only six-points posets for which we have to construct
monotone extensions are posets S6, S7, S8 of Figure 3.

z,a = L′

z,c = 1 and L′

z,e = 1 and L′

z,y = 0 for each other y ∈ S′.

Proposition 4.5. If a poset S′ admits as induced sub-poset a poset S, whose Hasse-Diagram is
one of the posets S6, S7, S8 of Figure 3 then monotonicity equivalence fails in S as well.
Proof. Case I. As we did in the preceding section, we call S′ a poset which has S6 (the double
diamond of Figure 2) as an induced sub-poset, ¯S = S′ \ S6, and we take the monotone generator
L on S6 deﬁned in Example 3.9. This generator is not realizably monotone.
Now, we want to deﬁne L′ on S′ as a monotone extension of L. We consider the partition of S′
given by the sets A = {z ∈ S′ : z > b} ∪ {z ∈ S′ : z > c} ∪ {z ∈ S′ : z > d} and B = S′ \ A.
Then, if z ∈ ¯S ∩ A we pose L′
z,y = 0 for each other y ∈ S′; if z ∈ ¯S ∩ B, we pose
L′
L′ is a monotone generator. Indeed, let us suppose that x, y ∈ S′ with x < y and at least one
of them does not belong to S6. We have only three possibilities: x, y ∈ A, x, y ∈ B or x ∈ B
and y ∈ A. If x, y ∈ A, and x, y 6= e, there is nothing to verify, since x and y make the same
transitions with the same rate. On the other hand, if x = e or y = e, then, for every up-set
(down-set) Γ with x, y /∈ Γ we have e /∈ Γ and so L′
If x, y ∈ B we have to consider only the cases in which x and y make diﬀerent transitions, i.e.
when y ∈ {a, b, c, d} and x 6= a or when y /∈ {a, b, c, d} and x = a.
In the ﬁrst case, if we take an up-set Γ with x, y /∈ Γ and L′
a /∈ Γ and {c, e} ⊂ Γ. This implies L′
then a ∈ Γ and L′
y, a /∈ Γ we have L′
in S′ with L′
Now, suppose x ∈ B and y ∈ A. If Γ is an up-set with L′
have a /∈ Γ, so L′
down-set with L′

x,Γ 6= 0, then, since y ≥ a we have
y,Γ = 1; if we take a down-set Γ with x, y /∈ Γ,
yΓ. In the second case we have x = a, then, for any up-set Γ with
y,Γ = 1; on the other hand, for each down-set Γ

x,Γ ≤ 1 and L′
y,Γ 6= 0, we have necessarily e ∈ Γ, which implies a, c ∈ Γ, then 2 = L′

x,Γ 6= 0 and x, y /∈ Γ, since y > a, we
y,Γ = 1; if Γ is a
y,Γ.

y,Γ 6= 0 we have x = a ∈ Γ and there is nothing to verify.

x,Γ = 1 if and only if {c, e} ⊂ Γ which implies L′

x,Γ ≥ 1 ≥ L′
a,Γ 6= 0 ⇒ c ∈ Γ ⇒ L′

x,Γ = L′

a,Γ = L′

x,Γ ≥ L′

x,Γ = L′

y,Γ = 0.

21

7 : z ≥ c} \ A, C = S′

7 : c ≤ z ≤ d}, B = {z ∈ S′

7 a poset which has S7 as induced sub-poset and ¯S = S′

Cases II, III. Now, consider the monotone generator L on S7 given in Example 3.10. Note
that L has the same property also as a generator on the poset S8. If in the proof which follows
we consider S8 instead of S7, we obtain the same result.
Let S′
given by A = {z ∈ S′
a monotone extension L′ of L as follows: if z ∈ ¯S ∩ A we pose L′
each other y ∈ S7; if z ∈ ¯S ∩ B, we pose L′
z,c = 1 and L′
we pose L′
Now we take x, y ∈ S′
If Γ
is an up-set in S7 with x, y /∈ Γ and L′
x,Γ 6= 0, then x, y 6= d and x /∈ Γ ⇒ c /∈ Γ, therefore
L′
x,Γ = 1 = L′
y,Γ 6= 0, note that, d ∈ Γ ⇒ x ∈ Γ,
therefore Γ ∩ {c, d} = {c} and so L′
y,Γ. Suppose that x ∈ B; since y > x we have
also y ∈ B and there is nothing to verify. Finally, for x ∈ C, if Γ is an up-set with x, y /∈ Γ and
L′
x,Γ 6= 0 then c ∈ Γ, and so {c, d} ⊂ Γ, which implies that y (cid:3) c, i.e. y ∈ C and so L′
y,Γ.
If Γ is a down-set with x, y /∈ Γ and L′
x,Γ = 1. On the other hand, if
y ∈ A, then necessarily d /∈ Γ, therefore in any case we have L′

7 \ S7. We take the partition of S′
7
7 \ (A ∪ B) and we deﬁne
z,y = 0 for
z,y = 0 for each other y ∈ S7; if z ∈ C

z,y = 0 for each other y ∈ S7.
7 with x < y. Suppose that x ∈ A; then y > x ⇒ y ∈ A ∪ B.

y,Γ. If Γ is a down-set in S7 with x, y /∈ Γ and L′

y,Γ 6= 0, then c ∈ Γ and L′

z,d = 1 and L′

z,d = 1 and L′

x,Γ = 1 = L′

x,Γ = L′

z,c = L′

x,Γ = 1 ≥ L′

y,Γ.

Remark 4.6. The procedure used in Case II can be applied also to show that monotonicity
equivalence fails for every poset which has a k-crown (see Figure 6) with k ≥ 3 as induced
sub-poset.

y0

y1

y2


❃

yk−1



yk










❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞❞
✴✴✴✴✴✴✴✴✴✴✴✴✴
✴✴✴✴✴✴✴✴✴✴✴✴✴
✎✎✎✎✎✎✎✎✎✎✎✎✎
✎✎✎✎✎✎✎✎✎✎✎✎✎

✎✎✎✎✎✎✎✎✎✎✎✎✎

✴✴✴✴✴✴✴✴✴✴✴✴✴

✎✎✎✎✎✎✎✎✎✎✎✎✎

✎✎✎✎✎✎✎✎✎✎✎✎✎

❃

❃

❃

❃

❃

❃




❃


xk−1




xk




x0

x1




x2

Figure 6: k-crown

Let S be a k-crown and {x0, . . . , xk}, resp. {y0, . . . , yk}, be the sets of its minimal, resp.
maximal, elements (with xk < yk, xk < yk−1, xk−1 < yk−1, xk−1 < yk−2 . . . x0 < y0, x0 < yk).
The generator deﬁned by Lxk,yk = Lyk−1,yk = 1, Lxi,xk = 1 for i = 0, . . . , k − 1, Lyk,xk = 1,
Lyi,xk = 1 for i = 0, . . . k − 2 and Lx,y = 0 for each other pair x, y ∈ S with x 6= y, is monotone.
Suppose L is realizably monotone. Then Mxk7→yk ⊂ Myk−17→yk ⊂ Mxk−17→xk and Myk7→xk ⊂
Mx07→xk ⊂ My07→xk ⊂ . . . ⊂ Mxk−17→xk . Therefore, since Mxk7→yk ∩ Myk7→xk = ∅ we obtain
Lxk−1,xk ≥ 2, which gives a contradiction.
Now, as we did for the 3-crown, we consider a poset S′ which has a k-crown as induced sub-poset,
we pose ¯S = S′ \ S and, in order to construct a monotone extension of the generator L given
above, we take the partition of S′ given by A = {z ∈ S′ : xk ≤ z ≤ yk}, B = {z ∈ S′ : z ≥ xk}\A,
C = S′ \ (A ∪ B). For z ∈ ¯S ∩ A we pose L′
z,w = 0 for each other w ∈ S;
if z ∈ ¯S ∩ B, we pose L′
z,xk = 1
and L′
z,w = 0 for each other w ∈ S. The same arguments used above for the 3-crown show that
L′ is monotone.

z,w = 0 for each other w ∈ S; if z ∈ C we pose L′

z,yk = 1 and L′

z,yk = 1 and L′

z,xk = L′

5 Conclusions

In this paper we have obtained partial results concerning the relationship between stochastic
monotonicity and realizable monotonicity for continuous-time Markov chains on partially ordered
sets. We have provided suﬃcient conditions on the poset for the monotonicity equivalence to
hold or to fail, and given complete classiﬁcations for posets of cardinality ≤ 6. Unlike what

22

Fill and Machida have obtained in the discrete-time case, we have not been able to ﬁnd a
characterization of posets for which monotonicity equivalence holds, in terms of their Hasse
diagram. We remark, as the example in Figure 5 shows, that there are posets with an acyclic
extension for which monotonicity equivalence fails. Therefore, in general, non-equivalence is not
preserved by extending the poset.

For posets with no acyclic extensions, we believe the following fact holds true.

Conjecture. Let S be a connected poset having no acyclic extension. Then monotonicity
equivalence holds if and only if the following conditions hold:

i) the Hasse diagram of S has a unique cycle, which is a diamond;

ii) S has no Y -shaped subposet (see Figure 7) having at most one point in common with
the cycle in point i) and there is no induced subposet of the types from Figure 8 (up to
symmetries).

b




c

w







❃❃❃❃❃❃❃❃




a

        




w

b




a

        




❃❃❃❃❃❃❃❃




c

Figure 7: Y shapes

b




d




        
❃❃❃❃❃❃❃❃

❃❃❃❃❃❃❃❃
        







a

c

b

f




d







        
❃❃❃❃❃❃❃❃

❃❃❃❃❃❃❃❃
        

 c


        
❃❃❃❃❃❃❃❃




a




e




w

(S1)

Figure 8: Forbidden posets

The necessity of conditions i) and ii) should actually be not too hard to prove, although
many diﬀerent cases have to be considered. We have tried harder to prove suﬃciency of i), ii) by
induction on the cardinality of the poset, but, unfortunately, we have not succeeded.

Acknowledgments

The authors thanks the anonymous referees for useful comments and suggestions. In particular,
the relation with the weak monotonicity-equivalence has been suggested by one referee.

23

References

[Arn98] L. Arnold, Random dynamical systems, Springer, Berlin Heidelberg New York, 1998.

[Br´e99] P. Br´emaud, Markov chains, gibbs ﬁelds, monte carlo simulation, and queues, Springer-

Verlag, New York, 1999.

[BM02] G. Brinkmann and B. D. McKay, Posets on up to 16 points, Order 19 (2002), 147–179.

[cdd] cdd/cddplus, 1995–2008, Software, available at http://www.ifor.math.ethz.ch/~fukuda/cdd_home/.

[Che91] Mu Fa Chen, On coupling of jump processes, Chin. Ann. of Math. 12B (1991), no. 4,

385–399.

[D97] D. Dubischar. Representation of Markov Processes by Random Dynamical Systems. Report

393, Institut f¨ur Dynamische Systeme, Universit¨at Bremen, 1997.

[FYMP97] W. Feng Yu and X. Mei Ping, On order-preservation of couplings for multidimensional

diﬀusion processes, Chin. J. of Appl. Proba. and Stat. 13 (1997), no. 2, 142–148.

[FG] P. A. Ferrari and A. Galves, Construction of stochastic processes, coupling and regeneration,

Sociedad Venezolana de Matematicas, 2000

[FM01] J. A. Fill and M. Machida, Stochastic monotonicity and realizable monotonicity, Ann.

Probab. 29 (2001), no. 2, 938–978.

[FF97] F. Forbes and O. Fran¸cois, Stochastic comparison for markov processes on a product of

partially ordered sets, Stat. and Probab. Letters 33 (1997), 309–320.

[FP96] K. Fukuda and A. Prodon, Double description method revisited, Combinatorics and com-
puter science (Brest, 1995), Lecture Notes in Comput. Sci., vol. 1120, Springer, Berlin,
1996, pp. 91–111.

[GAP] Gap software - groups, algorithms, programming - a system for computational discrete

algebra, 1986–2006., Software, available at http://www.gap-system.org/.

[KKO77] T. Kamae, U. Krengel, and G.L. O’Brien, Stochastic inequalities on partially ordered

spaces, Ann. Probab. 5 (1977), no. 6, 899–912.

[Lin92] T. Lindvall, Lectures on the coupling method, John Wiley & Sons Inc., New-York , 1992,

ISBN 0-471-54025-0

[LS98] F. J. L´opez and G. Sanz, Stochastic comparisons and couplings for interacting particle

systems, Statist. Probab. Lett. 40 (1998), 93–102.

[Lou05] P.-Y. Louis, Increasing coupling of probabilistic cellular automata, Statist. Probab. Lett.

74 (2005), 1–13.

[Mas87] W. A. Massey, Stochastic orderings for Markov processes on partially ordered spaces,

Math. Oper. Res. 12 (1987), no. 2, 350–367.

[Min04] I. G. Minelli, Pathwise convergence to equilibrium of the supercritical contact process,

Ph.D. thesis, Universit`a di Padova, 2004.

24

[pos] The

online

encyclopedia

of

integer

sequences, Website,

available

at

http://www.research.att.com/~njas/sequences/?q=posets&language=english&go=Search.

[PW96] J.G. Propp and D.B. Wilson, Exact sampling with coupled Markov chains and appli-
cations to statistical mechanics, Random Structures and Algorithms 9 (1996), no. 1&2,
223–252.

[Zie95] G. Ziegler, Lectures on polytopes, Graduate Texts in Mathematics, vol. 152, Springer-

Verlag, New York, 1995.

25

