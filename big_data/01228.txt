6
1
0
2

 
r
a

M
3

 

 
 
]
I

A
.
s
c
[
 
 

1
v
8
2
2
1
0

.

3
0
6
1
:
v
i
X
r
a

GeoGebra Tools with Proof Capabilities

Zolt´an Kov´acs

Private University College of Education

of the Diocese of Linz, Austria

Csilla S´olyom-Gecse

Babe¸s-Bolyai University, Cluj-Napoca, Romania

March 4, 2016

Abstract

We report about signiﬁcant enhancements of the complex algebraic
geometry theorem proving subsystem in GeoGebra for automated proofs
in Euclidean geometry, concerning the extension of numerous GeoGebra
tools with proof capabilities. As a result, a number of elementary theorems
can be proven by using GeoGebra’s intuitive user interface on various
computer architectures including native Java and web based systems with
JavaScript. We also provide a test suite for benchmarking our results with
200 test cases.

1

Introduction

GeoGebra is an educational mathematics software tool, with millions of users.
In 2005, its founder Markus Hohenwarter broadened its software development
into an open source project. GeoGebra’s features (including dynamic geome-
try, computer algebra, spreadsheets and function investigation) primarily focus
on facilitating student experiments in Euclidean geometry, and not on formal
reasoning. Including automated deduction tools in GeoGebra’s dynamic geom-
etry system (DGS) could introduce a whole new range of learning and teaching
scenarios.

Since automated theorem proving (ATP) in geometry has reached a rather
mature stage, in 2010 some ATP experts agreed on starting a project of incor-
porating and testing a number of diﬀerent automated provers for geometry in
GeoGebra. This collaboration was initiated by Tom´as Recio. Since the initial
kickstart this project reached the following milestones:

1. A workshop for theoretical planning took place in Santiago de Com-

postela, Spain, February 2011.

1

2. A second workshop for implementation planning took place in Alcal´a

de Henares, Spain, January 2012.

3. A prototype implementation was presented in Alcal´a de Henares in June
2012 by demonstrating 44 test cases using 5 diﬀerent theorem prover meth-
ods [2, 12].

4. First public release in GeoGebra 5.0 in October 2014 with 60 test cases

[4].

5. Full documentation and ﬁxing several issues according to users’ feedback

in July 2015 in [15].

6. Extension of the set of the translated dynamic geometry construction

tools to cover 200 test cases.

In this paper we report about the last milestone. In section 2 we give a
comprehensive overview about the ﬁrst milestones. Section 3.1 summarizes our
results by focusing on the general improvements in GeoGebra. Section 3.2 shows
some tables concerning our test results. Section 4 sketches up our next planned
steps for another milestone in the implementation.

2 Overview

An interactive prover system designed mainly for secondary school students can
diﬀer from expert prover systems in some aspects. For example, GCLC [9] and
OpenGeoProver [19] process a program code written in its special language and
print the output as a precise report about the computation details. By contrast,
a DGS tool should collect all pieces of information about the relationships of the
objects purely by analyzing the construction being created by point-and-click
edits and possibly some other input parameters for the prover commands; ﬁnally
the output is typically a yes/no answer and eventually some extra prescribed
conditions to avoid degeneracy cases.

There is a plenty of literature on reports on successful applications of DGS by
extending one with an ATP subsystem. Among them, here we mention GeoProof
[18] and LADucation [1] which are open-sourced, and thus it is possible to
continue their eﬀorts by external researchers also. A publicly available variant
of LADucation was already able to import a GeoGebra construction and set up
an equation system which was solved by an external computer algebra system
(CAS). Other systems including JGEX [24] and Cinderella [11] are not open-
sourced, but built upon a similar approach: visualizations in the DGS must be
supported by ATP computations.

Our project harnessed GeoGebra’s success in the classrooms and tried to
address some problems of the existing DGS/ATP prototypes including small
distribution, being unmaintained or incomplete operation. In our solution in
GeoGebra a user creates a dynamic geometry construction which contains free

2

points and dependent points as usual. All dependent points are already deter-
mined by the free points, however, all free points can be dragged by the user
as desired. When a free point is dragged, some dependent points will also be
changed by following the deﬁnitions in the construction steps. In such a way
geometric theorems can be visualized by experiment.

This technique is well known in the world of DGS. Going one step forward,
an ATP subsystem can give a more sound answer whether the visually obvious
facts (for example, if three dependent points in a given construction are always
collinear) generally hold. GeoGebra’s command line interface with its Prove
and ProveDetails commands and the graphical Relation Tool [16] introduce
a higher level interface to investigate the problem setting by using an ATP
subsystem.

Proving Euclidean elementary geometry theorems was introduced in GeoGe-
bra with its version 5 in September 2014. A report [4] shows a benchmark about
60 theorems which can be directly checked with the Prove and ProveDetails
commands in GeoGebra. More details are shown in [14] about how the prover
subsystem is embedded to GeoGebra’s user interface intuitively by using and
extending the Relation Tool.

There are several approaches to compute a proof internally by using GeoGe-

bra’s portfolio prover [13], including

• Wu’s method [23] by using OpenGeoProver externally, and also
• the area method [6] (via OpenGeoProver), moreover
• Recio’s exact check method [12] and
• the Gr¨obner basis method [10, 17].

In our present work we focused on the internally implemented Gr¨obner basis
method which translates the geometric objects to algebraic equations directly
and manipulates on the algebraic equation system by eliminating the dependent
variables. Our work could be however used for Wu’s method also, since we
just deﬁned a set of equations to translate geometric construction tools into an
algebraic approach. We used complex algebraic geometry in our computations
which is a standard way to set up a Euclidean geometry question (see [7, chapter
6]).

3 Our enhancements

We report about our contributions to GeoGebra in two major areas:

1. Implementation of symbolic equations for various geometric tools (section

3.1).

2. Creating a number of tests to extend the benchmarks (section 3.2).

3

3.1 Symbolic equations

GeoGebra’s geometry tools have been classiﬁed by [20, p. 104] as “easy to use”,
“middle” and “diﬃcult to use”. Preiner deﬁnes two criteria for a tool to be easy
(p. 121):

1. The tool does not depend on already existing objects, or just requires
existing points which can also be created ‘on the ﬂy’ by clicking on the
drawing pad. The order of actions is irrelevant and no additional keyboard
input is required.

2. The tool directly aﬀects only one type of existing object or all existing
objects at the same time and requires just one action. Again, the order of
actions is irrelevant and no additional keyboard input is required.

The basic concept in our work was to implement theorem proving features for
the easier tools in GeoGebra. Also it was important that the usually discussed
classroom theorems can be quickly constructed by using the easier tools. The
classroom theorems usually require points, segments, rays, lines and circles,
and angles. For some more advanced topics tangents, parabolas, ellipses and
hyperbolas may be needed.

3.1.1 Translating geometry to algebra

Implementing angles and conics may have theoretical diﬃculties in our ap-
proach. For angles, we refer to the fact that it is not possible to deﬁne only
the interior bisector of an angle: we always need to work together with internal
and external angles at the same time (cf. [5, p. 40]). This is a consequence of han-
dling angles: there is no way to check equality unless one computes the tangent
of them, that is, instead of checking α = β one veriﬁes tan(α) = tan(β) and these
formulas are equivalent only if we set up some restrictions, say 0 ≤ α, β < π. In
this sense we cannot distinguish 0o and 180o.

For conics, ellipses and hyperbolas must also be handled as non-
distinguishable objects, because using the synthetic approach we need to de-
ﬁne them with their foci, and the deﬁning relations are the same. More pre-
cisely, given foci A and B and conic point C, another point P is an element
of the conic if and only if AC + CB = AP + P B in the case of an ellipse and
|AC − CB| = |AP − P B| (that is, (AC − CB)2 = (AP − P B)2) in the case of a
hyperbola. Since the lengths in these equations are non-negative quantities, we
either need to add constraints AC ≥ 0, CB ≥ 0, AP ≥ 0 and P B ≥ 0 (which
are not possible in complex algebraic geometry due to lack of inequalites), or we
need to use the squared quantities AC 2, CB2, AP 2 and P B2 and express these
equations exclusively by them. In this second case we need to eliminate the non-
squared quantities from the equation. With the help of the following computer
algebra command we learn that for both the ellipse and the hyperbola we get
the same product of 8th degree (here we used Giac [14] for computations):

>> factor(eliminate([AC+CB=AP+PB,AC^2=ac^2,CB^2=cb^2,AP^2=ap^2,PB

^2=pb^2],[AC,CB,AP,PB]))

4

returns

[(ac-cb-ap-pb)*(ac-cb-ap+pb)*(ac-cb+ap-pb)*(ac-cb+ap+pb)*(ac+cb-

ap-pb)*(ac+cb-ap+pb)*(ac+cb+ap-pb)*(ac+cb+ap+pb)]

which has the same result as for the input

>> factor(eliminate([(AC-CB)^2=(AP-PB)^2,AC^2=ac^2,CB^2=cb^2,AP

^2=ap^2,PB^2=pb^2],[AC,CB,AP,PB]))

Interpreting the result, it is only possible to deﬁne the set AC±CB = ±AP±P B
in the complex algebraic geometry sense which consists of 8 theoretical curves:

1. AC + CB = AP + P B, the ellipse,
2. AC + CB = AP − P B ⇔ AC + CB + BP = AP , which—according to
the triangle inequality—is possible only in a degenerate case when A, B
and C (and also P ) are collinear,

3. AC + CB = −AP + P B ⇔ P A + AC + CB = P B, similar to the previous

collinear case,

4. AC + CB = −AP − P B ⇔ AC + CB + AP + P B = 0 which is possible

only in a degenerate case when A = B = C = P ,

5. AC − CB = AP + P B ⇔ CA + AP + P B = CB, similar to the former

collinear cases,

6. AC − CB = −AP + P B, one branch of the hyperbola,
7. AC − CB = AP − P B, the other branch of the hyperbola,
8. AC − CB = −AP − P B ⇔ CA + AP + P B = CB, again similar to the

former collinear cases.

That is, we indeed obtained that an ellipse and a hyperbola cannot be distin-
guished in this model (but all other non-degenerate curves can be distinguished
from them). This issue will give some limitations to investigate special features
of conics, but still enable investigating some common features of them. For ex-
ample, the following generalization of Pascal’s hexagon theorem for conics holds
(see Fig. 1):

Theorem 1. Let c be the union of an ellipse and a hyperbola, both deﬁned with
foci A, B and circumpoint C. Let a denote line AB and let the perpendicular
bisector of a be b. Let C(cid:48) be the reﬂection of C to the line a and C(cid:48)(cid:48) to b. Also
let us take an arbitrary point D on c and by reﬂection to a and b, respectively,
obtain points D(cid:48) and D(cid:48)(cid:48). Now the intersections of CD and C(cid:48)(cid:48)D(cid:48)(cid:48), CD(cid:48) and
C(cid:48)C(cid:48)(cid:48), moreover C(cid:48)D and D(cid:48)D(cid:48)(cid:48) will be collinear.

A consequence of this example that some formulas can also be diﬃcult to
distinguish, and may require further investigation by using elimination and fac-
torization with the help of a CAS.

5

Figure 1: A generalization of Pascal’s hexagon theorem

In general, when a construction is given, it is important to identify geometri-
cal hypotheses which are non-distinguishable from other geometrical hypotheses
because they are translated with the same algebraic formula. When the prover
disproves the respective statement in the algebraic translation, it should not
be interpreted that the geometry statement was false. This is the case when
attempting to prove that the internal bisectors of a triangle are concurrent:
the algebraic translation actually disproves that the union of the internal and
external angle bisectors are concurrent.

Also it is important to identify geometrical

theses which are non-
distinguishable from other geometrical theses because they are translated with
the same algebraic formula. When the prover proves the respective statement
in the algebraic translation, it should not be interpreted that the geometry
statement was true.

3.1.2 The implemented tools

Apart from considering these issues, we managed to handle many typical class-
room situations, and we report that most “easy” tools are implemented, and
also some other tools from the “middle” and “diﬃcult to use” toolset.

The following basic geometrical shapes are now implemented: segment, line,
ray and vector, each deﬁned by two points, circle deﬁned with center and through

6

point or through three points, angle, parabola with focus point and directrix,
ellipse and hyperbola deﬁned with two focus points. This table summarizes
them, and also those tools which can operate on the basic geometrical shapes
(the latter ones printed in italicized description, underlined objects are new
enhancements compared to [15]):

Tool

Description

Diﬃculty Implementation remarks

Point

Line

Segment

Circle
Points

easy

easy

easy

through

3

easy

Midpoint or Center

easy

points and segments

Perpendicular
sector

Bi-

easy

at line and segment

Area

Ray

Vector

Angle

Circle with Center
through Point

Polygon

Intersect

easy

polygons of

middle

middle

middle

middle

middle

middle

line with line (cannot decide
properly for segments), with
circle, with parabola, with el-
lipse, with hyperbola; circle
with circle (for other conics we
cannot decide properly)

Perpendicular Line

middle

at line through point

7

Parallel Line

middle

with line through point

Angular Bisector

middle

angle deﬁned by three points

Tangents

middle

Reﬂect about Point

middle

at circle, parabola, ellipse/hy-
perbola

point, line, circle, parabola, el-
lipse, hyperbola

Reﬂect about Line

middle

point, line, circle, parabola

Rotate around Point

diﬃcult

with known angles: 0 ◦, ±30 ◦,
±45 ◦, ±60 ◦, ±90 ◦, ±180 ◦

Translate by Vector

diﬃcult

point

Reﬂect about Circle —

point, circle

Parabola

Hyperbola

Ellipse

—

—

—

with focus point and directrix

with foci and circumpoint

with foci and circumpoint

The remaining, yet unimplemented “easy” tools in GeoGebra are: Conic
through 5 Points and Slope. The former one is actually not widely used in the
classroom, and the latter is a non-synthetic tool, that is, it is related to analytic
geometry. Some other missing, but planned features are listed in section 4.

3.1.3 An example

Theorem 2. Let c be a circle with center A and circumpoint B. Let a be a line
through B and C. Now—not considering some degenerate cases—reﬂecting line
a about c the image is a circle, that is, for arbitrary point D ∈ a its reﬂection
D(cid:48) about c always lies on the same circle (which is the circumcircle of points A,
B(cid:48)(= B) and C(cid:48), where B(cid:48) and C(cid:48) are the mirror images of B and C about c,
respectively).

In other words, an inversion translates lines to circles in general. To use
GeoGebra’s Relation Tool (see Fig. 2) one needs to set up the construction as
described in the Algebra View on the left (either by selecting tools from the
top, or by using commands in the Input Bar on the bottom). Finally one has to

8

Figure 2: Inversion translates lines to circles

select the Relation Tool from the top and choose point D(cid:48) and line d (or enter
the command Relation[D,d] in the Input Bar). GeoGebra now numerically
checks if D ∈ d, the answer is yes, and the user can request a symbolical check
by clicking on “More. . .”. Finally GeoGebra concludes that—under some non-
degeneracy conditions—the statement is generally true.

From the computational point of view, GeoGebra here uses the Gr¨obner
basis method. Thus it sets up the follwoing 6 equations in 13 variables, but
point A will be ﬁxed to the origin (so there are only 11 variables remaining). The
following log information is printed only in debug mode in GeoGebra, including
the timestamp in the ﬁrst column:

19:48:26.550 // Free point A(v1,v2)
19:48:26.550 // Free point B(v3,v4)
19:48:26.550 c = Circle[A, B] /* Circle through B with center A */
19:48:26.551 // Free point C(v5,v6)
19:48:26.551 a = Line[B, C] /* Line through B, C */
19:48:26.551 D = Point[a] /* Point on a */
19:48:26.555 // Constrained point D(v7,v8)
19:48:26.555 Hypotheses:
19:48:26.555 1. -1*v7*v6+v8*v5+v7*v4+-1*v5*v4+-1*v8*v3+v6*v3
19:48:26.556 C’ = Mirror[C, c] /* C mirrored at c */
19:48:26.560 // Constrained point C’(v9,v10)
19:48:26.561 2. -1*v9*v6^2+-1*v9*v5^2+v5*v4^2+v5*v3^2+2*v9*v6*v2+-2*v5*v4*v2+-1*v9*v2^2+v5*
v2^2+v6^2*v1+2*v9*v5*v1+v5^2*v1+-1*v4^2*v1+-2*v5*v3*v1+-1*v3^2*v1+-2*v6*v2*v1+2*v4*v2*
v1+-1*v9*v1^2+-1*v5*v1^2+2*v3*v1^2

19:48:26.562 3. -1*v10*v6^2+-1*v10*v5^2+v6*v4^2+v6*v3^2+2*v10*v6*v2+v6^2*v2+v5^2*v2+-2*v6*v4
*v2+-1*v4^2*v2+-1*v3^2*v2+-1*v10*v2^2+-1*v6*v2^2+2*v4*v2^2+2*v10*v5*v1+-2*v6*v3*v1+-2*
v5*v2*v1+2*v3*v2*v1+-1*v10*v1^2+v6*v1^2

19:48:26.562 D’ = Mirror[D, c] /* D mirrored at c */
19:48:26.566 // Constrained point D’(v11,v12)
19:48:26.567 4. -1*v11*v8^2+-1*v11*v7^2+v7*v4^2+v7*v3^2+2*v11*v8*v2+-2*v7*v4*v2+-1*v11*v2^2+
v7*v2^2+v8^2*v1+2*v11*v7*v1+v7^2*v1+-1*v4^2*v1+-2*v7*v3*v1+-1*v3^2*v1+-2*v8*v2*v1+2*v4*
v2*v1+-1*v11*v1^2+-1*v7*v1^2+2*v3*v1^2

19:48:26.568 5. -1*v12*v8^2+-1*v12*v7^2+v8*v4^2+v8*v3^2+2*v12*v8*v2+v8^2*v2+v7^2*v2+-2*v8*v4

9

*v2+-1*v4^2*v2+-1*v3^2*v2+-1*v12*v2^2+-1*v8*v2^2+2*v4*v2^2+2*v12*v7*v1+-2*v8*v3*v1+-2*
v7*v2*v1+2*v3*v2*v1+-1*v12*v1^2+v8*v1^2
19:48:26.568 Hypotheses have been processed.
19:48:26.574 substitutions: {v1=0, v2=0}
19:48:26.574 Thesis reductio ad absurdum (denied statement)...
19:48:26.586 6. -1+-1*v13*v11*v10^2*v4+v13*v12^2*v9*v4+v13*v11^2*v9*v4+-1*v13*v11*v9^2*v4+

v13*v11*v10*v4^2+-1*v13*v12*v9*v4^2+-1*v13*v12^2*v10*v3+-1*v13*v11^2*v10*v3+v13*v12*v10
^2*v3+v13*v12*v9^2*v3+v13*v11*v10*v3^2+-1*v13*v12*v9*v3^2+v13*v11*v10^2*v2+-1*v13*v12
^2*v9*v2+-1*v13*v11^2*v9*v2+v13*v11*v9^2*v2+-1*v13*v11*v4^2*v2+v13*v9*v4^2*v2+v13*v12
^2*v3*v2+v13*v11^2*v3*v2+-1*v13*v10^2*v3*v2+-1*v13*v9^2*v3*v2+-1*v13*v11*v3^2*v2+v13*v9
*v3^2*v2+-1*v13*v11*v10*v2^2+v13*v12*v9*v2^2+v13*v11*v4*v2^2+-1*v13*v9*v4*v2^2+-1*v13*
v12*v3*v2^2+v13*v10*v3*v2^2+v13*v12^2*v10*v1+v13*v11^2*v10*v1+-1*v13*v12*v10^2*v1+-1*
v13*v12*v9^2*v1+-1*v13*v12^2*v4*v1+-1*v13*v11^2*v4*v1+v13*v10^2*v4*v1+v13*v9^2*v4*v1+
v13*v12*v4^2*v1+-1*v13*v10*v4^2*v1+v13*v12*v3^2*v1+-1*v13*v10*v3^2*v1+-1*v13*v11*v10*v1
^2+v13*v12*v9*v1^2+v13*v11*v4*v1^2+-1*v13*v9*v4*v1^2+-1*v13*v12*v3*v1^2+v13*v10*v3*v1^2

19:48:26.592 Eliminating system in 11 variables (6 dependent)

Then the underlying CAS (here Giac) eliminates variables v8, v9, v10, v11,
v12 and v13 to describe non-degeneracy conditions between the coordinates of
the free points. The obtained equation system in factorized form is produced in
the following output (which is compatible with Singular’s arrays, cf. [15, p. 146]):

[1]:

[1]:

_[1]=1
_[2]=-v6^2-v5^2
_[3]=v7

[2]: 1,1,1

[2]:

[1]:

_[1]=1
_[2]=v4^2+v3^2
_[3]=v5
_[4]=v7

[2]: 1,1,1,1

...
[12]:
[1]:

_[1]=1
_[2]=v4*v6*v7^3-v4*v6*v7^2*v3-v4*v6*v7*v5^2+v4*v6*v5^2*v3-v6^2*v5*v3^2+v7^3*v5*v3-v7^2*v5*

v3^2-v7*v5^3*v3

[2]: 1,1

[13]:
[1]:

_[1]=1
_[2]=v4^2+v3^2
_[3]=-v5*v4+v6*v3
_[4]=-1

[2]: 2,2,1,1

This is interpreted by GeoGebra as 13 possible sets of degeneracy conditions.
Here—because of its geometrical meaning, simplicity and being fully synthetic—
the 13th set will be selected, which means: “if (v4^2+v3^2)^2*(-v5*v4+v6*v3)
diﬀers from 0, then the thesis will be true on all possible values of the coordinates
of the free points”. Since A = (0, 0), B = (v3, v4) and C = (v5, v6), this clearly
means that the two non-degeneracy conditions being shown are “A diﬀers from
B” (that is, circle c is non-degenerate) and “A, B and C are not collinear” (that
is, such a line must be chosen for a which is not going through the center of c).

Finally, GeoGebra concludes that

19:48:26.714 Statement is GENERALLY TRUE
19:48:26.714 Benchmarking: 487 ms

10

19:48:26.717 OUTPUT for ProveDetails: null = {true, {"AreCollinear[A,B,C]", "AreEqual[A,B

]"}}

This computation is done faster than half of a second.1

3.1.4 Technical notes

Technically speaking, GeoGebra is a Java application. From the developer’s
point of view, the Java public interface SymbolicParametersBotanaAlgo has to
be implemented in GeoGebra’s Algo* classes by creating suitable algebraic equa-
tions (and corresponding new variables) to describe the symbolic background of
a newly used tool.2

To check the validity of a thesis, the public interface SymbolicParametersB-
otanaAlgoAre must be implemented.3 Currently the following checks are imple-
mented: collinearity, concurrency, concyclicity, congruency, equality, parallelism,
perpendicularity, incidence, and formula checking (to prove equations).

3.2 Benchmarks

In our improvements the benchmark suite was extended by additional 140 the-
orems. 57 of these extra tests were chosen from [5]—these tests were computed
in Chou’s book by using Wu’s [23] characteristic method.

Here we summarize our results by sharing a list of the recent benchmarking
outputs. GeoGebra’s prover benchmarking system is available as a command
line tool in its source folder test/scripts/benchmark/prover/.

3.2.1 Desktop version

GeoGebra’s desktop version runs as a Java native application on the mostly used
operating system platforms including Windows, Mac OS X and Linux. Due to
the internally used native Giac CAS each platform requires its own compiled
version of the embedded computer algebra system.

The following table is the output of the “jar-paper” scenario, launched by
the command line xvfb-run ./runtests -S jar-paper -r in this folder. This
scenario tests the Prove command exclusively. See also [4].

• The ﬁrst column abbreviates the name of the test cases.
• Column E1 (“Engine 1”) refers to Recio’s exact check method programmed

by Simon Weitzhofer.

1The steps and the output for computing this example have been simpliﬁed to ﬁt this

paper. See also [15] for the detailed algorithm of symbolical checking in the Relation Tool.

2See https://dev.geogebra.org/javadoc/common/org/geogebra/common/kernel/algos/

SymbolicParametersBotanaAlgo.html for a recent list of the implemented classes.

3See https://dev.geogebra.org/javadoc/common/org/geogebra/common/kernel/algos/

SymbolicParametersBotanaAlgoAre.html for a recent list.

11

• Column E2 (“Engine 2”) refers to the Gr¨obner basis method via Singu-
larWS (also known as Botana’s method) programmed by the authors of
this paper. (See [3] for more on SingularWS.)

• Column E2/Giac refers to Gr¨obner basis method via the Giac computer
algebra tool (instead of SingularWS) programmed by Bernard Parisse and
the authors of this paper.

• Column E3a (“Engine 3a”) refers to OpenGeoProver’s Wu’s method im-

plementation programmed by Ivan Petrovi´c and Predrag Janiˇci´c.

• Column E3b (“Engine 3b”) refers to OpenGeoProver’s Area method pro-

grammed by Damien Desfontaines.

• The Auto approach refers to the automatic selection of methods which is
already implemented in GeoGebra and it usually starts with “Engine 1”
and then it continues with “Engine 2” (either via SingularWS or Giac: if
SingularWS is available, then in SingularWS, otherwise in Giac). If the
Gr¨obner basis method is not conclusive, then “Engine 3a” is tried. If it is
not conclusive either, then OpenGeoProver’s Area method (Engine 3b) is
used.

See [4] for more details about the used methods. Explanation of the used

colors:

• Green means that the test returns a correct yes/no answer. Intensity of
green means speed (the lighter the slower). Numbers are in milliseconds.

• Pink means that GeoGebra returns the wrong answer.
• Yellow means the output is not conclusive, thus using this method Ge-

oGebra shows “undeﬁned”, i.e. there is no error here.

• The R. (“Result”) column provides some extra information about the

result, such as f (“false”) when the statement was false on purpose.

The S. (“Speed”) column shows the timing. Highlighted entries are the best
results, italicized entries are the slowest (but working) results in a row. The
test cases are also available for download in GeoGebra’s .ggb format from the
GeoGebra online source code directly.
For testing we used a PC with 16 GB RAM, 8 × Intel(R) Core(TM) i7 CPU

860 @ 2.80GHz, and Linux Mint 17.2.

Test

lines-parallel
midpoint-third
orthocente. . .ar
points-col. . .ar
points-equal
Pythagoras. . .n4
tangents-c. . .ns
translate-. . .r3
translate-. . .ar

R.
f

f
f

f

E1

E2

E2/Giac

E3a

E3b

Auto

R.

S.
3
3
4
3
4
1
5
2
4

R.
f
f
f
f
f
f

f
f

S.
35
217
48
34
33
214
1767
42
37

R.
f

f
f

S.
185
201
202
196
190
196
1080
t/o
196

R.
f

f
f
t

S.
65
58
75
62
57
61
210
61
61

S.
69
72
85
64
68
85
84
69
67

R.
f

f
f
t

f

S.
7
311
312
3
8
310
1118
t/o
9

12

altitudes-. . .82
altitudes-. . .05
angle-bise. . .e2
angle-bise. . .le
area-polygon-2
area-polygon
bisector-i. . .20
bisector-i. . .19
bisector-m. . .22
bisector-m. . .21
bisector-m. . .nt
bisector-o. . .37
bisector-p. . .28
bisector-p. . .19
Brianchon-. . .la
cathetus
centroid-m. . .o1
centroid-m. . .o2
centroid-m. . .o3
centroid-m. . .o4
Ceva1
Ceva2
Ceva3
Ceva4
Ceva5
circle-are. . .71
circle-bis. . .16
circle-bis. . .94
circle-mid. . .11
circle-one. . .nt
circle-per. . .75
circle-per. . .95
circle-per. . .72
circle-per. . .67
circle-per. . .68
circle-qua. . .65
circle-ray. . .06
circles-ar. . .90
circles-ch. . .98
circumcenter1
circumcenter2
circumcenter3
circumcenter4
circumcenter5
circumcenter6
circumcent. . .97
circumcirc. . .nt
construct-. . .ne
construct-. . .nt
def-line-p. . .ne
def-points. . .e1
def-points. . .e2
def-points. . .ne
Desargues
diameters-. . .74
ellipse-circle2
ellipse-circle3
ellipse-circle
ellipse-sy. . .y2
ellipse-sy. . .ry
EulerLine
expression. . .d1
expression. . .d2
expression-ex31
foot-exists
geometric-mean
incenter1
incenter2
inversion-. . .nt
inversion-. . .e2
inversion-. . .ne
inversion-. . .nt
inversion-. . .e2
inversion-. . .e3
inversion-. . .le
isogonals1
isogonals2
isogonals3
isosceles-. . .r2
isosceles-. . .or
isoscel-ex91
line-circl. . .on
Menelaus
midpoint-half

t
t
t
t

t

t

t

t

2
5
3
2
1
1
2
2
2
2
1
2
1
2
1
1
2
2
2
1
1
2
3
1
2
2
2
2
2
2
2
1
5
2
2
5
1
4
3
5
6
9
4
5
13
4
1
1
1
4
4
3
6
5
2
5
5
5
4
4
13
1
1
2
3
1
3
2
3
2
2
5
3
2
1
1
5
1
1
2
5
4
1
3

t
t
t
t
t
t
t
t
t
t
t

t
t

t
t
t
t
t

t
t
t
t
t

t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t

t
t
t
t
t
t
t

t

t
t
t
t
t
t
t

t
t
t
t
t
t
t
t

t
t
t

t
t
t

37
356
56
63
69
73
38
747
2150
431
69
88
517
652
1135
67
590
58
39
33
57
66
61
68
63
334
38
900
1911
30
492
39
191
1169
906
860
38
34
33
236
106
141
141
108
128
682
t/o
78
77
70
210
145
57
1068
554
53
59
59
62
61
729
64
73
65
314
63
462
643
80
75
81
83
99
90
86
62
66
61
100
114
63
84
66
52

t

t
t

t
t
t

t

t

t

t
t

t
t
t
t
t
t
t

t
t
t
t
t

t

t

t
t
t
t

f

45
46
379
377
103
118
231
180
224
170
40
590
787
214
t/o
224
45
215
221
214
20
251
260
239
244
72
136
t/o
71
39
45
46
55
54
53
54
64
54
54
41
37
36
44
46
47
49
805
61
45
40
60
68
36
49
50
43
t/o
28
46
40
50
237
222
220
40
227
402
363
37
41
40
32
370
96
91
286
228
877
201
163
15
34
265
219

t

t

t
t

t
t

t

t

t

t

t
t
t

t
t
t
t
t
t
t

t
t
t
t
t
t

t

t

t
t

t

t

198
200
323
319
242
252
342
371
350
305
192
739
2153
374
t/o
221
197
214
220
207
181
798
694
759
758
224
289
421
233
194
202
195
199
11175
t/o
228
8312
t/o
200
187
198
197
196
195
196
203
t/o
252
238
186
215
209
197
1108
203
196
216
189
206
192
198
213
209
219
190
213
1205
1348
201
195
188
179
778
254
259
430
358
t/o
347
307
174
208
t/o
216

t
t
t
t
t
t

t
t
t
t

t
t
t
t
t

t
t
t
t

t
t

t
t
t
t
t
t
t

t
t
t
t

t
t

t

t
t
t
t
t
t
t

t
t

t
t
t

t

t

13

38
t/o
67
69
66
80
34
70
70
69
73
89
69
69
71
74
174
80
39
38
82
91
91
t/o
80
96
32
86
95
35
92
35
105
t/o
1608
1673
38
34
34
102
97
98
102
96
106
156
68
84
80
65
84
82
65
80
85
63
63
62
64
56
238
75
78
74
70
76
58
65
89
87
88
90
89
92
95
64
72
62
82
82
82
85
233
69

t
t
t
t
t
t

t
t
t
t

t
t

t
t
t
t
t
t
t
t
t
t
t

t
t

t

t
t
t
t
t
t
t

t
t
t
t
t
t
t

t

t
t
t
t
t
t
t
t

t
t

t
t
t

t

t

200
199
320
322
241
272
452
327
310
299
194
873
2630
980
t/o
221
199
214
207
214
285
814
748
678
672
556
388
474
243
186
243
240
363
11324
t/o
933
8289
t/o
235
5
7
4
5
190
12
199
t/o
349
340
6
209
212
6
2014
202
185
255
181
236
189
21
218
205
209
198
209
1601
1478
185
203
281
180
773
250
345
528
426
t/o
468
370
216
195
t/o
214

midpoints-. . .60
midpoints-. . .66
midpoint-w. . .96
mirrored-r. . .el
nine-point. . .le
orthocenter1
orthocenter2
orthocenter3
orthocenter4
orthocenter5
orthocenter6
orthocenter7
orthocente. . .70
orthocente. . .30
orthocente. . .c2
orthocente. . .ic
Pappus
parabola-d. . .n2
parabola-d. . .n3
parabola-d. . .on
parabola-d. . .s2
parabola-d. . .s3
parabola-d. . .us
parallel-chords
parallel-ex121
parallel-l. . .51
parallelog. . .84
parallelog. . .ls
parallelog. . .79
parallelog. . .69
parallelog. . .85
Pascal-ellipse
Pascal-ell. . .ec
Pascal-ell. . .ec
Pascal-hyp. . .la
Pascal-parabola
perpendcul. . .81
perpendicu. . .88
perpendicu. . .87
perpendicu. . .86
point-equal2
point-equal
powerline-. . .ar
Pythagoras. . .n2
Pythagoras. . .n3
Pythagoras. . .on
Pythagoras
quadrangle. . .61
rational-n. . .n2
rational-n. . .on
reflection1
reflection2
reflection. . .11
reflection. . .2a
reflection. . .G4
reflection. . .nt
regular-tr. . .le
rotate1
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
Simson1
Simson2
simsons-li. . .93
simsons-li. . .97
simsons-th. . .88
square1
square2
square3
symmedians
tangent-ar. . .ar
tangent-pa. . .a2
tangent-pa. . .la
tangent-po. . .le
Thales1
Thales2
Thales3
theorem-3-. . .se
theorem-of. . .42
translate-. . .r1

t
t
t
t
t
t
t

t

t

t

t

2
4
2
3
35
7
5
5
6
15
7
1
1
1
2
2
3
5
2
2
3
5
2
88
4
2
2
10
5
2
5
2
3
1
2
2
2
3
3
5
4
9
3
1
2
2
2
2
2
2
2
2
2
2
2
2
5
2
3
1
1
1
1
2
1
4
2
1
2
1
1
1
2
3
2
2
5
2
5
2
2
2
4
9

t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t

t

t
t

t

t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t

t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t
t

t
t

46
55
73
45
69
39
33
35
33
42
36
25
107
40
65
75
40
51
42
46
48
41
47
44
48
53
24
42
25
50
57
t/o
t/o
93
t/o
t/o
45
45
67
67
34
12
48
230
226
219
216
49
215
217
34
41
45
42
47
28
40
23
33
32
220
236
36
36
34
53
51
114
58
44
42
39
56
441
42
60
48
41
42
41
37
t/o
38
37

213
235
230
193
225
193
189
184
187
196
186
189
319
191
222
212
235
208
195
199
205
191
198
195
201
203
191
198
183
199
205
t/o
t/o
977
t/o
t/o
204
209
234
254
177
182
204
217
216
206
202
222
203
205
188
189
208
187
217
188
193
183
191
189
207
206
188
191
194
247
239
2999
213
235
197
192
204
t/o
193
203
193
190
200
194
195
t/o
194
189

t
t
t
t
t
t
t
t
t
t

t
t
t
t
t
t
t
t
t
t

t
t

t

t

t
t
t

t
t
t
t
t
t
t

t
t
t
t

t
t
t
t

t
t
t
t
t
t
t

t

t
t
t

t

t
t
t

t
t

14

t
t
t

t
t
t
t
t
t
t
t

t

t

f

t

t

t

t

t

t
t

t
t

t

t
t

t
t

t
t

t
t

f

t
t
t

t

977
1150
506
63
430
225
100
128
126
113
105
119
34
168
86
81
957
459
460
160
37
57
34
667
38
1163
69
400
40
175
741
72
69
65
66
1074
39
678
319
536
47
55
131
67
66
61
61
1772
55
62
55
55
60
54
61
65
115
65
48
32
60
55
34
57
31
311
277
44
658
337
38
112
100
68
79
59
210
165
215
101
122
71
564
53

f
t
t

t
t
f
t
t
t
f
t

t

t

t
f

t
t

t

t
t
t
t
t

t
t

t

t

1539
321
88
62
79
69
625
70
67
170
635
164
35
95
87
91
80
62
60
63
36
59
33
t/o
33
145
79
t/o
33
95
11860
63
68
62
63
63
37
t/o
70
84
59
70
79
91
91
79
80
89
69
76
59
69
61
61
64
71
84
64
61
35
67
66
30
61
29
190
206
41
93
184
41
86
83
63
81
70
61
77
t/o
78
92
69
69
59

t
t
t
t
t
t
t
t
t
t
t

t
t
t
t
t
t
t
t
t
t
t
t
t

t

t
t

t
t
t

t
t
t
t
t
t
t
t
t
t
t
t

t
t
t
t

t
t
t
t
t
t
t
t
t

t
t
t
t
t

t

t
t
t

t
t

258
1187
218
206
34
7
6
5
5
17
9
201
350
186
213
222
243
201
200
200
204
194
192
85
203
198
231
13
223
205
1064
t/o
t/o
1073
t/o
t/o
199
202
230
298
185
8
196
211
212
202
201
1898
211
216
189
186
283
194
209
194
191
251
184
185
203
216
183
183
185
543
496
3041
205
548
196
190
202
t/o
272
245
201
234
186
195
202
t/o
187
9

translate-. . .r2
translate-. . .ic
trapezoid-. . .49
trapezoid-. . .03
triangle-areas
triangle-c. . .74
triangle-m. . .ns
triangle-m. . .53
triangle-m. . .79
triangle-m. . .80
triangle-m. . .t1
triangle-m. . .t2
triangle-m. . .t3
triangle-m. . .t4
triangle-m. . .t5
triangle-p. . .34
triangle-p. . .23
triangle-p. . .55
triangle-p. . .48
triangles-. . .31
true
two-circle. . .01
Varignon
Total (of 200)

3
4
2
2
1
2
5
5
5
2
10
4
7
6
6
3
67
2
2
5173
1
2
9

t
t
t
t
t

t

t
t
t
t
t
t
t
t
t
t
t
t
t

t

t

t
t
t
t
t

t

t
t

t

53
68
45
49
65
30
43
63
48
50
31
37
39
26
40
56
49
46
57
52
1
94
40

t
t

t
t

t

t
t
t
t
t
t
t
t
t
t
t
t
t

t

259
237
204
206
216
184
190
566
193
201
190
184
189
186
189
210
232
207
211
211
1
239
203

t

t
t
t

t
t
t
t
t

t
t
t
t

t

68
58
997
33
52
80
523
4042
236
41
72
68
78
75
73
179
171
225
327
818
1
263
82

t

t

t
t
t
t
t
t
t
t

t

t

75
70
t/o
33
208
91
82
98
t/o
43
74
72
75
67
76
151
90
73
t/o
t/o
1
85
73

t
t

t
t

t

t
t
t
t
t
t
t
t
t
t
t
t
t

t

273
228
239
197
210
239
5
621
196
201
8
5
4
9
7
216
72
208
203
5330
1
486
13

33

175

127

84

67

145

We highlight that:
• Our theorem corpus has a signiﬁcant number of test cases. Cf. [22].
• The best performing theorem prover—when using our corpus—is the com-
plex algebraic geometry prover via Singular [8]. Here the [7, chapter 6, §4]
algorithm was used. Timing is remarkably under one second in most test
cases.

• The table can be misleading when investigating other columns. Actually,
there is no implementation for intersections with conics in GeoGebra for
Recio’s method. Also E2/Giac can use a diﬀerent algorithm with bet-
ter (but slightly slower) results. Some GeoGebra commands are not yet
implemented in the communication layer between GeoGebra and Open-
GeoProver, that is, columns E3a and E3b show only a limited amount of
positive test cases.

• For the end user the signiﬁcant case is the last column, since Singular is
disabled by default to ensure the same behavior on oﬄine and online runs.

3.2.2 Web version

The

The web version runs in a web browser. All major browsers including Google
Chrome, Mozilla Firefox and Internet Explorer are supported.
following table was generated by using the

command line
xvfb-run ./runtest -p "Auto Web" -r in this folder. It compares the out-
puts of the Prove command in the desktop version (“Auto”) and the web
version (“Web”).

Test

lines-parallel
midpoint-third
orthocente. . .ar
points-col. . .ar
points-equal

R.
f

f
f

Auto

Web

S.
7
297
303
5
4

R.
f

f
f

S.
11
779
626
9
11

15

Pythagoras. . .n4
tangents-c. . .ns
translate-. . .r3
translate-. . .ar
altitudes-. . .82
altitudes-. . .05
angle-bise. . .e2
angle-bise. . .le
area-polygon-2
area-polygon
bisector-i. . .20
bisector-i. . .19
bisector-m. . .22
bisector-m. . .21
bisector-m. . .nt
bisector-o. . .37
bisector-p. . .28
bisector-p. . .19
Brianchon-. . .la
cathetus
centroid-m. . .o1
centroid-m. . .o2
centroid-m. . .o3
centroid-m. . .o4
Ceva1
Ceva2
Ceva3
Ceva4
Ceva5
circle-are. . .71
circle-bis. . .16
circle-bis. . .94
circle-mid. . .11
circle-one. . .nt
circle-per. . .75
circle-per. . .95
circle-per. . .72
circle-per. . .67
circle-per. . .68
circle-qua. . .65
circle-ray. . .06
circles-ar. . .90
circles-ch. . .98
circumcenter1
circumcenter2
circumcenter3
circumcenter4
circumcenter5
circumcenter6
circumcent. . .97
circumcirc. . .nt
construct-. . .ne
construct-. . .nt
def-line-p. . .ne
def-points. . .e1
def-points. . .e2
def-points. . .ne
Desargues
diameters-. . .74
ellipse-circle2
ellipse-circle3
ellipse-circle
ellipse-sy. . .y2
ellipse-sy. . .ry
EulerLine
expression. . .d1
expression. . .d2
expression-ex31
foot-exists
geometric-mean
incenter1
incenter2
inversion-. . .nt
inversion-. . .e2
inversion-. . .ne
inversion-. . .nt
inversion-. . .e2
inversion-. . .e3
inversion-. . .le
isogonals1
isogonals2
isogonals3
isosceles-. . .r2
isosceles-. . .or

612
t/o
7190
12
715
564
1206
1188
620
661
1585
1020
1069
932
427
5511
t/o
1569
4344
870
580
864
848
845
265
841
859
t/o
t/o
887
438
1650
817
446
896
569
740
t/o
t/o
2383
t/o
t/o
823
36
36
21
t/o
477
51
603
9376
271
201
12
509
525
10
13654
496
400
1271
393
699
503
61
751
716
784
503
871
t/o
t/o
412
467
487
296
4501
895
954
711
557
t/o
814
852

f
t
t
t
t
t
t

t
t
t
t

t
t
t
t
t

t
t

t
t
t

t
t
t

t
t
t
t

t
t

t

t
t
t
t
t
t
t

t
t

t

t

311
1153
t/o
9
200
202
391
340
275
277
442
348
323
318
188
726
2668
1146
t/o
214
190
210
211
214
298
874
852
715
721
527
353
437
252
186
278
255
369
11148
t/o
909
8343
t/o
260
12
6
6
4
196
14
210
t/o
358
353
8
212
212
7
1928
200
189
273
183
260
190
13
213
211
217
196
209
1696
1391
198
192
289
184
818
260
372
519
419
t/o
463
380

t

f
t
t
t
t
t
t

t
t
t
t

t
t

t
t
t
t
t
t
t
t
t
t
t

t
t

t

t
t
t
t
t
t
t

t
t
t
t
t
t
t

t

t
t
t
t
t
t
t
t

t
t

t
t
t

16

isoscel-ex91
line-circl. . .on
Menelaus
midpoint-half
midpoints-. . .60
midpoints-. . .66
midpoint-w. . .96
mirrored-r. . .el
nine-point. . .le
orthocenter1
orthocenter2
orthocenter3
orthocenter4
orthocenter5
orthocenter6
orthocenter7
orthocente. . .70
orthocente. . .30
orthocente. . .c2
orthocente. . .ic
Pappus
parabola-d. . .n2
parabola-d. . .n3
parabola-d. . .on
parabola-d. . .s2
parabola-d. . .s3
parabola-d. . .us
parallel-chords
parallel-ex121
parallel-l. . .51
parallelog. . .84
parallelog. . .ls
parallelog. . .79
parallelog. . .69
parallelog. . .85
Pascal-ellipse
Pascal-ell. . .ec
Pascal-ell. . .ec
Pascal-hyp. . .la
Pascal-parabola
perpendcul. . .81
perpendicu. . .88
perpendicu. . .87
perpendicu. . .86
point-equal2
point-equal
powerline-. . .ar
Pythagoras. . .n2
Pythagoras. . .n3
Pythagoras. . .on
Pythagoras
quadrangle. . .61
rational-n. . .n2
rational-n. . .on
reflection1
reflection2
reflection. . .11
reflection. . .2a
reflection. . .G4
reflection. . .nt
regular-tr. . .le
rotate1
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
rotate-by-. . .es
Simson1
Simson2
simsons-li. . .93
simsons-li. . .97
simsons-th. . .88
square1
square2
square3
symmedians
tangent-ar. . .ar
tangent-pa. . .a2
tangent-pa. . .la
tangent-po. . .le
Thales1
Thales2

t

t

t
t
t
t
t
t
t
t
t
t

t
t
t
t
t
t
t
t
t
t
t
t
t

t

t

t
t
t

t
t
t
t
t
t
t

t
t
t
t

t
t
t
t

t
t
t
t
t
t
t

t

t
t
t

t

t
t

244
187
t/o
200
278
1192
220
201
28
10
5
6
5
8
9
189
380
185
210
235
240
214
194
198
204
193
200
105
196
204
253
10
247
204
955
t/o
t/o
1072
t/o
t/o
199
200
226
324
185
9
203
213
211
206
203
1902
209
207
185
191
286
193
205
185
186
276
182
194
205
220
188
182
184
571
500
3049
210
571
190
195
195
t/o
280
270
197
258
190
189

t

t

t
t
t
t
t
t
t
t
t
t
t

t
t
t
t
t
t
t
t
t
t
t
t
t

t

t
t

t
t
t

t
t
t
t
t
t
t
t
t
t
t
t

t
t
t
t

t
t
t
t
t
t
t
t
t

t
t
t
t
t

t

t
t

17

217
438
864
759
778
2803
678
647
101
42
32
26
27
44
44
515
3284
422
568
639
1422
514
497
491
670
555
550
267
482
594
260
58
259
607
767
3173
t/o
t/o
3774
8789
602
803
698
3622
293
6
496
691
684
577
589
1042
807
770
449
492
772
474
867
387
437
214
399
498
701
825
490
418
442
1875
1637
t/o
788
1544
494
460
493
t/o
504
1013
498
533
482
499

Thales3
theorem-3-. . .se
theorem-of. . .42
translate-. . .r1
translate-. . .r2
translate-. . .ic
trapezoid-. . .49
trapezoid-. . .03
triangle-areas
triangle-c. . .74
triangle-m. . .ns
triangle-m. . .53
triangle-m. . .79
triangle-m. . .80
triangle-m. . .t1
triangle-m. . .t2
triangle-m. . .t3
triangle-m. . .t4
triangle-m. . .t5
triangle-p. . .34
triangle-p. . .23
triangle-p. . .55
triangle-p. . .48
triangles-. . .31
true
two-circle. . .01
Varignon
Total (of 200)

t

t
t
t
t

t
t

t

t
t
t
t
t
t
t
t
t
t
t
t
t

t

209
t/o
190
9
273
215
251
204
212
261
8
640
189
196
10
4
9
4
8
211
79
202
214
5263
1
486
12

t

t
t
t
t

t
t

t

t
t
t
t
t
t
t
t
t
t
t

t

t

550
2805
454
33
852
543
642
592
524
259
31
t/o
480
558
23
23
15
16
33
879
166
766
623
t/o
0
1131
37

145

125

We highlight that:
• The web version does not return any incorrect output in any cases.
• It is properly working in 125/200 cases (62.5%) which is 86.2% of the

performance ratio of the desktop version.

• The web version is deﬁnitely slower than the desktop version by a ratio

between 2 and 6.

• Despite its limited availability and speed, the web version is already ap-
plicable in many classroom situations. The users only need a web browser
which should be accessed not only on desktop computers and laptops, but
also on tablets and mobile phones.

3.2.3 Theorems in the classrooms

To sum up, we list some important theorems which are usually discussed in
secondary schools. Now they can be proven with GeoGebra’s help, that is, at
least a yes/no answer is provided for many theorems, including:

• The Pythagorean theorem. The intercept theorem. The geometric mean

and cathetus theorems. Thales’ theorem.

• Concurrency of medians, bisectors, altitudes. Euler line. The midline the-

orem, Varignon’s theorem. The nine points circle. Simson’s theorem.

• The angle bisector theorem.
• Basic properties of translations and rotations.
• Basic properties of reﬂections about a point, a line or a circle.

18

• Ceva’s theorem, Menelaus’ theorem. Desargues’s theorem, Pappus’ theo-

rem.

• Basic properties of conic sections (including tangents).

The underlined theorems can be proven with the internal complex algebraic
geometry prover in GeoGebra by using the enhancements implemented in the
last milestone in our work.

4 Future work

Finally, we summarize the currently planned new features in the forthcoming
versions of GeoGebra.

GeoGebra tool Description

To implement

Area

of conics

Translate by Vector

segment,

line,
ray, circle,
parabola, ellipse, hyperbola,
polygons

Reﬂect about Line

ellipse, hyperbola

Reﬂect about Circle

line

Rotate around Point

general angles

There is still room for further enhancements:
• Improve formula handling by eliminating non-squared quantities automat-
ically and identifying formulas for a correct decision about the truth of
the statement.

• Currently it is not possible to mirror a line about a circle directly: in this
case the implementation should handle that the object type is changing
from line to circle in general.

• The ShowProof command [13] might be implemented in cases when a

readable proof can be produced automatically.

• Allow proofs for 3D Euclidean geometry (cf. [21]).
• Improve Gr¨obner bases computations in Giac to implement transcendent
coeﬃcients (see [7, chapter 6, §4]). This would speed up computations in
a number of cases which are currently infeasible: an indirect reduction of
variables would be achieved in this way.

19

• GeoGebra’s LocusEquation command is capable of computing algebraic
loci [3]. It would be possible to unify the code base for the locus and
the prover subsystem, and the uniﬁed system could be maintained and
improved easier.

Also implementing conic sections for Recio’s exact check method would speed
up GeoGebra’s proofs signiﬁcantly.

Acknowledgments

The theorem proving subsystem in GeoGebra is a joint work with contributions
from several researchers, programmers and teachers. We are especially thankful
to Bernard Parisse for improving the Giac CAS to be competitive to Singular
and some commercial systems, making possible that GeoGebra has a robust
embedded theorem prover also.

We are grateful to Tom´as Recio, Predrag Janiˇci´c, Julien Narboux and Fran-
cisco Botana for their useful hints to improve the text of this paper, and to
Markus Hohenwarter and Judit Robu for supporting our work.

References

[1] F. Botana, M. A. Ab´anades and J. Escribano. Exact internet accessible
computation of paths of points in planar linkages and diagrams. Comput.
Appl. Eng. Educ., 19(4):835–841, March 2009.

[2] F. Botana, Z. Kov´acs and S. Weitzhofer. Implementing theorem proving
in GeoGebra by using a Singular Webservice. In Proceedings EACA 2012,
Libro de Res´umenes del XIII Encuentro de ´Algebra Computacional y Apli-
caciones, pages 67–70, Universidad de Alcal´a, 2012.

[3] F. Botana and Z. Kov´acs. A Singular web service for geometric computa-
tions. Annals of Mathematics and Artiﬁcial Intelligence, 74(3-4), November
2014.

[4] F. Botana, M. Hohenwarter, P. Janiˇci´c, Z. Kov´acs, I. Petrovi´c, T. Recio
and S. Weitzhofer. Automated Theorem Proving in GeoGebra: Current
Achievements. J Autom Reasoning, 55(1):39–59, March 2015.

[5] S.-C. Chou. Mechanical Geometry Theorem Proving. Springer Science +

Business Media, 1987.

[6] S.-C. Chou, X.-S. Gao and J.-Z. Zhang. Automated production of tradi-
In Proceedings of the
tional proofs for constructive geometry theorems.
Eighth Annual IEEE Symposium on Logic in Computer Science LICS,
pages 48–56. IEEE Computer Society Press, 1993.

20

[7] D. Cox, J. Little and D. O’Shea. Ideals Varieties and Algorithms. Springer

New York, 2007.

[8] W. Decker, G.-M. Greuel, G. Pﬁster and H. Sch¨onemann. Singular 4-
0-2 — A computer algebra system for polynomial computations. 2015.
http://www.singular.uni-kl.de.

[9] P. Janiˇci´c. GCLC — A Tool for Constructive Euclidean Geometry and
In Lecture Notes in Computer Science, pages 58–73.

More Than That.
Springer Science + Business Media, 2006.

[10] D. Kapur. Using Gr¨obner bases to reason about geometry problems. Jour-

nal of Symbolic Computation, 2(4):399–408, December 1986.

[11] U. Kortenkamp. Foundations of Dynamic Geometry. PhD thesis, ETH

Z¨urich, 1999.

[12] Z. Kov´acs, T. Recio and S. Weitzhofer. Implementing theorem proving in
GeoGebra by using exact check of a statement in a bounded number of test
cases. In Proceedings EACA 2012, Libro de Res´umenes del XIII Encuentro
de ´Algebra Computacional y Aplicaciones, pages 123–126, Universidad de
Alcal´a, 2012.

[13] Z. Kov´acs. The portfolio prover in GeoGebra 5.

In Proceedings of the
10th International Workshop on Automated Deduction in Geometry (ADG
2014), pages 191–205, University of Coimbra, 2014.

[14] Z. Kov´acs and B. Parisse. Giac and GeoGebra – Improved Gr¨obner Ba-
sis Computations. In Lecture Notes in Computer Science, pages 126–138.
Springer Science + Business Media, 2015.

[15] Z. Kov´acs. Computer Based Conjectures and Proofs in Teaching Euclidean

Geometry. PhD thesis, JKU Linz, 2015.

[16] Z. Kov´acs. The Relation Tool in GeoGebra 5. In Automated Deduction in
Geometry: 10th International Workshop, ADG 2014, Coimbra, Portugal,
July 9-11, 2014, Revised Selected Papers, pages 53–71. Springer Interna-
tional Publishing, 2015.

[17] B. Kutzler and S. Stifter. On the application of Buchberger's algorithm to
automated geometry theorem proving. Journal of Symbolic Computation,
2(4):389–397, December 1986.

[18] J. Narboux.

GeoProof, a user

interface

in
In Mathematical User-Interfaces Workshop, Elec-
2007.

geometry.
tronic
http://www.activemath.org/workshops/MathUI/07/proceedings/
Narboux-Geoproof-MathUI07.html.

Schloss Hagenberg,

for

formal proofs

Linz, Austria,

Proceedings.

21

[19] I. Petrovi´c and P. Jani´ciˇc. Integration of OpenGeoProver with GeoGebra,
http://argo.matf.bg.ac.rs/events/2012/fatpa2012/slides/

2012.
IvanPetrovic.pdf.

[20] J. Preiner. Introducing Dynamic Mathematics Software to Mathematics
Teachers: the Case of GeoGebra. PhD thesis, Paris Lodron University,
Salzburg, Austria, 2008.

[21] E. Roanes-Mac´ıas and E. Roanes-Lozano. A Maple package for automatic
theorem proving and discovery in 3d-geometry. In Proceedings of the 6th
International Conference on Automated Deduction in Geometry, ADG’06,
pages 171–188. Berlin, Heidelberg. Springer, 2007.

[22] P. Quaresma and P. Janiˇci´c. GeoThms – a Web System for Euclidean
Constructive Geometry, 2007. Electronic Notes in Theoretical Computer
Science. Proceedings of the 7th Workshop on User Interfaces for Theorem
Provers (UITP 2006), 174(2):35–48, May 2007.

[23] W.-T. Wu. On the Decision Problem and the Mechanization of Theorem-

Proving in Elementary Geometry, 1984.

[24] Z. Ye, S.-C. Chou and X.-S. Gao. An Introduction to Java Geometry
In Automated Deduction in Geometry, pages 189–195. Springer

Expert.
Science + Business Media, 2011.

22

