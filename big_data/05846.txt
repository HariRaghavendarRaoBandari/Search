A Connection Between Locally Repairable Codes

and Exact Regenerating Codes

Toni Ernvall∗, Thomas Westerbäck∗, Ragnar Freij-Hollanti†, and Camilla Hollanti∗

∗Department of Mathematics and Systems Analysis, Aalto University, P.O.Box 11100, FI-00076 Aalto, Finland
†Department of Communications and Networking, Aalto University, P.O.Box 13000, FI-00076 Aalto, Finland

Emails: {ﬁrstname.lastname}@aalto.ﬁ

Email: ragnar.freij@aalto.ﬁ

6
1
0
2

 
r
a

 

M
8
1

 
 
]
T
I
.
s
c
[
 
 

1
v
6
4
8
5
0

.

3
0
6
1
:
v
i
X
r
a

Abstract—Typically, locally repairable codes (LRCs) and re-
generating codes have been studied independently of each other,
and it has not been clear how the parameters of one relate to those
of the other. In this paper, a novel connection between locally
repairable codes and exact regenerating codes is established. Via
this connection, locally repairable codes are interpreted as exact
regenerating codes. Further, some of these codes are shown to
perform better than time-sharing codes between minimum band-
width regenerating and minimum storage regenerating codes.

Since exact repair is a stronger requirement than functional
repair, the same bound holds for exact regenerating codes too.
The bound (1) deﬁnes a tradeoff between the node size and
the total repair bandwidth. The point on the tradeoff curve
in which γ is minimized is called the minimum bandwidth

regenerating (MBR) point(cid:40)

α =

2dB

k(2d−k+1)
k(2d−k+1) .

2dB

I. INTRODUCTION

γ =

In the ﬁeld of distributed storage, regenerating codes and
locally repairable codes (LRCs) are two important classes
of codes. These two code types are designed for different
purposes. Namely, a LRC is primarily constructed to have
small sets of repair nodes, whereas regenerating codes require
every set of a predetermined size to be able to repair a node.
Naturally, the question arises as to what kind of a regenerating
code does a LRC imply. Our aim is to answer this question
by illustrating a fundamental connection between the two code
types.
A. Exact Regenerating Codes

An exact regenerating code [1], [2] with parameters (n, k, d)
with node size α, total repair bandwidth γ, and ﬁle size B is a
system with n storage devices (called nodes) with the property
that any k nodes can recover the stored ﬁle and any d nodes
(called helper nodes) can repair a lost node with an exact copy
by transmitting a total amount γ of information. If each helper
node transmits the same amount β of information, we say that
a system has symmetric repair. In that case we have γ = dβ.
The concept of functionally repairing codes was introduced
in [3]. In that scenario we do not require the replacing node
to be an exact copy of the old one. For functionally repairing
codes it was proved in the same paper that the possible values
of B are characterized by

min{α, (d − j)β}.

(1)

j=0

This work was ﬁnancially supported by the Academy of Finland grants
#276031, #282938, and #283262 to C. Hollanti, and by a grant to C. Hollanti
from Magnus Ehrnrooth Foundation, Finland. The support from the European
Science Foundation under the ESF COST Action IC1104 is also gratefully
acknowledged.

B ≤ k−1(cid:88)

The point in which α is the smallest possible is called the
minimum storage regenerating (MSR) point

(cid:40)

α = B
k
γ =
k(d−k+1) .

dB

These extremal points are known to be achievable at least
asymptotically also under the assumption of exact repair [4],
[5].

B. Locally Repairable Codes

Locally repairable codes were ﬁrst studied in [6], [7], [8]. A
locally repairable code with parameters (N, K, D, R, ∆) is a
code over a ﬁnite ﬁeld of size q with length N, cardinality qK,
minimum distance D, and (R, ∆) all-symbol locality property
meaning that each symbol has (R, ∆) locality. A symbol j ∈
{1, . . . , n} has (R, ∆) locality if there exists a subset S of
nodes such that |S| ≤ R + ∆ − 1, j ∈ S and any node in
S can be repaired by any |S| − ∆ + 1 nodes from S. The
deﬁnition of (R, ∆) all-symbol locality was introduced in [9].
Remark 1.1: Usually the letters (n, k, d, r, δ) are used to
denote the parameters of a LRC. Here, we use the capital
letters (N, K, D, R, ∆) to distinguish the parameters of a LRC
from the parameters (n, k, d) of a regenerating code.

In [9],

the following upper bound was derived on the

minimum distance of linear LRCs,
− 1

D ≤ N − K −

(cid:18)(cid:24) K

(cid:25)

(cid:19)

R

(∆ − 1) + 1.

(2)

In [11], the same bound was later established for nonlinear
LRCs.

C. Contributions and Related Work

In Section II we introduce a fundamental connection be-
tween LRCs and exact regenerating codes. To the best of
our knowledge,
this connection has not been pointed out
before. The connection gives a method to use LRCs as exact
regenerating codes. In Section III, we give a method to
construct LRCs that have good properties when interpreted
as exact regenerating codes. In addition, we will analyze the
performance of such exact regenerating codes in Section IV.
Optimal exact regenerating codes at the MBR point for all
values of (n, k, d) and optimal exact regenerating codes at
the MSR point when d ≥ 2k − 2 are constructed in [4]. The
asymptotic achievability of the MSR point for all values of
(n, k, d) is shown in [5].

Constructions of exact regenerating codes between the MBR
and MSR points exceeding the time-sharing line are studied in
[12], [13], [14], [15]. Results in [12] and [13] are combined
in [16]. However, in contrast to these constructions we are
not trying to ﬁnd codes that perform as well as possible.
Instead, our main purpose is to show that LRCs can be used
as exact regenerating codes and, in many cases, they have
quite good performance. However, when compared to the other
constructions, LRCs when used as exact regenerating codes do
not usually perform that well. The established connection also
enables further analysis on LRCs in terms of storage space,
repair bandwidth, etc.

From the opposite point of view, nontrivial upper bounds
for exact regenerating codes are studied for example in [17]
and [18]. In the case (n, k, d) = (4, 3, 3), the capacity curve
for all possible values of (α, γ) was solved in [19]. In the
nonasymptotic case, it was shown in [20] that in most points
between MBR and MSR, there do not exist exact regenerating
codes that would achieve the capacity of functionally repairing
regenerating codes.

for

codes

several parameter

Locally repairable

sets
(N, K, D, R, ∆) are constructed in [6], [9], [21], [22], [11],
[23]. In [6] it was proved that bound (2) is not achievable for
all parameters (N, K, R). Codes with local regeneration are
studied in [9]. In a completely different direction, connections
between regenerating codes and LRCs have been made in [10],
where local repairability is exploited to select helpers in a
regenerating code.

II. CONNECTION BETWEEN LOCALLY REPAIRABLE

CODES AND EXACT REGENERATING CODES

Proof: Consider a LRC with parameters (N, K, D, R, ∆).
Clearly, its length is n = N and node size is α = 1. By the
deﬁnition of minimum distance, by contacting any N − D + 1
nodes we may recover the original ﬁle.
Suppose we have lost a node that belongs to locality group
Sj. Contacting any N − ∆ + 1 of the existing nodes is enough
to guarantee that we have at least |Sj|− ∆ + 1 nodes from the
set Sj. Hence, we are able to repair the lost node. As the lost
node could be repaired by R nodes from Sj, the total repair
bandwidth is γ = R.

In general, the above code does not have symmetric repair.
However, taking n! copies of the code and rearranging the
order of the nodes according to each permutation on the set
{1, . . . , n}, and then ﬁnally storing onto n nodes we get a
code with symmetric repair. This method is explained in more
detail in [24].
regenerating code with symmetric repair has node size α(cid:48)
total repair bandwidth γ(cid:48)

Remark 2.1: In Theorem 2.1, after normalization, the exact
n! = 1,

n! = R, and ﬁle size B(cid:48)

Remark 2.2: The constructions of [14] have an important
similarity with Theorem 2.1: in both cases the number of
helper nodes used in the resulting exact regenerating code is
bigger than in the corresponding LRC. This property is used
in both cases to obtain that any set of certain size is able to
repair a lost node.

n! = K.

Notice that when using a LRC, we transmit all the stored
information when repairing a lost node. Thus, while the
deﬁnition of regenerating codes allows us to send only parts
of the stored information, in our derived regenerating codes
we do not modify the information before transmitting it.

Deﬁne

C LRC

n,k,d(1, γ)

to be the largest ﬁle size (that is, the largest possible K) that
can be stored using a LRC with N = n, R ≤ γ, D ≥ n−k+1
and ∆ ≥ n−d+1. Notice that by taking α copies of the system
we can store a ﬁle that is of size α times the original ﬁle size.
Hence, we deﬁne generally

C LRC

n,k,d(α, γ) = αC LRC

n,k,d(1,

γ
α

).

Also, for functionally-repairing regenerating codes, denote the
capacity by

k−1(cid:88)

(cid:26)

(cid:27)

.

(d − j)γ

d

α,

min

Ck,d(α, γ) =
n,k,d(α, γ) ≤ Ck,d(α, γ).

j=0

The next theorem describes an interesting connection be-

Clearly, C LRC

tween LRCs and exact regenerating codes.

Theorem 2.1: Suppose we have a LRC of length N, dimen-
sion K, minimum distance D and (R, ∆) all-symbol locality.
The same code can be regarded as an exact regenerating code
with length n = N, ﬁle recover degree k = N − D + 1, node
repair degree d = N − ∆ + 1, node size α = 1, total repair
bandwidth γ = R, and ﬁle size B = K. In addition, there
exists an exact regenerating code with symmetric repair for
the same parameters n, k and d with node size α(cid:48) = n!, total
repair bandwidth γ(cid:48) = n!R and ﬁle size B(cid:48) = n!K.

Remarkably, these naïvely constructed exact regenerating
codes have good properties, when the parameters are chosen
wisely. In Section IV, we will give an asymptotic analysis of
the behavior of C LRC
n,k,d(α, γ) when n, k and d are large and
close to each other.

Remark 2.3: Several variations of the deﬁnition of a LRC
are studied in the literature. For example, in [25] and [26],
codes with multiple repair alternatives are studied. Similarly
as before, such a code could be used as an exact regenerating
code.

III. CONSTRUCTION

In most of the existing literature, LRCs are constructed
with the parameters N, K, R and ∆ ﬁxed, and the minimum
distance D as large as possible. In this paper, however,
we want to ﬁnd an exact regenerating code with as good
performance as possible when n, k, d, α = 1 and γ are
ﬁxed. This means that N = n, D = n − k + 1, R = γ
and ∆ = n − d + 1 are ﬁxed and we need to ﬁnd a LRC
with best possible code dimension K. Generally, the largest
possible value of K is not known. In this section we give a
method for ﬁnding LRCs for this purpose.

The following proposition for linear LRCs follows imme-

Proposition 3.1: Let (N, D, R, ∆) be integers such that
R+∆−1(cid:101)(R +

diately from Theorem V.5 (i) and (ii) in [23].
1 ≤ R, 2 ≤ ∆ ≤ D ≤ N − R + 1 and s = (cid:100) N
∆ − 1) − N. Then the following hold.
(i)

If s < R, then for sufﬁciently large q there is a linear
(N, K, D, R, ∆)-LRC over Fq with
K = R(i + 1) − s − t = N + 1 − D − (∆ − 1)i,
where i ≥ 0 and 0 ≤ t < R.
If s ≥ R, then for sufﬁciently large q there is a linear
(N, K, D, R, ∆)-LRC over Fq with
K = R(i + 1) − t =
N + 1 − D − (∆ − 1)i − (R + ∆ − 1 − s),
where i ≥ 1 and 0 ≤ t < R.

(ii)

We will here describe how a K×N generator matrix over a
sufﬁciently large ﬁnite ﬁeld Fq can be constructed for a linear
LRC obtained in Proposition 3.1. First, index the columns of
G from 1 to N, and let GX denote the columns indexed by X
in G, where X ⊆ {1, . . . , N}. Further, let F1, . . . , Fm denote
a partition of {1, . . . , N}.

In the case (i), let m = (cid:100) N
Fj = {(R + ∆ − 1)(j − 1) + 1, . . . , (R + ∆ − 1)j}

R+∆−1(cid:101),

if 1 ≤ j ≤ m − 1, and
Fm = {(R + ∆ − 1)(m − 1) + 1, . . . , (R + ∆ − 1)m − s}.
Now we can construct a a generator matrix G over a sufﬁ-
ciently large Fq such that

(i) GFj generates a linear maximum distance separable
(MDS) code of rank R for 1 ≤ j ≤ m − 1,
(ii) GFm generates a linear MDS-code of rank R − s,
for any subset X ⊆ {1, . . . , N}, the column vectors
(iii)
of G indexed by X are linearly independent if and
only if |X| ≤ K, |X ∩ Fj| ≤ R for 1 ≤ j ≤ m − 1
and |X ∩ Fm| ≤ R − s.

The matrix G generates a linear (N, K, D, R, ∆)-LRC given
by the case (i).

In the case (ii), let m = (cid:100) N
Fj = {(R + ∆ − 1)(j − 1) + 1, . . . , (R + ∆ − 1)j}

R+∆−1(cid:101) − 1,

if 1 ≤ j ≤ m − 1, and
Fm = {(R + ∆− 1)(m− 1) + 1, . . . , (R + ∆− 1)(m + 1)− s}.

Now we can construct a generator matrix G over a sufﬁciently
large Fq such that

(ii)

(i) GFj generates a linear MDS-code of rank R for

1 ≤ j ≤ m,
for any subset X ⊆ {1, . . . , N}, the column vectors
of G indexed by X are linearly independent if and
only if |X| ≤ K and |X ∩ Fj| ≤ R for 1 ≤ j ≤ m.
The matrix G generates a linear (N, K, D, R, ∆)-LRC given
by the case (ii).

We remark that every storage node in a linear LRC is
associated with a column in an associated generator matrix. In
the above constructions, any node x ∈ Fj can be repaired by
any subset of R nodes in Fj \{x}, when 1 ≤ j ≤ m− 1. For
x ∈ Fm, in the case (i) any subset of R− s nodes in Fm\{x}
can repair x, and in the case (ii) any subset of |R| nodes in
Fm \ {x} can repair x.

Example 3.1: The following matrix G over F3 generates a
linear LRC with parameters (N, K, D, R, ∆) = (8, 5, 2, 3, 2)
obtained in Proposition 3.1 (i). The index partition described
in the construction above for this G equals F1 = {1, 2, 3},
F2 = {4, 5, 6}, and F3 = {7, 8}.
4
0
0
1
0
0

6
0
0
1
1
0

3
1
1
0
0
0

2
0
1
0
0
0

5
0
0
0
1
0

8
2
2
2
2
2

7
1
1
1
1
1

1
1
0
0
0
0

G =

We remark that the linear LRCs obtained in Proposition 3.1
(i) are optimal if (cid:100) K
R (cid:101)R − K ≥ s. By optimality, we mean
that K is as large as it can be depending on the parameters
(N, D, R, ∆). For the other cases in Proposition 3.1,
the
obtained dimensions K are lower bounds in the sense that
larger dimensions can be possibly found for the associated
parameters (N, D, R, ∆). To get a better K in these cases,
one can try to use Theorem 13 or Theorem 14 in [27], or
Theorem V.5 (iii)–(v) in [23].

IV. PERFORMANCE ANALYSIS

In this section we will analyze how LRCs perform as exact
regenerating codes when compared to trivial upper and lower
bounds of exact regenerating codes, i.e., when compared to
the capacity of functionally-repairing regenerating codes and
the time-sharing line between the MBR and MSR points. The
performance of the code built by time-sharing MBR and MSR
codes is

P time-share
k,d

(α, γ) = s

where

k(2d − k + 1)α

2d

+ (1 − s)kα,

γ = sγM BR + (1 − s)γM SR = sα + (1 − s)

dα

d − k + 1

.

Theorem 4.1: Suppose

a

LRC

(N, K, D, R, ∆) is used as an exact

with
parameters
regenerating code.

It performs better than the code we get by time-sharing MBR
and MSR codes if and only if

N − D + 1

K >

(3)
Proof: Recall that n = N, k = N−D+1, d = N−∆+1,

1 +

2

.

R(D − ∆ + 1)
N − ∆ + 1

(cid:18)

(cid:19)

α = 1, γ = R, and the ﬁle size is K.

The performance of the code built by time-sharing MBR

and MSR codes in γ = R is

P time-share
k,d

(1, γ) = s

k(2d − k + 1)

2d

+(1−s)k = k−s

k(k − 1)

2d

with

i.e.,

,

.

(cid:19)

(cid:19)

γ = s + (1 − s)

d

d − k + 1
− (d − k + 1)γ

k − 1

s =

d

k − 1

(cid:18)

Together these equations give

P time-share
k,d

(1, γ) =

=

(d − k + 1)γ

1 +

k
2
N − D + 1

(cid:18)

d

1 +

(D − ∆ + 1)R
N − ∆ + 1

2

(cid:19)

proving the claim.

Example 4.1: Suppose (N, K, D, R, ∆) = (24, 16, 4, 3, 2).
Now, R + 1 divides N so there are plenty of constructions
showing that such code exists, see for example [6]. Now, the
right side of inequality (3) is

24 − 4 + 1

2

3(4 − 2 + 1)
24 − 2 + 1

1 +

< 16

(cid:18)

and hence such a LRC performs slightly better than the code
that is constructed by time-sharing.

Next we will show that in the case that the parameters n, k
and d are close to each other, the code rate asymptotically
coincides for LRCs and functionally-repairing regenerating
codes. The codes constructed in [16], [15] and [14] also
have a similar property. However, in the same scenario when
compared to codes we get by time-sharing MBR and MSR
codes, LRCs as exact regenerating codes perform strictly
better.

Suppose nm = n + m, km = k + m, and dm = d +
m, where n, k and d are ﬁxed. Let us study the situation
where m approaches inﬁnity. This illustrates the case where
the parameters n, k and d are close to each other.

Theorem 4.2: Let s ∈ [0, 1] be ﬁxed and let

(Nm = nm, Km, Dm ≥ nm − km + 1, ∆m ≥ nm − dm +
1, Rm ≤ γm) and consider them as exact regenerating codes.
Since γm = 1, by equation (2) we have

n − k + 1 ≤ nm − Km − (Km − 1)(n − d) + 1
= nm − Km(n − d + 1) + n − d + 1.

This gives

≤ nm − d + k
nm(n − d + 1)

Km
nm

→

1

n − d + 1

(5)

as m → ∞.
Suppose now that s = 0 and k = d. An MDS code of
length nm, dimension km and minimum distance n − k +
1 is known to exist if the ﬁeld size is large enough and it
corresponds to a LRC with (Nm = nm, Km = km, Dm =
n − k + 1, Rm = km, ∆m = n − k + 1) and it works as
an exact regenerating code with parameters (nm, km, dm) and
γm. Also, its rate approaches one as m → ∞.
Suppose now that s (cid:54)= 0 or k (cid:54)= d. In Theorem V.5 in [23] it
was shown that when given parameters N, K, R and ∆ with

0 < R < K ≤ N − (cid:100)K/R(cid:101) (∆ − 1),

(6)

we have a LRC for these parameters with minimum distance
D satisfying

D ≥ N − K − (cid:100)K/R(cid:101) (∆ − 1) + 1.

Suppose Nm = nm, ∆m = nm − dm + 1, Rm = (cid:98)γm(cid:99)
and Km = (cid:98)Sm(cid:98)γm(cid:99)(cid:99) , where Sm = m+k+d−n
n−d+(cid:98)γm(cid:99) . It is easy
to check that if m is large enough, then the requirements of
equation (6) are satisﬁed, and hence there exists a LRC for
these parameters with minimum distance D at least

Nm − Km −

(cid:24) Km
(cid:25)
(cid:24) Km(cid:98)γm(cid:99)

Rm

(cid:25)

(∆m − 1) + 1
(n − d) + 1

= n + m − Km −
≥ n + m − Sm(cid:98)γm(cid:99) − (Sm + 1)(n − d) + 1
= d + m − (m + k + d − n)((cid:98)γm(cid:99) + n − d)
= n − k + 1.

n − d + (cid:98)γm(cid:99)

(7)

+ 1

there

exists

Thus,
(Nm, Km, Dm, Rm, ∆m) such that
exact
α = 1, γm and ﬁle size Km.

regenerating code with parameters

with

parameters
it can be used as an
(nm, km, dm),

LRC

a

Notice ﬁrst that since α = 1, we have

(cid:98)γm(cid:99)
m

→ 1 − s
d − k + 1
(cid:106) k+m+d−n

(cid:107)

n−d+1
n + m

Now, if s = 1, then we have (cid:98)γm(cid:99) = 1 and hence the rate

Km
nm

(cid:98)Sm(cid:98)γm(cid:99)(cid:99)
n + m

=

(8)
as m → ∞. Together with equation (5) this gives the ﬁrst part
of equation (4).

n − d + 1

=

→

1

γm = sα + (1 − s)

dmα

dm − km + 1

.

(cid:40) 1

C LRC

nm,km,dm
nmα

(α, γm)

→

n−d+1
1

if s = 1
if 0 ≤ s < 1

(4)

as m → ∞.

of this code is

We have

as m → ∞.

Proof: Suppose ﬁrst that s = 1, so that γm = α = 1 for
all m. Assume we have a sequence of LRCs with parameters

Assume now that s (cid:54)= 1. Clearly the code rate is upper

bounded by 1. Also, we have

(cid:106) (k+m+d−n)(cid:98)γm(cid:99)

(cid:107)

Km
nm

=

=

(k+m+d−n)(cid:98)γm(cid:99)

n−d+(cid:98)γm(cid:99) − 1
(k + m + d − n)(cid:98)γm(cid:99) − (n − d + (cid:98)γm(cid:99))

n−d+(cid:98)γm(cid:99)
n + m

n + m

≥

(n + m)(n − d + (cid:98)γm(cid:99))

→ 1

as m → ∞, giving the second part of equation (4).

For comparison, it is straightforward to check that

P time-share

km,dm

(α, γm)

nmα
→

(cid:40) 1

2
1

→ 1 − s
2

,

if s = 1
if 0 ≤ s < 1

(9)

(10)

Ckm,dm (α, γm)

nmα

as m → ∞.

Hence the rates of functionally-repairing regenerating codes
and codes built from LRCs are asymptotically the same in each
point except in the MBR point. If n = d + 1, then they are the
same also in the MBR point. We conclude by the following
immediate consequence of Thm. 4.2.
Corollary 4.3: Suppose that s ∈ [0, 1] is ﬁxed and let γm =
sα + (1 − s)

dm−km+1 . We have

dmα

(cid:40) n−d+1
(cid:40) n−d+1

1

2

2

1 − s

2

if s = 1
if 0 ≤ s < 1

if s = 1
if 0 ≤ s < 1

Ckm,dm (α, γm)

C LRC

nm,km,dm

(α, γm)

→

and

km,dm

P time-share
C LRC
as m → ∞.

nm,km,dm

(α, γm)
(α, γm)

→

V. CONCLUSION

In this paper, we have shown a connection between locally
repairable codes and exact regenerating codes. Namely, a LRC
can be used as an exact regenerating code and, after a small
modiﬁcation, as an exact regenerating code with symmetric
repair. We have utilized this connection to construct exact
regenerating codes with better performance than time-sharing
MBR and MSR optimal codes.

REFERENCES

[1] K. V. Rashmi, Nihar B. Shah, P. Vijay Kumar, and K. Ramchandran,
“Explicit Construction of Optimal Exact Regenerating Codes for Dis-
tributed Storage,” in 47th Annual Allerton Conf. on Comm., Control,
and Comp., Monticello, IL, 2009, pp. 1243-1249.

[2] Y. Wu and A. G. Dimakis, “Reducing Repair Trafﬁc for Erasure Coding-
Based Storage via Interference Alignment,” in Proc. IEEE International
Symposium on Information Theory (ISIT), Seoul, July 2009, pp. 2276-
2280.

[3] A. G. Dimakis, P. B. Godfrey, Y. Wu, M. J. Wainwright, and K.
Ramchandran, “Network coding for distributed storage systems,” IEEE
Trans. Inf. Theory, vol. 56, no. 9, pp. 4539-4551, September 2010.

[4] K. V. Rashmi, Nihar B. Shah, and P. Vijay Kumar, “Optimal Exact-
Regenerating Codes for Distributed Storage at the MSR and MBR Points
via a Product-Matrix Construction,” IEEE Trans. Inf. Theory, vol. 57,
no. 8, pp. 5227-5239, August 2011.

[5] V. R. Cadambe, S. A. Jafar, H. Maleki, K. Ramchandran and C. Suh:
“Asymptotic Interference Alignment for Optimal Repair of MDS codes
in Distributed Storage,” IEEE Trans. Inf. Theory, vol. 59, no. 5, pp.
2974-2987, May 2013.

[6] P. Gopalan, C. Huang, H. Simitci, and S. Yekhanin, “On the Locality
of Codeword Symbols,” IEEE Trans. Inf. Theory, vol. 58, no. 11, pp.
6925-6934, November 2012.

[7] F. Oggier, A. Datta, “Self-repairing Homomorphic Codes for Distributed
Storage Systems,” 2011 Proc. IEEE INFOCOM, Shanghai, April 2011,
pp. 1215-1223.

[8] D. S. Papailiopoulos, A. G. Dimakis, “Locally repairable codes,” Proc.
IEEE Int. Symp. Inf. Theory (ISIT), Cambridge MA, pp. 2771-2775,
2012.

[9] G. M. Kamath, N. Prakash, V. Lalitha, P. V. Kumar, “Codes With Local
Regeneration and Erasure Correction,” IEEE Trans. Inf. Theory, vol. 60,
no. 8, pp. 4637-4660, 2014.

[10] I. Ahmad, C. C. Wang, “When Locally Repairable Codes Meet Regener-
ating Codes — What If Some Helpers Are Unavailable,” in Proc. IEEE
Int. Symp. Inf. Theory (ISIT), Hong Kong, July 2015, pp. 849-853.

[11] A. S. Rawat, O. O. Koyluoglu, N. Silberstein, S. Vishwanath, “Optimal
Locally Repairable and Secure Codes for Distributed Storage Systems,”
IEEE Trans. Inf. Theory, vol. 60, no. 1, pp. 212-236, 2014.

[12] C. Tian, V. Aggarwal, V. A. Vaishampayan, “Exact-Repair Regenerating
Codes Via Layered Erasure Correction and Block Designs,” in Proc.
IEEE Int. Symp. Inf. Theory (ISIT), Istanbul, July 2013, pp. 1431-1435.
[13] B. Sasidharan, P. V. Kumar, “High-Rate Regenerating Codes Through
Layering,” in Proc. IEEE Int. Symp. Inf. Theory (ISIT), Istanbul, July
2013, pp. 1611-1615.

[14] T. Ernvall, “Codes between MBR and MSR Points with Exact Repair
Property,” IEEE Trans. Inf. Theory, vol. 60, no. 11, pp. 6993-7005, 2014.
[15] S. Goparaju, S. El Rouayheb, R. Calderbank “New Codes and Inner
Bounds for Exact Repair in Distributed Storage Systems,” in Proc. IEEE
Int. Symp. Inf. Theory (ISIT), Honolulu, July 2014, pp. 1036-1040.

[16] C. Tian, B. Sasidharan, V. Aggarwal, V. A. Vaishampayan, P. V.
Kumar, “Layered Exact-Repair Regenerating Codes via Embedded Error
Correction and Block Designs,” IEEE Trans. Inf. Theory, vol. 61, no. 4,
pp. 1933-1947, 2015.

[17] B. Sasidharan, K. Senthoor, P. V. Kumar, “An Improved Outer Bound on
the Storage-Repair-Bandwidth Tradeoff of Exact-Repair Regenerating
Codes,” in Proc. IEEE Int. Symp. Inf. Theory (ISIT), Honolulu, HI, 2014,
pp. 2430-2434.

[18] I. M. Duursma, “Outer bounds for exact repair codes,” arXiv:1406.4852
[19] C. Tian, “Rate Region of the (4,3,3) Exact-Repair Regenerating Codes,”
in Proc. IEEE Int. Symp. Inf. Theory (ISIT), Istanbul, July 2013, pp.
1426-1430.

[20] N. B. Shah, K. V. Rashmi, P. V. Kumar, and K. Ramchandran, “Dis-
tributed Storage Codes With Repair-by-Transfer and Nonachievability
of Interior Points on the Storage-Bandwidth Tradeoff,” IEEE Trans. Inf.
Theory, vol. 58, no. 3, pp. 1837-1852, March 2012.

[21] I. Tamo, D. S. Papailiopoulos, A. G. Dimakis, “Optimal locally re-
pairable codes and connections to matroid theory,” in Proc. IEEE Int.
Symp. Inf. Theory (ISIT), pp. 1814-1818, 2013.

[22] W. Song, S. H. Dau, C. Yuen, T. J. Li, “Optimal Locally Repairable
Linear Codes,” IEEE J. on Sel. Areas in Comm., vol. 32, no. 5, pp.
1019-1036, 2014.

[23] T. Westerbäck, R. Freij-Hollanti, T. Ernvall, C. Hollanti, “On the
Combinatorics of Locally Repairable Codes via Matroid Theory,” arXiv
1501.00153v3, 2016.

[24] T. Ernvall, S. El Rouayheb, C. Hollanti, H. V. Poor, “Capacity and
Security of Heterogeneous Distributed Storage Systems,” IEEE J. Sel.
Areas in Comm., vol. 31, no. 12, pp. 2701-2709, December 2013.

[25] L. Pamies-Juarez, H. D. L. Hollmann, F. Oggier “Locally Repairable
Codes with Multiple Repair Alternatives,” in Proc. IEEE Int. Symp. Inf.
Theory (ISIT), 2013.

[26] I. Tamo, A. Barg, “A Family of Optimal Locally Recoverable Codes,”
IEEE Trans. Inf. Theory, vol. 60, no. 8, pp. 4661-4676, August 2014.
[27] A. Pöllänen, “Locally Repairable Codes and Matroid Theory”, bachelor

thesis, Aalto University, arXiv 1512.05325, 2015.

