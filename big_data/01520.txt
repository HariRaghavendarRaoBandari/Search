Optimized Polynomial Evaluation with Semantic Annotations

Daniel Rubio Bonilla Colin W. Glass

HLRS - University of Stuttgart
rubio@hlrs.de / glass@hlrs.de

Jan Kuper

University of Twente
j.kuper@utwente.nl

6
1
0
2

 
r
a

 

M
1
1

 
 
]
L
P
.
s
c
[
 
 

3
v
0
2
5
1
0

.

3
0
6
1
:
v
i
X
r
a

Abstract
In this paper we discuss how semantic annotations can be
used to introduce mathematical algorithmic information of
the underlying imperative code to enable compilers to pro-
duce code transformations that will enable better perfor-
mance. By using this approaches not only good performance
is achieved, but also better programmability, maintainability
and portability across different hardware architectures. To
exemplify this we will use polynomial equations of different
degrees.
Categories and Subject Descriptors B.1.4 [Microprogram
Design Aids]: Languages and compilers
General Terms Programming, Polynomial, Optimization,
Performance
Keywords programming models, polynomial functions,
code optimization

Introduction

1.
Code optimization is the process that tries to improve the
code by making it consume less resources such us CPU cy-
cles, memory, or communication in distributed systems. The
word optimization comes from the root “optimal” (which
comes from the Latin word optimus), meaning that it can-
not be better. But it is very rare that this process can produce
really optimal code. The optimized code can in most cases
be optimal for a given use in a determined hardware sys-
tem. One can often reduce the execution time by making it
consume more memory, but in systems where the memory
space is scare it might be beneﬁcial to code a slower algo-
rithm which reduces memory usage. In summary, in most
cases there is “no size that ﬁts all” code that executes optimal
in all cases. Software developers that write code for generic
systems must adjust their code to perform reasonably well in
most common situations.

The code optimization process can also take big amount
of time, that can be thought as a cost; it is possible that
beyond a certain level of optimization it is not cost effective
to invest more time in improving the execution performance.
Software developer time is not the only price to pay for code
optimization as often the process will lead to source code
that is obfuscated, more difﬁcult to maintain or modify and

reduces the portability across different hardware systems.
Another drawback is that it will also reduce the opportunities
to reuse certain parts of the code.

To deal with all this factors the ideal situation would be
when the source code of the application resembles as close
as possible the mathematical formulation of the algorithm,
leaving the optimization of the code to the compiler. Un-
fortunately current compilers are not able to make the same
level of aggressive transformations on a near to mathematics
code because it is not aware of the intention of the compu-
tation (i.e. what is the ﬁnal result that we want to achieved).
For this reason the optimizations are limited to a small set of
optimizations that guarantee that the computation is correct.
Introducing mathematical information to the compiler
can allow it to perform optimizations at the algorithmic
level, similarly to what a software developer might do, to
better exploit the characteristics of the underlying hardware.
After this step the usual set of current optimizations can be
applied.

In this paper we will show how the C resembling the
formulation of equivalent polynomial functions affects the
execution time and we will discuss how the mathematical
information can be introduced through semantic annotations
into programming models so that it can be exploited by
compilers, allowing them to perform this set of algorithmic
optimizations.

2. Polynomial Representations
In mathematics, a polynomial is an expression consisting of
variables and coefﬁcients that involves only the operations of
addition, subtraction, multiplication and non-negative inte-
ger exponents. Polynomials appear in a wide range of prob-
lem complexity of different areas. In mathematics they are
used in calculus and numerical analysis to approximate to
other functions, or in advanced mathematics they are used
to construct polynomial rings and algebraic varieties, central
concepts in algebra. They are also often used in physics and
chemistry to, for example, describe the trajectory of projec-
tiles, express equations such as the ideal gas law or, polyno-
mial integrals (the sums of many polynomials), can be used
to express energy, inertia and voltage difference, to name
a few applications. Other natural sciences also use poly-
nomial, like the construction of astronomical and meteoro-

PROHA’16, March 12, 2016, Barcelona, Spain

1

2016/3/14

logical models. As polynomials are very useful to express
curves, thus engineers use them to design roads, bridges,
railways lines, and roller coasters. Combinations of polyno-
mial functions can be used in more sophisticated analysis to
retrieve more data, for this, they are applied in the ﬁeld of
economics to do cost analysis.

Mathematical equations can often be expressed under dif-
ferent formulations that are functionally equivalent, but that
if taken directly into code will be executed in a different way,
resulting in a different resource usage of the available hard-
ware. To illustrate this we will present a polynomial equa-
tions and transform its mathematical representation in dif-
ferent steps. The resulting different, but equivalent, func-
tions will be directly coded in C language and then evaluated
against each other.

Let the quartic polynomial function (degree four) be

given by:

culate the corresponding values xi = xi incrementally:

x1 = x, x2 = xx1, x3 = xx2, x4 = xx3

and then deﬁne an improved version of the polynomial func-
tion:

f1(x) = A4x4 + A3x3 + A2x2 + A1x1 + A0

Figure 2 shows this second execution model where the xi

terms are being reused.

f0(x) = A4x4 + A3x3 + A2x2 + A1x1 + A0

In Figure 1 the execution structure, i.e. data/work ﬂow,
of this polynomial function is graphically represented: xi is
represented by a sequence of multiplications with x, starting
from x · x, and the result is multiplied with ai. Then, the
results for every i are added.

Figure 2. Execution model of f1(x)

And Listing 2 shows the source code that represents this
execution model directly, with the extra variable x that
stores the incrementally exponentiation.

Listing 2. f1(x) C implementation

#define A0 ...
...

int polyCalc(int x) {

int res, _x;

res = A0;
res += A1*x;
_x = x*x;
res += A2*_x;
_x *=x;
res += A3*_x;
_x *=x;
res += A4*_x;

return res;

}

But it can still done better. The function can also be
rewritten to further reduce the number of multiplications.
This is the function f2(x) that also speciﬁes an execution
model, given in Figure 3. This model is apparently more
efﬁcient than the previous ones, in the sense that fewer op-
erations are required, although later we will test this empiri-
cally.

f2(x) = (((A4x + A3)x + A2)x + A1)x + A0

And its execution model is expressed graphically in Fig-

ure 3.

Figure 1. Execution model of f0(x)

Listing 1 shows the source code implementation in C that

matches the execution model of the equation f0(x).

Listing 1. f0(x) C implementation

#define A0 ...
...

int polyCalc(int x) {

int res;

res = A4*x*x*x*x + A3*x*x*x + A2*x*x + A1*x +

A0;

return res;

}

However, this execution model is rather inefﬁcient, as it
will be shown in the benchmark section, as the outcomes of
all terms xi are calculated separately. Instead, we may cal-

PROHA’16, March 12, 2016, Barcelona, Spain

2

2016/3/14

Figure 3. Execution model of f2(x)

The direct implementation of f2(x) in C code is shown in

Listing 3.

Listing 3. f2(x) C implementation

#define A0 ...
...

int polyCalc(int x) {

int res;

res = (((A4*x + A3)*x + A2)*x + A1)*x + A0;

return res;

}

As the equivalence of f0(x), f1(x), and f2(x) can be
proven and the correspondence between the function deﬁni-
tions, the execution model and the derived C code is direct,
this also means that the equivalence of the corresponding ex-
ecution model and C code is guaranteed (as long as we do
not care for the numeric differences that can appear due to
the lost precision and rounding of ﬂoating point variables or
cater for possible overﬂows in integer operations when exe-
cuting on CPUs).

3. Code Analysis
The three mathematical-equivalent formulations have a dif-
ferent number of operations to be performed when directly
implemented on C code. The number of operations has a di-
rect impact on the performance on conﬁgurable hardware,
such us FPGAs (Kuper & Wester 2104) but the situation
might be different on CPUs due to their complex behav-
ior and diversity of architectures. The impact of a particu-
lar code is very difﬁcult to predict in the case of superscalar
architectures with out-of-order execution. In this chapter we
will analyze the theoretical number of computations to be
performed for each version and in next chapters we will mea-
sure the performance empirically.

The number of operations can be directly counted from
the mathematical representations or the C code previously
shown for each version. The summary of theoretical oper-
ations is summarized in Table 1. As it can be observed the
number of additions is constant but the number of multipli-
cations has been signiﬁcantly reduced with each new repre-
sentation of the polynomial function.

When generating the binary code that is later going to be
executed on a CPU, compilers do not translate directly the
C instructions but perform a set of generic and architecture-
speciﬁc optimizations that aim to improve the performance

ADDs MULs

f0(x)
f1(x)
f2(x)

4
4
4

10
7
4

Table 1. Computational analysis

over a naive (or direct) code compilation. In this work we
have explored the code generated by GCC and LLVM com-
pilers using aggressive optimizations, -O3, and enabling in-
teger operation re-ordering, -fstrict-overflow. This last
ﬂag allows the compiler to assume strict signed overﬂow
rules. For C and C++ this means that overﬂow when doing
arithmetic with signed numbers is undeﬁned, which means
that the compiler may assume that it does not happen. This
permits various optimizations, for example, the compiler as-
sumes that an expression like i + 10 > i is always true for
signed i. This assumption is only valid if signed overﬂow is
undeﬁned, as the expression is false if i + 10 overﬂows when
using twos complement arithmetic. For our case it means
that the compiler can change, re-order or merge the opera-
tions with signed integers (GCC 4.9.2 ﬂags 2015).

GCC 4.9.2

LLVM 3.6

f1(x)

f2(x)

Version
ADD
MUL

f0(x)

f1(x)

f2(x)

f0(x)

4
7

4
10

4
4
Table 2. Compiler computational analysis with ﬂags -O3
-fstrict-overflow

4
6

4
4

4
6

Table 2 reﬂects the number of multiplications and addi-
tions that were found in the binary code, after examining the
assembler code, generated by GCC and LLVM for different
versions of the C code. If we compare this data with Table 1,
which contains the number of operations explicitly written
in the C code, we can observe that GCC has preserved all
the operations while LLVM has been reduced the amount of
multiplications for f0(x) and f1(x).

For better understanding of the behavior of the compilers
we decided to try the same approaches with larger polyno-
mials, in this case of degree 9. For this we can deﬁne the
polynomial function

g0(x) = A9x9 + ... + A1x1 + A0

and we have produce two equivalent representations,

g1(x) = A9x9 + ... + A1x1 + A0

where

x1 = x, x2 = xx1, ..., x9 = xx8

PROHA’16, March 12, 2016, Barcelona, Spain

3

2016/3/14

and ﬁnally the version with least operations

g2(x) = ((A9x + A8)x + ... + A1)x + A0

We are not listing the C code of g0(x), g1(x) and g2(x)
functions as these are mechanical extensions over the pre-
viously shown for f0(x), f1(x) and f2(x) shown in List-
ings 1, 2 and 3 respectively. The total amount of operations
found in these expressions and their direct C implementation
is given in Table3, where we can observe that the additions
are kept equal but the multiplications can be greatly reduced.

%r9d , %eax
%ecx , %r8d
%edi , %r8d
%edx , %r8d
%edi , %r8d
(%rax ,% r s i ) , %eax
%r8d , %eax

;
;
;
;
;
;
;

i 5
i 6
i 7
i 8
i 9
i 1 0
i 1 1

i m u l l
a d d l
i m u l l
a d d l
i m u l l
l e a l
a d d l
. . .
r e t q

The data dependency between registers and operations

have been graphically depicted in Figure 4.

ADDs MULs

g0(x)
g1(x)
g2(x)

9
9
9

45
17
9

Table 3. Computational analysis

As with the 4th degree polynomial function we analyzed
the binary generated by the compilers. Similarly to the pre-
vious case GCC made a direct implementation of the C code
but LLVM reduced the number of multiplications, interest-
ingly it was able to produce a binary code with less multipli-
cations for g0(x) but for g1(x). But for both compilers the
code with less operations comes from the code of g2(x).

GCC 4.9.2

LLVM 3.6

g0(x)

g1(x)

g2(x)

g0(x)

g1(x)

g2(x)

Version
ADD
MUL

9
17

9
45

9
9
Table 4. Compiler computational analysis with ﬂags -O3
-fstrict-overflow

9
14

9
16

9
9

3.1 LLVM Optimizations
According to Tables 1 and 3 the LLVM compiler is able to
reduce the number of operations on the original implemen-
tation of both polynomial functions f0(x) and g0(x) as well
as of the modiﬁed versions f1(x) and g1(x). In this chapter
we analyze the generated code by LLVM and compare it to
the generated for the code f2(x) and g2(x).
3.1.1 Polynomial Function Degree 4
The assembler generated by LLVM for the code of the im-
plementation of f0(x) is shown in Listing 4.

Listing 4. LLVM ASM for f0(x)

p o l y C a l c :

. . .
i m u l l
movl
i m u l l
i m u l l

%edi , %r8d
%edi , %eax
%eax , %eax
%eax , %eax

;
;
;
;

i 1
i 2
i 3
i 4

Figure 4. Data and operation graph for LLVM’s f0(x) bi-
nary

From the assembler code and the dependency diagram
we can observe that there are two independent execution
branches that merge in the last operation. The left branch
calculates A3x3 + A2x2 + A1x1 and the right branch calcu-
lates A4x4 +A0, adding them together in the last instruction.
The assembler lines i1 and i6 to i9 correspond to the left
branch while the lines i2 to i5 and i10 correspond to the
right branch of the graph.

It is interesting to notice that the maximum path length
of this assembler code is 6 instructions, while f2(x) shows
a continuous hard dependency on the previous calculated
results, making it a single branch of 8 instructions length.
At this point one could inevitable think that LLVM could
be trying to exploit superscalar execution models that could
take advantage of shorter path even when the total amount
of instructions is larger.
3.1.2 Polynomial Function Degree 10
The assembler generated by LLVM for the code of the im-
plementation of g0(x) is shown in Listing 5.

PROHA’16, March 12, 2016, Barcelona, Spain

4

2016/3/14

Listing 5. LLVM ASM for g0(x)

p o l y C a l c :

%edi , %r8d
%edi , %eax
%eax , %eax
%eax , %r11d
%r11d , %r11d
%r11d , %r9d
24(% rsp ) , %r10d
%r11d , %r10d
%edi , %eax
%eax , %eax
32(% rsp ) , %ebx
%eax , %ebx
40(% rsp ) , %eax
%r11d , %r11d
48(% rsp ) , %ebp
%r11d , %ebp
56(% rsp ) , %r11d
%ecx , %r8d
%edi , %r8d
%edx , %r10d
%eax , %r10d
%r11d , %r10d
%r8d , %r10d
%edi , %r10d
(%r9 ,% r s i ) , %eax
%ebx , %eax
%ebp , %eax
%r10d , %eax

i m u l l
movl
i m u l l
movl
i m u l l
i m u l l
movl
i m u l l
i m u l l
i m u l l
movl
i m u l l
i m u l l
i m u l l
movl
i m u l l
i m u l l
a d d l
i m u l l
a d d l
a d d l
a d d l
a d d l
i m u l l
l e a l
a d d l
a d d l
a d d l
. . .
r e t q

As happened with the degree 4 polynomial function, the
binary generated by LLVM for this case, contains more op-
erations than the compilation of g2(x) but in different data-
independent branches instead of a single branch. The g2(x)
branch has a total of 18 operations while the g0(x) LLVM
optimized code longest branch has 12 operations. In the next
section of this work we will evaluate the performance of the
different generated binaries.

4. Benchmarks
Although the analysis of the theoretical computational of the
different equivalent polynomial representations and the bi-
nary code generated by the different compilers is interesting
the most important is to actually run the different binaries
and measure its performance. All the benchmarks were run
on a Intel i7-4770k CPU, based on the Haswell architecture,
with energy saving (sleeping states and throttling disabled)
and core and uncore parts locked at 2 GHz and 2x8 GiB of
DDR3 RAM at 1600 MHz (CL9). As we have the clock of
the CPU completely locked we have just measured the cy-

cles that were needed to execute each polynomial function
(the more cycles needed the slower the code was).

The cycles were obtained by reading the Time Stamp
Counter (TSC). It is a 64-bit register present in most modern
x86 processors that counts the number of cycles since reset
and can be read using the instruction RDTSC that returns
the TSC value in EDX:EAX registers (or RDTSCP that forces
every preceding instruction to be completed in out-of-order
CPUs). In Haswell based CPUs the TSC register increments
at a constant rate set by the maximum resolved frequency
at which the processor is booted, 2 GHz in our case, and is
synchronized across all cores of the CPU (in older CPUs it
was not incrementing constantly but varying with the core’s
actual frequency and values could be different on different
cores).

Table 5 shows the cycles needed to resolve 128 polyno-
mial functions of degree 4 when they were written resem-
bling the formulation of f0(x), f1(x) or f2(x) under LLVM
and GCC compilers. Note that the results were obtained in a
superscalar CPU, it can execute many instructions in a single
cycle, thus the amount of cycles used can be lower than the
total amount of instructions.

GCC 4.9.2

LLVM 3.6

Version
Cycles

f0(x)
1364

f1(x)
1000

f2(x)
852
Table 5. Cycles needed to resolve 128 polynomal functions
of degree 4 – less cycles is better

f0(x)
976

f2(x)
868

f1(x)
960

The results show that the code that resembles f2(x) for-
mulation of the polynomial function performs the best in
both compiler with LLVM being faster by a 1%. LLVM opti-
mizations on f0(x) make the code perform much better that
GCC’s versions, which did not reduce the number of opera-
tions, making it almost as performant as LLVM’s version of
f1(x). This answers the question that was arrisen in the pre-
vious section. In this case, for a Haswell CPU, having two
shorter execution data-independent branches was not faster
than the single and larger fully-dependent branch of f2(x).
GCC produced code that performed proportionally inverse
to the amount of arithmetic instructions, being always slower
than LLVM (with a small margin for f1(x) and in particular
for f2(x)).

Similarly, Table 6 shows the cycles needed to resolve 128
polynomial functions of degree 9 when they were written
resembling the formulation of g0(x), g1(x) or g2(x) under
LLVM and GCC compilers.

In this case the g2(x) version of the code is the fastest
for both compilers, being LLVM almost a 3% faster than
GCC. The binary generated by GCC was faster the further
the number of arithmetic operations were reduced in the
code. This is not the same case for LLVM as g0(x) performs
better than g1(x). Even if the C implementation of g0(x)
has more operations than g1(x), LLVM is able to optimize

PROHA’16, March 12, 2016, Barcelona, Spain

5

2016/3/14

GCC 4.9.2

LLVM 3.6

g0(x)
2012

g1(x)
2184

Version
Cycles

g1(x)
2348

g0(x)
5804

g2(x)
1908
Table 6. Cycles needed to resolve 128 polynomal functions
of degree 9 – less cycles is better

g2(x)
1964

better g0(x) producing a binary with slightly less arithmetic
instrucions, thus performing better. As with the degree 4
polynomial function, for LLVM, g2(x) performs better than
the optimized g0(x). In Haswell based CPU, the multiple-
independent shorter branched g0(x) binary does not perform
as good as the single fully-dependnent branch code of g2(x).
5. Semantic Annotations
The code optimizations needed to move from f0(x) to f1(x)
and ﬁnally to f2(x) are not possible in current compilers be-
cause current programming models do not convey enough
information to enable such transformations without the risk
of violating correctness of behaviour. We can say that com-
pilers are missing information about the intention (in terms
of “semantics”) of the programmer and the structure and
principle behaviour of the program.

For these reasons, projects such as POLCA are currently
researching in providing programming models that convey
sufﬁcient information to meet the following goals (POLCA
2013):
• provide structural (dependencies and operational be-
haviour) and mathematical information,
• enable transformation of the source code,
• allow the toolchain to assess the “appropriateness” of
the algorithm and transformations for speciﬁc hardware
platforms
• and maintain programmability and correctness.
To enable transformations exposed in this work we need
to provide enough information to the compiler so that it “un-
derstand” the mathematical properties of the code running,
by using semantic annotations, and strongly binding them to
the C code so that the later can be correctly manipulated,
reformulating the original implemented algorithm and code
for an equivalent but with better performance.

A proposal of the annotations applied to the code of List-
ing 1 is shown in Listing 6. First the ring prop (Ring
Properties) pragma annotation declares that, for the func-
tion PolyCalc that we assume a number of algebraic laws
to hold: associativity of + and ∗, that 0 and 1 are neutral
elements for + and ∗, that ∗ distributes over + for int
data types. A mathematical ring is one of the fundamen-
tal algebraic structures used in abstract algebra. It consists
of a set equipped with two binary operations that general-
ize the arithmetic operations of addition and multiplication.
Through this generalization, theorems from arithmetic are

extended to non-numerical objects such as polynomials, se-
ries, matrices and functions. A ring is an abelian group with
a second binary operation that is associative, is distributive
over the abelian group operation, and has an identity ele-
ment. By extension from the integers, the abelian group op-
eration is called addition and the second binary operation is
called multiplication (E. Noether 1921)(A. Fraenkel 1914).
In summary, a ring is a set R equipped with binary op-
erations + and · satisfying the following three sets of ax-
ioms, called the ring axioms (Bourbaki 1970) (MacLane &
Birkhoff 1967) (Lang 2002):

1. R is an abelian group under addition, meaning that:

• (a + b) + c = a + (b + c) for all a, b, c in R (+ is
associative).
• a + b = b + a for all a, b in R (+ is commutative).
• There is an element 0 in R such that a + 0 = a for all
a in R (0 is the additive identity).
• For each a in R there exists a in R such that a + (a) =
0 (a is the additive inverse of a).

2. R is a monoid under multiplication, meaning that:

• (a·b)·c = a·(b·c) for all a, b, c in R (· is associative).
• There is an element 1 in R such that a·1 = aand1·a =
a for all a in R (1 is the multiplicative identity).

3. Multiplication is distributive with respect to addition:

• a · (b + c) = (a · b) + (a · c) for all a, b, c in R (left
distributivity).
• (b + c) · a = (b · a) + (c · a) for all a, b, c in R (right
distributivity).

By stating that these mathematical properties apply we
enable the compiler to be able to manipulate the code in-
structions accordingly without taking into consideration pos-
sible side effects that could make the code not valid under
certain conditions (e.g. integer overﬂow).

Then the second pragma annotation, math exp (Math-
ematical Expression), states the mathematical computation
that is performed in the PolyCalc function to which it ap-
plies. In it the terms that appear share the name with the con-
stants are variables used in the code, being the evaluation of
the expression the value of the function itself, i.e. its return
value.

Listing 6. f0(x) implementation with semantic annotations
#define A0 ...
...

#pragma ring_prop (+, 0, -, *, 1) int
#pragma math_exp (A0 + A1*x + A2*x^2 + A3*x^3 +

A4*x^4)

int polyCalc(int x) {

int res;

PROHA’16, March 12, 2016, Barcelona, Spain

6

2016/3/14

References
J. Kuper, R. Wester. N Queens on an FPGA: Mathematics,

Programming, or Both?

GNU GCC 4.9.2 Reference manual
L. Schubert, J. Kuper, J. Gracia. POLCA – A Programming Model

for Large Scale, Strongly Heterogeneous Infrastructures

A. Fraenkel. ¨Uber die Teiler der Null und die Zerlegung von Ringen
E. Noether, Emmy. Idealtheorie in Ringbereichen
Nicolas Bourbaki (1970). Algebra, Chapter 8. Springer-Verlag
Saunders MacLane; Garrett Birkhoff (1967). Algebra. AMS

Chelsea. p. 85

Serge Lang (2002). Algebra (Third ed.). Springer-Verlag. p. 83

res = A4*x*x*x*x + A3*x*x*x + A2*x*x + A1*x +

A0;

return res;

}

By capturing this information, the mathematical expres-
sion and the operators properties, and making the compiler
aware of it, the compiler may decide to transform the body
of the function, modifying the original code resembling the
expression f0(x) into code that resembles f1(x) or f2(x).

6. Conclusions and Future Work
In this paper we have shown, by using polynomial equations,
that mathematical expressions may have different but equiv-
alent formulations and that we can write code that resem-
bles each of these formulations. The different versions of
the code will perform different depending on the compiler
used to generate the binary code and the hardware that will
execute it. We have also discussed that it is possible to manu-
ally search for a good combination of speciﬁc and optimized
code, for an speciﬁc algorithm, and the hardware where it is
going to run. But if later the hardware is changed the per-
formance of the code might be worse that the original not-
optimize code due to speciﬁc hardware optimizations for the
old platform that now ruin performance. For example it has
been shown that the g1(x) code looks more optimal (and
complex) from a theoretical point of view than the original
g0(x), and it behaves better when compiled with GCC, but
the performance decreases if compiled with LLVM.

To address these issues we have proposed the usage of se-
mantic annotations that introduce mathematical information
with the aim to allow the compiler to produce optimize code
beyond current capabilities from a generic clean code. This
will allow to write programs with less bugs, easier to main-
tain and easier to extend, while at the same time increasing
portability. These annotations have to be further tested and
extended to be able to address a wider set of mathematical
expressions and enable their usability in future compilers.

Regarding the polynomial functions, we will extend the
analysis of the performance effects, in terms of time to
completion and energy used, of using ﬂoating point data
types and not only of integers. These effects should also
be measured in other architecture families, such as ARM.
It would also be interesting to determine the effects of even
larger polynomial degrees and introduce further manually
optimize code with independent executable branches trying
to exploit superscalar architectures.

Acknowledgments
This project has received funding from the European Union’s
Seventh Framework Programme under the POLCA project,
Grant number 610686.

PROHA’16, March 12, 2016, Barcelona, Spain

7

2016/3/14

