6
1
0
2

 
r
a

M
1

 

 
 
]

C
C
.
s
c
[
 
 

1
v
4
5
2
0
0

.

3
0
6
1
:
v
i
X
r
a

On the hardness of switching to a small number

of edges

Vít Jelínek1(cid:63), Eva Jelínková2, and Jan Kratochvíl2(cid:63)

1 Computer Science Institute

and

2 Department of Applied Mathematics

Faculty of Mathematics and Physics, Charles University
Malostranské nám. 25, 118 00 Praha, Czech Republic

jelinek@iuuk.mff.cuni.cz, {eva,honza}@kam.mff.cuni.cz

Abstract. Seidel’s switching is a graph operation which makes a given
vertex adjacent to precisely those vertices to which it was non-adjacent
before, while keeping the rest of the graph unchanged. Two graphs are
called switching-equivalent if one can be made isomorphic to the other
one by a sequence of switches.
Jelínková et al. [DMTCS 13, no. 2, 2011] presented a proof that it is
NP-complete to decide if the input graph can be switched to contain at
most a given number of edges. There turns out to be a ﬂaw in their proof.
We present a correct proof.
Furthermore, we prove that the problem remains NP-complete even when
restricted to graphs whose density is bounded from above by an arbitrary
ﬁxed constant. This partially answers a question of Matoušek and Wag-
ner [Discrete Comput. Geom. 52, no. 1, 2014].
Keywords: Seidel’s switching, Computational complexity, Graph den-
sity, Switching-minimal graphs, NP-completeness

1

Introduction

Seidel’s switching is a graph operation which makes a given vertex adjacent to
precisely those vertices to which it was non-adjacent before, while keeping the
rest of the graph unchanged. Two graphs are called switching-equivalent if one
can be made isomorphic to the other one by a sequence of switches. The class
of graphs that are pairwise switching-equivalent is called a switching class.

Hage in his PhD thesis [4, p. 115, Problem 8.5] posed the problem to charac-
terize the graphs that have the maximum (or minimum) number of edges in their
switching class. We call such graphs switching-maximal and switching-minimal,
respectively.

Some properties of switching-maximal graphs were studied by Kozerenko [7].
He proved that any graph with suﬃciently large minimum degree is switching-
maximal, and that the join of certain graphs is switching-maximal. Further, he

(cid:63) Supported by CE-ITI project GACR P202/12/G061.

2

V. Jelínek, E. Jelínková, and J. Kratochvíl

gave a characterization of triangle-free switching-maximal graphs and of non-
hamiltonian switching-maximal graphs.

It is easy to observe that a graph is switching-maximal if and only if its
complement is switching-minimal. We call the problem to decide if a graph is
switching-minimal Switch-Minimal.

Jelínková et al. [6] studied the more general problem Switch-Few-Edges –
the problem of deciding if a graph can be switched to contain at most a certain
number of edges. They presented a proof that the problem is NP-complete.
Unfortunately, their proof is not correct. Speciﬁcally, Lemma 4.3 of [6], which
claims to establish a reduction from the classical Max-Cut problem to Switch-
Few-Edges, is false. The claim of the lemma fails, e. g., on a graph G formed
by two disjoint cliques of the same size.

In this paper, we provide a diﬀerent proof of the NP-hardness of Switch-
Few-Edges, based on a reduction from a restricted version of Max-Cut. Fur-
thermore, we strengthen this result by proving that for any c > 0, Switch-Few-
Edges is NP-complete even if we require that the input graph has density at
most c. We also prove that if the problem Switch-Minimal is co-NP-complete,
then for any c > 0, the problem is co-NP-complete even on graphs with density
at most c.

We thus partially answer a question of Matoušek and Wagner [10] posed
in connection with properties of simplicial complexes – they asked if deciding
switching-minimality was easy for graphs of bounded density. Our results also
indicate that it might be unlikely to get an easy characterization of switching-
minimal (or switching-maximal) graphs, which contributes to understanding
Hage’s question [4].

1.1 Formal deﬁnitions and previous results

Let G be a graph. Then the Seidel’s switch of a vertex subset A ⊆ V (G) is
denoted by S(G, A) and is deﬁned by

S(G, A) = (V (G), E(G) (cid:52) {xy : x ∈ A, y ∈ V (G) \ A}).

It is the graph obtained from G by consecutive switching of the vertices of A.
We say that two graphs G and H are switching-equivalent (denoted by G ∼
H) if there is a set A ⊆ V (G) such that S(G, A) is isomorphic to H. The set
[G] = {S(G, A) : A ⊆ V (G)} is called the switching class of G.
We say that a graph G is (≤ k)-switchable if there is a set A ⊆ V (G) such that
S(G, A) contains at most k edges. Analogously, a graph G is (≥ k)-switchable if
there is a set A ⊆ V (G) such that S(G, A) contains at least k edges.
It is easy to observe that a graph G is (≤ k)-switchable if and only if the
2(cid:1) − k(cid:1)-switchable. We may, therefore, focus on (≤ k)-
complement G is (cid:0)≥(cid:0)n

switchability only.

We examine the following problems.

On the hardness of switching to a small number of edges

3

Switch-Few-Edges
Input: A graph G = (V, E), an integer k
Question: Is G (≤ k)-switchable?
Switch-Minimal
Input: A graph G = (V, E)
Question: Is G switching-minimal?

We say that a graph is switching-reducible if G is not switching-minimal,
in other words, if there is a set A ⊆ V (G) such that S(G, A) contains fewer
edges than G. For further convenience, we also deﬁne the problem Switch-
Reducible.
Switch-Reducible
Input: A graph G = (V, E)
Question: Is G switching-reducible?

Let G = (V, E) be a graph. We say that a partition V1, V2 of V is a cut of
G. For a cut V1, V2, the set of edges that have exactly one end-vertex in V1 is
denoted by cutset(V1), and the edges of cutset(V1) are called cut-edges. When
there is no danger of confusion, we also say that a single subset V1 ⊆ V is a cut
(meaning the partition V1, V \ V1).
1.2 Easy cases

In this subsection we present several results about easy special cases of the
problems that we focus on. This complements our hardness results.

The following theorem was proved by Ehrenfeucht et al. [2] and also inde-

pendently (in a slightly weaker form) by Kratochvíl [8].
Theorem 1. Let P be a graph property that can be decided in time O(na) for
an integer a. Let every graph with P contain a vertex of degree at most d(n).
Then the problem if an input graph is switching-equivalent to a graph with P can
be decided in time O(nd(n)+1+max(a,2)).

The proof of Theorem 1 also gives an algorithm that works in the given time.
Hence, it also provides an algorithm for Switch-Few-Edges: in a graph with
at most k edges all vertex degrees are bounded by k. Hence, we can use d(n) = k
and a = 2 and get an O(nk+3)-time algorithm. It was further proved by Jelínková
et al. [6] that Switch-Few-Edges is ﬁxed-parameter tractable; it has a kernel
with 2k vertices, and there is an algorithm running in time O(2.148k · n + m),
where m is the number of edges of the input graph. In Section 2, we provide a
corrected NP-completeness proof.

The following proposition states a basic relation of switching-minimality and

graph degrees.

Proposition 1 (folklore). Every switching-minimal graph G = (V, E) on n
vertices has maximum degree at most (cid:98)(n − 1)/2(cid:99).

4

V. Jelínek, E. Jelínková, and J. Kratochvíl

Proof. Clearly, if G contains a vertex v of degree greater than (cid:98)(n − 1)/2(cid:99), then
S(G,{v}) has fewer edges than G, showing that G is not switching-minimal. (cid:117)(cid:116)
We remark that for a given graph G we can eﬃciently construct a switch
whose maximum degree is at most (cid:98)(n − 1)/2(cid:99); one by one, we switch vertices
whose degree exceeds this bound (in this way, the number of edges is decreased in
each step). However, the graph constructed by this procedure is not necessarily
switching-minimal.

Let e(A) denote the number of edges whose one vertex is in A and the other
one in V (G) \ A. The next proposition is an equivalent formulation of Lemma
2.5 of Kozerenko [7], strengthening Proposition 1.
Proposition 2. A graph G is switching-minimal if and only if for every A ⊆
V (G), we have

We derive the following consequence.

2e(A) ≤ |A|(|V (G)| − |A|).

4 , then G is switching-minimal.

Proposition 3. Let G be a graph with n vertices. If the maximum vertex degree
in G is at most n
Proof. Let A be any subset of V (G). We observe that e(A) = e(V (G)\ A); hence
we can assume without loss of generality that |A| ≤ n/2, and thus |V (G)|−|A| ≥
n/2.
Further, as e(A) ≤(cid:80)v∈A deg(v), we have that e(A) ≤ |A| n
4 . Hence, 2e(A) ≤
|A|(|V (G)| − |A|), and the condition of Proposition 2 is fulﬁlled.
(cid:117)(cid:116)
Proposition 3 implies that Switch-Few-Edges and Switch-Minimal are
trivially solvable in polynomial time for graphs on n vertices with maximum
degree at most n
4 .

We note that in Proposition 3, the bound n

4 in general cannot be improved,
4 .
as shown by the example of a k-regular bipartite graph on n vertices with k > n
2 − k)-regular bipartite graph, and
Such a graph is switching-equivalent to a ( n
therefore is not switching-minimal.

2 NP-Completeness of Switch-Few-Edges
Jelínková et al. [6] presented a proof that the problem Switch-Few-Edges is
NP-complete. Unfortunately, there is an error in their proof. We present another
proof here. The core of the original proof is a reduction from the Max-Cut
problem. Our reduction works in a similar way. However, we need the following
more special version of Max-Cut (we prove the NP-completeness of Large-
Deg-Max-Cut in Section 3).
Large-Deg-Max-Cut
Input: A graph G with 2n vertices such that the minimum vertex degree of G
is 2n − 4 and the complement of G does not contain triangles; an integer j
Question: Does there exist a cut V1 of V (G) with at least j cut-edges?

On the hardness of switching to a small number of edges

5

16j edges.

Proposition 4. Let G be a graph. In polynomial time, we can ﬁnd a graph G(cid:48)
such that |V (G(cid:48))| = 4|V (G)| and the following statements are equivalent for
every integer j:
(a) There is a cut in G with at least j cut-edges,
(b) there exists a set A ⊆ V (G(cid:48)) such that S(G(cid:48), A) contains at most |E(G(cid:48))| −
Proof. We ﬁrst describe the construction of the graph G(cid:48). For each vertex u of G
we create a corresponding four-tuple {u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48)} of pairwise non-adjacent
vertices in G(cid:48). An edge of G is then represented by a complete bipartite graph
interconnecting the two four-tuples, and a non-edge in G is represented by 8
edges that form a cycle that alternates between the two four-tuples (see Fig. 1).
We remark that our construction of G(cid:48) follows a similar idea as the construc-
tion in the attempted proof of Jelínková et al. [6], a notable diﬀerence being that
in the original construction, a vertex of G was replaced by a pair of vertices of
G(cid:48) rather than a four-tuple.

Fig. 1. The representation of non-edges and edges of G.

A vertex four-tuple in G(cid:48) corresponding to a vertex of G is called an o-vertex.
A pair of o-vertices corresponding to an edge of G is called an o-edge and a pair
of o-vertices corresponding to an non-edge of G is called an o-non-edge. Where
there is no danger of confusion, we identify o-vertices with vertices of G, o-edges
with edges of G and o-non-edges with non-edges of G.

We now prove that the statements (a) and (b) are equivalent. First assume
that there is a cut V1 of V (G) with j(cid:48) cut-edges. Let V (cid:48)1 be the set of vertices
u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48) for all u ∈ V1. We prove that S(G(cid:48), V (cid:48)1 ) contains at most |E(G(cid:48))|−
16j(cid:48) edges.
We say that a non-edge crosses the cut V1 if the non-edge has exactly one
vertex in V1. It is clear that G(cid:48) contains 16 edges per every o-edge and 8 edges
per every o-non-edge. In S(G(cid:48), V (cid:48)1 ), every o-edge corresponding to an edge that is
not a cut-edge is unchanged by the switch and yields 16 edges. Similarly, every
o-non-edge corresponding to a non-edge that does not cross the cut yields 8
edges.

Fig. 2 illustrates the switches of o-non-edges and o-edges that have exactly
one end-o-vertex in V1. We can see that every o-non-edge corresponding to a
non-edge that crosses the cut yields 8 edges in S(G(cid:48), V (cid:48)1 ), and that every o-edge
corresponding to a cut-edge yields 0 edges. Altogether, S(G(cid:48), V (cid:48)1 ) has |E(G(cid:48))| −
16j(cid:48) edges, which we wanted to prove.

u′u′′u′′′u′′′′v′v′′v′′′v′′′′u′u′′u′′′u′′′′v′v′′v′′′v′′′′6

V. Jelínek, E. Jelínková, and J. Kratochvíl

Fig. 2. Switches of an o-non-edge and of an o-edge.

Now assume that there exists a set A ⊆ V (G(cid:48)) such that S(G(cid:48), A) contains at
most |E(G(cid:48))| − 16j edges. We want to ﬁnd a cut in G with at least j cut-edges.
We say that an o-vertex u of G(cid:48) is broken in A if A contains exactly one,
two or three vertices out of u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48); otherwise, we say that u is legal in
A. We say that an o-edge or o-non-edge {u, v} is broken in A if at least one of
the o-vertices u, v is broken. Otherwise, we say that {u, v} is legal in A.
If all vertices of G are legal in A, we say that A is legal. Legality is a desired
property, because for a legal set A we can deﬁne a subset VA of V (G) such that

VA = {u ∈ V (G) : {u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48)} ⊆ A} .

The set VA then deﬁnes a cut in G. If a set is not legal, we proceed more carefully
to get a cut from it. For any vertex subset A, we say that a set A(cid:48) is a legalization
of A if A(cid:48) is legal and if A(cid:48) and A diﬀer only on o-vertices that are broken in A.
We want to show that for every illegal set A, there exists its legalization A(cid:48)
such that the number of edges in S(G(cid:48), A(cid:48)) is not much higher than in S(G(cid:48), A).
To this end, we give the Algorithm Legalize which for a set A ﬁnds such a
legalization A(cid:48). During the run of the Algorithm, we keep a set A(cid:48)(cid:48). In the
beginning we set A(cid:48)(cid:48) := A and in each step we change A(cid:48)(cid:48) so that more o-vertices
are legal.

We deﬁne some notions needed in the Algorithm. Let v be an o-vertex and
consider the o-vertices that are adjacent to v (through an o-edge); we call them
o-neighbors of v. The o-neighbors of v are four-tuples of vertices and some of
those vertices are in A(cid:48)(cid:48), some of them are not. We deﬁne dif(v) as the number
of such vertices that are in A(cid:48)(cid:48) minus the number of such vertices that are not
in A(cid:48)(cid:48). (Note that dif(v) is always an even number, because the total number of
vertices in o-neighbors is even. If all o-neighbors were legal, then dif(v) would
be divisible by four.)

The Algorithm is given in Fig. 3. As in the last step the Algorithm legalizes all
remaining broken o-vertices, it is clear that the set A(cid:48)(cid:48) output by the Algorithm
is a legalization of A. We prove that |E(S(G(cid:48), A(cid:48)(cid:48)))| − |E(S(G(cid:48), A))| ≤ 7.
We need to introduce more terminology. A pair of vertices of G(cid:48) which belong
to the same o-vertex is called a v-pair. A pair of vertices of G(cid:48) which belong to
diﬀerent o-vertices that are adjacent (in G) is called an e-pair. A pair of vertices
of G(cid:48) which belong to diﬀerent o-vertices that are non-adjacent (in G) is called
an n-pair. It is easy to see that any edge of G(cid:48) or S(G(cid:48), A(cid:48)(cid:48)) is either a v-pair, an
e-pair or an n-pair. We call such edges v-edges, e-edges and n-edges, respectively.

8edges0edges8edges16edgesOn the hardness of switching to a small number of edges

7

Algorithm Legalize(A)
Set A(cid:48)(cid:48) := A; do the following while any of the cases applies.
Case 1. There exists a broken o-vertex v such that |dif(v)| ≥ 4. If dif(v) ≥ 4, set

Case 2. Case 1 does not apply and there exists an asymmetric broken vertex v such
:=

A(cid:48)(cid:48) := A(cid:48)(cid:48) \ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}. Otherwise, set A(cid:48)(cid:48) := A(cid:48)(cid:48) ∪ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}.
that v contains exactly one vertex from A(cid:48)(cid:48) and dif(v) = 2. Set A(cid:48)(cid:48)
A(cid:48)(cid:48) \ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}.
Case 3. Case 1 does not apply and there exists an asymmetric broken vertex v such
that v contains exactly three vertices from A(cid:48)(cid:48) and dif(v) = −2. Set A(cid:48)(cid:48) :=
A(cid:48)(cid:48) ∪ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}.

Case 4. None of Cases 1, 2, 3 applies and there exist two adjacent broken o-vertices

u and v. Set

A1 := (A

A2 := (A

(cid:48)

(cid:48)(cid:48) ∪ {u
(cid:48)(cid:48) ∪ {v
(cid:48)

(cid:48)(cid:48)

(cid:48)(cid:48)(cid:48)

, u
(cid:48)(cid:48)

, v

, u
(cid:48)(cid:48)(cid:48)

, v

(cid:48)

(cid:48)(cid:48)(cid:48)(cid:48)}) \ {v
, u
(cid:48)(cid:48)(cid:48)(cid:48)}) \ {u
(cid:48)

, v

, v
(cid:48)(cid:48)

, u

(cid:48)(cid:48)

(cid:48)(cid:48)(cid:48)

, v

, v

(cid:48)(cid:48)(cid:48)

, u

, u

(cid:48)(cid:48)(cid:48)(cid:48)},
(cid:48)(cid:48)(cid:48)(cid:48)}.

If |E(S(G(cid:48), A1))| < |E(S(G(cid:48), A2))| then set A(cid:48)(cid:48) := A1, otherwise A(cid:48)(cid:48) := A2.
Case 5. None of the above cases applies. Then legalize the remaining broken o-
vertices arbitrarily, output A(cid:48)(cid:48) and STOP.

Fig. 3. The Algorithm Legalize.

We say that a broken o-vertex v is asymmetric if it contains an odd number
of vertices of A(cid:48)(cid:48); we say that a broken o-vertex is symmetric if it contains two
vertices out of A(cid:48)(cid:48).

To measure how the number of edges of S(G(cid:48), A(cid:48)(cid:48)) changes during the run of
the Algorithm, we deﬁne a variable c(A(cid:48)(cid:48)) which we call the charge of the graph
S(G(cid:48), A(cid:48)(cid:48)). Before the ﬁrst step we set c(A(cid:48)(cid:48)) := |E(S(G(cid:48), A))|. After a step of
the Algorithm, we update c(A(cid:48)(cid:48)) in the following way.

– For every v-pair or e-pair that was an edge of S(G(cid:48), A(cid:48)(cid:48)) before the step and
is no longer an edge of S(G(cid:48), A(cid:48)(cid:48)) after the step, we decrease c(A(cid:48)(cid:48)) by one.
– For every v-pair or e-pair that was not an edge of S(G(cid:48), A(cid:48)(cid:48)) before the step
and that has become an edge of S(G(cid:48), A(cid:48)(cid:48)) after the step, we increase c(A(cid:48)(cid:48))
by one.

– For every o-vertex v that was legalized in the step and is incident to an

o-non-edge, we change c(A(cid:48)(cid:48)) in the following way:
• if v is symmetric, we increase c(A(cid:48)(cid:48)) by 2.5 for every o-non-edge incident
to v;
• if v is asymmetric, we increase c(A(cid:48)(cid:48)) by 1.5 for every o-non-edge incident
to v.

To explain the last two points, we observe how the number of n-edges in-
creases after legalizing an o-vertex. By analyzing all cases of o-non-edges with
one or two broken end-o-vertices (see Fig. 4), we get that there are four cases
where the o-non-edges have less than 8 n-edges before legalization: either 6 or

8

V. Jelínek, E. Jelínková, and J. Kratochvíl

Fig. 4. All possible illegal switches of o-non-edges (up to symmetry). Vertices of A are
marked in white and edges are as in G (left to the arrow) and as in S(G(cid:48), A) (right to
the arrow). In the highlighted cases, the number of n-edges in S(G(cid:48), A) is lower than 8.

8n-edges8n-edges8n-edges8n-edges10n-edges6n-edges12n-edges8n-edges4n-edges10n-edges6n-edges8n-edges12n-edges8n-edges8n-edges4n-edgesOn the hardness of switching to a small number of edges

9

4 n-edges. In these cases, both end-o-vertices are broken. If there are only 4
n-edges, at least one of the end-o-vertices is symmetric. After one end-o-vertex
is legalized, the number of n-edges increases by 2 or 4. When the second end-o-
vertex is legalized, the number of n-edges does not increase for this particular
o-non-edge.

After both end-o-vertices are legalized, the charge has been changed in the
following way: if both end-o-vertices were symmetric, we have increased the
charge by 5. If one of them was symmetric and the other one was asymmetric,
we have increased the charge by 4. Finally, if both were asymmetric, we have
increased the charge by 3. In all these cases, the increase is an upper bound on
the number of contributed n-edges.

Further, every v-edge or e-edge that has appeared or disappeared during
the run of the Algorithm is counted immediately after the corresponding step.
Hence, we have proved the following Claim.
Claim 1 At the end of the Algorithm we have that c(A(cid:48)(cid:48)) ≥ |E(S(G(cid:48), A(cid:48)(cid:48)))|.

Next, we give an upper bound on the charge c(A(cid:48)(cid:48)).

Claim 2 After every step of the Algorithm except for the last one, the charge
c(A(cid:48)(cid:48)) is decreased. After the last step, the charge is increased by at most 7.
Hence, c(A(cid:48)(cid:48)) ≤ |E(S(G(cid:48), A))| + 7.

To prove Claim 2, we count how the charge changes after each step of the
Algorithm Legalize. We distinguish cases according to which the step was done.
Case 1. We may assume without loss of generality that dif(v) ≥ 4 (otherwise we
swap the roles of A(cid:48)(cid:48) and V (G(cid:48))\ A(cid:48)(cid:48). Further, v can be either symmetric
or asymmetric; we ﬁrst assume that v is symmetric (see Fig. 5). Then
by its legalization the number of v-edges is decreased by 4.
As dif(v) ≥ 4, then among vertices in o-neighbors of v, there must be
at least four more vertices belonging to A(cid:48)(cid:48) than those not belonging
to A(cid:48)(cid:48). Thus, by removing any vertex of {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)} from A(cid:48)(cid:48) we
reduce the number of e-edges by at least 4. As v contains two vertices
out of {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}, we reduce the number of e-edges by at least 8.
For n-pairs that have one vertex inside v the charge is increased by at
most 3 · 2.5, which is 7.5. To sum it up:
– For v-pairs the charge is decreased by 4,
– for e-pairs the charge is decreased by at least 8,
– for n-pairs the the charge is increased by at most 7.5.
Altogether, the charge is decreased by at least 4.5.
If the o-vertex v is asymmetric, then in an analogical way we have
that for v-pairs the charge is decreased by 3, for e-pairs the charge is
decreased by at least 4, and for n-pairs the the charge is increased by
at most 4.5. Altogether, the charge is decreased by at least 2.5.

Case 2. The analysis is similar as above. We get −3 for v-pairs, −2 for e-pairs,
and ≤ 4.5 for n-pairs. Altogether, the charge is decreased by at least
0.5.

10

V. Jelínek, E. Jelínková, and J. Kratochvíl

Fig. 5. A simpliﬁed illustration to the analysis of Case 1. Vertices of A(cid:48)(cid:48) are marked in
white, and edges are as in S(G(cid:48), A(cid:48)(cid:48)) before the step (left to the arrow) and after the
step (right to the arrow).

Fig. 6. A simpliﬁed illustration to the analysis of Case 4, I. Vertices of A(cid:48)(cid:48) are marked
in white, and edges are as in S(G(cid:48), A(cid:48)(cid:48)) before the step (left to the arrow) and after the
step (right to the arrow).

Case 3. This case is symmetric to Case 2. Hence, the charge is decreased by at

least 0.5 as well.

Case 4. In this case, when counting how the charge was changed because of e-
pairs, we need to bound both the number of e-edges between a vertex in
u and a vertex in v, and the number of e-edges between a vertex inside
u or v and a vertex inside one of their other o-neighbors. This depends
also on the values of dif(u) and dif(v).
We analyze four subcases of o-edges whose both end-o-vertices are bro-
ken – they are numbered as in Fig. 7.

I. First assume that dif(u) = 0 and dif(v) = 0 (see Fig. 6). We
can see that vertices inside v contribute by −2 to dif(u). Hence,
outside v, there must be two more vertices in o-neighbors of u that
are in A(cid:48)(cid:48) than those not in A(cid:48)(cid:48). The same holds symmetrically for
o-neighbors of v outside u.
We may without loss of generality assume that the Algorithm
chose to set

A(cid:48)(cid:48) := (A(cid:48)(cid:48) ∪ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}) \ {u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48)}.

Then, the number of e-pairs adjacent to both u and v is decreased
by 10; the number of e-pairs adjacent to u and not to v is decreased
by 2, and the number of e-pairs adjacent to v and not to u is

dif(v)=4legalizingv−8e-edgesv′,v′′,v′′′,v′′′′dif(u)=0dif(v)=0legalizingu,v−6e-edgesu′,u′′u′′′,u′′′′v′,v′′v′′′,v′′′′On the hardness of switching to a small number of edges

11

Fig. 7. All possible illegal switches of o-edges (up to symmetry). Vertices of A are
marked in white and edges are as in G (left to the arrow) and as in S(G(cid:48), A) (right to
the arrow). In the highlighted cases, both end-o-vertices are broken.

increased by 6. Altogether, the charge is decreased by 6 for e-
pairs.
For v-pairs, the charge is decreased by 6, and for n-pairs, the
charge is increased by at most 6 · 1.5. Altogether, the charge is
decreased by at least 3.
It remains to analyze the cases when dif(u) and dif(v) are diﬀer-
ent. As neither Case 2 nor Case 3 applies, we know that none of
dif(u), dif(v) is equal to 2.
By analogical ideas as above, we get that if one of dif(u), dif(v)
is equal to 0 and the other one to −2, the charge is decreased by
at least 9. If both dif(u), dif(v) are equal to −2, then the charge
is decreased by at least 7.
II. As u is asymmetric and v is symmetric, we have that for n-pairs
the charge is increased by 3· 2.5 + 3· 1.5, which is 12. For v-pairs,
the charge is decreased by 3 + 4, which is 7.
We consider the case when the Algorithm chose to set
A(cid:48)(cid:48) := A(cid:48)(cid:48) ∪ {u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48)} \ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}

(if we get a suﬃcient bound for this case, then the other case could
only be better).
To count the decrease for e-pairs, we need to consider the values
of dif(u) and dif(v). Assume that dif(u) = 0. Then, outside v,
there must be the same number of vertices in o-neighbors of u
that are in A(cid:48)(cid:48) as those that are not in A(cid:48)(cid:48).
If dif(v) = 0, then outside u there must be two more vertices in
o-neighbors of v that are in A(cid:48)(cid:48) than those not in A(cid:48)(cid:48). Then for

12e-edges10e-edges8e-edges6e-edges8e-edges8e-edges4e-edgescaseI.caseII.caseIII.caseIV.12

V. Jelínek, E. Jelínková, and J. Kratochvíl

e-pairs, the charge is decreased by 12. If dif(v) = 2, then using
analogous ideas we get that for e-pairs, the charge is decreased by
16. If dif(v) = −2, we get 8.
Now assume that dif(u) = −2. By considering the number of
vertices in o-neighbors of u and v, we get that the charge decrease
for e-pairs is either 14 (if dif(v) = −2) or 18 (if dif(v) = 0) or 22
(if dif(v) = 2).
As Case 2 does not apply, we know that dif(u) is not equal to 2.
Hence, we have considered all the cases, and the charge decrease
for e-pairs is at least 8. Altogether, the charge is decreased by at
least −12 + 7 + 8, which is 3.
III. As both u and v are asymmetric, we have that for n-pairs the
charge is increased by 6 · 1.5, which is 9. For v-pairs, the charge
is decreased by 3 + 3, which is 6.
Again, we consider the case when the Algorithm chose to set

A(cid:48)(cid:48) := A(cid:48)(cid:48) ∪ {u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48)} \ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}.

By using the same idea as above, we get that for e-pairs, the
charge is decreased by 18 (if dif(u) = 0 and dif(v) = 0), or by 24
(if dif(u) = −2 and dif(v) = 0, or if dif(u) = 0 and dif(v) = 2),
or by 30 (if dif(u) = −2 and dif(v) = 2).
As Case 2 does not apply, we know that dif(u) cannot be 2 and
dif(v) cannot be −2. Hence, we have considered all the cases and
for e-pairs, the charge is decreased by at least 18. Altogether, the
charge is decreased by at least −9 + 6 + 18, which is 15.
IV. As both u and v are symmetric, we have that for n-pairs the
charge is increased by 6 · 2.5, which is 15. For v-pairs, the charge
is decreased by 4 + 4, which is 8.
Without loss of generality, we consider only cases when dif(u) ≤
dif(v) (the other cases are symmetric). Thus, we may limit our-
selves again to the case when the Algorithm chose to set
A(cid:48)(cid:48) := A(cid:48)(cid:48) ∪ {u(cid:48), u(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48), u(cid:48)(cid:48)(cid:48)(cid:48)} \ {v(cid:48), v(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48), v(cid:48)(cid:48)(cid:48)(cid:48)}.

If dif(u) = dif(v), then we easily check that the charge decrease
for e-pairs is 8. If dif(u) = 0 and dif(v) = 2 then the charge
decrease for e-pairs is 12. If dif(u) = −2 and dif(v) = 0 then the
decrease is 12, and if dif(u) = −2 and dif(v) = 2 then the decrease
is 16.
Altogether, the charge decrease for e-pairs is at least 8, and the
total decrease is at least −15 + 8 + 8, which is 1.

Case 5. If Case 5 applies, then all remaining broken o-vertices must be pairwise
non-adjacent (because Case 4 does not apply). Hence, there must be
at most two broken o-vertices left (otherwise, there would be a trian-
gle in the complement of the input graph, which would contradict the
assumptions). Further, each of these o-vertices has dif = 0, because all

On the hardness of switching to a small number of edges

13

its o-neighbors are legal and Case 1 does not apply. Thus, the charge
change for e-pairs due to this last step is 0.
To count the charge change for n-pairs and v-pairs, we analyze the ﬁve
cases (one or two o-vertices, symmetric or asymmetric). If there is one
symmetric o-vertex left, then the charge increase for n-pairs is 3 · 2.5
and the decrease for v-pairs is 4, hence the total increase is 7.5 − 4,
which is 3.5. If there is one asymmetric o-vertex, then the total increase
is 3 · 1.5 − 3, which is 1.5.
If there are two broken o-vertices left and both are asymmetric, then
the total increase is 6 · 1.5 − 6, which is 3. If one of them is symmetric
and the other one is asymmetric we get 5; if both are symmetric, we
get 7. Altogether, we get that the charge is increased by at most 7.

We have proved Claim 2. Further, by Claim 1 and Claim 2 we have that
|E(S(G(cid:48), A(cid:48)(cid:48)))| ≤ |E(S(G(cid:48), A))| + 7, and hence A(cid:48)(cid:48) is the sought legalization of
A.
We continue the proof of Proposition 4. We have already argued that a le-
gal set A(cid:48)(cid:48) deﬁnes a subset VA(cid:48)(cid:48) of V (G), and hence a cut in G. Assume that
cutset(VA(cid:48)(cid:48) ) has j(cid:48) edges. From the proof of the ﬁrst implication of Proposition 4
we know that the number of edges in S(G(cid:48), A(cid:48)(cid:48)) can be expressed as |E(G(cid:48))|−16j(cid:48).
On the other hand, we have proved that the number of edges in S(G(cid:48), A(cid:48)(cid:48)) is
at most |E(G(cid:48))| − 16j + 7. We get that |E(G(cid:48))| − 16j(cid:48) ≤ |E(G(cid:48))| − 16j + 7, and
hence j(cid:48) ≥ j − 7/16. As both j and j(cid:48) are integers, we have that j(cid:48) ≥ j. Hence,
cutset(VA(cid:48)(cid:48) ) has at least j edges, and Proposition 4 is proved.
(cid:117)(cid:116)
Theorem 2. Switch-Few-Edges is NP-complete.

Proof. Theorem 3 in the next section gives the NP-completeness of Large-
Deg-Max-Cut. Further, by Proposition 4, an instance (G, j) of Large-Deg-
Max-Cut can be transformed into an instance (G(cid:48), j(cid:48)) of Switch-Few-Edges
such that there is a cut in G with at least j cut-edges if and only if G(cid:48) is (≤ j(cid:48))-
switchable. The transformation works in polynomial time.
(cid:117)(cid:116)

Finally, it is clear that the problem Switch-Few-Edges is in NP.

3 The NP-Completeness of Large-Deg-Max-Cut

Let G be a graph with 2n vertices. A bisection of G is a partition S1, S2 of V (G)
such that |S1| = |S2| = n (hence, a bisection is a special case of a cut). The size
of cutset(S1) is called the size of the bisection S1, S2. A minimum bisection of
G is a bisection of G with minimum size.

Garey et al. [3] proved that, given a graph G and an integer b, the problem
to decide if G has a bisection of size at most b is NP-complete (by a reduction of
Max-Cut). Their formulation is slightly diﬀerent from ours – two distinguished
vertices must be each in one part of the partition, and the input graph does not
have to be connected. However, their reduction from Max-Cut (see [3, pages
242–243]) produces only connected graphs as instances of the bisection problem,

14

V. Jelínek, E. Jelínková, and J. Kratochvíl

and it is immediate that the two distinguished vertices are not important in the
proof. Hence, their proof gives also the NP-completeness of the following version
of the problem.
Connected-Min-Bisection
Input: A connected graph G with 2n vertices, an integer b
Question: Is there a bisection S1, S2 of V (G) such that cutset(S1) contains
at most b edges?

From the NP-completeness of Min-Bisection, Bui et al. [1] proved the NP-
completeness of Min-Bisection restricted to 3-regular graphs (as a part of a
more general result, see [1, proof of Theorem 2]). We use their result to prove
the NP-completeness of Large-Deg-Max-Cut.
Large-Deg-Max-Cut
Input: A graph G with 2n vertices such that the minimum vertex degree of G
is 2n− 4 and the complement of G is connected and does not contain triangles;
an integer j
Question: Does there exist a cut V1 of G with at least j cut-edges?

Lemma 1. Let G be a connected 3-regular graph on 2n vertices. Let b be the
size of the minimum bisection in G and let c be the size of the maximum cut
in G. Then b = n2 − c.
Proof. Let S1, S2 be a minimum bisection in G and let b be the size of the
bisection. In G, the partition S1, S2 yields a cut with n2 − b cut-edges. Hence,
c ≥ n2 − b.
On the other hand, let V1, V2 be a maximum cut in G for which the sizes
of V1 and V2 are as close as possible. If |V1| = |V2| = n, the partition |V1|, |V2|
gives a bisection in G of size n2 − c, hence b ≤ n2 − c and we are done.
Otherwise, assume that |V1| = n − k and |V2| = n + k for a k ≥ 1. As the
graph G is connected, there is a vertex v in V2 that has at least one neighbor in
V1. We set V (cid:48)1 = V1 ∪ {v} and V (cid:48)2 = V2 \ {v}.
The vertex v has at least one neighbor in V1. Hence, in G, there is at least
one edge between v and V1, and in G, there are at most n − k − 1 cut-edges
adjacent to v.
Further, v has at most two neighbors in V2 and at least n+k−3 non-neighbors
in V2. Hence, in the partition V (cid:48)1, V (cid:48)2, there will be at least n + k − 3 cut-edges
adjacent to v. Cut edges that are not adjacent to v are the same in V1, V2 as in
V (cid:48)1, V (cid:48)2.

Altogether, |cutset(V (cid:48)1 )|−|cutset(V1)| ≥ n + k − 3− (n− k − 1) ≥ 2k − 2 ≥ 0.
Hence, the partition V (cid:48)1, V (cid:48)2 has smaller diﬀerence of the sizes of the two parts
while the size of the cut is not smaller, which is a contradiction with the choice
of V1, V2.
(cid:117)(cid:116)

Theorem 3. Large-Deg-Max-Cut is NP-complete.

On the hardness of switching to a small number of edges

15

Proof. Let (G, b) be an instance of Connected-Min-Bisection. We use the
construction of Bui et al. [1, proof of Theorem 2]. Their ﬁrst step is to construct
from an instance (G, b) of Min-Bisection a 3-regular graph G∗ such that G
has a minimum bisection of size b if and only if G∗ has a minimum bisection
of size b. Further, it is immediate from their construction that G∗ contains no
triangles, and if G is connected, then G∗ is connected as well. Moreover, G∗ has
an even number of vertices.

We see that G∗ fulﬁlls the conditions of an instance of Large-Deg-Max-
Cut. By Lemma 1 we know that G∗ has a minimum bisection of size b if and
only if G∗ has a maximum cut of size m2 − b.
Altogether, G has a minimum bisection of size b if and only if G∗ has a
maximum cut of size m2 − b. Hence, (G∗, m2 − b) is an equivalent instance of
Large-Deg-Max-Cut. To ﬁnish the proof that Large-Deg-Max-Cut is NP-
complete, we observe that Large-Deg-Max-Cut is in NP.
(cid:117)(cid:116)

4 Switching of Graphs with Bounded Density

The density of a graph G is deﬁned as

D(G) = |E(G)|

(cid:1) =
(cid:0)|V (G)|2

2|E(G)|

|V (G)|(|V (G)| − 1)

.

In connection with properties of simplicial complexes, Matoušek and Wag-
ner [10] asked if deciding switching-minimality was easy for graphs of bounded
density. We give a partial negative answer by proving that the problem Switch-
Few-Edges stays NP-complete even for graphs of density bounded by an arbi-
trarily small constant. This is in contrast with Proposition 3, which shows that
any graph G with maximum degree at most |V (G)|/4 is switching-minimal. The
core of our argument is the following Proposition.

Proposition 5. Let G be a graph, let k be an integer, and let c be a ﬁxed con-
stant in (0, 1). In polynomial time, we can ﬁnd a graph G(cid:48) and an integer k(cid:48) such
that
1. D(G(cid:48)) ≤ c,
2. G(cid:48) is (≤ k(cid:48))-switchable if and only if G is (≤ k)-switchable,
3. G(cid:48) is switching-minimal if and only if G is switching-minimal, and
4. |V (G(cid:48))| = O(|V (G)|).
Proof. Let n = |V (G)| and let N = max(cid:8)n,(cid:6) 3n
V (G(cid:48)) = V ∪ Y ∪ Z,

4c(cid:7)(cid:9). We construct the graph G(cid:48)

in the following way (see also Fig. 8). Let V = V (G). Then

where Y is a set of N vertices and Z is a set of N more vertices, and

E(G(cid:48)) = {{v1, v2} : v1 ∈ Y, v2 ∈ V } ∪ E(G).

16

V. Jelínek, E. Jelínková, and J. Kratochvíl

Fig. 8. The graph G(cid:48).

We prove that G(cid:48) fulﬁlls the conditions of Proposition 5. It is easy to see that
Condition 4 holds and that G(cid:48) can be obtained in polynomial time. We prove
that Conditions 2 and 3 hold, too.

Assume that G is switching-reducible, i. e., there exists a set A ⊆ V such
that S(G, A) contains fewer edges than G. Let us count the number of edges in
S(G(cid:48), A).

It is easy to see that if we switch a subset of V in G(cid:48), the number of edges
whose one endpoint is outside V is unchanged, and the number of edges with
both endpoints outside V remains zero. We also observe that S(G(cid:48), A)[V ] (the
induced subgraph of S(G(cid:48), A) on the vertex subset V ) is equal to S(G, A). Hence,
S(G(cid:48), A) has fewer edges than G(cid:48), showing that G(cid:48) is switching-reducible.

Moreover, if S(G, A) has l edges for an integer l, then S(G(cid:48), A) has l + nN
edges. Thus, if G is (≤ k)-switchable, we have that G(cid:48) is (≤ k + nN )-switchable.
Now assume that G(cid:48) is switching-reducible, i. e., there exists a set A ⊆ V (G(cid:48))
such that S(G(cid:48), A) has fewer edges than G(cid:48). If A ⊆ V , we have that S(G, A) has
fewer edges than G, and Condition 3 is satisﬁed. On the other hand, if A (cid:54)⊆ V ,
we use the following Claim.

Claim 3 Let A be a subset of V (G(cid:48)) and let A(cid:48) = A ∩ V . Then the number of
edges in S(G(cid:48), A(cid:48)) is less than or equal to the number of edges in S(G(cid:48), A).

To prove the claim, we ﬁx a set A ⊆ V (G(cid:48)). We may assume that |A∩ (Y ∪ Z)| ≤
|Y ∪ Z|/2 = N, otherwise we replace A by its complement A = V (G(cid:48)) \ A (note
that S(G(cid:48), A ∩ V ) has the same number of edges as S(G(cid:48), A ∩ V )).
Deﬁne the sets A(cid:48) = A∩V and A(cid:48)(cid:48) = A\A(cid:48) = A∩(Y ∪Z). Let G(cid:48)1 = S(G(cid:48), A(cid:48))
and G(cid:48)2 = S(G(cid:48), A). Note that G(cid:48)2 = S(G(cid:48)1, A(cid:48)(cid:48)). To prove the claim, we need to
show that G(cid:48)1 has at most as many edges as G(cid:48)2.

In G(cid:48)2, every vertex of A(cid:48)(cid:48) is adjacent to every vertex of (Y ∪ Z)\ A(cid:48)(cid:48), whereas
no such pair is adjacent in G(cid:48)1. This means that |E(G(cid:48)2) \ E(G(cid:48)1)| ≥ |A(cid:48)(cid:48)|(|Y | +
|Z| − |A(cid:48)(cid:48)|) ≥ |A(cid:48)(cid:48)|N, where we used the fact that A(cid:48)(cid:48) has size at most N.
On the other hand, an edge belonging to G(cid:48)1 but not to G(cid:48)2 must necessarily
connect a vertex from A(cid:48)(cid:48) with a vertex from V . Therefore, |E(G(cid:48)1) \ E(G(cid:48)2)| ≤

......YZVNverticesNverticesOn the hardness of switching to a small number of edges

17

|A(cid:48)(cid:48)|n. Combining these estimates, we get

|E(G(cid:48)2)| − |E(G(cid:48)1)| = |E(G(cid:48)2) \ E(G(cid:48)1)| − |E(G(cid:48)1) \ E(G(cid:48)2)|

≥ |A(cid:48)(cid:48)|N − |A(cid:48)(cid:48)|n
≥ 0.

This proves the claim. As a consequence of Claim 3, if G(cid:48) is switching-reducible,
then it can be reduced by switching a set A(cid:48) ⊆ V . The same set A(cid:48) then reduces
G, and Condition 3 of the Proposition holds. Analogically, if G(cid:48) can be switched
to contain L edges for an integer L, then G can be switched to contain L − nN
edges. Hence, we have proved Condition 2 with k(cid:48) = k + nN.

It remains to check Condition 1. By deﬁnition, the density of G(cid:48) is

D(G(cid:48)) =

≤

(2N + n)(2N + n − 1)

2|E(G(cid:48))|
2(cid:0)(cid:0)n
2(cid:1) + nN(cid:1)

(2N + n)(2N + n − 1)
n2 + 2nN

4N 2
3nN
4N 2 =

3n
4N

≤
≤
≤ c.

This completes the proof.

(cid:117)(cid:116)
Proposition 5 allows us to state a stronger version of Theorem 2 for the

special case of graphs with bounded density.
Theorem 4. For every c > 0, the problem Switch-Few-Edges is NP-complete
for graphs of density at most c.
Proof. As shown by Proposition 5, a general instance (G, k) of Switch-Few-
Edges can be transformed into an equivalent instance (G(cid:48), k(cid:48)) of density at
most c. Since Switch-Few-Edges is NP-complete on general instances by The-
orem 2, it remains NP-complete on instances of density at most c.
(cid:117)(cid:116)

5 Concluding Remarks

5.1. We have been trying to prove that the problem Switch-Reducible is NP-
complete (and hence, Switch-Minimal is co-NP-complete). We have not yet
succeeded. However, if it is true, then Proposition 5 gives the following analogue
of Theorem 4 even for these problems.
Proposition 6. If the problem Switch-Reducible is NP-complete, then for
every c > 0, the problem Switch-Reducible is NP-complete for graphs of
density at most c, and the problem Switch-Minimal is co-NP-complete for
graphs of density at most c.

18

V. Jelínek, E. Jelínková, and J. Kratochvíl

5.2. Lindzey [9] noticed that it is possible to speed-up several graph algo-
rithms using switching to a lower number of edges – he obtained up to super-
polylogarithmic speed-ups of algorithms for diameter, transitive closure, bipar-
tite maximum matching and general maximum matching. However, he focuses
on switching digraphs (with a deﬁnition somewhat diﬀerent to Seidel’s switching
in undirected graphs), where the situation is in sharp contrast with our results –
a digraph with the minimum number of edges in its switching-class can be found
in O(n + m) time.
5.3. It has been observed before (cf. e.g. [2]) that for a graph property P, the
complexity of deciding P is independent on the complexity of deciding if an
input graph can be switched to a graph possessing the property P. Switching
to few edges thus adds another example of a polynomially decidable property
(counting the edges is easy) whose switching version is hard. Previously known
cases are the NP-hardness of deciding switching-equivalence to a regular graph
[8] and deciding switching-equivalence to an H-free graph for certain speciﬁc
graphs H [5].
5.4. Let d > 0 be a constant. What can we say about the complexity of
Switch-Reducible and Switch-Few-Edges on graphs of maximum degree
4, the two problems are trivial by Proposition 3. On the other
at most dn? If d ≤ 1
hand, for d ≥ 1
2 the restriction on maximum degree becomes irrelevant, since
any switching-minimal graph has maximum degree at most n
2 by Proposition 1.
For any d ∈ ( 1
2 ), the complexity of the two problems on instances of maximum
4 , 1
degree at most dn is open.

References

1. T. N. Bui, S. Chaudhuri, F. T. Leighton, and M. Sipser. Graph bisection algorithms

with good average case behavior. Combinatorica, 7(2):171–191, 1987.

2. Andrzej Ehrenfeucht, Jurriaan Hage, Tero Harju, and Grzegorz Rozenberg. Com-
plexity Issues in Switching of Graphs. In Hartmut Ehrig, Gregor Engels, Hans-
Jörg Kreowski, and Grzegorz Rozenberg, editors, Theory and Application to Graph
Transformations, volume 1764 of LNCS, pages 59–70. Springer, Heidelberg, 2000.
3. M. R. Garey, D. S. Johnson, and L. Stockmeyer. Some simpliﬁed NP-complete

graph problems. Theoretical Computer Science, 1(3):237 – 267, 1976.

4. Jurriaan Hage. Structural Aspects Of Switching Classes. PhD thesis, Leiden Insti-

tute of Advanced Computer Science, 2001.

5. Eva Jelínková and Jan Kratochvíl. On Switching to H-Free Graphs. Journal of

Graph Theory, 75(4):387–405, 2014.

6. Eva Jelínková, Ondřej Suchý, Petr Hliněný, and Jan Kratochvíl. Parameterized
Problems Related to Seidel’s Switching. Discrete Mathematics and Theoretical
Computer Science, 13(2):19–42, 2011.

7. Sergiy Kozerenko. On graphs with maximum size in their switching classes. Com-

mentationes Mathematicae Universitatis Carolinae, 56(1):51–61, 2015.

8. Jan Kratochvíl. Complexity of Hypergraph Coloring and Seidel’s Switching. In
Hans L. Bodlaender, editor, WG, volume 2880 of LNCS, pages 297–308. Springer
Verlag, 2003.

On the hardness of switching to a small number of edges

19

9. Nathan Lindzey. Speeding up Graph Algorithms via Switching Classes. In Proceed-
ings of IWOCA 2014: 25th International Workshop on Combinatorial Algorithms,
2015. To appear. Preprint available online at http://arxiv.org/abs/1408.4900.

10. Jiří Matoušek and Uli Wagner. On Gromov’s method of selecting heavily covered

points. Discrete Comput. Geom., 52(1):1–33, July 2014.

