Noname manuscript No.
(will be inserted by the editor)

Geometry of Interest (GOI): Spatio-Temporal Destination
Extraction and Partitioning in GPS Trajectory Data

Seyed Morteza Mousavi · Aaron Harwood · Shanika Karunasekera ·
Mojtaba Maghrebi

6
1
0
2

 
r
a

 

M
4
1

 
 
]
I

A
.
s
c
[
 
 

1
v
0
1
1
4
0

.

3
0
6
1
:
v
i
X
r
a

Received: date / Accepted: date

Abstract In this paper, we propose a method for ex-
tracting the geometries of interest (GOIs) of a mobile
object which we deﬁne as the geometries of the points of
interest (POIs) which a mobile object frequently visits.
Based on extracted GOIs the area of a long-term GPS
trajectory is partitioned into a grid area with inhomo-
geneous shaped cells. This proposes a method consists
of three phases: (i) extracting the geometry of stay re-
gions based on the concepts of time-value and the time-
weighted centroid, (ii) determining the geometry of des-
tination regions based on the extracted stay regions us-
ing a geometry based hierarchical clustering, and (iii)
partitioning the trajectory area based on the geome-
try of the destination regions and their visit frequency.
The extracted GOIs can eﬀectively represent the ge-
ometries of the POIs of the mobile object while guar-
anteeing the characteristics of a valid partitioning. The

NICTA VRL, Department of Computing and Information
Systems, The University of Melbourne, Australia
Tel.: +61-405967448
E-mail: mousavi@student.unimelb.edu.au

Department of Computing and Information Systems,
The University of Melbourne, Australia
Tel.: +61-383441351
E-mail: aharwood@unimelb.edu.au

Department of Computing and Information Systems,
The University of Melbourne, Australia
Tel.: +61-383441351
E-mail: karus@unimelb.edu.au

School of Civil and Environmental Engineering, UNSW,
Australia
Tel.: +61-383441351
E-mail: maghrebi@unsw.edu.au

proposed method is tested using a ﬁeld database cov-
ering the trajectory of a mobile object with the length
of 3.5 years, and the achieved results are compared to
the state-of-the-art. Our experimental results show that
the proposed stay extraction can detect valid stay re-
gions with only one track point while the other methods
lose those stays. Moreover, analysis of the outcomes of
the method using empirical observation shows that the
quality of the extracted stay regions, destination re-
gions and the GOIs extracted by our proposed method
is considerably higher than those extracted by methods
proposed in the state-of-the-art.

Keywords Trajectory Data, Spatio-Temporal Par-
titioning, Geometry of Interest, Time-Value, Time-
Weighted Centroid, Destination Extraction

1 Introduction

In recent years, due to developments and improvement
of diﬀerent positioning systems such as Global Position-
ing Systems (GPS) and the Internet of Things, various
research has been devoted to collect, store and analyze
moving object trajectory data from a spatio-temporal
perspective. Mining GPS trajectories collected from ve-
hicles, animals and people’s daily movement and pub-
lic transport systems has received a growing amount
of attention. In this ﬁeld researchers have tried to de-
rive knowledge for solving practical problems (e.g. traf-
ﬁc and transportation management systems (Min and
Wynter, 2011; Krumm, 2011), animal migration and
movement monitoring (Handcock et al, 2009; Ungar
et al, 2005), transportation mode estimation (Zheng
et al, 2010, 2008a), and location-based social net-
works (Zheng et al, 2012b; Li and Chen, 2009)). Beyond
the promising opportunities, there are some challenging

2

Seyed Morteza Mousavi et al.

issues such as GPS coverage and noise, power and com-
munication limitations, and privacy issues that must be
considered as the bottlenecks in GPS trajectories (Tra-
jcevski, 2011).

In our research, as an overall view, we aim to de-
velop a comprehensive scheme for location prediction in
mobile object databases. As the ﬁrst step in our anal-
ysis, we need to construct the time series of the mobile
objects based on their GPS trajectories and the signif-
icant places which they have travelled. These signiﬁ-
cant places are called points of interest (POIs). Thus,
before constructing the time series, we need to detect
the location and the geometry of the POIs. We as-
sume that the GPS trajectory datasets only contain the
collected timestamp, latitude and longitude of a mov-
ing object during the data collection period. Therefore,
other knowledge about the trajectory such as POIs and
their geometries are not known a priori and are required
to be derived from the GPS trajectory.

In this paper we propose a method to partition the
trajectory area into a grid area such that each cell in
the grid represents the geometry of one of the POIs
of the moving object. We call the geometry of a point
of interest (POI) as Geometry of Interest (GOI). Using
the extracted GOIs and the partitioned trajectory area,
we can easily extract the time series (with annotations
about the POIs) by only using the geometric operator
intersection (Bogorny et al, 2009) instead of performing
the nearest neighbor query and similar methods which
are only possible with a priori known POIs. The time se-
ries generation algorithm parses the trajectory chrono-
logically and labels each GPS track point with the Iden-
tiﬁcation of the visited place at each time stamp. This
labeling process ﬁnds the POI or signiﬁcant place that
intersects with the geometry of the track point. There-
fore, before performing the time series generation phase,
the minimum bounding rectangle (MBR) of the trajec-
tory is needed to be partitioned into a grid. Hence, in
the ﬁrst place, the time series generation method re-
quires the accurate geometry of the POIs. Obviously,
the geometries of the POIs are required not to be over-
lapping otherwise the intersection operator is not able
to label the track points accurately. Moreover, since ev-
ery GPS track point is required to be labeled by a cell
ID, the whole trajectory area is required to be covered
by either the geometry of the POIs or the other cells in
the grid.

The quality of the extracted geometries has sig-
niﬁcant impact on the accuracy and quality of any
application using the extracted time seires based on
that GOIs. Such applications which perform inference
based on the exracted time series include location pre-
diction (Xue et al, 2013; Song et al, 2006; Scellato

et al, 2011a; Gid´ofalvi and Dong, 2012), transporta-
tion systems (Sharman and Roorda, 2011; Greaves
and Figliozzi, 2008), map-matching and path infer-
ence (Zheng et al, 2012a; Yuan et al, 2010; Rahmani
and Koutsopoulos, 2013), vehicular networks (Zhu et al,
2011), location based social networks (Li and Chen,
2009; Xiao et al, 2014), life patterns (Ye et al, 2009;
Jeung et al, 2011) animal movement analysis (Li et al,
2011; Handcock et al, 2009; Ungar et al, 2005), and
the theory of Time Geography (Winter and Yin, 2011,
2010; Long and Nelson, 2013).

Aiming for that, before generating the time se-
ries, researchers partition the area of the mobile ob-
ject trajectory using six approaches which are dis-
cussed in section 2. Our partitioning method discussed
in this paper ﬁts into the category of the time re-
stricted spatio-temporal approach. The approach has
two phases. Firstly, they extract the stays that are de-
ﬁned as a set of GPS observations that a moving object
has stayed there for a time duration greater or equal
than a predeﬁned minimum time threshold (Tmin) and
within a predeﬁned Euclidean vicinity distance (Dmax).
Secondly, they merge the resulting stay points to ex-
tract the destinations of the moving objects POIs Ye
et al (2009); Xiao et al (2010); Zheng et al (2009); Xiao
et al (2014); Hariharan and Toyama (2004); Kang et al
(2005).

Our method improves the previous methods which
use the same approach, in both stay and destination
construction phases. In the stay extraction phase, we
propose a novel clustering method for constructing the
stay regions using the concepts of time-value and time-
weighted centroid which are deﬁned in section 4. In the
destination construction phase, we propose a geometry
based hierarchical agglomerative clustering method for
merging the stay regions based on a geometric similar-
ity measure. The experimental results show signiﬁcant
improvement in the quality of the constructed stay and
destination geometries compared to the previous works.

Moreover, the related works do not explicitly parti-
tion the trajectory area. Instead, they use POI ranking
and classiﬁcation methods (Bhattacharya et al, 2015;
Shaw et al, 2013; Lian and Xie, 2011), use the nearest
neighbour queries (implicitly using partitioning meth-
ods such as Voronoi diagrams) to label the GPS tra-
jectories with the Id of the POIs. As above mentioned,
POI ranking methods and nearest neighbour query are
only applicable when the coordinates of the POIs are a
priori known and, therefore, do not apply to so many
applications such as analysis of the movement of ani-
mals (e.g. bird or ﬁsh movement), and in places with
no predeﬁned POIs.

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

3

(a) GPS Trajectory

(b) Extracted Stay Re-
gions (First Phase)

(c) Extracted Destina-
tion Regions
(Second
Phase)

(d) Final
Area (Third Phase)

Partitioned

Fig. 1 The Results of the Spatio-Temporal Partitioning Phases.

To tackle the problem, as the third phase, we pro-
pose a partitioning method which divides the minimum
bounding rectangle (MBR) of the mobile objects trajec-
tory into a grid with inhomogeneous cells. The cells of
the grid are either the GOIs or the ﬁxed sized cells. Our
method guarantees the characteristics of a valid spatial
partitioning method. Fig 1 shows an overview of the
results of the three phases of our partitioning method.

The performance of the three phases of the method
is analysed based on a dataset collected from vehicles
in an urban environment using cluster analysis and em-
pirical observation. In the stay extraction phase, our
method outperforms the baseline methods by making
the higher number of stay regions with better geome-
tries and more related to the real world POIs. In the
destination extraction phase, the performance and the
accuracy of our method are considerably higher than
the baseline methods, considering the number and the
geometric similarity of the geometries of the extracted
destination to the real world. Moreover, our method
is able to partition the trajectory area based on the
extracted destinations resulting in a grid which guar-
antees the characteristics of a valid spatial partition.

The main contributions of this research can be sum-

marized as follows:
• Proposing a novel spatio-temporal method to ex-
tract the GOIs of a mobile object. This method is
developed to be used as a pre-processing phase in
GPS trajectory data analyses.
• Proposing time-value and time-weighted centroid
• Introducing a novel agglomerative hierarchical clus-
tering method to merge the stay regions based on

parameters which are eﬀective in clustering.

their geometric shapes and a predeﬁned similarity
coeﬃcient.
• Developing a partitioning method to partition the
trajectory area into a grid which guarantees the
characteristics of a valid partition.

The rest of the paper is organized as follows: In sec-
tion 2, we discuss the research works related to our
problem. In section 3, the problem is preliminarily de-
ﬁned. Since the proposed concepts of time-value and
time-weighted centroid are addressed in the methodol-
ogy section, we introduce these concepts in section 4 be-
fore discussing the methodology. In section 5.1, the re-
lated works about stay region extraction are discussed,
and an our proposed method for stay region extrac-
tion based on the concepts of time-value and the time-
weighted centroid are discussed. In section 5.2, two
methods which have been frequently used in related
works are discussed, and a novel geometry based ag-
glomerative hierarchical clustering method for merging
the similar stay regions and extracting the destination
geometries is introduced and compared with the two
discussed related works. In section 5.3, our partitioning
method which constructs a grid with inhomogeneous
cells using the destination geometries constructed in
the previous phase of the method is introduced. In sec-
tion 6, the quality of our method compare to the related
works using quantitative, and empirical observation is
discussed. Finally, in section 7, the introduced method
is summarized, and the achieved results and the future
works are discussed.

4

2 Related Works

In recent years, various works have considered tra-
jectory data pre-processing, indexing and storage and
analysis (Zheng and Zhou, 2011). These trajectories
could be collected by social networks (Cho et al, 2011;
Scellato et al, 2011b; Ye et al, 2010), sensor networks (Ji
and Zha, 2004), RFIDs (Kourogi et al, 2006), WI-
FI (Song et al, 2004, 2006), accelerometer (Thiagara-
jan et al, 2009), internet of things (Macagnano et al,
2014), and cellular networks (Si et al, 2010; Pathirana
et al, 2003). Among all of these kinds of trajectories,
our work is focused on the trajectories collected by GPS
sensors. GPS trajectories have been used in various re-
search works in diﬀerent applications as discussed in
section 1, however, our work is a pre-processing pre-
requisite for all of them which attempts to extract the
GOIs of each mobile objects. These GOIs and the time
series generated based on them can be used by all of
those applications.

In the related works in diﬀerent applications the
GPS trajectory data involved, there are six approaches
taken in partitioning the trajectory area into a grid.

The ﬁrst approach is to partition the trajectory area
into a homogeneous grid to represent the regions of in-
terest (e.g. (Xue et al, 2013)). The shape of the cells is
often considered as triangular, square, rectangular, or
hexagonal polygons. The main problem with this ap-
proach is the degree of granularity of the cell. Coarse
granularity leads to each of the grid cells cover a wide
area which might include various POIs. The ﬁne granu-
larity leads the geometry of one POI to lie into diﬀerent
cells. Obviously, these problems have signiﬁcant draw-
backs on the degree of the time series extracted based
on such grids.

The second approach deﬁnes the POIs as the area
being covered by a wireless accesspoint (Song et al,
2004, 2006) in wireless networks or the area covered by
base transceiver stations (BTS) of a cellular network (Si
et al, 2010; Pathirana et al, 2003; Laasonen et al, 2004).
The geometries of the POIs are constructed using circu-
lar area or hexagonal polygons around the access points
or the BTS. The main problem with this approach is
that estimating a ﬁxed geometry for the area covered
by a wireless access point or a BTS is not straight for-
ward due to various reasons such as signal power, noise
and obstacles, particularly in the urban areas. Also, the
problems, above-mentioned, related to the granularity
of the covered area in this approach remains unsolved.
For example, the covered area by a BTS in a cellular
network might cover a very wide area which covers vari-
ous POIs or a the covered area of an access point might

Seyed Morteza Mousavi et al.

not cover the whole area of a POI (covered by more
than one access points).

The third approach is to construct the geometries
of the POIs based on the GPS track points in the tra-
jectory datasets using simple spatial clustering meth-
ods without considering the temporal aspects of the
GPS trajectories. Spatial clustering methods perform
very similar to the classic clustering schemes such
as KMeans (MacQueen, 1967; Ashbrook and Starner,
2003), Gaussian mixture model (GMM) (Banﬁeld and
Raftery, 1993), DBSCAN (Ester et al, 1996; Zhou
et al, 2004) and hierarchical clustering methods (Jr.,
1963; Sharman and Roorda, 2011). These methods sim-
ply cluster using measures such as the distance be-
tween GPS points or density connectivity in a two-
dimensional Cartesian space without taking the third
dimension time into consideration.

As the fourth approach, research works (Scellato
et al, 2011a; Li et al, 2012, 2011) have used frequency
map based spatial-temporal clustering methods for ex-
tracting signiﬁcant places in the trajectory area. They
partition the area into the very ﬁne grid with equi-sized
cells and assign a weight to each cell around each GPS
point based on the duration of the GPS staying at that
point. This weight assigned to each cell is computed
based on the assumption that the real position of a
mobile object has a normal distribution with standard
deviation σ = 10m (Scellato et al, 2011a). Then they
generate a frequency map which contains peaks that
give information about the region of signiﬁcant places.
They consider regions that are above a predeﬁned visit
frequency threshold as POIs. Note that, these works,
involve the parameter time in their clustering method
indirectly by considering the visit frequency of the ex-
tracted signiﬁcant places. Therefore, we can call their
method as semi spatio-temporal.

The main problem in the third and the fourth ap-
proach is the inaccuracy in the number and the geom-
etry of the extracted POIs. They merely consider the
density of the GPS track points in a neighbourhood in
the trajectory area as an indicator of a signiﬁcant place
or a POI. This assumption that the places which have
more density of the GPS track points are more signiﬁ-
cant for the user than the places with less density is not
always true. Consider a mobile object often moves on
a road network between its POIs regularly and repeti-
tively. Obviously, during the journies between the POIs,
there are some places which are being visited and, there-
fore, have higher GPS track point density, while they
are not the mobile objects POI. For example, the con-
junctions with traﬃc lights or the road segments with
high traﬃc load often have a high density of GPS track
points in the GPS trajectories. These two approaches

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

5

consider these kinds of places as POIs because they are
not able to distinguish between POIs (with high GPS
track point density) and the other places with nearly
the same density. The semi spatio-temporal clustering
approach has the same problem because for example
the conjunctions with the traﬃc lights often have high
density and also very high visit frequency (the same or
even higher than the POIs) leading to the methods not
able to distinguish between POIs and the places with
high visit frequency.

The ﬁfth spatio-temporal approach is incorporating
the speed restrictions in ﬁnding the stop and moves
(E.g. (Palma et al, 2008; Bhattacharya et al, 2012)).
This approach assumes the clusters with the GPS track
points with lower speed are more likely to be stop
points. This approach is not applicable in GPS datasets
where the GPS speed is not available, or the speed is
not easily computable (e.g. in trajectories with low sam-
pling rate and with large time gaps). Moreover, there
are some scenarios where deﬁning a threshold for max-
imum speed is not straight forward. For example, as-
sume a mobile object carrying a GPS-enabled mobile
phone. During the daily travelling activities, he might
have diﬀerent transportation modes (e.g. walk, bike,
train, car, bus, etc.) (Zheng et al, 2010, 2008a). In each
of the transportation modes the speed threshold should
be diﬀerent since the average walking speed is diﬀerent
to driving. Furthermore, even if we assume the same
transportation mode for the mobile object throughout
the trajectory (e.g. walk), places like shopping centers,
zoos, parks, campuses, and so many other POIs exist
where the mobile object stays in their geometry while
keeping moving (speed is greater than zero).

The sixth approach is the time restricted spatio-
temporal clustering. Research works (Ye et al, 2009;
Xiao et al, 2010; Zheng et al, 2009; Xiao et al, 2014;
Hariharan and Toyama, 2004; Kang et al, 2005) perform
time restricted spatio-temporal clustering methods for
extracting the centroids of the destinations of mobile
objects (POIs) in two phases. Firstly, they extract the
stay regions based on predeﬁned spatio-temporal re-
strictions, secondly, they merge the stay regions to con-
struct the destinations. They provide a speciﬁc deﬁni-
tion of a valid spatio-temporal cluster. A valid clus-
ter (stay region) is a region (a vicinity distance with
radius ∆D ≤ Dmax) within which the mobile object
has stayed (stopped or kept moving) for a time span
∆T ≥ Tmin where Tmin, is a time span threshold. By
deﬁning these two restrictions, the methods can distin-
guish between POIs and the other places with high GPS
track point density and visit frequency. The POIs is de-
ﬁned as a bounded neighbourhood with the minimum
area; a mobile object stays for a considerable period

(often much longer than the time spent on the road
networks and the conjunctions).

This sixth approach is highly used in research works
such as (Ye et al, 2009; Xiao et al, 2010; Zheng et al,
2009, 2008b; Xiao et al, 2014) conducted in Microsoft
Research Asia. Hariharan et al.,
in (Hariharan and
Toyama, 2004) deﬁne the time and vicinity distance
based on the diameter of the extracted stay regions.
These works are the most relevant works to our method.
However, they merely ﬁnd and report destination points
(centroid of the POIs) to be used in the next phase in
time series extraction which is the nearest neighbour
query (labeling the extracted centroid of the POIs by
the name of the nearest POIs in the real world). They
do not consider the geometry and shape of the POIs
and anything related to the partitioning process. More-
over, our method is diﬀerent to them fundamentally
because we use the concept of time-weighted centroid
and time-value in our clustering process.

Among all the works discussed above, in this paper,
we choose two of the works proposed and used in (Ye
et al, 2009) and (Hariharan and Toyama, 2004) as the
baseline to compare the performance of our proposed
methods in stay and destination extraction phases (dis-
cussed in 6 in detail).

Note that the above-discussed partitioning meth-
ods are useful for the applications which do no have
access to the geometries or the coordinates of the cen-
troids of the POIs. Partitioning with a priori known
POIs is often done using spatial partitioning methods
such as Voronoi diagrams (Aurenhammer, 1991) or the
POI ranking methods (Bhattacharya et al, 2015; Al-
vares et al, 2007; Shaw et al, 2013; Lane et al, 2010;
Lian and Xie, 2011). Obviously, these methods are out
of the focus of this paper since we aim for ﬁnding the
geometries of the POIs (which we do not have any in-
formation about them a priori) by only using GPS tra-
jectories.

3 Problem Deﬁnition

Deﬁnition 1 The trajectory of a moving object is a
sequence of time stamped GPS observations ( points),
T = {pi}, i = 1, 2, . . . , where pi = (ti, xi, yi) indicates
the spatio-temporal data of the moving object at time
ti. The parameters ti, xi, and yi, are the time stamp
and (x, y) ∈ R2 Cartesian plane of the moving object
respectively. in our GPS trajectories, ∀p ∈ T ,
i, j =
j ⇐⇒ i > j. There are no other
1, 2, . . . ,
guarantees such as constant sampling rate.

tp
i > tp

For each point pi in a GPS trajectory. We com-
pute the area of the trajectory by ﬁnding its mini-

6

Seyed Morteza Mousavi et al.

mum bounding rectangle (the smallest rectangle that
contains all the GPS points of the trajectory) in the
Cartesian plane ∈ R2.

As a big picture, given a GPS trajectory, our prob-
lem is to spatiotemporally partition our trajectory area
into a grid with inhomogeneous cells such that it guar-
antees two characteristics of a validly partitioned area,
as follows:
(cid:88) The geometry of extracted partitions are mutually
disjoint which means that there do not exist any two
partitions in the partitioned area such that the area
of intersection of them is greater than zero.

(cid:88) The union of all the partitions, covers the whole
trajectory area which means that all the GPS points
in the trajectory cab be assigned to one partition.

Moreover, the partitioning method must maximize
the geometric similarity between the geometric of the
extracted GOIs and the geometry of the POIs in the
real world (discussed in section 6).

The proposed solution to this problem has three
phases with three distinct problem deﬁnitions which are
discussed in section 5 in detail.

4 Concept of Time-Value and Time-Weighted
Centroid

In the process of collecting GPS observations which are
often done by GPS devices installed on vehicles or the
GPS sensors in mobile phones and other GPS-enabled
devices, ideally, we would like to collect each GPS obser-
vation at predeﬁned sample times, with constant sam-
pling rate. For example, we would like to have one sam-
ple point every 10 seconds or every one minute. How-
ever, due to various reasons, it is not applicable. One
major reason is the fact that GPS devices consume a
considerable amount of power. People who carry such
mobile devices usually tend to keep their GPS sensor
oﬀ. This fact has a dramatic impact on the quality of
the collected GPS trajectories. Another reason is poor
GPS coverage in places such as urban environments and
particularly in indoor locations. Besides, the process of
GPS data collection is often terminated by the user at
certain times. For instance, when a vehicle parks in a
place and the driver turns the engine oﬀ, the GPS de-
vice goes oﬀ as well. Thus, we have a considerable du-
ration of time for which no GPS observation has been
collected. So, we have frequent and long term data loss
in such trajectories.

Therefore, typically we have two types of collected
GPS observations. The ﬁrst type is the GPS observa-
tions that are collected in short time intervals without

signiﬁcant time gap. For instance, consider a vehicle
that has been moving on a motorway, and the GPS de-
vice has been collecting one sample every 10 seconds.
The time diﬀerence between each point and the con-
secutive one (time gap) was only 10 seconds. Consider
another scenario in which a vehicle has collected a se-
quence of GPS observation in every 10 second time in-
terval while moving and eventually, it has reached its
destination and stopped for a while (all night, parked at
a house). During this time, the GPS device was turned
oﬀ. Therefore, the last GPS observation that was stored
in the trajectory was the very last one before or when
the vehicle stopped. The time gap between this GPS ob-
servation and the consecutive one (the very ﬁrst GPS
observation collected after the vehicle starts again) in
this scenario is signiﬁcantly bigger than the ﬁrst sce-
nario. In both scenarios, we consider the time gap be-
tween these two consecutive collected GPS points as
the time-value of the ﬁrst one.
Deﬁnition 2 For a GPS point pi in the trajectory T ,
we deﬁne the time-value as:

tvp

i = tp
where tp

i = 0, 1, ..., n.

i+1 − tp
i indicates the time stamp of point pi.

i

(1)

In our model, the time-value of each GPS point rep-
resents the degree of signiﬁcance of that GPS point. It
is obvious that the information value of the very last
GPS point collected in our second scenario is much
higher than the GPS points in the ﬁrst scenario. In
the second scenario, the last collected GPS observation
represents the location of a destination or the car park
near that destination or the place which the GPS signal
has been lost because the moving object has entered an
indoor environment of that destination. In other words,
the time-value of this GPS point represents the de-
gree of signiﬁcance of that point. Therefore, we need
to consider the time-value of each GPS point carefully
throughout our method in the process of extracting the
stay regions. We incorporate the concept of time-value
of GPS points in computing the time-weighted centroid
of stay regions.

Deﬁnition 3 The centroid ci = (cx
points P S = {pm, pm+1, ..., pn}, is computed as:

i ) of a set of

i , cy

(cid:80)n

cx
i =

i

,

i=m xp
|P S|
i and yp

(cid:80)n

cy
i =

i=m yp
|P S|

i

(2)

where, xp
pi, and |P S| is the cardinality of the point set P S.

i are the x and y coordinates of point

In Eq. 2, the values of all the GPS points are consid-
ered the same in computing the centroid. This approach

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

7

has been used in all of the related works which attempt
to calculate the centroid of a set of points. Contrary
to the previous works, we incorporate the time-value of
each GPS point tvp
i in computing the centroid to have
the time-weighted centroid.

i , twcy
Deﬁnition 4 The time-weighted centroid (twcx
i )
of a set of points P S = {pm, pm+1, ..., pn} is deﬁned as:

(cid:80)n
(cid:80)n

i=m yp
i=m tvp

i

i × tvp
i × |P S|
(3)

(cid:80)n
(cid:80)n

twcx

i =

i=m xp
i=m tvp

i × tvp
i × |P S|

i

twcy

i =

where, tvp
i is the time-value of point pi computed using
Eg. 1, and |P S| is the cardinality of the point set P S.

In Eq. 3, the time-value of each GPS point is consid-
ered as the weight or degree of signiﬁcance of each point
in computing the centroid. By this, we discriminate our
GPS points in our process based on the value of infor-
mation they give us about the location of the mobile ob-
ject. By incorporating the time-value, the centroid will
be more biased to and closer to the locations where long
term stops have taken place. Obviously, when a mobile
object has stopped in the car park of the house for eight
hours, the centroid of the stay point must be biased to
the location reported by the last GPS point collected at
that car park or before entering the car park. By this,
the computed centroid is much more accurate than the
one that was computed by considering the same weight
for all the GPS points.

This approach in computing the centroid of a set
of points has a signiﬁcant impact in extracting the stay
regions and spatio-temporal partitioning, as will be dis-
cussed in section 5 and in section 6.

5 Methodology

5.1 Spatio-Temporal Extraction of Stay Regions

The ﬁrst step in our spatio-temporal partitioning
method is to extract stay regions. Aiming for that we
convert the GPS trajectory into a meaningful time se-
ries composed of a sequence of stays and moves. We
deﬁne a stay si as an event which has been taken place
within the trajectory period of a mobile object. The
event has happened in a geographical region or neigh-
borhood called a stay region. A stay region is an area in
which the mobile object spends some time ∆t ≥ Tmin.
During this time, the mobile object can be either mov-
ing or stopping provided that it does not pass the
boundary of the region. The boundary of the region is
calculated based on the roaming distance ∆d ≤ Dmax

which is the maximum distance that a moving object
can stray from the centroid of the stay region. The cen-
troid of the stay region is calculated iteratively as the
centroid of all the stay GPS track points. For exam-
ple, if a mobile object is stopped in a car park for 8
hours starting from 9 AM to 5 PM, the event is the
visit to the car park, the starting time of the event is
9 AM (arrival time) and the ending time of the event
is 5 PM (departure time). The stay region is the car
park area because it was within the distance threshold
of the region centroid for 8 hours (more than the min-
imum stray time). Each stay has a set of GPS points
(point set) which indicates the GPS observations which
were collected within the stay period.

stay

si, i = 1, 2, ...n
Deﬁnition 5 We deﬁne
is deﬁned as si = (idi, gi, psi, ci, ati, dti), where
idi, psi, gi, ci, ati, dti are the identiﬁcation, geometry,
point set, centroid, arrival time and departure time of
of si, respectively. psi is a sub trajectory of the mobile
object trajectory which is deﬁned as a set of consec-
utive points {pm, pm+1, ..., pn}, where ∀k, m < k ≤ n,
Dist(ci, pk) ≤ Dmax, and Dist(ci, pn+1) > Dmax where
ci is the centroid of the points in psi. gi is the polygon
which the convex polygon (Andrew, 1979) of the point
set psi.

Notably, our approach in extracting stay points is
diﬀerent to the previous works (Ye et al, 2009; Xiao
et al, 2010; Zheng et al, 2009, 2008b; Xiao et al, 2014)
and their predecessor (Hariharan and Toyama, 2004)
as follows. Firstly, in previous works, the output of the
stay generation phase is only a point that is deﬁned as
the centroid of all points in psi. However, we consider
a stay as an event happening in a geographical region
with an arbitrary shape.

Secondly, the deﬁnition of a ∆d in our approach
is diﬀerent to the related works. In (Hariharan and
Toyama, 2004), ∆d is deﬁned as the Euclidean diame-
ter of the coordinates of elements of a stay. This means
that the diameter (the longest Euclidean distance be-
tween two points in the set) of a stay must not be
greater than ∆d. They iteratively add a point to the
sub-trajectory pi and recompute the diameter of pi.
If the diameter, remains less than Dmax after adding
the new point, they keep the point in pi. Otherwise,
they remove the point from pi, close and save si, and
start constructing a new stay. Ye et al., in (Ye et al,
2009) have taken the very ﬁrst chronological point in
each stay as the reference point and have deﬁned ∆d
as the Euclidian distance between each new point and
the reference point. They do not refresh the reference
point coordinate when adding a new point to the stay.
However, in our method(Alg. 1), ∆d is deﬁned as the

8

Seyed Morteza Mousavi et al.

Algorithm 1: Time-Weighted Centroid Based
Stay Region Extraction (Our Method)

input : P (A set of GPS points), vicinity distance
threshold Dmax, time span threshold Tmin

output: A set of Stays S where

sk = (idk, gk, psk, ck, atk, dtk)

Data: Coordinate twc

∆d ← 0, ∆t ← 0, i ← 0, j ← 0, token ← 0
foreach pi ∈ P do

pi.tv ← ComputeTimeValue(pi)

end
while i < |P| do
psk.insert(pi)
twc ← TimeWeigtedCentroid(psk)
j ← i + 1
token ← 0
while j < |P| do

∆d ← EucDistance(twc, pj)
if ∆d > Dmax then
j + tvp

∆t ← (tp
j ) − tp
if ∆t ≥ Tmin then

i

i

idk ← k
gk ←
ComputeConvexHull(P S)
ck ← GeometryCentroid(gk)
atk ← tp
dtk ← tp
sk = (idk, gk, psk, ck, atk, dtk)
S.insert(sk)
i ← j
token ← 1
k ← k + 1
break

j + tvp

j

end

end
psk.insert(pj)
twc ← TimeWeightedCentroid(psk)
j ← j + 1

end
if token (cid:54)= 1 then

i ← i + 1

end

end
return S

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

Euclidian distance between the time-weighted centroid
of the stay to the new point which is being examined
(line 11 in Alg. 1).

Thirdly, the calculation of the parameter ∆t in our
method is diﬀerent to the previous works. In the previ-
j ) − tp
ous works, the parameter is deﬁned as ∆t ← (tp
i ,
which means the time diﬀerence of the ﬁrst and the last
GPS observation in the stay. In our method we incor-
porate the time-value of the last point (tvp
j ) and deﬁne
the ∆t as: ∆t ← (tp
i . This means that we
consider the time gap between the last point and its
successor point in the trajectory to compute ∆t.

j ) − tp

j + tvp

In our method (showed in Alg. 1), having a current
stay, for each new GPS observation in the trajectory,

if the condition ∆d > Dmax and ∆t > Tmin, are true,
we close the current stay, store it, and make a new stay
with the GPS observation as the ﬁrst point in its point
set. Otherwise, we add the new GPs observation to the
point set of the current stay, update the time-weighted
centroid of the current stay, and keep examining the
next points in the trajectory. In other words by adding
each point to the stay, we refresh the coordinate of the
centroid of the stay using time-weighted centroid of the
points of the current stay.

To calculate the geometry of the region gi within
which the stay si has taken place, we compute the con-
vex hull of the set of points psi = {p1, p2, ..., pn}. The
convex hull of a set of points is the smallest polygon
that contains all of the points (Andrew, 1979). Then,
we add a predeﬁned geometric buﬀer around the con-
vex hull polygon to compensate for the GPS noise. The
width of the buﬀer is set to 10 meters (Navstar, 2008).
We assign a unique numeric identiﬁcation idi to each
stay si. We calculate the centroid (ci) of the points in
psi by ﬁnding the average x and y coordinates in the
point set by incorporating the time-value of each point.
The parameter ati indicates the arrival time of stay si
which is the time that the moving object has arrived in
the region (gi). The value of ati is set as the time-stamp
of the ﬁrst GPS point in the point set. Similarly, dti is
the departure time of stay si which is the time that the
moving object has departed the region gi. dti is set as
the time-stamp of the last GPS point in (pn ∈ psi) plus
the time-value of the last point (tn + tvn).

5.1.1 Time Complexity

In the worst case, the time complexity our method is c
for n track points in the trajectory. However, in prac-
tice, since the sum of the track point of the extracted
stays are considerably fewer than n, we can consider it
much more eﬃcient. Note that, the inner loop in Alg. 1
deals with computing the centroids of the stay regions
which depends on the number of the track points in
each stay. Since a large number of track points in the
trajectory are not clustered in the stays (due to restric-
tions of a valid stay), the sum of the track points of the
stays is much lower than n. Computing the diameter
of the stays in (Hariharan and Toyama, 2004) is more
complex than computing the centroid in our method,
since for computing the diameter, we need to compute
the distance of each point to all of the other points in
the cluster with the time complexity of O(n2). There-
fore, we can consider the complexity of the method,
in the worst case, O(n3) for n track points in the tra-
jectory. The time complexity of the method proposed
by (Ye et al, 2009) is O(n) which is lower than our

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

9

method since they do not refresh the coordinate of the
reference point while making the stay region.

5.2 From Stay Regions to Destination Regions
So far, we extracted all the stays in the trajectory T .
Assume a moving object visits a certain place every
day (e.g. home). If we extract every stay throughout a
trajectory period with a long time duration, e.g., one
year or more, we would have at least 365 visits to that
stay. As we extract the stay cluster spatiotemporally, we
would have at least 365 stays with approximately the
same geometry. At this stage, we need to ﬁlter the du-
plicated stays extracted which represent the same des-
tination region. Aiming for that, we detect the stays
that have approximately the same geometry and merge
them together. After the merging phase, we will have a
set of destinations with unique geometries and Identi-
ﬁcation.

Note that the geometry of the stay is not necessarily
the same as the geometry of the visited place because
people might park their cars near their house and not al-
ways at their house. Moreover, after entering the home
car park (indoor location) the GPS coverage might be
lost, or the GPS device might be switched oﬀ. So, we
cannot expect the stay extractor methods to estimate
the geometry of the destinations themselves.

In related works, there are two major schemes for
merging the stays. In both schemes, they have a set
of stay points. They attempt to cluster the stay points
such that the stay points that have close distance are
clustered into the same destination. By this, all of the
stay points that represent one destination with a ﬁ-
nite region are clustered together. By merging the stay
points, we can determine the geometry of the desti-
nations by generating the convex hull bounding each
cluster. Ye et al. in research works (Ye et al, 2009) use
density based clustering OPTICS (Ankerst et al, 1999).
Hariharan et al. in (Hariharan and Toyama, 2004) use
a hierarchical clustering method for clustering the stay
points.

In this section, we introduce and analyze the two
methods mentioned above and propose a novel agglom-
erative hierarchical clustering method that incorporates
the geometry and shape of each stay in extracting the
destinations. We will compare these methods based on
their performance in extracting the destinations.

Ye et al. in (Ye et al, 2009), have used the density of
neighbourhood of stay points in a group as a measure
of similarity. In other words, the stay points which have
more dense neighbours (stay points with many nearby
neighbors closely packed together) make a cluster (des-
tination) and stay points that lie alone in low-density

regions are considered as outliers and removed. After
running OPTICS clustering method on the set of ex-
tracted stay points, the result is a set of destinations
(each destination is a set of stay points). The centroid
of each destination becomes the representative of that
ﬁnal destination. One major problem of density-based
clustering methods such as OPTICS is the fact that we
need to deﬁne two parameters: neighborhood distance
 (eps) and the minimum number of points required to
form a dense region (minP ts). The performance and
output of the methods are strongly sensitive to the val-
ues chosen for these two parameters.

For instance, in our application, if we choose a rela-
tively big value for parameter (minP ts), the density-
based clustering methods will consider lots of stay
points as noise or outliers in the clustering and elimi-
nate them because they have the lower density of neigh-
bours than (minP ts). Assume a stay point has been
visited only twice in the time duration of our GPS tra-
jectory and the location of these stay points is far apart
from the others. Therefore, assuming centroids of the
extracted stay regions (stay points) are close enough
to each other, the neighborhood density of these stay
points is still very low. Hence, they are highly likely
to become considered as noise in the clustering and
be eliminated, although the destinations represented by
these stay points are very signiﬁcant places in our appli-
cation, and we need to have a record of the visit to them
in our time series. In other words, using density-based
clustering methods, we do not have enough control over
how the method keeps or eliminates stay points and
destinations. Unfortunately, Ye et al. (Ye et al, 2009),
have only reported that OPTICS clustering method has
the best performance in their experiments. They have
not provided further information about the parame-
ters that they have used in their destination extrac-
tion method and have not discussed the performance of
their methods since they have considered it as a trivial
pre-processing phase in their applications.

Hariharan et al., in (Hariharan and Toyama, 2004)
have used a clustering method which tries to ﬁnd each
pair of stay points which have maximum similarity to
each other and merge them together iteratively until
there are no remaining similar pairs of clusters which
have not been merged. They have deﬁned a similarity
criteria which indicates if the diameter of the result-
ing region of merging two stay points is less than or
equal to a given upper bound threshold Dmin (mini-
mum merged diameter), these two stay points will be
merged. This process continues until all similar stay
points are merged. The result is a set of stay points
which are considered as the ﬁnal destinations.

10

Seyed Morteza Mousavi et al.

Although the results of both methods discussed
above were a point representing the destination (cen-
troid), to have a coherent analysis framework in our
experiments and to be able to compare these two meth-
ods with our method, we generate a convex hull for each
resulting clusters of stay points (destinations) in both
methods. The convex hull represents the geometry of
each destination.

Algorithm 2: Geometric Similarity Based
Destination Detection Method

input : A set of stay regions S, Jaccard similarity

threshold Jmin visit frequency threshold
Fmin

output: A set of destination regions D
Data: Destination d, InterList, RT reeIndex

JSimmax ← 0, JSim ← 0, f irstSimIndex ← 0,
secondSimIndex ← 0
foreach si ∈ S do

fi ← 1

end
while (JSimmax < Jmin) do

RTreeIndex.Update(S)
i ← 0, JSimmax ← 0
while (i < |S|) do

interList ←
RTreeIndex.FindIntersectingStays(si)
j ← 0
JSim ← 0
JSimmax ← 0
while (j < |interList|) do
JSim ←
Area(gi
if (JSim > JSimmax) then

(cid:84) interList[j])/Area(gi
JSimmax ← JSim
maxIndex ←
F indIndex(S, interList[j])

(cid:83) interList[j])

end
j ← j + 1

end
i ← i + 1

end
if (JSimmax > Jmin) then

si.M ergeP oints(smaxIndex)
gi ← gi ∪ gmaxIndex
fi ← fi + fmaxIndex
S.remove(smaxIndex)

end
else

break

end

end
foreach (si ∈ S) do

D.insert(si)

end
foreach (dk ∈ D) do
if fk < Fmin then
D.remove(di)

end

end
return D

1

2

3

4

5

6

7

8

9

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

26

27

28

29

30

31

32

33

34

35

36

37

38

39

40

41

In our method, we deﬁne a similarity measure that
incorporates the geometry of each stay point in extract-
ing the destinations. We deﬁne a criterion that helps us
control our merging process in our hierarchical cluster-
ing method so that we can decide whether to merge
two stay regions or not. Alg. 2 shows the pseudo-code
of our method. We use an R-Tree indexing method to
index the geometry of each stay gi ∈ S. Subsequently,
at each step, we send a query to the R-Tree to ﬁnd
only the clusters which their geometry intersects with
the current stay geometry. The result is a list of stays
(interList). Then, we compute the most similar stay
geometry in interList to our current stay region (gi) in
a loop. We use a similarity measure which is inspired
by famous similarity measure Jaccard Similarity Coef-
ﬁcient (Han, 2005) which is a statistic used for com-
paring the similarity and diversity of sample sets. We
deﬁne the similarity of two geometries (gi, gj) as the
measure of similarity of two stay regions as follows:

JSimilarity(gi, gj) =

Area(gi ∩ gj)
Area(gi ∪ gj)

.

(4)

After ﬁnding the similarity of all pairs in S,
if
JSimmax = 0, this means that there is no intersecting
pair of stay regions in S. If JSimmax > 0, then there
is still, at least, a pair of interesting stay regions in S.
smaxIndex represents the stay region that has the high-
est similarity to our current stay si in the second loop in
Alg. 2. To decide whether we need to merge the current
stay si and smaxIndex, we compare their similarity co-
eﬃcient (JSimmax) with Jmin. If (JSimmax > Jmin),
we merge the two stays by adding all the GPS points
in stay smaxIndex to si and computing the new region
geometry of our current stay gi as the geometric union
of two geometries.

The condition JSimmax > jmin is the key point in
our algorithm. We merge two stays provided that the
degree of their similarity be greater than a similarity
threshold. For example, if Jmin = 0, the method merges
the current stay si with the stay with maximum inter-
section smaxIndex, regardless of the similarity degree
between them. If Jmin = 0.1 then the method merges
the current stay with smaxIndex only if their similarity
coeﬃcient is greater than 0.1. This means that two stay
regions must be similar enough to be merged. By ad-
justing this threshold, we can decide whether to merge
the stays or not. By increasing the threshold Jmin, we
reduce the chance that a pair of stays is merged and by
decreasing it we increase the likelihood of two stays be-
ing merged. Notably, for instance if we set Jmin = 0.2,
there will be overlapping stay regions after our method
terminates because there still exist overlapping stays

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

11

that have not been merged, since their similarity was
lower than Jmin = 0.2 although they intersect.

By adjusting this threshold, we can control the pro-
cess of destination extraction. Consider a university stu-
dent (mobile object) carrying a GPS-enabled mobile
phone within the university campus. During a typical
day, the mobile object that often visits a few places
on the university campus such as diﬀerent conference
or lecture rooms, dining rooms, shops or their supervi-
sors’ oﬃces. Based on the distance of the stay regions,
the convex hull of the collected GPS points of each re-
gion might overlap or not. If the distances between these
stay regions are very close (the university campus is in a
very compact area), the probability of this overlaps in-
creases. In this case, if we set Jmin = 0, the chance that
a large number of stay regions being merged increases
because the method merges two intersecting stays re-
gardless of their degree of similarity. So, the number of
ﬁnal extracted destination decreases dramatically and
the scale or size of the extracted destination increases.
Therefore, by using very low Jmin, we lose data granu-
larity because we merge so many stay regions and make
fewer destinations with more coarse granularity. For ex-
ample, if the student goes to the dining room that is
close to his lecture room and stays there for 10 min-
utes (≥ Tmin), the two stay regions will be highly likely
merged and the data about a valid visit to the dining
room will be lost in our ﬁnal extracted time series based
on the extracted destinations and the GPS trajectory.
On the other hand, if we choose a high value for
Jmin, the likelihood of two intersecting and overlap-
ping stay regions being merged decreases. So, we will
have ﬁner granularity in our resulting destinations. In
this case, the dining room and the lecturing room might
be distinguished and separated in the ﬁnal destinations
set. Note that, if we use a very high value for Jmin, our
ﬁnal Destination-Grid will be very ﬁne. If the grid be-
comes very ﬁne, we will have new problems because we
will have so many extracted destinations that were not
separate in the real world. This means that the method
might not merge the stay regions that was related to the
same destination. This will also make serious problems
in our resulting time series.

After merging stay region pairs, we compute the
visit frequency of the resulting stay region as the sum
of visit frequency of the current stay fi and the most
similar stay region smaxIndex. As the last step in des-
tination extraction method, we remove the stay region
smaxIndex since it has been already merged to si. We
consider the frequency of visits to each destination as a
useful criterion for the extraction of the signiﬁcant des-
tinations (POIs). As a result, we can decide whether
we consider a cluster of stay regions (destination) as a

POI or consider it as a trivial cluster (noise). The last
loop in Alg. 2 removes the destinations which have been
visited with the frequency less than Fmin.

Fig. 2 clearly shows the impact of diﬀerent values of
Jmin in the destination extraction method. Fig. 2(a)
shows the stay regions extracted from the previous
phase in a chosen area in a very larger area. As it is
evident, there are a large number of stays that have
intersections and overlaps. Fig. 2(b) shows the destina-
tion extraction results with parameter Jmin = 0. As a
result, the method has merged all the intersecting cells
and made only two destinations with coarse granularity.
Jmin = 0.1 results in Fig. 2(c). Since the similarity de-
gree of two bigger clusters on the top of the picture was
less than 0.1, two areas have not been merged although
they intersect. By increasing Jmin to higher values, the
number of destinations increases and a large number
of overlapping destinations remain separated. Fig. 2(d)
shows an interesting result of the method. As we can
see, there is a small area inside the bigger area at the
top. The small area is completely covered by the big-
ger area. However, because the similarity of them is
lower than Jmin = 0.2, they have not been merged.
This shows that the method is able to separate an area
which was covered by a bigger area. As an example
in the real world, we can consider a lecture room area
(small area) inside a university campus (bigger area).
Notably, if we set Jmin as a larger value near 1,
we will have many stay regions representing the same
stay regions that are not merged. Interestingly, if we
set Jmin = 1, we will have exactly all the stay regions
as destination regions because the probability that two
stay regions have identical convex hulls (and accord-
ingly JSim = 1) is approximately zero.

5.2.1 Time Complexity

Zheng et al.,
in (Ye et al, 2009) have used OP-
TICS (Ankerst et al, 1999) clustering method to cluster
the centroid of the stay regions to extract the destina-
tion regions. The time complexity of OPTICS algorithm
is O(n log n) with and O(n2) without spatial indexing.
The time complexity of the hierarchical clustering
method provided by Hariharan et al. (Hariharan and
Toyama, 2004) is O(n3) in the worst case. Since the
method uses simple geometric operators such as nearest
neighbour and diameter calculation, the runtime of the
method is acceptable.
The complexity of our method (Alg. 2) in the
worst case, is O(n3). However, we use R-Tree index-
ing method to reduce the runtime of our method in
ﬁnding the intersecting cells. We perform the internal
search (to ﬁnd the most similar geometry to the cur-

12

Seyed Morteza Mousavi et al.

(a) Stay Regions

(b) Jmin = 0

(c) Jmin = 0.10

(d) Jmin = 0.20

Fig. 2 Results of the Destination Extraction Phase With Diﬀerent Values of Jmin.

rent geometry) by searching only the intersecting cells
instead of searching the whole space of the geometries.
The most costly part in our method is ﬁnding the degree
of similarity between two geometries (Eq. 4). Finding
the geometry of the intersection and the union of two
geometries are costly geometric operators which can not
be facilitated by methods such as spatial indexing.

5.3 From Destination Regions to Geometries of
Interest (GOIs)

So far, we have extracted the list of destination regions
and estimated their geometries. In this stage, we need
to partition our trajectory area into a grid area with
inhomogeneous cells such that the two characteristics
of a valid partitioning are guaranteed (discussed in sec-
tion 3).

Aiming for that, ﬁrstly, we make a grid area with
equi-sized rectangular shaped cells with very ﬁne gran-
ularity (e.g. 1 million cells). The grid covers the area
minimum bounding rectangle (MBR) of our GPS tra-
jectory T . We name this grid Micro-Grid (M G). Then
we make a grid with inhomogeneous cells by considering
the geometry of each destination region in D as a cell.
We name this grid Destination-Grid (DG). The prob-
lem here is how to convert the Destination-Grid (DG)
to the resulting grid called GOI-Grid (GG) with mutu-
aly disjoint cells. To do so, we make an R-Tree index for
the DG cells. This R-tree will be used to facilitate and
improve the eﬃciency of the next steps of the method.
For each cell in Micro-Grid (mi ∈ M G), we ﬁnd the
cell in DG (dj ∈ DG) which maximizes the geomet-
ric similarity with mi. The similarity metrics we use
is inspired by Jaccard similarity (JS) similar to what
deﬁned in Eq. 4.

We also deﬁned and examined another geometric
similarity metric as the Euclidean distance of the cen-
troid of the polygon of a cell in Micro-Grid (cm
i ) to the
centroid of the geometry of the polygon of the cell in
Destination-Grid (cd
j ). We call this geometric similarity
as Polygon Centroid Similarity (PCS). Formally:

P CS(mi, dj) =

1

EucDistance(cm

i , cd
j )

.

Then for each cell mi ∈ M G, we ﬁnd dj ∈ DG which

maximizes the Geometric Similarity (GS). Formally:
dj ∈ DG = argmax

GS(ci, dj).

dj

Next, we label mi as a cell that represents a tiny part
of the destination dj in the Destination-Grid and add it
to the GOI-Grid. We continue this process until there
are no remaining cells in M G which have an intersection
with any of the cells in DG. Formally,
∀mi ∈ M G,(cid:54) ∃dj ∈ DG | Area(mi ∩ dj) > 0.

Now, we have our GOI-Grid with a very ﬁne granu-
larity where each cell is labeled as part of a destination
geometry. By merging the geometries of all the cells
labeled as a part of each cell in DG, we make the GOI-
Grid (depicted in Fig 3(d)). Since we ﬁnd the most sim-
ilar destination for each cell mi ∈ M G, we only label it
to be a part of the geometry of only one destination in
DG. Therefore, it is impossible for a cell in GOI-Grid
to be a part of more than one destination. Therefore,
all the cells in the Final-Grid are geometrically disjoint.
Fig. 3(d) and Fig. 3(c) show the performance of both
geometric similarity metrics. As is clearly seen, the re-
sulting GOI-Grid using JS resembles the Destination-
Grid much better because the PCS method is biased to
the centroid of the polygon and makes the shape of the

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

13

(a) Micro-Grid

(b) Destination-Grid

(c) GOI-Grid ( PCS)

(d) GOI-Grid (JS)

(e) Final-Grid (JS)

Fig. 3 Partitioning Results Using Two Geometric Similarity Metrics.

resulting polygon less similar to the corresponding cell
in the Destination-Grid.

Although our Final-Grid is disjoint and, therefore,
guarantees the ﬁrst condition of a valid spatial condi-
tion, the grid does not cover all of the area of the mini-
mum bounding rectangle of the trajectory. This means
that there might be a GPS observation that does not
lie in the geometry of one of the current GOI-Grid cells.
To tackle this problem, we insert all the cells mi ∈ M G,
which were not already labeled, into the GOI-Grid re-
sulting in the Final-Grid. This results in, all of the area
of the MBR of the trajectory T being covered by either
the cells of GOI-Grid or the cells of the Micro-Grid in
the Final-Grid.

5.3.1 Time Complexity

In the process of assigning each of the cells in Micro-
Grid to the cells in GOI-Grid, the method ﬁnds the
most geometrically similar destination (in Destination-
Grid) using the geometric similarity measure (Eq. 4).
Therefore,
in the worst case the complexity of the
method is O(nm), where n is the number of cells
in the Micro-Grid and m is the number of cells in
the Destination-Grid. Therefore, the granularity of
the Micro-Grid has a signiﬁcant impact on the run-
time of our method. To increase the eﬃciency of the
method we use R-Tree indexing to index the cells in
the Destination-Grid. Then for each cell in the Micro-
Grid, we ﬁnd maximum geometrically similar desti-
nation among the intersecting destinations. Thus, it
is not required to search all the destinations in the
Destination-Grid to ﬁnd the most similar destination.

6 Experimental Evaluation

In this section, we analyze the performance of our pro-
posed method in comparison with methods proposed
in (Ye et al, 2009) and (Hariharan and Toyama, 2004)
in three phases of the method. In our research, we use
a set of GPS trajectories collected from mobile objects
in real world. The dataset is collected in Anchorage,
Alaska, USA as a part of the project FreeSim (Miller
and Horowitz, 2007; Miller, 2009b,a). The trajectory we
use in our experiments in this paper has been collected
from a vehicle for the duration of about 42 months
from 2010 to 2013 with varying sampling rate from
one sample every 10 seconds to one sample every two
minutes. We implemented all the methods in our Java-
based framework called Mobility Analyser. We used
ELKI machine learning library (Schubert et al, 2015),
to implement the OPTICS clustering algorithm in the
destination extraction phase.

6.1 Stay Extraction Experimental Results

We implemented the method depicted in Alg. 1 and
three methods proposed in (Hariharan and Toyama,
2004), and (Ye et al, 2009). We set parameters Dmax =
100meters and Tmin = 60min in our experimental
analysis. We set the Diametermin = 200meters in the
Diameter based method.

Tables 1 shows a comparison of the experimental re-
sults for each stay extraction method run on the trajec-
tory. As it is clearly seen, our time-weighted clustering
method outperforms the other two methods in the num-
ber of extracted clusters. Moreover, our method detects
and report the stay regions with single point while the
other methods simply lose the stay regions.

14

Seyed Morteza Mousavi et al.

Stay Extraction Method

Number of Extracted Stay Regions Number of Single Sized Stay Regions

Reference Point Based (Ye et al, 2009)

Diameter Based (Hariharan and Toyama, 2004)
Time-Weighted Centroid Based (Our Method)

3568
3587
4127

Table 1 Spatio-temporal Stay Region Extraction Results (Tmin = 60min)

0
0

292

(a) Map of the Selected Area in Anchorage, Alaska, USA
(Mapnik)

(b) Diameter Based Stay Extraction Method (Tmin =
60min, Diammax = 200m)

(c) Reference Point Based Based Stay Extraction Method
(Tmin = 60min, Diammax = 200m)

(d) Time-Weighted Centroid Based Stay Extraction Method
(Tmin = 60min, Dmax = 100m)

Fig. 4 Stay Region Extraction Results

As the second criteria for evaluating the stay re-
gion detection methods, we use empirical observation
to compare the performance of our stay region extrac-
tion method with the other two methods. Fig. 4 shows a
visual perspective of the extracted stay regions by each
stay region extraction method discussed above in a se-
lected area of the main GPS trajectory. We selected
this particular region (Fig. 4(a)) because it contains
visual clearly depicted places which indicate the car
parks. We consider the car parks as the highly poten-
tial places which a vehicle stops when visiting a place in
the neighbourhood. Therefore, we consider their geome-
tries as the ground truth for empirical observation. We
cropped the GPS trajectory only to cover the selected
area by removing all the GPS track point lie outside
the geometry of the selected area.

As it is seen in Fig. 4(b), the extracted stay regions
by diameter based method does not have acceptable re-
sults. Although the exacted stay regions intersect with
the car park regions, however, they cover the consid-
erable areas outside the ca parks. The Geolife stay ex-
traction method depicted in Fig. 4(c) has much better
performance compared to diameter based method since
most of the extracted stay regions intersect with the car
parks. However, in the left bottom side of the area, ir-
regular and not relevant stays (according to the car park
geometries) are evident. Fig. 4(d) shows the extracted
stays using our proposed method. Although there are
some minor stay regions extracted outside the car parks
geometries (in places the same as those in Fig. 4(c)), the
extracted stay regions are more compact and more reg-

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

15

ular and more biased to the car parks geometries than
those in Fig 4(c).

The ﬁrst reason which leads our method to perform
better is that our method detects the clusters with only
one member (stay regions with only one GPS track
point). Table 1 shows that our method has extracted
292 clusters or stay regions with only one member. This
is since the other three methods need at least two GPS
points in a cluster to make a valid cluster which has
the duration greater than Tmin with vicinity distance
Dmax. However, there are considerable cases in the real
world that a mobile object stays in vicinity distance
Dmax for a time greater than Tmin but and the subse-
quent GPS point lies outside the vicinity distance. In
these cases, we can consider the stay at the stop point
as a cluster with a single member (stay with single GPS
track point) because it guarantees both conditions of a
valid stay (∆t ≥ Tmin and Dmax and ∆d > Dmax).
All three previous methods compute the value of ∆t
as the time distance between two consecutive points.
However, our method (Alg. 1), incorporates the time-
value of the current track point in computing the ∆t
as (tp
i . The time-value of the current track
point compensated the cases where the next point lies
outside the current stay region but the time distance
is long enough, leading to the stay point with only one
track point being detected.

j ) − tp

j + tvp

The second reason is, similarly, there are other clus-
ters which have members more than one but the time
duration of the stay by considering the time-value of
the last point in the cluster (∆t ← (tp
j ) − tp
i )
becomes greater or equal to Tmin. In this cases, our
method extracts these kinds of clusters while the other
two methods are not capable of extracting them.

j + tvp

The third reason is the use of the time-weighted
centroid as the reference point instead of a considering
a point in (Ye et al, 2009; Xiao et al, 2014). Consider-
ing time-value in computing the time-weighted centroid
leads to the points with long stops having more weight
in computing the centroids and making the resulting
centroids more biased to the real places. Since the di-
ameter based method (Hariharan and Toyama, 2004)
does not use a centroid point or a reference point and
instead uses the diameter of the stay region as the con-
dition of a valid stay, it performs much less accurate
than both methods and extracts fewer stay regions.

6.2 Destination Extraction Experimental Results

In this section, we examine and compare our method
with two destination extraction methods using the same
cropped GPS trajectory discussed in 6.1 which covers
the selected area depicted in 4(a).

Table 2 shows the results for three methods for the
same trajectory analysed in section 6.1. We set param-
eter Fmin = 1 for our method (Geometric Similarity
Based) and Tmin = 60min for all of the methods. It
is evident that the parameters Diametermin, minP ts,
and Jmin have a signiﬁcant impact on the number of
extracted destinations in the three methods. In the di-
ameter based method, the larger Diametermin leads to
a fewer number of destinations since destinations with
the larger area are constructed. The parameter minP ts
has a signiﬁcant impact on the number and the geom-
etry of the density based method. The higher minP ts
leads to a fewer number of destinations. The greater
Jmin in our method leads to higher number of destina-
tions.

Although table 6.2 provided useful

information
about the number of the extracted destinations by each
of the methods, it does not provide more information
about the quality of the extracted destination geome-
tries.

Another way for analysis of the performance of our
method compared to the other methods is to visualise
the extracted destination on the map. Aiming for that
we use the same cropped trajectory we used in sec-
tion 6.1 (the selected area is showed in Fig. 4(a)). Fig. 5
shows the results of the destination extraction methods.
As it is evident the diameter based method (Fig. 5(a))
does not have acceptable performance in extracting the
geometries of the destinations. Although the extracted
destinations do cover the car parks, they have areas
much larger than the car park areas, and also, they have
signiﬁcant overlaps. Density based method has more ac-
ceptable performance than diameter based. However, it
loses some car parks. Moreover, it covers places not re-
lated to the car parks. For example, the destination
depicted in the very bottom of Fig. 5(b) shows a des-
tination which is constructed on the road network in-
stead of the car park. Fig. 5(c) shows the destinations
extracted by our geometric similarity based method.
Comparing the destinations depicted in Fig. 5(c) with
the other two methods shows much better accuracy in
our method. Our method has constructed destination
regions with much more acceptable geometric similarity
to the car parks. They intersect with almost all the par
parks which the mobile object has visited according to
its trajectory.

To analyse the eﬀect of Jmin, the geometric based
destination extraction method is run using two values
for Jmin. Figures 5(c) and 5(e) show the destination ex-
traction results using Jmin = 0 and Jmin = 0.1 respec-
tively. As it is evident in the ﬁgures, the value min = 0
leads to all the geometries of all the destinations being
disjoint. By setting Jmin to values more than zero, there

16

Seyed Morteza Mousavi et al.

(a) Diameter Based Destination Extraction Method (Tmin =
60min, Diametermax = 300m)

(b) Density Based Destination Extraction Method (Tmin =
60min, Dmax = 100m, minP ts = 6, eps = 100m)

(c) Geometric Similarity Based Destination Extraction
Method (Tmin = 60min, Dmax = 100m, Jmin = 0, Fmin = 1 )

(d) Geometric
60min, Dmax = 100m, Jmin = 0, Fmin = 6)

Similarity Based Method

(Tmin

=

(e) Geometric Similarity Based Destination Extraction
Method (Tmin = 60min, Dmax = 100m, Jmin = 0.10, Fmin =
1 )

(f) Geometric
60min, Dmax = 100m, Jmin = 0.10, Fmin = 6)

Similarity Based Method

(Tmin

=

(g) GOI Grid, Geometric Similarity Based Method (Tmin =
60min, Dmax = 100m, Jmin = 0.10, Fmin = 6)

(h) Final-Grid, Geometric Similarity Based Method (Tmin =
60min, Dmax = 100m, Jmin = 0.10, Fmin = 6)

Fig. 5 Destination-Grid, GOI-Grid and Final-Grid Extraction Results

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

17

Destination Extraction Method

Parameters

Number of Stays Number of Destinations

Diameter Based (Hariharan and Toyama, 2004)

Diameter Based
Diameter Based
Diameter Based

Density Based (Ye et al, 2009)

Density Based
Density Based
Density Based

Diametermin = 200m
Diametermin = 300m
Diametermin = 400m
Diametermin = 500m

eps = 100m, minP ts = 3
eps = 100m, minP ts = 6
eps = 100m, minP ts = 9
eps = 100m, minP ts = 12

Geometric Similarity Based (Our Method)

Geometric Similarity Based
Geometric Similarity Based
Geometric Similarity Based

Jmin = 0

Jmin = 0.05
Jmin = 0.10
Jmin = 0.15

Table 2 Destination Regions Extraction Results (Tmin = 60min, Fmin = 1)

3587
3587
3587
3587

3566
3566
3566
3566

4127
4127
4127
4127

304
166
128
92

456
206
120
79

364
434
490
549

might be intersecting destination regions in the results.
Also, by setting the parameter Jmin to higher values in
the distance (0, 1) the number of the destinations in-
creases. The value Jmin = 1 leads the number of the
extracted destinations to be the same as the number of
the stays being merged.

Figures. 5(c) and 5(e) show the extracted destina-
tions with Fmin = 1. Figures 5(d) and 5(f) show the
extracted destinations with Fmin = 6. Comparison of
the ﬁgures clearly shows the eﬀect of parameter Fmin
in our destination extraction method. The destinations
with fewer visit frequencies have been eliminated from
the Destination-Grids, and only the destinations which
have the highest intersection and the most geometric
similarity to car park areas have been left.

Moreover, Comparing two ﬁgures 5(d) and 5(f) show
the eﬀect of the value of Jmin on the extracted desti-
nations. The extracted destinations in both ﬁgures are
quite similar except for the destination in the middle of
the area. Fig. 5(d) has merged the area of the two neigh-
bouring car parks together while Fig. 5(f) has extracted
two distinct geometries for the same destination. This
shows the better performance of the method with pa-
rameter Jmin = 0.1. A closer scrutiny shows that the
similarity of the other destinations to the corresponding
car parks is slightly higher than in Fig 5(f) since it the
method ﬁltered out the stay regions not quite relevant
to the car parks better than the method with Jmin = 0.
Fig. 5(g) and Fig. 5(h) show the ﬁnal results of our
partitioning process. After extracting the stay regions
and extracting the destination geometries by merging
the stay regions, we construct the GOI and Final-Grids
using our partitioning method discussed in 5.3. The
GOI-Grid, which is the result of the partitioning the
trajectory area based on the destinations in Fig. 5(f)
is showed in Fig. 5(g). It is clearly seen that the parti-
tioning method has resolved the problem of two desti-

nations having a geometric intersection. The two desti-
nation regions in the middle of the Fig. 5(f) have been
partitioned into two distinct cells in GOI-Grid without
having any intersection.

The Final-Grid is depicted in Fig. 5(h). The Final-
Grid is the last result of our partitioning. It guarantees
two characteristics of a valid partition. It covers all the
trajectory area which leads to the time series genera-
tor method be able to label all the GPS track points
regardless of the fact that they intersect with a GOI
or not. The cells in the Final-Grid do not overlap since
each cell in the Micro Grid is assigned to only one cell
in the GOI-Grid. The union of all the Final-Grid cell
makes the minimum bounding rectangle of the trajec-
tory area.

7 Conclusion and Future Work

The problem of extracting the geometries of points of
interest of mobile objects (GOIs) has been overlooked
in the related works and only been consider as a mi-
nor pre-processing phase in the applications which deal
with trajectory data. In this paper, we proposed and
analyzed a novel and comprehensive method for spatio-
temporal partitioning of the areas of a trajectory of a
moving object. To the best of our knowledge, this re-
search is the only research work which covers all the
steps of the spatio-temporal partitioning while it out-
performs the performance of the state-of-the-art. This
research shows that the previous commonly used desti-
nation extraction methods do not perform acceptably,
and it is required to be addressed with more attention.
For the future work, We will focus on improving the per-
formance and the accuracy of our proposed partition-
ing methods by using the data aggregation and outlier
detection techniques. We will apply the method as a

18

Seyed Morteza Mousavi et al.

pre-processing phase in our location prediction method
in GPS trajectories and analyse the methods eﬀect on
the quality of the generated time series and the perfor-
mance of the location prediction methods.

Acknowledgement

A version of this technical report has been submitted to
the Springer Journal of Ambient Intelligence and Hu-
manized Computing (Springer, 2016) and it is under
review.

References

Alvares LO, Bogorny V, Kuijpers B, de Macedo JAF,
Moelans B, Vaisman A (2007) A model for enriching
trajectories with semantic geographical information.
In: Proceedings of the 15th Annual ACM Interna-
tional Symposium on Advances in Geographic Infor-
mation Systems, ACM, New York, NY, USA, GIS
’07, pp 22:1–22:8

Andrew A (1979) Another eﬃcient algorithm for con-
vex hulls in two dimensions. Information Processing
Letters 9(5):216 – 219

Ankerst M, Breunig MM, Kriegel HP, Sander J (1999)
Optics: ordering points to identify the clustering
structure. In: ACM Sigmod Record, ACM, vol 28,
pp 49–60

Ashbrook D, Starner T (2003) Using gps to learn signif-
icant locations and predict movement across multiple
users. Personal and Ubiquitous Computing 7(5):275–
286

Aurenhammer F (1991) Voronoi diagrams&mdash;a
survey of a fundamental geometric data structure.
ACM Comput Surv 23(3):pp. 345–405

Banﬁeld JD, Raftery AE (1993) Model-based gaussian
and non-gaussian clustering. Biometrics pp 803–821
Bhattacharya T, Kulik L, Bailey J (2012) Extracting
signiﬁcant places from mobile user gps trajectories:
A bearing change based approach. In: Proceedings
of the 20th International Conference on Advances in
Geographic Information Systems, ACM, New York,
NY, USA, SIGSPATIAL ’12, pp 398–401

Bhattacharya T, Kulik L, Bailey J (2015) Automat-
ically recognizing places of interest from unreliable
{GPS} data using spatio-temporal density estima-
tion and line intersections. Pervasive and Mobile
Computing 19:pp. 86 – 107

Bogorny V, Kuijpers B, Alvares LO (2009) St-dmql: a
semantic trajectory data mining query language. In-
ternational Journal of Geographical Information Sci-
ence 23(10):1245–1276

Cho E, Myers SA, Leskovec J (2011) Friendship and
mobility: User movement in location-based social net-
works. In: Proceedings of the 17th ACM SIGKDD In-
ternational Conference on Knowledge Discovery and
Data Mining, ACM, New York, NY, USA, KDD ’11,
pp 1082–1090

Ester M, peter Kriegel H, S J, Xu X (1996) A density-
based algorithm for discovering clusters in large spa-
tial databases with noise. AAAI Press, pp 226–231

Gid´ofalvi G, Dong F (2012) When and where next: in-
dividual mobility prediction. In: MobiGIS, pp 57–64
Greaves S, Figliozzi M (2008) Collecting commercial ve-
hicle tour data with passive global positioning system
technology: Issues and potential applications. Trans-
portation Research Record: Journal of the Trans-
portation Research Board 2049:158–166

Han J (2005) Data Mining: Concepts and Techniques.
Morgan Kaufmann Publishers Inc., San Francisco,
CA, USA

Handcock RN, Swain DL, Bishop-Hurley GJ, Patison
KP, Wark T, Valencia P, Corke P, ONeill CJ (2009)
Monitoring animal behaviour and environmental in-
teractions using wireless sensor networks, gps collars
and satellite remote sensing. Sensors 9(5):pp. 3586–
3603

Hariharan R, Toyama K (2004) Project lachesis: Pars-
ing and modeling location histories. In: Egenhofer M,
Freksa C, Miller H (eds) Geographic Information Sci-
ence, Lecture Notes in Computer Science, vol 3234,
Springer Berlin Heidelberg, pp 106–124

Jeung H, Yiu ML, Jensen CS (2011) Trajectory pattern
mining. In: Computing with Spatial Trajectories, pp
143–177

Ji X, Zha H (2004) Sensor positioning in wireless ad-
hoc sensor networks using multidimensional scaling.
In: INFOCOM 2004. Twenty-third AnnualJoint Con-
ference of the IEEE Computer and Communications
Societies, vol 4, pp 2652–2661 vol.4

Jr JHW (1963) Hierarchical grouping to optimize an
objective function. Journal of the American Statisti-
cal Association 58(301):236–244

Kang JH, Welbourne W, Stewart B, Borriello G (2005)
Extracting places from traces of locations. SIGMO-
BILE Mob Comput Commun Rev 9(3):58–68

Kourogi M, Sakata N, Okuma T, Kurata T (2006) In-
door/outdoor pedestrian navigation with an embed-
ded gps/rﬁd/self-contained sensor system. In: Pan
Z, Cheok A, Haller M, Lau R, Saito H, Liang
R (eds) Advances in Artiﬁcial Reality and Tele-
Existence, Lecture Notes in Computer Science, vol
4282, Springer Berlin Heidelberg, pp 1310–1321

Krumm J (2011) Trajectory analysis for driving. In:

Computing with Spatial Trajectories, pp 213–241

Geometry of Interest (GOI): Spatio-Temporal Destination Extraction and Partitioning in GPS Trajectory Data

19

Laasonen K, Raento M, Toivonen H (2004) Adaptive
on-device location recognition. In: Ferscha A, Mat-
tern F (eds) Pervasive Computing, Lecture Notes in
Computer Science, vol 3001, Springer Berlin Heidel-
berg, pp 287–304

Lane ND, Lymberopoulos D, Zhao F, Campbell AT
(2010) Hapori: Context-based local search for mobile
phones using community behavioral modeling and
similarity. In: Proceedings of the 12th ACM Interna-
tional Conference on Ubiquitous Computing, ACM,
New York, NY, USA, UbiComp ’10, pp 109–118

Li N, Chen G (2009) Analysis of a location-based social
network. In: Computational Science and Engineering,
2009. CSE ’09. International Conference on, vol 4, pp
263–270

Li Z, Han J, Ji M, Tang LA, Yu Y, Ding B, Lee JG,
Kays R (2011) Movemine: Mining moving object data
for discovery of animal movement patterns. ACM
TIST 2(4):pp. 37–57

Li Z, Han J, Ding B, Kays R (2012) Mining periodic
behaviors of object movements for animal and biolog-
ical sustainability studies. Data Min Knowl Discov
24(2):pp. 355–386

Lian D, Xie X (2011) Learning location naming from
user check-in histories. In: Proceedings of the 19th
ACM SIGSPATIAL International Conference on Ad-
vances in Geographic Information Systems, ACM,
New York, NY, USA, GIS ’11, pp 112–121

Long J, Nelson T (2013) A review of quantitative meth-
ods for movement data. INTERNATIONAL JOUR-
NAL OF GEOGRAPHICAL INFORMATION SCI-
ENCE 27(2):pp. 292 – 318

Macagnano D, Destino G, Abreu G (2014) Indoor po-
sitioning: A key enabling technology for iot applica-
tions. In: Internet of Things (WF-IoT), 2014 IEEE
World Forum on, pp 117–118

MacQueen J (1967) Some methods for classiﬁcation and
analysis of multivariate observations. In: Proceedings
of the Fifth Berkeley Symposium on Mathematical
Statistics and Probability, Volume 1: Statistics, Uni-
versity of California Press, Berkeley, Calif., pp 281–
297

Miller J (2009a) Dynamically computing fastest paths
Intelligent
for intelligent transportation systems.
Transportation Systems Magazine, IEEE 1(1):pp.
20–26

Miller J (2009b) Fastest path analysis in a vehicle-to-
infrastructure intelligent transportation system ar-
chitecture. In: Intelligent Vehicles Symposium, 2009
IEEE, pp 1125–1130

18–23

Min W, Wynter L (2011) Real-time road traﬃc pre-
diction with spatio-temporal correlations. Trans-
portation Research Part C: Emerging Technologies
19(4):pp. 606 – 616

Navstar G (2008) Gps standard positioning service
(sps). URL http://www.gps.gov/technical/ps/
2008-SPS-performance-standard.pdf

Palma AT, Bogorny V, Kuijpers B, Alvares LO (2008)
A clustering-based approach for discovering interest-
ing places in trajectories. In: Proceedings of the 2008
ACM Symposium on Applied Computing, ACM,
New York, NY, USA, SAC ’08, pp 863–868

Pathirana PN, Savkin AV, Jha S (2003) Mobility mod-
elling and trajectory prediction for cellular networks
with mobile base stations. In: Proceedings of the 4th
ACM International Symposium on Mobile Ad Hoc
Networking &Amp; Computing, ACM, New York,
NY, USA, MobiHoc ’03, pp 213–221

Rahmani M, Koutsopoulos HN (2013) Path inference
from sparse ﬂoating car data for urban networks.
Transportation Research Part C: Emerging Tech-
nologies 30:pp. 41 –54

Scellato S, Musolesi M, Mascolo C, Latora V, Campbell
AT (2011a) Nextplace: A spatio-temporal prediction
framework for pervasive systems. In: Pervasive, pp
152–169

Scellato S, Noulas A, Mascolo C (2011b) Exploiting
place features in link prediction on location-based
social networks. In: Proceedings of the 17th ACM
SIGKDD International Conference on Knowledge
Discovery and Data Mining, ACM, New York, NY,
USA, KDD ’11, pp 1046–1054

Schubert E, Koos A, Emrich T, Z¨uﬂe A, Schmid KA,
Zimek A (2015) A framework for clustering uncertain
data. PVLDB 8(12):1976–1987

Sharman B, Roorda M (2011) Analysis of

freight
global positioning system data: Clustering approach
for identifying trip destinations. Transportation Re-
search Record: Journal of the Transportation Re-
search Board (2246):83–91

Shaw B, Shea J, Sinha S, Hogue A (2013) Learning
to rank for spatiotemporal search. In: Proceedings
of the Sixth ACM International Conference on Web
Search and Data Mining, ACM, New York, NY, USA,
WSDM ’13, pp 717–726

Si H, Wang Y, Yuan J, Shan X (2010) Mobility predic-
tion in cellular network using hidden markov model.
In: Consumer Communications and Networking Con-
ference (CCNC), 2010 7th IEEE, pp 1–5

Miller J, Horowitz E (2007) Freesim - a free real-time
freeway traﬃc simulator. In: Intelligent Transporta-
tion Systems Conference, 2007. ITSC 2007. IEEE, pp

Song L, Kotz D, Jain R, He X (2004) Evaluating lo-
cation predictors with extensive wi-ﬁ mobility data.
In: INFOCOM 2004. Twenty-third AnnualJoint Con-

20

Seyed Morteza Mousavi et al.

ference of the IEEE Computer and Communications
Societies, vol 2, pp 1414–1424 vol.2

Song L, Deshpande U, Kozat U, Kotz D, Jain R (2006)
Predictability of wlan mobility and its eﬀects on
bandwidth provisioning. In: INFOCOM 2006. 25th
IEEE International Conference on Computer Com-
munications. Proceedings, pp 1–13

Springer (2016) Journal of ambient intelligence and hu-
manized computing. URL http://www.springer.
com/engineering/computational+intelligence+
and+complexity/journal/12652

Thiagarajan A, Ravindranath L, LaCurts K, Mad-
den S, Balakrishnan H, Toledo S, Eriksson J (2009)
Vtrack: accurate, energy-aware road traﬃc delay es-
timation using mobile phones. In: Proceedings of the
7th ACM Conference on Embedded Networked Sen-
sor Systems, ACM, New York, NY, USA, SenSys ’09,
pp 85 –98

Trajcevski G (2011) Uncertainty in spatial trajectories.
In: Computing with Spatial Trajectories, pp 63–107
Ungar ED, Henkin Z, Gutman M, Dolev A, Genizi
A, Ganskopp D (2005) Inference of animal activity
from gps collar data on free-ranging cattle. Range-
land Ecology & Management 58(3):pp. 256–266

Winter S, Yin ZC (2010) Directed movements in prob-
abilistic time geography. International Journal of Ge-
ographical Information Science 24(9):pp. 1349–1365
Winter S, Yin ZC (2011) The elements of probabilistic

time geography. GeoInformatica 15(3):pp. 417–434

Xiao X, Zheng Y, Luo Q, Xie X (2010) Finding sim-
ilar users using category-based location history. In:
Proceedings of the 18th SIGSPATIAL International
Conference on Advances in Geographic Information
Systems, ACM, New York, NY, USA, GIS ’10, pp
442–445

Xiao X, Zheng Y, Luo Q, Xie X (2014) Inferring social
ties between users with human location history. Jour-
nal of Ambient Intelligence and Humanized Comput-
ing 5(1):pp. 3–19

Xue AY, Zhang R, Zheng Y, Xie X, Huang J, Xu Z
(2013) Destination prediction by sub-trajectory syn-
thesis and privacy protection against such prediction.
In: IEEE International Conference on Data Engineer-
ing (ICDE 2013), IEEE

Ye M, Yin P, Lee WC (2010) Location recommendation
for location-based social networks. In: Proceedings of
the 18th SIGSPATIAL International Conference on
Advances in Geographic Information Systems, ACM,
New York, NY, USA, GIS ’10, pp 458–461

Ye Y, Zheng Y, Chen Y, Feng J, Xie X (2009) Min-
ing individual life pattern based on location history.
In: Mobile Data Management: Systems, Services and
Middleware, 2009. MDM ’09. Tenth International

Conference on, pp 1–10

Yuan J, Zheng Y, Zhang C, Xie X, Sun GZ (2010) An
interactive-voting based map matching algorithm. In:
Proceedings of the 2010 Eleventh International Con-
ference on Mobile Data Management, IEEE Com-
puter Society, Washington, DC, USA, MDM ’10, pp
43 –52

Zheng K, Zheng Y, Xie X, Zhou X (2012a) Reduc-
ing uncertainty of low-sampling-rate trajectories. In:
Proceedings of the 2012 IEEE 28th International
Conference on Data Engineering, IEEE Computer
Society, Washington, DC, USA, ICDE ’12, pp 1144
–1155
Zheng VW, Zheng Y, Xie X, Yang Q (2012b) To-
wards mobile intelligence: Learning from {GPS} his-
tory data for collaborative recommendation. Artiﬁ-
cial Intelligence 184185:pp. 17 – 37

Zheng Y, Zhou X (eds) (2011) Computing with Spatial

Trajectories. Springer

Zheng Y, Li Q, Chen Y, Xie X, Ma WY (2008a) Under-
standing mobility based on gps data. In: Proceedings
of the 10th international conference on Ubiquitous
computing, ACM, New York, NY, USA, UbiComp
’08, pp 312 –321

Zheng Y, Li Q, Chen Y, Xie X, Ma WY (2008b) Under-
standing mobility based on gps data. In: Proceedings
of the 10th international conference on Ubiquitous
computing, ACM, New York, NY, USA, UbiComp
’08, pp 312–321

Zheng Y, Zhang L, Xie X, Ma WY (2009) Mining inter-
esting locations and travel sequences from gps trajec-
tories. In: Proceedings of the 18th international con-
ference on World wide web, ACM, New York, NY,
USA, WWW ’09, pp 791–800

Zheng Y, Chen Y, Li Q, Xie X, Ma WY (2010) Under-
standing transportation modes based on gps data for
web applications. ACM Trans Web 4(1):1:1–1:36

Zhou C, Frankowski D, Ludford P, Shekhar S, Terveen
L (2004) Discovering personal gazetteers: An interac-
tive clustering approach. In: Proceedings of the 12th
Annual ACM International Workshop on Geographic
Information Systems, ACM, New York, NY, USA,
GIS ’04, pp 266–273

Zhu K, Niyato D, Wang P, Hossain E, In Kim D (2011)
Mobility and handoﬀ management in vehicular net-
works: a survey. Wireless communications and mobile
computing 11(4):pp. 459 –476

