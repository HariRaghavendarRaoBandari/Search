6
1
0
2

 
r
a

 

M
3
1
 
 
]

.

O
C
h
t
a
m

[
 
 

2
v
0
6
9
2
0

.

3
0
6
1
:
v
i
X
r
a

Maximising the number of induced cycles in a graph∗

Natasha Morrison†

Alex Scott†

March 15, 2016

Abstract

We determine the maximum number of induced cycles that can be contained in a
graph on n ≥ n0 vertices, and show that there is a unique graph that achieves this
maximum. This answers a question of Tuza [14]. We also determine the maximum
number of odd or even cycles that can be contained in a graph on n ≥ n0 vertices and
characterise the extremal graphs. This proves a conjecture of Chv´atal and Tuza from
1988 [14].

1

Introduction

What is the maximum number of induced cycles in a graph on n vertices? For cycles of ﬁxed
length, this problem has been extensively studied. Indeed, for any ﬁxed graph H, let the
induced density of H in a graph G be the number of induced copies of H in G divided by

(cid:0)|G|
|H|(cid:1); let I(H; n) be the maximum induced density of H over all graphs G on n vertices; and

let the inducibility of H be the limit limn→∞ I(H; n). In 1975, Pippinger and Golumbic [12]
made the following conjecture.

Conjecture 1.1. [12] For k ≥ 5, the inducibility of the cycle Ck is k!/(kk − k).

Balogh, Hu, Lidick´y and Pfender [2] recently proved this conjecture in the case k = 5
via a ﬂag algebra method, and showed that the maximum density was achieved by a unique
graph. Apart from this case, the problem remains open (though see [3, 4, 5, 6, 7, 8, 9] for
results on inducibility of other graphs).

In this paper, we consider the total number of induced cycles in a graph (without restric-
tion on length). Tuza (see [14]) asked for the maximum possible number of induced cycles
in a graph with n vertices. The problem was investigated independently by Robson [10, 13],
who showed in the 1980s that a graph on n vertices has at most 3(1+o(1))n/3 induced cycles.

∗Work partially done during the 2015 Barbados Workshop on Structural Graph Theory. The attendance

of the ﬁrst author was possible due to the generous support of Merton College Oxford.

†Mathematical Institute, University of Oxford, Woodstock Road, Oxford, OX2 6GG, United Kingdom.

E-mail: {morrison,scott}@maths.ox.ac.uk.

1

Tuza also asked about the number of odd induced cycles: in 1988 (see [14]) he conjectured
with Chv´atal that the maximum possible number of odd induced cycles in a graph on n
vertices is 3n/3. In this paper we resolve both problems, proving exact bounds for all suﬃ-
ciently large n, and determining the extremal graphs. Thus we will determine, for suﬃciently
large n, the graphs with n vertices that maximize the number of induced cycles; we will also
determine the graphs with the maximum number of even cycles, the maximum number of
odd cycles, and the maximum number of odd holes (i.e. induced odd cycles of length at least
5).

In order to state our results, it will be helpful to have a couple of deﬁnitions. As usual,
for G a graph we deﬁne the neighbourhood of x to be NG(x) := {y ∈ V (G) : xy ∈ E(G)}.
We say that a graph B := (B1, . . . , Bk) is a cyclic braid if there exists a partition B1, . . . , Bk
of V (B) such that for every 0 ≤ i ≤ k − 1 and every x ∈ Bi we have Bi−1 ∪ Bi+1 ⊆ NB(x) ⊆
Bi−1 ∪ Bi ∪ Bi+1 where indices are taken modulo k. We call the sets Bi clusters of B; the
length of the cyclic braid is the number of clusters. If a cyclic braid contains no edges within
its clusters, we call it an empty cyclic braid. If it contains every edge within its clusters, we
say that it is full. We say a pair of clusters C1 and C2 are adjacent in G if v1v2 ∈ E(G)
for all v1 ∈ C1 and v2 ∈ C2. We say a triple of clusters C1, C2, C3 are consecutive if C1 is
adjacent to C2 and C2 is adjacent to C3.
As we will see, the structure of the extremal graph will depend on the value of n modulo
3. For n ≥ 8 we deﬁne an n-vertex graph Hn separately for each value of n modulo 3. Let
k ≥ 3. We deﬁne H3k to be the empty cyclic braid of length k where every cluster has size
3. We deﬁne H3k+1 to be the empty cyclic braid containing k − 1 clusters of size 3 and one
of size 4. Finally, we deﬁne H3k−1 to be the empty cyclic braid containing k − 1 clusters of
size 3 and one of size 2.
Let m(n) be the maximum number of induced cycles that can be contained in a graph

on n vertices. We shall prove the following.
Theorem 1.2. There exists n0 such that, for all n ≥ n0, Hn is the unique graph on n
vertices containing m(n) induced cycles.

This implies immediately that m(n) = Θ(3n/3). More precisely, we get the following.

Corollary 1.3. There exists n0 such that, for all n ≥ n0, we have that
for n ≡ 0 modulo 3
for n ≡ 1 modulo 3
for n ≡ 2 modulo 3

4 · 3(n−4)/3 + 12n + 51
2 · 3(n−2)/3 + 12n − 36

3n/3 + 12n

m(n) = 


A hole is an induced cycle of length at least 4. For n ≥ 10, the graph Hn does not contain

any triangles, so we get the following corollary.
Corollary 1.4. There exists n0 such that, for all n ≥ n0, Hn is the unique graph on n
vertices with the maximum number of holes.

Using similar arguments to those in the proof of Theorem 1.2 we can also prove a stability-

type result.

2

Theorem 1.5. Let 0 < α < 1 be a ﬁxed constant. For n0 suﬃciently large, let F be a graph
on n ≥ n0 vertices containing at least α · m(n) induced cycles. Then we can change edges
incident to O(1) vertices of F to create a cyclic braid with the same cluster sizes as Hn.

A stability analogue of Theorem 1.2 easily follows.

Corollary 1.6. Let 0 < α < 1 be a ﬁxed constant. For n0 suﬃciently large, let F be a graph
on n ≥ n0 vertices containing at least α · m(n) induced cycles. Then we can create a graph
isomorphic to Hn by adding and deleting O(n) edges from F .

The corollary follows directly from Theorem 1.5 and the observation that at most O(n)
edges can be added to Hn in such a way that they are contained within the clusters of Hn.
The arguments used to prove Theorem 1.2 can be adapted to give results about other
sets of induced cycles, for instance induced cycles of given parity. We say that a path or
cycle is odd if it has odd length (even if it has even length).

Let mo(n) be the maximum number of induced odd cycles that can be contained in a
graph on n vertices. The value of mo(n) and the structure of the extremal graphs depends
on the the value of n modulo 6.

Let Gn to be the full cyclic braid on n vertices whose clusters all have size 3 except for:

• three consecutive clusters of size 2, when n ≡ 0 modulo 6;
• two adjacent clusters of size 2, when n ≡ 1 modulo 6;
• one cluster of size 2, when n ≡ 2 modulo 6;
• one cluster of size 4, when n ≡ 4 modulo 6;
• two adjacent clusters of size 4, when n ≡ 5 modulo 6.
We will prove the following.

Theorem 1.7. There exists n0 such that, for all n ≥ n0, Gn is the unique n-vertex graph
containing mo(n) induced odd cycles.

Thus, mo(n) = Θ(3n/3). If we consider odd holes (induced odd cycles of length at least 5),
o (n) be the maximum

we get the same bound but a larger family of extremal graphs. Let mh
number of odd holes that can be contained in a graph on n vertices.

Deﬁne Gn to be the family of cyclic braids on n vertices whose cluster sizes are the same
as the cluster sizes in Gn, but with no restrictions on which clusters must be adjacent or
consecutive, or on which edges are present inside the clusters; in addition, when n ≡ 5
modulo 6, we also include the cyclic braids whose clusters all have size 3 except for four
clusters of size 2.

A modiﬁcation of the proof of Theorem 1.7 gives the following.

Theorem 1.8. There exists n0 such that, for all n ≥ n0, the family of n-vertex graphs that
contain mh

o (n) odd holes is Gn.

3

The same techniques can be used to prove an analogous theorem for even cycles. Let
me(n) be the maximum number of induced even cycles that can be contained in a graph on
n vertices, and deﬁne En to be the empty cyclic braid on n vertices whose clusters all have
size 3 except for:

• one cluster of size 4, when n ≡ 1 modulo 6;
• two adjacent clusters of size 4, when n ≡ 2 modulo 6;
• three consecutive clusters of size 2, when n ≡ 3 modulo 6;
• two adjacent clusters of size 2, when n ≡ 4 modulo 6; and
• one cluster of size 2, when n ≡ 5 modulo 6.
The proof of Theorem 1.7 can be adapted similarly.

Theorem 1.9. There exists n0 such that, for all n ≥ n0, En is the unique n-vertex graph
containing me(n) induced even cycles.

As in the case of mo(n), we have me(n) = Θ(3n/3).
Our paper is structured as follows. In Section 2 we prove a preliminary result determining
the structure of the n-vertex graphs that maximise the number of induced paths between a
particular pair of vertices. During the proof of this result we will introduce several of the
key ideas needed later. We then prove our main theorem in Section 3, using the preliminary
result from Section 2. In Section 4 we prove Theorem 1.5, using key results from the proof
of Theorem 1.2. We use very similar techniques in Section 5 to prove Theorem 1.7. From
here it is easy to determine the n-vertex graphs that contain the maximum number of odd
holes. Finally, in Section 6 we conclude by discussing some open questions.

2

Induced paths between a pair of vertices

Let G be a graph and let x and y be distinct vertices in V (G). We deﬁne p2(G; x, y) to be
the number of induced paths in G beginning at x and ending at y. We also deﬁne:

and

p2(G) := max{p2(G; x, y) : x, y ∈ V (G)},

p2(n) := max{p2(G) : |V (G)| = n}.

Our ﬁrst goal in this section is to determine the structure of the n-vertex graphs that contain
p2(n) induced paths between some pair of vertices. We will see that these extremal graphs
have a particular structure that depends on the value of n modulo 3. We will then prove
analogous results for odd and even length paths.

Let F be a graph and let B1, . . . , Bk be disjoint subsets of V (F ). We say that B :=
(B1, . . . , Bk) is a braid in F if for each 2 ≤ i ≤ k − 1 and for every x ∈ Bi we have

4

Bi−1 ∪ Bi+1 ⊆ NF (x) ⊆ Bi−1 ∪ Bi ∪ Bi+1. We refer to the sets Bi as clusters. If i ∈ {1, k} we
say Bi is an end cluster ; otherwise we say Bi is a central cluster. If V (F ) = Sk
i=1 Bi, we say
that F is a braid. The length of a braid is the number of clusters it contains. As indicated
in the introduction, we say that B is a cyclic braid if for every 0 ≤ i ≤ k − 1 and every
x ∈ Bi we have Bi−1 ∪ Bi+1 ⊆ NF (x) ⊆ Bi−1 ∪ Bi ∪ Bi+1 where indices are taken modulo k.
If a cyclic braid contains no edges within its clusters, we call it an empty cyclic braid. If it
contains every edge within its clusters, we call it a full cyclic braid.

Let n ≥ 4. We deﬁne F (n) to be the set of all braids B with the following properties.
• |V (B)| = n.
• B has end clusters of size one.
• All central clusters of B have size three except:

– either a single cluster of size 4 or two clusters of size 2, when n ≡ 0 modulo 3;
– a single cluster of size 2, when n ≡ 1 modulo 3.

Figure 1: An example of a braid in F (10). There may or may not be edges within the
clusters.

Let the end clusters be {x} and {y}. It is not diﬃcult to check that for all F ∈ F (n) we
have p2(F ) = p2(F ; x, y). Every graph in F (n) contains the same number of induced paths
between x and y and so we deﬁne

f2(n) = 


3(n−2)/3
4 · 3(n−6)/3
2 · 3(n−4)/3

for n ≡ 2 modulo 3
for n ≡ 0 modulo 3
for n ≡ 1 modulo 3

and observe that p2(F ) = f2(n) for all F ∈ F (n).

We will prove the following.

Theorem 2.1. Let G be a ﬁnite graph on n ≥ 4 vertices and let x and y be distinct vertices
of G. Suppose that G contains p2(n) induced paths between x and y. Then G is isomorphic
to a graph in F (n) with end clusters {x} and {y}.

5

In particular, this gives the following.

Corollary 2.2. For all n ≥ 4, we have p2(n) = f2(n).

Before proving Theorem 2.1, we introduce some preliminary notation and deﬁnitions.

Deﬁnition 2.3. For a vertex v ∈ V (G), let N i(v) be the set of points at distance exactly
i from v. We deﬁne N k[v] to be the set of points within distance k of v (for example
N 3[v] = {v} ∪ S3
i=1 N i(v)), and we deﬁne N[v] := N 1[v] = N(v) ∪ {v}. Also, for a set
X ⊆ V (G), let N(X) := Sx∈X N(x), and N[X] := Sx∈X N[x]. Note that X ⊆ N[X], and
X ∩ N(X) may or may not be empty. For a subgraph H ⊆ G, we deﬁne N(H) := N(V (H))
and N[H] := N[V (H)].

In order to prove Theorem 2.1, we require the following concept.

Deﬁnition 2.4. Let G be a ﬁnite graph and x, y ∈ V (G), with y /∈ N[x]. The x-y-path tree
of G is a tree T = T (x, y) together with a function t : V (T ) → V (G) deﬁned as follows.

• T is a tree with vertex set V (T ) disjoint from V (G). The tree T is rooted at v0 ∈ V (T )

and we deﬁne t(v0) := x.

• We deﬁne the tree in layers L0, L1, . . . , such that vertices in Lj are at distance j from
v0 in T . For any vertex vi ∈ Li, we let Pvi := v0, v1, . . . , vi−1, vi be the unique path
from v0 to vi in T . The tree will have the property that the set t(Pvi) induces a
path in G, where we write t(S) := {t(x) : x ∈ S} for any subset S ⊆ V (T ) and
t(H) := G[{t(x) : x ∈ V (H)}] for any subgraph H ⊆ T .

• Given a set P ⊆ V (T ), we say that P sees a vertex w ∈ V (G) if w ∈ NG[t(P )]. If

w 6∈ NG[t(P )], we say that w is unseen by P .

• Deﬁne L0 := {v0}. Given Li, we deﬁne Li+1 as follows. For each vertex u ∈ Li:

– If t(u) = y, then u is a leaf of T ; it has no neighbours in Li+1.
– If t(u) has no neighbours in G that are unseen by V (Pu)\{u}, then u is a leaf of

T .

– If y is a neighbour of t(u) in G, then u has exactly one neighbour in Li+1: a vertex

w such that t(w) = y.

– Otherwise, let {w1, . . . , wr} ⊆ V (G) be the set of vertices in NG(t(u)) unseen by
V (Pu)\{u}. We deﬁne the neighbours of u in Li+1 to be a set of new vertices
{v1, . . . , vr} ⊆ Li+1 and deﬁne t(vi) := wi. We call the vertices in N(u) ∩ Li+1
children of u.

This process must terminate as G is ﬁnite.

6

By construction, when P is a path in T that starts at the root v0, we have t(u) 6= t(v)
for all u, v ∈ NT [P ]. For any leaf l ∈ T such that t(l) = y, we have that t(Pl) is an induced
path from x to y in G. Moreover, let x0, . . . , xl be any induced path in G, with x0 = x and
xl = y. Then there exists a unique path v0, . . . , vl in T , satisfying t(vl) = xl (and vl is a leaf
of T ).

Proposition 2.5. Let P be a path in T starting at v0. If V (P ) sees a vertex w ∈ V (G),
then there exists a unique u ∈ NT [V (P )] such that t(u) = w.
Proof. This follows immediately from the construction of T : u is a child in T of the ﬁrst
vertex v in P such that t(v) is adjacent to w in G.

The following terminology will also be used later in the proof of Theorem 1.2.

Deﬁnition 2.6. Let T be an x-y-path tree. Given a vertex u ∈ Li, and a vertex w ∈ Lj
for j > i, if the unique path from u to w does not contain any vertex in Sk<i Lk, then we
say w is a descendant of u. For a vertex z ∈ T , deﬁne B(z), the branch rooted at z, to be
the subtree induced by z and its descendants, deﬁne L(z) to be the number of leaves of T
that are contained in B(z) and Ly(z) to be the number of leaves l in T contained in B(z)
such that t(l) = y. Deﬁne C(z) to be the set of children of z and let D(z) := |C(z)|. If it is
unclear which tree we are considering, we will write BT (z), LT (z), etc.

In order to prove Theorem 2.1, we require the following lemma about x-y-path trees.

Lemma 2.7. Let G be a graph on n ≥ 4 vertices. Let x and y be distinct vertices in V (G),
with y /∈ N[x]. Let T be the x-y-path tree rooted at v0 and P := x0, . . . , xk be any path in T
where x0 = v0 and vk is a leaf. Then:

(i) Ly(v0) ≤ f2(n).
(ii) If Ly(v0) = f2(n), then for any xj and for all u, w ∈ C(xj), we have Ly(u) = Ly(w).

Also, t(xk) = y and V (P )\{xk} sees every vertex of G.

Proof. We sequentially choose a path v0, v1, . . . , vk ⊆ V (T ), where vi ∈ Li and vk is a leaf.
At vertex vj we choose vj+1 to be some z ∈ C(vj) such that Ly(z) = max{Ly(x) : x ∈ C(vj)}.
Let P be the set of paths that can be obtained in this manner and ﬁx P := v0, . . . , vk ∈ P.
Observe that D(vj) = |C(vj)| is in fact the number of neighbours of t(vj) in G unseen by
Pvj−1. For 0 ≤ i ≤ k − 1, we have

Ly(vi) = Xz∈C(vi)

Ly(z) ≤ D(vi) max{Ly(z) : z ∈ C(vi)} = D(vi)Ly(vi+1).

(2.1)

By repeatedly applying (2.1) we get

Ly(v0) ≤ D(v0) max{Ly(z) : z ∈ C(v0)} ≤ . . . ≤

k−1

Yi=0

D(vi).

(2.2)

7

By construction of T , any vertex u that has a child l with t(l) = y satisﬁes D(u) = 1. Thus

Ly(v0) ≤

k−2

Yi=0

D(vi),

(2.3)

where Pk−2

occurs only in the following cases:

i=0 D(vi) ≤ n − 2, as v0, . . . , vk−2 have disjoint sets of children in G\{x, y}.

i=0 D(vi) subject to Pk−2

It is easily checked that the maximal value of Qk−2
• If n ≡ 2 modulo 3, we have D(vi) = 3 for all i.
• If n ≡ 0 modulo 3, we have either D(vi) = 4 for exactly one i and D(vj) = 3 for
all j 6= i; or there are i1, i2 such that D(vi) = 2 for i = i1, i2, and D(vj) = 3 for all
i /∈ {i1, i2}.

i=0 D(vi) ≤ n− 2

• If n ≡ 1 modulo 3, we have D(vi) = 2 for exactly one i, and D(vj) = 3 for all j 6= i.

as required for (i).

Thus we see that the maximal possible value of Qk−2
i=0 D(vi) is f2(n), and so Ly(v0) ≤ f2(n)
When Ly(v0) = f2(n) we have that Qk−2
i=0 D(vi) must equal f2(n). This is only possible if
Pk−2
i=0 D(vi) = n − 2 and the D(vi) take the values deﬁned in the above cases. In addition,
we must have equality in (2.3) and hence in (2.1) for each value of 0 ≤ i ≤ k − 1. Therefore,
for each i and for all z, w ∈ C(vi), we have Ly(z) = Ly(w).

Let X := x0, . . . , xk be any path where x0 = v0 and xk is a leaf. We prove that

k−2

Yi=0

D(xi) = f2(n).

(2.4)

Choose P ′ := y0, . . . , yk ∈ P so that it coincides with X on the longest possible initial
segment, i.e. so that i is maximal such that y0, . . . , yi = x0, . . . , xi. Suppose P ′ 6= X. Then
for some j we have Ly(xj) 6= Ly(yj), but xi = yi for i < j. But by the argument above, as
P ∈ P, we have that for each i, Ly(z) = Ly(w) for all z, w ∈ C(yi). Thus as xj−1 = yj−1,
we have xj ∈ C(yj−1) and Ly(xj) = Ly(yj), a contradiction. So P ′ = X and every path
terminating at a leaf is in P. So for any xj and any u, w ∈ C(xj) we have Ly(u) = Ly(w).
i=0 D(vi) = f2(n). Hence (2.4) holds for X.
But then we must have Pk−2
j=0 D(xj) = n − 2 and so X\{xk} must see every vertex of G as
required. But then t(x) = y for some x ∈ NT [X], and the construction of T implies that we
must have x = xk (as x must be a leaf and the parent of x has only one child).

By choice of P ′ we have Qk−2

i=0 D(yi) = Qk−2

We are now ready to prove Theorem 2.1.

Proof of Theorem 2.1. Let T := T (x, y) be the x-y-path tree of G rooted at v0. The number
of induced paths between x and y is precisely the number of leaves l ∈ T such that t(l) = y.
So Ly(v0) = f2(n) and we can apply Lemma 2.7. We intend to show that G must be a

8

braid. Let P := v0, . . . , vk be the shortest path in T such that t(v0) = x and t(vk) = y. For
i ∈ {0, . . . , k − 1}, let Ci+1 be the set of children of vi in T (note that vi+1 ∈ Ci+1). Deﬁne
V0 := {x} and deﬁne Vi := t(Ci) for 1 ≤ i ≤ k. Therefore, Vk = {y}. The sets Vi are disjoint,
as t(u) 6= t(u′) for any u, u′ ∈ NT ({v0, . . . , vk}). We also have that Sk
i=0 Vi = V (G), as V (P )
sees every vertex in G by Lemma 2.7. The theorem will follow immediately from the next
claim.
Claim 2.8. G is the braid ({x}, V1, . . . , Vk−1,{y}).
Proof. We prove by reverse induction on j that the graph induced by Sk
i=j Vi is a braid
(Vj, . . . , Vk) in G. First, note that by Lemma 2.7, every leaf l ∈ T satisﬁes t(l) = y. Thus
no vertex in Ck−1 can be a leaf of T (else we would have a shorter path to y in G) and
every vertex in Ck−1 must have a child. Since, by Lemma 2.7, V (P )\{vk} sees every vertex
of G and all vertices except y have been seen by v0, . . . , vk−2, every child z of a vertex in
Ck−1 must satisfy t(z) = y. Thus every vertex in Ck−1 has exactly one child z and t(z) = y.
Therefore (Vk−1,{y}) is a braid.
Now suppose that the inductive hypothesis holds for j = s + 1 where 1 ≤ s + 1 ≤ k − 1.
So (Vs+1, . . . , Vk) is a braid in G. We will show that (Vs, . . . , Vk) is a braid in G. We ﬁrst
show there are no edges between Ss−1
i=0 Vi and Vs+1. Suppose, for some i ≤ s− 1, there exists
a vertex v ∈ Li with a child z such that t(z) ∈ Vs+1. Then there exists a shorter path in T
from v0 to some vk where t(vk) = y: the path v0, . . . , vi−1, v, z, vs+2 . . . , vk. This contradicts
our choice of P as the shortest such path. Thus no such vertex v exists. So there are no

i=0 Vi and Vs.

edges between Ss−1
v ∈ Cs\{vs} and some z ∈ Cs+1 such that t(v) is not adjacent to t(z) ∈ Vs+1.
We know that t(u) is a neighbour of t(v) in G and that:

It remains to show that {uw : u ∈ Vs, w ∈ Vs+1} ⊆ E(G). Suppose there exists some
Let u be a child of v (v must have a child as, by Lemma 2.7, every leaf l satisﬁes t(l) = y).

i=0 Vi, as t(u) must be unseen by {v0, . . . , vs−1} by construction of T ;
i=s+2 Vi, as Vs+1, . . . , Vk forms a braid in G.

• t(u) /∈ Ss
• t(u) /∈ Sk
Thus t(u) ∈ Vs+1.
If s + 2 = k (and so Vs+2 = Vk = {y}) then consider the path v0, v1, . . . , vs−1, v ∈ T . We
have Ly(v) = D(v) < D(vs) = Ly(vs), contradicting Lemma 2.7.
Therefore s + 2 < k. Since every leaf l ∈ T satisﬁes t(l) = y, every induced path starting
at x in G can be extended to an induced path terminating at y. We consider two cases (see
Figure 2 for an illustration).

First suppose that t(u) is adjacent to t(z). Consider P := t(v0), . . . , t(vs−1), t(v), t(u), t(z),
an induced path in G. As t(z) ∈ Vs+1 and (Vs+1, . . . , Vk) is a braid in G, any extension of
P to an induced path that terminates at y must contain a vertex from Vs+2. However,
Vs+2 ⊆ NG(t(u)) (and so Vs+2 has been seen by V (Pu)). It is therefore impossible to extend
this induced path to one terminating at y.
Now suppose that t(u) is not adjacent to t(z). Let w be a neighbour of t(u) in Vs+2.
Consider the induced path P := t(v0), . . . , t(vs−1), t(v), t(u), w, t(z). As t(z) ∈ Vs+1 and

9

t(v)

t(u)

t(z)

Vs

Vs+1

Vs+2

t(v)

t(u)

t(z)

w

Vs

Vs+1

Vs+2

Vs+3

Figure 2: Examples of the cases we get if t(v) is not adjacent to every vertex in Vs+1. The
dashed lines represent non-edges.

(Vs+1, . . . , Vk) is a braid in G, any extension of P to an induced path that terminates at y
must contain a vertex from Vs+3. However, Vs+3 ⊆ NG(w) and so has been seen by V (Pw).
It is therefore impossible to extend this induced path to one terminating at y.
Thus it must be the case that {uw : u ∈ Vs, w ∈ Vs+1} ⊆ E(G). We conclude that
i=s Vi is indeed a braid (Vs, . . . , Vk) in G. Claim 2.8 now follows by

the graph induced by Sk

induction.

We have |Vi| = D(vi−1). As Qk−2

must be in F (n). Hence the theorem follows.

i=0 D(vi) = p2(F (n)), it is easy to check that the braid

2.1 Odd and even induced paths between a pair of vertices

Let G be a graph and let x and y be distinct vertices in V (G). We will deﬁne similar notions
for odd and even paths as we did for paths in general at the start of this section. We deﬁne
po
2(G; x, y) to be the number of induced odd paths in G beginning at x and ending at y. We
also deﬁne:

10

and

po
2(G) := max{po

2(G; x, y) : x, y ∈ V (G)},

2(n) := max{po
po

2(G) : |V (G)| = n}.

In addition, we deﬁne pe
x and ending at y. In the even case, we deﬁne pe
po
2(n).

2(G; x, y) to be the number of induced even paths in G beginning at
2(G) and

2(n) analogously to po

2(G) and pe

We will determine the structure of the n-vertex graphs that contain po

2(n) induced odd
paths (or pe
2(n) induced even paths) between some pair of vertices. This result will be used to
prove Theorem 1.7. The extremal graphs for this path problem will have a certain structure
that depends on the value of n modulo 6. For n ≥ 10, we deﬁne Fo(n) to be the set of all
braids B with the following properties.

• |V (B)| = n.
• B has end clusters of size 1.
• All central clusters of B have size three except:

– a single cluster of size 4, when n ≡ 0 modulo 6;
– either two clusters of size 4 or four clusters of size 2, when n ≡ 1 modulo 6;
– three clusters of size 2, when n ≡ 2 modulo 6;
– two clusters of size 2, when n ≡ 3 modulo 6; and
– one cluster of size 2, when n ≡ 4 modulo 6.

Let F ∈ Fo(n) and suppose that the end clusters are {x} and {y}. Observe that every
induced path between x and y is odd. It is not diﬃcult to check that for all F ∈ Fo(n) we
have po
2(F ; x, y). Every graph in Fo(n) contains the same number of induced paths
between x and y and so we deﬁne:

2(F ) = po

f o
2 (n) =

4 · 3(n−6)/3
24 · 3(n−10)/3
23 · 3(n−8)/3
22 · 3(n−6)/3
2 · 3(n−4)/3
3(n−2)/3

for n ≡ 0 modulo 6
for n ≡ 1 modulo 6
for n ≡ 2 modulo 6
for n ≡ 3 modulo 6
for n ≡ 4 modulo 6
for n ≡ 5 modulo 6




The following theorem is the analogous theorem for odd paths to Theorem 2.1. The proof

is very similar.

Theorem 2.9. Let G be a ﬁnite graph on n ≥ 10 vertices and let x and y be distinct
vertices of G. Suppose that G contains po
2(n) induced odd paths between x and y. Then G is
isomorphic to a graph in Fo(n) with end clusters {x} and {y}.

11

We will state a version of Theorem 2.9 for even length paths. As one would expect, the
extremal graphs diﬀer from those in the odd case. Thus for n ≥ 10, we deﬁne Fe(n) to be
the set of all braids B with the following properties.

• |V (B)| = n.
• B has end clusters of size 1.
• All central clusters of B have size three except:

– two clusters of size 2, when n ≡ 0 modulo 6; and
– one cluster of size 2, when n ≡ 1 modulo 6.
– a single cluster of size 4, when n ≡ 3 modulo 6;
– either two clusters of size 4 or four clusters of size 2, when n ≡ 4 modulo 6; and
– three clusters of size 2, when n ≡ 5 modulo 6.

Observe that the extremal graphs in the odd and even cases are essentially the same (shifting
by 3 modulo 6), as when n ≥ 13 we can delete a cluster of size 3 to get from an extremal
graph for the odd case to an extremal graph for the even case (or vice versa).

Theorem 2.10. Let G be a ﬁnite graph on n ≥ 10 vertices and let x and y be distinct
vertices of G. Suppose that G contains pe
2(n) induced even paths between x and y. Then G
is isomorphic to a graph in Fe(n) with end clusters {x} and {y}.

To obtain the proof of Theorem 1.7, it suﬃces to prove only the odd version. We remark
that the proof of Theorem 2.9 can easily be adapted to prove Theorem 2.10, so we omit the
proof of Theorem 2.10.

Sketch proof of Theorem 2.9. Fix x and y to be distinct vertices of G with y /∈ N[x]. Let T
be the x-y-path tree rooted at v0. For z ∈ V (T ) deﬁne Lo(z) to be the number of leaves l
contained in B(z) such that t(l) = y and l ∈ Lr, where r is even (as we start at level 0, a
path terminating at such a level will be odd).

We ﬁrst prove an odd-path version of Lemma 2.7.

Claim 2.11 (Odd-path version of Lemma 2.7). Let P := x1, . . . , xk be any path in T where
x0 = v0 and xk is a leaf. Then:

(i) Lo(v0) ≤ f o
(ii) If Lo(v0) = f o

2 (n).

2 (n), then for any xj and for all u, w ∈ C(xj), we have Lo(u) = Lo(w).

Also, k is even, t(xk) = y and V (P )\{xk} sees every vertex of G.

12

Proof of Claim. We mimic the proof of Lemma 2.7, replacing F (n) with Fo(n) and Ly(z)
with Lo(z) for any z ∈ T .

Arguing as in (2.2), we see that

Lo(v0) ≤ D(vk−1) ·

k−2

Yi=0

D(vi).

(2.5)

By construction of T , any vertex u that has a child l with t(l) = y satisﬁes D(u) = 1. If
k − 2 is odd, any leaf in Lk corresponds to an even path, so k must be even. So we have

Lo(v0) ≤

k−2

Yi=0

D(vi),

It is not diﬃcult to check that the maximal value of Qk−2

where k is even and Pk−2
i=0 D(vi) ≤ n − 2, as v0, . . . , vk−2 have disjoint sets of children in
G\{x, y}.
i=0 D(vi) ≤
n − 2, where k is even is f o
The proof of the second statement in Claim 2.11 follows directly from the arguments
used in the proof of the second statement of Lemma 2.7. This completes the proof of the
claim.

2 (n).

i=0 D(vi) subject to Pk−2

In particular, we know that any path v0 . . . vk, where vk is a leaf, has odd length and
satisﬁes t(vk) = y. We can now use the same arguments that we used in the proof of Theorem
2.1, applying Claim 2.11 in the place of Lemma 2.7, to show that G must be a braid in Fo(n).

3 Proof of Theorem 1.2

We ﬁx a large constant n0 and let Gmax be a graph on n ≥ n0 vertices, that contains m(n)
induced cycles. In what follows we will take n0 (and thus n) to be suﬃciently large when
required and we will make no attempts to optimise the constants in our arguments. We will
show that the graph Gmax is isomorphic to Hn. As it turns out, Theorem 1.5 will follow
almost immediately from the arguments required for the proof of Theorem 1.2. Therefore,
in this section we will prove several lemmas in more generality than is strictly needed here:
they will be used in their more general form in the next section.

Given a graph H, let f (H) denote the number of induced cycles in H and for a vertex
v ∈ H, let fv(H) denote the number of induced cycles in H containing v. Observe that we
must have:

f (Gmax) = m(n) ≥ f (Hn) ≥




3n/3
4 · 3(n−4)/3
2 · 3(n−2)/3
13

if n ≡ 0 modulo 3
if n ≡ 1 modulo 3
if n ≡ 2 modulo 3.

(3.1)

It is easy to see that Gmax must be connected. We begin by proving several lemmas

which determine information about the structure of Gmax.

Lemma 3.1. Let F be an n-vertex graph. For v ∈ V (F ), we have fv(F ) ≤ (cid:0)d(v)
2 (cid:1)3(n−d(v)−1)/3.
Proof. Each induced cycle containing v contains exactly two neighbours of v. Fix a pair of
vertices u, w ∈ N(v). By Corollary 2.2 there are at most 3(n−d(v)−1)/3 induced paths between
u and w in (F\N[v]) ∪ {u, w}. Thus there can be at most 3(n−d(v)−1)/3 induced cycles in F
containing {v, u, w}. As there are (cid:0)d(v)

2 (cid:1) distinct pairs of neighbours of v, we have,

fv(F ) ≤ (cid:18)d(v)

2 (cid:19)3(n−d(v)−1)/3,

as required.
Lemma 3.2. Let 0 < c ≤ 1. Let F be an n-vertex graph with f (F ) ≥ c · m(n). Then F
contains a vertex v such that fv(F ) ≥ c
10 m(n). Moreover, every vertex w ∈ Gmax satisﬁes
fw(Gmax) ≥ 1
Proof. First we show that for large n almost all cycles in F have length at least 0.11n. Let
α = 0.11. Using Stirling’s approximation, we get that

20 m(n).

As

we get that

⌊αn⌋

Xi=1

i(cid:19) ≤ αn ·(cid:18) n
(cid:18)n

αn(cid:19) ≤ (1 + o(1))

√αn

p2π(1 − α) (cid:20)

1

αα(1 − α)1−α(cid:21)n

.

1

αα(1 − α)1−α < 31/3,
i(cid:19) = o(cid:0)3n/3(cid:1) .
(cid:18)n

Xi=1

⌊αn⌋

Thus, as F has at least Ω(3n/3) induced cycles by (3.1), for suﬃciently large n0, at
least 0.99c · m(n) cycles have length at least αn as required. In particular, provided n0 is
suﬃciently large, we have

⌊αn⌋

Xi=1

i(cid:19) <
(cid:18)n

c
100 · 3n/3 <

c

100

m(n),

for all n > n0. The second inequality follows from (3.1). Thus there exists a vertex v such
that

fv(F ) ≥

99αc
100

m(n) ≥

c
10

m(n).

Now suppose that there exists some vertex w ∈ Gmax with fw(Gmax) < 1

20 m(n). Consider
the graph G′ obtained from Gmax by duplicating the vertex v and removing the vertex w.
We have that

a contradiction.

f (G′) ≥ f (Gmax) + fv(Gmax) − 2fw(Gmax) > f (Gmax),

14

Now consider the graph obtained from Gmax by duplicating a vertex. By applying the

result of Lemma 3.2, it is easy to see that

m(n + 1) ≥ (cid:18)1 +

1

20(cid:19) m(n).

(3.2)

We now use this to show that the graph Gmax has maximum degree bounded by a

constant.

Lemma 3.3. ∆(Gmax) < 30.

Proof. Let v be a vertex of maximal degree. Given v, we can split the induced cycles in
Gmax into those contained in Gmax\{v}, and those containing v. Using Lemma 3.1 we have

m(n) ≤ m(n − 1) +(cid:18)d(v)

2 (cid:19)3(n−d(v)−1)/3.

Using (3.2) to bound m(n − 1) gives,

m(n) ≤ m(n)(cid:18)1 +

1

20(cid:19)−1

+(cid:18)d(v)

2 (cid:19)3(n−d(v)−1)/3.

This expression rearranges to give

m(n) ≤ 21(cid:18)d(v)

2 (cid:19)3(n−d(v)−1)/3.

For d(v) ≥ 30, we get that m(n) < 3(n−6)/3, a contradiction (as we have m(n) ≥ f (Hn) >
3(n−6)/3).

Combining Lemma 3.1 with Lemma 3.3 shows, for any v ∈ V (Gmax), we have fv(Gmax) ≤
(cid:0)30
2(cid:1)3(n−3)/3. This along with (3.1) implies

m(n) = Θ(3n/3).

(3.3)

The next stage of our proof involves showing that all but a constant number of vertices
v in our graph have the property that their closed third neighbourhood N 3[v] has the same
local structure as the closed third neighbourhood of a vertex in Hn. We introduce some
preliminary deﬁnitions.

Given a graph F and a set S ⊆ V (F ), we say that a vertex v ∈ V (F ) is seen by S if
v ∈ N[S] and v is unseen by S otherwise. Given a subgraph H ⊆ F , we say v is seen by
H if v ∈ N[H]. When it is clear which set/subgraph we are referring to, we will just say
v is (un)seen. In order to determine what sort of local structure a ‘typical’ vertex in Gmax
should have, we deﬁne a game on F .
Deﬁnition 3.4. Let F be a ﬁnite graph, let v ∈ V (F ) and let w ∈ V (F )\N 3[v]. We deﬁne
the w-typical-game on (F, v) as follows. There are two players, Adversary and Builder. The
game starts at vertex u1 := v and the players choose a sequence of vertices {u2, . . . , uk}
under the following set of rules. At vertex ui:

15

• If ui ∈ N 3[w], then Adversary is the active player, otherwise Builder is.
• The active player chooses a neighbour ui+1 of ui that is unseen by {u1, . . . , ui−1}.
• The game terminates when a vertex uj is chosen such that uj has no neighbours unseen

by {u1, . . . , uj−1}.

• If, for some j, the vertex uj does not have exactly 3 neighbours unseen by {u1, . . . , uj−1},

we call uj bad ; we call uj good otherwise.

• Adversary wins if either:

– for some j, the vertex uj is in N 3[w] and is bad; or
– upon termination of the game at vertex uk, there exists a vertex in N 3[w] that is

unseen by {u1, . . . , uk}.

Builder wins otherwise.

We say that a vertex w ∈ V (F )\N 3[v] is v-typical in F if there exists a winning strategy
for Builder in the w-typical-game on (F, v). A vertex is v-atypical otherwise. When it is
clear which vertex has been chosen to play the role of v, we simply say that w is (a)typical.
Note that the set of vertices {u1, . . . , uk} chosen during the game induces a path in F . Also,
if we play this game on Hn starting at any vertex, the vertices that are chosen are mostly
good.

Now we see that a v-typical vertex has the local structure we require.

Lemma 3.5. Let F be a graph and let v be a vertex in F . Suppose that z = z1 ∈ V (F )\N 3[v]
is a v-typical vertex. Then there exist disjoint sets of vertices Z := {z1, z2, z3}, V :=
{v1, v2, v3}, and W := {w1, w2, w3} such that for all i, we have V ∪ W ⊆ N(zi) ⊆ V ∪
W ∪ Z\{zi}. Moreover, for i, j ∈ {1, 2, 3}, we have N(vi) ∩ N(wj) = Z.

Proof. We play as Adversary in the z-typical-game on (F, v). As z is v-typical, Builder has
a winning strategy σ. We assume that Builder uses strategy σ, and deduce information
about the structure of F from the results of our choices of vertices as Adversary (we know
we cannot win so whatever choices we make have certain consequences). For each vertex ui
that is chosen, let Pui denote the subgraph induced by {u1, . . . , ui}, where u1 = v. So Pui is
an induced path between v and ui.
Suppose that uk is the ﬁrst vertex chosen such that uk ∈ N 3(z) (as z is typical, at
some point such a vertex must be chosen). We arbitrarily choose the next vertex uk+1 ∈
N 2(z) ∩ N(uk). Let x := uk+1. This vertex is unseen by Puk−1 as uk was the ﬁrst vertex we
chose in N 3(z). We also have, by choice of uk, that x /∈ N(z). As z is typical, x must have
3 neighbours V := {v1, v2, v3} unseen by Puk. As x ∈ N 2(z), for some i we must have that
vi ∈ N(x) ∩ N(z). Without loss of generality we suppose v1 ∈ N(x) ∩ N(z). Since we could
choose uk+2 to be v1, the vertex v1 must have 3 neighbours unseen by Px, one of which must
be z, so let the set of neighbours of v1 unseen by Px be Z := {z1, z2, z3}.

16

v1

v2

v3

V

z1

z2

z3

Z

w1

w2

w3

W

Figure 3: The local structure around a v-typical vertex z1. Note that we have not yet deter-
mined the edges within the sets V , Z and W .

If we choose uk+2 := v1 and then uk+3 := z, we have that z must have 3 neighbours
unseen by Pv1. Thus z has at most 5 neighbours unseen by Px (as z could be adjacent to z2
or z3).

We now prove that N(x) ∩ N(z) = V . Suppose otherwise, so without loss of generality
we have v3 /∈ N(z). Now we describe the set of choices we make for the remainder of the
game (recall that Builder always plays by strategy σ). Choose uk+2 := v3. Now consider a
later step in the game, but before z has been chosen, and suppose the most recently chosen
vertex is ui ∈ N 3[z], where i ≥ k + 2. Then:
(1) If there is no vertex in N(ui) ∩ N(z) that is unseen by Pui−1, choose ui+1 arbitrarily.
(2) If, for some r, the vertex z has r neighbours unseen by Pui−1 (by the argument above,

r ≤ 5) and ui is adjacent to j ≥ 1 of these neighbours:
(i) If r − j < 3, choose ui+1 ∈ N(ui) ∩ N(z) and ui+2 := z. As z now has at most 2

neighbours unseen by Pui+1 we reach a contradiction.

(ii) If r − j ≥ 3, then j ≤ 2 and ui must have an unseen neighbour s that is not
adjacent to z (otherwise ui is bad, which contradicts the fact that Builder has a
winning strategy). Choose ui+1 := s. Observe that the vertex z is not seen by Ps.

Once we have chosen z, we play arbitrarily.

We now analyse the results of making these choices. As z is typical, we must at some
point enter case (2).
If we are in case (2ii), we pick ui+1 and the number of neighbours
unseen by z decreases, so eventually we must enter case (2i) where we reach a contradiction.
Thus N(x) ∩ N(z) = V , as required.
We now know that N(x) ∩ N(z) = V . As in the ﬁrst part, if we choose uk+2 := v1
and uk+3 := z, the vertex z must have 3 neighbours unseen by Pv1. Call these neighbours

17

W := {w1, w2, w3}. Thus we have N(z) ⊇ V ∪ W as required. From the argument above it
is clear that N(z) ⊆ V ∪ W ∪ Z\{z}.
We now prove the second claim of the lemma. Let wj ∈ W , for j ∈ {1, 2, 3}. We will
ﬁrst show that N(v1)∩ N(wj) = Z. Again we play as Adversary in a new z-typical-game on
(F, v). We assume that Builder uses the same winning strategy σ as above.
By playing the same strategy as in the game above, we have that uk is the ﬁrst vertex
chosen in N 3(z) and that the ﬁrst vertex chosen in N 2(z) is x. We know that N(x)∩ N(z) =
V . Now we choose uk+2 := v1. Let y be the ﬁrst vertex chosen in N 2(wj). Observe that as
wj ∈ N(z), we have N 2(wj) ⊆ N 3[z]. So y ∈ {uk, x, v1}. We will show that y = v1.
By repeating the same argument as above with y in place of x and wj in place of z, we
see that y and wj must have exactly 3 common neighbours. The assumptions we needed to
apply the argument above will hold here: we require that y is the ﬁrst vertex seen in N 2(wj)
and that we are able to make moves at vertices in N 2[wj]. The latter holds as N 2[wj] ⊆ N 3[z]
and, in the z-typical game on (F, v), Adversary makes moves at vertices in N 3[z].
Suppose that y = uk. Then |N(uk) ∩ N(wj)| = 3 and in particular wj must be adjacent
In this case wj must be

to x. This is impossible as wj /∈ V . Now suppose that y = x.
adjacent to v1. As wj /∈ Z, this is impossible. Therefore y = v1.
It remains to show that, for i, j ∈ {2, 3}, each vi is adjacent to each zj. Suppose that vi is
not adjacent to zj for some i, j ∈ {2, 3}. Again we play as Adversary in a new z-typical-game
on (F, v). We assume that Builder uses the same winning strategy σ as above. By playing
the same strategy as in both games above, we can ensure that the ﬁrst vertex chosen in
N 2[z] is x and that x = uk+1 in the sequence of vertices chosen. It is easily deduced from
the arguments above that the only neighbours of zj that are unseen by Px are contained in
V ∪ Z ∪ W . We know that N(x) ∩ N(z) = V . Now choose uk+2 := vi and uk+3 := z. If z is
adjacent to zj, pick uk+4 := zj. Otherwise, pick uk+4 := w1 and uk+5 := zj. In both cases,
when zj is chosen all of W ∪ V have been seen. Therefore zj has at most one neighbour (the
vertex in Z\{z, zj}) unseen by Pzj\{zj}. This contradicts z being typical. Thus we have
N(vi) ∩ N(wj) = Z, completing the proof of the second statement of the lemma.

We will now see that, for any v ∈ V (Gmax), all but a bounded number of vertices in Gmax
are v-typical. We do this in the following manner. For each vertex v in Gmax we will deﬁne
a tree T (v) that will ‘explore’ the graph Gmax outwards from v. As we will see, leaves on
this tree will correspond to induced paths or cycles in Gmax containing v. Every vertex on T
will represent some vertex in Gmax (and many vertices in T may represent the same vertex
of Gmax). Our proof will proceed by showing that T must have a particular structure, which
will in turn imply conditions on the structure of Gmax.

As in Section 2, we deﬁne analogous concepts in an exploration tree T to some of those

deﬁned for a graph.

Deﬁnition 3.6. For F a ﬁnite graph and v ∈ V (F ), the exploration tree from v is a tree
T = T (v) together with a function t : V (T ) → V (F ) deﬁned as follows.

• T is a tree with vertex set V (T ) disjoint from V (F ). The tree T is rooted at v0 ∈ V (T )

and we deﬁne t(v0) := v.

18

• We deﬁne the tree in layers L0, L1, . . . , such that vertices in Lj will be at distance j
from v0 in T . For any vertex vi ∈ Li, we let Pvi := v0, v1, . . . , vi−1, vi be the unique
path from v0 to vi in T . The tree has the property that the set t(Pvi) will induce either
a path or a cycle in F , where we write we write t(S) := {t(x) : x ∈ S} for any subset
S ⊆ V (T ) and t(H) := {t(x) : x ∈ V (H)} for any subgraph H ⊆ T .

• Given a set P ⊆ V (T ) we say that it sees a vertex w ∈ V (F ) if w ∈ NF [t(P )]. If

w /∈ NF [t(P )] we say w is unseen by P .

• Deﬁne L0 := {v0}. Given Li, deﬁne Li+1 as follows. For each vertex x ∈ Li:

– If t(x) ∈ NF (v) and i 6= 1, then x is a leaf of T ; it has no neighbours in Li+1.
– If t(x) has no neighbours in F that are unseen by V (Px)\{x} then x is a leaf of

T .

– Otherwise, let {w1, . . . , wr} be the set of vertices in NF (t(x)) unseen by Px\{x}.
We deﬁne the neighbours of x in Li+1 to be a set of new vertices {u1, . . . , ur} ⊆
Li+1 and deﬁne t(ui) := wi. We call the vertices in N(x) ∩ Li+1 children of x.

This process must terminate as F is ﬁnite.

Note that if some set P sees w then there exists u ∈ NT [P ] such that t(u) = w. Also
observe that when we are constructing the tree, we allow neighbours of v0 to be children of
vertices in later levels (and so disallow vertices seen by {v1, . . . , vi−1} rather than {v0, . . . , vi}
when deﬁning the children of x above). This allows a path terminating at a leaf l on the
tree to correspond to an induced cycle containing v, since then t(l) is seen by v0 but not by
vi for i ≥ 1. However, such a path will only correspond to an induced cycle containing v if
t(l) ∈ N(v).
As in Deﬁnition 2.6, we deﬁne a descendant, a branch and L(u) for u ∈ V (T ) with respect
to this tree. We will now describe a correspondence between certain leaves on T and induced
cycles in F . Let L(T ) denote the number of leaves on T . For z ∈ T , let L(z) be the number
of leaves of T contained in B(z).

2L(T ).

Lemma 3.7. For F a ﬁnite graph and v ∈ V (F ), let T be the exploration tree from v. We
have fv(F ) ≤ 1
Proof. If fv(F ) = 0, the bound trivially holds. So suppose fv(F ) > 0. Let v, u1, . . . , ur, v
be an induced cycle in F . By construction, T contains paths v0, v1, . . . , vr, where t(vi) = ui
and v0, w1, . . . , wr, where t(wi) = ur−i+1 (in both cases i ∈ {1, . . . , r}). Both vr and wr are
leaves of T . Thus an induced cycle containing v in F corresponds to exactly two paths in
T . On the other hand, for a leaf vr ∈ T , a path Pvr = v0, v1, . . . , vr in T corresponds to the
set of vertices {t(v0), t(v1), . . . , t(vr)} ⊆ V (F ). This set induces either a path or a cycle in
F . Therefore each leaf in T can correspond to at most one induced cycle in F (there may
be leaves that do not correspond to induced cycles). The result follows.

19

We say that a vertex v ∈ T is good if it has exactly three children: call it bad otherwise.
As we did for a graph, we deﬁne a game on T and use it to deﬁne vertices that are ‘(a)typical’
for T . The following deﬁnition is the analogue in T of Deﬁnition 3.4 for a graph.

Deﬁnition 3.8. Let F be a ﬁnite graph and let T be the exploration tree from v in F . Let
w be a vertex in V (F )\N 3[v]. We deﬁne the w-typical-game on T as follows. There are two
players, Adversary and Builder. The game starts at vertex u0 := v0 and the players choose
a sequence of vertices {u1, u2, . . . , uk} ⊆ V (T ) under the following set of rules. At vertex ui:

• If t(ui) ∈ N 3[w], then Adversary is the active player, otherwise Builder is.
• The active player chooses a child ui+1 of ui.
• The game terminates when a vertex uj is chosen such that uj is a leaf.
• Adversary wins if either for some j, we have that t(uj) ∈ N 3[w] and uj is bad, or if
upon termination of the game at vertex uk, we have that there exists a vertex in N 3[w]
that is unseen by {u0, . . . , uk}. Builder wins otherwise.

We say that a vertex w ∈ V (F )\N 3[v] is typical for T if there exists a winning strategy
for Builder in the w-typical-game on T . A vertex is atypical for T otherwise. It is clear that
a vertex in V (F )\N 3[v] is atypical for T (v) if and only if it is v-atypical in F . Observe that a
vertex w being atypical for T means that Adversary has a strategy to ensure that, whatever
strategy Builder chooses, either a bad vertex in N 3[w] must be chosen, or that there exists
some vertex in N 3[w] that remains unseen by {u1, . . . , uk} upon termination at vertex uk.
Now let c > 0 and F be any n-vertex graph with f (F ) ≥ c · 3n/3 and ∆(F ) ≤ ∆, for
some constant ∆ (Gmax satisﬁes these conditions as ∆(Gmax) is bounded by Lemma 3.3).
Our next aim is to prove that, for any vertex v ∈ V (F ), only a bounded number of vertices
are atypical for T (v). Using this fact with Lemma 3.5 will imply that the majority of the
structure of Gmax will be close to the structure of Hn. The remainder of the proof will consist
of ‘cleaning’ Gmax to show that it must in fact be isomorphic to Hn.

We ﬁrst outline how the proof will proceed before giving the details. We assume (in
order to get a contradiction) that there is a large set A ⊆ V (F ) of vertices atypical for T (v),
such that for each a, a′ ∈ A we have N 3[a] ∩ N 3[a′] = ∅ (for any set of atypical vertices we
can ﬁnd a subset of constant proportion with this property as ∆(F ) is bounded). We will
sequentially choose a path in T of vertices u0, . . . , uk where u0 := v0 and uk is a leaf.

For each a ∈ A, there exists a winning strategy τa for Adversary in the a-typical game
on T (v). This means that whatever vertices vi with t(vi) /∈ Sa∈A N 3[a], are chosen in the
path, for every a ∈ A we are able to ensure that either:
(i) we choose a bad vertex vi with t(vi) ∈ N 3[a], or
(ii) there is some vertex in N 3[a] that remains unseen by {u0, . . . , uk} when the process

terminates.

20

We will assume at the start that L(v0) is bounded below by c3n/3, for some constant c.
As we move down the tree we keep track of the number of leaves that the branch we are
in must contain. If we are at a vertex vi, such that t(vi) is not in N 3[a] for any a ∈ A, we
choose the branch that has the most leaves. When t(vi) is in N 3[a] for some a ∈ A, we play
the winning strategy τa to move towards the outcomes (i) or (ii), unless there is a sub-branch
that contains a large proportion of the leaves in our current branch. These outcomes mean
that the tree is ‘unbalanced’ in some way, and the strategy that achieves these outcomes
picks branches that contain more leaves than average. As it turns out, when we reach a leaf
and the process ends, if |A| was too large we ﬁnd that the branch we are in ought to contain
more than one leaf, a contradiction.

Lemma 3.9. Let c > 0 and ∆ > 0 be ﬁxed constants. Let ǫ = 2−∆100. Let F be an n-vertex
graph with ∆(F ) = ∆. Let v ∈ V (F ) and let T = T (v) be the exploration tree from v in
F with root v0. Let A ⊆ V (F )\N 3[v] be a set of atypical vertices for T such that for all
a, a′ ∈ A, we have N 3[a] ∩ N 3[a′] = ∅. If L(v0) ≥ c · 3n/3, then |A| < M, where M is the
smallest integer such that c · 31/3(1 + ǫ)M > ∆.
Proof. Suppose, in order to obtain a contradiction, that |A| ≥ M. For each a ∈ A, Adversary
has a winning strategy τa played on vertices of N 3[a] in the a-typical game on T . As for all
a, a′ ∈ A, we have N 3[a] ∩ N 3[a′] = ∅, these strategies are played on disjoint sets of vertices.
We sequentially choose a path v0, u1, . . . , uk of vertices through the tree. We will pick
u1 ∈ N(v0) such that L(u1) is maximised and uk will be a leaf. Deﬁne q1 := c·31/3
∆ 3(n−1)/3
and for each a ∈ A deﬁne C1(a) := 1. At each subsequent stage, we will choose a vertex ui
and deﬁne quantities qi and Ai (the subset of A that we still care about tracking). We will
also deﬁne Ci(a) for each a ∈ A. We deﬁne
c · 31/3
∆ Ya∈A

Ci(a) and qi := Ci3

Ci :=

(3.4)

n−mi−1

3

,

where mi is the number of vertices of V (F )\{v} seen by V (Pui−1)\{u0} (thus n − mi − 1
vertices of V (F )\{v} are unseen by V (Pui−1)\{u0}). Throughout the process we will maintain
the property that L(ui) ≥ qi for each i.
We now describe an algorithm that determines our choice of vertices. For r ≥ 1, let
ǫr = 2r−1ǫ.

Vertex Choice Algorithm

We pick u1 ∈ N(v0) such that L(u1) is maximised, and deﬁne A2 := A. Suppose the
most recently chosen vertex is ui and that mi vertices of V (F )\{v} have been seen by
{u1, . . . , ui−1}. If v = ui is not a leaf; we have two cases:
Case 1: t(v) ∈ N 3[a] for some a ∈ Ai.

Suppose it is the r-th time we have chosen a vertex y such that t(y) ∈ N 3[a]. We have

two subcases:

21

Subcase 1: v is good.

In this case v has exactly three children y1, y2, y3.
(i) If there exists j such that L(yj) ≥ 1

3(1 + ǫr)Ci3(n−mi−1)/3 then choose ui+1 := yj.

- Set Ci+1(u) := (1 + ǫr)Ci(u) and Ci+1(y) := Ci(y), for all y ∈ A\{a}.
- Set Ai+1 := Ai\{a}.

(ii) Else, every yj must satisfy L(yj) > 1

3(1 − 2ǫr)Ci3(n−mi−1)/3. In this case, choose ui+1

according to strategy τa.
- Set Ci+1(a) := (1 − 2ǫr)Ci(a) and Ci+1(y) := Ci(y), for all y ∈ A\{a}.
- Set Ai+1 := Ai.

Subcase 2: v is bad.

In this case v does not have exactly 3 children. Suppose v has children y1, . . . , yk for some
k 6= 3. Pick j such that L(yj) is maximised and set ui+1 := yj.

- Set Ci+1(a) = (1 + ǫr)Ci(a) and Ci+1(y) := Ci(y), for all y ∈ A\{a}.
- Set Ai+1 := Ai\{u}.

Case 2: t(v) 6∈ N 3[a] for all a ∈ Ai:

Then v has children y1, . . . yk for some k ≥ 1. Pick j such that L(yj) is maximised and

set ui+1 = yj.

- Set Ci+1(y) := Ci(y), for all y ∈ A.
- Set Ai+1 := Ai.

The process terminates when ui is a leaf.

We now analyse the consequences of choosing vertices in this manner.

Claim 3.10. For each vertex ui chosen during the Vertex Choice Algorithm, we have L(ui) ≥
qi.
Proof of Claim 3.10. We argue by induction on i: the case i = 1 holds as we chose u1 ∈ N(v0)
to maximise L(u1). Suppose L(ui) ≥ qi = Ci3(n−mi−1)/3. Now for the inductive step: we
consider each case of the algorithm separately, and prove that the statement holds there.

In Subcase 1(i) we have:

L(ui+1) ≥
In Subcase 1(ii) we have:

1
3

(1 + ǫr)Ci3

n−mi−1

3 = Ci+13

n−mi+1−1

3

= qi+1.

L(yj) >

1
3

(1 − 2ǫr)Ci3

n−mi−1

3 = Ci+13

n−mi+1−1

3

= qi+1

22

In Subcase 2, recall that v has neighbours y1, . . . , yk (for k 6= 3) and we pick ui+1 to be

the yj which maximises L(yj). Thus we have:

L(ui+1) ≥

Ci
k

3

n−mi

3 = Ci

3k/3
k

3

n−mi−k−1

3

.

The value of 3k/3
k

is minimised for k 6= 3 at k = 2. Thus,

L(ui+1) ≥ Ci

32/3
2

3

n−mi−k−1

3

≥ Ci(1 + ǫr)3

n−mi−k−1

3

= Ci+13

n−mi+1−1

3

= qi+1.

In Case 2, recall that v has neighbours y1, . . . , yk and we pick ui+1 to be the yj which

maximises L(yj). Thus we have:

L(ui+1) ≥

Ci
k

3

n−mi−1

3 = Ci

3k/3
k

3

n−mi−k−1

3

≥ Ci3

n−mi−k−1

3

= Ci+13

n−mi+1−1

3

= qi+1,

where the last inequality is strict unless k = 3.

We are now equipped to analyse what remains once the algorithm terminates at a leaf
uk. For each a ∈ A we have at least one of the following outcomes upon termination of the
algorithm.

(O1) During the algorithm, at a vertex a ∈ N 3[a], we either chose a branch with a large

proportion of leaves via Case 1(i) or we chose a bad vertex via Subcase 2.

(O2) There is some vertex w ∈ N 3[a] that is unseen by V (Puk) upon termination of the

algorithm.

First observe that for all s ≤ ∆3,

(1 − 2ǫ1)(1 − 2ǫ2) . . . (1 − 2ǫs)(1 + ǫs+1) > (1 + ǫ).

(3.5)

Our choice of ǫ ensures that each factor on the left hand side is greater than zero.

Suppose a /∈ Ak. Then there exists some j such that a ∈ Aj but a /∈ Aj+1. Thus at
the jth stage of the algorithm we had t(uj) ∈ N 3[a] and we either chose a branch with
a large proportion of leaves via Case 1(i) or we chose a bad vertex via subcase 2. Let
t := |t({u1, . . . , uj}) ∩ N 3[a]| be the number of vertices, x ∈ T such that t(x) ∈ N 3[a], that
we have chosen up to the jth stage. It is clear from the algorithm that

Ck(a) = Cj+1(a) = (1 − 2ǫ1)(1 − 2ǫ2) . . . (1 − 2ǫt)(1 + ǫt+1).

(3.6)

We have t + 1 ≤ ∆3 (as |N 3[a]| ≤ ∆3 by hypothesis), and so by (3.5) we have in this case
that
(3.7)

Ck(a) > (1 + ǫ).

23

Now suppose a ∈ Ak. We pass through Case 1 at most ∆3 times, as by hypothesis
i=1(1 − 2ǫi) By choice of ǫ we have

|N 3[a]| ≤ ∆3. Thus, for each such a, we have Ck(a) ≥ Q∆3
that for all s ≤ ∆3,

31/3 > 1 + 22(s+1)ǫ,

so by (3.5),

(3.8)
For each a ∈ Ak, the set V (Puk) does not see all of N 3[a], as we must either have outcome
(O1) or (O2) for a, and if we achieved (O1), then a would not be in Ak. So at termination
we have n − mk − 1 ≥ |Ak| and so by the deﬁnition of qk (3.4) we have:

31/3 · Ck(a) > (1 + ǫ).

qk ≥ Ck3

|Ak|
3 .

(3.9)

By (3.7), we have:

Ya∈A

Ck(a) ≥ (1 + ǫ)|A\Ak| Ya∈Ak

Ck(a),

and so by substituting for Ck in (3.9) and applying (3.8), we have:

c · 31/3

∆

qk ≥

3

|Ak |

3 Ya∈A

Ck(a) ≥

c · 31/3

∆

(1 + ǫ)M −|Ak|3

|Ak|

3 Ya∈Ak

Ck(a) ≥

c · 31/3

∆

(1 + ǫ)M > 1.

This contradicts Claim 3.10, as uk is a leaf and thus L(uk) = 1. This concludes the proof of
Lemma 3.9.

Corollary 3.11. Let c > 0 and ∆ > 0 be ﬁxed constants. Let F be an n-vertex graph with
f (F ) ≥ 2c · 3n/3 and ∆(F ) = ∆. Then there exists some v ∈ V (F ) such that O(1) vertices
are atypical for T (v), the exploration tree from v in F .

Proof. Let A be the set of vertices that are atypical for T . Let U be the largest subset of A
such that for all a, a′ ∈ U, we have N 3[a] ∩ N 3[a′] = ∅. As |N 3[x]| ≤ ∆3 for every x ∈ V (F ),
we have

|U| ≥ |A|
∆3 .

(3.10)

We wish to apply Lemma 3.9 to F , T and U.

As f (F ) ≥ 2c· m(n), by Lemma 3.2 there exists v ∈ V (F ) such that fv(F ) ≥ c

10 m(n) for

all v ∈ F . Combining this with Lemma 3.7 gives
fv(F ) ≥

L(v0) = L(T ) ≥

1
2

c
10

m(n) = c′3n/3,

for some constant c′ and where the last inequality follows from 3.3.

So we can apply Lemma 3.9 to get that |U| < M, where M is the smallest integer such

that c · 31/3(1 + 2−∆100)M > ∆. Combining this with (3.10) gives |A| = O(1).

24

In particular, using Lemma 3.2, the proof works for every v ∈ V (Gmax). So for any
v ∈ V (Gmax), O(1) vertices are atypical for T (v).
Let B := (B1, . . . , Bk) be a braid in Gmax. If |Bi| = 3 for all i, we call B a 3-braid. For
a braid B of length at least 4, we say that an induced cycle passes through B if it contains
a vertex from every cluster of B. Call a braid maximal if it is not contained in any longer
braid. We require the following simple deduction.
Lemma 3.12. Gmax contains O(1) maximal 3-braids and a 3-braid B such that |V (B)| =
Ω(n). Moreover, for any 3-braid B′ on rn vertices, at least f (Hn)(cid:0)1 − 3−rn/6(cid:1) induced cycles
in Gmax pass through B′.
Proof. Let v ∈ V (Gmax). The only vertices which can be contained in more than one maximal
3-braid lie in end clusters. By Lemma 3.5, every v-typical vertex is contained in a central
cluster of exactly one maximal 3-braid. So any vertex in the end cluster of a maximal 3-braid
must be v-atypical. By Corollary 3.11, O(1) vertices are v-atypical for Gmax. Each of these
vertices is contained in at most ∆(Gmax) ≤ 30 maximal 3-braids. Thus Gmax contains O(1)
maximal 3-braids.
The union of the maximal 3-braids contains all the typical vertices and so it must contain
at least n− O(1) vertices, which is at least n/2 for large n. Therefore, when n0 is suﬃciently
large, some 3-braid B = (B1, . . . , Bk) must contain Ω(n) vertices.
Now, for the second claim, observe that if a cycle does not pass through B then it is either
a C4 contained in B (there are at most O(n4) of these), or it is contained in V (Gmax)\Sk−2
i=3 Bi
(by Lemma 3.1, there are at most [(1− r)n + 12](cid:0)303
2 (cid:1)3[(1−r)n+9]/3 of these). Therefore at most

[(1 − r)n + 12](cid:18)303

2 (cid:19)3[(1−r)n+9]/3 + O(n4)

induced cycles of Gmax do not pass through B. So for n0 suﬃciently large, at least

induced cycles pass through B.

f (Hn)(cid:0)1 − 3−rn/6(cid:1)

The next lemma determines almost entirely the structure of Gmax.

Lemma 3.13. Gmax is a cyclic braid.

Proof. Suppose Gmax is not a cyclic braid, and choose v to be an atypical vertex of Gmax.
Let B := (B1, . . . , BCn/3) be the longest 3-braid in Gmax. Let Q be the number of induced
cycles in Gmax that pass through B. Again using Lemma 3.12, we know

Q ≥ f (Hn)(cid:0)1 − 3−Cn/6(cid:1) .

Bi]. Let x and y be two new vertices and deﬁne H to

(3.11)

Now let G′ := G[V (Gmax)\SCn/3−1
be the graph on vertex set V (H) := V (G′) ∪ {x, y}, and edge set

i=2

E(H) := E(G′) ∪ {xb : b ∈ B1} ∪ {yb : b ∈ BCn/3}.

25

We have

Q = 3(Cn−6)/3p2(H; x, y).

Combining (3.11) and (3.12) gives

(3.12)

(3.13)

p2(H; x, y) ≥ 3−(Cn−6)/3 · f (Hn)(cid:0)1 − 3−Cn/6(cid:1) .

We now focus on the structure of H. Let us call a central cluster C of a maximal 3-braid
in a graph supercentral if for any x ∈ C and y in an end cluster, d(x, y) ≥ 3. We deﬁne a
new graph H ′ via the following process.

• Set F1 := H.
• Let i be maximal such that we have deﬁned Fi. Suppose there exists a vertex vi ∈ Fi,
contained in a supercentral cluster Ci of a maximal 3-braid Bi. Suppose Ci is adjacent
to clusters C i
2. We deﬁne Fi+1 to be the graph obtained from Fi by deleting Ci
and adding every edge {uw : u ∈ C i

1, w ∈ C i
2}.

1 and C i

• If there exists no such vertex vi, we deﬁne H ′ := Fi.

The process will terminate as H has a ﬁnite number of vertices. Observe that Fi+1 is a braid
if and only if Fi is a braid. In addition, when H ′ is a braid it is easy to reverse this process
to ﬁnd H. We will show that H ′ is a braid.

Any v-typical vertex in in Fi that does not get deleted during the process is v-typical in
Fi+1. Hence any v-typical vertex in Gmax that does not get deleted is v-typical in H ′. By
Lemma 3.12, Gmax contains O(1) maximal 3-braids. At most 18 vertices from each of these
braids will remain in H ′ when the process terminates. Any vertex not contained in a 3-braid
in Gmax is v-atypical in Gmax. By Corollary 3.11 there are O(1) such vertices. So as H ′
contains all the atypical vertices of Gmax and at most 18 vertices from each 3-braid in Gmax,
we have |V (H ′)| = O(1).
Bi and a third of the number of cycles in Fi that do pass through Bi. Thus we have

At stage i of the process, Fi+1 contains all induced cycles of Fi that do not pass through

p2(Fi+1; x, y) ≥ 3−1 · p2(Fi; x, y),

and so

p2(H ′; x, y) ≥ 3−(|V (H)|−|V (H ′)|)/3 · p2(H; x, y),

Combining (3.13) and (3.15) and observing that |V (H)| = (1 − C)n + 8 gives

p2(H ′; x, y) ≥ 3(−n−2+|V (H ′)|)/3 · f (Hn)(cid:0)1 − 3−Cn/6(cid:1) .

3(−n−2+|V (H ′)|)/3f (Hn) = f2(|V (H ′)|),

As

when n0 is suﬃciently large we have

3(−n−2+|V (H ′)|)/3 · f (Hn)(cid:0)1 − 3−Cn/6(cid:1) > f2(|V (H ′)|) − 1.

26

(3.14)

(3.15)

(3.16)

(3.17)

As p2(H ′; x, y) is an integer, by taking n0 to be suﬃciently large, (3.16) and (3.17) give

p2(H ′; x, y) ≥ f2(|V (H ′)|).

Therefore, by Theorem 2.1, H ′ must be isomorphic to a graph in F (|V (H ′)|). Thus H ′
is a braid. We can reverse the process we applied above (adding back in the supercentral
clusters) to recreate H from H ′. We see that H is a graph in F (|V (H)|), and hence Gmax is
a cyclic braid.

Corollary 3.14. We have the following:

• when n ≡ 0 modulo 3, Gmax has exactly n/3 clusters of size 3;
• when n ≡ 1 modulo 3, Gmax has either one cluster of size 4 and (n− 4)/3 of size 3, or

two of size two and (n − 4)/3 of size 3;

• when n ≡ 2 modulo 3, Gmax has exactly one cluster of size 2 and (n − 2)/3 of size 3.
We are now in a position to complete the proof of Theorem 1.2. In our next lemma, we
will show that the clusters in Gmax cannot contain any edges, and thus we will prove the
required result for n ≡ 0 or 2 modulo 3. In the remaining case we will need a short argument
to decide whether the graph contains two clusters of size two, or one of size 4. In both cases,
the arguments are essentially routine checks.

Lemma 3.15. No cluster of Gmax contains any edges.

Proof. First observe, that if e is an edge within a cluster, the only induced cycles containing
e can be triangles, either contained within the cluster, or containing exactly one vertex from
a neighbouring cluster; or induced copies of C4 within the cluster (in the case that the cluster
contains 4 vertices).

Let B be a cluster adjacent to clusters A and C. Suppose there exists an edge e = uv
where u, v ∈ V (B). The edge e is contained in at most |A| + |C| + (|B| − 2) induced cycles
within Gmax. The graph G′ = Gmax\{e} will contain at least |A||C| induced copies of C4
(for any x ∈ A, y ∈ C, the set {x, y, u, v} induces a C4) that are not induced cycles in Gmax.

As Gmax cannot contain both a cluster of size 2 and a cluster of size 4, we have

|A||C| > |A| + |C| + (|B| − 2),

unless |B| = 3 and at least one of |A| or |C| is equal to 2. Except for this case, the number
of induced cycles in G′ = Gmax\{e} is greater than the number of induced cycles in Gmax, a
contradiction.
Now assume |B| = 3 and suppose without loss of generality that A = {a1, a2}. First
consider the case where |C| = 3. Suppose B contains an edge e = uv. This edge is contained
in at most 6 triangles in Gmax. By the above argument, A does not contain an edge. The
graph G′ = Gmax\{e} will contain at least 7 induced copies of C4 that are not induced cycles

27

in Gmax (for any x ∈ A, y ∈ C, the sets {x, y, u, v} and {a1, a2, u, v} induce copies of C4).
Thus f (G′) > f (Gmax), a contradiction.
Now assume that C = {c1, c2}. If B contains an edge e, this edge is contained in at most
5 triangles in Gmax. The graph G′ = Gmax\{e} contains at least 6 induced copies of C4 that
are not induced cycles in Gmax. Thus f (G′) > f (Gmax), a contradiction. So no cluster in
Gmax contains an edge.

We have proved Theorem 1.2 in the cases where n ≡ 0 or 2 modulo 3. It remains to

prove the result in the case n ≡ 1 modulo 3.
Lemma 3.16. When n ≡ 1 modulo 3, Gmax is isomorphic to Hn.
Proof. By Corollary 3.14 and Lemma 3.15, we know that Gmax is one of two empty cyclic
braids. One possibility is that it is isomorphic to Hn. The other possibility is that Gmax is an
empty cyclic braid G2 with exactly two clusters of size 2, and the rest of size 3. An induced
cycle in Hn or G2 either contains exactly one vertex from each cluster, or is an induced copy
of C4. In both Hn and G2, the number of cycles containing exactly one vertex from each
cluster is 4 · 3(n−4)/3. Thus the only diﬀerence in the number of induced cycles comes from
the number of induced copies of C4.
There are two types of C4. Type 1 contains vertices from exactly two clusters. Type
2 contains vertices from three clusters. Hn contains 3(n + 5) induced type 1 cycles; G2
contains at most 3n − 14 of this form (fewer if the two clusters of size 2 are not adjacent).
The graph Hn contains 9(n + 4) induced type 2 cycles; G2 contains at most 9n − 42 of this
form. Thus it is clear that Hn contains more induced cycles than G2 and therefore Gmax
must be isomorphic to Hn.

4 Proof of Theorem 1.5

The proof of Theorem 1.5 follows the same lines as the proof of Theorem 1.2. Before
proceeding with the details of the proof, we ﬁrst give an outline of what is to come. Let
0 < α < 1 be any constant and let F be an n-vertex graph containing at least α · m(n)
induced cycles. We will show that we can delete O(1) vertices from F to give a graph F ′
such that ∆(F ) = O(1). We can then apply Lemma 3.9 to F ′ to show that F ′ contains a
bounded number of atypical vertices. The result will immediately follow. We cannot simply
apply Lemma 3.9 to F , as F may contain vertices of arbitrarily large degree.

Lemma 4.1. Let 0 < α < 1 and deﬁne ∆∗ = ∆∗(α) to be the smallest integer such that

3(cid:0)∆∗
2 (cid:1)3(1−∆∗)/3 < α· 4· 3−4/3. Let F be an n-vertex graph with f (F ) ≥ α· m(n). Then we can
delete O(1) vertices from F to give a graph H with ∆(H) ≤ ∆∗. Moreover, f (H) ≥ α
2 · m(n).
Proof. Suppose that ∆(F ) > ∆∗ (else we are trivially done). We create a new graph H,
with ∆(H) ≤ ∆∗, in the following manner. Deﬁne F1 := F . Let i be maximal such
that Fi has been deﬁned. If there exists a vertex vi ∈ V (Fi) with d(vi) > ∆∗ then deﬁne

28

Fi+1 := Fi\{vi}. This process will terminate as F has a ﬁnite number of vertices. Suppose
the process terminates at a graph Fj satisfying ∆(Fj) ≤ ∆∗. Deﬁne H := Fj.
To prove the ﬁrst statement of the lemma it suﬃces to show that j = O(1). In this case,
we could create a graph H with ∆(H) ≤ ∆∗ by deleting all edges incident to {v1, . . . , vj}.
To prove that j = O(1), we will bound the size of f (F ) − f (H) and use this to show that
unless j = O(1), we have f (F ) < α · m(n), a contradiction.

By Lemma 3.1,

fvi(Fi) ≤ (cid:18)dFi(vi)

2 (cid:19)3(n−i−dFi (vi)−1)/3 ≤ (cid:18)∆∗

2 (cid:19)3(n−i−∆∗−1)/3,

where the second inequality follows as the function (cid:0)x

2(cid:1)3−x/3 is decreasing for x ≥ 6. So

j−1

f (H) = f (F ) −

fvi(Fi)

Xi=1
≥ f (F ) −(cid:18)∆∗
2 (cid:19)3(n−∆∗+1)/3
Xi=1
≥ f (F ) − 3(cid:18)∆∗
2 (cid:19)3(n−∆∗+1)/3

j−1

3−i/3

(4.1)

As |V (H)| = n− j + 1, by (3.3) we have f (H) = c· 3(n−j+1)/3 for some constant c. Combining
this with (4.1) gives:

f (F ) ≤ c · 3(n−j+1)/3 + 3(cid:18)∆∗

2 (cid:19)3(n−∆∗+1)/3.

There exists a constant J such that, whenever j ≥ J, for n suﬃciently large we have

c · 3(n−j+1)/3 <

1
2

(α · 4 · 3−4/3)3n/3.

(4.2)

(4.3)

Suppose that j ≥ J and let n be suﬃciently large. Using the deﬁnition of ∆∗ and substituting
(4.3) into (4.2), gives

f (F ) < α · 4 · 3−4/33n/3 < α · m(n),

where the ﬁnal inequality is implied by (3.1). This contradicts the hypothesis that f (F ) ≥
α · m(n). Therefore j < J and in particular, j = O(1), completing the proof of the ﬁrst
statement of the lemma.

We now prove the second statement. By (4.1) we have

Given the deﬁnition of ∆∗, it is easy to see that f (H) ≥ α

1

2(cid:18)∆∗

2 (cid:19)3(n−∆∗+1)/3.
2 m(n).

f (H) ≥ f (F ) −

29

Proof of Theorem 1.5. Let F be an n-vertex graph containing at least α·m(n) induced cycles.
By Lemma 4.1, we can delete O(1) vertices from F to give a graph F ′ with ∆(F ′) ≤ ∆∗ =
∆∗(α) and f (F ′) ≥ α
20 (possible by Lemma
3.2) and let A be the set of v-atypical vertices in F ′. By applying Lemma 3.9 we deduce that
|A| = O(1) (where M is deﬁned as in Lemma 3.9). By Lemma 3.5, every v-typical vertex in
F ′ is contained in a central cluster of exactly one maximal 3-braid. Clearly we can obtain
H from F ′ by adding and deleting edges incident to vertices in A. The result follows.

2 m(n). Now pick v ∈ V (F ′) such that fv(F ) ≥ α

5

Induced odd or even cycles

In this section we will prove Theorem 1.7. The proofs of Theorem 1.8 and Theorem 1.9 will
closely follow.

Given a graph G, deﬁne fo(G) to be the number of induced odd cycles contained within
o (G) to be the number of induced odd cycles in G that

G. Similarly, for v ∈ G, deﬁne f v
contain v. It is clear that:

mo(n) ≥ fo(Gn) = Ω(3n/3),

(5.1)

where Gn is deﬁned as in Section 1. The proof of Theorem 1.7 will follow from Theorem
1.5 and some arguments analogous to those used in Theorem 1.2. For the latter, we refer
back to Sections 2 and 3 where necessary. The main diﬀerence is that, instead of applying
Theorem 2.1, we use Theorem 2.9.

We ﬁx a large constant n0 and let G be a graph on n ≥ n0 vertices that contains mo(n)
induced odd cycles. In what follows we will let n0 be suﬃciently large when required and
we will make no attempts to optimise the constants given in our argument.

Sketch proof of Theorem 1.7. We ﬁrst show that ∆(G) = O(1) using analogous arguments
to those in Theorem 1.2.

Lemma 3.2 holds (as (5.1) gives us the analogous bound to (3.1) that we need). Thus

every vertex is contained in at least 1

20mo(n) induced odd cycles. Thus we have

mo(n + 1) ≥ (cid:18)1 +

1

20(cid:19) mo(n),

(5.2)

as in (3.2).

We use the same argument as in Lemma 3.3, replacing m(n) with mo(n), to show that
∆(G) ≤ 35 (we get a diﬀerent value for ∆ as we use the lower bound mo(Gn) ≥ 3(n−8)/3 and
this diﬀers from the lower bound we used for m(n)).
By (5.1) we have fo(Gn) = Ω(3n/3). So we can apply Theorem 1.5 to show we can add
and delete edges incident to O(1) vertices of G to give a cyclic braid H with the same cluster
sizes as Hn. Using this and the knowledge that ∆(G) = O(1), it is easily seen that G must
contain a 3-braid B of even length such that |V (B)| = rn for some constant r.
We now show that G must be a cyclic braid. We can use the same argument as in Lemma
3.13. We now follow essentially the same proof as in Theorem 1.2 with fo(Gn) in place of

30

f (Hn). However, when we apply the process of deleting central clusters, we delete a pair of
adjacent clusters at a time (to maintain the count of odd cycles). We again reach a graph
H ′ with |V (H ′)| = O(1). We can make the analogous deductions from there to reach the
bound

f o
2 (n) ≤ po

2(H ′; x, y).

We then apply Theorem 2.9 to determine that H ′ ∈ Fo(|V (H ′)|). Reversing the process of
deleting central clusters to obtain H from H ′, we see that H ∈ Fo(|V (H)|). Therefore G is
a cyclic braid, with clusters all of size 3 except:

- three clusters of size 2, when n ≡ 0 modulo 6;
- two clusters of size 2, when n ≡ 1 modulo 6;
- one cluster of size 2, when n ≡ 2 modulo 6;
- a single cluster of size 4, when n ≡ 4 modulo 6; and
- either two clusters of size 4 or four clusters of size 2, when n ≡ 5 modulo 6

It remains to determine whether there are edges within the clusters, the relative positions of
the clusters in the cyclic braid (in the cases where more than one cluster does not have size
3) and, in the case n ≡ 5 modulo 6, to determine the precise cluster sizes. Using arguments
of a similar nature to those in Lemma 3.15 and Lemma 3.16, it can be easily checked that
G ∼= Gn for every value of n ≥ n0.

Theorem 1.7 determines which n-vertex graphs contain the maximum number of odd
cycles. Following essentially the same argument we can prove Theorem 1.8 and Theorem
1.9, which determine the family of n-vertex graphs that contain the maximum number of
odd holes or even holes respectively.

Proof of Theorem 1.8 and Theorem 1.9. We use the same argument as in the proof of The-
orem 1.7. In the case of Theorem 1.9, it is easy to modify the argument to consider odd
induced cycles rather than even. The main diﬀerence is at the ﬁnal stage, where we know
G is a cyclic braid and the possible cluster sizes in G. Changing the positions of clusters
and edges within clusters can only aﬀect the holes that do not contain a vertex from every
cluster. Thus any hole that can be aﬀected must have size 3 or 4.

For the odd case, the positions of the clusters and the existence of edges within clusters
will not alter the number of odd holes (as any induced cycle with size 3 or 4 is not an odd
hole). In the even case, it is easy to check that G must be isomorphic to En to maximise
the number of holes of size 4 given the cluster sizes.

31

6 Conclusion

For suﬃciently large n, we have determined precisely which graphs on n vertices contain the
maximum number of induced cycles, the maximum number of odd or even induced cycles,
and the maximum number of holes. However, there are a number of interesting related
questions.

In our proofs above we make no attempts to optimise the value of n0. We know that in
some small cases, Hn does not contain the maximum number of induced cycles [10, 13]. We
believe Theorem 1.2 ought to be true for n0 = 30, but our proof gives a much larger number.
There are several places where we could improve the bound, most notably by choosing a
more careful strategy in Lemma 3.9. However we omit the details as the bound would still
be extremely large.

It is natural to consider induced cycles of some length that depends on n. Let c(n, l)
be the maximum number of length l induced cycles that can be contained in a graph on n
vertices. Let C(n, l) be the set of graphs containing c(n, l) induced cycles of length l.

Question 6.1. For l = l(n), what is C(n, l)?

When l is linear we believe the following should hold.

Conjecture 6.2. Fix c ∈ (0, 1). If l(n) = ⌈cn⌉, then for suﬃciently large n the only graphs
in C(n, l) are cyclic braids of length l.

We hope to return to this in a later paper. Perhaps a similar result holds down to cycles

of length Ω(√n).
Question 6.3. Suppose l(n) > √n. For suﬃciently large n, are all graphs in C(n, l) cyclic
braids?

Another related question is to ask about induced subgraphs which are subdivisions of

some ﬁxed graph H.

Question 6.4. Given a ﬁxed ﬁnite graph H, what is the maximum number of induced
subdivisions of H that can be contained in a graph on n vertices (and which graphs realise
this maximum)?

Theorem 1.2 answers this question for H = C3, but what happens for other graphs? For
instance, which graphs maximise the number of induced subdivisions of K1,3? For large n,
are the extremal graphs always blowups of some subdivision of H? The rooted version of the
question is also interesting, where we consider induced subdivisions of H where the branch
vertices are ﬁxed (for instance Theorem 2.1 is a result of this form for H = K2).

Finally, we remark that the related problem of ﬁnding the graph on n vertices that
contains the most cycles (not necessarily induced) is trivial as we can just take Kn. However,
the problem becomes interesting when we forbid certain subgraphs. Arman, Gunderson and
Tsaturian [1] proved that, for suﬃciently large n, the n-vertex triangle free graph containing
the most cycles is a balanced complete bipartite graph. More recently, Morrison, Roberts

32

and Scott [11] extended this to a wider range of forbidden subgraphs: For k ≥ 2, H an
edge-critical graph with chromatic number χ(H) = k + 1, and n suﬃciently large, the unique
n-vertex H-free graph which contains the most cycles is the complete balanced k-partite
graph.

7 Acknowledgements.

We would like to thank Brendan McKay and Mike Robson for helpful discussions. We would
also like to thank Andrew Treglown for bringing [14] to our attention.

References

[1] A. Arman, D. Gunderson, and S. Tsaturian, Triangle-free graphs with the maximum

number of cycles, arXiv:1501.01088v2, preprint, March 2015.

[2] J. Balogh, P. Hu, B. Lidick´y, and F. Pfender, Maximum density of an induced 5-cycle
is achieved by an iterated blow-up of a 5-cycle, arXiv:1411.4645v1, preprint, November
2014.

[3] B´ela Bollob´as, Yoshimi Egawa, Andrew Harris, and Guo Ping Jin, The maximal number

of induced r-partite subgraphs, Graphs Combin. 11 (1995), no. 1, 1–19.

[4] B´ela Bollob´as, Chiˆe Nara, and Shun-ichi Tachibana, The maximal number of induced

complete bipartite graphs, Discrete Math. 62 (1986), no. 3, 271–275.

[5] Jason I. Brown and Alexander Sidorenko, The inducibility of complete bipartite graphs,

J. Graph Theory 18 (1994), no. 6, 629–645.

[6] Chaim Even-Zohar and Nati Linial, A note on the inducibility of 4-vertex graphs, Graphs

Combin. 31 (2015), no. 5, 1367–1380.

[7] Geoﬀrey Exoo, Dense packings of induced subgraphs, Ars Combin. 22 (1986), 5–10.

[8] Hamed Hatami, James Hirst, and Serguei Norine, The inducibility of blow-up graphs, J.

Combin. Theory Ser. B 109 (2014), 196–212.

[9] James Hirst, The inducibility of graphs on four vertices, J. Graph Theory 75 (2014),

no. 3, 231–243.

[10] Brendan McKay, personal communication.

[11] N. Morrison, A. Roberts, and A. Scott, Maximising the number of cycles in H-free

graphs, In preparation.

33

[12] Nicholas Pippenger and Martin Charles Golumbic, The inducibility of graphs, J. Com-

binatorial Theory Ser. B 19 (1975), no. 3, 189–203.

[13] Mike Robson, personal communication.

[14] Z. Tuza, Unsolved combinatorial problems., BRICS Lecture Series, LS-01-1 (2001),

(available from http://www.brics.dk/publications/).

34

