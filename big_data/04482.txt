An approach towards debiasing user ratings

Abhinav Mishra

School of Computer Science

Georgia Institute of Technology
Atlanta, Georgia 30332–0250
Email: amishra41@gatech.edu

Abstract—With increasing importance of e-commerce, many
websites have emerged where users can express their opinions
about products, such as movies, books, songs, etc. Such
interactions can be modeled as bipartite graphs where the
weight of the directed edge from a user to a product denotes a
rating that the user imparts to the product. These graphs are
used for recommendation systems and discovering most reliable
(trusted) products. For these applications, it is important to
capture the bias of a user when she is rating a product. Users
have inherent bias—many users always impart high ratings
while many others always rate poorly. It is necessary to know
the bias of a reviewer while reading the review of a product. It
is equally important to compensate for this bias while assigning
a ranking for an object. In this paper, we propose an algorithm
to capture the bias of a user and then subdue it to compute the
true rating a product deserves. Experiments show the efﬁciency
and effectiveness of our system in capturing the bias of users
and then computing the true ratings of a product.

6
1
0
2

 
r
a

 

M
4
1

 
 
]

R

I
.
s
c
[
 
 

1
v
2
8
4
4
0

.

3
0
6
1
:
v
i
X
r
a

Figure 1. Audience in general have propensity to give high scores with
respect to the top critics score. However, average score of critics appears
to be more correlated with the score of top critics.

I. INTRODUCTION

With the growing popularity of

the Internet and e-
commerce, many new websites have emerged where users
can express their opinions about products, such as movies,
books, songs, etc. Amazon, for example, stores millions
of products that users can search, browse, buy and rate.

Consequently, it records millions of hits per day and is one
of the most important product websites that has ever existed.
Similarly, IMDB lets users get informed about movies and
also allows them to read other users’ reviews as well as rate
movies themselves.

Most such product rating websites can be modeled as
(directed) graphs where users and products are modeled as
nodes and the rating of a user for a product is captured by
adding a directed edge from the user node to the product
node. The graph is bipartite as only users rate products.
The weight on the edge captures the “rating” that the user
provides to the product. The ratings can be used to rank
products as well as recommend them to other users.

Users have inherent bias while rating a product—many
users always impart high ratings while many others always
rate poorly. For applications in recommendation-based sys-
tems where products are ranked according to their ratings, it
is important to capture the bias of a user when she is rating
a product. In Figure 1, we show the average ratings given
to the movies by audience and critics. These ratings are
collected from www.rottentomatoes.com and are available
as a public dataset1. Values on the axes are mostly missing
values in the dataset. The website www.rottentomatoes.com
also scores the movies by aggregating the reviews from top
critics; these scores are deemed more trustworthy. We can
observe that audience score is overwhelmingly positive with
respect to the top critics score, where as the average score
of all the critics is highly correlated with those of top critics.
This phenomenon is well observed [2] and is attributed to
a difference between quality and user rating. It implies that
user ratings have inherent bias and are not trustworthy.

While global ratings (for example, computed as an av-
erage of all ratings) are less prone to individual biases of
users, individual ratings are susceptible. Many users read
the ratings and reviews of other users when trying to decide
whether to buy a product or not. Thus, it is necessary to
know the bias of a reviewer while reading the review of a
product. It is equally important to compensate for this bias
while assigning a ranking to an object. It is also observed
that for the objects that receive very few ratings, a slight bias
on the part of users can lead to a signiﬁcant change in their

1http://www.grouplens.org/node/462

ratings [2]. In experiments, we observe such phenomenon
as well.

Product ratings usually follow the J-shaped distribu-
tion [5], i.e., most of the ratings are overwhelmingly positive
along with a small but signiﬁcant number of high negatives.
In Figure 1, we infer similar behavior as well. These ratings
do not follow the expected normal distribution. This also
indicates that the average rating may not be a right metric
to judge product quality because of bias [4], [5]. In this paper
we propose a technique which captures user bias and factors
it while computing the rating of an object. We follow the
intuition that if a user is known to exaggerate her ratings,
i.e., user is positively biased, then we compensate for her
exaggeration by reducing the ratings. Likewise if a user is
known to give low scores, then we increase the ratings.

Speciﬁcally, our main contributions are as follows:
1) We propose an iterative technique, where we model
both bias and true rating of an item and derive a
mutually-recursive formulation.

2) We show that our technique converges to a unique
solution, i.e., it does not depend on the initial condi-
tions. Further, we prove that error after any iteration
is bounded, and thus, maximum number of iterations
required can be ﬁxed apriori.

3) We conduct an in-depth evaluation with the earlier
work, current schemes used in the modern system, and
more speciﬁcally we show that our technique adheres
well with the ground truth in terms of absolute error,
error in ranking, etc.

4) We also analyze the behavior and error associated
with items that receive fewer ratings. We conjectured
that such items are likely to be impacted more by
user bias. We experimentally verify and analyze this
phenomenon in detail.

In section II, we discuss causes of user bias and related
approaches for debiasing. In section III, we formally deﬁne
bias of a user and true rating associated with items. We
present the algorithm, its interpretation, iterative technique
to compute it, and ﬁnally we discuss the complexity of
the algorithm. We show the necessary properties such as
convergence, uniqueness, and the error-bound in Section
IV. In Section V, we give the experimental results such
as performance of our algorithm and other approaches
(Section V-B), effect of sparse ratings, analysis of ranking,
convergence analysis (Section V-C). Finally, we conclude in
Section VI.

II. RELATED WORK

In this section, we review prior work about the origin of
bias and argue that users are indeed biased. We then give a
overview of related approaches to compute bias.

A. Sources of Bias

The bias we usually refer to is known as cognitive bias.
It is the human inability to judge the situation based on
evidences alone and is inﬂuenced by cognitive factors as
well. It has been studied in great detail
in the area of
cognitive science and social psychology. This was intro-
duced by Tversky and Kahneman [6]. In an experiment [12],
they presented a numerical estimation of 8! (shown in a
different manner) to two groups. Two groups came up with
a signiﬁcantly different estimates. When we rely too heavily
on few parameters, the bias is known as anchoring bias.

B. Bias in product ratings

In this subsection, we focus on biases that affects product
ratings. First we consider affect heuristic2. In general, if a
reviewer is presented with large positive ratings and reviews,
then she is more likely to give positive scores [11]. Also
sorting the reviews based on ratings triggers the affect
heuristic as well. Purchasing bias [5] is another example,
where people who value a product highly are likely to buy
and will not usually write a poor review. Even if we assume
that an online rating system (for a user to rate) has been built
perfectly including capturing the minute details of an object
such as packaging of the object, color, etc., a truthful user
may still not conceive it perfectly. For example, it has been
observed that user is likely to give high score on Amazon
than on eBay [13]. This is because human judgments are
subject to a number of bias, including focusing more on few
parameters (Amazon emphasizes strength parameter [13]) of
the evidence [6].

C. Existing Approaches

In this section, we review related algorithms proposed to
compute bias. In all the algorithms, the main goal was to
identify the net bias rather than computing different biases
for each user. The ﬁrst such work [8] noticed that product
evaluation depends greatly on the evaluator. They proposed
an algorithm to compute bias and showed that it outperforms
standard statistical measures. However, their technique looks
locally to compute true rating ([8] refer it as consensus),
i.e., when source bias is not considered. This will work if
these biased ratings can give an unbiased estimate of true
rating. However, this is not true. Ranking algorithms like
HITS [7] and PageRank [1] look at the global structure,
e.g., opinion of a better node should be given more weight.
In our case, opinion of a highly biased user should not be
directly used to calculate true rating. Recently, [10] proposed
many heuristics to compute true ratings based on local
approaches. Later, [9] authors improved their existing system
by considering the global structure as well. In experiments,
we consider this algorithm [9] as the benchmark and give
in-depth comparison with our technique.

2It is a heuristic in which current affect inﬂuences decisions.

III. ALGORITHM

The system is modeled as a directed bipartite graph G =
(V = U ∪ O, E ⊆ U × O) where U and O denote the
set of users and objects (products) respectively. The only
edges allowed are those from U to O, i.e., users rate objects.
Thus, users have only outgoing edges and objects have only
incoming edges. We constraint the user to give at most one
rating to a product.
The weight of a directed edge, denoted by wij, captures
the rating given by user ui ∈ U to object oj ∈ O. It is
assumed that if the weight is high, the user is rating the
object positively; on the other hand, if it is low, it is a
negative opinion. In this work, we assume the weights to
be between 0 and 1, i.e., wij ∈ [0, 1]. The neutral rating is
somewhere in between, but not necessarily at 0.5.

The number of edges in such a graph may be large, even
if the number of users and objects are not very large. In
most real life graph datasets, however, users rate only a few
products, and hence, the size of the graph remains within a
small factor of the number of nodes.

The standard method to compute the net rating of any item
i is to consider the average of all the ratings item i receives
(avgj{wji}). The method may have some ﬁlters such as
frequent users, but in general, the mean is considered to be
the best estimate. In our work, we aim to remove bias from
each individual rating, and then we take the mean. If f (wji)
is an estimate of the bias-free rating of a user to a product,
then according to our formulation, avgj{f (wji)} is the net
bias-free rating of the item i.

A. Model

In this section, we precisely deﬁne the terms bias of a user
ui, denoted by bi, and true rating of an object oj, denoted
by rj. Further, d+
i denotes the set of objects a user ui rates
and d−
j denotes the set of users that an object oj receives

ratings from. Then,(cid:88)

(cid:12)(cid:12)d+

i

(cid:12)(cid:12) =

(cid:12)(cid:12)d−

j

(cid:12)(cid:12) .

(cid:88)

oj∈O

ui∈U

(1)

(2)

1) Bias: The bias of a user is deﬁned as the average

deviation of ratings given by her from the true ratings:

1(cid:12)(cid:12)d+

i

(cid:12)(cid:12) (cid:88)

oj∈d+

i

(cid:0)wij − rj

(cid:1).

bi =

In the above equation, wij−rj measures the deviation of the
user i while rating an object j. Here wij denotes the rating
given by the user i to the object j, and rj is the true rating
of the object j. For now, we assume that the true ratings
are known. Later, we show that the algorithm converges to
a unique solution, irrespective of the initial values of true
ratings assumed.

If a user gives higher ratings to objects than the true
ratings those objects deserve, the bias of the user will be
positive, and the user is said to be positively biased. Such
intuition is clearly captured in Eq. (2). Bias of a user can
thus be seen as expected exaggeration in her rating an object.
Assuming the true ratings also lie between [0, 1], the bias
values range from −1 to 1, i.e., bi ∈ [−1, 1]. If bi < 0, it
means that the user i usually gives lower scores, and likewise
if bi > 0 indicates that the user give higher ratings.

It can be argued that products also have biases, i.e., some
products are likely to get high ratings and some are expected
to get poor ratings. For example, a good movie is expected
to attract high ratings from the viewers. If δ be the average
rating of all the products and bo be the bias of object o, then
clearly, true rating of the object o is δ + bo. Therefore, the
true rating implicitly captures the product bias, and thus we
do not have to model item bias separately.

2) True Rating: If we know that the bias of a user, i.e.,
she gives high/low scores than the average, then we can
adjust her rating by factoring in bias. For example, if a user
has a positive bias, then her ratings are more than what
they should be. Hence, to offset the effect of bias, some
fraction of the ratings should be reduced. Similarly, if a
user is negatively biased, some fraction of the ratings should
be increased. Intuitively, the transformed weight would be
the user’s rating minus the bias, i.e., (wij − bi). But this
formulation does not guarantee a convergence. Therefore,
we make a relaxation to the formulation.

A simple relaxation for a new rating, denoted by w(cid:48)

ij, after

factoring bias can be written as:

If we know that a user is gives higher ratings than usual,
then we expect her ratings to be less trustworthy. In fact, we
try to factor in such exaggeration in ratings while coming up
with a more realistic rating. We refer to such exaggeration
(either high or low) in ratings as bias, and the realistic rating
as true rating. In our approach, we compute bias of each
user assuming that we know the true ratings of all object.
Likewise, we compute true rating of an object by assuming
that we know the bias of all object. We create an simple
iterative system of two mutually recursive variables, bias
and true rating. The precise details are presented next.

ij = wij − α · bi.
w(cid:48)

(3)

Here we increase the rating, if bias is negative, and decrease
if bias is positive. We restrict α to (0, 1). For technical
reasons, such as convergence, we are forced to keep α < 1.
This will be made clear in later sections. If α is high, we
remove more bias and likewise, if α is low, we change the
weight by a smaller amount. At the same time, keeping a
parameter is also helpful in many situations. For example, if
we know that there are few trusted users such as top critics,
who are considered as unbiased users. In such a scenario, we

can keep α = 0 for such users. Similarly, if we know that
there are few users who are unreliable, then we can keep a
high α for such users.

In the above formulation, it should be noted that the
new weight can be outside the range [0, 1]. To overcome
this undesirable property, we deﬁne a hard cut-off at the
boundaries, i.e., 0 and 1.

w(cid:48)
ij =

0
1

wij − α · bi

if wij − α · bi ≤ 0
if wij − α · bi ≥ 1
otherwise


ij = max(cid:8)0, min{1, wij − α · bi}(cid:9).

w(cid:48)

This ensures that whenever the new weight is more than 1,
it is reset to 1 and similarly, whenever it is negative, it is
reset to 0. Eq. (4) can be succinctly written as

(4)

(5)

The above function to compute w(cid:48)
ij is our de-biasing func-
tion (mentioned as f (·) earlier), and it returns the unbiased
ratings. Using unbiased ratings, the true rating of an object
is deﬁned as the average of the unbiased ratings:

(cid:88)

ui∈d

−
j

rj =

1
|d−
j |

w(cid:48)
ij.

(6)

Note that the above deﬁnitions, as given in Eq. (2), Eq. (5)
and Eq. (6) depend on each other. Later, we show how to
solve such a system of interdependent equations using an
iterative algorithm.

3) Connection with Co-reference and Co-citation Matri-
ces: We now analyze the bias and true rating formulation
using matrix algebra, and see an intriguing connection with
the co-reference and co-citation matrices. Notice that there
is a non-linearity involved in the formulation of true rating
in the form of max and min operators. For simplicity, we
ignore these terms in the current section, but later we given
an unconditional proof of convergence and uniqueness.

Suppose

(cid:126)b
vectors

rating
Let D+

D− = diag((cid:12)(cid:12)d−

(cid:126)r

and
are
and W is
=

diag((cid:12)(cid:12)d+
(cid:12)(cid:12) ,(cid:12)(cid:12)d−

(cid:12)(cid:12) ,(cid:12)(cid:12)d+
(cid:12)(cid:12) , . . .) be the two diagonal

true
adjacency matrix.
and

(cid:12)(cid:12) , . . .)

(cid:12)(cid:12) ,(cid:12)(cid:12)d+

(cid:12)(cid:12) ,(cid:12)(cid:12)d−

the
the

bias

and

1

2

3

1

2

3
degree matrices. Further,
let C be the (symmetric)
connection matrix with 0/1 entries, i.e., if a user rates an
item, there is a 1 entry in the matrix; otherwise, it is 0. We
can now write the bias and true rating vectors as follows:

(cid:126)b = (D+)−1(W(cid:126)1 − C(cid:126)r)
(cid:126)r = (D−)−1(W T(cid:126)1 − αC T(cid:126)b)

(7)
(8)
where (D∗)−1 denotes the Moore-Penrose pseudoinverse of
the degree matrix.

The analytical solution for bias can be written as:

(cid:126)b =(cid:0)I − α · (D+)−1C(D−)−1C T(cid:1)−1
(cid:16)

(cid:48)(cid:48)T(cid:17)−1

I − α · C(cid:48)C

(cid:126)m

=

(cid:126)m

(9)

(10)

Here, C(cid:48) and C(cid:48)(cid:48) are two degree normalized connection
matrices and (cid:126)m = (D+)−1(W − C(D−)−1W T )(cid:126)1. For
(I − α · C(cid:48)C
(cid:48)(cid:48)T )−1 to exist, we need α < 1. This constraint
on α would ensure that the spectral radius is less than 1.
This is the reason we put a constraint on α.
(cid:48)(cid:48)T is the co-reference matrix, thus our
formulation bears a signiﬁcant similarity with the Random-
ized HITS [14], and matrix equations are of similar forms.
We can similarly analyze true rating vector which relies on
the co-citation matrix.

Notice that C(cid:48)C

B. Iterative algorithm

The iterative algorithm proceeds by updating the bias and
rating of nodes in each iteration. Given the bias of users
obtained in the previous iteration (say, iteration t), the true
ratings of objects are computed for the current iteration (i.e.,
iteration t + 1). Using these values in turn, the biases are
again computed for the current iteration. Denoting the bias
of user ui and true rating of object rj at iteration t by bt
i
and rt

j respectively,

max(cid:8)0, min{1, wij − α · bt
i}(cid:9)
(cid:0)wij − rt+1

(cid:1)

j

(11)

(12)

rt+1
j =

bt+1
i =

(cid:88)
(cid:88)

ui∈d

−
j

oj∈d+

i

1
|d−
j |
1
i |
|d+
(cid:88)

oj∈d+

i

(cid:16)

The above two equations can be combined to obtain a

single recursive equation for bias:

(cid:88)

i}(cid:17)
max(cid:8)0, min{1, wij − α · bt

bt+1
i =

1
|d+
i |

wij − 1
|d−
j |

ui∈d

−
j

The algorithm proceeds till it reaches the stopping cri-
terion. It may stop when the number of iterations reach
a pre-deﬁned threshold or when the change in values of
bias and rating fall below another pre-deﬁned threshold. In
Section IV-B, we show that the errors fall below a given
threshold after at most a certain number of iterations.

The initial bias and rating values are assigned randomly.
In Section IV-C, we show that the initial values do not
matter, and the ﬁnal values obtained after convergence of
the algorithm are unique.

C. Complexity

We now analyze the runtime complexity of the above
iterative algorithm. In each iteration, the values of bias and
rating are updated for all nodes. Updating the rating of
an object oj requires O(|d−
j |) time. For all objects, the
|d−
j |) = O(m), where
m is the number of edges in the graph. Similarly, updating
i |) time. The amortized
the bias of user ui requires O(|d+
|d+
i |) which is again
O(m). Thus, the time spent per iteration is O(m). If the

amortized total time taken is O((cid:80)
total time taken for all users is O((cid:80)

ui

oj

algorithm is run for k iterations, the total running time is
O(km).
Although m can be as large as |U|·|O|, for most practical
datasets, the users rate only a handful of objects. Hence, in
practice, m (cid:28) |U| · |O|. In general, m is more close to
n = O(max{|U|,|O|}). We show in Section IV-B that the
number of iterations k is logarithmic in the (inverse) error
term. Thus, the algorithm is very fast.

IV. PROPERTIES OF THE ALGORITHM

In this section, we characterize certain useful properties
of the algorithm including error bounding of values and
convergence to unique values. In this section, we show that
error after any iteration is bounded. This helps in ﬁxing the
maximum number of required iterations apriori. Before we
proceed to the proof, we present four facts. Namely
Fact 1: If w−α·bi ≥ 1 =⇒ max(0, min(1, w−α·bi)) = 1.
Fact 2: If w−α·bi ≤ 0 =⇒ max(0, min(1, w−α·bi)) = 0.
Fact 3:
max(0, min(1, w − α · bi)) = (w − α · bi).
Fact 4: |b∗

If 0 ≤ (w − α · bi) ≤ 1
i − b∗

j| ≤ 2.

Lemma 1: Suppose bm

We now prove the following lemma that states that the
difference between the ratings are bounded by the difference
between the different values of bias. It is used in later proofs.
i are two values of bias of
node i. These can be the values in two different iterations
m and n or can also be two different biases when the initial
conditions are different, i.e., we start with two different seed
values of bias. We prove the following inequality:
M = | max(0, min(1, w − α · bm

i and bn

=⇒

N = |(w−α·bm
i )|+|(w−α·bn
and we can rewrite N as α · |bm
i − bn
i |.
i − bn
M ≤ α · |bm
i ) ≤ 0 and (w − α · bn
6) When (w − α · bm
Using Fact 2, we get M = 0. Since α · |bm
positive quantity, therefore, M ≤ α · |bm

i )|. Notice that N ≥ M
i |. Therefore,
i ) ≤ 0:
i − bn
i | is a
i − bn
i |.

A. Error-bound

In this section, we bound the error; speciﬁcally, we show
that the difference of bias of two consecutive iterations is
bounded and it decreases exponentially as we increase the
number of iterations.

Suppose bt

i is the bias value of node i after t iterations.
We prove the following theorem on error that states that the
difference is bounded by an exponential factor of α.

Theorem 1: The difference of bias of a node at any
iteration t from the next iteration is bounded by an inverse
exponential function of t:

i − bt
|bt+1

i| ≤ 2 · αt+1.

(13)

Proof: We use mathematical induction for the proof.

Basis: We ﬁrst prove for t = 0.

i − bn
i |

≤ α · |bm
Proof: We prove this for six possible cases:
i ) ≥ 1 and (w − α · bn

i ) − max(0, min(1, w − α · bn
i )|
i − b0
|b1
i|
=
|d+
i |

1) When (w − α · bm

i ) ≥ 1:

i − bn

2) When (w − α · bm

3) When (w − α · bm

i )). Hence M ≤ α · |bm

Using Fact 1 we can observe that M = 0. Since both α
and |bm
i | are positive quantities, we can represent
i |.
i − bn
this in an inequality form as M ≤ α · |bm
i ) ≤ 1:
i ) ≥ 1 and 0 ≤ (w − α · bn
Using Fact 1, we get M = 1− (w − α· bn
i ). We know
i ) ≥ 1. Therefore, M ≤ ((w− α.bm
i )−
that (w− α· bm
(w − α · bn
i − bn
i |.
i ) ≤ 0:
i ) ≥ 1 and (w − α · bn
From Fact 1 and Fact 2, we get M = 1. Since (w −
i ) ≥ 1 and (w − α · bn
i ) ≤ 0, α · |bm
i − bn
α · bm
i | ≥ 1.
Therefore M ≤ α · |bm
i |.
i − bn
i ) ≤ 1:
i ) ≤ 1 and 0 ≤ (w− α· bn
4) When 0 ≤ (w− α· bm
Using Fact 3, we obtain M = (w − α· bm
i )− (w − α·
i |. In other words, M ≤ α·|bm
i − bn
i |.
i ) = α.|bm
bn
i ) ≤ 0:
i ) ≤ 1 and (w − α · bn
Using Fact 3 and Fact 2, we get M = (w − α · bm
i ).
Now, let us consider a quantity N = |(w − α · bm
i ) −
(w − α · bn
i ) ≤ 0, therefore,

i )|. Since, (w − α · bn

5) When 0 ≤ (w − α · bm

i − bn

−
k∈d
j

j∈d+
− max(0, min(1, wkj − α · b0
k))

|d+
i |

(cid:12)(cid:12)(cid:12) 1
≤(cid:12)(cid:12)(cid:12) 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 1

≤

≤

|d+
i |

|d+
i |

(cid:16) 1
|d−
j |
(cid:16) 1
|d−
j |
 1
 1

|d−
j |

|d−
j |

(cid:88)
(cid:88)

i

(cid:88)
(cid:88)

i

j∈d+

j∈d+

i

(cid:88)
(cid:88)

(cid:88)
(cid:88)

k∈d

−
j

k∈d

−
j

max(0, min(1, wkj − α · b1
k))

(cid:16)
(cid:17)(cid:17)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12) max(0, min(1, wkj − α · b1
(cid:12)(cid:12)(cid:12)(cid:17)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) [Using Lemma 1]

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) ≤ 2 · α


k − b1
k|)

(α · |b2

(α · 2)

[Using Fact 4]

k))

i

−
k∈d
j

j∈d+
− max(0, min(1, wkj − α · b0
k))

Induction step: We assume the bound to be true for bt
the tth iteration, i.e., bt

i in
≤ 2 · αt. In the (t + 1)th

i − bt−1

i

max(0, min(1, wkj + α · bt

k))

iteration,

i − bt
|bt+1
i|
=
2|d+
i |

(cid:12)(cid:12)(cid:12) 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 1

|d+
i |

|d+
i |

i

(cid:16) 1
(cid:88)
|d−
j |
 1
 1

(cid:88)
(cid:88)

|d−
j |

|d−
j |

i

j∈d+

j∈d+

i

≤

≤

(cid:88)

(cid:88)
(cid:88)

k∈d

−
j

k∈d

−
j

= 2 · αt+1

k∈d

j∈d+
− max(0, min(1, wkj + α · bt−1

−
j

k

(α · |bt

k − bt−1

k

|)

)))

(cid:17)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)


(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)


Count of movies

Dataset 1 Dataset 2

Bin Number of ratings

1
2
3
4
5
6
7
8
9
10
11

1
2-3
4-7
8-15
16-31
32-63
64-127
128-255
256-511
512-1023
>1023
Total

114
131
142
204
311
463
508
633
598
406
196
3706

13
26
40
76
109
216
258
363
366
273
122
1862

(α · 2 · (α)t)

[Induction assumption]

GROUPING OF MOVIES BASED ON THE NUMBER OF RATINGS RECEIVED.

Table I

Thus, the error is bounded by an inverse exponential function
of t.

B. Proof of Convergence

Using the above error bounds, we can observe that
difference of two consecutive iterations decrease as we
increase the number of iterations. For any  > 0, we have
 ) such that for any two iterations m, n > t, we
t = log1/α( 2
have:

|bm − bn| ≤ 

The above sequence is a Cauchy sequence and thus con-
verges.

C. Proof of Uniqueness

M =

j∈d+

i

Proof:

|d+
i |

(cid:12)(cid:12)(cid:12) 1
i |
2|d+
≤(cid:12)(cid:12)(cid:12) 1
(cid:88)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 1
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) 1

(cid:88)
(cid:88)
(cid:88)

|d+
i |

|d+
i |

≤

≤

=

i

i

j∈d+

j∈d+

i

k))

−
k∈d
j

−
k∈d
j

max(0, min(1, wkj − α · b1
k))

j∈d+
− max(0, min(1, wkj − α · b2
k))

(cid:88)
(cid:17)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12) max(0, min(1, wkj − α · b1
(cid:12)(cid:12)(cid:12)(cid:17)(cid:12)(cid:12)(cid:12)
(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) [Using Lemma 1]

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12) [By deﬁnition ]


(cid:16) 1
(cid:88)
j |
|d−
(cid:16) 1
(cid:88)
|d−
j |
 1
− max(0, min(1, wkj − α · b2
k))
 1
 1

(cid:88)
(cid:88)
(cid:88)

k − b2
k|)

p − b2
p|)

(α · M )

(α · |b1

(α · |b1

|d−
j |

|d−
j |

k∈d

k∈d

−
j

−
j

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)


i

−
j

k∈d

j∈d+

|d−
j |

|d+
i |
= α · M
Since α ≤ 1 and M is a positive quantity, inequality M ≤
α · M holds when M = 0. This conﬁrms uniqueness.

We next establish the proof for the uniqueness of the
system. We will prove it by contradiction. Assume that there
are at least two values of bias that satisfy the bias equation.
i be two converged values of node i and
Suppose b1
their difference is δ(i) = b1
i . Suppose, M denotes the
largest such difference, i.e., M = maxi δ(i). If we can show
that M is zero, then uniqueness is proved. In other words,
there exist a single solution to the bias equation.

i − b2

i and b2

Theorem 2: The bias of a node converges to a unique

value.

V. EXPERIMENTS

A. Dataset description

We use two datasets for our experiments. They are avail-
able from http://www.grouplens.org. The ﬁrst dataset from
www.grouplens.org/node/73 consists of roughly 1 million
movie ratings given by around 6,000 users to around 3,700
movies. The second dataset from http://www.grouplens.org/
node/462 contains extra information about the movies such
as ratings given by the top critics. Thus we have both user
ratings and the net score given by the top critics. We call the

Figure 2.
received for Dataset 1. Most movies received very few ratings.

Distribution of number of movies with number of ratings

Figure 3. Mean Square Error for techniques on the Dataset 2.

ﬁrst dataset as Dataset 1 and the second dataset as Dataset
2 throughout the paper.

In both the datasets, most of the movies receive only a few
ratings. For example, in Figure 2, we show the histogram of
movies over the number of ratings they receive for Dataset
1. We can notice that movies with few ratings dominates
the set. In Dataset 2, we observe similar behavior as it
is essentially a subset of Dataset 1 with extra information
such as top critics ratings. To gain more insights, we divide
the two datasets into different bins based on the number of
ratings a movie receive. This helps in analyzing the rating
data in much greater detail. We divided all the movies in
11 groups (or bins) based on the number of ratings they
receive. While binning, we particularly focused on those
movies which received fewer ratings. Table I shows the
distribution. In both these datasets, we normalize the movie
ratings in the range 0 to 1, with 0 implying the lowest score
and 1 the highest.

B. Performance Evaluation

In this section, we report the results against the baseline
and existing techniques. Later (Section V-C) we analyze the
behavior of our algorithm qualitatively.

We consider the top critics rating as the ground truth, and
we compare the various techniques against this metric. We
compute the mean square error (MSE) and error in ranking.
In MSE, we simply look at the deviation in ratings returned
by different techniques with respect to the top critics rating.
It has been shown that the critics score correlate well with
the box ofﬁce success of a movie in a long term, not so
much with early box ofﬁce receipts [3]. Therefore, it is ﬁt
to serve as a ground truth. To the best of our knowledge,
Dataset 2 is the only publicly available dataset with critics
ratings, and therefore in this set of experiments, we use this
dataset alone.

We show that our algorithm adheres well with the critics’
rating than the baseline method and a representative algo-
rithm [9]. Mean rating is currently the most widely used
approach in most systems with small ﬁltering mechanisms
such as frequent users. Therefore, it is a good candidate for
a baseline. The algorithm in [9], similar to our algorithm,

Figure 4. Absolute error in ranking computed over the Dataset 2.

exploits the global structure of the graph rather than focusing
locally. The original algorithm suffers from the divide-by-
zero problem and the authors suggested using a small value;
so, for our comparison, we used 0.01.

Note that the algorithm proposed in [9] does not converge
and the ﬁnal values (which are out of scale) depend on
the initial seeds. For a fair comparison with this algorithm,
we consider another metric—error in ranking. Initially, we
sort the movies based on the top critics score to know
their ranks and then we simply look at the average absolute
distance between the ranking returned by the technique (our
algorithm and [9]) and critics ranking.

The mean square error with mean rating on Dataset 2 is
0.142 while our algorithm (α = 0.99) reduces it to 0.129.
In later sections, we analyze the behavior of our algorithm
for different values of α. For now, we assume that we are
trying to remove as much bias as possible, and therefore, we
keep a high value for α (such as 0.99). To gain more insight,
we plot the error across different bins Table I for these two
techniques in Figure 3. We can observe that our algorithm
gives superior results across all the bins, especially in the
ones that receive few ratings. We can also observe that the
error reduces as the number of ratings per bin increases.
This phenomenon is explained in detail in Section V-C2.

Algorithm proposed in [9] does not converge, therefore
we compare the ranking returned by our algorithm against
those as authors [9] originally suggested. In Figure 4, we
can notice that our algorithm outperforms the algorithm.
Also, the error in ranking decreases as the number of ratings
increases.

(a) Bias distribution for α = 0.99.

(b) Bias distribution for [9].

Figure 5. Distribution of bias.

(a) True rating distribution for α = 0.99.

(b) True rating distribution for [9].

Figure 6. Distribution of true ratings.

C. Qualitative Evaluation

In this section, we look at other properties of our algo-
rithm, mean rating and the algorithm proposed in [9] such
as the distribution of bias, effect of number of ratings a
movie receives, convergence analysis of the algorithm, and
comparison of relative rankings. As Dataset 2 is simply
a smaller subset of Dataset 1 with the additional critics
information, we now show results directly on the Dataset
1.

1) Distribution of bias and true rating: In this experi-
ment, we look at the distribution of bias and true rating
obtained by running our algorithm and algorithm in [9].
Figure 5 shows the distribution of bias at the end of 10
iterations. Our algorithm gives a bell curve type distribution.
Note that the algorithm in [9] did not converge. We observed

small changes in the bias distribution for different values of
α such as 0.2, 0.5 and 0.99. The bias values obtained by
the algorithm in [9] are all negative and out of scale. Our
bias values, on the other hand, quantify the effect by which
the rankings etc. are shifted, and are therefore, more close
to actual biases.

Figure 6 shows similar distribution of true ratings at the
end of 10 iterations for our method and the algorithm in [9].
Even with high α our algorithm gives meaningful value of
true rating. Once again, the actual values of true ratings
obtained using the algorithm in [9] are useful only for
relative ranking purposes and the absolute values do not
convey anything. The ratings obtained by our method are
more indicative of the actual ratings.

2) Effect of number of ratings: As discussed earlier, there
are many movies for which the number of ratings is quite
less. There are many reasons for fewer ratings. A movie
that has been marked as “poor” by a user is likely to
be watched by less number of people and will thus have
only a few ratings. On the other hand, when a movie is
rated “excellent”, more people watch/buy it, and the movie
receives more ratings. This behavior is loosely termed as
purchasing bias. Thus, we expect a movie with a large
number of reviews to have high ratings, and a movie which is
rated by few users to be lowly rated in general. Experiments
also reveal such behavior.

Figure 7(a) shows the variation of the true ratings obtained
using different α values. It also plots the mean of the original
ratings. As predicted by the purchasing bias, movies with
more ratings generally have higher values. We did not plot
the ratings obtained using the algorithm in [9], as they are
very high and out of scale and their absolute values do not
signify anything. Instead, later we compare with the relative
ranking as the authors in [9] intend to do.

The next graph, Figure 7(b), plots the deviations for each
bin. It captures the average difference of the true ratings
from the mean rating. The deviation of bin k is

(cid:88)

oj∈bin(k)

bindev(k) =

1

|bin(k)|

|rj − meanRatingj|

where |bin(k)|
meanRatingj is the mean rating of movie oj.

is the number of movies in bin k and

The deviation is high for movies that receive fewer ratings
and is much low for movies that are rated by many users.
This can be explained by the “law of large numbers” that
states that the average of a large number of values is closer to
the expected value. The second important observation is the
fact that the deviation is higher for larger α. The parameter
α denotes the quantity that is removed from the mean rating.
When α = 0, the user is never biased, and the true rating
is equal to the mean rating. With a larger amount of shift,
the deviation is larger as well. Finally, it seems that the
deviation in later bins (those with more ratings) are higher.
It is because average true rating also increases in the later

(a) Variation of ratings across bins.

(b) Deviation of ratings across bins.

(c) Relative deviation of ratings across bins.

Figure 7. Comparison of ratings across different bins.

bins. However, we do not expect the relative deviation to be
as large.

To understand this behavior better, we next compute the
relative deviation in each bin as the ratio of deviation to the
true rating:

|rj − meanRatingj|

oj∈bin(k)

rj

relbindev(k) =

1

|bin(k)|

(cid:88)

Figure 7(c) shows the graph.

Indeed, the relative deviations in bins with fewer ratings
are much higher. While for movies having less than 4 ratings,
the relative deviation can be as high as 25% , for those with
more ratings, it stabilizes to 1%. Even when α is very high
(0.99), it is around 5% only.

3) Comparison of relative ratings: A ranked solution has
also been proposed by the authors of [9]. They have shown
that relative ranking could still be preserved even if the
algorithm does not converge. In this section, we compare
the ranking of movies based on the ratings obtained using
the algorithm in [9] and our algorithm.

The ﬁrst table, Table II, ranks the movies according to the
mean rating they received originally. When α is small, there
is little effect of bias, and our rankings closely resemble that
of mean rating. In general, we do not expect a movie with a
high mean rating to become a very bad movie after removing
bias. There will be some difference and as α increases, such
differences may increase. Still, we do not expect a dramatic
change. Even for very large α (0.99), the list obtained is
better than that using [9]. Many of the top-10 movies in
that list are ranked in thousands as opposed to only one
such case for our algorithm. In general, our results are more
stable.

In the next

table, Table III, we ﬁrst sort

the movies
according to the ratings obtained using α = 0.99, and then
tabulate their rankings using the other schemes. Once more
it can be observed that all the ranked lists are similar except
for the algorithm in [9] as it shows instabilities.

Movies that are rated by many users generally receive
higher ratings. In Table IV, movies are sorted in a de-
scending order according to the number of ratings they have

(a) True Rating.

(b) Bias.

Figure 8. Convergence plot: error versus number of iterations.

received. Most largely rated movies are indeed highly rated.
All the algorithms including the one from [9] rank them high
(within 15%, but mostly within 10%).

It

is, however, more interesting to analyze how the
rankings behave for movies that receive very few ratings.
The ﬁnal table, Table V, show the results for movies that
have received only a single vote. We have shown only
15 movies sorted according to their IDs. As indicated by
the purchasing bias, these movies are poorly rated, both
according to mean rating and our algorithm. The algorithm
in [9], shows some inconsistent results and ranks certain
poorly rated movies very highly (e.g., movie IDs 286, 396,
and 402). Our algorithms show more meaningful and stable
ranking.

4) Convergence: In this set of experiments, we empir-
ically measure the rate at which our algorithm converges.
Figure 8 shows the rate of convergence for both true rating

Movie ID

Mean
Rating

3280
3233
1830
3881
3656
787
3607
3172
3382
989

1
2
3
4
5
6
7
8
9
10

α =
0.5
101
3
7
10
8
5
6
4
1
2

0.99
1417

4
9
33
15
5
10
6
1
3

0.2
12
3
7
9
8
5
6
4
1
2

[9]

4

2021
19
1641
2688
1152
10
3456

1

3369

TOP RANKED MOVIE AND THEIR IDS UPON SORTING BY MEAN RATING.

Table II

TOP RANKED MOVIE AND THEIR IDS UPON SORTING BY TRUE RATING

MOVIE ARE SORTED (DESCENDING) BASED ON THE NUMBER OF

RATINGS THEY RECEIVED.

Movie ID

127
133
139
142
226
286
311
396
398
402

0.2
3674
3670
450
3696
3529
2369
2358
440
366
2400

α =
0.5
3634
3544
529
3691
3536
2145
2112
503
333
2216

0.99
3225
2355
709
3687
3573
1727
1652
654
286
1857

Mean
Rating
3678
3679
374
3684
3520
2464
2466
376
377
2543

[9]

3686
3696
3555
3688
3551
94
3477
38
3380
37

Movie ID

0.99

3282
557
989
3233
787
3172
578
2503
1830
3607

1
2
3
4
5
6
7
8
9
10

α =
0.5
0.2
1
1
9
15
2
2
3
3
5
5
4
4
14
17
13
13
7
7
6
6
Table III

Movie ID

2858
260
1196
1210
480
2028
589
2571
1270
593

0.2
79
35
98
377
889
67
320
82
429
60

FOR α = 0.99.

α =
0.5
91
35
108
407
936
77
354
96
455
62
Table IV

0.99
111
50
149
486
1016
107
417
126
529
76

Mean
Rating

[9]

9
23
10
2
6
8
25
13
3
7

1
5

3369
2021
1152
3456

9
34
19
10

Mean
Rating

76
34
91
345
861
64
300
77
438
60

[9]

209
208
318
616
1080
316
594
205
838
277

and bias. The error is measured as the sum of differences
in bias (or true rating) values over all nodes between two
consecutive iterations. The algorithm in [9] did not converge
in our setting.

We choose 0 as the initial seed value of bias for all nodes.
In the ﬁrst iteration, this value is used to compute true ratings
and in turn the new bias values. Since seed bias is 0, bias
computation is independent of α for ﬁrst iteration. From
second iteration onward, α starts to make a difference in
the convergence rate of bias and true rating.

In the graphs, we have plotted the error values up to 50
iterations. We use the L1 norm to compute error. Note that
an error value, say 0.1, as shown in the graph is the sum of
error values over 3,000 nodes. Consequently, the error for a
single node is very low.
The rate of convergence is slower for a larger α. When
α → 1, the error in each node can be as large, and therefore,
the rate of convergence will be slow. On the other hand, for a
small α, the values converge very rapidly, and the algorithm
is very practical.

Since it has been shown that the error falls exponentially,
the stopping criterion can also be chosen to be when
the difference in values between two consecutive iterations
becomes less than a threshold . The number of iterations is
a logarithmic function in the inverse of the threshold .

VI. CONCLUSION

In this work, we have proposed a novel technique to
compute the bias of users and consequently true ratings
for products. People have different views when they rate a
product and it is necessary to capture their bias. By factoring
bias, we obtain true ratings of a product. The bias and true
rating values computed by our algorithm are meaningful and
can be associated directly with the ratings user provide. Our
algorithm is iterative, fast and has several nice properties
including convergence to a unique solution and bounded
errors. The maximum number of required iteration can also
be ﬁxed apriori depending on the level of accuracy required.
In experiments, we observe that our technique produces
consistent and good results. In future, we would like to
analyze the change in user biases over time. For example,
users tend to give high ratings right after a movie release.

REFERENCES

[1] S. Brin and L. Page. The anatomy of a large-scale hypertex-

tual web search engine. In WWW, pages 107–117, 1998.

[2] B.-C. Chen, J. Guo, B. Tseng, and J. Yang. User reputation
in a comment rating environment. In KDD, pages 159–167,
2011.

MOVIES WHICH RECEIVED ONLY 1 VOTE.

Table V

[3] J. Eliashberg and S. M. Shugan. Film Critics: Inﬂuencers or

Predictors? The Journal of Marketing, 61(2):68–78, 1997.

[4] N. Hu, P. A. Pavlou, and J. Zhang. Can online reviews reveal
a product’s true quality?: empirical ﬁndings and analytical
In EC,
modeling of online word-of-mouth communication.
pages 324–330, 2006.

[5] N. Hu, J. Zhang, and P. A. Pavlou. Overcoming the j-shaped
distribution of product reviews. Commun. ACM, 52(10):144–
147, 2009.

[6] D. Kahneman and A. Tversky. Judgment under uncertainty:

Heuristics and biases. Cognitive Psych., 3:430–454, 1972.

[7] J. M. Kleinberg. Authoritative sources in a hyperlinked

environment. In SODA, pages 668–677, 1998.

[8] H. W. Lauw, E.-P. Lim, and K. Wang. Bias and controversy:
In KDD, pages 625–630,

beyond the statistical deviation.
2006.

[9] H. W. Lauw, E.-P. Lim, and K. Wang. Summarizing review

scores of ”unequal” reviewers. In SDM, 2007.

[10] M. McGlohon, N. S. Glance, and Z. Reiter. Star quality:
In

Aggregating reviews to rank products and merchants.
ICWSM, 2010.

[11] D. Pothier and D. Carlson.

Cognitive bias in online
open systems:examining relevant heuristics and cognitive
Knol, Ver-
biases in open systems on the internet.
sion 17, 2010. Available at http://knol.google.com/k/dan/
cognitive-bias-in-online-open-systems/bbftwjxfm1vs/3.

[12] A. Tversky and D. Kahneman. Judgment under uncertainty:
Heuristics and biases. Science, 185(4157):1124–1131, Sept.
1974.

[13] J. R. Wolf and W. A. Muhanna. Feedback mechanisms,
judgment bias and trust formation in online auctions. Decision
Sciences, 42:43–68, 2011.

[14] A. X. Zheng, A. Y. Ng, and M. I. Jordan. Stable algorithms

for link analysis. In SIGIR, pages 258–266, 2001.

