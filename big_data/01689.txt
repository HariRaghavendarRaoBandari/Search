Draft version March 8, 2016
Preprint typeset using LATEX style AASTeX6 v. 1.0

6
1
0
2

 
r
a

M
 
5

 
 
]

M

I
.

h
p
-
o
r
t
s
a
[
 
 

1
v
9
8
6
1
0

.

3
0
6
1
:
v
i
X
r
a

AN OPTIMAL METHOD FOR SCHEDULING OBSERVATIONS OF LARGE SKY ERROR REGIONS FOR

FINDING OPTICAL COUNTERPARTS TO TRANSIENTS

Javed Rana1, Akshat Singhal2, Bhooshan Gadre, Varun Bhalerao, Sukanta Bose3

Inter-University Centre for Astronomy and Astrophysics, Post Bag 4, Ganeshkhind, Pune 411 007, India

1javed@iucaa.in
2Gran Sasso Science Institute, Viale Francesco Crispi, 7, L’Aquila 67100, Italy
3Department of Physics & Astronomy, Washington State University, 1245 Webster, Pullman, WA 99164-2814, U.S.A

ABSTRACT

The discovery and subsequent study of optical counterparts to transient sources is crucial for their
complete astrophysical understanding. Various gamma ray burst (GRB) detectors, and more notably
the ground–based gravitational wave detectors, typically have large uncertainties in the sky positions of
detected sources. Searching these large sky regions spanning hundreds of square degrees is a formidable
challenge for most ground–based optical telescopes, which can usually image less than tens of square
degrees of the sky in a single night. We present algorithms for optimal scheduling of such follow–up
observations in order to maximize the probability of imaging the optical counterpart, based on the all–
sky probability distribution of the source position. We incorporate realistic observing constraints like
the diurnal cycle, telescope pointing limitations, available observing time, and the rising/setting of the
target at the observatory location. We use simulations to demonstrate that our proposed algorithms
outperform the default greedy observing schedule used by many observatories. Our algorithms are
applicable for follow–up of other transient sources with large positional uncertainties, like Fermi–
detected GRBs, and can easily be adapted for scheduling radio or space–based X–ray followup.

1. INTRODUCTION

et al. 2013).

The coalescences of compact binary systems involving
neutron stars or stellar mass black holes are among the
most promising sources of gravitational waves (GWs)
that the earth-based, broad-band interferometric GW
detectors of the Advanced Detector Era (ADE) will de-
tect. If at least one of the compact objects is a neutron
star, the coalescence is also expected to give rise to elec-
tromagnetic radiation (see for example Li & Paczyski
1998). In particular, electromagnetic (EM) signatures of
mergers of binary neutron stars are conjectured to be the
highly beamed short Gamma Ray Bursts (SGRBs; Eich-
ler et al. 1989; Berger 2014, and references therein), and
broadband EM transients (Metzger et al. 2010; Nakar &
Piran 2011; Metzger & Berger 2012). The rate of com-
pact binary coalescences (CBCs) involving at least one
neutron star detectable in the ADE of GW astronomy
is projected to be 40-60 per year (Abadie et al. 2010).
However, since only a small fraction of these sources
will have an optimal orientation that maximizes its GW
brightness on earth, an orientation that also favors the
detection of a coincident on-axis afterglow, the expected
rates of GW and EM coincident observations is as small
as one in a few years (Metzger & Berger 2012; Petrillo

The scientiﬁc returns of joint EM-GW observations of
CBCs, however, are expected to be highly signiﬁcant.
They will enrich our understanding of their EM beam-
ing, energetics, and galactic environment, in addition
to conﬁrming if indeed CBCs involving neutron stars
are the progenitors of SGRBs (Bloom et al. 2009; Phin-
ney 2009). Moreover, the detection of a kilonova (Tan-
vir et al. 2013) concomitant with a GW event can shed
light on the details of r-process nucleosynthesis in the
unbound ejecta from a neutron star merger that pow-
ers the EM emission (Eichler et al. 2015; Metzger et al.
2015). These prospects make coincident EM-GW obser-
vations a high risk, but high gain pursuit. This is why
all eﬀorts must be made to enhance the probability of
ﬁnding EM counterparts for every CBC event whose pa-
rameters do not disallow the possibility of it involving a
neutron star.

Using only information from the interferometers, a
GW source can be localized to a few hundred square
degrees in the sky (Singer et al. 2014). Various groups
from around the world then use high energy, optical, and
radio telescopes to search for a coincident EM counter-
part in this localization patch (Aasi et al. 2014). The

2

primary challenge for counterpart searches is of scale:
most optical telescopes have small ﬁelds of view (∼ 0.1–
1 sq. deg.) 1 , and take several minute long exposures,
reaching ∼100 exposures per night. Thus, only a small
fraction of the sky localization patch of a GW trigger
can be covered by a given telescope in a night. Since
the odds are stacked against ﬁnding an EM counter-
part, it is important to optimize this follow–up imaging
to maximize the probability of its discovery.

In the past a few diﬀerent ways of gridding the large
GW error regions (or “patches”) with tiles, each the
size of a telescopes ﬁeld of view, were explored. A
few algorithms for ranking the various tiles in an er-
ror region, e.g., based on the probability of ﬁnding the
source as deduced from GW parameter estimation meth-
ods, have been studied as well. The most prominent
of these has been the “greedy” algorithm, which ranks
the tiles purely on the basis of this probability, with-
out accounting for any other factors, e.g., the setting
time of the tiles. Higher ranked tiles are observed be-
fore lower ranked ones in order to maximize the proba-
bility of observing an EM counterpart of a GW event.
However, past eﬀorts discussing strategies for followup
of such counterparts have some shortcomings. Singer
et al. (2012) demonstrate that coordinated observations
in a multi–telescope network increase the probability of
imaging the EM counterpart location by upto a factor
of two. They also ﬁnd that accounting for visibility of
the localization patch from a site reduces the overall
probability of ﬁnding the true counterpart by roughly
a factor of three. However, they do not discuss any
way to reorder the observing sequence for setting, except
perhaps implicitly in their simulated annealing method.
Recently, Chan et al. (2015) have addressed the trade–
oﬀ between number of exposures and exposure time, but
they too select a greedy algorithm where the highest
probability tiles are to be imaged ﬁrst. Ghosh et al.
(2015) discuss some alternative methods of tiling and op-
timization for follow–up with telescopes with large ﬁelds
of view.

In this paper, we describe multiple diﬀerent algo-
rithms for ranking tiles that remove some of the limi-
tations of past work. We account for ground–based visi-
bility constraints and schedule observations of tiles only
when they are above the horizon. We explore the ad-
vantages of deviating from the default greedy algorithm.
We also compare approaches for using a pre–deﬁned grid
of telescope pointings on the sky, as opposed to inde-
pendent placement of each image. By applying these

1 This may have biased many such telescopes from participating
in EM followup for LIGO observing run O1, where many of the
telescopes had wider ﬁelds of view (Abbott et al. 2016).

algorithms to thousands of simulations of realistic GW
sky error regions or patches, and tile dimensions, we do
a systematic comparison of these algorithms based on
their probability of ﬁnding an EM counterpart.
The layout of the paper is as follows. In §2 we describe
seven algorithms for ranking and scanning tiles in sky
patches. In §3 we perform extensive simulations using
realistic GW sky patches to compare the probabilities
of ﬁnding the EM counterpart using these algorithms.
We make speciﬁc recommendations on what observing
strategies will be most optimal based on details of the
sizes of tiles and the GW localization patches. In §4 we
end with a discussion of application of our algorithms
to other coincidence studies, the limitations of our algo-
rithms and future scope for improvement.

2. AN OPTIMAL OBSERVING SEQUENCE FOR

OPTICAL FOLLOW–UP

In the early years of advanced gravitational wave de-
tectors, the sky localization for any GW trigger will be
rather coarse, spanning hundreds of square degrees on
the sky (Nissanke et al. 2013; Singer et al. 2014). EM
observers have to select a sky area for follow–up using
an all–sky source location probability density function
(PDF) calculated from the GW signal. In this work, we
select an area bounded by the contour that covers 95%
probability of containing the true location of the coun-
terpart. Henceforth, we will refer to this area as the
“localization patch”, or simply “patch”. Any follow–
up requires taking images of parts of this patch using
a telescope. We focus our attention on telescopes with
a rectangular ﬁeld of view, and call each such image a
“tile”. We do not discuss processing of these images for
ﬁnding transients.

Imaging an area spanning several hundred square de-
grees is a formidable challenge for most observatories.
Typical 1–2 meter class telescopes have ﬁelds of view
that are a fraction of a square degree (cf. IUCAA Gi-
rawali Observatory: 13(cid:48) × 13(cid:48)), with few notable excep-
tions like the Palomar Transient Telescope (PTF, Law
et al. (2009), ∼8 sq deg). The typical exposure times are
no shorter than a few minutes — limiting observers to
around a hundred exposures a night, thereby making it
impossible to image the entire patch. Observatories will
thus need to select which parts of the patch they wish to
follow–up, subject to various constraints like the diurnal
cycle, telescope pointing limitations, available observing
time, and the rising/setting of the target at the obser-
vatory location. We now propose algorithms to select
and sequence tiles subject to these constraints, for max-
imizing the chances of an observatory ﬁnding the GW
counterpart.

2.1. Deﬁning the problem

The aim of algorithms discussed here is to maximize
the probability of ﬁnding the electromagnetic counter-
part to the gravitational wave event. We assume that
a single observation is sensitive enough to detect any
EM counterpart that may be present within the ﬁeld of
view imaged by the telescope. Hence, we assume that
repeat observations do not increase the probability of
ﬁnding the EM counterpart. In practice, surveys often
image each point multiple times — this will be addressed
in future work. The algorithms presented here are de-
signed for a single telescope with a ﬁxed imaging foot-
print on the sky. We do not discuss transient detection
techniques.

Before we dive into the details of our algorithms, we
list some terms that will be used in the following sec-
tions:

• Patch: Area of the sky bounded by a contour of
constant probability density, such that it contains
95% probability of ﬁnding the EM counterpart of
the GW source, as deduced from the GW observa-
tion. Note that this means the maximum probabil-
ity of imaging the EM counterpart in the current
work is capped at approximately 95% , though this
requirement can easily be relaxed.

• Tile: An area of the sky covered by a single image.
The shape of the tile matches the ﬁeld of view of
the telescope, and is assumed to be rectangular
in our algorithms. Probability covered by any tile
is calculated by convolving the localization PDF
with the tile footprint (for instance, by adding the
probabilities of all HEALPIX pixels inside the tile).
There are a total of N tiles to be imaged — the
arrangement of these tiles is discussed later. We
denote tiles by I1 . . . IN , short for “Image”. For
each tile Ik, tk is the last instant at which we can
start imaging it and still complete the exposure
before any part of the tile becomes unobservable.
• Tile rise/set: Tile rise refers to the ﬁrst instant at
which the entire tile is visible. Tile setting refers
to tk discussed above.

• Sunrise/set: We use sunrise and sunset loosely to
refer to astronomical twilight, when observing can
commence or must end.
• Exposure time (Texp): We assume that each expo-
sure takes Texp time, including readout and slew
time. This is reasonable, as the slews will typically
be small enough to be completed within readout
time.
• Observation start time (to): Observations can
start only at to. For observations to start, some

3

part of the patch must be above the horizon,
the telescope must be available (scheduling con-
straints), the sun must have set, and most impor-
tantly – there must be a GW or transient trigger.
• Observation ﬁnish time (tf ): Observations end at
tf , either because the entire patch sets (goes below
observable altitude), or the sun rises (or morning
twilight), or the observing window is over (schedul-
ing constraints). Note that patches can sometimes
be multi–modal: there might be multiple discon-
nected “islands” that cover the 95% conﬁdence re-
gion. In such cases, the algorithm is run till every
point in the patch has either been observed, or has
set. For simplicity, in this work we assume that the
interval tf − to is an integral multiple of Texp.
• Imaging windows: The observing interval (to to
tf ) is divided into “Imaging windows” Wj of du-
ration Texp each. There are a total of M such
imaging windows, where M = (cid:98) tf−to
(cid:99). The jth
window starts at time to + (j − 1)Texp and ends at
to + jTexp. For simplicity, we say that tiles with
setting time tk in this range “belong to” the win-
dow Wj.

Texp

2.2. Greedy Array (GrAr)

First we discuss the intuitive greedy algorithm. We
superpose a grid on the sky localization patch to divide
it into tiles shaped like the telescope ﬁeld of view. Note
that we have 3 free parameters in selecting the ﬁrst tile
of such a grid: the right ascension, declination and po-
sition angle (PA)2. We set the PA to 0◦, such that one
side of all tiles is aligned with the celestial equator. We
then convolve the footprint of a tile with the localiza-
tion PDF to calculate the probability covered by a tile
placed on each point in the patch. We select right as-
cension and declination such that ﬁrst tile I1 is centered
on the point with the highest probability of ﬁnding the
source. Using I1 as reference, we create a column of
tiles along the North–South direction by lining up other
tiles with it. For each tile in this column, we construct
rows by butting tiles edge to edge at a ﬁxed declination.
Note that as we move east or west from the central col-
umn, tiles from successive rows no longer line up as right
ascension lines converge towards the pole.

The greedy algorithm is straightforward:

in each
imaging window Wj, we select the highest probability
tile that is visible during the entire window (rises before
to + (j − 1)Texp and sets after to + jTexp) and has not

2 For ongoing synoptic surveys, the grid may be pre–deﬁned for
ensuring availability of reference images. This does not alter our
algorithms.

4

already been observed in a previous window. Since we
have divided the patch into an array of tiles, we call this
the Greedy Array algorithm (GrAr ). This algorithm
naturally takes care of new tiles rising over time:
if a
just–risen tile covers higher probability than tiles that
were already visible, it will be selected for observation.
However, the algorithm cannot account for the setting of
tiles: medium priority tiles may set while high priority
(high probability) tiles are being observed, leaving no
opportunity to observe the medium priority tiles later
in that observing run.

As the ideal case, we also consider a greedy algorithm
with no visibility constraints: for instance a space tele-
scope that is (unrealistically) unaﬀected by solar or lu-
nar constraints.
In that case, we would observe the
entire patch, i.e., all tiles, in order of probability cov-
ered. We call this algorithm “Space Greedy” (SpGr ),
and use it to determine an upper limit on the perfor-
mance of any algorithm. Due to practical limitations,
like the passage of day and night, rising and setting of
the source, etc., any ground–based method will do worse
than SpGr. Singer et al. (2012) observe that on an aver-
age, introducing horizon– and sun–based visibility con-
straints decreases probability of imaging the counterpart
by a factor of ∼3.

Figure 1. A simpliﬁed 2◦ × 3◦ rectangular localization patch
is covered by six 1◦×1◦ telescope images. The default greedy
algorithm (GrAr ) generates the observation sequence A, B.
The setting array algorithm (SeAr ) improves over this by
generating the order C, A, B. This sequence is further op-
timized by OpAr to observe higher probability tiles ﬁrst,
yielding the ﬁnal sequence A, C, B.

2.3. Setting Array (SeAr)

The greedy algorithm can run into problems when
the patch is about to set. Consider a highly simpli-
ﬁed patch shown in Figure 1. We have a six square
degree rectangular patch, which can be imaged by six
1◦ × 1◦ tiles, labeled A. . . F. Tiles E and F are visible
only for a duration Texp from the start of observations
(to). Tiles C and D set at 2Texp, and tiles A and B
set last at to + 3Texp. The greedy algorithm proposes
that we observe tile A ﬁrst. After obtaining a Texp
minute exposure, tiles E and F are no longer visible.
It therefore proposes that we observe the next highest
probability tile: B. During that exposure, tiles C and
D also set. The total probability covered, i.e. the prob-
ability of ﬁnding a counterpart in these observations is
pGrAr = pA + pB = 0.30 + 0.25 = 0.55. For this simple
case, we can easily devise some better strategies. For
instance, we can observe tile C ﬁrst, followed by tiles
A and B, which are visible for a longer duration.
In
this new strategy, the total probability covered would
be pC + pA + pB = 0.20 + 0.30 + 0.25 = 0.75.

We generalize this method, calling it the “Setting Ar-
ray” algorithm (SeAr ).
It is conceptually simpler to
examine the setting problem backward in time. Using
terms from §2.1, let us consider M imaging windows
W1 . . . WM , spanning the time range from to to tf . We
remind the readers that tf can correspond to the last tile
setting, or end of available observing time, or morning
twilight. At the start of the last window WM (time =
tf −Texp), an observer should clearly observe the highest
probability tile that is still visible. Going back to the
imaging window WM−1, more tiles which set in this win-
dow are also available for selection. So the observer will
select the highest probability tile from all tiles visible at
this instant. If there is an unobserved (or unscheduled)
tile that belongs to WM that has a higher probability
than tiles in WM−1, that will be the tile observed in this
window. We continue this way till we reach the imaging
window W1, starting at time to. This strategy gives high
priority to the setting of tiles, and ensures that they are
observed when they are above the horizon (or within
more stringent observing limits, as the case may be).

The same algorithm can be implemented going for-
ward in time. At time to, we initially select the highest
probability tile (say I1) that belongs to imaging window
W1, and add it to a “selected” set S1. By deﬁnition, this
tile will not be visible in any further windows. For the
next observation, we make a candidate set C2 with the
two highest probability tiles from window W2. Note that
these tiles were also visible in window W1: so if both of
them cover higher probability than I1, we can discard I1
and image these two tiles in windows W1 and W2. Thus,
the new selection S2 contains the 2 highest probability

Horizon C 0.20 D 0.06 E 0.15 F 0.04 Observing limit Sets after Texp Sets after 2Texp A 0.30 B 0.25 Sets after 3Texp Table 1. Walkthrough of the SeAr algorithm

Iteration Tiles in this window Candidate set

Ci
{ E0.15 }

Past selection
Si−1
{ }

i

1

2

3

E0.15, F0.04

C0.20, D0.06

A0.30, B0.25

Action

Select highest probability
tiles

pC > pE > pD: retain E,
reject candidate D

{ C0.20, D0.06 }

{ E0.15 }

{ A0.30, B0.25 }

{ E0.15, C0.20 } Both candidates are supe-
rior to past selection. Reject
lowest probability tile E.

5

Final selection
Si
{ E0.15 }

{ E0.15, C0.20 }

{ C0.20, A0.30, B0.25 }

Note—See Figure 1 for details. The subscript on a tile label denotes the probability that the true counterpart is located within
that tile.

tiles from the set S1 ∪ C2. We can inductively continue
this process till the last imaging window. For the kth
iteration, the selected set Sk consists of the k highest
probability tiles from the set Sk−1 ∪ Ck.
It is impor-
tant to remember that these selected tiles are ordered:
in each iteration, we add new tiles to the end of the set.
This ensures that a tile added from the imaging window
Wk will be observed in Wk or earlier. In Table 1, we
apply this algorithm to the sample patch in Figure 1 to
recover the order C, A, B discussed at the start of this
subsection.

There are some subtleties in this generalized algo-
rithm. Firstly, it is possible that the localization patch
is far from setting, so there may be no tiles that set in,
say, the ﬁrst r windows.
In such a case we select the
highest probability tile from the next available window
(Wr+1) for observation in W1. Similar circumstances
arise in intermediate steps if an imaging window Wk
has fewer than k tiles. In such cases the candidate set
Ck can use high probability tiles from the next imaging
windows Wk+1, continuing to later windows as required.
Lastly, the algorithm terminates at the last window WM
or when no more tiles are visible. The latter case hap-
pens when the entire patch has set but more observing
time is available.

2.4. Optimized Array

The Setting Array algorithm described above gives an
observation sequence that maximizes the probability of
detecting the EM counterpart of the GW source under
the constraint that the patch will set in a given amount
of time. However, the generated observing sequence is
not unique. In practice, one prefers an algorithm that
allows for the highest probability tiles to be observed
ﬁrst (like GrAr ), but still maximizes the overall proba-
bility covered (like SeAr ). We, therefore, seek a golden
mean by reordering the SeAr observing sequence to ob-
serve high probability tiles ﬁrst, subject to the condition
that each tile from the SeAr observing sequence must
be observed before it sets.

Let us reconsider the example discussed in Figure 1
and Table 1. The ﬁnal observing sequence proposed
by the GrAr algorithm would be A, B, with a total
probability coverage pGrAr = 0.30 + 0.25 = 0.55. SeAr
improved on this by proposing the observing sequence
C, A, B with a total probability coverage pGrAr =
0.20 + 0.30 + 0.25 = 0.75. Tile C does not set in the
ﬁrst imaging window, and can be observed the second
window too. Thus, we can change the sequence to A, C,
B: retaining the tiles selected by SeAr, but reordering it
to make faster gains on the total probability covered. In
order to observe high probability tiles earlier, our guid-
ing principle is to push low probability tiles to as late
an observing window as possible.

We can formalize this algorithm as follows:

1. Use the SeAr algorithm to create an observing se-
quence consisting of tiles I1 . . . IM in imaging win-
dows W1 . . . WM . The probability of ﬁnding the
counterpart in tile Ii is pi.

2. Select the lowest probability tile, say Il, and move
it to the latest imaging window (Wk) where it is
still visible. Wk is now marked as “ﬁxed”, and
the observation in this window cannot be changed
further.

3. The SeAr algorithm guarantees that tile Ii is visi-
ble at least until window Wi. Thus, when we move
a tile Il from current window Wl to the last pos-
sible imaging window Wk, it always satisﬁes the
condition k ≥ l

4. Tiles originally occupying non–ﬁxed windows in
the range Wl+1 . . . Wk are moved to the earlier
windows Wl . . . Wk−1.

5. Repeat the procedure with the next higher prob-

ability tile.

The end result of this procedure is that high probability
tiles move progressively towards earlier observing win-

6

dows, giving a ﬁnal sequence that prioritizes probability
without losing any tiles to visibility constraints.

We call this algorithm the “Optimized Array” algo-
rithm (OpAr ). Although OpAr covers the same total
probability as SeAr, it observes higher priority tiles as
early as possible. This proves to be advantageous in
some cases. One such case is when the counterpart is
likely to fade fast. OpAr also performs slightly better
than SeAr when rising tiles are taken into account, as
discussed in the next subsection. In Figure 2, we apply
this algorithm to our sample patch to resort the SeAr
observing sequence, and recover the A, C, B sequence
discussed at the start of this subsection.

2.5. Rising patch

The greedy algorithm is well suited for patches that
are always visible, or rise as observations progress; but
runs into trouble with setting patches. Our proposed
SeAr and OpAr algorithms address this shortcoming.
However, some patches consist of long arcs, where some
parts of the patch set during the night while other parts
rise during the same period of time. We adapt SeAr and
OpAr to this situation by the following prescription:

1. Select the part of the patch that is observable at

time T .

2. Run OpAr (or SeAr ) on the patch, and select the
tile I that should be observed in the next imaging
window Wk.

3. Advance time by Texp. Some more tiles from the

patch may rise in this interval.

4. Run OpAr (or SeAr ) on all tiles that are visible
now but have not been observed yet. The ﬁrst tile
selected by the algorithm should be observed in
the next imaging window Wk+1.

5. Repeat from step 3 until all tiles are observed, or

till observing ﬁnish time (tf ).

Hence, on each iteration we run the full algorithm on
the visible patch, but schedule only the ﬁrst tile as the
next observation. If no tiles rise before the next itera-
tion, one can see that the tile sequence will remain the
same as a single iteration of SeAr (§2.3) or OpAr (§2.4).
On the other hand, if important tiles rise during the ob-
servation, the algorithms will incorporate them in the
optimal scheduling. A trivial example is the case where
the highest probability tile rises just for the last observ-
ing window Wm. Following the SeAr algorithm, this tile
enters the candidate set Cj. Being the highest proba-
bility tile, it trumps all tiles from the past selection and
gets scheduled for the ﬁnal observation.
As an aside, we note that SeAr and OpAr as deﬁned
in §2.3 and §2.4 respectively, always have the same set of

Figure 2. Calculating an OpAr observing sequence from a
SeAr sequence. We consider the same example as §2.3. Capi-
tal letters denote tile names, and the numbers show the prob-
ability of containing the EM counterpart. Panel (q) shows
the SeAr observing sequence: tiles C, A, B. We select the
lowest probability tile, C (panel r). Its visibility plot (shaded
frames in panel s) shows that it can be moved to the second
window. We move it to the second window, slide other tiles
to the left, and lock it (red tile, panel t). Then we consider
the second-lowest priority tile: B (panel u). B is visible in
all imaging windows (panel v) and is already in the last ob-
serving slot, so we simply lock it in place (panel w). Finally,
we consider the last tile, A (panel x). This tile cannot be
moved as all other windows are locked. Panel y veriﬁes that
the tile is indeed visible in the only available imaging win-
dow, W1. Panel z shows the ﬁnal observing sequence for the
Optimized Array algorithm: tiles A, C, B.

A0.30C0.20B0.25( q )A0.30C0.20B0.25( r )( s )C0.20A0.30B0.25( t )C0.20A0.30B0.25( u )( v )C0.20A0.30B0.25( w )C0.20A0.30B0.25( x )( y )C0.20A0.30B0.25( z )tiles for ﬁnal observation. However, after applying this
prescription, in some cases, the ﬁnal selected set of tiles
may diﬀer slightly (§3.1, Figure 9).

Figure 3. The need for Independent tiling. We consider a
small patch that is about to set soon. If only two observa-
tions are possible, then observing the thick red and yellow
tiles maximizes the probability coverage. Note that the yel-
low tile is placed independently of the grid created by the
placement of the ﬁrst thick red tile.

2.6. To array or not to array

Sometimes, based on the geometry of the patch and
the size of the observing tiles, an array (grid) of tiles
on the sky may be too constraining. Let us consider
a simplistic case in Figure 3 where the PDF has two
local maxima. Following §2.2, the ﬁrst tile (thick red
border) is placed maximize the probability of detecting
the counterpart in the ﬁrst image. This sets up the array
(dotted red lines) that is used to select subsequent tiles.
However, if only one more image is to be obtained, then
better results can be obtained by placing the next tile
(dashed yellow square) independent of the existing array.
To investigate if such free placement of tiles is eﬀec-
tive, we propose three “Independent” algorithms that
correspond to the three “Array” algorithms discussed
above (see Table 2). The ﬁrst is the greedy algorithm
with independent placement of tiles (“Greedy Indepen-
dent”, or GrIn). In each imaging window Wk, we select
the tile that has the highest probability of containing
the EM counterpart. We then set the probability of
that part of the patch to zero3, and calculate the next
best location for the next image, using whatever patch

3 In a strict sense, the resultant distribution cannot be called a
PDF as its sum over the entire sky is no longer unity. However,
the value at each point other than the zeroed out region is still the
probability density of ﬁnding the EM counterpart at that location.

7

is visible at that time. The zeroing out is based on the
assumptions in §2.1 that repeat observations do not in-
crease the probability of ﬁnding the counterpart.

Allowing each tile to be placed independently of other
tiles is a problem for the SeAr and OpAr algorithms,
which assume that the probabilities and setting times
for all M tiles are known at the start while computing
the observing sequence. This cannot be done if the tile
positions are not known. In practice, neighboring tiles
have similar setting times and are seen to have similar
probability of containing the EM counterpart, in partic-
ular when the tile area is much smaller than the patch
area. As a result, we heuristically extend our Setting
Array and Optimized Array algorithms as follows:

1. Calculate the full sequencing for SeAr (§2.3) or

OpAr (§2.4).

2. Observe the ﬁrst tile from the ﬁnal sequence (I1).

3. Update the localization patch to exclude the tile
already observed, by setting the PDF to zero in
that area.

4. For the jth iteration, update to → to + (j − 1)Texp
and rerun the algorithm to calculate the next com-
plete observing sequence. Select ﬁrst tile as Ij.

5. Repeat until all tiles are observed or the observing

period ends (time = tf ).

The location of tiles of each iteration is independent of
the array created in the previous iteration. Hence, we
name these two algorithms as “Setting Independent”
(SeIn) and “Optimized Independent” (OpIn) respec-
tively.

This gives us a total of seven algorithms: the com-
pletely unrestricted “Space Greedy” (SpGr) discussed
in §2.2, and the six algorithms listed in Table 2. We
compare the performance of these algorithms in the next
section.

Table 2. List of algorithms

Selection −→
Pattern ↓
Array (Ar)

Independent (In)

Greedy

Setting Optimized

(Gr)

GrAr

GrIn

(Se)

SeAr

SeIn

(Op)

OpAr

OpIn

Note—Apart from these six algorithms, we also consider

the “Space Greedy” (SpGr ) algorithm in some of our

simulations.

8

Figure 4. Comparing SeAr, OpAr and GrAr. Panel (a) shows the all–sky probability density function of the patch in equatorial
coordinates, with a 95% containment area of 305 sq. deg. The northern island contains about 40% of the probability and is
visible from IGO, while the more prominent patch near the center is too close to the sun. Panel (b) compares the probability
coverage of the three methods, if the observations are terminated after n images. The X–axis is the number of tiles, and the
Y–axis shows the total probability covered by Array methods when observations end. The OpAr (black) and SeAr (magenta)
curves are coincident in this plot. The performance of both these methods is better than, or at least equal to, GrAr.

3. SIMULATIONS

We tested the performance of these algorithms by sim-
ulating ground–based searches for counterparts to GW
triggers. We assumed a telescope with a 1◦ × 1◦ square
ﬁeld of view at the location of the IUCAA Girawali Ob-
servatory (IGO): longitude 19.08◦ N, latitude 73.67◦ E,
and altitude 1000 m (Gupta et al. 2002). The observing
limit is set to an altitude of 25◦ (where the airmass is 2.4;
see the discussion in Sec. 3.5 below). We assumed that
the exposure, readout and slew take a total of 300 sec
for each tile. Our simulated observations start and stop
when the sun is 12◦ below the western and eastern hori-
zon, respectively. These observations always end at the
next sunrise after a trigger—so for triggers occurring
shortly before sunrise, only a short observational win-
dow is used. We do not impose any lunar constraints in
these simulations.

Singer et al. (2014) have simulated the detection and
localization of GW triggers using expected sensitivi-
ties for the ﬁrst two years (2015–2016) of operation of
advanced LIGO and VIRGO detectors. We simulate
ground–based optical observations for all the 1609 bi-
nary neutron star merger event localizations that they
provide. For some events, they provide localizations us-
ing two diﬀerent algorithms — in such cases, we treated
both these as separate events in our follow–up simu-
lations. The 95% containment areas for these patches
range from tens to thousands of square degrees. We
assume that GW detectors rapidly detect and verify a
trigger, so that observations can start just ten minutes
after the event. Of the 1609 patches, about one–third
are not visible from IGO within 24 hours due to latitude
constraints or proximity to the sun. Of the remaining

1054 patches, many are highly elongated and are only
partially visible from IGO. Even in such cases, we com-
pare the performance of our algorithms for the parts of
the patch that are visible from IGO.

We implemented our algorithms using python. Sky
localizations provided by LVC are in the HEALPIX
format (Gorski et al. 2005),
like ﬁles generated by
BAYESTAR4. Each HEALPIX pixel gives the probability
that the true location of the GW source lies within that
pixel. To calculate the probability that an image covers
the true location of the source, we add up the prob-
abilities of all HEALPIX pixels within that image. For
eﬃciency, we add up the probability of all pixels whose
centers are inside the image footprint. This introduces
quantization errors for pixels along the image boundary,
which lie only partially inside the image.
In order to
ensure that such quantization errors do not aﬀect our
results, we oversample the HEALPIX ﬁle to Nside = 2048,
such that each pixel is 1.7(cid:48) on a side. For our ﬁducial
1 sq. deg. camera, this gives ∼ 1220 pixels per camera
ﬁeld (tile). In contrast, the usual ﬁles with Nside = 512
give only about seventy–six pixels per square degree on
the sky, leaving the simulations susceptible to signiﬁcant
quantization errors.

3.1. Array methods

First, we compare the performance of the array meth-
ods, where a single grid of tiles is superposed on the sky,
and each method gives an ordered sequence of tiles to
be observed. Along with the Greedy Array (GrAr ), Set-

4

https://ligo-vcs.phys.uwm.edu/cgit/bayestar/tree/

bayestar

306090120150180210240270300330-60-3003060  Sun(a)0.0000.0250.0500.0750.1000.1250.1500.175Probability density/sq.deg.(b)Number of tiles observable9

Figure 5. Comparing SeAr, OpAr and GrAr. Panel (a) shows the all–sky probability density function of the patch in equatorial
coordinates, with a 95% containment area of 305 sq. deg. The northern island contains about 40% of the probability and is
visible from IGO, while the more prominent patch near the center is too close to the sun. Panel (b) compares the probability
coverage of the three methods after n images, given that end of observations is determined only by patch setting and sunrise.
The X–axis is the number of tiles, and the Y–axis shows the cumulative probability covered by Array methods. Panel (c): the
GrAr algorithm covers 24.8% probability in 78 tiles. Numbers in the tiles denote observation order. Approximate East and
West directions are indicated: GrAr misses the medium probability regions to the west of the high probability center. Panel
(d): OpAr and SeAr cover 32.7% probability by imaging 102 tiles. Apart from the tiles calculated by GrAr (shown in black),
OpAr also selects some western tiles (shown in green) for early observations, boosting the overall probability coverage.

306090120150180210240270300330-60-3003060  Sun(a)0.0000.0250.0500.0750.1000.1250.1500.175Probability density/sq.deg.020406080100Tile No.0.00.10.20.30.4Cumulative probabilityProbability covered by OpAr is 32.7%Probability covered by GrAr is 24.8%(b)GrArSeArOpAr123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778150180210240270300+80+70WestEast(c) GrAr123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102150180210240270300+80+70WestEast(d) OpAr10

ting Array (SeAr ), and Optimized Array (OpAr ) meth-
ods, we also consider the Space Greedy (SpGr ) method,
which sets the upper bound on the performance of all
other methods.

It is important to remember that the observations ﬁn-
ish when any one of three conditions is met: either the
entire patch sets (i.e., it goes below the observable al-
titude), or the sun rises (morning twilight), or the ob-
serving window is over (scheduling constraints). As a
result, observing sequences for diﬀerent algorithms may
terminate at diﬀerent times. In the example in Figure 1,
the GrAr observing sequence terminates after two im-
ages (§2.2) while SeAr and OpAr terminate after three
images. In these simulations, we also end SpGr when
the OpAr sequence terminates.

The computation time for generating an observing se-
quence varies with the patch size. OpAr involves the
most computations, and is relatively slower. On a desk-
top computer (64-bit, 3.6 GHz, 8 GB RAM), OpAr cal-
culations take ∼42 seconds for a 500 sq. deg. patch,
increasing to ∼3 minutes for patches with areas 7000–
8000 sq. deg.

As an illustration, we show comparison between the
performance of OpAr and GrAr for a 305 sq. deg. patch
(Figure 4). The patch has two separate islands: the
northern part containing ∼ 40% probability of contain-
ing the counterpart is visible from IGO at night, while
the other (covering ∼ 60% of the probability) is hidden
in daylight. The GrAr algorithm provides a single ob-
serving sequence, which simply terminates when at tf :
when the patch sets or at sunrise.
In contrast, SeAr
and OpAr give observing sequences based on the num-
ber of observations possible. In each case, we see that
SeAr (magenta curve) and OpAr (black curve, exactly
coincident with the magenta curve) match or outper-
form GrAr (cyan curve). For instance, if only sixty ob-
servations are possible, GrAr covers a net probability
of about 25%, while OpAr and SeAr cover about 27%
probability of ﬁnding the counterpart. For reasons dis-
cussed in §2.2, GrAr stops observations at tile 78 as all
visible areas have already been imaged. Even if more ob-
serving time were available, the GrAr algorithm has no
use for it. In contrast, OpAr and SeAr algorithms opti-
mize the observing sequence between high–importance
and early–setting tiles such that observations can con-
tinue to tile 102.

Once the number of observations is calculated (from
patch setting, sunrise etc.), OpAr and SeAr algorithms
sequence tiles diﬀerently from GrAr. This is illustrated
in detail for the same patch in Figure 5. Owing to
its sky location (5a), the patch sets well before sunrise
— so observations terminate when the entire patch has
set. Panel (b) shows the cumulative probability cov-
ered by the three algorithms after n images, given that

Figure 6. Comparing OpAr with GrAr. The X–axis is the
total probability covered by GrAr (pGrAr). The Y–axis shows
the ratio of total probability covered by OpAr to that covered
by GrAr. In the online color version, the color of the symbol
shows the area of the 95% patch in square degrees, with red
denoting 1000 sq. deg. or larger patches. The shaded gray
region on the right is excluded as pOpAr > 0.95 or pGrAr >
0.95. In all the 1054 patches we tested, OpAr outperforms
GrAr.

Figure 7. Comparing OpAr with GrAr. The X–axis and Y–
axis are the total probability covered by GrAr (pGrAr) and
OpAr (pOpAr) respectively. In the online color version, the
color of the symbol shows the area of the 95% patch in square
degrees, with red denoting 1000 sq. deg. or larger patches.

end of observations is determined only by patch set-
ting and sunrise. As expected, the greedy algorithm
rapidly covers higher probability tiles ﬁrst. However,
the marginal gains become smaller as the high proba-
bility part of the patch becomes unobservable, and the
cyan curve plateaus out around image 40. By image 78,
all tiles that are still above the horizon have been im-
aged already (Figure 5c), and the total probability of
having imaged the true source location is 0.25. In con-
trast, SeAr and OpAr start out slower, but do not hit
a plateau till around image 80. By observing the west-

0.00.20.40.60.81.0pGrAr1.01.11.21.31.41.51.6Probability ratio  (pOpAr/pGrAr)01002003004005006007008009001000Patch area in sq.deg.0.00.20.40.60.81.0pGrAr0.00.20.40.60.81.0pOpAr01002003004005006007008009001000Patch area in sq.deg.11

Figure 8. Comparing OpAr, SeAr, GrAr and SpGr. In the online color version, the color of the symbol shows the area of the
95% patch in square degrees, with red denoting 1000 sq. deg.and larger patches. On an average, the completely unconstrained
SpGr algorithm is expected to cover about thrice the probability as ground–based observations. This ratio is denoted by a
dashed gray line in the three panels with SpGr on one of the axes. We see that OpAr performs at least as well as, or better
than, GrAr.

ern, early–setting tiles ﬁrst, these algorithms enable 102
observations (Figure 5d) and cover higher overall prob-
ability: 0.33 as compared to 0.25 for GrAr. The net
probability covered by these two algorithms is the same,
but OpAr covers it faster than SeAr. Even at the time
when GrAr observing terminates, SeAr and OpAr are
performing better.

If practical considerations allow fewer images, say just
20, then the observation end time (tf ) can be changed
while running the algorithm, to obtain an optimized se-
quence for the shorter time duration. While the GrAr
observing sequence remains unaltered by this, SeAr and
OpAr output a new sequence that still covers a higher
net probability compared to GrAr. OpAr outperforms
the basic GrAr algorithm for all 1054 patches that we

tested. Figure 6 shows the ratio of the probability cov-
ered by the two algorithms, as a function of the the
baseline probability covered by GrAr.
In the online
color version, the color coding shows 95% area of the
patch, in sq. deg. Note that by deﬁnition, a patch is a
region with 95% probability of containing the EM coun-
terpart — hence the maximum probability covered by
any algorithm in these simulations is 0.95. The shaded
gray region on the right is excluded as pOpAr > 0.95 or
pGrAr > 0.95.
It is seen that for those small patches
that are covered well by GrAr, the gain from OpAr is
marginal (right side). But for medium and large patches
where GrAr performance is poor, OpAr can give a sig-
niﬁcant boost in the total probability covered. We can
visualize this in another way, by plotting the total prob-

0.20.40.60.81.0pSeAr0.20.40.60.81.0pSpGr0.00.20.40.60.81.0pGrAr0.00.20.40.60.81.0pOpAr0.20.40.60.81.0pSeAr0.20.40.60.81.0pSpGr01002003004005006007008009001000Patch area in sq.deg.12

ability covered by two methods against each other (Fig-
ure 7). The X–axis and Y–axis are the total probability
covered by GrAr (pGrAr) and OpAr (pOpAr) respectively,
and as before, the color coding shows the area of the
patch. Each point in the plot represents the total prob-
ability covered by GrAr and OpAr for a single patch in
one night. The black diagonal line denotes equal prob-
ability coverage for both algorithms. All points lie on
or above the line, as OpAr outperforms the probability
coverage by GrAr.

Lastly, Figure 8 compares the performances of all four
array methods. As expected, SpGr outperforms the
other algorithms, as it completely ignores visibility con-
straints. A counterintuitive feature in this plot is that
pSeAr and pOpAr are not always equal. The algorithms
as discussed in Sections 2.3 and 2.4 assume that the en-
tire patch is visible when observations start, and may
eventually set. In practice, several patches will be vis-
ible partially when observations start, and more areas
will be observable as time passes by. In our simulations,
we apply a heuristic ﬁx to such patches, as discussed
in §2.5. The under–performance of SeAr as compared
to OpAr stems from the fact that SeAr gives maximum
importance to the setting time of a tile. Thus, it recom-
mends observations of lower probability tiles that rise
early, as compared to higher probability tiles that may
be visible later. Since OpAr observes higher probabil-
ity tiles where possible, it covers more probability than
SeAr (as well as GrAr ) for all patches.

3.2. Independent methods

We now compare the performance of the three “Inde-
pendent” methods: Greedy Independent (GrIn), Set-
ting Independent (SeIn) and Optimized Independent
(OpIn). In general, independent methods perform well
when only a small number of observations are possible.
Following the discussion in §2.6, we can see that the
selection procedures of the three independent methods
diﬀer signiﬁcantly from each other: so the length of the
ﬁnal observing sequence and the location of the selected
tiles can vary a lot between these methods.

Since these methods do not use a single grid on the
sky, each iteration of SeIn and OpIn requires a time-
consuming convolution of the tile with the patch. As a
result, the computation time for each tile increases pro-
portionally to the size of the localization patch. For the
largest patch we simulated (8874 sq. deg.), the compu-
tation of each tile in the OpIn observing sequence took
about 3 minutes—the same time as a full OpAr calcu-
lation. While these methods are computationally much
slower, they are more easy to adapt for usage by an en-
semble of telescopes with heterogeneous ﬁelds of view.
All these calculations can also be sped up signiﬁcantly
by using Fourier–based convolution methods (cf. Singer

et al. 2012), a task we will take up in future work.

We demonstrate the relative performance of the three
independent methods using a 313 sq. deg. arc–shaped
patch (Figure 9a). On simulating observations with
IGO, we ﬁnd that OpIn and SeIn can cover 52% and
51% probability respectively. The results show qualita-
tive similarities to array methods. In particular, OpIn
starts close to GrIn in cumulative coverage, drops oﬀ
as moderate probability regions are about to set, and in
the end surpasses GrIn, which covers just 45% probabil-
ity of containing the true counterpart (Figure 9c). For
comparison, OpAr provides over 53% probability cov-
erage for this patch. If scheduling constraints warrant
that observations terminate earlier, then the SeIn and
OpIn schedules can be recalculated accounting for this
constraint. Figure 9d shows the ﬁnal result of the three
independent methods, assuming observations end after
imaging n tiles. We see that in all cases, OpIn and SeIn
outperform GrIn. Further, we ﬁnd that in all our 1054
simulated patches, OpIn and SeIn give similar perfor-
mance, and are always better than GrIn.

Lastly, we compare the performance of the three inde-
pendent methods with each other and SpGr (Figure 10).
As expected, OpIn and SeIn consistently yield better re-
sults than GrIn, while SpGr outperforms all algorithms
in terms of total probability covered. We terminate
SpGr observations with the last tile of the OpIn algo-
rithm.

3.3. Array versus independent

Comparing our best array and independent methods
OpAr and OpIn, we see that array methods usually
give higher total probability coverage than independent
methods (Figure 11). This stems from irregular gaps
left between early OpIn tiles, which are ﬁlled very in-
eﬃciently with overlapping observations later. As men-
tioned in §2.6, independent placement of tiles is primar-
ily useful when only a few observations are possible. One
such case is illustrated in Figure 12. This is a relatively
small patch (28 sq. deg.), which is already setting as
observations start. The horizon is to the right in this
ﬁgure. The ﬁrst observed tile of both methods is the
same. The creation of an array by this ﬁrst observa-
tion forces a sub-optimal selection of subsequent tiles for
OpAr. OpIn, unconstrained by this array, covers higher
probability than OpAr in each successive observation.
Finally, the OpIn has a 28% probability of having im-
aged the EM counterpart, in contrast to 25% for OpAr.

3.4. Field of view trends

So far, we have simulated observations with a tele-
scope with a 1◦× 1◦ ﬁeld of view, much smaller than the
patch area. In this section, we explore how our results
change by using a telescope with a wider ﬁeld of view.

13

Figure 9. Comparison of the three independent methods. Panel (a) shows the Molleweide projection (in equatorial coordinates)
of a long arc shaped patch of 313sq. deg., color coded by probability density. Panel (b) is a zoom–in on a part of the observing
sequence calculated by OpIn, where each tile is numbered by its OpIn observing order. Note how tiles overlap with each
other, and late observations (78, 79. . . etc.) come back to the central high probability regions. Panel (c) shows the cumulative
probability for all three methods after n images, given that end of observations is determined only by patch setting and sunrise.
OpIn and SeIn cover 51.9% and 50.9% probability by imaging total 103 tiles respectively. GrIn covers 45.0% probability by
imaging 102 tiles, which is ∼ 6.9% less than the OpIn method. For comparison, OpAr, SeAr and GrAr cover 53.4%, 53.4% 46.9%
probability respectively for this patch. Panel (d) shows the probability covered by each of the three algorithms, if observations
are to be terminated after n tiles. Each point for SeIn and OpIn in curves requires a new run of the algorithm, with the
observation end time tf set at to + nTexp. We see that SeIn and OpIn always outperform the GrIn algorithm.

We ran simulations for OpAr and GrAr on 1200 patches
with areas ranging from few tens of square degrees to
over a thousand square degrees, assuming a 3◦ × 3◦
square ﬁeld of view. About two-thirds of these patches
(766) were visible from IGO, and we see strong improve-
ments in coverage for many of these. Figure 13 shows
the ratio of total probability covered by OpAr (pOpAr)
to the total probability covered by GrAr (pGrAr), plot-
ted against pGrAr. As in Figure 6 for the smaller ﬁeld
of view, we see that the improvement is small for small
patches, but prominent for medium and large patches.

3.5. Airmass

An important consideration in imaging follow–up is
the airmass5 at which the tiles are observed: higher air-
mass leads to lower sensitivity of the telescope. To max-
imize the chances of ﬁnding a counterpart, it is prefer-
able to observe the important high–probability tiles at
low airmass, delegating observations of low–probability
tiles to high airmass if required. With this in mind, we
compare the performance of various methods by using
the probability-weighted mean airmass, which we deﬁne

5 Airmass is the relative measurement of the column of air tra-
versed by light from celestial object as it passes through earth’s
atmosphere. Airmass is unity at the zenith, and increases towards
horizon.

306090120150180210240270300330-60-3003060(a)0.000.020.040.060.080.100.120.140.16Probability density/sq.deg.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103150180210240270300+80+70WestEast(b) OpInTile numberMaximum number of tiles observable(d)14

Figure 10. Comparing OpIn, SeIn, GrIn and SpGr methods. In the online color version, the color of the symbol shows the
area of the 95% patch in square degrees, with red denoting 1000 sq. deg. and larger patches. In each box, the diagonal gray
line denotes equal probability coverage by the two methods. On an average, the completely unconstrained SpGr algorithm is
expected to cover about thrice the probability as ground–based observations. This ratio is denoted by a dashed gray line in the
three panels with SpGr on one of the axes. We see that OpIn gives the same or better performance as GrIn, while SeIn may
sometimes cover less probability than GrIn.

0.20.40.60.81.0pSeIn0.20.40.60.81.0pSpGr0.00.20.40.60.81.0pGrIn0.00.20.40.60.81.0pOpIn0.20.40.60.81.0pSeIn0.20.40.60.81.0pSpGr01002003004005006007008009001000Patch area in sq.deg.15

Figure 11. Comparing OpAr with OpIn. The X–axis and
Y–axis are the total probability covered by OpIn (pOpIn) and
OpAr (pOpAr) respectively. In the online color version, the
color of the symbol shows the area of the 95% patch in square
degrees, with red denoting 1000 sq. deg. and larger patches.

Figure 13. Comparing OpAr with GrAr for a telescope with
9 sq. deg. ﬁeld of view. The X–axis is the total probability
covered by GrAr (pGrAr). The Y–axis shows the ratio of
total probability covered by OpAr (pOpAr) to pGrAr. The
shaded gray region on the right is excluded as pOpAr > 0.95
or pGrAr > 0.95. In the online color version, the color of the
symbol shows the area of the 95% patch in square degrees,
with red denoting 1000 sq. deg. and larger patches. OpAr
drastically boosts the probability coverage for many medium
and large patches. (Compare the above ﬁgure with Fig. 6.)

(cid:80) Xipi(cid:80) pi

as follows:

¯X =

(1)

where the ith tile has probability pi of containing the EM
counterpart, and is observed at airmass Xi. (There are,
of course, alternative ways of quantifying the airmass
but for our purpose it suﬃces to use Eq. 1.)

One may naively expect that by design our algorithms
try to observe tiles just before they set, and may sched-
ule a lot of observations at high airmass. Here, we com-
pare the performance of OpAr and GrAr in our sim-
ulations. Consider a generic case of observations of a
595 sq. deg. patch scheduled by OpAr and GrAr algo-
rithms (Figure 14). The patch happens to be located
such that observations end at sunrise. The GrAr algo-
rithm simply proposes observations of the highest prob-
ability tiles in order, following the patch as it sets. As
expected, therefore, the typical airmass at which a tile
is observed increases with time. The GrAr schedule for
this patch shows a lot of jumps in airmass between con-
secutive tiles as it jumps to tiles on opposite sides of
the patch center, which is not the case with the OpAr
schedule. The default GrAr algorithm gives 41% cov-
erage of the probability distribution, and Equation 1
gives a probability-weighted mean airmass of 1.5. By
slightly sacriﬁcing the probability-weighted mean air-
mass ( ¯X = 1.6), OpAr increases the probability of
imaging the EM counterpart to 47%. However, in gen-
eral we ﬁnd that OpAr schedules have a slightly better

Figure 12. Tiling plots for a patch of area 14 sq. deg., one
of the few cases where OpIn performs better than OpAr. It
is a setting patch and only a few observations are possible.
The top plot is for OpIn and bottom plot is for OpAr. In
this patch OpIn covers 28.0% probability by imaging total
5 tiles. OpAr covers 25.1% probability by imaging 4 tiles,
which is ∼ 2.9% less than the OpIn method.

0.00.20.40.60.81.0pOpIn0.00.20.40.60.81.0pOpAr01002003004005006007008009001000Patch area in sq.deg.12345150180210240270300+80+70+60Independent Tilling1234150180210240270300+80+70+60Array Tilling0.00.20.40.60.81.0pGrAr1.01.11.21.31.41.51.6Probability ratio  (pOpAr/pGrAr)01002003004005006007008009001000Patch area in sq.deg.16

probability-weighted mean airmass than GrAr sched-
ules. This is illustrated in the cumulative airmass distri-
butions for three ground–based array algorithms (Fig-
ure 15). We thus dismiss airmass performance from
being an important factor for selecting between these
algorithms.

Figure 14. Comparing the airmass of observed tiles in GrAr
and OpAr schedules for a particular patch. The X–axis is
the tile number, and the Y–axis is the airmass at which it is
observed. In the online color version, the color of the symbol
shows the probability of containing the EM counterpart in
each tile. For this patch, the GrAr schedule shows a lot
of jumps in airmass between consecutive tiles, which is not
the case with the OpAr schedule. The probability weighted
mean airmass (Equation 1) for the GrAr and OpAr schedules
are comparable: 1.5 and 1.6 respectively.

4. DISCUSSION

4.1. Summary

In this work, we developed and studied multiple al-
gorithms for calculating observing sequences to image
large sky error patches, especially, those of the LIGO-
Virgo GW network, by single telescopes or single ﬁeld
of view (FOV) scans. Taking into account day–night
and horizon constraints, and restricting observations to
a single night, we demonstrate that our OpAr algorithm
always yields the highest probability of imaging the EM
counterpart of the transient source. We also showed that
there is little penalty in terms of higher airmass obser-
vations by selecting the OpAr algorithm over a default
greedy schedule.

While we considered follow-ups with an optical tele-
scope in this work, it is easily extended to observations
with radio telescopes as well. These algorithms can also
be adapted for space–based observatories, accounting for
solar–, lunar– and earth–angle constraints. Our simula-
tions end follow–up imaging at the ﬁrst sunrise after the
transient trigger. In case observers want to image more

Figure 15. Cumulative distribution of weighted mean air-
mass ( ¯X, Equation 1) of observations of 1054 patches with
GrAr, SeAr, and OpAr schedules. For each airmass on the
X–axis, the Y–axis shows the number of patches observed
at that or a lower airmass. The three algorithms have com-
parable airmass performance in our simulations, with OpAr
faring slightly better than the basic GrAr.

parts of the patch the next night, a new schedule can be
computed easily by setting the PDF to zero for all parts
of the patch imaged on the ﬁrst night.

We found that the beneﬁts of using OpAr increased for
larger sky patches. For the 1 sq. deg. FOV used in most
of our simulations, OpAr gave the most enhancement
in probability coverage primarily in cases where GrAr
covered (cid:46) 0.3 probability of imaging the EM counter-
part (Figure 6). In contrast, for a 9 sq. deg. FOV, OpAr
boosted the chances of imaging the EM counterpart over
a wider range of GrAr probabilities (Figure 13).

We demonstrated that for a majority of cases, observ-
ing tiles from a well–deﬁned array gives better coverage
than independent placement of all images (Figure 11).
In case tiles are to be placed independently, our OpIn al-
gorithm consistently gives better probability of imaging
the EM counterpart as compared to the default GrIn
scheduling algorithm. We found that it is worth cal-
culating an OpIn observing sequence and comparing it
with OpAr in two cases: (i) when the patch size is rel-
atively small, under about twenty times the tile size; or
(ii) only a few images (under a dozen) are possible before
the patch sets.

The computation of OpAr and SeAr schedules is fast
enough for using them in rapid follow–up eﬀorts. Even
for patch spanning thousands of square degrees, the
schedule is calculated in at most a few minutes on a typi-
cal desktop computer (64–bit, 3.6 GHz, 8 GB RAM). On
the other hand, implementation of the OpIn and SeIn
algorithms is computationally intense, as the selection of
each tile requires a new convolution of the tile with the

020406080100Number of tiles1.01.21.41.61.82.02.22.4AirmassProbability weighted mean airmass= 1.49Total probability = 0.4089GrAr20406080100Number of tilesProbability weighted mean airmass= 1.59Total probability = 0.466OpAr0.00200.00250.00300.00350.00400.00450.00500.00550.0060Probability of tiles1.01.21.41.61.82.02.22.4Probability weighted mean airmass020040060080010001200Number of patchesOpArGrArSeArpatch. For a 1 sq. deg. tile and patches spanning hun-
dreds of square degrees, the calculation can take tens of
minutes. We will address this concern in future work.

4.2. Caveats

There are some caveats to our current work. We have
not considered any lunar constraints in our simulations.
These can be incorporated to ﬁrst order by discarding a
circular part of the patch around the moon. However,
an accurate implementation should also account for the
movement of the moon in the course of the night, which
was beyond the scope of this work. Another subtlety
is that once a tile sets in our simulations, we do not
check if it rises again before sunrise. This could poten-
tially lead to missed opportunities for near–circumpolar
tiles, which can set and rise within the observing period.
However, considering that such tiles will likely remain
at unobservably low altitudes, we expect that ignoring
them has negligible eﬀects on our results.

Many synoptic surveys use pre–deﬁned tiles on the sky
to ease comparison of old and new images in the search
for transients.
In our work, the array is placed with
one tile centered on the maximum probability density
on the sky. Our simulated array can thus be oﬀset from
the pre–deﬁned grids of the surveys. As the ﬁelds of
view used in our simulations are much smaller than the
patch sizes, we expect that the small oﬀset arising by
replacing our array with the pre–deﬁned grids will not
change our results about the eﬃcacy of these algorithms.
An obvious requirement for counterpart searches is
that the telescope must be sensitive enough to detect
the counterpart. Throughout this work, we have as-
sumed that a single observation is sensitive enough to
detect any EM counterpart that may be present within
the ﬁeld of view imaged by the telescope.
If the EM
counterpart fades on timescales shorter than a day, it is
possible that it may be detectable by a telescope only for
the ﬁrst few hours of observation. Our algorithms can
easily incorporate this constraint, by setting the “obser-
vation ﬁnish time” (tf ) as the time when the counter-
part is expected to be too faint to be detectable. As any
such time constraints are model–dependent, we did not
incorporate them in this work.

4.3. Future work

17

We are working on applying this algorithm to optimize
scheduling when iPTF follows up LIGO triggers (Kasli-
wal et al. 2016).

In the near future, we aim to expand our work in two
directions. First, transient search programs often pre-
fer obtaining multiple images of each ﬁeld in a single
night. This makes it easy to detect uncatalogued aster-
oids, which move measurably in tens of minutes. It also
allows observers to check for fading of any newly dis-
covered sources. The algorithms proposed here schedule
only a single observation per night, and we are evaluat-
ing some methods of incorporating multiple epochs each
night.

Secondly, we have considered follow–up imaging by a
single telescope. For large programs like follow–up of
GW sources, it is conceivable that multiple telescopes
can work together to increase the overall chance of ﬁnd-
ing the EM counterpart (cf. Singer et al. 2012). This
adds several complexities to scheduling: (i) each tele-
scope may be able to see a diﬀerent part of the GW
patch, (ii) the observatories may be spread over lon-
gitude, hence will start and stop observing at diﬀerent
times, (iii) the ﬁelds of view of each telescope may be dif-
ferent, forcing gaps or overlaps in sky coverage, and (iv)
the exposure times of each telescope may be diﬀerent.
This creates interesting challenges where the telescopes
together have to prioritize between probability–critical
tiles (those with high pi values) and setting–critical tiles
(those that will set early). We expect that the OpIn
algorithm, which places each tile independent of previ-
ous observations, may be adaptable to such a scenario.
These possibilities will be explored in a future work.

ACKNOWLEDGEMENTS

We would like to thank Shaon Ghosh and Mansi Kasli-
wal for helpful discussions. One of us (SB) would also
like to thank Paul Groot and Gijs Nelemans for their
hospitality at Radboud University. This work made use
of various python libraries and Astropy, the community–
developed core Python package for Astronomy. This
work was supported in part by NSF grants PHY-
1206108 and PHY-1506497. This document has been
assigned the preprint number LIGO-DCC-P1600007.

Software: Numpy (van der Walt et al. 2011) and
Matplotlib (Hunter 2007), Astropy (Robitaille et al.
2013, http://www.astropy.org).

REFERENCES

Aasi, J., Abadie, J., Abbott, B. P., et al. 2014, The

Abbott, B. P., Abbott, R., Abbott, T. D., et al. 2016,

Astrophysical Journal Supplement Series, 211, 7

arXiv:1602.08492, arXiv:1602.08492

Abadie, J., Abbott, B. P., Abbott, R., et al. 2010, Classical and

Berger, E. 2014, Annual Review of Astronomy and Astrophysics,

Quantum Gravity, 27, 173001

52, 43

18

Bloom, J. S., Holz, D. E., Hughes, S. A., et al. 2009, Astro2010:

Metzger, B. D., Bauswein, A., Goriely, S., & Kasen, D. 2015,

The Astronomy and Astrophysics Decadal Survey,
arXiv:0902.1527

Chan, M. L., Hu, Y.-M., Messenger, C., Hendry, M., & Heng,

I. S. 2015, arXiv:1506.04035, arXiv:1506.04035

Eichler, D., Livio, M., Piran, T., & Schramm, D. N. 1989,

Nature, 340, 126

Eichler, M., Arcones, a., Kelic, a., et al. 2015, The Astrophysical

Journal, 808, 30

Ghosh, S., Bloemen, S., Nelemans, G., Groot, P. J., & Price,

L. R. 2015, ArXiv e-prints, arXiv:1511.02673

Gorski, K. M., Hivon, E., Banday, A. J., et al. 2005, The

Astrophysical Journal, 622, 759

Gupta, R., Burse, M., Das, H. K., et al. 2002, Bulletin of the

Astronomical Society of India, 30, 785

Hunter, J. D. 2007, Computing in Science & Engineering, 9, 90
Kasliwal, M. M., Cenko, S. B., Singer, L. P., et al. 2016, ArXiv

e-prints, arXiv:1602.08764

Mon. Not. R. Astr. Soc., 446, 6

Metzger, B. D., & Berger, E. 2012, The Astrophysical Journal,

746, 48

Metzger, B. D., Mart´ınez-Pinedo, G., Darbha, S., et al. 2010,

Monthly Notices of the Royal Astronomical Society, 406, 2650

Nakar, E., & Piran, T. 2011, Nature, 478, 82
Nissanke, S., Kasliwal, M., & Georgieva, A. 2013, The

Astrophysical Journal, 767, 124

Petrillo, C. E., Dietz, A., & Cavagli`a, M. 2013, The

Astrophysical Journal, 767, 140

Phinney, . 2009, Astro2010: The Astronomy and Astrophysics

Decadal Survey, arXiv:0903.0098

Robitaille, T. P., Tollerud, E. J., Greenﬁeld, P., et al. 2013,

Astronomy & Astrophysics, 558, A33

Singer, L., Price, L., & Speranza, A. 2012, eprint arXiv:1204.4510
Singer, L. P., Price, L. R., Farr, B., et al. 2014, The

Astrophysical Journal, 795, 105

Tanvir, N. R., Levan, A. J., Fruchter, A. S., et al. 2013, Nature,

Law, N. M., Kulkarni, S. R., Dekany, R. G., et al. 2009,

500, 547

Publications of the . . . , 121, 1395

Li, L.-X., & Paczyski, B. 1998, The Astrophysical Journal, 507,

van der Walt, S., Colbert, S. C., & Varoquaux, G. 2011,

Computing in Science & Engineering, 13, 22

L59

