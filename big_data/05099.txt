Asymptotically Optimal Sampling-Based Algorithms

for Topological Motion Planning

Jung-Su Ha, Soon-Seo Park and Han-Lim Choi

6
1
0
2

 
r
a

 

M
6
1

 
 
]

O
R
.
s
c
[
 
 

1
v
9
9
0
5
0

.

3
0
6
1
:
v
i
X
r
a

Abstract— Topological motion planning is a planning prob-
lem embedding topological concept of trajectories. In this work,
we propose two asymptotically optimal sampling-based algo-
rithms for topological motion planning: (a) a batch processing-
based planner, termed Fast Marching Homology-embedded
Tree star (FMHT*); and (b) an incremental anytime algorithm,
termed Rapidly-exploring Random Homology-embedded Tree
star (RRHT*). The methods commonly expand a graph directly
in the conﬁguration space and project the associated tree onto
the topological concept-augmented space; the computational cost
in edge computation and collision checking is signiﬁcantly
reduced by allowing trajectories with different topology to share
the edge and collision information. Illustrative numerical exam-
ples are presented to demonstrate the validity and applicability
of the proposed approach.

I. INTRODUCTION

Robotic motion planning aims to design a trajectory of
robot states from a given initial state to a speciﬁed goal
state through a complex conﬁguration space. Over the last
two decades, a variety of research has been conducted on
the motion planning problems with various system dynamics,
constraints and objectives. In a complex conﬁguration space,
trajectories can be classiﬁed according to their topological
features induced by obstacles. The motion planning problem
embedding topological concept of trajectories are called
topological motion planning and they have been adopted
to many applications. For example, topological inequivalent
trajectories have been utilized as efﬁcient strategy for multi-
agent surveillance systems [1]–[3], as candidates of a robust
trajectory for motion planning under uncertain environment
[4] and as reference trajectories for stochastic optimal con-
troller [5]. Also, a trajectory of cable attached mobile robot
in speciﬁc topology class has been used to manipulate and
transport multiple objects [6].

One of the most general topological concept is homology;
two trajectories are in the same homology class,
if the
boundary formed by one trajectory together with the (op-
posite directional) other one does not contain any obstacles.
There have been some attempts to embed the concept of
homology in motion planning algorithms. Bhattacharya et
al. have proposed the concept of H-signature to distinguish
different homology classes of trajectories and incorporated
it into a graph-search algorithm to ﬁnd the optimal tra-
jectories in various homology classes for 2–3 dimensional
[7] and higher dimensional [8] conﬁguration space; they
have augmented the conﬁguration space by H-signature and

J.-S. Ha, S.-S. Park and H.-L. Choi are with the Department of Aerospace
Engineering, KAIST, Daejeon, Korea {wjdtn1404, brave21i,
hanlimc}@kaist.ac.kr

topological

performed A* algorithm on H-signature augmented graph. In
[3,9], Pokorny et al. have proposed the algebraic topological
approach to automatically distinguish different homology
classes of trajectories without explicit information about ob-
stacle positions by utilizing ﬁltration of simplicial complexes.
Also,
task projections (TTPs) is proposed in
[10] to represent topological features of high-dimensional
trajectories by H-signature in 2-dimensional projected space.
The concept of H-signature [7] is valid, but it is known to
be difﬁcult for the graph-search based algorithms to handle
system dynamics and high-dimensional space because of the
curse of dimensionality from discretization of conﬁguration
space. In the motion planning literature, sampling-based
algorithms have widely been studied in order to cope with
such difﬁculties and made a lot of successes theoretically
and practically [11]. Especially, Karaman and Frazzoli have
proposed the incremental sampling-based algorithm, namely
the Rapidly-exploring Random Tree star (RRT*) [12], and
more recently, Janson et al. have proposed the Fast Marching
Tree star (FMT*) algorithm [13] which utilizes batch pro-
cess; both algorithms guarantee probabilistic completeness
and asymptotic optimality. They have naturally extended
to the planning problem with high-dimensional space and
system dynamics [14]–[17]. Very few attempts, however,
have been made at adopting sampling-based algorithm to
topological motion planning problem whose conﬁguration
space is augmented by topological signature. Only very
recent research, Winding-Augmented RRT* (WA-RRT*),
extents RRT* algorithm to topological motion planning [10]
by conducting an additional H-signature sampling step; in
order to create a new node, it samples a value of H-signature
as well as its conﬁguration coordinate.

In this paper, we propose two sampling-based algo-
rithms for optimal topological motion planning: Fast March-
ing Homology-embedded Tree star (FMHT*) and Rapidly-
exploring Random Homology-embedded Tree star (RRHT*).
They inherit the properties of the FMT* and RRT* algo-
rithms, respectively; FMHT* is batch processing algorithm
like FMT* and performs the direct dynamic programming
process and lazy collision checking which dramatically ac-
celerates the speed of the algorithm [13]; RRHT* is incre-
mental anytime algorithm like RRT* which ﬁnds a feasible
trajectory quickly by rapidly exploring the conﬁguration
space and reﬁnes the solution for allowed computation time.
Both algorithm do not have additional sampling step; they
expand a graph directly in the conﬁguration space and project
an associated tree onto the H-signature augmented space. As
a result, the proposed algorithms share the edge information

for every layer of H-signature space and thus signiﬁcantly
reduce the computational cost caused by edge computation
and its collision checking which are the computational
bottleneck in many cases. To demonstrate the effectiveness
and applicability of the proposed algorithms, three numerical
examples are presented in this work.

II. PROBLEM DESCRIPTION

This paper deals with optimal topological motion planning
problem. Let X and Xobs be the conﬁguration space and
the obstacle region, respectively. The obstacle-free region
is deﬁned as Xf ree = cl(X \ Xobs), where cl(·) denotes
the closure of a given set. Let x0 and Xgoal be the initial
state and the goal region, respectively, which are inside the
obstacle-free region and a continuous function σ : [0, 1] →
X be a trajectory. A trajectory is called feasible if it (i)
starts from the initial state and reaches the goal region,
i.e., σ(0) = xinit, σ(1) ∈ Xgoal and (ii) avoids collision
with obstacles, i.e., σ(τ ) ∈ Xf ree, ∀τ ∈ [0, 1]. Also, the
cost function, c : Σ → R≥0, is given in order to evaluate
a trajectory, where Σ denotes the set of all
trajectories.
Then, for the given tuple (Xf ree, x0,Cgoal) and the cost
function c(·),
if the
trajectory is feasible and minimizes the cost function, i.e.,
σ∗ = argmin{c(σ)|σ is feasible} and the optimal motion
planning problem is deﬁned as to ﬁnd the optimal trajectory.
In addition, the problem is called kinodynamic motion plan-
ning problem when the resulting trajectory needs to satisfy
the dynamics of the system:

the trajectory, σ∗,

is called optimal

˙x(t) = f (x(t), u(t)),

(1)

where u denotes the control input deﬁned over the control
input space U.

Presence of obstacles in an environment differentiates
topological classes among trajectories. When topological
features of trajectories need to be considered, the problem
is called topological motion planning. The objective of such
problems can vary depending on its application. For example,
the objective of the problem is to ﬁnd

1) the set of the optimal trajectories in different topolog-

ical classes;

2) the optimal trajectory in a speciﬁc topological class.

The resulting trajectories of former problem can be utilized
as efﬁcient strategy for multi-agent surveillance systems [1]–
[3], as candidates of robust trajectories for motion planning
under uncertain environment [4] or as reference trajecto-
ries for stochastic optimal controller [5] and the resulting
trajectory of latter problem can be used for cable robot to
manipulate and transport speciﬁed multiple objects [6].

III. TOPOLOGICAL REPRESENTATION OF TRAJECTORIES
Suppose the obstacles exist in the 2-dimensional conﬁg-
uration space, X ⊂ R2 and σ1 and σ2 connect the same
start and end coordinates. The two trajectories are called
homologous if the boundary formed by σ1 together with
opposite directional σ2 does not contain any obstacles.

1

(cid:19)

(cid:18)(cid:90)

Trajectories in different homology classes can be distin-
guished by using a topological signature. For this purpose,
H-signature for 2-dimensional space is proposed in [7]
based on Complex Analysis. Let the conﬁguration space
be represented as a subset of the complex plane C, i.e.,
(x, y) ∈ X ⇔ x + iy ∈ C. The obstacles are also
subsets of the complex plane, O1,O2, ...,ON ⊂ C, and
each obstacle has one representative point which is denoted
as ζl ∈ Ol, ∀l = 1, ..., N. The obstacle marker function,
F : C → CN , is deﬁned as,

F(z) =

1

,

z − ζ1

z − ζN
Then, H-signature, H2 : C1(C) → CN ,
integration of a differential one-form along the trajectory:

z − ζ2

is deﬁned as

(2)

1

,··· ,

(cid:21)(cid:48)

.

(cid:20)

H2(σ) =

1
2π

Im

F(z)dz

σ

,

(3)

where C1(C) is the set of all trajectories in C. The H-
signature is also called the winding number as it represents
winding angles of a trajectory for given winding centers
(obstacle representative points) [10].
If two trajectories σ1 and σ2 connecting the same points
have the same H-signatures, i.e., H2(σ1) = H2(σ2), they
are homologous and the reverse is also true. Also, we can
restrict the homology class of trajectories by deﬁning disjoint
sets of allowed and blocked H-signature, A and B, such that
U = A ∪ B, where U denotes the set of the H-signatures
of all trajectories. By properly restricting the allowed H-
signature set, the topological motion planning algorithm can
secure scalability with the number of obstacles.

Especially, when the trajectory from z1 to z2 is short
enough (i.e., a straight
line connecting z1 and z2 is in
same homology class), its H-signature can be calculated
analytically as
(H2(e))l =

k∈Z (arg(z2 − ζl)− arg(z1 − ζl) + 2kπ),
(4)
where function absmin returns the value which have the min-
imum absolute value. The H-signature of a long trajectory
also can be computed by approximating it as a piecewise
linear trajectory.

absmin

1
2π

The concept of H-signature is extended to 3-dimensional
conﬁguration space by exploiting the theory of electromag-
netism [7] and also has been generalized to higher dimen-
sional space [8]. On the other hand, a topological feature of
a trajectory in high dimensional space can be captured in
2-dimensional projected space by using valid 2D topological
task projections (TTPs) [10].

IV. SAMPLING-BASED ALGORITHMS FOR OPTIMAL

TOPOLOGICAL MOTION PLANNING

A. High-level Description of Proposed Algorithms

In this section, we will propose two sampling-based algo-
rithms for optimal topological motion planning problem: one
is Fast Marching Homology-embedded Tree star (FMHT*)

and the other is Rapidly-exploring Random Homology-
embedded Tree star (RRHT*). The proposed algorithms
construct a graph on the conﬁguration space and project
the tree onto H-signature augmented space. They are based
on Fast Marching Tree star (FMT*) and Rapidly-exploring
Random Tree star (RRT*) algorithms, respectively. Both
algorithms are tailored to disk-connected graphs, where for
the given connection radius,
two vertices are considered
as neighbor, and concurrently perform graph construction
and graph search; latter is key feature of sampling-based
algorithm improving the scalability to a high-dimensional
conﬁguration space, because it makes the algorithms not
suffer from the curse of dimensionality (the algorithms need
not discretize the conﬁguration space in advance). FMHT*
is batch-type algorithm like FMT*; it generates k samples
in free conﬁguration space. Then the r-disk graph is con-
structed and concurrently projects the tree into H-signature
augmented space in order of cost-to-arrive. With this outward
moving, FMHT* performs the direct dynamic programming
recursion with lazy collision checking. On the other hand,
RRHT* is incremental anytime algorithm like RRT*;
it
incrementally samples a random vertex and creates/adds a
new vertex by steering the nearest vertex in the graph. Then,
RRHT* performs exhaustive-search over the graph to project
a tree into H-signature augmented space.

In both algorithms, the graph in conﬁguration space is
deﬁned by a set of vertices, V , and edges, E. Also, each
vertex is composed of a state, v.x, and set of associated
nodes v.N. Finally, each node n ∈ v.N has its H-signature,
n.H, a cost, n.c, and a parent node n.parent.

B. FMHT*: Batch Type Topology-Embedded Sampling-
Based Planner

(cid:18)

log |V |
|V |

1/d(cid:19)

FMHT* is shown in Algorithm 1. Some required functions
are described as follows: SAMPLEFREE(k) function returns k
random states from the free conﬁguration space. NEARFOR-
WARD(V, x) and NEARBACKWARD(V, x) functions return
(see
nearby vertices within a cost of r|V | = γ
[13]) among the set of vertices, V , from and to x, re-
spectively, and also return corresponding optimal trajectories
without considering obstacles; when the planning problem
has kinodynamic constraints, the optimal trajectory is the
solution of two point boundary value problem, which can be
computed in various ways according to the system dynamics
and cost [14]–[16]. PROPAGATE(n, v) returns the new node,
nnew, which is created by propagating n to the vertex v;
the new node is given as x(nnew) = v and nnew.H =
n.H + H(e), where e denotes the piece-wise straight line
from v(n) to v; when H-signature of the new node is blocked
(i.e., H(nnew) ∈ B), the function does not return the new
node. OBSTACLEFREE(e) takes a trajectory e as an argument
and checks whether it lies in obstacle free region or not.
APPENDNODE(V, N ) adds nodes, N, to each vertex in V .
APPENDGOAL(Ngoal, z) ﬁrst checks if there exists a node
in the goal set, Ngoal, having the same H-signature with the
new node, z, by propagating it to the goal representation

n ,x(n)) ← NEARBACKWARD(V, x(n));

{c(y) + Cost(ex(y),x(n))}

);

z

z .N ;

) ← NEARFORWARD(V, x(z))

z

n , EV b

n ,x(n));

Algorithm 1 FMHT* algorithm
1: n.H = 0; n.c = 0; n.parent = ∅;
2: vinit.x = xinit; vinit.N = n;
3: V ← {vinit} ∪ SAMPLEFREE(k); E ← ∅;
4: Nopen ← {vinit.n}; z ← vinit.n;
5: while ∼ TERMINATE(Ngoal) do
6:
7:
8:
9:
10:
11:
12:
13:
14:

(V f
z , Ex(z),V f
Ntemp ← PROPAGATE(z, Ex(z),V f
Nnear ← Ntemp \ V f
Nopen,new ← ∅;
for n ∈ Nnear do

(V b
Ytemp ← PROPAGATE(n, EV b
Ynear ← Ytemp ∩ V b
n .Nopen;
ymin ← argmin
y∈Ynear
if OBSTACLEFREE(ex(n),x(ymin)) then
n.c ← ymin.c + Cost(ex(y),x(n));
n.parent ← ymin;
Nopen,new ← Nopen,new ∪ n;
E ← E ∪ ex(n),x(ymin);

15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
end if
27:
28: end while
29: return PATH(Ngoal, T = (V, E))

end for
Nopen ← (Nopen ∪ Nopen,new) \ {z};
V ← APPENDNODE(V, Nopen,new);
z ← argminn∈Nopen{c(n)};
if v(z) ∈ Xgoal then

Ngoal ← APPENDGOAL(Ngoal, z);

end if

point; if not, the function appends the new node to the goal
set. Finally, TERMINATE(Ngoal) checks if the set of goal
nodes satisﬁes the terminal condition of the problem; for
example if the objective is to ﬁnd the set of the homologious
inequivalent trajectories, it checks the number of the goal
nodes exceed some predeﬁned number; if the objective is to
ﬁnd the trajectory in a speciﬁc topological class, it checks
any goal node is in that topological class.

The algorithm operates as follows. It ﬁrst creates the
initial node and vertex then samples a set of states from the
uniform distribution on the free conﬁguration space, Xf ree
(line 1–3). Then the initial node is added to the open set
and chosen as the minimum cost open node (line 4). In
the main loop, the algorithm ﬁnds forward near vertices of
x(z) and propagates z to the forward near vertices in order
to make candidates of new nodes, Nnear (line 6–7). Then,
it checks the nodes already exist in the tree and excludes
the existing nodes from Nnear (line 8). For each candidate
node, the algorithm ﬁnds open backward near nodes in the
tree (line 11–13) and ﬁnds the optimal connections without
considering obstacles (line 14). This procedure represents
direct dynamic programming recursion on r|V |-disk graph
and guarantees the optimal connection of the tree in obstacle

xrand ← SAMPLING();
vnearest ← NEAREST(V, xrand);
(xnew, enearest) ← STEER(vnearest.x, xrand);
vnew.N ← PROPAGATE(enearest, vnearest.N )
if ∃vnew.N then

Algorithm 2 RRHT* algorithm
1: n.H = 0; n.c = 0; n.parent = ∅;
2: v.x = xinit; v.N = n; (V, E) ← ({v},∅);
3: for i = 1 to Niter do
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15: end for
16: return PATH(Ngoal, T = (V, E))

V ← V ∪ v(xnew); E ← E ∪ enearest;
(V b
(V f
(V, E) ← CHOOSEPARENT(V, E, Eb
(V, E) ← REWIRE(V, E, Ef

near) ← NEARBACKWARD(V, xnew);
near) ← NEARFORWARD(V, xnew);

near, Eb
near, V f

end if

near);

near)

near;

near)

near) then

near ∈ Eb
near do
if OBSTACLEFREE(eb
E ← E ∪ eb
for n ∈ vb

Algorithm 3 CHOOSEPARENT(V, E, Eb
1: for eb
2:
3:
4:
5:
6:
7:
8:
9: end for
10: return (V, E)

near.N do

end for

end if

nnew ← PROPAGATE(eb
near, n);
APPENDNODE(v(xnew), nnew);

near)

near) then

near;

end if

near ∈ Ef
near do
if OBSTACLEFREE(ef
E ← E ∪ ef

Algorithm 4 REWIRE(V, E, Ef
1: for ef
2:
3:
4:
5: end for
6: Q ← v(xnew).N ;
7: while Q (cid:54)= ∅ do
n ← POP(Q);
8:
for vf
9:
10:
11:
12:
13:
end for
14:
15: end while
16: return (V, E)

end if

(cid:46) exhaustive search

near of v(n) do
nnew ← PROPAGATE(ef
if APPENDNODE(vf

near, n);
Q ← INSERTQ(Q, nnew);

near, nnew) then

(a) FMHT*

(b) RRHT*

Fig. 3. The number of the edges in the graph, the collision checking, the
nodes and the vertices w.r.t the number of iterations

free space from the fact that every new node must pass
through a open node. Then the new node and edge are
added to the tree if the connection is collision-free (line
15–19); if such connection is not collision-free, adding the
new node is postponed. This lazy collision checking may
induces sub-optimality of the tree but the number of costly
collision checking is dramatically reduced; also, it is known
that the cases where a suboptimal connection is made become
vanishingly rare as the number of samples increases. After
trying to make all connections to Nnear, z is excluded from
the open set and Nopen,new is added to the open set and to
the tree (line 22–23). Then, the minimum cost open node,
z, is chosen among the open set (line 24) and if z is in
the goal region, the algorithm tries to append the new node
to the goal set (line 25–27). The algorithm proceeds to the
next iteration and when the terminal condition is satisﬁed,
the algorithm ends and returns the tree.

C. RRHT*:
Based Planner

Incremental Topology-Embedded Sampling-

z→x), where e∗

The RRHT* algorithm is represented in Algorithm 2.
Some required functions are described as follows: SAM-
PLING() function returns a random state from the state
space. NEAREST(V, x) returns the nearest vertex among
the set of vertices, V , from x,
i.e. NEAREST(V, x) =
argminz∈V c(e∗
z→x denotes the optimal tra-
jectory from z to x without obstacles. STEER(x1, x2) takes
two states, x1 and x2 as arguments and returns a new state
y and a corresponding trajectory e∗
x1→y which minimizes
x1→y) ≤ η for a prespeci-
c(e∗
ﬁed one-step limitation η. OBSTACLEFREE(e), NEARFOR-
WARD(V, x) and NEARBACKWARD(V, x) functions are same
as those of the FMHT* algorithm except a constant for

) while maintaining c(e∗

y→x2

0200400600800100012001400# of iterations010002000300040005000EdgesCollision checkingNodesVertices050100150200250300# of iterations02000400060008000EdgesCollision checkingNodesVertices(a)

(b)

(c)

(d)

Fig. 1. FMHT* algorithm. The growth of the tree and the graph in the H-signature augmented space with (a) 100, (b) 300, (c) 600 and (d) 1000 nodes.

(a)

(b)

(c)

(d)

Fig. 2. RRHT* algorithm. The growth of the tree and the graph in the H-signature augmented space with (a) 108, (b) 301, (c) 601 and (d) 1001 nodes.

connection radius (see [12]). PROPAGATE(e, n) and AP-
PENDNODE(v, nnew) is similar to those of the FMHT*
algorithm but
they are a little different for the RRHT*
algorithm. PROPAGATE(e, n) returns the new node, nnew,
which is created by propagating n through e;
the new
node is given as nnew.H = n.H + H(e), nnew.c =
n.c + Cost(e) and nnew.parent = n, where H(e) and
Cost(e) denotes H-signature and cost of trajectory, e, re-
spectively; when H-signature of the new node is blocked
(i.e. H(nnew) ∈ B), the function does not return the new
node. APPENDNODE(v, nnew) imposes a partial ordering to
the set of nodes in the vertex of the form:

na < nb ⇔ (na.H = nb.H) ∧ (na.c < nb.c).

(5)
When above condition holds, na is said to be dominated
by nb, meaning that the paths to the root from na and nb
are homologous but the cost of path from na is smaller. This
function takes a vertex, v, and new node, nnew as arguments
and checks if the new node is dominated by any existing
nodes at v. Then, if it is dominated, the function returns
failure. If it is not, the function appends the new node, checks
if it dominates any nodes at v and prunes when necessary.
Finally, INSERTQ(Q, nnew) adds a new node into the queue
and excludes a dominated node in the queue when existing.
The RRHT* algorithm operates as follows. It constructs
the graph from the initial vertex, xinit where the initial node

is appended. In the main loop, it ﬁrst samples a new state and
ﬁnds the nearest vertex vnearest in the graph to this sampled
state (line 4–5). Then, the algorithm steers vnearest.x toward
xrand to determine xnew that is closest to xrand and stays
within a speciﬁed distance from vnearest.x (line 6); this
procedure helps the graph to be rapidly expanded into the
conﬁguration space because the frontier vertex of unexplored
region is more likely chosen as vnearest due to Voronoi
bias. The new nodes are created by propagating nodes of
vnearest through enearest and if such propagation creates
at least one new node with allowed H-signature, the new
vertex is added to the graph (line 7–9). With the successfully
added new vertex, the algorithm ﬁnds/adds the new collision-
free backward (and forward) edges from (and to) the graph
on line 10 (and line 11) and line 1–3 in Algorithm 3 (and
line 1–5 in Algorithm 4). In Algorithm 3, the algorithm
attempts to create new nodes and optimally connects them
to the tree (line 4–7). Also, in Algorithm 4, after adding
all new edges, all nodes in the new vertex are added to the
queue, Q (line 6). Then the queue is exhaustively searched
using uniform cost search, like Dijkstra’s algorithm (line 7–
15). These procedures make the graph project the tree into
H-signature augmented space by propagating nodes in the
queue and pruning with criteria in (5).

D. Discussion

It is known that because FMT* and RRT* (which the
proposed algorithms are based on) span the tree on r-disk
graph which guarantees to asymptotically contain all possi-
ble trajectories through the conﬁguration space, they have
properties of probabilistic completeness and asymptotic-
optimality; that is, if the planning problem is feasible, the
probability of the algorithm failing to ﬁnd a solution reduces
to zero as the number of iterations increase, and the solution
asymptotically approaches to the optimal solution as the size
of samples increases. The FMHT* and RRHT* algorithms
also build r-disk graph and perform graph projection into H-
signature augmented space in the equivalent ways; therefore,
the proposed algorithms also are probabilistically complete
and asymptotically optimal.

The graph-construction/tree-projection methodology of the
proposed algorithms reduces the computational cost of edge
computation and its collision checking which are the com-
putational bottleneck especially when the planning problem
has kinodynamic constraints (1). The FMHT* algorithm
should save the information of neighbor set and collision
of the edge on line 6, 11 and 15 in Algorithm 1 and
reuses such information when it is possible. This operation
prevents unnecessary repeated computations and provides the
important characterization of the computational complexity
of the algorithm; the algorithm can reuse/share the edge and
the collision information when it proceeds other layers of
H-signature (see Fig. 1). Also, RRHT* computes optimal
connections (edges) between a new node and a graph on
line 10–11 in Algorithm 2 then creates/adds new nodes
and rewires a tree by using the edges in Algorithm 3 and
4, respectively. As a result, like FMHT*, the edges and
their collision information is reused/shared for all different
layers of H-signature (see Fig. 2). Without these procedures,
the optimal connections/collision checking should be com-
puted/performed for all layers separately; in other words,
these procedures signiﬁcantly improve the scalability of the
proposed algorithms for the problem having large number of
obstacles (or equivalently, high-dimensional H-signature).

V. NUMERICAL EXAMPLES

In this section, we numerically investigate the compu-
tational properties and the applicability of the proposed
algorithms. In the ﬁrst example, a simple 2-dimensional con-
ﬁguration space with one obstacle is considered. Fig. 1 and
2 show how the trees are expanded into the H-augmented
space by the proposed algorithms. Green lines represent the
edges of the tree and dark-gray lines on the bottom denote
the edge of the graph which the tree is projected by; x and y
axis denote the conﬁguration, z represents H-signature and
the initial augmented state is [0, 0, 0]T ; in this example, H-
signature is scalar because there is only one obstacle. It is
shown in Fig. 1 that the tree of FMHT* is expanded in order
of the cost to arrive. Also, observe that the graph is expanded
only in the early phase of algorithm and the tree is projected
only by the expanded graph; this implies that the algorithm
do not need to compute the edges and check their collisions

(a) FMHT*

(b) RRHT*

Fig. 4. The Dubin’s car replanning example. Lengths of the shortest paths
from [0, 0, 0]T to goal region in each homology class at each iteration.

(a)

(b)

(c)

Fig. 5. The Dubin’s car example. After the original trajectory found in (a)
is blocked by new obstacle in (b), the robot replans its trajectory as (c).

when the tree is expanded to other H-signature layers (see
Fig. 3(a)). On the other hand, Fig. 2 shows that RRHT*
rapidly expands the tree to the whole space and rewires it. In
addition, note that RRHT* also shares the edge information
(shown as the graph) through all H-signature layers; it is
shown that the graph (vertices) projects the tree (nodes) into
the augmented space (see Fig. 3(b)).

The second example deals with fast replanning of Du-
bin’s car in dynamic environment. The conﬁguration x =
[x, y, θ](cid:48) represents the position and heading of a car, which
is controlled by the turn rate, u. The dynamics is given by:

 ˙x

 =

V cos(θ)


V sin(θ)

˙y
˙θ

u/ρ

with V = ρ = 1 and |u| ≤ 1, respectively. The cost function
is given as the length of the trajectory. When projecting the
tree onto H-augmented space, the set of allowed H-signature

5005506006507007508008509009501000# of nodes17181920212223Path length01002003004005006007008009001000# of nodes17181920212223Path length024681002468101214160246810024681012141602468100246810121416Fig. 6. Replanned trajectory of the Dubin’s car in the H-signature aug-
mented space; z axis represents the H-signature w.r.t the yellow obstacle.
value is deﬁned as A ≡ {z : |zi| ≤ Hlimit, i ≤ Nobs} with
Hlimit = 1 to extract trajectories in physically meaningful
homology classes; otherwise,
inﬁnitely many trajectories
that include paths revolving around the obstacle could be
obtained. In this example, the tree is expanded from the
goal region, namely the backward tree, in order to utilize the
tree as a feedback policy as in [18]. Fig. 4 shows the paths
from the initial conﬁguration [0, 0, 0]T to the goal region in
each homology class until 1000 nodes are added to the trees
and lengths of the paths at each iteration; it is observed that
while the RRHT* algorithm ﬁnds trajectories very quickly
and reﬁnes them, the FMHT* algorithm ﬁnds trajectories
in order of their cost. Fig. 5 and 6 shows the replanning
process in the conﬁguration space and the resulting trajectory
in the augmented space, respectively. Because a number of
the topologically inequivalent trajectories were computed in
lead time, the alternative trajectory can be found quickly
when the originally planned trajectory become infeasible.

For the third example, we consider a two-dimensional
stochastic single integrator in the environment having three
obstacles. The dynamics and the cost rate are given by:

dx = udt + bdw

the position of a robot

i.e.
in the conﬁguration space,
x ∈ D ⊂ R2,
is controlled by the velocity input,
u ∈ R2, while the objective of control is to reach the
goal
function, J =
. At the boundary (goal region
E
or obstacles), the ﬁnal cost is given as:

(cid:105)
0 1 + u(cid:48)udt

region while minimizing the cost

(cid:104)

φ(x(tf )) +(cid:82) tf
(cid:26) 0

φ(x) =

if it reaches goal region,

∞ if it hits obstacles.

(6)

The state is driven also by a diffusion term that contains
the 2-dimensional Brownian motion; two noise levels are
considered in this example for comparison:

b = 0.1, 0.3.

The path-integral approach [5,19] is applied to solve this
stochastic optimal control problem; two topologically in-
equivalent
trajectories obtained by FMHT* are used as
references of path integral controller and help the controller
to efﬁciently compute the optimal control and not to fall

(a) small noise, b = 0.1

(b) small noise, b = 0.1

(c) large noise, b = 0.1

(d) large noise, b = 0.1

Fig. 7. The stochastic optimal control example. (a), (c) show the process
of the path integral-based optimal controller and (b), (d) depict 10 resulting
trajectories.

into local optima. Fig. 7 depicts the process of path integral
approach and 10 resulting trajectories with two different
noise level. Note that as the effect of the Brownian noise
increases that the robot cannot pass through the narrow slit
between the obstacles. It is observed from the ﬁgure that
when the noise is not critical, the robot goes to the goal
region through the narrow but nearby slit but it makes a
detour as the noise increases. In summary, by considering
topologically various trajectories as references, the stochastic
optimal controller can lead a system to safe and fast path
depending on the level of noise.

VI. CONCLUSIONS

In this paper, we have presented two sampling-based
algorithms, FMHT* and RRHT*, for the optimal topolog-
ical motion planning problem. The proposed algorithms
signiﬁcantly reduce the computational cost caused by edge
computation and its collision checking by utilizing the graph-
construction/tree-projection methodology which enables re-
usage/share of edges and their collision information for all
different topological trajectories. Numerical examples have
demonstrated the validity of the proposed approach.

The graph-construction/tree-projection methodology has
been utilized for the planning problem in belief space [20].
One can view this methodology as a generalization of the
sampling-based algorithms; for example, FMT* and RRT*
construct a graph and project a tree in the same (conﬁgu-
ration) space while the proposed algorithms project a tree
into the topological-signature augmented space. We expect
that by using this methodology, the sampling-based planning

01234500.511.522.533.544.5501234500.511.522.533.544.55algorithm can be extended to solve the more general planning
problems having various constraints or objectives.

ACKNOWLEDGMENT

This work was supported by Agency for Defense Devel-
opment (under in part contract #UD140053JD and in part
contract #UD150047JD).

REFERENCES

[1] F. Bourgaul, A. A. Makarenko, S. B. Williams, B. Grocholsky, and
H. F. Durrant-Whyte, “Information based adaptive robotic explo-
ration,” in IEEE/RSJ International Conference on Intelligent Robots
and Systems, vol. 1, 2002, pp. 540–545.

[2] S. Kim, S. Bhattacharya, R. Ghrist, and V. Kumar, “Topological explo-
ration of unknown and partially known environments,” in IEEE/RSJ
International Conference on Intelligent Robots and Systems (IROS),
2013, pp. 3851–3858.

[3] F. T. Pokorny, K. Goldberg, and D. Kragic, “Topological trajectory
clustering with relative persistent homology,” in IEEE International
Conference on Robotics and Automation (ICRA), 2016.

[4] S. Bhattacharya, R. Ghrist, and V. Kumar, “Persistent homology
for path planning in uncertain environments,” IEEE Transactions on
Robotics, vol. 31, no. 3, pp. 578–590, 2015.

[5] J.-S. Ha and H.-L. Choi, “A topology-guided path integral approach
for stochastic optimal control,” in IEEE International Conference
onRobotics and Automation (ICRA), 2016.

[6] S. Bhattacharya, S. Kim, H. Heidarsson, G. S. Sukhatme, and
V. Kumar, “A topological approach to using cables to separate and
manipulate sets of objects,” The International Journal of Robotics
Research, 2015.

[7] S. Bhattacharya, M. Likhachev, and V. Kumar, “Topological con-
straints in search-based robot path planning,” Autonomous Robots,
vol. 33, no. 3, pp. 273–290, 2012.

[8] S. Bhattacharya, D. Lipsky, R. Ghrist, and V. Kumar, “Invariants for
homology classes with application to optimal search and planning
problem in robotics,” Annals of Mathematics and Artiﬁcial Intelli-
gence, vol. 67, no. 3-4, pp. 251–281, 2013.

[9] F. T. Pokorny, M. Hawasly, and S. Ramamoorthy, “Topological
trajectory classiﬁcation with ﬁltrations of simplicial complexes and
persistent homology,” The International Journal of Robotics Research,
vol. 35, no. 1-3, pp. 204–223, 2016.

[10] F. T. Pokorny, D. Kragic, L. E. Kavraki, and K. Goldberg, “High-
dimensional winding-augmented motion planning with 2d topological
task projections and persistent homology,” in IEEE International
Conference on Robotics and Automation (ICRA), 2016.

[11] S. M. LaValle, Planning algorithms.

Cambridge university press,

2006.

[12] S. Karaman and E. Frazzoli, “Sampling-based algorithms for optimal
motion planning,” The International Journal of Robotics Research,
vol. 30, no. 7, pp. 846–894, 2011.

[13] L. Janson, E. Schmerling, A. Clark, and M. Pavone, “Fast marching
tree: A fast marching sampling-based method for optimal motion
planning in many dimensions,” The International Journal of Robotics
Research, pp. 883–921, 2015.

[14] S. Karaman and E. Frazzoli, “Optimal kinodynamic motion planning
using incremental sampling-based methods,” in IEEE Conference on
Decision and Control (CDC), 2010, pp. 7681–7687.

[15] D. J. Webb and J. van den Berg, “Kinodynamic RRT*: Asymptotically
optimal motion planning for robots with linear dynamics,” in 2013
IEEE International Conference on Robotics and Automation (ICRA),
2013, pp. 5054–5061.

[16] J.-S. Ha, J.-J. Lee, and H.-L. Choi, “A successive approximation-based
approach for optimal kinodynamic motion planning with nonlinear
differential constraints,” in IEEE Conference on Decision and Control
(CDC), 2013, pp. 3623–3628.

[17] R. Allen and M. Pavone, “Toward a real-time framework for solving
the kinodynamic motion planning problem,” in IEEE International
Conference on Robotics and Automation (ICRA), 2015, pp. 928–934.
[18] J. Jeon, S. Karaman, and E. Frazzoli, “Optimal sampling-based feed-
back motion trees among obstacles for controllable linear systems with
linear constraints,” in IEEE International Conference on Robotics and
Automation, 2015, pp. 4195–4201.

[19] H. J. Kappen, “Path integrals and symmetry breaking for optimal con-
trol theory,” Journal of statistical mechanics: theory and experiment,
vol. 2005, no. 11, p. P11011, 2005.

[20] A. Bry and N. Roy, “Rapidly-exploring random belief trees for motion
planning under uncertainty,” in IEEE International Conference on
Robotics and Automation (ICRA), 2011, pp. 723–730.

