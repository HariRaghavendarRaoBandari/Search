COMPARE: COMParative Advantage driven REsource

allocation for Virtual Network Functions

Bernardo A. Huberman, Puneet Sharma

{bernardo.huberman,puneet.sharma}@hpe.com

Hewlett Packard Labs
1501 Page Mill Road
Palo Alto, CA 94304

6
1
0
2

 
r
a

 

M
2
1

 
 
]
I

N
.
s
c
[
 
 

1
v
4
3
8
3
0

.

3
0
6
1
:
v
i
X
r
a

ABSTRACT
As Communication Service Providers (CSPs) adopt the Net-
work Function Virtualization (NFV) paradigm they need to
transition their network function capacity to a virtualized
infrastructure with diﬀerent Network Functions running on
a set of heterogeneous servers. This abstract describes a
novel technique for allocating server resources (compute,
storage and network) for a given set of Virtual Network
Function (VNF) requirements. Our approach helps the telco
providers decide the most eﬀective way to run several VNFs
on servers with diﬀerent performance characteristics. Our
analysis of prior VNF performance characterization on het-
erogeneous/diﬀerent server resource allocations shows that
the ability to arbitrarily create many VNFs among diﬀerent
servers’ resource allocations leads to a comparative advan-
tage among servers. We propose a VNF resource alloca-
tion method called COMPARE that maximizes the total
throughput of the system by formulating this resource allo-
cation problem as a comparative advantage problem among
heterogeneous servers. There several applications for us-
ing the VNF resource allocation from COMPARE includ-
ing transitioning current Telco deployments to NFV based
solutions and providing initial VNF placement for Service
Function Chain (SFC) provisioning.

1.

INTRODUCTION

As Communication Service Providers (CSPs) adopt the
Network Function Virtualization (NFV) [1] paradigm they
need to transition their network function capacity to a virtu-
alized infrastructure with diﬀerent Network Functions run-
ning on a set of heterogeneous servers. Given a set of Vir-
tual Network Function (VNF) requirements (capacity and
resource), one of the important problems being faced by the
telco providers is to decide the most eﬀective way to run
several VNFs on servers with diﬀerent performance charac-
teristics. Eﬃcient resource allocation of infrastructure re-
sources to meet VNF capacity requirements is of utmost
importance if operators are to extract the promised NFV
beneﬁts in terms of capital and operational expenses.

Before discussing the problem of VNF resource alloca-
tion on a set of heterogeneous servers, we want to high-
light that prior studies of VNF performance characterization
on heterogeneous/diﬀerent server resource allocations show
that diﬀerent servers exhibit varying capacity (maximum
throughput) for diﬀerent Virtual Network Functions [2]. For

instance, Figure 1 shows the packet processing capacity of
three heterogeneous server conﬁgurations when running two
intrusion detection system (IDS) VNFs, namely, Snort and
Suricata. We used NFV-VITAL [2] tool framework to cap-
ture VNF capacity on three diﬀerent server conﬁgurations.
In order to emulate heterogeneous servers we artiﬁcially ad-
justed the CPU frequency to three diﬀerent values. This
was done using cpufreq-set tool that is available as part of
cpufrequtils package [12]. Figure 1 shows that there is not
only large variability in terms of VNF capacity on diﬀer-
ent server conﬁgurations but also some server conﬁgurations
have absolute advantage in terms VNF performance. Our
experiments indicate that such behavior is due to the dif-
ference in how diﬀerent VNFs use various resources for per-
forming the network function. This is a function of both the
network function as well its implementation.
In this par-
ticular case both Snort and Suricata are IDS VNFs but are
implemented diﬀerently.

Such performance and capacity variations of VNF de-
ployment within heterogeneous resources can be expressed
in terms of a absolute advantage, where a ﬁrst resource
(server) conﬁguration has higher capacity for a particular
VNF than the second resource (server) conﬁguration for the
same VNF. We point out that most prior resource alloca-
tion approaches leverage this absolute advantage in allocat-
ing computational resources to diﬀerent VNFs. In general,
VNF resource allocation problem has been modeled as an
optimization problem. For instance, the VNF orchestration
problem is considered in [3]) that attempts to incorporate
multiple optimization objectives such as VNF deployment
costs, operating costs, penalties for service level agreement
violations, and resource fragmentation costs. There are sev-
eral other proposals for VNF placement and resource allo-
cation problems that rely on similar optimization problem
formulations. However, given the high computation com-
plexity of such problems, these proposals have to invariably
rely on heuristics based approaches for VNF resource allo-
cation.

In this paper we propose a novel approach for VNF re-
source allocation that exploits instead the economic princi-
ple of comparative advantage [5]. We decribe the basics of
comparative advantage in next section. As we show later in
the paper, leveraging comparative advantage not only max-
imizes the total throughput of the system among hetero-
geneous servers, but also achieves near optimal allocation
of server resources to diﬀerent VNFs to meet the speciﬁed

Figure 1: VNF Performance Variation on Heterogeneous Server Conﬁgs

requirements.

Before describing our VNF resource allocation system, we
discuss the basics of Comparative Advantage, which orig-
inated in the ﬁeld of Economics in Section 2. We then
present the architecture of our COMPARE system in Sec-
tion 3, followed by the description of our VNF resource allo-
cation mechanism and its optimality in Section 4. Section 5
illustrates our methodology for resource allocation with a
simple example of two VNFs and two server conﬁgurations.
We then discuss the operation of the COMPARE system
in Section 6. Concluding remarks and future work are pre-
sented in Section 7

2. COMPARATIVE ADVANTAGE BASICS
In this section we discuss the basics of the comparative
advantage principle in terms of VNF performance with het-
erogeneous server/resource allocations. Consider the case of
having two virtual network functions, which we call V N F1
and V N F2, and two server conﬁgurations, machine1 and
machine2 where they can be implemented and deployed. We
say that machine1 has an absolute advantage over machine2
in one VNF if the capacity (or maximum throughput, e.g.
the number of packets processed per unit time) of machine1,
is higher than the capacity of running that same VNF in
machine2.

A more careful capacity analysis of such a resource alloca-
tion process, shows however than in many cases machine2
should only run the VNF in which it has a comparative ad-
vantage to machine1. We say that machine2 has a compar-
ative advantage over machine1 in executing a given VNF
if the relative throughput of machine2 while running that
VNF over the other is higher than the relative throughput
from running it in machine1.

This result can at times seem paradoxical, for it leads to
situations whereby although machine2 can run V N F1 twice
more eﬀectively than V N F2, it should only run V N F2 in
order to maximize the total system throughput.

In what follows we consider the problem of resource alloca-
tion when running multiple VNFs on a set of heterogeneous
servers taking into account their varying processing capacity
in terms of various VNFs. Given a set of Virtual Network
Function (VNF) requirements (capacity and resource), we
solve the problem of deciding the most eﬀective way to run
several VNFs on servers with diﬀerent performance char-
acteristics. Our system, called Compare(COMParative Ad-
vantage REsource allocation), determines the optimal allo-
cation of computing resources to several VNF’s by charac-
terizing their comparative advantage.

3. COMPARE: SYSTEM DESCRIPTION

Figure 2: Compare System Diagram

Our method for deploying multiple VNFs on a set of het-
erogeneous servers takes into account their varying process-
ing capacity in terms of the VNF requirements that one
wishes to deploy. Our system, called Compare(COMParative
Advantage REsource allocation), determines the optimal al-
location of computing resources to several VNF’s by char-
acterizing their comparative advantage. Figure 2 shows the

VNF Performance Knowledge BaseVNF, Resource/Machine ConfigurationVNF Instance CapacityCOMPARE Allocation EngineServer Set, VNF Set, Capacity RequirementsOptimized Resource Allocation (VNF to Server Mapping)VNF/InfrastructureFeasibility ConstraintsCOMPARE architecture, which consists of two main compo-
nents. The ﬁrst component is the VNF Performance Knowl-
edgebase that acts as a repository of the performance char-
acterization data for diﬀerent VNFs with diﬀerent resource
allocations (cpu, memory, virtualization conﬁguration etc.).
The second component is the COMPARE allocation engine,
that solves the resource allocation optimization problem in
terms of comparative advantage and plugs-in the appropri-
ate VNF performance data for feasible allocation options
based on available NFV Infrastructure. Besides taking the
Server Set and VNF Capacity requirements as input, the
operator can also provide various VNF and Infrastructure
feasibility constraints such as preferred virtual slicing sizes
etc.

The VNF Performance Knowledgebase is populated not
only with the VNF capacity numbers for complete allocation
of each available server but also the VNF capacity numbers
for various permitted partial allocations of each server to the
VNFs. This allows VNF Knowledgebase to capture various
virtual slicing overheads. VNF characterization frameworks
like NFV-VITAL [2] can be used for this purpose.

4. ALLOCATING RESOURCES TO VNF’S
4.1 The model

Consider a set of VNF’s running in diﬀerent machines,
which may be either virtual machines, actual cores of CPU
or some other form of feasible resource allocation. Each of
these machines can be used to run the VNFs in their entirety,
or virtually sliced to run several VNFs at any given time.
Let u be an n × m nonnegative matrix whose entry uij
represents the fraction of machine i is allocated to a given
VNF j. For example,the machine might perform n many
VNFs. This fraction can be either in absolute value or a
relative one. Let U be the feasible allocation set.This fea-
sible allocation set is determined based on the server char-
acteristics, available virtualization conﬁgurations and VNF
implementations. It must be noted that the feasible alloca-
tions are made available to the system based on operator’s
choice and considerations. If resource allocation mechanism
allocates a portion uij of its i’th resources (e.g. processing
power) to execute one VNF j, the feasible allocation set is
then represented as:

tion 2 that in this section, we assume the overhead associ-
ated with virtual slicing of server resources to be zero. While
this allows us to provide a clean proof for optimality of com-
parative advantage based allocation, we later demonstrate
that non-zero virtualization overhead does not invalidate the
optimality of our solution.

What our approach does is to attempt to optimize the sys-
tem’s utility. The utility function can be deﬁned in diﬀerent
ways depending on operators preferences. For instance, the
operator’s utility function can be expressed as the gain ob-
tained by the revenue generated by running a given set of
VNFs minus its infrastructure costs:

V = g(x) − c(u).

(3)

In situations where the cost is a constant one can write
V = g(x), where g is a pay-oﬀ function which is strictly
increasing in x.

We also make a technical assumption that g satisﬁes the

Inada conditions:

lim
xj→0

∂g(x)
∂xj

= ∞ for all j = 1, . . . , m.

(4)

Thus the our approach seeks to solve the following opti-

mization problem:

max g(x)

s.t. u ∈ U.

(5)

4.2 Leveraging comparative advantage

In this section we describe how to derive the resource allo-
cation for a given set of VNFs and infrastructure resources.
We begin using comparative advantage for the simple case
of allocating two VNFs to two machines.
4.2.1
Two machines and two VNFs
Let us start with the simplest case: there are only two
machines available and two VNFs (m = n = 2). The ob-
jective is to maximize the overall system utility which is a
function of the total number of packets processed in a given
time as described earlier, or equivalently

max g(x1, x2) = g(b11u11 + b21u21, b12u12 + b22u22)
s.t.

u ≥ 0, u11 + u12 ≤ 1, u21 + u22 ≤ 1.

(6)
We say that machine1 has comparative advantage for run-

(cid:40)

(cid:88)

(cid:41)

U =

(uij)n×m : uij ≥ 0,

uij ≤ 1

.

(1)

ning V N F1 if

j

Let x be a non-negative m-vector whose i’th component
xi measures the number of packets that are processed in
a given time. Note that while packets processed per unit
time is one of the metrics to measure VNF performance,
our approach can work with other performance/throughput
metrics as well.

xj = b1ju1j + ··· + bnjunj,

j = 1, . . . , m,

(2)

.

Thus bij measures the eﬀectiveness of machine i at run-
ning VNF j, which is again measured in terms of the number
of packets processed per unit time. It is clear from Equa-

b11
b21

>

b12
b22

.

(7)

Clearly, under this deﬁnition machine2 has a comparative
advantage over machine1 for running V N F2. This result
can seem to be counter-intutive in some cases. For example,
consider the case where b11 = 5, b12 = b21 = 2, and b22 =
1. Although machine2 can perform V N F1 two times more
eﬃciently than V N F2, it should only perform V N F2.

From Eq. (7) we can show that either u12 = 0 or u21 = 0 in
the optimal allocation. Suppose otherwise that both u12 > 0
and u21 > 0. Consider the following small change in u:

∆u11 = − b21
b11

∆u21 = −∆u12 =

b22
b12

∆u22 > 0.

(8)

(cid:19)

(cid:18) b11

b21

When the change is small we can keep u12 > 0 and u21 >
0. The value of g will not be aﬀected since x1 and x2 remain
unchanged. It is easy to check that while the ﬁrst constraint
in Eq. (6) is binding after the change, the second constraint
cannot be satisﬁed, i.e.:

∆u21 + ∆u22 = − b22
b12

− b12
b22

∆u12 < 0.

(9)

Thus one can increase both x1 and x2 without violating
the constraints, but doing so will cause an increase in g and
contradict optimality. Therefore, it cannot be that both
u12 > 0 and u21 > 0; one of them has to be zero.

When u12 = 0 machine1 performs only V N F1, so u11 > 0.
It follows from the Inada condition that V N F2 has to be
performed by machine2, because the proﬁt margin at x2 = 0
is inﬁnity. Thus u22 > 0. When u21 = 0 a similar argument
leads to the same conclusion, i.e. u11 > 0 and u22 > 0.
This means that if a machine has comparative advantage
in performing a given VNF then it should always run that
VNF (it may or may not run the other VNF). This depends
on the capacity requirements of the operator for each VNF.

We list without proof the optimal solution for three pos-

sible cases, neglecting degeneracy:

Case 1. b11
b21

u11 =

b11
b12

> 1.

> b12
b22
b12 + b22

2

,

u12 =

b12 − b22

2

,

u21 = 0,

u22 = b22.

(10)

Again, our result says that if machine1 has absolute ad-

vantage over machine2 in both VNF functions, then machine2
should only perform the function in which it has compara-
tive advantage. This result can be counter intuitive and per-
plexing in some cases. For example, consider the case where
b11 = 5, b12 = b21 = 2, and b22 = 1. Although machine2
can execute V N F1 two times more eﬀectively than V N F2,
it should only execute V N F2.
Case 2. 1 > b11
b21

> b12
b22

.

b21 − b11

b11 + b21

b22
b21

u11 = b11,

u12 = 0,

u21 =

,

u22 =

2
(11)
It can be noted from above equation that this is similar

2

to Case 1.

Case 3. b11
b21

> 1 > b12
b22

.

u11 = b11,

u12 = u21 = 0,

u22 = b22.

(12)

In other words, both machines1,2 should specialize if and
only if each machine has absolute advantage in executing
one particular VNF.
4.2.2 The comparative advantage generalization
The result of Section 4.2.1 can be generalized to the case of
more than two machines and more than two VNF functions.
Assume that

for machines i1, i2 and VNF’s j1, j2. In this cae, it follows

that one of ui1j2 and ui2j1 must be zero.
4.2.3 Two machines and m VNFs
Using the above generalization let us now consider the
case of allocating m VNFs on two machines. Without loss
of generality we can order the machines by comparative ad-
vantage, so that machine1 has comparative advantage in
performing functions with smaller labels:

b11
b21

> ··· >

b1m
b2m

(14)
By the comparative advantage generalization, for any 1 ≤
j < k ≤ m it must be that either u2j = 0 or u1k = 0.
Therefore there must exist some J such that

.

u1j > 0,
u1j = 0,

u2j = 0 for 1 ≤ j < J;
u2j > 0 for J < j ≤ m.

(15)

In words, machine1 should execute functions (VNFs) 1, . . . , J−

1 and possibly J, and machine2 should perform functions
J + 1, . . . , m and possibly J. Once again, it must be noted
that allocation thresholds are determined by operator’s spec-
iﬁcation of required capacity for each VNF.

4.2.4 n machines and two VNF functions
Once again we label the machines in decreasing order of

their comparative advantage:

b11
b12

> ··· >

bn1
bn2

.

(16)

ui1 > 0,
ui1 = 0,

Like before, the solution has a simple form
ui2 = 0 for 1 ≤ i < I;
ui2 > 0 for I < i ≤ n.

(17)
In words, machines 1, . . . , I − 1 should execute V N F1 and
machines I +1, . . . , n should execute V N F2. Machine I may
perform both functions.

From the comparative advantage generalization, the opti-

mal machine allocations have the simple form

x1 = b11 + ··· bI−1,1 + θbI1,
x2 = (1 − θ)bI2 + bI+1,2 + ··· + bn2,

(18)

(19)

.

where 0 ≤ θ < 1.
Ignoring degeneracy for the moment
(i.e. assuming that 0 < θ < 1), the optimal θ must satisfy
the ﬁrst order condition

∂ log g(x)

∂θ

=

α
x1

or

bI1 − 1 − α

x2

bI2 = 0,

(20)

α bI1

(1 − α)bI2

=

b11 + ··· + bI−1,1 + θbI1

(1 − θ)bI2 + bI+1,2 + ··· + bn2

.

(21)

This equation has a solution since the left side decreases

with I and the right side increases with I.

If we deﬁne two shadow prices

bi1j1
bi2j1

>

bi1j2
bi2j2

(13)

p1 =

∂ log g(x)

∂x1

=

α
x1

,

p2 =

∂ log g(x)

∂x2

1 − α
x2

,

=

(22)

Figure 3: Resource allocation for two VNF’s among two machines

Eq. (20) can be also written as p1bI1 = p2bI2, so machine I
is indiﬀerent to performing V N F1 or V N F2.

Note that in the general case one can no longer sort the
machines or functions by comparative advantage, and has
to solve the full optimization problem. The comparative
advantage characterization still holds though.

5. COMPARE ILLUSTRATION

In the earlier section we presented analytical proof of the
optimality of COMPARE’s comparative advantage based re-
source allocation approach.

Figure 3 illustrates the COMPARE resource allocation
mechanism with a simple example of two machines and two
VNFs. Machine 1 can process 21Kpps of VNF(1) and 35Kpps
of VNF(2). Similarly, Machine 2 can process only 6Kpps of
VNF(1) and 30Kpps of VNF(2). Assuming zero virtual slic-
ing overhead the packet processing capacity for partial allo-
cation of machine resources to a VNF can be represented by
joining the two VNF numbers for 100% allocation of the ma-
chine. It can be seen from the ﬁgure that evenly distribut-
ing both the machine resources to the two VNFs can only
process total of 45Kpps while comparative advantage based
allocation can process total of 51Kpps.
It is evident, the
comparative advantage based resource allocation achieves
higher overall system throughput than one based on abso-
lute advantage based allocation.

Based on our prior work of VNF characterization [2] we
have started building VNF characterization Knowledgebase
for various VNFs as shown in Figure 2. We are collecting
characterization information for diﬀerent IDS VNFs such as
Snort [10], and Suricata [11] as well as IMS VNF like Clear-
water [9] etc. Preliminary performance characterization of
IDS VNFs Snort and Suricata on two diﬀerent machine con-

ﬁgurations shown in Figure 1 exhibit results similar to those
of Figure 3.

We now look what the impact of considering virtual slicing
overhead on our VNF resource allocation mechanism. Fig-
ure 4 illustrates the performance characterization curve for
the two VNFs when the virtual slicing overhead is non-zero.
It is evident that, in this case, while virtual slicing over-
head can dversely impact the overall system throughput for
absolute advantage based allocation, system throughput for
comparative advantage allocation still performs better. As
we mentioned earlier, such virtual slicing overheads are cap-
ture in the VNF performance knowledgebase component of
COMPARE architecture.

6. COMPARE OPERATION

The COMPARE system relies on VNF characterization
information that captures the eﬀectiveness of available servers
(and feasible conﬁgurations) for implementing diﬀerent VNFs
of interest to the operator. VNF performance characteriza-
tion frameworks like NFV-VITAL [2] can be used to pop-
ulate the VNF Characterization Knowledgebase shown in
our system architecture diagram.
It must be noted that
system issues such as performance degradation due to vir-
tualization or performance impact of resource sharing are
captured appropriately by the VNF Knowledgebase. For a
given set of VNFs, available server resources and feasible
conﬁgurations, the COMPARE resource allocation engine
creates a comparative advantage based model by querying
VNF Knowledgebase for diﬀerent bij values for various fea-
sible conﬁgurations.

Once the model is parameterized,the COMPARE resource
allocation engine can sort machines such that lower-indexed
machines have comparative advantage in performing VNFs

VNF(1)21 K packets/sec6 K packets/secVNF(2)30 K packets/sec35 K packets/secMachine 1Machine 212 K packets/sec15 K packets/secTotal output:If both machines process both functions evenly, total output per sec is 12 k packets of VNF1 + 15 k packets of VNF2=27 k packets3 k packets of VNF1 + 15 k packets of VNF2= 18 k packetsSo total output is 45k packets.But if comparative advantage is used, total output is21 k packets of VN1 + 30 k packets of VNF2=51k packetsUniversity for carrying out the IDS VNF performance char-
acterization using NFV-VITAL framework.

8. REFERENCES
[1] ETSI, the European Telecommunications Standards

Institute, Network Functions Virtualisation
http://www.etsi.org/technologies-clusters/
technologies/nfv

[2] L. Cao, P. Sharma, S. Fahmy, V. Saxena.

NFV-VITAL: A Framework for Characterizing the
Performance of Virtual Network Functions. In
Proceeding of the 1st IEEE Conference on Network
Function Virtualization & Software Deﬁned Networks,
San Francisco, (2015)

[3] Md. Faizul Bari, Shihabur Rahman Chowdhury, Reaz

Ahmed, and Raouf Boutaba. On Orchestrating
Virtual Network Functions in NFV, Availible from
http://arxiv.org/pdf/1503.06377.pdf

[4] Stuart Clayman, Elisa Maini, Alex Galis, Antonio

Manzalini, and Nicola Mazzocca. The Dynamic
Placement of Virtual Network Functions. In
Proceedings 1st IEEE / IFIP International Workshop
on SDN Management and Orchestration, Poland May
2014.

[5] R. Dornbusch, S. Fischer, and P. A. Samuelson.

Comparative advantage, trade, and payments in a
Ricardian model with a continuum of goods. American
Economic Review, Vol. 67(5), pp. 823–39 (1977)

[6] J. D. C. Little and L. M. Lodish. A media planning

calculus. Operations Research, Vol. 17, pp. 1–35 (1969)

[7] S. Rosen. Substitution and division of labour.

Economica, Vol. 45, No. 179, pp. 235–250 (1978)

[8] V. Srinivasan. Decomposition of a multi-period media
scheduling model in terms of single period equivalents.
Management Science, Vol. 23, No. 4 (1976)

[9] Clearwater, http://www.projectclearwater.org
[10] Snort, http://www.snort.org
[11] Suricata, http://suricata-ids.org
[12] HowTo CpuFrequencyScaling https:

//wiki.debian.org/HowTo/CpuFrequencyScaling

[13] Freddy Chua, Julie Ward, Ying Zhang, Puneet

Sharma and Bernardo Huberman. Balancing Latency
and Resource Usage in VNF Placement. Internal
Communications.

Figure 4: Performance curve for VNFs to illustrate
Virtual Slicing Overhead of Machines

with smaller labels and thus provide optimal resource alloca-
tion. In the general case, COMPARE can be implemented
using various comparative advantage planners such as the
one described in [6].

Though the focus of this paper is on using COMPARE ar-
chitecture for VNF resource allocation for optimizing overall
system throughput, there are several other applications of
our mechanism. For instance, comparative advantage based
allocation can be used as heuristic for faster VNF place-
ment approaches for Service Function Chaining (SFC) that
consider end-to-end SFC latency [13]. Similar COMPARE
approach can be leveraged by operators for performing cost-
beneﬁt analysis of migrating their current network function
deployments to NFV based infrastructure.

7. CONCLUSION

In this paper we have shown how an approach based on
comparative advantage can lead to optimal allocation of
VNF’s among a set of heterogenous servers. We did so by
describing the basic idea of comparative advantage, a well
established principle in trade economics, and showed how it
leads to optimal allocation. Furthermore we described the
COMPARE architecture which does the actual deployment
of our approach. While existing approaches have taken the
seemingly obvious course of using absolute advantage to de-
cide on how to deploy VNFs, we showed how comparative
advantage is a much better solution, as it computes the op-
portunity cost of deployments in diﬀerent platforms.Given
the present trend towards virtualization of most network
functions, and the fact that they are deployment among
servvers with diﬀerent characteristics, it is crucial to decide
on optimal allocatins. The COMPARE approach oﬀers such
a solution.

Acknowledgements
The authors would like to express their thanks to our Hewlett
Packard Labs intern, Lianjie Cao, Ph.D. Student, Purdue

