Finding the Nucleoli of Large Cooperative
Games: A Disproof with Counter-Example

Holger I. MEINHARDT ∗

March 6, 2016

Nguyen and Thomas (2016) claimed that they have found a method to compute the nucle-
oli of games with more than 50 players using nested linear programs (LP). Unfortunately, this
claim is false. They incorrectly applied the indirect proof by “A∧ not B implies A∧ not A”
to conclude that “if A then B”is valid. In fact, they prove that a truth implies a falsehood.
As established by Meinhardt (2015a), this is a wrong statement. Therefore, instead of giving
a proof of their main Theorem 4b, they give a disproof. It comes as no surprise to us that
the ﬂow game example presented by these authors to support their arguments is obviously a
counter-example of their algorithm. We show that the computed solution by this algorithm
is neither the nucleolus nor a core element of the ﬂow game. Moreover, the stopping crite-
rion of all proposed methods is wrong, since it does not satisfy one of Kohlberg’s properties
(cf. Kohlberg (1971)). As a consequence, none of these algorithms is robust.

Keywords: Transferable Utility Game, Nucleolus, Flow Problem, Propositional Logic, Cir-
cular Reasoning (circulus in probando), Indirect Proof, Proof by Contradiction, Proof by Con-
traposition.

2010 Mathematics Subject Classiﬁcations: 03B05, 91A12, 91B24
JEL Classiﬁcations: C71

6
1
0
2

 
r
a

M
1

 

 
 
]
T
G
.
s
c
[
 
 

1
v
6
2
2
0
0

.

3
0
6
1
:
v
i
X
r
a

∗Holger I. Meinhardt, Institute of Operations Research, Karlsruhe Institute of Technology (KIT), Englerstr. 11, Building: 11.40,

D-76128 Karlsruhe. E-mail: Holger.Meinhardt@wiwi.uni-karlsruhe.de

Findingthenucleoli: ADisproofwithCounter-Example

1 INTRODUCTION

Nguyen and Thomas (2016) claimed that they have invented a method for the extremely challenging task
of computing the nucleoli of games with more than 50 players using nested linear programs (LP). Unfor-
tunately, their claim is false. They incorrectly applied the indirect proof for Theorem 4b by assuming the
premise A ∧ ¬B to derive a falsum ⊥, namely A ∧ ¬A, to conclude that ¬B ⇒ ¬A holds, and therefore,
they infer A ⇒ B is a valid statement. In fact, they prove that a truth implies a falsehood, which is a
wrong assertion implying that they gave for their main theorem a disproof. For more details about the
logical background, we refer the inclined reader to Meinhardt (2015a).

Notice that the statement if A ⇒ B and its contrapositive if ¬B ⇒ ¬A are logically equivalent
statements, which are also equivalent to the disjunction ¬A ∨ B. To prove the implication if A ⇒ B, we
can focus on the opposite ¬(A ⇒ B) ≡ ¬(¬A ∨ B) ≡ (A ∧ ¬B) in order to get from if A ⇒ B the
logical equivalent implication if A ∧ ¬B ⇒ B ∧ ¬B. This imposes a proof by contradiction, since B ∧ ¬B
is a falsum ⊥. However, if the starting point is a proof by contraposition, i.e., ¬B ⇒ ¬A, we obtain the
following equivalent statement A ∧ ¬B ⇒ A ∧ ¬A. It should be evident that this also imposes a proof by
contradiction.

To observe that Nguyen and Thomas have incorrectly applied the indirect proof, we rewrite the equiv-
alent relationship of (A ∧ ¬B ⇒ A ∧ ¬A) ≡ (A ⇒ B) more concisely as (φ ⇒ ⊥) ⇔ ¬φ. If we
now suppose as the authors that the premise φ is true, we know immediately that ¬φ must be false, and
therefore the statement φ ⇒ ⊥ must be false either, due to the above equivalence. But then we can only
infer that A ⇒ B is a falsehood, i.e., A 6⇒ B. In contrast, to get a valid statement from (φ ⇒ ⊥) ⇔ ¬φ
one has to set the premise φ to false to know that ¬φ is true, but due to the above equivalence φ ⇒ ⊥ must
be true as well, and from this we infer that A ⇒ B is a truth.

However, it is an impermissible conduct to assume that A ⇒ B is false, i.e., A ∧ ¬B holds in order
to derive a contradiction, say A ∧ ¬A, to ﬁnally deduce from this contradiction that A ∧ ¬B is false, and
that one has therefore proved A ⇒ B by the logical equivalence of A ∧ ¬B ⇒ A ∧ ¬A and A ⇒ B.
Doing so, means that we always get the desired result, and we could prove perverted results (see, for
instance, Example 2.1). Of course, this is a fallacy and one has disproved oneself, since one gets that
A ∧ ¬B ⇒ A ∧ ¬A is a falsehood conﬁrming that A ⇒ B is false as well. Obviously, this kind of
arguing is a circular reasoning (circulus in probando). Unfortunately, this is exactly the line of argument
used by Nguyen and Thomas. They have shown in their proof for Theorem 4b the exact opposite of what
had been intended to prove.

The remaining part of this note is organized as follows.

In Section 2 we present in a ﬁrst step a
short reminder of formal logic, before we discuss in more details the purported proof of Theorem 4b.
Establishing by the above logical arguments that the main result of their article is ﬂawed. After having
clariﬁed this issue, we turn to the ﬂow game example of Nguyen and Thomas (2016) to show that the
proposed solution by the authors is even not in the core of the game, and that it cannot be from this point
of view the nucleolus of the game. We close this note by some ﬁnal remarks in Section 3.

2 THE DISPROOF OF THEOREM 4B WITH COUNTER-EXAMPLE

In the sequel, we rely on the same notation and deﬁnitions as they can be found in Nguyen and Thomas
(2016). However, for the understanding of our arguments these are not really needed. Only some basics
from formal logic is needed, which we start to refresh in the next paragraph.

For presenting a reminder of propositional logic, we introduce two truth tables. A logical state-

1

Findingthenucleoli: ADisproofwithCounter-Example

ment/proposition is formed by the symbols A or B, which means that a statement A is true or false.
However, the inversion is formed by the negation of a proposition by using the logical term “not” denoted
by ¬. If A is a proposition, then ¬A is the negation of A verbalized as “not A” or “A is false”. The
effect of negation, conjunction, disjunction, and implication on the truth values of logical statements is
summarized by a so-called truth table. In this table, the capital letter T indicates a true proposition and F
indicates that it is false.

A B ¬B A ⇒ B ¬(A ⇒ B) A ⇐ B A ⇔ B A ∨ ¬B A ∧ B A ∨ B
F
F
T
T

T
F
T
T

T
F
T
F

F
T
T
T

T
F
F
T

T
F
T
T

F
T
F
T

T
T
F
T

F
F
F
T

F
F
T
F

A B ¬A ¬B ¬A ⇒ ¬B A ∨ ¬B ¬A ⇐ ¬B ¬A ∨ B A ∧ ¬B ¬A ⇔ ¬B
F
F
T
T

T
F
T
F

T
T
F
F

F
T
F
T

T
F
T
T

T
T
F
T

T
T
F
T

F
F
T
F

T
F
F
T

T
F
T
T

Two statements are indicated as logically equivalent through the symbol ≡. For instance, by the truth table
we realize that the two statements ¬A ⇐ ¬B and ¬A ∨ B are logically equivalent, which is formally
expressed by (¬A ⇐ ¬B) ≡ (¬A ∨ B). A falsum ⊥ is, for instance, the conjunction A ∧ ¬A whereas
a verum (tautology) ⊤ can be expressed, for instance, by the disjunction ¬A ∨ A. For more details
see Meinhardt (2015a).

To see that from a false conclusion a false implication follows, can be observed from an example taken

from an elementary course in mathematics, which we have reused from Meinhardt (2015a).

Example 2.1. Let m denote an arbitrary number, and let us “prove” the wrong implication that

if m2 is even (A), then m is odd (B),

while running a purported proof. In a ﬁrst step, we assume that A ∧ ¬B is valid. For this purpose, we
suppose that m is even (¬B) s.t. m = 2 k for some integer k, and assume that m2 is even too (A is
true), i.e., m2 = 2 q for some integer q, then we get that m2 = (2 k)2 = 4 k2 = 2 q. This implies
k = ±p(q/2), which is the desired contradiction. We conclude that m is odd (B). Hence, a valid
premise A ∧ ¬B implies something wrong (B ∧ ¬B). In the literature, it is a commonly held believe that
this is a true proposition. Assuming this, one would conclude that A ∧ ¬B is wrong, then the negation
of this expression, i.e., ¬A ∨ B is true. From which one would deduce that A ⇒ B is a valid statement.
This is certainly a fallacy, one incorrectly applied (φ ⇒ ⊥) ⇔ ¬φ. However, it should be obvious by the
discussion from the introduction that this gives in fact a disproof of A ⇒ B, thus we have A 6⇒ B.

We quote the main Theorem 4 from Nguyen and Thomas (2016) and discuss their proof in order to
observe how deﬁcient these authors have applied the indirect proof. We cite only the essential parts and
conclusions of the authors, and set their wrong arguments in italic and highlighted them by a red coloring.

Theorem 4. (Nguyen and Thomas (2016, pp. 1086-87)): Let (x, bǫ∗

k) be any optimal solu-

cases:

tion of ddLPk with the tight set bτ (x). Then solving FBOS2 will lead to one of two
(a) If x is not an optimal solution (. . . ) smaller tight set, i.e., |bτk(y∗)| < |bτk(x∗)|.

2

Findingthenucleoli: ADisproofwithCounter-Example

(b) If x is an optimal solution of FBOS2, then x is also an optimal solution of

ddLPk with the minimal tight set, i.e., bτk(x) = bτ ∗

k .

k(x) = {z(1), z(2), . . . , z(r)}.

Proof. Let R∗
(a) Notice that x,bx∗

k are feasible (. . . ) compared to x in dLPk.

(b) Suppose x is an optimal solution of FBOS2. We will prove x is also an optimal solution

of ddLPk with the minimal tight set. Suppose, as a contradiction, that there exists another
optimal solution y∗ of ddLPk with |bτk(y∗)| < |bτk(x∗)|. This means there exists at least

(. . . ). We can choose α0 > 0 and small enough such that αi ≥ 0, ∀ i. Thus,

ct(x − y∗) =

rX
|

i=1

αi(z(i))t(x − y∗)
}

{z

≤0

+ α0(z(0))t(x − y∗)
|
}

{z

<0

< 0.

This means x is not an optimal solution of FBOS2 and so there is a contradiction. The
proof of the theorem is complete. (Nguyen and Thomas (2016, p. 1087))

We give now the reasons why Theorem 4b cannot be correct. For doing so, let us restate the assertion of
Theorem 4b by it essential parts:

They started by assuming that x is an optimal solution of FBOS2, hence (A) is true. In the next step,

If x is an optimal solution of FBOS2 (A is true), then x is also an optimal solution of ddLPk (B is true).
they assume that there exists an optimal solution y∗ of ddLPk. Thus, they set (¬B) by supposition. Through

imposition of the assumptions the authors have set the premise A ∧ ¬B as valid. The authors proceed to
derive the contradiction ct(x − y∗) < 0. From this outcome, they conclude that x is not an optimal
solution of FBOS2 in contrast to their initial assumption. They get that ¬A must be satisﬁed. This is their
desired contradiction and they conclude that A ⇒ B must hold. Of course, this is a fallacy.

By the consideration from above, we realize that Nguyen and Thomas have shown that a valid premise
A ∧ ¬B implies the falsum A ∧ ¬A. The authors have established that a truth implies a falsehood, which
is a wrong statement. One incorrectly applied (φ ⇒ ⊥) ⇔ ¬φ. This is due to the fact that they have set
φ := (A ∧ ¬B) as valid, from which follows that (A ⇒ B) =: ¬φ must be false either, and therefore
(φ ⇒ ⊥) must be false as well by equivalence of (φ ⇒ ⊥) ⇔ ¬φ. By these arguments, we observe that
(φ ⇒ ⊥) cannot be a truth in contrast to their implicit assumption. Hence, we have A 6⇒ B, and the
authors have imposed a circular reasoning or a circulus in probando.

Remember that the implications A ∧ ¬B ⇒ A ∧ ¬A or A ∧ ¬B ⇒ B ∧ ¬B are logically equivalent
to A ⇒ B. Hence, if one has shown that such an implication or every other implication that should be
equivalent to A ⇒ B produces a wrong proposition, one has to conclude that A ⇒ B must be invalid too.
In this case, one cannot deduce that A ∧ ¬B is false, this is due to that A ∧ ¬B was assumed to be valid.
Applying then that A ∧ ¬B is false in order to infer from this, that its negation A ∨ ¬B as well as the
implication A ⇒ B must be valid, is, by the above consideration, a fallacy.

Now, let us turn to the ﬂow game example from which Nguyen and Thomas want to demonstrate the
strength of their Algorithm 3 to successfully ﬁnd the nucleolus. They introduce a ﬂow game problem with
6-nodes and 10-persons. The persons are numbered at the edges in accordance with fi in the Figure 1,

3

Findingthenucleoli: ADisproofwithCounter-Example

which we have reproduced from their article. The capacities of the edges are c1 = c9 = 3, ci = 1, ∀i ∈
{3, . . . , 8} and c2 = c10 = 2. Theses values can be found at the second position at the labeling indicating
in the ﬁrst place the owner of an edge.

f1,3

s

f2,2

f4,1

f5,1

f3,1

f6,1

f7,1

1

2

f9,3

f8,1

t

f10,2

3

4

Figure 1: Flow Problem of 10 persons and 6 nodes

The optimal solution found after some iterations by their Algorithm 3 is given by the authors as x∗

2 =
{1, 0.2, 0, 0.2, 0.4, 0.4, 0.6, 0, 1, 0.2} (cf. Nguyen and Thomas (2016, pp. 1088-89)).
In addition, they
claim that the corresponding minimal set is tight, from which they conclude that the solution must be the
nucleolus of the coalitional game arising from the ﬂow problem of Figure 1.

In order to reproduce their solution related to the nucleolus, we have written a small MATLAB program
to compute the corresponding transferable utility game from the above ﬂow problem.1 For a cross-check
that our ﬂow game is correctly speciﬁed, we relied on the minimal cuts. From Figure 1, we observe that
there are only 2 minimal cuts: namely f4, f5, f6, f7 and f4, f6, f10 having both a ﬂow of 4. A removal of
these cuts from the graph prevented a ﬂow of positive magnitude from the source c to the sink t, which we
observed. Moreover, the capacities of these minimal cuts are core elements.

From this game, since ﬂow games are totally balanced, we can check whether the proposed solution
is at least a core element before we go a step further to verify one of Kohlberg’s properties (cf. Kohlberg
(1971)). For this purpose, we look on blocking coalitions. By Figure 1, we observe that a blocking
coalition is {1, 4, 5, 8, 10}.2 This is due to that the maximal ﬂow the sub-coalition {1, 4, 5, 8, 10} can
generate is 2, and from this observation, we see that v({1, 4, 5, 8, 10}) − x∗
2({1, 4, 5, 8, 10}) = 2 − 1.8 =
2 is not a core element, but then it cannot be the
0.2 > 0 must hold. Therefore, the proposed solution x∗
nucleolus. In accordance with the fact that the ﬂow game is zero-monotonic, we can even conclude that
the solution is neither the pre-nucleolus nor a pre-kernel nor a kernel point. Hence, to conclude solely
from the full rank condition of bH∗
3 that one has found the nucleolus is a fallacy, one also has to check that
1This MATLAB program computes from an arbitrary ﬂow problem the associated TU game, which we can make available upon

request.

2In total, we observe 10 blocking coalitions.

4

the induced collection of coalitions from bH∗
3 is balanced (cf. Kohlberg (1971)). This means, in addition,
that the stopping criterion of all Algorithms is false, and the proof of Theorem 2 is not complete. Rather
2, the nucleolus ν of the game is {11/15, 1/5, 0, 1/3, 1/5, 3/5, 1/3, 0, 8/15, 16/15}.3 This solution
than x∗
satisﬁes efﬁciency v(N ) = x(N ) = 4 as well as Kohlberg’s property II, it is in addition an element of
the kernel as well as a core element, hence exemplarily we have v({1, 4, 5, 8, 10}) − ν({1, 4, 5, 8, 10}) =
2 − 7/3 = −1/3 < 0. To check it for all coalitions, we refer the reader to Meinhardt (2015b).4 We
conclude that the proposed solution of Nguyen and Thomas is not the nucleolus of their ﬂow game, and
that Algorithm 3 neither ﬁnds the nucleoli of small games nor that it can be used to calculate nucleoli for
large games with more than 50 players.

Finally, in their computer experiment involving large weighted voting and coalitional skill games, the
authors have not presented any evidence that the computed solutions satisfy one of Kohlberg’s properties.
This provides further evidence that Algorithm 3 is not applicable in the computation of the nucleoli of
cooperative games.

3 CONCLUDING REMARKS

We have found in the article of Nguyen and Thomas (2016) severe deﬁciencies so that the reported results
become invalid. First of all, the proof of their main Theorem 4b is logically ﬂawed, because of an incorrect
application of the indirect proof. Secondly, the presented example that should demonstrate the strength of
their algorithm is in fact a counter-example. Finally, the stopping criterion of all proposed methods does
not take into account one of Kohlberg’s properties. Therefore, the authors have not imposed the correct
stopping criterion. All of this invalidates the results of the article.

REFERENCES

E. Kohlberg. On the Nucleolus of a Characteristic Function Game. SIAM Journal of Applied Mathematics, 20:62–66, 1971.

H. I. Meinhardt. The Matlab Game Theory Toolbox MatTuGames Version 0.4: An Introduction, Basics, and Examples. Technical

report, Karlsruhe Institute of Technology (KIT), 2013.

H. I. Meinhardt. The Incorrect Usage of Propositional Logic in Game Theory: The Case of Disproving Oneself. ArXiv e-prints,

abs/1509.05883, 2015a. URL http://arxiv.org/abs/1509.05883.

H.

I. Meinhardt.

MatTuGames:

ory.
http://www.mathworks.com/matlabcentral/fileexchange/35933-mattugames. Version 0.8.

Technology

Karlsruhe

Institute

of

2015b.

A Matlab
(KIT),

Toolbox
Karlsruhe,

for
Germany,

Cooperative

Game

The-
URL

Tri-Dung Nguyen and Lyn Thomas.

tional Research, 248(3):1078 – 1092, 2016.
http://www.sciencedirect.com/science/article/pii/S0377221715007547.

Finding the nucleoli of large cooperative games.

European Journal of Opera-
ISSN 0377-2217. doi: http://dx.doi.org/10.1016/j.ejor.2015.08.017. URL

3Computed solution conﬁrmed as the nucleolus of the ﬂow game from the authors by private conversation.
4Apart from checking that an imputation belongs to the core, one can also verify by this MATLAB toolbox, for instance, if
Kohlberg’s property II or the (pre-)kernel properties are satisﬁed. The documentation of the toolbox is given by Meinhardt
(2013) and ships with the toolbox.

5

