6
1
0
2

 
r
a

M
3

 

 
 
]

.

A
N
h
t
a
m

[
 
 

1
v
4
8
1
1
0

.

3
0
6
1
:
v
i
X
r
a

INVARIANT DOMAINS PRESERVING ALE

APPROXIMATION OF HYPERBOLIC SYSTEMS WITH

CONTINUOUS FINITE ELEMENTS ∗

JEAN-LUC GUERMOND† , BOJAN POPOV† , LAURA SAAVEDRA‡ , AND YONG YANG†

Abstract. A conservative invariant domain preserving Arbitrary Lagrangian Eulerian method
for solving nonlinear hyperbolic systems is introduced. The method is explicit in time, works with
continuous ﬁnite elements and is ﬁrst-order accurate in space. One originality of the present work is
that the artiﬁcial viscosity is unambiguously deﬁned irrespective of the mesh geometry/anisotropy
and does not depend on any ad hoc parameter. The proposed method is meant to be a stepping stone
for the construction of higher-order methods in space by using appropriate limitation techniques.

Key words. Conservation equations, hyperbolic systems, Arbitrary Lagrangian Eulerian, mov-

ing schemes, invariant domain, ﬁrst-order method, ﬁnite element method.

AMS subject classiﬁcations. 65M60, 65M10, 65M15, 35L65

1. Introduction. Consider the following hyperbolic system in conservative form

(cid:40)

(1.1)

∂tu + ∇·f (u) = 0,
u(x, 0) = u0(x),

for (x, t) ∈ Rd×R+.
for x ∈ Rd,

where the dependent variable u is Rm-valued and the ﬂux f is Rm×d-valued. The
objective of this paper is to investigate an approximation technique for solving (1.1)
using an Arbitrary Lagrangian Eulerian (ALE) formulation with continuous ﬁnite
elements and explicit time stepping on non-uniform meshes in any space dimension.
The interest for ﬁnite elements in the context of compressible Lagrangian hy-
drodynamics has been recently revived by the work of Dobrev et al. [13], where the
authors have demonstrated that high-order ﬁnite elements have good properties in
terms of geometry representation, symmetry preservation, resolution of shock fronts
and high-order convergence rate for smooth solutions. The ﬁnite element formalism
has been combined with staggered grid hydrodynamics methods in Barlow [3], Scov-
azzi et al. [32] and with cell-centered hydrodynamics methods in Vilar et al. [35] in
the form of a Discontinuous Galerkin scheme. One common factor of all these pa-
pers is that the stabilization is done by introducing some artiﬁcial viscosity to control
post-shock oscillations, and high-order convergence in space is achieved by restricting
the diﬀusion to be active only in the singular regions of the solution. This can be
done in many ways, for instance by measuring smoothness like in the ENO/WENO
literature like in Cheng and Shu [10] or by using entropies like in the entropy viscosity
methodology of Guermond et al. [21]. A detailed list of requirements and speciﬁc
artiﬁcial viscosity expressions for Lagrangian hydrodynamics have been proposed by
Caramana et al. [6], Caramana and Loub`ere [7], Shashkov and Campbell [33], Kolev

∗This material is based upon work supported in part by the National Science Foundation grants
DMS-1217262, by the Air Force Oﬃce of Scientiﬁc Research, USAF, under grant/contract number
FA99550-12-0358, and by the Army Research Oﬃce under grant/contract number W911NF-15-1-
0517. Draft version, March 4, 2016
†Department of Mathematics, Texas A&M University 3368 TAMU, College Station, TX 77843,
‡Departamento Fundamentos Matem´aticos, Universidad Polit´ecnica de Madrid, E.T.S.I.

USA.

Aeron´auticos, 28040 Madrid, Spain

1

2

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

and Rieben [25], Lipnikov and Shashkov [30]. The artiﬁcial viscosity can also be im-
plicitly introduced by using Godunov type or cell-centered type methods based on
Riemann solvers, see e.g., Boscheri and Dumbser [4], Carr´e et al. [8].

In the present paper we revisit the artiﬁcial viscosity problem for general hyper-
bolic systems like (1.1) using an Arbitrary Lagrangian Eulerian (ALE) formulation
and explicit time stepping. The originality of the present work is that (i) The approx-
imation in space is done with continuous ﬁnite elements of arbitrary order; (ii) The
local shape functions can be linear Lagrange elements, Bernstein-Bezier elements of
any order or any other nonnegative functions (not necessarily polynomials) that have
the partition of unity property; (iii) The ﬁnite element meshes considered are non-
uniform, curvilinear and the space dimension is arbitrary; (iv) The artiﬁcial viscosity
is unambiguously deﬁned irrespective of the mesh geometry/anisotropy, does not de-
pend on any ad hoc parameter, contrary to what has been previously done in the
ﬁnite element literature, and leads to precise invariant domain properties and entropy
inequalities; (v) The methods works for any (reasonable in the sense of §2) hyperbolic
system. Although entirely based on continuous ﬁnite elements, our work is deeply
rooted in the work of Lax [28] and Hoﬀ [24], and in some sense mimics well estab-
lished schemes from the ﬁnite volume literature, e.g., Guillard and Farhat [22], Farhat
et al. [14] or the discontinuous Galerkin literature, e.g., Vilar et al. [35]. The proposed
method is meant to be a stepping stone for the construction of higher-order methods
in space by using, for instance, the ﬂux transport correction methodology `a la Boris-
Book-Zalesak, or any generalization thereof, to implement limitation. None of these
generalizations are discussed in the paper. The sole objective of the present work is
to give a ﬁrm, undisputable, theoretical footing to the ﬁrst-order, invariant-domain
preserving, method.
The paper is organized as follows. We introduce some notation and recall im-
portant properties about the one-dimensional Riemann problem in §2. We introduce
notation relative to mesh motion and Lagrangian mappings in §3. The results estab-
lished in §2 and §3 are standard and will be invoked in §4 and §5. The reader who is
familiar with these notions is invited to go directly to §4. We describe in §4 two ver-
sions of an ALE algorithm to approximate the solution of (1.1). The ﬁrst algorithm,
henceforth referred to as version 1, is composed of the steps (4.9)-(4.10)-(4.11)-(4.15).
The second algorithm, i.e., version 2, is composed of the steps (4.32)-(4.33)-(4.34)-
(4.35)-(4.15). The key diﬀerence between these two algorithms is the way the mass
carried by the shape functions is updated (compare (4.10) and (4.34)). Only version 1
can be easily made high-order in time by means of the strong stability preserving tech-
nology (see Ferracina and Spijker [15], Higueras [23], Gottlieb et al. [18] for details on
SSP techniques). It is proved in §5 that under the appropriate CFL condition both
algorithms are invariant domain preserving, conservative and satisfy a local entropy
inequality for any admissible entropy pair. The main results of this section are Theo-
rem 5.2 and Theorem 5.6. The SSP RK3 extension of scheme 1 is tested numerically
in §6 on scalar conservation equations and on the compressible Euler equations using
two diﬀerent ﬁnite element implementations of the method. In all the cases the ALE
velocity is ad hoc and no particular eﬀort has been made to optimize this quantity.
The purpose of this paper is not to design an optimal ALE velocity but to propose
an algorithm that is conservative and invariant domain preserving for any reasonable
ALE velocity.

2. Riemann problem and invariant domain. We recall in this section ele-

mentary properties of Riemann problems that will be used in the paper.

Invariant domain preserving ALE

3

2.1. Notation and boundary conditions. In this paper the dependent vari-
able u in (1.1) is considered as a column vector u = (u1, . . . , um)T. The ﬂux is a
matrix with entries fij(u), 1 ≤ i ≤ m, 1 ≤ j ≤ d. We denote fi the row vec-
tor (fi1, . . . , fid), i ∈ {1:m}. We denote by ∇·f the column vector with entries
1≤j≤d ∂xj fij. For any n = (n1 . . . , nd)T ∈ Rd, we denote f (u)·n the
1≤l≤d nlfil(u), where i ∈ {1:m}. Given two
vector ﬁelds, say u ∈ Rm and v ∈ Rd, we deﬁne u ⊗ v to be the m×d matrix with
entries uivj, i ∈ {1: m}, j ∈ {1:d}. We also deﬁne ∇·(u ⊗ v) to be the column vector
j=1 ∂j(uivj). The unit sphere in Rd centered at 0 is

(∇·f )i = (cid:80)
column vector with entries fi(u)·n =(cid:80)
with entries ∇·(u ⊗ v)i = (cid:80)d

denoted by Sd−1(0, 1).

To simplify questions regarding boundary conditions, we assume that the initial
data is constant outside a compact set and we solve the Cauchy problem in Rd or we
use periodic boundary conditions.

2.2. One-dimensional Riemann problem. We are not going to try to deﬁne
weak solutions to (1.1), but instead we assume that there is a clear notion for the
solution of the Riemann problem. To stay general we introduce a generic hyperbolic
ﬂux h and we say that (η, q) is an entropy pair associated with the ﬂux h if η is
convex and the following identity holds:

(2.1)

∂vk (q(v)·n) =

∂vi η(v)∂vk (hi(v)·n),

∀k ∈ {1:m}, ∀n ∈ Sd−1(0, 1).

We refer to Chen [9, §2] for more details on convex entropies and symmetrization. In
the rest of the paper we assume that there exists a nonempty admissible set Ah ⊂ Rm
such that the following one-dimensional Riemann problem

m(cid:88)

i=1

(cid:40)

uL,
uR,

if x < 0
if x > 0,

(2.2)

∂tu + ∂x(h(u)·n) = 0,

(x, t) ∈ R×R+,

u(x, 0) =

has a unique entropy satisfying solution for any pair of states (uL, uR) ∈ Ah×Ah and
any unit vector n ∈ Sd−1(0, 1). We henceforth denote the solution to this problem
by u(h, n, uL, uR). We also say that u is an entropy satisfying solution of (2.2) if
the following holds in the distribution sense

(2.3)

∂tη(u) + ∂x(q(u)·n) ≤ 0.

for any entropy pair (η, q).

It is unrealistic to expect a general theory of the Riemann problem (2.2) for arbi-
trary nonlinear hyperbolic systems with large data, we henceforth make the following
assumption:

(2.4)

The unique solution of (2.2) has a ﬁnite speed of
propagation for any n and any (uL, uR) ∈ Ah×Ah, i.e.,
there are λL(h, n, uL, uR) ≤ λR(h, n, uL, uR) such

u(x, t) =

uL,
uR,

if x ≤ tλL(h, n, uL, uR)
if x ≥ tλR(h, n, uL, uR).

(cid:40)

This assumption is known to hold for small data when the system is strictly hyperbolic
with smooth ﬂux and all the characteristic ﬁelds are either genuinely nonlinear or

4

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

linearly degenerate. More precisely there exists δ > 0 such that the Riemann problem
has a unique self-similar weak solution in Lax’s form for any initial data such that
(cid:107)uL − uR(cid:107)(cid:96)2 ≤ δ, see Lax [29] and Bressan [5, Thm 5.3]. In particular there are 2m
numbers λ−
m, deﬁning up to 2m + 1 sectors (some
could be empty) in the (x, t) plane:
∈ (λ−

2 ≤ . . . ≤ λ−

m ≤ λ+

1 ≤ λ+

2 ≤ λ+

1 ≤ λ−

∈ (−∞, λ−
1 ),

∈ (λ+

m,∞).

1 , λ+

1 ), . . . ,

(2.5)

x
t

x
t

x
t

x
t

m),

m, λ+

∈ (λ−
t ∈ (−∞, λ−

t ∈ (λ+

In this case we have λL := λL(h, n, uL, uR) = λ−

where the Riemann solution is uL in the sector x
1 ), uR in the last
m,∞), and either a constant state or an expansion in the other sec-
sector x
1 and
tors, see [5, Chap. 5].
λR := λR(h, n, uL, uR) = λ+
mt, 0 < t, is henceforth
referred to as the Riemann fan. The maximum wave speed in the Riemann fan is
λmax := λmax(h, n, uL, uR) := max(|λL|,|λR|). For brevity, when there is no ambi-
guity, we will omit the dependence of λL, λR and λmax on the parameters h, n, uL, uR.
The ﬁnite speed assumption (2.4) holds in the case of strictly hyperbolic systems that
may have characteristic families that are either not genuinely nonlinear or not linearly
degenerate, see e.g., Dafermos [12, Thm. 9.5.1].

m. The sector λ−

1 t < x < λ+

portant, well-known, consequence of the Riemann fan assumption (2.4):

2.3. Invariant sets and domains. The following elementary result is an im-
Lemma 2.1. Let h be a hyperbolic ﬂux over the admissible set Ah and satisfying
the ﬁnite wave speed assumption (2.4). Let v(h, n, vL, vR) be the unique solution to
the problem ∂tv + ∂x(h(v)·n) = 0 with initial data vL, vR ∈ Ah. Let (η, q) be an
entropy pair associated with the ﬂux h. Assume that t λmax(h, n, vL, vR) ≤ 1
2 and let

v(t, h, n, vL, vR) :=(cid:82) 1

(2.6)

(2.7)

v(t, h, n, vL, vR) = 1
η(v(t, h, n, vL, vR)) ≤ 1

2− 1

2

v(h, n, vL, vR)(x, t) dx, then

2 (vL + vR) − t(cid:0)h(vR)·n − h(vL)·n(cid:1).

2 (η(vL) + η(vR)) − t(q(vR)·n − q(vL)·n).

1

(cid:82) λRt

λLt v(h, n, vL, vR)(x, t) dx, remains in A for all t > 0.

We now introduce the notions of invariant sets. The deﬁnitions that we adopt are
slightly diﬀerent from what is usually done in the literature (see e.g., in Chueh et al.
[11], Hoﬀ [24], Frid [16].
Definition 2.2 (Invariant set). Let h be a hyperbolic ﬂux over the admissi-
ble set Ah and satisfying the ﬁnite wave speed assumption (2.4). We say that a
convex set A ⊂ Ah ⊂ Rm is invariant for the problem ∂tv + ∇·h(v) = 0 if for
any pair (vL, vR) ∈ A×A, any unit vector n ∈ S d−1(0, 1), the average of the en-
tropy solution of the Riemann problem ∂tv + ∇·(h(v)·n) = 0 over the Riemann fan
t(λR−λL)
for any t > 0 and any interval I such that (λLt, λRt) ⊂ I.
(i) The two problems: ∂tu + ∇·f (u) = 0 and ∂tv + ∇·g(v) = 0 have the same
(ii) (η(u), q(u)) is an entropy pair for the ﬂux f if and only if (η(v), q(v)− η(v)W)
is an entropy pair for the ﬂux g.
Proof. (i) Given n ∈ S d−1(0, 1), the solutions of the Riemann problems ∂tu +
∂x(f (u)·n) = 0 and ∂tv + ∂x(g(v)·n) = 0, with the same initial data, are such that
v(x, t) = u(x + (W·n)t, t). Therefore the admissible sets and the invariant sets are

Remark 2.1. The above deﬁnition implies that 1
I
Lemma 2.3 (Translation). Let W ∈ Rd and let g(v) := f (v) − v ⊗ W.

I v(h, n, vL, vR)(x, t) dx ∈ A

admissible sets and the same invariant sets.

(cid:82)

m(cid:88)

m(cid:88)

5
identical. (ii) Let n ∈ S d−1(0, 1) and k ∈ {1:d}, then using the deﬁnition (2.1), we
have

Invariant domain preserving ALE

∂viη(v)∂vk (fi(v)·n − viW·n) = ∂vk (q(v)·n) − W·n

∂viη(v)∂vk (vi)

i=1

= ∂vk (q(v)·n) − W·n∂vk (η(v)) = ∂vk ((q(v) − η(v)W)·n).

i=1

The conclusion follows readily.

3. Geometric preliminaries. In this section we introduce some notation and
recall some general results about Lagrangian mappings. The key results, which will
be invoked in §4 and §5, are lemmas 3.1, 3.2, and 3.3. The reader who is familiar with
these notions is invited to skip this section and to go directly to §4.

3.1. Jacobian of the coordinate transformation. Let Φ : Rd×R+ −→ Rd
be a uniformly Lipschitz mapping. We additionally assume that there is t∗ > 0 such
that the mapping Φt : Rd (cid:51) ξ (cid:55)−→ Φt(ξ) := Φ(ξ, t) ∈ Rd is invertible for all t ∈ [0, t∗].
Let vA : Rd×[0, t∗] −→ Rd be the vector ﬁeld implicitly deﬁned by
∀(ξ, t) ∈ R×[0, t∗].
(3.1)

vA(Φ(ξ, t), t) := ∂tΦ(ξ, t),

Note that this deﬁnition makes sense owing to the inversibility assumption on the
t (x), t) for any t ∈
mapping Φt; actually (3.1) is equivalent to vA(x, t) := ∂tΦ(Φ−1
[0, t∗].
Lemma 3.1 (Liouville’s formula). Let J(ξ, t) = ∇ξΦ(ξ, t) be the Jacobian matrix

of Φ, then

(3.2)

∂t det(J(ξ, t)) = (∇·vA)(Φ(ξ, t), t) det(J(ξ, t)).

Proof. This result is wellknown but we give the proof for completeness. Let
Sd be the set of all permutations of the set {1, . . . , d} and sgn(σ) denotes the sig-
nature of σ ∈ Sd. The Leibniz formula for the determinant gives det(J(ξ, t)) =
sgn(σ)∂σ(1)Φ1 . . . ∂σ(d)Φd. Then using the deﬁnition of the ﬁeld vA, with

(cid:80)

σ∈Sn

Cartesian coordinates v1, . . . , vd, we have

sgn(σ)∂σ(1)∂tΦ1 . . . ∂σ(d)Φd + . . . + ∂σ(1)Φ1 . . . ∂σ(d)∂tΦd

=

sgn(σ)∂σ(1)(v1(Φ(ξ, t), t)) . . . ∂σ(d)Φd + . . . + ∂σ(1)Φ1 . . . ∂σ(d)(vd(Φ(ξ, t), t))

(cid:88)

σ∈Sn

∂t det(J(ξ, t)) =

(cid:88)

σ∈Sn

d(cid:88)

k=1

d(cid:88)
Upon observing that (cid:80)

. . . +

k=1

etc., we infer that

(cid:88)

σ∈Sn

(cid:88)

σ∈Sn

=

(∂kv1)(Φ(ξ, t), t)

sgn(σ)∂σ(1)Φk∂σ(2)Φ2 . . . ∂σ(d)Φd+

(∂kvd)(Φ(ξ, t), t)

sgn(σ)∂σ(1)Φ1 . . . ∂σ(d−1)Φd−1∂σ(d)Φk.

σ∈Sn

sgn(σ)∂σ(1)Φk∂σ(2)Φ2 . . . ∂σ(d)Φd is zero unless k = 1,

∂t det(J(ξ, t)) = (∂1v1)(Φ(ξ, t), t) det(J(ξ, t)) + . . . (∂dvd)(Φ(ξ, t), t) det(J(ξ, t)),

Remark 3.1. Note that in (3.2) the expression (∇·vA)(Φ(ξ, t), t) should not be

which proves the result.
confused with ∇·(vA(Φ(ξ, t), t)).

6

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

3.2. Mass transformation. Let ψ ∈ C 0
ported function. We deﬁne ϕ(x, t) := ψ(Φ−1

0 (Rd; R) be a continuous compactly sup-
t (x)) for all t ∈ [0, t∗], i.e., ϕ(Φ(ξ, t), t) =
Rd ϕ(x, t) dx and relate it to
Rd ψ(ξ) dξ.
Lemma 3.2. Assume that t (cid:55)−→ det(J(ξ, t)) is a polynomial function in t of
degree at most r ∈ N for any ξ ∈ Rd. Let (ωl, ζl)l∈L be a quadrature such that
l∈L ωlf (ζl) is exact for all polynomials of degree at most max(r− 1, 0),
then, using the notation ϕ(x, t) = ψ(Φ−1

ψ(ξ) for all (ξ, t) ∈ Rd×[0, t∗]. We want to compute (cid:82)
(cid:82)
(cid:82) 1
0 f (ζ) dζ (cid:39)(cid:80)
(cid:90)

t (x)), we have

(cid:90)

(cid:90)

(3.3)

ϕ(x, t) dx −

Rd

Rd

ψ(ξ) dξ = t

ωl

Rd

ϕ(x, tζl)∇·vA(x, tζl) dx

Proof. Using the deﬁnitions we infer that

(cid:90)

ϕ(x, t) dx −

(cid:90)

Rd

Rd

ψ(ξ) dξ =

=

ϕ(Φt(ξ), t) det(J(ξ, t)) dξ −

ψ(ξ)

∂ζ det(J(ξ, ζ)) dζ

(cid:90)

Rd

dξ.

ψ(ξ) dξ

(cid:21)

(cid:88)

l∈L

(cid:20)(cid:90) t

0

(cid:90)
(cid:90)

Rd

Rd

Since by assumption det(J(ξ, ζ)) is a polynomial of degree at most r in ζ, and since
the quadrature (ωl, ζl)l∈L is exact for all polynomials of degree at most max(r − 1, 0),
we infer that

(cid:90)

Rd

(cid:90)

Rd

ϕ(x, t) dx −

l∈L

(cid:88)
(cid:88)
(cid:88)

l∈L

l∈L

ωl

ωl

ωl

(cid:90)
(cid:90)
(cid:90)

Rd

Rd

Rd

ψ(ξ) dξ = t

= t

= t

ψ(ξ)∂ζ det(J(ξ, tζl)) dξ

ψ(ξ)(∇·vA)(Φ(ξ, tζl), tζl) det(J(ξ, tζl)) dξ

ϕ(x, t)∇·vA(x, tζl) dx,

where we used Lemma 3.1.

Remark 3.2. The statement of Lemma 3.2 is somewhat similar in spirit to Eq. (26)
in Farhat et al. [14] or Eq. (7) in Guillard and Farhat [22]. The identity (3.3) will
allow us to prove a statement that is known in the ALE literature as the Discrete
Geometric Conservation Law (DGCL).

3.3. Arbitrary Lagrangian Eulerian formulation. Let Φ : Rd×R+ −→ Rd
be a uniformly Lipschitz mapping as deﬁned in §3.1 and let [0, t∗] be the interval
where the mapping Rd (cid:51) ξ (cid:55)−→ Φ(ξ, t) ∈ Rd is invertible for all t ∈ [0, t∗]. Let vA
be the vector ﬁeld deﬁned in (3.1), i.e., vA(x, t) = ∂tΦ(Φ−1
t (x), t), and let u be a
weak solution to (1.1). The following result is the main motivation for the arbitrary
Lagrangian Eulerian formulation that we are going to use in the paper.
the interval [0, t∗] for every function ψ ∈ C 0
ψ(Φ−1

Lemma 3.3. The following identity holds in the distribution sense (in time) over
0 (Rd; R) (with the notation ϕ(x, t) :=

t (x))):

(3.4)

∂t

u(x, t)ϕ(x, t) dx =

∇·(u ⊗ vA − f (u))ϕ(x, t) dx.

(cid:90)

Rd

(cid:90)

Rd

Invariant domain preserving ALE

7

(cid:90)

(cid:90)

+

Rd

Proof. Using the chain rule and Lemma 3.1, we have

∂t

u(x, t)ϕ(x, t) dx = ∂t

Rd

u(Φt(ξ), t) det(J(ξ, t))ψ(ξ) dξ

(cid:8)∂t(u(Φt(ξ), t)) det(J(ξ, t)) + u(Φt(ξ), t)∂t(det(J(ξ, t)))(cid:9)ψ(ξ) dξ
(cid:8)(∂tu)(Φt(ξ), t) + ∂tΦ(ξ, t)·(∇u)(Φt(ξ), t)(cid:9) det(J(ξ, t))ψ(ξ) dξ

(cid:90)

Rd

=

(cid:90)
(cid:90)

Rd

=

Rd

u(Φt(ξ), t)(∇·vA)(Φt(ξ), t) det(J(ξ, t))ψ(ξ) dξ.

(cid:90)

∂t

(cid:90)

u(x, t)ϕ(x, t) dx =

Then using (1.1) and the deﬁnition of the vector ﬁeld vA yields

(cid:90)
(cid:8)vA(Φt(ξ), t)·(∇u)(Φt(ξ), t) + (∇·vA)(Φt(ξ), t)u(Φt(ξ), t)(cid:9)ψ(ξ) det(J(ξ, t)) dξ
(cid:8)− ∇·f (u)(Φt(ξ), t) + ∇·(u ⊗ vA)(Φt(ξ), t)(cid:9)ψ(ξ) det(J(ξ, t)) dξ.

−∇·f (u)(Φt(ξ), t)ψ(ξ) det(J(ξ, t)) dξ

(cid:90)

Rd

Rd

Rd

+

=

Rd

We conclude by making the change of variable x = Φ(ξ, t).

We now state a result regarding the notion of entropy solution in the ALE frame-
work. The proof of this result is similar to that of Lemma 3.3 and is therefore omitted
for brevity.
Lemma 3.4. Let (η, q) be an entropy pair for (1.1). The following inequality
holds in the distribution sense (in time) over the interval [0, t∗] for every non-negative
function ψ ∈ C 0

0 (Rd; R+) (with the notation ϕ(x, t) := ψ(Φ−1

t (x))):

(3.5)

∂t

η(u(x, t))ϕ(x, t) dx ≤

∇·(η(u)vA − q(u))ϕ(x, t) dx.

(cid:90)

Rd

(cid:90)

Rd

4. The Arbitrary Lagrangian Eulerian algorithm. We describe in this sec-
tion the ALE algorithm to approximate the solution of (1.1). We use continuous
ﬁnite elements and explicit time stepping. We are going to use two diﬀerent discrete
settings: one for the mesh motion and one for the approximation of (1.1).

4.1. Geometric ﬁnite elements and mesh. Let (T 0

h )h>0 be a shape-regular
sequence of matching meshes. The symbol 0 in T 0
h refers to the initial conﬁguration of
the meshes. The meshes will deform over time, in a way that has yet to be deﬁned, and
we are going to use the symbol n to say that T n
h is the mesh at time tn for a given h > 0.
We assume that the elements in the mesh cells are generated from a ﬁnite number
h could be composed of
a combination of triangles and parallelograms in two space dimensions ( = 2 in
this case); the mesh T 0
h could also be composed of a combination of tetrahedra,
parallelepipeds, and triangular prisms in three space dimensions ( = 3 in this case).
h is denoted T n
K :
,(cid:98)Σgeo
K, 1 ≤ r ≤ . We now introduce a set
)}1≤r≤ (the index r ∈ {1:}
sh :=

of reference elements denoted (cid:98)K1, . . . , (cid:98)K. For instance, T 0
The diﬀeomorphism mapping (cid:98)Kr to an arbitrary element K ∈ T n
(cid:98)Kr −→ K and its Jacobian matrix is denoted Jn
of reference Lagrange ﬁnite elements {((cid:98)Kr,(cid:98)P geo

will be omitted in the rest of the paper to alleviate the notation). Letting ngeo

r

r

8

i }i∈{1: ngeo

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

and the associated Lagrange shape functions.

sh } and {(cid:98)θgeo

dim(cid:98)P geo, we denote by {(cid:98)ai}i∈{1: ngeo
sh } the Lagrange nodes of (cid:98)K
The sole purpose of the geometric reference element {((cid:98)K,(cid:98)P geo,(cid:98)Σgeo) is to con-
i }i∈{1: I geo} be the
h , which we organize in cells by
sh } −→ {1:I geo} (assumed
h ×{1:ngeo
h , the connectivity
K : (cid:98)K −→ K
sh } is the set of the Lagrange nodes describ-

struct the geometric transformation T n
collection of all the Lagrange nodes in the mesh T n
means of the geometric connectivity array jgeo : T n
to be independent of the time index n). Given a mesh cell K ∈ T n
array is deﬁned such that {an
ing K n. More precisely, upon deﬁning the geometric transformation T n
at time tn by

K as we now explain. Let {an

jgeo(i,K)}i∈{1: ngeo
(cid:88)
K((cid:98)x) =

T n

jgeo(i,K)(cid:98)θgeo

i

an

((cid:98)x)

i∈{1: ngeo
sh }

K((cid:98)K). In other words the geometric transformation is fully described
ﬁnite elements {((cid:98)Kr,(cid:98)Pr,(cid:98)Σr)}1≤r≤ which we are going to use to construct an ap-
denoted {(cid:98)θi}i∈{1: nsh}. We assume that the basis {(cid:98)θi}i∈{1: nsh} has the following key

we have K := T n
by the motion of geometric Lagrange nodes. We ﬁnally recall that constructing the
Jacobian matrix Jn
K from (4.1) is an elementary operation for any ﬁnite element code.
4.2. Approximating ﬁnite elements. We now introduce a set of reference
proximate solution to (1.1) (the index r ∈ {1:} will be omitted in the rest of the
paper to alleviate the notation). The shape functions on the reference element are

(4.1)

properties:

(4.2)

(cid:98)θi(x) ≥ 0,

(cid:88)

i∈{1: nsh}

(cid:98)θi((cid:98)x) = 1,

∀(cid:98)x ∈ (cid:98)K.

K ∈ (cid:98)P , ∀K ∈ T n
h },

These properties hold for linear Lagrange elements. It holds true also for Bernstein-
Bezier ﬁnite elements, see e.g., Lai and Schumaker [27, Chap. 2], Ainsworth [1].
T n
h and deﬁne the scalar-valued space

h , we denote by Dn the computational domain generated by

Given the mesh T n

(4.3)

P (T n

where (cid:98)P is the reference polynomial space. We also introduce the vector-valued spaces

h ) := {v ∈ C0(Dn; R) | v|K◦T n

Pd(T n

h ) := [P (T n

h )]d,

and Pm(T n

h ) := [P (T n

h )]m.

(4.4)
We are going to approximate the ALE velocity in Pd(T n
h ) and the solution of (1.1)
in Pm(T n
i }i∈{1: I}. Recall
that these functions form a basis of P (T n
h ). Let j : T n
h ×{1:nsh} −→ {1:I} be the
connectivity array, which we assume to be independent of n. This array is deﬁned
such that

h ). The global shape functions in P (T n

h ) are denoted by {ψn

j(i,K)(x) =(cid:98)θi((T n

ψn

(4.5)

∀i ∈ {1:nsh}, ∀K ∈ T n
h .

This deﬁnition together with (4.2) implies that

(4.6)

i (x) ≥ 0,
ψn

ψn

i (x) = 1,

∀x ∈ Rd.

K)−1(x)),
(cid:88)

i∈{1: I}

ij := Sn

i ∩ Sn

We denote by Sn

Invariant domain preserving ALE

i and by |Sn

i the support of ψn

j the intersection of the two supports Sn

h ; we deﬁne I(E) := {j ∈ {1:I} | |Sn

9
i | the measure of Si, i ∈ {1:I}.
We also deﬁne Sn
j . Let
j ∩ E| (cid:54)= 0} the set
E be a union of cells in T n
that contains the indices of all the shape functions whose support on E is of nonzero
measure. Note that the index set I(E) does not depend on the time index n since
we have assumed that the connectivity of the degrees of freedom is ﬁxed once for all.
We are going to regularly invoke I(K) and I(Sn
i ) and the partition of unity property:
i ∈ Pm(T n
h ),
vh(x) is in the convex hull of (Vi)i∈I(K) (henceforth denoted conv(Vi)i∈I(K)). More-
over for any convex set A in Rm, we have

h , all x ∈ K, and all vh :=(cid:80)
(cid:0)(Vi)i∈I(K) ∈ A(cid:1) ⇒ (vh(x) ∈ A, ∀x ∈ K) .

i (x) = 1 for all x ∈ K.
i∈I(K) ψn
Lemma 4.1. For all K ∈ T n

i∈{1: I} Viψn

i and Sn

(cid:80)

(4.7)

vh(x) =(cid:80)
Let Mn ∈ RI×I be the consistent mass matrix with entries(cid:82)

Proof. The positivity and partition of unity assumption (4.6) and the deﬁnition
i (x) implies that vh(x) is a convex combination of (Vi)i∈I(K),
whence the conclusion. The statement (4.7) follows readily since the convexity as-
sumption on A implies that conv(Vi)i∈I(K) ⊂ A.

i∈I(K) Viψn

ψn
i (x)ψn

j (x) dx,

and let ML,n be the diagonal lumped mass matrix with entries

Sn
ij

j∈I(Sn
i )

The partition of unity property implies that mn
i (x) dx, i.e.,
the entries of ML,n are obtained by summing the rows of Mn. Note that the positivity
assumption (4.6) implies that mn

i > 0 for any i ∈ {1: I}.

4.3. The ALE algorithm, version 1. Let T 0

h be the mesh at the initial time
t = 0. Let (m0
i )i∈{1: I} be the approximations of the mass of the shape functions at
i ∈ Pm(T 0
time t0 deﬁned by m0
h )
be a reasonable approximation of the initial data u0 (we shall make a more precise
statement later).

i (x) dx. Let uh0 :=(cid:80)

i :=(cid:82)

i∈{1: I} U0

j (x)ψn

i = m0

Rd ψ0

i ψ0

h be the mesh at time tn, (mn

i )1≤i≤I be the approximations of the mass
of the shape functions at time tn, and un
h ) be the
approximation of u at time tn. We denote by ML,n the approximate lumped matrix,
i.e., ML,n
i δij. We now make the assumption that the given ALE velocity ﬁeld
is a member of Pd(T n
h ). Then the Lagrange
nodes of the mesh are moved by using

h ), i.e., wn = (cid:80)

i ∈ Pm(T n

i ∈ Pd(T n

i∈{1: I} Wn

i∈{1: I} Un

ij = mn

i ψn

i ψn

h := (cid:80)

Let T n

an+1
i = an

i + τ wn(an

(4.9)
This fully deﬁnes the mesh T n+1
as explained at the end of §4.1. We now estimate
. Of course we could use mn+1
the mass of the shape function ψn+1
(x) dx,
this option will be explored in §4.5, but to make the method easier to extend with
higher-order strong stability preserving (SSP) time stepping techniques, we deﬁne
mn+1

by approximating (3.3) with a ﬁrst-order quadrature rule,

i =(cid:82)

Rd ψn+1

i ).

h

i

i

i

(4.10)

mn+1

i = mn

i + τ

i (x)∇·wn(x) dx.
ψn

(4.8)

mn

i :=

ψn

i (x) dx.

i =(cid:80)

(cid:82) ψn

(cid:90)

Sn
i

(cid:90)

Sn
i

10

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

Taking inspiration from (3.4), we propose to compute un+1
explicit technique:

h

by using the following

(4.11)

mn+1

i − mn
i Un+1
τ

i Un

i

− (cid:88)
(cid:18) (cid:88)

j∈I(Sn
i )
∇·

j∈{1: I}

(cid:90)

+

Rd

ijUn
dn
j

:=(cid:80)

(cid:19)

(f (Un

j ) − Un

j ⊗ Wn

j )ψn

j (x)

ψn

i (x) dx = 0,

(cid:90)

Sn
i

cn
ij
ij(cid:107)(cid:96)2
(cid:107)cn

(cid:88)

j∈I(Sn
i )

∈ Pm(T n+1

h

i ψn+1

i∈{1: I} Un+1

where un+1
). Notice that we have replaced the
consistent mass matrix by an approximation of the lumped mass matrix to approx-
imate the time derivative. The coeﬃcient dn
ij is an artiﬁcial viscosity for the pair of
degrees of freedom (i, j) that will be identiﬁed by proceeding as in Guermond and
Popov [20]. We henceforth assume that dn

ij = 0 if j (cid:54)∈ I(Sn

i ) and

h

i

(4.12)

ij ≥ 0, if i (cid:54)= j,
dn

ij = dn
dn
ji,

and dii :=

−dn
ji.

(cid:88)

i(cid:54)=j∈I(Sn
i )

The entire process is described in Algorithm 1.

Let us reformulate (4.11) in a form that is more suitable for computations. Let

us introduce the vector-valued coeﬃcients
∇ψn

(4.13)

cn
ij :=

j (x)ψn

i (x) dx.

We deﬁne the unit vector nn
i − mn
i Un+1
τ

mn+1

(4.14)

ij :=

i Un

i

+

. Then we can rewrite (4.11) as follows

(f (Un

j ) − Un

j ⊗ Wn

j )·cn

ij − dn

ijUn

j = 0.

(cid:40)

Un
i
Un
j

if x < 0
if x > 0.

It will be shown in the proof of Theorem 5.2 that an admissible choice for dn
i )(cid:107)cn

ij(cid:107)(cid:96)2, λmax(gn

dn
ij = max(λmax(gn

j )(cid:107)cn

ij is
ji(cid:107)(cid:96)2).

ij, Un

ji, Un

i , Un

j , Un

i , nn

j , nn

(4.15)

where λmax(gn
j , nn
Riemann problem:

ij, Un

i , Un

j ) is the largest wave speed in the following one-dimensional

(4.16)

∂tv + ∂x(gn

j (v)·nn

ij) = 0,

(x, t) ∈ R×R+,

v(x, 0) =

where we have deﬁned the ﬂux gn

j (v) := f (v) − v ⊗ Wn
j .

Remark 4.1. (Fastest wave speed) The fastest wave speed in (4.16) can be ob-
tained by estimating the fastest wave speed in the Riemann problem (2.2) with the
ﬂux f (v)·nn
i , Un
j )
be the speed of the leftmost and rightmost waves in (2.2), respectively. Then

ij and initial data (Un

j ). Let λL(f , nn

j ) and λR(f , nn

ij, Un

ij, Un

i , Un

i , Un

(4.17) λmax(gn

j , nn

ij, Un

i , Un

j ) = max(|λL(f , nn

ij, Un

j ·nn
A very fast algorithm to compute λL(f , nn
j ) for the
compressible Euler equations is described in Guermond and Popov [19]; see also Toro
[34].

j ) − Wn
ij, Un
i , Un

ij, Un

ij|).

i , Un

j ) − Wn
j ·nn
ij|,
i , Un
|λR(f , nn
ij, Un
i , Un
j ) and λR(f , nn

Invariant domain preserving ALE

11

h and ML,0

Algorithm 1
Require: u0
1: while tn < T do
2: Use CFL condition to estimate τ .
3:
4:
5:

if tn + τ > T then

τ ← T − tn

6:

end if
Estimate/choose wn and make sure that the transformation Φt deﬁned in (4.25)
is invertible over the interval [tn, tn+1].
7: Move mesh from tn to tn+1 using (4.9).
, see (4.10). Check mn+1
8:

i > 0; otherwise, go to step 6, reduce τ .

Compute mn+1

i

9:

10:
11:

Compute cn
Compute dn

Check 1−(cid:80)

ij as in (4.13).
ij, see (4.15) and (4.12).

i(cid:54)=j∈I(Sn

i ) 2dn

ij

τ

mn+1

i

positive. Otherwise, go to step 6 and reduce τ .

Compute un+1
tn ← tn + τ

12:
13:
14: end while

h

by using (4.14).

Since it will be important to compare Un+1

j to establish the invariant
domain property, we rewrite the scheme in a form that is more suitable for this
purpose.

and Un

j

Lemma 4.2 (Non-conservative form). The scheme (4.11) is equivalent to

(4.18)

mn+1

i

i − Un
Un+1
τ

i

=

((Un

j − Un

i ) ⊗ Wn

j − f (Un

j ))·cn

ij + dn

ijUn
j ,

(cid:88)

j∈I(Sn
i )

(cid:88)

j∈I(Sn
i )

(Un

j ⊗ Wn

j − f (Un

j ))·cn

ij + dn

ijUn
j ,

Proof. We rewrite (4.14) as follows:

Un

i =

mn+1

i − Un
Un+1
τ

i

i − mn
mn+1
τ

i

+

i

Then, recalling the expression wn =(cid:80)
(cid:88)

i + τ(cid:80)

i = mn

i ) Wn

j ·cn

j∈I(Sn

mn+1

(mn+1

i − mn

i )Un

i = τ Un
i

i∈{1: I} Wn

i ψn

i , and using (4.10), we infer that

ij, which in turn implies that

Wn

j ·cn

ij = τ

(Un

i ⊗ Wn

j )·cn
ij,

j∈I(Sn
i )

j∈I(Sn
i )

(cid:88)

whence the result.

Remark 4.2. (Other discretizations) Note that the method for computing the ar-
tiﬁcial diﬀusion is quite generic, i.e., it is not speciﬁc to continuous ﬁnite elements.
The above method can be applied to any type of discretization that can be put into
the form (4.14).

4.4. Continuous mesh motion. We introduce in this section some technicali-
ties regarding the mesh motion that will be used in the second version of the algorithm

Given a mesh T n

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

12
and which will be described in §4.5. Our main motivation is to replace the approx-
imate mass conservation (4.10) by the exact quadrature (3.3). For this purpose, we
need to consider the continuous motion of the mesh over the time interval [tn, tn+1].
h we denote by Dn the computational domain generated by
T n
h . Then using the standard constructions of continuous ﬁnite element spaces, we
deﬁne a new scalar-valued space based on the geometric Lagrange ﬁnite elements

{((cid:98)Kr,(cid:98)P geo
where (cid:98)P geo is the reference polynomial space deﬁned on (cid:98)K (note that the index r has

K ∈ (cid:98)P geo, ∀K ∈ T n
h },

h ) = {v ∈ C0(Dn; R) | v|K◦T n

,(cid:98)Σgeo

)}1≤r≤:

P geo(T n

(4.19)

r

r

been omitted). We also introduce the vector-valued spaces

P geo(T n

h ) := [P geo(T n

h )]d.

}i∈{1: I} the global shape functions in P geo(T n

h ). Recall that

(4.20)
We denote by {ψgeo,n
{ψgeo,n

i

i

}i∈{1: I} is a basis of P geo(T n
((T n

jgeo(i,K)(x) =(cid:98)θgeo

ψgeo,n

h ) and
K)−1(x)),

i

(4.21)

∀i ∈ {1:nsh}, ∀K ∈ T n

h , ∀x ∈ K.

i

ψgeo,n

h ) as we did in §4.3. Let wn =(cid:80)

The key diﬀerence with version 1 of the algorithm is that now we are going to
h −→ Th(t) by using P geo(T n
construct exactly the mapping Φt : T n
h ), and we are
going to assume that the given ALE velocity is a member of P geo(T n
h ) instead of
∈ P geo(T n
Pd(T n
i∈I(K) Wgeo,n
h ) be the ALE
velocity.
Let us construct the associated transformation Φt : Rd −→ Rd and velocity ﬁeld
vA for any t ∈ [tn, tn+1]. We deﬁne a continuous deformation of the mesh over the
time interval [tn, tn+1] by moving the nodes {an
(4.22)
This rule completely deﬁnes the mesh Th(t) owing to the deﬁnition of the geometric
for all K ∈ Th(t), see (4.1). The shape functions of P geo(Th(t)) and P (Th(t)) are
deﬁned as usual by setting

transformation TK(t) : (cid:98)K −→ K, with TK(t)((cid:98)x) = (cid:80)

i }i∈{1: I geo} as follows:
t ∈ [tn, tn+1].

sh } ajgeo(i,K)(t)(cid:98)θgeo

i + tWgeo,n

((cid:98)x),

ai(t) = an

i∈{1: ngeo

,

i

i

i

j(i,K)(x, t) :=(cid:98)θgeo
ϕj(i,K)(x, t) :=(cid:98)θi((TK(t))−1(x)),

((TK(t))−1(x)),

ϕgeo

i

:= Th(tn+1). Notice that ϕgeo
for any i ∈ {1:I geo}, and ϕi(·, tn) = ψn

h

i

(4.23)

(4.24)
We recall that T n+1
ψgeo,n+1
i ∈ {1:I}.

i

For any t ∈ [tn, tn+1] we now deﬁne the mapping Φt : T n

(4.25)

Φt(ξ)|K =

ajgeo(i,K)(t)ψgeo,n

jgeo(i,K)(ξ),

(cid:88)

sh }
i∈{1: ngeo

∀x ∈ K, ∀K ∈ Th(t), ∀i ∈ {1:I geo}
∀x ∈ K, ∀K ∈ Th(t), ∀i ∈ {1:I}.

(·, tn+1) =
for any

i

i

(·, tn) = ψgeo,n
and ϕgeo
i and ϕi(·, tn+1) = ψn+1
h −→ Th(t) by
∀ξ ∈ K, ∀ ∈ T n
h .

i

Lemma 4.3. The following properties hold for any K ∈ T n

h , any t ∈ [tn, tn+1]

and any i ∈ {1: I}:
(4.26)

(4.27)

(4.28)

TK(t) = Φt ◦ T n
K,
i (ξ), ϕgeo
ϕi(Φt(ξ), t) = ψn
i
ϕgeo

(cid:88)

vA(x, t) =

Wgeo,n

i

i

i∈{1: I}

(Φt(ξ), t) = ψgeo,n

i

(ξ),

∀ξ ∈ K ∈ T n
h .
∀t ∈ [tn, tn+1], ∀x ∈ Rd.

(x, t),

Invariant domain preserving ALE

13

Proof. Let us observe ﬁrst that the deﬁnition (4.25) together with the deﬁnitions

of TK(t) and ψgeo,n

◦ (T n

K)−1 implies that

(cid:88)

ajgeo(i,K)(t)(cid:98)θgeo

i

i∈{1: ngeo
sh }

◦ (T n

K)−1(ξ),

Φt(ξ)|K =

ajgeo(i,K)(t)ψgeo,n

jgeo(i,K)(ξ) =

jgeo(i,K) =(cid:98)θgeo
(cid:88)

i

i∈{1: ngeo
sh }

ϕj(i,K)(x, t) =(cid:98)θi((TK(t))−1(x)) =(cid:98)θi((Φt ◦ T n

which implies that Φt|K = TK(t) ◦ (T n
K)−1. This proves the ﬁrst statement. Second,
the deﬁnition of the shape functions (4.24) together with the above result implies that
K)−1 ◦ (Φt)−1(x)).
j(i,K)(ξ) for every ξ ∈ K ∈ T n
This proves that ϕj(i,K)(Φt(ξ), t) = ψn
h . Proceed sim-
j(i,K)(Φt(ξ), t) = ψgeo,n
ilarly to prove ϕgeo
j(i,K)(ξ). Now let us compute ∂tΦ. Using the
deﬁnition of the motion of the nodes (4.22) and the deﬁnition of Φ, (4.25), we infer
that

K)−1(x)) =(cid:98)θi((T n

∂tΦ(ξ, t)|K =

Wgeo,n

jgeo(i,K)ψgeo,n

jgeo(i,K)(ξ) = wn|K.

(cid:88)

i∈{1: ngeo
sh }

Hence the deﬁnition of vA gives

vA(x, t) = ∂tΦ(Φ−1

t (x), t) = wn(Φ−1

t (x)) =

(cid:88)

i∈{1: I geo}

Wgeo,n

i

ψgeo,n

i

(Φ−1

t (x)).

We then conclude by invoking (4.27), i.e., ϕgeo

(x, t) = ψgeo,n

i

i

(Φ−1

t (x)).

Before writing the complete algorithm we need to make a change of basis to

express the ALE velocity in the approximation basis. We further assume that

(4.29)
This assumption implies that P geo(T n
independent of n, such that ψgeo,n
for any i ∈ {1:I geo}. We then deﬁne

i

(4.30)

Wn

j :=

BijWgeo,n

,

i

h ); hence there is a sparse matrix B,
j , were s(i) is a sparse set of indices

j∈s(i)

(cid:98)P geo ⊂ (cid:98)P .
=(cid:80)
h ) ⊂ Pd(T n
Bijψn
(cid:88)
(cid:88)
=(cid:82)

{i | j∈s(i)}

i∈{1: I}

i ψn

Wn

which, owing to (4.28), gives the following alternative representation of vA:

(4.31)

vA(x, t) =

i (Φ−1

t (x)).

4.5. The ALE algorithm, version 2. It may look odd to some readers that
in version 1 of the algorithm we update the mass of the shape function ψn+1
by
using (4.10) instead of using mn+1
(x) dx. We propose in this section an
alternative form of the algorithm that does exactly that. This algorithm is henceforth
referred to as version 2. For reasons that will be detailed in §4.6, we have not been
able so far to construct an SSP extension of this algorithm that is both conservative
and invariant domain preserving, whereas the SSP extension of version 1 is trivial.
all polynomial function f of degree at most d − 1. We denote tn

Let (ωl, ζl)l∈L be a quadrature such that(cid:82) 1

0 f (ζ) dζ (cid:39)(cid:80)

l∈L ωlf (ζl) is exact for
l = tn + τ ζl. Given

Rd ψn+1

i

i

i

14
the ALE ﬁeld wn ∈ P geo(T n
l , l ∈ L, by using (4.22):
time tn

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

h ), the Lagrange nodes of the mesh are moved for each

ai(tn
(4.32)
This deﬁnes the new meshes Th(tn

l ) = an

i + τ ζlWgeo,n

i

.

l ). This allows us to compute

(4.33)

cij(tn

l ) :=

∇ϕj(x, tn

l )ϕi(x, tn

l ) dx,

cn
ij :=

(cid:90)

Sn

i (tn
l )

(cid:88)

l∈L

ωlcij(tn

l ).

After constructing Th(tn+1) by setting an+1
ψn+1

by

i

i

= an

i + τ Wgeo,n

i

, we deﬁne the mass of

(4.34)

mn+1

i

:=

ψn+1

i

(x) dx.

Then the change of basis (4.30) is applied to obtain the representation of wn in
Pd(T n
by using the following explicit technique:

h ). Following (3.4), we compute un+1

h

(4.35)

mn+1

i − mn
i Un+1
τ

i Un

i

+

(f (Un

j ) − Un

j ⊗ Wn

j )·cn

ij − dn

ijUn

j = 0,

(cid:90)

Rd

(cid:88)

j∈I(Sn
i )

(cid:88)

j∈I(Sn
i )

where dn

ij is computed by using (4.15).

Lemma 4.4 (Non-conservative form). The scheme (4.35) is equivalent to

(4.36)

mn+1

i

i − Un
Un+1
τ

i

=

((Un

j − Un

i ) ⊗ Wn

j − f (Un

j ))·cn

ij + dn

ijUn
j .

(cid:88)

Proof. We rewrite (4.35) as follows:

mn+1

i − Un
Un+1
τ

i

i − mn
mn+1
τ

i

+

Un

i =

i

j∈I(Sn
i )

Lemma 3.2 with ψ = ψn

Then, recalling the expression (4.31) of vA(x, t) = (cid:80)
(cid:88)
(cid:88)

(cid:88)
(cid:88)

i − mn

i = τ Un
i

ϕi(x, tn
l )

(mn+1

i )Un

(cid:90)

l∈L

ωl

Rd

i and ϕ(x, t) = ϕi(x, t) we infer that

j∈I(Sn
i )

(Un

j ⊗ Wn

j − f (Un

j ))·cn

ij + dn

ijUn
j .

i∈{1: I} Wn

i ϕi(x, t), and using

Wn

j ·∇ϕj(x, tn

l ) dx

= τ Un
i

Wn

j ·cn

ij = τ

(Un

i ⊗ Wn

j )·cn
ij,

j∈I(Sn
i )

j∈I(Sn
i )

whence the result.

4.6. Version 1 vs. version 2 and SSP extension. We now give an overview
of what has been done in the previous sections by highlighting the main diﬀerences
between the two versions of the algorithm.
• Both versions of the algorithm use the two sets of reference elements: we use
)}1≤r≤ for the geometric mappings (see (4.1)), and we use

{((cid:98)Kr,(cid:98)P geo
{((cid:98)Kr,(cid:98)Pr,(cid:98)Σr)}1≤r≤ for the approximation of u.

,(cid:98)Σgeo

r

r

i

h

Invariant domain preserving ALE

• We assume that wn ∈ Pd(T n

15
h ) in version 1, whereas we assume that wn ∈
(cid:98)P geo ⊂ (cid:98)P , see (4.29)) in version 2, which is not the case for version 1; actually
h ) (i.e.,

h ) in version 2. We also must assume that P geo(T n

h ) ⊂ Pd(T n

P geo(T n
the space P geo(T n
• Only the meshes T n
construct all the intermediate meshes Th(tn
• The mass of ψn+1
is updated by setting mn+1

h ) does not play any role in version 1.
h and T n+1

ψn+1

l ), l ∈ L, in version 2.
i = mn

in version 1, whereas it is updated by setting mn+1
version 2.

are considered in version 1, whereas one must
i (x)∇·wn(x) dx
ψn
(x) dx in
Retaining the invariant domain property (see §5.2) and increasing the time accu-
racy can be done by using so-called Strong Stability Preserving (SSP) time discretiza-
tion methods. The key is to achieve higher-order accuracy in time by making convex
combination of solutions of forward Euler sub-steps. More precisely each time step
of a SSP method is decomposed into substeps that are all forward Euler solutions,
and the end of step solution is constructed as a convex combination of the interme-
diate solutions; we refer to Ferracina and Spijker [15], Higueras [23], Gottlieb et al.
[18] for reviews on SPP techniques. Algorithm 2 illustrates one Euler step for either
version 1 or version 2 of the scheme. SSP techniques are useful when combined with
reasonable limitation strategies since the resulting methods are both high-order, in
time and space, and invariant domain preserving.

i +τ(cid:82)
= (cid:82)

Sn+1

Sn
i

i

i

i

Algorithm 2 Euler step (version 1 and version 2)
Require: T 0

1: Compute(cid:101)a1
2: return (cid:101)T 1
h , (cid:101)u1

h, (m0 or m0), w0, τ
i = a0

i + τ w0, ((cid:101)m1 or (cid:101)m1), (cid:101)u1
h, ((cid:101)m1 or (cid:101)m1)

h , u0

h, and build new mesh (cid:101)T 1

h

We describe the SSP RK3 implementation of version 1 of the scheme in Algo-

rithm 3. Generalizations to other SSP techniques are left to the reader.

h , u0

h , u1

h , u0

h , u1

h, m1)

h, m0, t0

Algorithm 3 SPP RK3, version 1
Require: T 0
1: Deﬁne the ALE velocity w0 at t0
h, m0, w0, τ , T 1
2: Call Euler step(T 0
h, m1, w1, τ , (cid:101)T 2
h , (cid:101)u2
3: Deﬁne the ALE velocity w1 at t0 + τ
4(cid:101)m2, build mesh T 2
4: Call Euler step(T 1
4 a0 + 1
5: Set a2 = 3
h, m2, w2, τ , (cid:101)T 3
h , (cid:101)u3
6: Deﬁne the ALE velocity w2 at t0 + 1
2 τ
3(cid:101)m3, build mesh T 3
7: Call Euler step(T 2
3 a0 + 2
8: Set a3 = 1
9: return T 3
h , u3
h and (cid:101)u2

4(cid:101)a2, m2 = 3
3(cid:101)a3, m3 = 1

h, (cid:101)m2)
h, (cid:101)m3)

h is a convex combination of u0

h, m3, t1 = t0 + dt

Note that u2

4 m0 + 1

3 m0 + 2

h , u2

m0
i
m2
i
h is a convex combination of u0

h since 1 = 3
4

(cid:101)m3

m0
i
m3
i

same observation holds for u3
1 = 1
3
Remark 4.3. (Version 2+SSP) The above properties do not hold for version 2 of
i . Notice though

, for any i ∈ {1: I}.
i (cid:54)= 3

the scheme, since in general m2

h, i.e., u3

i and m3

i (cid:54)= 1

i + 1

i + 2

+ 2
3

i
m3
i

4 m0

3 m0

4(cid:101)m2

3(cid:101)m3

h , u2

h = 3
4

m0
m2 u0

h , u3

h = 1
3

m0
m3 u0

h

h + 1
4

m2(cid:101)u2
(cid:101)m2
m3(cid:101)u3
(cid:101)m3
h + 2
3
(cid:101)m2
h and (cid:101)u3

+ 1
4

i
m2
i

h

. The
h since

16

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

4(cid:101)m2

3(cid:101)m3

i

i = 3

that it can be shown that m2
in one space
dimension if the ALE velocity is kept constant over the entire Runge Kutta step. So
far, we are not aware of any SSP technique for version 2 of the algorithm (at least
second-order in time) that is both conservative and invariant domain preserving in
the multidimensional case.

i and m3

4 m0

3 m0

i = 1

i + 1

i + 2

5. Stability analysis. We establish the conservation and the invariant domain

property of the two schemes (4.11) and (4.35) in this section.

schemes.

5.1. Conservation. We ﬁrst discuss the conservation properties of the two

Lemma 5.1. (i) For the scheme (4.35), the quantity (cid:82)
all n ≥ 0, i.e., (cid:82)
quantity(cid:80)
(cid:88)

h dx is conserved for
h dx for all n ≥ 0. (ii) For the scheme (4.11), the
(cid:90)

Proof. We start with by proving (i). We observe ﬁrst that

is conserved, i.e., it is independent of n.

Rd un
i∈{1: I} mn

Rd un

Rd u0

i

mn

i Un

i =

i∈{1: I}

i∈{1: I}

j∈{1: I}

Rd

ψn
i (x)ψn

j (x) dx

i Un

h dx =(cid:82)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

(cid:90)

Un
i

Un

i ψn

i (x)ψn

j (x) dx =

un

h(x)ψn

j (x) dx.

h dx. We now sum
over the index i in (4.11) and we use again the partition of unity property to infer

i∈{1: I} mn

Rd un

i Un

(cid:90)

Rd

(cid:88)
i =(cid:82)

j∈{1: I}

=

Rd

i∈{1: I}

j∈{1: I}

Then the partition of unity property gives(cid:80)
that(cid:82)
(cid:18) (cid:88)
(cid:18) (cid:88)

− (cid:88)
(cid:90)

dx −(cid:82)

(cid:88)

Rd un+1

Rd un

h dx

τ

h

j∈I(Sn
i )
∇·

+

ωl

i∈{1: I}

l∈L

Rd

j∈{1: I}

(cid:19)

dn
ij

Un
j

(f (Un

j ) − Un

j ⊗ Wn

j )ϕj(x, tn
l )

(cid:19)

dx = 0.

The boundary conditions and the structure assumptions on dn
desired result. The proof of (ii) follows the same lines.

ij, see (4.12), imply the

5.2. Invariant domain property. We can now prove a result somewhat similar
in spirit to Thm 5.1 from Farhat et al. [14], although the present result is more general
since it applies to any hyperbolic system.
We start with version 2 of the scheme by deﬁning the local minimum mesh size
hij(t) associated with an ordered pair of shape functions (ϕi(·, t), ϕj(·, t)) at time t
, where Sij(t) = Si(t) ∩ Sj(t). We also deﬁne
as follows: hij(t) :=
hi(t) = minj∈I(Si(t)) hij(t). Given a time tn, we deﬁne a local minimum mesh size hn
i
and a local mesh structure parameter κn

(cid:107)(cid:107)∇ϕj(cid:107)(cid:96)2(cid:107)L∞(Sij (t))

1

i by

(cid:80)

i(cid:54)=j∈I(Sn
i )

(cid:82)

l ) ϕi(x, tn
l∈L ωl
Sij (tn
l∈L ωlmi(tn
l )

l ) dx

.

(5.1)

hn
i := min

l∈L hi(tn
l ),

κn
i :=

For version 1 of the algorithm we set

(5.2)

hn
i := hi(tn),

κn
i :=

(cid:80)

(cid:80)
(cid:80)
(cid:82)

(cid:82)

i(cid:54)=j∈I(Sn
i )
ψn

Sn
i

ψn

i (x) dx

Sn
ij

.

i (x) dx

17

is

Invariant domain preserving ALE

(cid:80)

Note that the upper estimate κn
uniformly bounded with respect to n and i for both algorithms.

i ≤ maxj∈{1: I} card(I(Sj(0))) − 1 implies that κn

Theorem 5.2 (Local invariance). Let n ≥ 0, and let i ∈ {1: I}. λn

i

maxj∈I(Sn
of the algorithm, version 2 or version 1 respectively, assume that τ is such that

i )(λmax(gn

j ), λmax(gn

j , nn

i , nn

ji, Un

j , Un

ij, Un

i , Un

i,max :=
i )). Depending on the version

λn

λn

i

or

2τ

κn
i

(5.3)

mn+1

≤ 1,

i,max
hn
i

l∈L ωlmi(tn
l )

mn
i
mn+1
Let B ⊂ Af be a convex invariant set for the ﬂux f such that {Un
then Un+1
Proof. We do the proof for version 2 of the algorithm. The proof for version 1 is
similar. Let i ∈ {1:I} and invoke (4.36) from Lemma 4.4 (or (4.18) from Lemma 4.2
for version 1) to express Un+1

j | j ∈ I(Sn

i )} ⊂ B,

i,max
hn
i

∈ B.

≤ 1.

κn
i

2τ

i

i

i

τ

(cid:88)

into the following from
i ) ⊗ Wn

j − Un

((Un

Un+1

i = Un

i +

Since the partition of unity property implies that (cid:80)
(cid:80)

j∈I(Sn
i )

mn+1

i

j∈I(Sn

i ) dn

ij = 0 from (4.12), we can rewrite the above equation as follows:

j∈I(Sn

i ) cn

ij = 0 and we have

j − f (Un

j ))·cn

ij + dn

ijUn
j .

Un+1

i = Un

i +

ij(Un
dn

i + Un
j )

(cid:88)
(cid:19)

j∈I(Sn
i )
τ

+

mn+1

i

((Un

j − Un
(cid:88)

(cid:88)

j∈I(Sn
i )
τ

+

mn+1

i

(cid:18)

= Un
i

+

τ

mn+1

i

1 + 2dn
ii

(cid:88)

((Un
i(cid:54)=j∈I(Sn
i )
ij/(cid:107)cn

i ) ⊗ Wn

j + f (Un

i ) − f (Un

j ))·cn

ij

ij(Un
dn

i + Un
j )

i(cid:54)=j∈I(Sn
i )
i ) ⊗ Wn
j + f (Un

j − Un

i ) − f (Un

j ))·cn
ij.

Recall that nn

ij := cn

U

n+1
ij

deﬁned by

ij(cid:107)(cid:96)2 ∈ Sd−1(0, 1), and let us introduced the auxiliary state

i − Un

j ) ⊗ Wn

j )·nn

ij

ij(cid:107)(cid:96)2
(cid:107)cn
2dn
ij

+

1
2

(Un

i + Un

j ).

U

i ) − f (Un

n+1
ij = (f (Un

Then, provided we establish that 1 −(cid:80)

j ) − (Un

is a convex combination of Un

Un+1

i

(5.4)

Un+1

i = Un

i

(cid:18)
1 − (cid:88)

i(cid:54)=j∈I(Sn
i )

τ

i(cid:54)=j∈I(Sn
n+1
ij

i ) 2dn
)i(cid:54)=j∈I(Sn

mn+1
i ):

ij

i

i and (U

2dn
ij

τ

mn+1

i

+

τ

mn+1

i

(cid:19)

(cid:88)

≥ 0, we have proved that

Let us now consider the Riemann problem (4.16). Let v(gn
j ) be the
solution to (4.16) with gn
j . Let λmax(gn
j ) be the
fastest wave speed in (4.16), see (4.17). Using the notation of Lemma 2.1, we then
observe that

j (v) := f (v) − v ⊗ Wn

i , Un
i , Un

2dn

ijU

n+1
ij

.

i(cid:54)=j∈I(Sn
i )
ij, Un
ij, Un

j , nn
j , nn

U

n+1
ij = v(t, gn

j , nn

ij, Un

i , Un
j )

18

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

(cid:107)cn
ij(cid:107)(cid:96)2
2dn
ij

j , nn

, provided tλmax(gn

i , Un
2 . Note that the deﬁnition of
with t =
i , Un
dn
ij, (4.15), implies that the condition tλmax(gn
2 is satisﬁed. Since
B is an invariant set for the ﬂux f , by Lemma 2.3, B is also an invariant set for
the ﬂux gn
j ), we conclude that
∈ B since

j ) ∈ B; see Remark 2.1. In conclusion, Un+1

j . Since, in addition, B contains the data (Un

n+1
ij = v(t, gn

i ) ≤ 1

ij, Un

i , Un

i , Un

ij, Un

i

j ) ≤ 1
ij, Un
j , nn

is a convex combination of objects in B.

i(cid:54)=j∈I(Sij (tn

l ))

2τ dn
ij
mn+1

i

, there remains to establish that 1 − Y ≥ 0 to

complete the proof for version 2 of the algorithm. Note ﬁrst that

U
Un+1

i

j , nn

Setting Y :=(cid:80)
(cid:90)

(cid:107)cij(tn

l )(cid:107)(cid:96)2 ≤

(cid:90)

(cid:82)

(cid:80)
(cid:80)

l∈L ωl
Sij (tn
l∈L ωlmi(tn
l )

l ) ϕi(x, tn

l ) dx

(cid:107)∇ϕj(x, tn

l )(cid:107)(cid:96)2ϕi(x, tn

l ) dx ≤ h

−1
ij (tn
l )

ϕi(x, tn

l ) dx.

Sij (tn
l )

Notice that cij(tn
the Cauchy problem in Rd, or the domain is periodic); hence (cid:107)cji(tn
Recalling the deﬁnition of dn

l ) because there are no boundary conditions (i.e., we solve
l )(cid:107)(cid:96)2 .

l )(cid:107)(cid:96)2 = (cid:107)cij(tn

ij, we have

Sij (tn
l )

l ) = −cji(tn
(cid:80)
(cid:80)

i

i,max
hn
i

mn+1

λn

(cid:80)

λn
max
hn
i

l∈L ωlmi(tn
l )

i ≤ 1,
κn

mn+1

i

Y ≤ 2τ

≤ 2τ

l∈L ωlmi(tn
l )

i(cid:54)=j∈I(Sij (tn

l ))

which is the desired result. The proof of the CFL condition for version 1 of the
algorithm follows the same lines. This concludes the proof.
Corollary 5.3. Let n ∈ N. Assume that τ is small enough so that the CFL
condition (5.3) holds for all i ∈ {1: I}. Let B ⊂ Af be a convex invariant set.
h ∈ B
Assume that {Un
and un+1

i | i ∈ {1: I}} ⊂ B. Then (i) {Un+1

| i ∈ {1: I}} ⊂ B (ii) un

∈ B.

i

h

Proof. The statement (i) is a direct consequence of Theorem 5.2. The statement
(ii) is a consequence of (4.7) from Lemma 4.1.
Corollary 5.4. Let B ⊂ Af be a convex invariant set containing the initial
data u0. Assume that {U0
i | i ∈ {1: I}} ⊂ B. Let N ∈ N. Assume that τ is small
enough so that the CFL condition (5.3) holds for all i ∈ {1: I} and all n ∈ {0: N}.
h ∈ B for all n ∈ {0: N + 1}.
i | i ∈ {1: I}} ⊂ B and un
Then {Un
h) Let B ⊂ Af be a convex invariant set con-
Remark 5.1. (Construction of u0
taining the initial data u0. If Pm(T 0
h ) is composed of piecewise Lagrange elements,
i | i ∈ {1:I}} ⊂ B.
h to be the Lagrange interpolant of u0, we have {U0
then deﬁning u0
Similarly if Pm(T 0
h ) is composed of Bernstein ﬁnite elements of degree two and higher,
h to be the Bernstein interpolant of u0 we have {U0
i | i ∈ {1:I}} ⊂ B;
then deﬁning u0
see Lai and Schumaker [27, Eq. (2.72)]. Note that the approximation of u0 is only
second-order accurate in this case independently of the polynomial degree of the Bern-
stein polynomials; see [27, Thm. 2.45]. In both cases the assumptions of Corollary 5.4
hold.

5.3. Discrete Geometric Conservation Law. Both the scheme (4.11) and
the scheme (4.35) satisfy the so-called Discrete Geometric Conservation Law (DGCL),
i.e., they preserve constant states.

Corollary 5.5 (DGCL). The schemes (4.11) and (4.35) preserve constant

states. In particular if Un

j = Un
i

for all j ∈ I(Sn

i ), then Un+1

i = Un
i .

Invariant domain preserving ALE

Proof. The partition of unity property implies that (cid:80)
that (cid:80)

ij = 0 for both
ij, which is common for both schemes, implies
ij = 0 (see (4.12)). For the scheme (4.35), Lemma 4.4, which we

schemes. Moreover, the deﬁnition dn

j∈I(Sn

i ) cn

j∈I(Sn

19

i ) dn

recall is a consequence of Lemma 3.2, implies that

((Un

j − Un

i ) ⊗ Wn

j + f (Un

i ) − f (Un

j ))·cn
ij.

Un+1

i = Un

i + dn

(cid:88)
j − Un
i )

ij(Un
τ

mn+1

i

j∈I(Sn
i )

+

Un+1

i = Un

(cid:88)
j − Un
i )

ij(Un
i + dn
τ

+

mn+1

i

For the scheme (4.11), Lemma 4.2 implies that

((Un

j − Un

i ) ⊗ Wn

j + f (Un

i ) − f (Un

j ))·cn
ij.

j∈I(Sn
i )
i for all j ∈ I(Sn

It is now clear that if Un

j = Un

i ), then Un+1

i = Un
i .

Remark 5.2. (DGCL) Note that although the DGCL seems to be given some im-
portance in the literature, Corollary 5.5 has no particular signiﬁcance. For scheme 2,
it is a direct consequence of Lemma 3.2 which is invoked to rewrite the scheme
(4.35) from the conservative form to the equivalent nonconservative form (4.36). For
scheme 1, it is a direct consequence of the deﬁnition of the mass update (4.10) which
is invoked to rewrite the scheme (4.11) from the conservative form to the equivalent
nonconservative form (4.18). The nonconservative form of both schemes is essential to
prove the invariant domain property. In other words, the DGCL is just a consequence
of the equivalence of the discrete conservative and nonconservative formulations.

inequality which is consistent with the inequality stated in Lemma 3.4.

5.4. Discrete entropy inequality. In this section we prove a discrete entropy
Theorem 5.6. Let (η, q) be an entropy pair for (1.1). Let n ∈ N and i ∈ {1: I}.
Assume that all the assumptions of Theorem 5.2 hold. Then the following discrete
entropy inequality holds for scheme 1:

(cid:0)mn+1

i

(5.5)

1
τ

η(Un+1

i

) − mn

i η(Un

ijη(Un
dn
j )

i )(cid:1) ≤ − (cid:88)
(cid:18) (cid:88)

∇·

j∈I(Sn
i )

j∈I(Sn
i )

(cid:90)

−

Rd

(cid:19)

(q(Un

j ) − η(Un

j )Wn

j )ψn

j (x)

ψn

i (x) dx

and the following holds for scheme 2:

(cid:0)mn+1

i

(5.6)

1
τ

i )(cid:1) ≤ − (cid:88)
(cid:18) (cid:88)

(q(Un

j∈I(Sn
i )

j∈I(Sn
i )

) − mn

i η(Un

η(Un+1

i

−(cid:88)

ωl

(cid:90)

l∈L

∇·

Rd

ijη(Un
dn
j )

j ) − η(Un

j )Wn

j )ϕj(x, tn
l )

(cid:19)

ϕi(x, tn

l ) dx

Proof. We only do the proof for scheme 2. The proof for scheme 1 is similar. Let
(η, q) be an entropy pair for the hyperbolic system (1.1). Let i ∈ {1:I} and let n ∈ N.

20

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

Then using (5.4), the CFL condition and the convexity of η, we have

(cid:18)
1 − (cid:88)

i(cid:54)=j∈I(Sn
i )

(cid:19)

(cid:88)

2dn
ij

τ

mn+1

i

+

τ

mn+1

i

i(cid:54)=j∈I(Sn
i )

2dn

ijη(U

n+1
ij

).

η(Un+1

i

) ≤ η(Un
i )

This can also be rewritten as follows:

(cid:0)η(Un+1

i

mn+1

i
τ

) − η(Un

i )(cid:1) ≤ (cid:88)

i(cid:54)=j∈I(Sn
i )

2dn

ij(η(U

n+1
ij

) − η(Un

i )).

Owing to (2.7) from Lemma 2.1, and recalling that the entropy ﬂux of the Riemann
problem (4.16) is (q(v) − η(v)Wn

ij we infer that
j ) − η(Un

j )Wn

j − q(Un

i ) + η(Un

i )Wn
j

ij. Inserting this inequality in the ﬁrst one, we have

η(U

n+1
ij

with t = (cid:107)cn

) ≤ 1
2 (η(Un
ij(cid:107)(cid:96)2/2dn

(cid:0)η(Un+1

i

mn+1

i
τ

(cid:1)·nn

ij

(cid:1)·nn

ij.

) − η(Un

j )·nn

i ) + η(Un

j )) − t(cid:0)q(Un
i )(cid:1) ≤ (cid:88)
− (cid:88)
(cid:90)
(cid:88)

(cid:0)q(Un
(cid:88)

j∈I(Sn
i )
ij(cid:107)(cid:96)2
(cid:107)cn

j∈I(Sn
i )

ϕi(x, tn
l )

By proceeding as in the proof of Lemma 4.4, we observe that

i − mn
mn+1
τ

i

=

ωl

Rd

l∈L
ij(cid:107)(cid:96)2 nn
Then using that (cid:107)cn
(cid:90)

(cid:0)mn+1

) − mn

η(Un+1

1
τ

i

i

−(cid:88)

ωl

i η(Un

∇·

Rd

j∈I(Sn
i )

i )(cid:1) ≤ − (cid:88)
(cid:18) (cid:88)

j∈I(Sn
i )

l∈L

j∈I(Sn
i )

ij = cn

ij, we conclude that

dijη(Un
j )

ij(η(Un
dn

j ) − η(Un
i ))

j ) − q(Un

i ) − (η(Un

i ))Wn
j

Wn

j ·∇ϕj(x, tn

l ) dx =

Wn

j ·cn
ij.

j ) − η(Un
(cid:88)

j∈I(Sn
i )

(cid:19)

(q(Un

j ) − η(Un

j )Wn

j )ϕj(x, tn
l )

ϕi(x, tn

l ) dx

This concludes the proof.

6. Numerical tests. In this section, we numerically illustrate the performance
of scheme 1 using SSP RK3. All the tests reported below have also been done with
version 2 and we have observed that the method works as advertised when used with
Euler time stepping, but we do not show the results for brevity. As expected from
Remark 4.3, we have indeed observed very small violations of the invariant domain
(maximum principle in the scalar case) when version 2 is combined with SSP RK3.

All the tests have been done with two diﬀerent codes. One code is written in F95
and uses P1 Lagrange elements on triangles. The other code is based on deal.ii [2], is
written in C++ and uses Q1 Lagrange elements on quadrangles. The mesh composed
of triangles is obtained by dividing all the quadrangles into two triangles. The same
numbers of degrees of freedom are used for both codes.

Invariant domain preserving ALE

21

6.1. Analytical scalar-valued solution. To test the convergence property of
the SSP RK3 version of scheme 1, as described in Algorithm 3, we solve the linear
transport equation in the domain D0 = (0, 1)2:

∂tu + ∇·(βu) = 0,

(6.1)
where β = (sin(πx1) cos(πx2) cos(2πt),− cos(πx1) sin(πx2) cos(2πt))T. In both codes
the ALE velocity is chosen by setting Wn
h is the Lagrange interpolant
h . Notice that there is no issue with boundary condition since β·n|∂D0 =
of β on T n
0. We ﬁrst test the accuracy in time of the algorithm by setting dn
ij = 0, i.e., the

u0(x) = x1 + x2,

i ), i.e., wn

i = β(an

Table 6.1: Rotation problem (6.1) with Lagrangian formulation, CFL=1.0

Without viscosity

With viscosity

# dofs
81
289
1089
4225
16641
66049

Q1, L1-norm
6.46E-04
-
1.16E-04
1.41E-05
1.76E-06
2.26E-07
2.82E-08

2.48
3.03
3.01
2.96
3.00

P1, L1-norm
1.76E-03
-
2.46E-04
3.23E-05
4.20E-06
5.76E-07
9.57E-08

2.85
2.93
2.94
2.87
2.59

Q1, L1-norm
1.31E-02
-
4.28E-03
1.23E-03
3.29E-04
8.50E-05
2.16E-05

1.61
1.80
1.90
1.95
1.97

P1, L1-norm
1.13E-02
-
3.63E-03
1.04E-03
2.78E-04
7.19E-05
1.83E-05

1.64
1.80
1.90
1.95
1.98

viscosity is removed. We report the error measured in the L1-norm at time t = 0.5
in the left part of Table 6.1. The computations are done with CF L = 1. The third-
order convergence in time is conﬁrmed. Note that there is no space error due to the
particular choice of the ALE velocity and the initial data.

In the second test we put back the viscosity dn
ij, Un

ij. Notice that the particular choice
ij|; hence the
i , Un
of the ALE velocity implies that λmax(gn
viscosity is second-order in space instead of being ﬁrst-order. This phenomenon makes
the algorithm second-order in space (in addition to being conservative and maximum
principle preserving). The error in the L1-norm at time t = 0.5 is shown in the right
part of Table 6.1.

j ) = |(βn

i − βn

j ) · nn

j , nn

6.2. Nonlinear scalar conservation equations. We now test scheme 1 on

nonlinear scalar conservation equations.

6.2.1. Deﬁnition of the ALE velocity. In nonlinear conservation equations,
solutions may develop shocks in ﬁnite time. In this case, using the purely Lagrangian
velocity leads to a breakdown on the method in ﬁnite time. The breakdown manifests
itself by a time step that goes to zero as the current time approaches the time of
formation of the shock. One way to avoid this breakdown is to use an ALE velocity
that is a modiﬁed version of the Lagrangian velocity.

Many techniques have been proposed in the literature to construct an ALE ve-
locity. For instance, in Gastaldi [17], the ALE velocity is obtained by modeling the
deformation of the domain as an “elastic” solid, see Gastaldi [17, Eq. (4.5)-(4.6)].
In Yang and Mavriplis [37], several mesh moving strategies are mentioned, includ-
ing tension spring analogy, torsion spring analogy, truss analogy and linear elasticity
analogy. In Wells et al. [36, Eq. (7)], an elliptic problem is used to construct an ALE
velocity for the Euler equations. The purpose of the present paper is not to design an
optimal ALE velocity but to propose an algorithm that is conservative and invariant

22

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

domain preserving for any reasonable ALE velocity. We now propose an algorithm to
compute an ALE velocity based on ideas from Loub`ere et al. [31]. The only purpose of
this algorithm is to be able to run the nonlinear simulations of §6.2.2 and §6.2.3 past
the time of formation of shocks. We refer the reader to the abundant ALE literature
to design other ALE velocities that better suit the reader’s goals.
i,Lg =
i + τ∇uf (Un
i ) ∈ Rd for scalar equations.
an
Then, given L ∈ N \ {0}, we deﬁne a smooth version of the Lagrangian mesh by
smoothing the position of the geometric Lagrange nodes as follows:

We ﬁrst deform the mesh by using the Lagrangian motion, i.e., we set an+1

i ∈ R and ∇uf (Un

i ); we recall that Un

(cid:18)



an+1,0

i

:=an+1

(cid:88)
i,Lg , i ∈ {1:I}

1

an+1,l

i

:=

|I(Si)| − 1

i,Sm :=an+1,L
an+1

i

i(cid:54)=j∈I(Si)
, i ∈ {1:I}.

(6.2)

(cid:19)

an+1,l−1

j

, i ∈ {1:I}

, l ∈ {1:L}

Finally, the actual ALE motion is deﬁned by

an+1
i = ωan+1

i,Lg + (1 − ω)an+1
i,Sm,

i ∈ {1:I}

where ω is a user-deﬁned constant.
In all our computations, we use ω = 0.9 and
L = 2. The above method is similar to that used in Loub`ere et al. [31]. As mentioned
in [31], a more advanced method consists of choosing ω pointwise by using the right
Cauchy-Green strain tensor. We have not implemented this version of the method
since the purpose of the tests in the next sections is just to show that the present
method works as it should for any reasonable ALE velocity. The objective of this
work is not to construct a sophisticated algorithm for the ALE velocity.

6.2.2. Burgers equation. We consider the inviscid Burgers equation in two

space dimensions

(6.3)

∂tu + ∇·( 1

2 u2β) = 0,

u0(x) = 1S,

where β = (1, 1)T, S is the unit square (0, 1)2, and 1E denotes the characteristic
function of the set E ⊂ Rd. The solution to this problem at time t > 0 and at
x = (x1, x2) is as follows. Assume ﬁrst that x2 ≤ x1, then deﬁne α = x1 − x2. Let
α0 = 1 − t

2 . There are three cases. If α > 1, then u(x1, x2, t) = 0.
if 0 ≤ x2 < t
if t ≤ x2 < t
otherwise.

If α ≤ α0, then u(x1, x2, t) =

(6.4)

 x2
(cid:40) x2

t
1
0

t
0

2 + 1 − α

if 0 ≤ x2 <(cid:112)2t(1 − α)

otherwise.

(6.5)

If α0 < α ≤ 1, then u(x1, x2, t) =

If x2 > x1, then u(x1, x2, t) := u(x2, x1, t). The computation are done up to T = 1 in
the initial computational domain D0 = (−0.25, 1.75)2. The boundary of Dn does not
move in the time interval (0, 1), i.e., ∂D0 = ∂Dn for any n ≥ 0. The results of the
convergence tests are reported in Table 6.2. The solution computed on a 128×128
mesh and the mesh at T = 1 are shown in Figure 6.1.

Invariant domain preserving ALE

23

Table 6.2: Burgers equation, convergence tests, CF L = 0.1

Q1

P1

# dofs
81
289
1089
4225
16641

L2-error

L1-error

L2-error

L1-error

5.79E-01
4.20E-01
2.96E-01
2.14E-01
1.56E-02

-

0.46
0.51
0.47
0.45

6.00E-01
3.88E-01
2.32E-01
1.32E-01
7.40E-02

-

0.63
0.74
0.82
0.83

5.80E-01
4.43E-01
3.12E-01
2.17E-01
1.23E-01

-

0.39
0.51
0.53
0.82

6.17E-01
4.68E-01
2.86E-01
1.55E-01
7.57E-02

-

0.40
0.71
0.88
1.04

Fig. 6.1: Burgers equation. Left: Q1 FEM with 25 contours; Center left: Final Q1
mesh; Center right: P1 FEM with 25 contours; Right: Final P1 mesh.

6.2.3. Nonconvex ﬂux. Our last scalar example is a nonlinear scalar conser-

vation law with a non-convex ﬂux
∂tu + ∇·f (u) = 0,

(6.6)

u0(x) = 3.25π1(cid:107)x(cid:107)(cid:96)2 <1 + 0.25π.

where f (u) = (sin u, cos u)T. This test, henceforth referred to as KPP, was proposed

Fig. 6.2: KPP problem. Left: Q1 FEM with 25 contours; Center left: Final Q1 mesh;
Center right: P1 FEM with 25 contours; Right: Final P1 mesh.

in Kurganov et al. [26]. It is a challenging test for many high-order numerical schemes
because the solution has a two-dimensional composite wave structure. The initial com-
putational domain is D0 = [−2.5, 1.5]× [−2.0, 2.5]. Note that the background velocity
2 )T. It can be shown that the computational
is constant and equal to β = (
domain keeps a rectangular shape in the time interval (0, 1). The computation is done

2 ,−√

2

√

2

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

24
up to time T = 1 using Q1 and P1 ﬁnite elements on structured meshes 128 × 128
with CF L = 0.1. The results are shown in Figure 6.2

6.3. Compressible Euler equations. We ﬁnish the series of tests by solving

the compressible Euler equations in R2

(6.7)

∂tρ + ∇·(ρu)

= 0,
∂t(ρu) + ∇·(ρu ⊗ u + pI) = 0,
∂tE + ∇·(u(E + p))
= 0,

with an ideal gas equation of state, p = (γ − 1)(E − 1
(cid:96)2 ) where γ > 1, and
appropriate initial and boundary conditions. The motion of the mesh is done as
described in (6.2) with an+1
h is the approximate ﬂuid
velocity at time tn.

i ) where un

2 ρ(cid:107)u(cid:107)2

i,Lg = an

i + τ un

h(an

6.3.1. Sod problem. We use the so-called Sod shocktube problem to test the
it is a Riemann problem with the

convergence of our algorithm (version-1 only);
following initial data:

p0(x) = 1x1<0.5 + 0.1 1x1>0.5.

ρ0(x) = 1.0, u0(x) = 0.0,

(6.8)
and γ = 1.4, see e.g., Toro [34, §4.3.3]. The computational domain at the initial time
is the unit square (0, 1)2. Dirichlet boundary conditions are enforced on the left and
right sides of the domain and we do not enforce any boundary conditions on the upper
and lower sides. The computation is done up to T = 0.2. Since no wave reaches the
left and the right boundaries in the time interval 0 < t < T = 0.2, the computational
domain remains a square for the whole duration of the simulation. The solution being
one-dimensional, the convergence tests are done on ﬁve meshes with reﬁnements made
only along the x1-direction. These meshes have 20×4, 40×4, . . ., 1280×4 cells and
are uniform at t = 0. The results of the convergence test are shown in Table 6.3. We
show in this table the L1- and L2-norm of the error on the density. The convergence
orders are compatible with what is usually obtained in the literature for this problem.

Table 6.3: SOD problem, ALE, convergence test, T = 0.2, CF L = 0.1

Q1

P1

# dofs
1605
3205
6405
12805

L2-norm

L1-norm

L2-norm

L1-norm

2.47E-02
1.84E-02
1.36E-02
1.05E-02

-

0.43
0.42
0.39

1.51E-02
9.99E-03
6.42E-03
4.07E-03

-

0.60
0.64
0.66

2.82E-02
2.07E-02
1.56E-02
1.26E-02

-

0.45
0.40
0.32

1.77E-02
1.15E-02
7.45E-03
4.82E-03

-

0.61
0.63
0.63

6.4. Noh problem. The last problem that we consider is the so-called Noh
problem, see e.g., Caramana et al. [6, §5]. The computational domain at the initial
time is D0 = (−1, 1)2 and the initial data is

(6.9)

ρ0(x) = 1.0, u0(x) = − x
(cid:107)x(cid:107)(cid:96)2

,

p0(x) = 10−15.

Invariant domain preserving ALE

25

A Dirichlet boundary condition is enforced on all the dependent variables at the
boundary of the domain for the entire simulation. We use γ = 5
3 . The solution to
this problem is known; for instance, the density is equal to

(6.10)

ρ(t, x) = 161{(cid:107)x(cid:107)(cid:96)2 < t

3} + (1 +

t

(cid:107)x(cid:107)(cid:96)2

)1{(cid:107)x(cid:107)(cid:96)2 > t

3}.

The ALE velocity at the boundary of the computational domain is prescribed to be
equal to the ﬂuid velocity, i.e., the boundary moves inwards in the radial direction
with speed 1. The ﬁnal time is chosen to be T = 0.6 in order to avoid that the
shockwave collides with the moving boundary of the computational domain which
happens at t = 3
various meshes which are uniform at t = 0: 30×30, 60×60, etc.

We show in Table 6.4 the L1- and the L2-norm of the error on the density for

4 since the shock moves radially outwards with speed 1
3 .

Table 6.4: Noh problem, convergence test, T = 0.6, CF L = 0.2

Q1

P1

# dofs
961
3721
14641
58081
231361

L2-norm

L1-norm

L2-norm

2.60
1.81
1.16
7.66E-01
5.21E-01

-

0.52
0.64
0.60
0.56

1.44
8.45E-01
4.21E-01
2.10E-01
1.06E-01

-

0.77
1.01
0.99
0.98

2.89
2.21
1.42
9.39E-01
6.33E-01

-

0.39
0.64
0.59
0.57

L1-norm
1.71
1.09

5.15E-01
2.60E-01
1.28E-01

-

0.64
1.08
0.99
1.02

Preserving the radial symmetry of the solution as best as possible on non-uniform
meshes is an important property for Lagrangian hydrocodes in the context of the
inertial conﬁnement fusion project, which involves simulating implosion problems,
see Caramana et al. [6]. In these problems, mesh-induced violation of the spherical
symmetry may artiﬁcially trigger the Rayleigh-Taylor instability and thereby may
hamper the understanding of the real dynamics of the implosion. We show in the
top row of Figure 6.3 simulations that are done on a uniform mesh composed of
96×96 square cells for the Q1 approximation ((2×96)×(2×96) triangular cells for the
P1 approximation), and we compare them with simulations done on a nonuniform
mesh constructed as follows: The initial square D0 is divided in four quadrants; in
the bottom left quadrant the mesh is composed of 32×32 square cells; in the top left
quadrant the mesh is composed of 32×64 rectangular cells; in the top right quadrant
the mesh is composed of 64×64 square cells; the bottom right quadrant is composed
of 64×32 rectangular cells. This is a generic test for many Lagrangian hydrocodes, see
e.g., Dobrev et al. [13, §8.4]. We notice a slight break of symmetry, but the solution
does not develop any Rayleigh-Taylor-type instability as it is often the case for many
other Lagrangian algorithms.

We show in Figure 6.4 a zoom around the center of the computational domain
for both the Q1 and the P1 approximations. We notice a slight motion of the center,
but there is no dramatic breakdown of the structure of the solution.

7. Concluding remarks. In this paper we have developed a framework for con-
structing ALE algorithms using continuous ﬁnite elements. The method is invariant
domain preserving on any mesh in arbitrary space dimension. The methodology ap-
plies to any hyperbolic system which has such intrinsic property. If the system at

26

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

Fig. 6.3: Noh problem. Uniform meshes in top row, nonuniform meshes in bottom
row. From left to right: density ﬁeld with Q1 approximation (25 contour lines); mesh
with Q1 approximation; density ﬁeld with P1 approximation (25 contour lines); mesh
with P1 approximation.

Fig. 6.4: Noh problem. From left to right: Zoom around the center of the nonuniform
Q1 mesh at T = 0.6 (notice the small displacement of the center); Cross section along
the line connecting the points (−1,−1) and (1, 1) for the Q1 solutions on the uniform
mesh and on the nonuniform mesh; Zoom around the center of the nonuniform P1
mesh at T = 0.6; Cross section along the line connecting the points (−1,−1) and
(1, 1) for the P1 solutions on the uniform mesh and on the nonuniform mesh;

hand has an entropy pair, then the method also satisﬁes a discrete entropy inequality.
The time accuracy of one of the methods (scheme 1) can be increased by using SSP
time discretization techniques. This makes the method appropriate to use as a safe-
guard when constructing high-order accurate discretization of the system which may
violate the invariant domain property. The equivalence between the conservative and
non-conservative formulations implies the DGCL condition (preservation of constant
states). The new methods have been tested on a series of benchmark problems and
the observed convergence orders and numerical performance are compatible with what
is reported in the literature.

References.

[1] M. Ainsworth. Pyramid algorithms for Bernstein-B´ezier ﬁnite elements of high,

Invariant domain preserving ALE

27

nonuniform order in any dimension. SIAM J. Sci. Comput., 36(2):A543–A569,
2014.

[2] W. Bangerth, R. Hartmann, and G. Kanschat. deal.II – a general purpose object
oriented ﬁnite element library. ACM Trans. Math. Softw., 33(4):24/1–24/27,
2007.

[3] A. Barlow. A compatible ﬁnite element multi-material ALE hydrodynamics al-

gorithm. Internat. J. Numer. Methods Fluids, 56:953–964, 2007.

[4] W. Boscheri and M. Dumbser. A direct arbitrary-Lagrangian-Eulerian ADER-
WENO ﬁnite volume scheme on unstructured tetrahedral meshes for conservative
and non-conservative hyperbolic systems in 3D. J. Comput. Phys., 275:484–523,
2014.

[5] A. Bressan. Hyperbolic systems of conservation laws, volume 20 of Oxford Lecture
Series in Mathematics and its Applications. Oxford University Press, Oxford,
2000. The one-dimensional Cauchy problem.

[6] E. Caramana, M. Shashkov, and P. Whalen. Formulations of artiﬁcial viscosity
for multi-dimensional shock wave computations. J. Comput. Phys., 144(1):70–97,
1998.

[7] E. J. Caramana and R. Loub`ere. “Curl-q”: a vorticity damping artiﬁcial viscosity
for essentially irrotational Lagrangian hydrodynamics calculations. J. Comput.
Phys., 215(2):385–391, 2006.

[8] G. Carr´e, S. Del Pino, B. Despr´es, and E. Labourasse. A cell-centered Lagrangian
hydrodynamics scheme on general unstructured meshes in arbitrary dimension.
J. Comput. Phys., 228(14):5160–5183, 2009.

[9] G.-Q. Chen. Euler equations and related hyperbolic conservation laws. In Evo-
lutionary equations. Vol. II, Handb. Diﬀer. Equ., pages 1–104. Elsevier/North-
Holland, Amsterdam, 2005.

[10] J. Cheng and C.-W. Shu. Positivity-preserving Lagrangian scheme for multi-

material compressible ﬂow. J. Comput. Phys., 257(part A):143–168, 2014.

[11] K. N. Chueh, C. C. Conley, and J. A. Smoller. Positively invariant regions for
systems of nonlinear diﬀusion equations. Indiana Univ. Math. J., 26(2):373–392,
1977.

[12] C. M. Dafermos. Hyperbolic conservation laws in continuum physics, volume 325
of Grundlehren der Mathematischen Wissenschaften [Fundamental Principles of
Mathematical Sciences]. Springer-Verlag, Berlin, 2000.

[13] V. Dobrev, T. Kolev, and R. Rieben. High-order curvilinear ﬁnite element meth-
ods for Lagrangian hydrodynamics. SIAM J. Sci. Comput., 34(5):B606–B641,
2012.

[14] C. Farhat, P. Geuzaine, and C. Grandmont. The discrete geometric conservation
law and the nonlinear stability of ALE schemes for the solution of ﬂow problems
on moving grids. J. Comput. Phys., 174(2):669–694, 2001.

[15] L. Ferracina and M. N. Spijker. An extension and analysis of the Shu-Osher
representation of Runge-Kutta methods. Math. Comp., 74(249):201–219, 2005.
[16] H. Frid. Maps of convex sets and invariant regions for ﬁnite-diﬀerence systems

of conservation laws. Arch. Ration. Mech. Anal., 160(3):245–269, 2001.

[17] L. Gastaldi. A priori error estimates for the Arbitrary Lagrangian Eulerian

formulation with ﬁnite elements. J. Num. Math., 9(2):123–156, 2001.

[18] S. Gottlieb, D. I. Ketcheson, and C.-W. Shu. High order strong stability preserv-

ing time discretizations. J. Sci. Comput., 38(3):251–289, 2009.

[19] J.-L. Guermond and B. Popov. Fast estimation of the maximum wave speed in the

28

J.-L. GUERMOND, B. POPOV, L. SAAVEDRA, Y. YANG

Riemann problem for the euler equations. 2015. arXiv:1511.02756, Submitted.

[20] J.-L. Guermond and B. Popov.

Invariant domains and ﬁrst-order continuous
ﬁnite element approximation for hyperbolic systems. 2015. arXiv:1509.07461,
Submitted.

[21] J.-L. Guermond, B. Popov, and V. Tomov. Entropy-viscosity method for the sin-
gle material euler equations in Lagrangian frame. Computer Methods in Applied
Mechanics and Engineering, 300:402 – 426, 2016.

[22] H. Guillard and C. Farhat. On the signiﬁcance of the geometric conservation law
for ﬂow computations on moving meshes. Comput. Methods Appl. Mech. Engrg.,
190(11-12):1467–1482, 2000.

[23] I. Higueras. Representations of Runge-Kutta methods and strong stability pre-

serving methods. SIAM J. Numer. Anal., 43(3):924–948, 2005.

[24] D. Hoﬀ. Invariant regions for systems of conservation laws. Trans. Amer. Math.

Soc., 289(2):591–610, 1985.

[25] T. Kolev and R. Rieben. A tensor artiﬁcial viscosity using a ﬁnite element

approach. J. Comput. Phys., 228(22):8336–8366, 2009.

[26] A. Kurganov, G. Petrova, and B. Popov. Adaptive semidiscrete central-upwind
schemes for nonconvex hyperbolic conservation laws. SIAM J. Sci. Comput., 29
(6):2381–2401 (electronic), 2007.

[27] M.-J. Lai and L. L. Schumaker. Spline functions on triangulations, volume 110 of
Encyclopedia of Mathematics and its Applications. Cambridge University Press,
Cambridge, 2007.

[28] P. Lax. Weak solutions of nonlinear hyperbolic equations and their numerical

computation. Comm. Pure Appl. Math., 7:159–193, 1954.

[29] P. D. Lax. Hyperbolic systems of conservation laws. II. Comm. Pure Appl. Math.,

10:537–566, 1957.

[30] K. Lipnikov and M. Shashkov. A framework for developing a mimetic tensor
artiﬁcial viscosity for Lagrangian hydrocodes on arbitrary polygonal meshes. J.
Comput. Phys., 229(20):7911–7941, 2010.

[31] R. Loub`ere, P.-H. Maire, M. Shashkov, J. Breil, and S. Galera. ReALE: A
reconnection-based arbitrary-Lagrangian-Eulerian method. Journal of Compu-
tational Physics, 229(12):4724 – 4761, 2010.

[32] G. Scovazzi, E. Love, and M. Shashkov. Multi-scale Lagrangian shock hydrody-
namics on Q1/P0 ﬁnite elements: Theoretical framework and two-dimensional
computations. Comput. Methods Appl. Mech. Engrg., 197:1056–1079, 2008.

[33] M. Shashkov and J. Campbell. A tensor artiﬁcial viscosity using a mimetic ﬁnite

diﬀerence algorithm. J. Comput. Phys., 172(2):739–765, 2001.

[34] E. F. Toro. Riemann solvers and numerical methods for ﬂuid dynamics. Springer-

Verlag, Berlin, third edition, 2009. A practical introduction.

[35] F. Vilar, P.-H. Maire, and R. Abgrall. A discontinuous Galerkin discretization
for solving the two-dimensional gas dynamics equations written under total La-
grangian formulation on general unstructured grids. J. Comput. Phys., 276(0):
188 – 234, 2014.

[36] B. Wells, M. Baines, and P. Glaister. Generation of Arbitrary Lagrangian-
Eulerian (ALE) velocities, based on monitor functions, for the solution of com-
pressible uid equations. Int. J. Numer. Meth. Fluids, 47:1375–1381, 2005.

[37] Z. Yang and D. J. Mavriplis. Unstructured dynamic meshes with higher-order
time integration schemes for the unsteady Navier-Stokes equations. AIAA Paper
2005–1222, 2005.

