6
1
0
2

 
r
a

M
3

 

 
 
]

M
D
.
s
c
[
 
 

1
v
9
7
1
1
0

.

3
0
6
1
:
v
i
X
r
a

Read networks and k-laminar graphs

Finn V¨olkel ∗

Eric Bapteste † Michel Habib ∗ ‡

Chloe Vigliotti†§

Philippe Lopez†

March 4, 2016

Abstract

In this paper we introduce k-laminar graphs a new class of graphs which extends
the idea of Asteroidal triple free graphs. Indeed a graph is k-laminar if it admits a
diametral path that is k-dominating. This bio-inspired class of graphs was motivated
by a biological application dealing with sequence similarity networks of reads (called
hereafter read networks for short). We brieﬂy develop the context of the biological
application in which this graph class appeared and then we consider the relationships
of this new graph class among known graph classes and then we study its recognition
problem. For the recognition of k-laminar graphs, we develop polynomial algorithms
when k is ﬁxed. For k=1, our algorithm improves a Deogun and Krastch’s algorithm
(1999). We ﬁnish by an NP-completeness result when k is unbounded.

Keywords: diameter, asteroidal triple, diametral path graphs, k-dominating paths, k-

laminar graphs, (meta)genomic sequences, reads, read networks.

1

Introduction and biological motivation

Roughly speaking a k-laminar graph has a spine and all others vertices are closed to the spine
(a more formal deﬁnition will be given in the next section). The deﬁnition of this graph class
was motivated by its appearance in reads similarity networks of genomics or metagenomics
data [4] see Figure 1. In sequence similarity networks, vertices are biological sequences (ei-
ther DNA or protein sequences) and two vertices are adjacent if the corresponding sequences
are similar, meaning that the pair shows a high enough BLAST score [2] and matches over
more than 90% of the longest sequence. Here, sequences come from a metagenomic project
and are usually called reads. Basically, reads are raw sequences that come oﬀ a sequencing

∗IRIF, CNRS and Univ. Paris Diderot, France
†Team Adaptation, Integration, Reticulation, Evolution Lab. CNRS and IBPS, Univ. Pierre et Marie
‡GANG Project, Inria Paris, France
§MECADEV, CNRS and Museum National d’Histoire Naturelle, Paris

Curie, Paris, France

1

machine, they are random DNA fragments, roughly 300 characters long, coming from the
various microbial genomes that are found in a given environment. In our multidisciplinary
approach [3] we wonder if two species of lizards can be distinguished by the analysis of read
networks sequenced from the microbial DNA (microbiome) present in their gastro enteric
tract. These networks are useful to biologists because, in addition to allowing the visualiza-
tion of the genetic diversity that is found in the microbes of a given environment, they oﬀer
an alternative to more classical approaches, like the building of contigs1, where one tries to
rebuild the original genomic sequences of each organism out of the fragments, after a step of
binning. The step of binning is a process which clusters contigs or reads, generally based on
their composition, and tries to assign them to Operational Taxonomic Units (OTUs - which
is the most commonly used microbial diversity unit)[16]. Sequence similarity networks are
indeed a relaxation of de Bruijn graphs [7], which are commonly used to build contigs, since
they are undirected and, more importantly, since two sequences are adjacent if they show a
high enough, but not necessarily exact, similarity. In particular, they allow for the quantiﬁ-
cation of the genetic diversity of an ensemble of reads. For example of such networks, see
Figure 1.

When a subset of reads covers a contiguous part of a genome (or parts of the genomes
which have the same origin (common ancestor) also called homologous parts), they assemble
into a k-laminar graph in sequence similarity networks, thus deﬁning a singular genomic
context (e.g. a suite of genes) on which biologists can measure the genetic diversity of the
community. However, some genetic sequences, like repeats or transposases2, can be found
in more than one genomic context (i.e. when copies of the same transposase are inserted
in multiple distinct locations of a genome), eﬀectively linking together k-laminar graphs
in sequence similarity networks. Building contigs out of sequences from such connected
components is an especially diﬃcult task.

To sum it up, sequence similarity networks of reads are thus composed of k-laminar parts,
corresponding to singular regions of the genomes of a given environment, joined together by
groups of vertices corresponding to repetitions in the genomes of a given environment. Identi-
fying k-laminar parts in such networks, and eventually achieving a k-laminar decomposition,
is thus of major interest to biologists.

2 k-laminar graphs

The graphs considered here are ﬁnite, loopless and undirected. For a connected graph G,
with vertex set V (G) and edge set E(G), we denote by d(x, y) for x, y ∈ V (G) the dis-
tance between two vertices, i.e., the length of a shortest path joining x to y in G. We will
use also the notion of eccentricity of a vertex x ∈ V (G): ecc(x) = maxy(cid:54)=x,y∈V (G)d(x, y)
and so the diameter is diam(G) = maxx∈V (G)ecc(x), similarly the radius is deﬁned as
radius(G) = minx∈V (G)ecc(x). Furthermore let us denote by M axEcc(G) the set of all

1a contig is a simple path in the approach based on the de Bruijn graph for assembling reads [15].
2transposase is a self-replicating enzyme that can insert itself in various part of genome, and is thus found

in a variety of genomic contexts.

2

Figure 1: Two read graphs: the left one is a 4-laminar graph, the right one contains big
cycles but can be decomposed into 4-laminars parts. Data used here comes from our project
[3].

vertices of maximum eccentricity. When there is no ambiguity for a graph G we will denote
by n, m respectively |V (G)|,|E(G)|.

We extend this notion to the distance of vertex to a path, namely d(x, µ), for some path µ,
is the smallest distance from x to some vertex on µ. N (x) will be the standard neighborhood
of a vertex and we use also the notation N [x] = N (x) ∪ {x} for the closed neighborhood.
Similarly N k(x) the k-neighborhood, i.e. the vertices with distance equal to k from x or
more formally N k(x) := {y | d(x, y) = k}. We denote by N k[x] all vertices with distance
less or equal to k, i.e. N k[x] := {y | d(x, y) ≤ k} called the closed k-neighborhood. When
G is connected, the maximum length of a path is called the diameter of G and denoted by
diam(G).

In this section we recall some standard deﬁnitions on graphs and introduce the notion of

laminar graphs and the practical motivations of such a deﬁnition.

Deﬁnition 1. An asteroidal triple (AT) is a triple of vertices such that each pair is joined
by a path that avoids the neighborhood of the third.

An AT-free graph is a graph that does not contain any AT. Intuitively if a graph does not
contain any AT, then it cannot ”expand” in more than 2 directions. The following deﬁnition
of laminar graphs introduced here, is to generalize this intuitive notion of linearity.

Deﬁnition 2. A path µ of a graph G is a diametral path if the length of µ is equal to diam(G).

3

Furthermore for every ﬁxed integer k, a path µ in a graph G is called a k-dominating path if
∀x ∈ V (G) we have d(x, µ) ≤ k.

Deﬁnition 3. A graph G is called k-laminar (resp.
dominating diametral path (resp. if every diametral path is k-dominating).

strongly k-laminar) if G has a k-

Proposition 4. [8] AT-free graphs are 1-laminar.

Proof. Corneil, Olariu and Stewart proved that AT-free graphs contain a dominating pair
that achieves the diameter. Hence, AT-free graphs are 1-laminar.

Deﬁnition 5. A comparability graph is a graph G whose edge set E(G) can be transitively
oriented. A cocomparability graph is simply the complement of a comparability graph.

It is well known that cocomparability graphs are AT-free [9]. Therefore also cocompara-

bility graphs and interval graphs are 1-laminar.

a•

•
b

e•
•
c

•
g

f•

d•

h•

G1

Figure 2: µ = [a, b, c, d, h] is a dominating diametral path of G1, and (a, f, h) is an AT.

As shown by the graph G1 of Figure 2, not all 1-laminar graphs are AT-free graphs. Thus
AT-free graphs (cid:40) 1-laminar. Furthermore AT-free are not always strongly 1-laminar as can
be seen with the graph G2 of Figure 3. To complete the picture, the class of AT-free graphs
overlaps the class of 1-strongly laminar as can be seen with the graph G3 of Figure 4.

g•

•
e

f•

•
d

G2

•
b

•
a

•
c

Figure 3: G2 is AT-free but µ = [a, b, c, d, e] is a non dominating diametral path of G2.

The smallest k such that a graph is k-laminar is called the laminar index of G and denoted
by Laminar(G). This invariant is well deﬁned since obviously Laminar(G) ≤ diam(G) and

4

G3

f•

•
a

g•

•
b

h•

•
c

i•

•
d

j•

•
e

Figure 4: G3 is not AT-free, (g, i, d) is an AT, but G3 is 1-strongly laminar.

furthermore if a center of the graph belongs to a diametral path: Laminar(G) ≤ radius(G).
This paper is devoted to the study of (strongly) k-laminar graphs, their structure but also
the existence of polynomial recognition algorithms. Since it is well known that a graph may
have an exponential number of diametral paths (see for example the graph in Figure 4), at
ﬁrst glance we can only state that the recognition problem of strongly k-laminar paths is
in co-NP. In [10], Deogun and Kratsch introduced a very similar graph class, namely the
diametral path graphs.

Deﬁnition 6. [10] A graph G is called a diametral path graph if every connected induced
subgraph H of G has a dominating diametral path or equivalently H is a 1-laminar graph
using deﬁnition 3.

It is not hard to see that all diametral path graphs are 1-laminar. But 1-laminar graphs
strictly contain diametral path graphs, as can be seen with the graph G1 \ {d} which is no
1-laminar. Therefore G1 ∈ 1-laminar graphs \ diametral path graphs.

Using a polynomial time algorithm [10] for testing if a graph has a dominating diametral

path, we know that the recognition of 1-laminar graphs is polynomial.

Moreover Deogun and Kratsch were able to prove that diametral path graphs that are
trees or chordal graphs have simple forbidden subgraphs (polytime-recognizable). But to
our knowledge it is still an open question whether diametral path graphs can be recognized
in polynomial time.

The remaining part of the paper is organized as follows:
In section 3 we show that the recognition of strongly laminar graphs is polynomial, such
as the recognition of k-laminar graphs when k is ﬁxed. To this aim we improve an algorithm
from [10] to recognize 1-laminar graphs and we generalize it for every ﬁxed k.

In section 4 we present strong evidence that it is intractable to ﬁnd the laminar index.
In fact we present a reduction which proves that recognizing if a graph G is k-laminar is

NP-complete, for a given range of k values in O((cid:112)|V (G)|).

3 Polynomial algorithms

The main contribution of this section is that we present a polynomial recognition algorithms
for any ﬁxed k for k-laminar (resp.
strongly k-laminar) graphs. Let us begin with the
strongly case.

5

g•
e•

f •

G4
•
b

•
a

•
c

•
d

G3
h•
•
c
f •
g•
h•
•
•
m
n

f•
•
a

G5

g•
•
b

•
o

a• b• c•d•e•

•
i

•
j

•
k

i•
•
d

j•
•
e

•
l

1-strongly laminar

Diametral Path Graphs

AT-free

G2 \ d

G2
•
b

•
a

•
c

g•

•
e

f•
•
d

a•

d•e• f•
•
•
c
b
h•G1

•
g

1-laminar

. . .

k-laminar

Figure 5: Relationships among the main graph classes considered so far, including that
AT-free ⊂ Diametral Path Graphs as ﬁrst noticed in [13].

3.1 Strongly k-laminar graphs

First we need an easy lemma.
Lemma 7. Let x ∈ M axEcc(G) and H be an induced subgraph of G containing x.
If
eccH(x) = diam(G) then there exists a shortest path µ = [x, y] in H and G of size diam(G).
Proof. We notice that eccG(x) ≤ eccH(x). In case of equality it yields that there exists a
path µ = [x, y] in H of length diam(G). µ is still a shortest path with no shortcut in G,
unless x ∈ M axEcc(G).
Theorem 8. The recognition of strongly k-laminar graphs can be done in O(|M axEcc(G)|nm)
bounded by O(n2m) for every ﬁxed k.

Proof. If a graph is not strongly k-laminar then there exists some diametral path that does
not pass through the k-neighborhood of some vertex x. It suﬃces therefore to verify that
every diametral path passes through N k[x] ∀x ∈ V . This can easily be done by recalculating
the distance matrix in G \ N k[x] for every x. We know that diam(G \ N k[x]) ≥ diam(G).

6

If for some vertex x dG\N k[x](a, b) = dG(a, b) = diam(G), using lemma 7 we know there
exsit some path µ in G which is a diametral path that does not pass through N k[x] and
therefore the strongly laminar condition is not satisﬁed.
We need for every vertex x to compute G(cid:48) = G \ N k[x] which can be done O(|V (G| +
|E(G)|) using a BFS. But then we must compute the eccentricity of all M axEcc(G) vertices in
G(cid:48) which can be done in a naive way by processing |M axEcc(G)| BFS’s in O(|V (G(cid:48))|.|E(G(cid:48))|).

Therefore for each k this can be done in O(|M axEcc(G)|nm), i.e., in O(n2m).

As an immediate consequence:

Corollary 9. The computation of the smallest k for which a graph G is k-strongly laminar
is polynomial.
Proof. Since 1 ≤ k ≤ n − 1 and we can use a dichotomic process of the above algorithm,
which yields a complexity of O(log(n)n2m).

3.2 1-laminar graphs

Let us now describe an improved variation of the O(n3m) Deogun and Kratsch’s algorithm
[10], searching for the existence of a dominating diametral path in O(n2m).
As a preprocessing, we can compute ecc(x) for every vertex x of G. Afterwards ∀s ∈
M axEcc(G), we process a BFS and let us denote by Ts the associated BFS-tree. Li represent
the diﬀerent layers of the BFS-tree, i.e. by convention L0 = {s} and Li is equal to the i-th
neighborhood of s. Then ∀v ∈ V (G), let us denote by Levels(v) its level in Ts. We can also
preprocess in linear time : ∀v ∈ V (G) and ∀i such that Levels(v)-1 ≤ i ≤ Levels(v) + 1 we
compute Ni(v) = N (v) ∩ Li.
Then we can use for every vertex s ∈ M axEcc(G) the following modiﬁed BFS, which is
in fact a partial BFS since only the vertices that can be part of a dominating diametral path
are explored.

Theorem 10. Algorithm Dominating-Diameter(G,s) computes if a graph G admits a dom-
inating diametral path starting from s in O(nm).

Proof. Any diametral path must go sequentially through the all the layers of Hi. Furthermore
using the BFS-tree structure any edge xy ∈ V (G) satisﬁes |Levels(x) − Levels(y)| ≤ 1.

In order to prove the modiﬁed BFS algorithm we need to prove that for every vertex s

of maximal eccentricity it is enough to check that the following easy invariant s:
Invariant 11. For all i, 1 ≤ i ≤ Diam(G), and for every v ∈ Li(s) If v ∈ Queue, then
there exists a path from s to v in G, that dominates the ﬁrst i− 1 layers. Moreover all these
dominating paths reach v with an edge marked FEASIBLE.

Complexity analysis: The preprocessing time, i.e., computing all eccentricities can be

done in a naive way by processing n Breadth First searches (BFS) in O(nm).

7

Dominating-Diameter(G,s):
Data: a graph G = (V, E) and a start vertex s ∈ M axEcc(G);
Result: YES / NO G has a dominating diametral path starting at s;
Mark FEASIBLE all edges adjacent to s. Initialize Queue to N (s);
while Queue (cid:54)= ∅ do

dequeue v from beginning of Queue;
h ← Levels(v);
for ∀u ∈ Nh−1(v) with uv marked FEASIBLE do

A(v) ← Nh(v) ∪ Nh(u);
if h = diam(G) then
if Lh = A(v) then

YES a dominating diametral path from s to v has been found STOP

end

end
for ∀w ∈ Nh+1(v) do

if Lh=A(v) ∪ Nh(w) then
Mark vw as FEASIBLE;
if w is not already in Queue then
enqueue w to the end of Queue

end

end

end

end

end
NO G has no dominating diametral path starting at s;

Algorithm 1: A modiﬁed Breadth First Search

Let us consider a BFS search starting at some s ∈ M axEcc(G) and its BFS numbering
τ (the visiting ordering of the vertices during the BFS), one can easily sort all the neighbor-
hood lists of all the vertices according to τ in linear time. Then for every vertex x ∈ Lh,
Nh−1(x), Nh(x) and Nh+1(x) can be extracted from N (x) in O(1). Therefore for each BFS
before using the modiﬁed BFS, the preprocessing requires O(n + m). The structure of the
modiﬁed BFS, i.e., the while loop, is a partial BFS visiting only vertices that can still belong
to a dominating path. Let us now consider the inside instructions.
For every edge uv the test Lh=A(v) ∪ Nh(w) can be done by computing A(v) ∩ Nh(w)
in O(|A(v)| + |Nh(w)|) since they are encoded as sorted lists and then comparing the sizes
|A(v) ∩ Nh(w)| and |Lh| in O(1).
For every vertex v ∈ Lh, in the whole : Nh(v) is used at most |Nh−1(v)|+|Nh+1(v)| times.
Therefore for all v it is bounded by Σv|Nh(v)|(|Nh−1(v)|+|Nh+1(v)|). Bounding |Nh−1(v)|+
|Nh+1(v)| by n we obtain: n.Σvd(v) ∈ O(n.m) Therefore the overall time complexity of this
algorithm is O(nm).

8

Corollary 12. The recognition of 1-laminar graphs can be done in O(|M axEcc(G)|.nm)
bounded by O(n2m).
Proof. To recognize if a graph is 1-laminar, it is enough to process for every s ∈ M axEcc(G)
the algorithm Dominating-Diameter(G,s). Including the preprocessing and the computation
of all eccentricities in G in O(nm), the overall time complexity is O(|M axEcc(G)|.nm)
bounded by O(n2m).

This algorithm can be easily adapted to compute a 1-dominating diametral path and

generalized for every ﬁxed integer k, and this yields :

Theorem 13. The recognition of k-laminar graphs can be done in O(n2k+1).

For a proof the reader is referred to the Appendix.

4 NP-completeness

In this section we give a reduction from 3SAT to the recognition of k-laminar graphs. It is
therefore NP-hard to compute Laminar(G). The reader is encouraged to look at ﬁgure 4 for
an better understanding of the reduction. In this section n denotes the number of variables
in a satisﬁability formula and N the number of vertices in a graph. Capital letters are used
to denote vertices and small letters to denote variables.
Given a 3SAT formula φ made up with m clauses Cj, 1 ≤ j ≤ m, on n boolean variables
xi 1 ≤ i ≤ n.

We construct a graph G(φ) and we will prove that: G(φ) is ( n

2 + 1)-laminar iﬀ φ is

satisﬁable.

Let us ﬁrst detail the construction of G(φ). For each literal xi (resp. xi) we associate a
vertex Xi (resp. Xi). We put an edge between a variable and its negation. Moreover we con-
nect the vertices Xi and Xi with Xi−1, Xi−1, Xi+1, Xi+1 if existent. We add a pending chain
V1, . . . Vn to X1 and X1. The same is done symmetrically with a pending chain Vn+1, . . . V2n
attached to Xn and Xn. Up to now we have 2n shortest paths of length 3n + 2 going from
V1 to V2n. Now for every clause Ci, 1 ≤ j ≤ m, we add a vertex Ci. Every Ci is connected
by a chain of length n
2 + 1 to every vertex associated to a litteral that appears in the clause
Ci. Note that here for sake of simplicity n is supposed to be even, otherwise we would add
a dummy variable.

Suppose for now that the diametral path starts and ends from the end vertices of the
two chains respectively (V1 and V2n). Such a diametral path will never pass through Xi and
Xi because it would either need to use an edge XiXi or do some detour which would mean
that the length of the path is greater than the diameter 3n + 2.
2 + 1) = |V (G)| vertices, where mφ is the total

The graph G(φ) contains exactly 4n + mφ( n

number of variables in the clauses Cj.

Lemma 14. diam(G(φ)) = 3n + 2

9

Ci = (X1 ∨ X2 ∨ X n−1)

C1 n
2

C2 n
2

Cn−1 n

2

C11

C21

Cn−11

X1

X2

X3

Xn−1

Xn

V1

Vn

Vn+1

V2n

X1

X3

X2

X n−1

Xn

Figure 6: An example of graph G(φ)

Proof. For any pair of clauses : Cj, Cj(cid:48) , d(Cj, Cj(cid:48)) ≤ 2( n

2 + 1) + n ≤ 3n

Furthermore: Let p (resp. q) be the minimum (resp. maximum) index of a literal in Cj.
Then ecc(Cj) = max{n − p + n + 1, n + 1 + q} = max{2n − p + 1, n + q + 1} ≤ 2n + 1.
We already have seen that : ecc(V1) ≤ 3n+2, using a path going only through the Xi’s up
to V2n. Moreover no Cj can provide a shortcut to this path. Thus ecc(V1) = 3n+2 = ecc(V2n)

2 + 1)-laminar graph iﬀ φ is satisﬁable.

Theorem 15. G(φ) is a ( n
Proof. Suppose φ is satisﬁable and let A be some satisfying truth assignment of the variables.
Consider a path µ from V1 to V2n forced to visit the vertex Xi if the variable is set to true
in A and Xi otherwise.
µ is obviously a diametral path. Since A is a truth assigment every clause Cj of φ has
a true literal which belongs to µ and therefore d(Cj, µ) ≤ n
2 + 1. All other vertices either
belongs to µ are at distance 1. Therefore µ is ( n

2 + 1)-dominating diametral path.

Conversely, suppose G(φ) is ( n

2 + 1)-laminar, hence using Lemma 14 there exists a di-
ametral path µ of length 3n + 2 such that a every vertex is at distance n
2 + 1 from µ. As
explained above Xi and Xi can not be both on a diametral path. We set the variable xi
to be true if µ passes through the vertex Xi to false otherwise. Every clause Cj must be
satisﬁed because there is at least one variable vertex Xj at distance n
2 + 1 from it. Therefore
this ( n

2 + 1)-dominating diametral path provides a truth assignment for φ.

It is obvious that the transformation can be computed in polynomial time. Let us consider

the following decision problem :
Name: Laminarity
Data: A graph G and k an integer such that k ∈ [
Question: Is G k-laminar ?

√

√

|V (G)|
2

]

|V (G)|
4

,

Corollary 16. Laminarity is an NP-complete problem.

10

Proof. If we consider the 3SAT NP-complete variant in which every variable occurs at most
3 times [14]. The relationship between the number of variables n of such an instance and its
number of clauses m is :
2n ≤ mφ ≤ 3n where mφ denotes the total number of occurences of variables in clauses.
This inequalities just say that each variable has 2 or 3 occurences in the clauses, since we
can get rid of the cases where a variable occurs only in one clause.

Considering the ﬁrst inequalities we deduce:
4n + 2n( n
Replacing n by 2k − 1 we obtain : 4k2 + 8k − 5 ≤ |V (G)| ≤ 12k2 + 2K − 4.
Therefore : 4k2 ≤ |V (G)| ≤ 16k2
|V (G)|
If we consider the range [
4

2 + 1) ≤ |V (G)| ≤ 4n + 3n( n
√

|V (G)|
2

2 + 1), which gives : n2 + 6n ≤ |V (G)| ≤ 3 n2

2 + 7n.

√

we can encode all instances of a NP-complete variant of 3SAT.

,

] for k, using the construction described above

5 Conclusion and perspectives

It would be interesting to improve the running time for the recognition of k-laminar graphs
(especially for 1-laminar ones). But it should be noticed that for graphs having a constant
number of extremal vertices (i.e., |M axEcc(G)| is bounded by this constant) then the com-
plexity of the algorithms proposed here in theorems 8,10 goes down to O(nm) which could
be optimal, see [5, 1]. In particular when dealing with read networks their laminar parts
seem to have a bounded number of extremal vertices.

One of the few theoretical results on clustering for restricted graph classes is presented
in [12] and proposes an approximation algorithm for 1-laminar graphs. Therefore we think
that these bio-inspired k-laminar graphs are worth to be studied further. As for example,
searching for diameter computations in linear time using a constant number of BFSs as in
[6] and may have other applications not only in bioinformatics.

Perhaps the k-laminar class of graphs is too large to capture all properties of read net-
works. The good notion could be k-diametral path graphs with its recursive deﬁnition for
all induced subgraphs. Unfortunately there is no polynomial recognition algorithm for this
class. A good algorithmic compromise would be to add some connectivity requirements,
i.e., k-laminar and h-connected. It would be interesting to develop a robust decomposition
method of read networks into their k-laminar parts. In other words we want to ﬁnd a skele-
ton of a read network that captures most of its biological properties. Such a decomposition
could provide an interesting alternative process to analyze the biodiversity of read networks.
Acknowledgements: The authors wish to thank Anthony Herrel for many discussions

on the project and for having selected the lizards on which this study is based.

References

[1] A. Abdoud, V.V. Williams, J. Wang, Approximation and Fixed parameter subquadratic algo-
rithms Radius and Diameter, in Proceedings of the twenty-seventh annual ACM-SIAM sym-

11

posium on Discrete Algorithms, p. 377-391, SIAM, 2016.

[2] S. F. Altschul, W. Gish, W. Miller, E. W. Myers, D. J. Lipman, Basic local alignment search

tool, Journal of molecular biology, vol. 3, p. 403-410, 2015.

[3] E. Bapteste, M. Habib, A. Herrel, P. Lopez, C. Vigliotti, Projet Evol´ezards, D´eﬁ ENVI-

ROMICS, Mission Interdisciplinarit´e CNRS, 2014.

[4] E. Boon, S. Halary, E. Bapteste, M. Hijri, Studying genome heterogeneity within the arbuscular

mycorrhizal fungal cytoplasm, Genome Biol Evol. Jan 7;7(2): 505-521, 2015.

[5] M. Borassi, P. Crescenzi, M. Habib, Into the Square - On the Complexity of Quadratic-Time

Solvable Problems, CoRR, abs/1407.4972, 2014.

[6] M. Borassi, P. Crescenzi, M. Habib, W. A. Kosters, A. Marino, F. W. Takes, Fast diameter and
radius BFS-based computation in (weakly connected) real-world graphs: With an application
to the six degrees of separation games, Theor. Comput. Sci., Vol 586, p. 59-80, 2015.

[7] Phillip E C Compeau, Pavel A Pevzner , Glenn Tesler, How to apply de Bruijn graphs to

genome assembly, Nature Biotechnology 29, p. 987-991, 2011

[8] D.G. Corneil, S. Olariu, L. Stewart, Asteroidal triple-free graphs, SIAM J. Discrete Math., Vol

10, No. 3, p. 399-430, 1997.

[9] M.C. Golumbic, C.L. Monma, W.T. Trotter, Tolerance graphs, Disc. Applied Math. 9, p.

157-170, 1997.

[10] J.S. Deogun, D. Kratsch, Diametral Path Graphs, Graph Theoretic Concepts in CS, p. 344-357,

1999.

[11] J.S. Deogun, D. Kratsch, Dominating Pair Graphs, SIAM J. Discrete Math., Vol. 15, No. 3,

p. 353-366, 2002.

[12] J.S. Deogun, D. Kratsch, G. Steiner, An approximation algorithm for clustering graphs with

dominating diametral path, Information Processing Leters, 61, p. 121-127,1997.

[13] D. Kratsch, The structure of graphs and the design of eﬃcient algorithms, Habilitation Thesis,

Friedrich-Schiller-Universit¨at, Jena, 1995.

[14] C. H. Papadimitriou, Computational Complexity, 1994, Addison-Welsey.

[15] Y. Peng, Henry C. Leung, S.M. Yu, F.Y. L. Chin, IBDA-UD a de novo assembler for single-cell
and metagenomic sequencing data with highly uneven depth, Bioinformatics, Volume 28, Issue
11, p. 1420-1428, 2012.

[16] J. H. Saw, A. Spang, K. Zaremba-Niedzwiedzka, L. Juzokaite, J. A. Dodsworth, S. K. Muru-
gapiran, D. R. Colman, C. Takacs-Vesbach, B. P. Hedlund, L. Guy and T. J. Ettema, Exploring
microbial dark matter to resolve the deep archaeal ancestry of eukaryotes. Philos Trans R Soc
Lond B Biol Sci 370(1678): 20140328 (2015).

12

6 Appendix

6.1 k-laminar recognition algorithm

We ﬁrst notice that every graph G is trivially diam(G)-laminar, and let us now generalize
the previous recognition algorithm 1 to any ﬁxed integer k such that : k < diam(G).
Theorem 17. For every ﬁxed k ≥ 2 such that k < diam(G), the algorithm k-Dominating-
Diameter(G,s) ﬁnds a k-dominating diametral path starting form s if some exists in O(n2k).

Proof. To generalize Dominating-Diameter(G,s) algorithm, we will proceed similarly from
a given vertex s ∈ M axEcc(G), by considering all the paths of length k starting at s and
then make them grow layer by layer keeping only those which are potential extendable to a
k-dominating diametral path.
We keep the same preprocessing as for the recognition of 1-laminar graphs, namely: we
can compute ecc(x) for every vertex x of G. Afterwards ∀s ∈ M axEcc(G), we process a
BFS and let us denote by Ts the associated BFS-tree. Li represent the diﬀerent layers of
the BFS-tree, i.e. by convention L0 = {s} and Li is equal to the i-th neighborhood of s.
Then ∀v ∈ V (G), let us denote by Levels(v) its level in Ts. We can also preprocess in the
same time : ∀v ∈ V (G) and ∀i such that Levels(v)-k ≤ i ≤ Levels(v) + k we compute
i (v) = N k(v) ∩ Li. Since k is ﬁxed, the sets N k
N k
Invariant: If the pair (v, P ) with P = [s, . . . v] belongs to Queue, and if p = Levels(v)
then P a path k-dominating the ﬁrst p − k + 1 layers.

i (v) can be computed in O(nm) also.

This invariant is clearly satisﬁed with the initializations of Queue. Then During the

(cid:81)h
While loop a new pair (v, P ) is only inserted if it satisﬁes this property.
Complexity Analysis: The initialisation step may costs O(nk) since we could have
i=1 |Li| diﬀerent pairs (v, P ). The queue data structure forces the vertices to be visited in
a breadth ﬁrst way, giving an O(n + m) to the managment of the while loop. During this
while loop:
For every vertex v the set A(v) is used at most |Np+1(v)| times, so in the whole it is
bounded by O(nm). But to compute the sets A(v) we have to maintain paths of length 2k.
Unfortunately there could be n2k such paths. This yields a polynomial algorithm in O(n2k).

Corollary 18. k-laminar graphs can be recognized in O(|M axEcc(G)|.n2k) or O(n2k+1).

Proof. First we have to compute all eccentricites in G in O(nm) and then it is enough to
repeat this Algorithm 2 for every x ∈ M axEcc(G), this provides an algorithm running
O(|M axEcc(G)|.n2k).

13

k-Dominating-Diameter(G,s):
Data: a graph G = (V, E) and a start vertex s ∈ M axEcc(G), an integer k ≥ 2;
Result: YES / NO G has a k-dominating diametral path starting at s;
Initialisations:
Initialize a queue Queue with all diﬀerent pairs (v, P ) such that P is a path of length
k starting at s in the BFS-tree, and v its last vertex. This list is supposed to be
lexicographically ordered accordingly to the layer orderings.
while Queue (cid:54)= ∅ do
dequeue (v, P ) from beginning of Queue;
p ← Levels(v) ;
q ← p − k + 2 ;

A(v) ←(cid:83)
if ∀i, q ≤ i ≤ p, Li =(cid:83)

if p = diam(G) then

u∈P,q−k+1≤Levels(u)≤p N k

q (u);

YES ”a k-dominating diametral path from s to v has been found”STOP

u∈P,i−k+1≤Levels(u)≤i+k N k

i (u) then

end

end
for ∀x ∈ Np+1(v) do
if Lq=A(v) ∪ N k
P (cid:48) ← P + x ;
enqueue (x, P (cid:48)) to the end of Queue ;

q (x) then

end

end

end
NO ”G has no k-dominating diametral path starting at s”;

Algorithm 2:

14

