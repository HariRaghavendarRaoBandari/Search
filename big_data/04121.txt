6
1
0
2

 
r
a

 

M
4
1
 
 
]

.

O
C
h
t
a
m

[
 
 

1
v
1
2
1
4
0

.

3
0
6
1
:
v
i
X
r
a

Line k-Arboricity in Product Networks ∗

Yaping Mao1,2, Zhiwei Guo1,† Nan Jia1, He Li1

1Department of Mathematics, Qinghai Normal University,

Xining, Qinghai 810008, China

2Key Laboratory of IOT of Qinghai Province,

Xining, Qinghai 810008, China

E-mails: maoyaping@ymail.com; guozhiweic@yahoo.com

jianan66ss@yahoo.com; lihe0520@yahoo.com

Abstract

A linear k-forest is a forest whose components are paths of length at most k. The
linear k-arboricity of a graph G, denoted by lak(G), is the least number of linear k-
forests needed to decompose G. Recently, Zuo, He and Xue studied the exact values of
the linear (n − 1)-arboricity of Cartesian products of various combinations of complete
graphs, cycles, complete multipartite graphs. In this paper, for general k we show that
max{lak(G), laℓ(H)} ≤ lamax{k,ℓ}(G(cid:3)H) ≤ lak(G) + laℓ(H) for any two graphs G and
H. Denote by G ◦ H, G × H and G ⊠ H the lexicographic product, direct product
and strong product of two graphs G and H, respectively. We also derive upper and
lower bounds of lak(G ◦ H), lak(G × H) and lak(G ⊠ H) in this paper. The linear k-
arboricity of a 2-dimensional grid graph, a r-dimensional mesh, a r-dimensional torus,
a r-dimensional generalized hypercube and a 2-dimensional hyper Petersen network
are also studied.

Keywords: Linear k-forest, linear k-arboricity, Cartesian product, complete product,
lexicographical product, strong product, direct product.

AMS subject classiﬁcation 2010: 05C15, 05C76, 05C78.

1

Introduction

All graphs considered in this paper are undirected, ﬁnite and simple. We refer to the
book [6] for graph theoretical notation and terminology not described here. Let N be the

∗Supported by the National Science Foundation of China (Nos. 11551001, 11161037, 11461054) and

the Science Found of Qinghai Province (No. 2014-ZJ-907).

†Corresponding author

1

set of natural numbers and let [a, b] be the set {n ∈ N | a ≤ n ≤ b}. A decomposition
of a graph is a list of subgraphs such that each edge appears in exactly one subgraph in
the list. If a graph G has a decomposition G1, G2, . . . , Gt, then we say that G1, G2, . . . , Gt
decompose G or G can be decomposed into G1, G2, . . . , Gt. Furthermore, a linear k-forest
is a forest whose components are paths of length at most k. The linear k-arboricity of a
graph G, denoted by lak(G), is the least number of linear k-forests needed to decompose
G.

The notion of linear k-arboricity of a graph was ﬁrst introduced by Habib and Peroche
[16], which is a natural generalization of edge-coloring. Clearly, a linear 1-forest is induced
by a matching, and la1(G) is the chromatic index χ′(G) of a graph G. Moreover, the linear
k-arboricity lak(G) is also a reﬁnement of the ordinary linear arboricity la(G) (or la∞(G)
which is the case when every component of each forest is a path with no length constraint.
By the way, the notion of linear arboricity was introduced earlier by Harary in [17]. For
more details on linear k-arboricity, we refer to [2, 3, 4, 8, 9, 10]

In graph theory, Cartesian product, strong product, lexicographical product and direct
product are four of main products, each with its own set of applications and theoretical
interpretations. Product networks were proposed based upon the idea of using the cross
product as a tool for “combining” two known graphs with established properties to obtain
a new one that inherits properties from both [12]. Recently, there has been an increasing
interest in a class of interconnection networks called Cartesian product networks; see
[1, 12, 21].

The join, Cartesian, lexicographical, strong and direct products are deﬁned as follows.

• The join or complete product G ∨ H of two disjoint graphs G and H, is the graph
with vertex set V (G)∪V (H) and edge set E(G)∪E(H)∪{uv | u ∈ V (G), v ∈ V (H)}.

• The Cartesian product G(cid:3)H of two graphs G and H, is the graph with vertex set
V (G) × V (H), in which two vertices (u, v) and (u′, v′) are adjacent if and only if
u = u′ and (v, v′) ∈ E(H), or v = v′ and (u, u′) ∈ E(G).

• The lexicographic product G ◦ H of graphs G and H has the vertex set V (G ◦ H) =
V (G) × V (H), and two vertices (u, v), (u′, v′) are adjacent if uu′ ∈ E(G), or if u = u′
and vv′ ∈ E(H).

• The strong product G ⊠ H of graphs G and H has the vertex set V (G) × V (H). Two
vertices (u, v) and (u′, v′) are adjacent whenever uu′ ∈ E(G) and v = v′, or u = u′
and vv′ ∈ E(H), or uu′ ∈ E(G) and vv′ ∈ E(H).

• The direct product G × H of graphs G and H has the vertex set V (G) × V (H). Two
vertices (u, v) and (u′, v′) are adjacent if the projections on both coordinates are
adjacent, i.e., uu′ ∈ E(G) and vv′ ∈ E(H).

2

From the deﬁnition of linear k-arboricity and the structure of graph product, the

following result is immediate.

Observation 1.1 Let G and H be two graphs. Then

lak(G ⊠ H) ≤ lak(G(cid:3)H) + lak(G × H).

Xue and Zuo [26] investigated the linear (n − 1)-arboricity of complete multipartite
graphs. Recently, Zuo, He and Xue [29] studied the exact values of the linear (n −
1)-arboricity of Cartesian products of various combinations of complete graphs, cycles,
complete multipartite graphs.

In this paper, we consider four standard products: the lexicographic, the strong, the
Cartesian and the direct with respect to the linear k-arboricity. Every of these four
products will be treated in one of the forthcoming subsections in Section 2. In Section 3,
we demonstrate the usefulness of the proposed constructions by applying them to some
instances of product networks.

2 Results for general graphs

As usual, the union of two graphs G and H is the graph, denoted by G ∪ H, with
vertex set V (G) ∪ V (H) and edge set E(G) ∪ E(H). The disjoint union of k copies of
the same graph G is denoted by kG. The join G ∨ H of two disjoint graphs G and H is
obtained from G ∪ H by joining each vertex of G to every vertex of H. In the sequel, let
Ks,t, Cn, Kn and Pn denote the complete bipartite graph of order s + t with part sizes s
and t, cycle of order n, complete graph of order n, and path of order n, respectively.

In the sequel, let G and H be two connected graphs with V (G) = {u1, u2, . . . , un} and
V (H) = {v1, v2, . . . , vm}, respectively. Then V (G ∗ H) = {(ui, vj) | 1 ≤ i ≤ n, 1 ≤ j ≤ m},
where ∗ denotes a kind of graph product operations. For v ∈ V (H), we use G(v) to
denote the subgraph of G ∗ H induced by the vertex set {(ui, v) | 1 ≤ i ≤ n}. Similarly,
for u ∈ V (G), we use H(u) to denote the subgraph of G ∗ H induced by the vertex set
{(u, vj ) | 1 ≤ j ≤ m}.

The following observations are immediate.

Observation 2.1 Let H be a subgraph of G. If ℓ ≥ k, then

laℓ(H) ≤ lak(G).

Observation 2.2 [27] If a graph G is the edge-disjoint union of two subgraphs G1 and
G2, then

lak(G) ≤ lak(G1) + lak(G2).

3

Observation 2.3 [27] If a graph G is the disjoint union of two subgraphs G1 and G2,
then

lak(G) = max{lak(G1), lak(G2)}.

Observation 2.4 If G is not a forest, then lak(G) ≥ 2 for k ≥ 1.

Lemma 2.1 [10] For a graph G of order n,

∆(G) + 1 ≥ χ′(G) = la1(G) ≥ la2(G) ≥ . . . ≥ lan−1(G) = la(G),

where χ′(G) denotes the edge chromatic number of G.

Lemma 2.2 [10] For a graph G,

lak(G) ≥ max((cid:24) ∆(G)

2 (cid:25) ,& |E(G)|

k+1 ⌋') .

⌊ k|V (G)|

2.1 For Cartesian product

We ﬁrst give the bounds for general graphs.

Theorem 2.5 Let G and H be two graphs. Then

max{lak(G), laℓ(H)} ≤ lamax{k,ℓ}(G(cid:3)H) ≤ lak(G) + laℓ(H).

Moreover, the upper bound is sharp.

Set V (G) = {u1, u2, . . . , un} and V (H) = {v1, v2, . . . , vm}. Let lak(G) = p and
Proof.
lak(H) = q. Since lak(G) = p, it follows that there are p linear k-forests in G. Then, since
lak(G(vi)) = p, it follows that there are p linear k-forests in G(vi), say Fi,1, Fi,2, . . . , Fi,p.
Similarly, since lak(H) = q, it follows that there are q linear k-forests in H. Then, since
lak(H(ui)) = q, it follows that there are q linear k-forests in H(ui), say F ′
i,q.
i,j where 1 ≤ j ≤ q. Clearly,
F1, F2, . . . , Fp, F ′
q are p + q linear k-forest in G(cid:3)H. So lamax{k,ℓ}(G(cid:3)H) ≤
lak(G) + laℓ(H). From Observation 2.1, we have lamax{k,ℓ}(G(cid:3)H) ≥ max{lak(G), laℓ(H)}.

i=1 Fi,j where 1 ≤ j ≤ p, and F ′

Set Fj = Sm

j = Sn

2, . . . , F ′

1, F ′

i,1, F ′

i,2, . . . , F ′

i=1 F ′

The following corollary is a generalization of the above result.

Corollary 2.6 Let G1, G2, . . . , Gr be graphs. Then

max{lak1(G1), lak2(G2), . . . , lakr (Gr)} ≤ lamax{k1,k2,...,kr}(G1(cid:3)G2(cid:3) . . . (cid:3)Gr)

≤ lak1(G1) + lak2(G2) + . . . + lakr (Gr).

Moreover, the bounds are sharp.

4

2.2 For complete product

The following results were obtained by Dirac [13]; see Laskar and Auerbach [22].

Proposition 2.7 [13, 22] (1) For all even r ≥ 2, Kr,r is the union of its 1
cycles.

2 r Hamiltonian

(2) For all odd r ≥ 3, Kr,r is the union of its 1

2 r Hamiltonian cycles and one perfect

matching.

For complete product, we have the following.

Theorem 2.8 Let G and H be two graphs. Then

max(cid:26)(cid:24) ∆(G) + |V (H)|

2

(cid:25) ,(cid:24) ∆(H) + |V (G)|

2

(cid:25)(cid:27) ≤ lak(G ∨ H) ≤ lak(G) + lak(H) + |V (H)|.

Set |V (G)| = n and |V (H)| = m. Without loss of generality, let n ≤ m. Let
Proof.
G′ = G ∪ (m − n)K1. Then |V (G′)| = m and G ∨ H is a subgraph of G′ ∨ H. Since
lak(G) = p, it follows that there are p linear k-forests in G, say F1, F2, . . . , Fp. From the
structure of G′, F1, F2, . . . , Fp are linear k-forests in G′, and hence lak(G′) ≤ p. From
Observation 2.1, we have p = lak(G) ≤ lak(G′) ≤ p, and hence lak(G′) = p. Since
lak(H) = q, it follows that there are q linear k-forests in H, say F ′
q. Note
that the subgraph induced by all the vertices of G′ ∨ H is a complete bipartite graph
Km,m. From Proposition 2.7, Km,m can be decomposed into m perfect matchings, say
M1, M2, . . . , Mm. These perfect matchings are m linear 1-forests in G′ ∨ H. Observe that

2, . . . , F ′

1, F ′

E(G′ ∨ H) =  m
[i=1

Mi! ∪  p
[i=1

E(Fi)! ∪  q
[i=1

E(F ′

i )! .

q, M1, M2, . . . , Mm form p + q + m linear k-forests in G′ ∨
Then F1, F2, . . . , Fp, F ′
H. So lak(G ∨ H) ≤ lak(G′ ∨ H) ≤ lak(G) + lak(H) + |V (H)|. Note that ∆(G ∨ H) ≥
max{∆(G) + |V (H)|, ∆(H) + |V (G)|}. From Lemma 2.2, we have

2, . . . , F ′

1, F ′

lak(G ∨ H) ≥ max(cid:26)(cid:24) ∆(G) + |V (H)|

2

(cid:25) ,(cid:24) ∆(H) + |V (G)|

2

(cid:25)(cid:27) ,

as desired.

2.3 For lexicographical product

From the deﬁnition, the lexicographic product graph G ◦ H is a graph obtained by
replacing each vertex of G by a copy of H and replacing each edge of G by a complete
bipartite graph Km,m. For an edge e = uiuj ∈ E(G) (1 ≤ i, j ≤ n), the induced subgraph
obtained from the edges between the vertex set V (H(ui)) = {(ui, v1), (ui, v2), · · · , (ui, vm)}

5

and the vertex set V (H(uj)) = {(uj, v1), (uj , v2), · · · , (uj, vm)} in G ◦ H is a complete
equipartition bipartite graph of order 2m, denoted by Ke or Kui,uj .

From Proposition 2.7, Ke can be decomposed into m perfect matching, denoted by
1 , M e

m. We now in a position to give the result for lexicographical product.

2 , . . . , M e

M e

Theorem 2.9 Let G and H be two graphs. Then

(cid:24) ∆(H) + |V (H)|∆(G)

2

(cid:25) ≤ lamax{k,ℓ}(G ◦ H) ≤ lak(G)|V (H)| + laℓ(H).

Moreover, the bounds are sharp.

Proof. Set V (G) = {u1, u2, . . . , un} and V (H) = {v1, v2, . . . , vm}. For k ≤ ℓ, we need to
show that laℓ(G ◦ H) ≤ lak(G)|V (H)| + laℓ(H). Let lak(G) = p and laℓ(H) = q. Since
laℓ(H) = q, it follows that there are q linear ℓ-forest in H. Then, since laℓ(H(ui)) = q, it
follows that there are q linear ℓ-forests in H(ui), say F ′
i=1 F ′
where 1 ≤ j ≤ q.

i,q. Set F ′

i,2, . . . , F ′

i,1, F ′

j =Sq

i,j

Since lak(G) = p, it follows that there are p linear k-forests in G, say F1, F2, . . . , Fp.
For each linear k-forest Fi (1 ≤ i ≤ p) in G, we deﬁne a subgraph Fi of G◦H corresponding
to Fi as follows: V (Fi) = V (Fi ◦ H) and E(Fi) = {(up, vs)(uq, vt) | upuq ∈ E(Fi), up, uq ∈
V (G), vs, vt ∈ V (H)}. We call Fi a blow-up linear k-forest corresponding to Ti in G; see
Figure 1 for an example. For each i (1 ≤ i ≤ p) and each j (1 ≤ j ≤ m), we deﬁne another

u1

u4

u2

u5

u3

u6

u7

u8

u9

u10

Fi

(u7, v1)
(u7, v2)

(u7, vm)

H(u6)

Fi,1

(u1, v1)
(u1, v2)

(u1, vm)

(u1, v1)
(u1, v2)

(u1, vm)

(u3, v1)
(u3, v2)

(u3, vm)

H(u1)

H(u2)

H(u3)

(u4, v1)
(u4, v2)

(u4, vm)

(u6, v1)
(u6, v2)

(u6, vm)

H(u4)

H(u5)

H(u6)

H(u7)

H(u8)

H(u10)

(u10, v1)
(u10, v2)

(u10, vm)

Fi

(u3, v1)
(u3, v2)

(u3, vm)

H(u1)

H(u2)

H(u3)

(u4, v1)
(u4, v2)

(u4, vm)

(u6, v1)
(u6, v2)

(u6, vm)

H(u4)

H(u5)

H(u6)

Fi,m

Fi,j

(u10, v1)
(u10, v2)

(u10, vm)

(u7, v1)
(u7, v2)

(u7, vm)

H(u6)

H(u7)

H(u8)

H(u10)

Figure 1: The blow-up linear k-forest Fi and parallel linear k-forest Fi,j in G ◦ H

corresponding to Fi in G.

6

E(Fi,j) = Se∈E(Fi) M e

subgraph Fi,j of G ◦ H corresponding to Ti in G as follows: V (Fi,j) = V (Fi ◦ H) and
i,j is a matching of Ke. We call Fi,j a parallel linear
k-forest of G ◦ H corresponding to the forest Fi in G; see Figure 1 for an example. Note
that all the parallel linear k-forests in {Fi,j | 1 ≤ i ≤ p, 1 ≤ j ≤ m} are pm linear k-forests
of G ◦ H.

i,j, where M e

Since k ≤ ℓ, it follows that the forests F ′

q and all the forests in {Fi,j | 1 ≤
i ≤ p, 1 ≤ j ≤ m} form pm + q linear ℓ-forests of G ◦ H. Observe that each edge of G ◦ H
belongs to one of the above linear ℓ-forests. So laℓ(G ◦ H) ≤ lak(G)|V (H)| + laℓ(H).

2, . . . , F ′

1, F ′

For ℓ ≤ k, we can prove that lak(G ◦ H) ≤ lak(G)|V (H)| + laℓ(H) similarly. We

conclude that lamax{k,ℓ}(G ◦ H) ≤ lak(G)|V (H)| + laℓ(H).

Note that ∆(G ◦ H) ≥ ∆(H) + |V (H)|∆(G). From Lemma 2.2, we have

lamax{k,ℓ}(G ◦ H) ≥(cid:24) ∆(H) + |V (H)|∆(G)

2

(cid:25) ,

as desired.

2.4 For direct product

For direct product, we have the following.

Theorem 2.10 Let G and H be two graphs. Then

(cid:24) ∆(G)∆(H)

2

(cid:25) ≤ lamax{k,ℓ}(G × H) ≤ 2lak(G)laℓ(H).

Moreover, the bounds are sharp.

Proof. From Lemma 2.2, we have

lamax{k,ℓ}(G × H) ≥(cid:24) ∆(G × H)

2

(cid:25) ≥(cid:24) ∆(G)∆(H)

2

(cid:25) .

It suﬃces to show that lamax{k,ℓ}(G × H) ≤ 2lak(G)laℓ(H).

We now give the proof of this theorem, with a running example (corresponding to Fig-
ure 2). From the symmetry of direct product, we can assume k ≤ ℓ. We only need to show
laℓ(G × H) ≤ 2lak(G)laℓ(H). Set V (G) = {u1, u2, . . . , un} and V (H) = {v1, v2, . . . , vm}.
Let lak(G) = p and laℓ(H) = q. Since lak(G) = p, it follows that there are p linear k-forests
in G, say F1, F2, . . . , Fp. For each Fi (1 ≤ i ≤ p), we assume that Pi,1, Pi,2, . . . , Pi,x are all
j=1 Pi,j where 1 ≤ i ≤ p. Take for example, let Pi,1 = P2,

For each Pi,j, we let Pi,j = ui,j

1 ui,j

2 . . . ui,j

a , where 1 ≤ j ≤ x. We ﬁrst deﬁne two

the paths in Fi. Then Fi = Sx

Pi,2 = P3, Pi,3 = P4; see Figure 2 (a). Then Fi = Pi,1 ∪ Pi,2 ∪ Pi,3.

subgraphs P 1

i,j, P 2

i,j induced by the edges in

E(P 1
E(P 2

i,j ) = {ui,j
i,j ) = {ui,j

2r−1ui,j
2r ui,j

2r | 1 ≤ r ≤ ⌊a/2⌋},
2r+1 | 1 ≤ r ≤ ⌊a/2⌋},

7

Pi,1

Pi,2

Pi,3

ui,1

1

ui,1

2

ui,3

1

ui,3

2

ui,3

3

ui,3

4

ui,2

1

ui,2

2

ui,2

3

Fi

P 1
i,3
ui,3

1

ui,3

2

ui,3

3

ui,3

4

P 2
i,3

ui,3

2

ui,3

3

P 1
i,1

P 1
i,2

ui,1

1

ui,1

2

F 1
i

ui,2

1

ui,2

2

P 2
i,2

ui,2

2

ui,2

3

F 2
i

(a)

vj,1

1

vj,1

2

vj,1

3

Q′

j,1

vj,2

1

vj,2

2

vj,2

3

vj,2

4

Q′

j,2

F ′
j

(P 1

i,1, Q′
1 ) (ui,1

j,1)
1 , vj,1
3 )

(ui,1

1 , vj,1

(P 1

i,2, Q′

j,1)
1 , vj,1
3 )

(ui,2

1 , vj,1

1 ) (ui,2

(P 1

i,3, Q′
(ui,3

j,1)
1 , vj,1
3 )

(ui,3

1 , vj,1
1 )

(ui,1

2 , vj,1
1 )

(ui,1

2 , vj,1
3 )

(ui,2

2 , vj,1
1 )

(ui,2

2 , vj,1
3 )

(ui,3

2 , vj,1
1 )

(ui,3

2 , vj,1
3 )

(ui,3

3 , vj,1
1 )

(ui,3

3 , vj,1
3 )

(ui,3

4 , vj,1
1 )

(ui,3

4 , vj,1
3 )

(P 1

i,1, Q′

j,2)
1 , vj,2
(ui,1
1 )

(ui,1

1 , vj,2
1 )

(P 1

i,2, Q′

j,2)
1 , vj,2
(ui,2
4 )

(ui,2

1 , vj,2
1 )

(P 1

i,3, Q′

j,2)
(ui,3

1 , vj,2
4 )

(ui,3

1 , vj,2
1 )

(ui,1

2 , vj,2
1 )

(ui,1

2 , vj,2
4 )

(ui,2

2 , vj,2
1 )

(ui,2

2 , vj,2
4 )

(ui,3

2 , vj,2
1 )

(ui,1

2 , vj,1
4 )

(ui,3

3 , vj,2
1 )

(ui,2

3 , vj,2
4 )

(ui,3

4 , vj,2
1 )

(ui,3

4 , vj,2
4 )

(b)

(P 2

i,2, Q′
(ui,2

j,1)
2 , vj,1
3 )

(ui,2

2 , vj,1
1 )

(P 2

i,3, Q′
1 ) (ui,3

j,1)
2 , vj,1
3 )

(ui,3

2 , vj,1

(ui,2

3 , vj,1
1 )

(ui,2

3 , vj,1
3 )

(ui,3

3 , vj,1
1 )

(ui,3

3 , vj,1
3 )

(P 2

i,2, Q′

j,2)
(ui,2
2 , vj,2
4 )

(ui,2

2 , vj,2
1 )

(P 2

i,3, Q′

j,2)
(ui,3

2 , vj,2
4 )

(ui,3

2 , vj,2
1 )

(ui,2

3 , vj,2
1 )

(ui,2

3 , vj,2
4 )

(ui,3

3 , vj,2
1 )

(ui,1

3 , vj,1
4 )

(c)

Figure 2: The running example for Theorem 2.10.

8

1 ui,1

i,j and F 2

i =Sx

j=1 P 1
3 and Pi,3 = ui,3

respectively. Next, we set F 1
have Pi,1 = ui,1
2 , Pi,2 = ui,2
induced by the edge ui,1
the subgraph induced by the edges in {ui,3
2 ui,2
induced by the edge ui,2
Figure 2 (a). Note that F 1

i,j. For the above example, we
2 ui,2
4 . Then P 1
i,1 is the subgraph
1 ui,2
i,2 is the subgraph induced by the edge ui,2
i,3 is
4 }. Furthermore, P 2
i,2 is the subgraph
3 ; see

i,3 is the subgraph induced by the edge ui,3
i,j and F 2

3 and P 2
j=1 P 1

1 ui,2
2 , P 1

j=1 P 2
2 ui,3

2 , and P 1

i =Sx

1 ui,3

j=2 P 2
i,j.

2 , ui,3

1 ui,1

2 ui,3

3 ui,3

3 ui,3

1 ui,3

Since lak(H) = q, it follows that there are q linear k-forests in H, say F ′

i =S3

i =S3

j (1 ≤ j ≤ q), we assume that Q′

j,i where 1 ≤ j ≤ q. Set Q′

j,i = v1

For each F ′
i=1 Q′
F ′
example, we have Q′

j =Sy

j,1 = vj,1

1 vj,1

2 vj,1

3 and Q′

j,2 = vj,2

j,1, Q′
j,iv2

1, F ′
j,y are all the paths in F ′

2, . . . , F ′
q.
j. Then
j,i, where 1 ≤ i ≤ y. For the above
3 vj,2

4 . Then F ′

j,1 ∪ Q′

j = Q′

j,2, . . . , Q′
j,i . . . vb
1 vj,2

2 vj,2

j,2.

We now decompose G × H into 2pq linear ℓ-forests such that each of them is formed
j, where 1 ≤ i ≤ p and 1 ≤ j ≤ q. Note

i and the paths in F ′

from the paths in F 1
that the subgraph F ∗

i or F 2
i,j induced by the edges in

{(u1, v1)(u2, v2), (u1, v2)(u2, v1) | v1v2 ∈ E(F ′

j ), u1u2 ∈ E(F 1

i )}

and the subgraph F ∗∗

i,j induced by the edges in

{(u1, v1)(u2, v2), (u1, v2)(u2, v1) | v1v2 ∈ E(F ′

j ), u1u2 ∈ E(F 2

i )}

are 2pq linear ℓ-forests in G × H, where 1 ≤ i ≤ p and 1 ≤ j ≤ q. Note that each edge of
G × H belongs to one of the above linear ℓ-forests. So lamax{k,ℓ}(G × H) = laℓ(G × H) ≤
2lak(G)laℓ(H).

2.5 For strong product

For direct product, we have the following.

Theorem 2.11 Let G and H be two graphs. Then

(cid:24) ∆(G)∆(H) + ∆(G) + ∆(H)

2

(cid:25) ≤ lamax{k,ℓ}(G ⊠ H) ≤ lak(G) + laℓ(H) + 2lak(G)laℓ(H).

Moreover, the bounds are sharp.

Proof. Note that ∆(G ⊠ H) ≥ ∆(G)∆(H) + ∆(G) + ∆(H). From Lemma 2.2, we have

lamax{k,ℓ}(G ⊠ H) ≥(cid:24) ∆(G)∆(H) + ∆(G) + ∆(H)

2

(cid:25) .

Since E(G ⊠ H) = E(G × H) ∪ E(G(cid:3)H), it follows from Observation 2.2 that

lamax{k,ℓ}(G ⊠ H) ≤ lamax{k,ℓ}(G(cid:3)H) + lamax{k,ℓ}(G × H)

≤ lak(G) + laℓ(H) + 2lak(G)laℓ(H),

as desired.

9

3 Results for product networks

In this section, we demonstrate the usefulness of the proposed constructions by ap-
plying them to some instances of Cartesian product networks. We ﬁrst study the linear
k-arboricity of a path, a cycle, a complete graph and a Peterson graph.

Lemma 3.1 For path Pn (n ≥ 2),

( lak(Pn) = 1 if k ≥ n − 1

lak(Pn) = 2 if 1 ≤ k < n − 1.

If k ≥ n − 1, then Pn itself is a line k-forest, and hence lak(Pn) = 1. Suppose
Proof.
k < n − 1. Let M be a maximum matching of Pn. Then Pn \ M contains a matching,
say M ′. For 1 ≤ k < n − 1, M, M ′ are two line k-forests, and hence lak(Pn) ≤ 2. From
Observation 2.4, we have lak(Pn) ≥ 2. So lak(Pn) = 2 for 1 ≤ k < n − 1.

Lemma 3.2 For cycle Cn (n ≥ 3),

lak(Cn) = 2 if n is even, k ≥ 1
lak(Cn) = 3 if n is odd, k = 1
lak(Cn) = 2 if n is odd, k ≥ 2.




Proof. Suppose that n is even and k ≥ 1. Since n is even, it follows that there exists a
perfect matching of G, say M . Then M ′ = E(Cn) \ M is also a perfect matching of G.
Clearly, M and M ′ are two line k-forests, and hence lak(Cn) ≤ 2. From Observation 2.4,
we have lak(Cn) = 2 for n is even and k ≥ 1.

Suppose that n is odd and k ≥ 2. Since n is odd, it follows that there exists a maximum
matching of size n−1
2 , say M . Set M ′ = E(Cn) \ M . Clearly, M and M ′ are two line k-
forests, and hence lak(Cn) ≤ 2. From Observation 2.4, we have lak(Cn) = 2 for n is even
and k ≥ 1.

Suppose that n is odd and k = 1. Set V (Cn) = {v1, v2, . . . , vn}. We divide the edge
set of G into three categories: M1 = {v2i−1v2i | 1 ≤ i ≤ r}, M2 = {v2iv2i+2 | 1 ≤ i ≤ r}
and M3 = {v1v2r+1}. Clearly, M1, M2, M3 are three line k-forests, and hence lak(Cn) ≤ 3.
One can easily check that lak(Cn) = 3 for n is odd and k = 1.

Lemma 3.3 [10] For complete graph Kn (n ≥ 2), la1(Kn) = ⌈n/2⌉.

Lemma 3.4 For complete graph Kn (n ≥ 2), ⌈n/2⌉ ≤ lak(Kn) ≤ n.

Proof. From Lemma 2.1, we have

⌈n/2⌉ = lan−1(Kn) ≤ lak(Kn) ≤ la1(Kn) ≤ ∆(Kn) + 1 = n,

as desired.

The Peterson graph HP3 are shown in Figure 3 (a). We now turn our attention to

study the linear k-arboricity of Peterson graphs.

10

Lemma 3.5 For Peterson graph graph HP3, la1(HP3) = 4.

Proof. Since HP3 contains a cycle C5 as its subgraph, it follows that la1(HP3) ≥ la1(C5) =
3. The forest F1 induced by the edges in {v1v2, v7v10, v6v9, v3v4}, the forest F2 induced by
the edges in {v1v5, v2v3, v8v10}, the forest F3 induced by the edges in {v4v5, v7v9, v6v8} and
the forest F4 induced by the edges in {v1v6, v2v7, v3v8, v4v9, v5v10} form 4 linear 1-forests
in HP3. So 3 ≤ lak(HP3) ≤ 4.

We claim that lak(HP3) = 4. Assume, to the contrary, that lak(HP3) = 3. Then
HP3 can be decomposed into 3 linear 1-forests, say F1, F2, F3. Set C1 = v6v8v10v7v9v6,
C2 = v1v2v3v4v5v1, and M = {v1v6, v2v7, v3v8, v4v9, v5v10}. We distinguish the following
cases to show this claim.

Case 1. |M ∩ E(F1)| = 5 and |M ∩ E(F2)| = |M ∩ E(F3)| = 0.
Observe that all the edges in C1 does not belong to F1. Otherwise, there is a path
induced by the edges in F1 such that its length is at least 2, which contradicts to the fact
that k = 1. So all the edges in C1 must belong to F2 or F3. Since C1 is a cycle of order
5, there is a path of length at least 2 in F2 or F3, also a contradiction.
Case 2. |M ∩ E(F1)| = 4, |M ∩ E(F2)| = 1 and |M ∩ E(F3)| = 0.
Without loss of generality, let v1v6 ∈ F2 and M \ {v1v6} ⊆ E(F1). Note that all the
edges in C1 does not belong to F1. So all the edges in C1 must belong to F2 or F3. Since
k = 1, it follows that the elements in E(C1) must belongs to at least 3 linear 1-forests, a
contradiction.

Case 3. |M ∩E(F1)| = 3 and |M ∩E(F2)| = 2 and |M ∩E(F3)| = 0, or |M ∩E(F1)| = 3

and |M ∩ E(F2)| = |M ∩ E(F3)| = 1.

From the symmetry of HP3, we only need to consider the two cases v1v6, v2v7 /∈ E(F1)
and v1v6, v3v8 /∈ E(F1). At ﬁrst, we consider the former case and suppose v1v6, v2v7 /∈
E(F1). Since k = 1, it follows that E(F1) ∩ E(C1) = ∅. So all the edges in C1 must
belong to F2 or F3. Since k = 1, it follows that the elements in E(C1) must belongs to
at least 3 linear 1-forests, a contradiction. Next, we consider the latter case and suppose
v1v6, v3v8 /∈ E(F1). Since k = 1, it follows that E(F1) ∩ E(C2) = ∅. So all the edges in C2
must belong to F2 or F3. Since k = 1, it follows that the elements in E(C2) must belongs
to at least 3 linear 1-forests, a contradiction.

Case 4. |M ∩ E(F1)| = 2, |M ∩ E(F2)| = 2 and |M ∩ E(F3)| = 1.
From the symmetry of HP3, we have the following cases to consider:

(1) v1v6, v2v7 ∈ E(F1), v3v8, v4v9 ∈ E(F2), v5v10 ∈ E(F3);

(2) v1v6, v2v7 ∈ E(F1), v3v8, v5v10 ∈ E(F2), v4v9 ∈ E(F3);

(3) v1v6, v3v8 ∈ E(F1), v2v7, v4v9 ∈ E(F2), v5v10 ∈ E(F3);

(4) v1v6, v3v8 ∈ E(F1), v2v7, v5v10 ∈ E(F2), v4v9 ∈ E(F3).

11

For (1), since v1v6, v2v7 ∈ E(F1), it follows that all the edges adjacent to v1v6 and v2v7
does not belong to F1. Then the elements in {v3v8, v4v9, v5v10, v3v4, v4v5, v8v10} can belong
to F1. Note that v3v8, v4v9 ∈ E(F2), v5v10 ∈ E(F3), and v3v4, v4v5 are adjacent. So
2 ≤ |E(F1)| ≤ 4. We have the following claim.
Claim 1. |E(F1)| = 4.
Proof of Claim 1. Assume, to the contrary, that |E(F1)| = 2 or |E(F1)| = 3. Then
|E(F1) ∩ E(C1)| = 0 or |E(F1) ∩ E(C2)| = 0. Without loss of generality, let |E(F1) ∩
E(C1)| = 0. So all the edges in C1 must belong to F2 or F3. Since k = 1, it follows that
the elements in E(C1) must belongs to at least 3 linear 1-forests, a contradiction.

From Claim 1, |E(F1)| = 4. Then F1 = {v1v6, v2v7, v4v5, v8v10} or F1 = {v1v6, v2v7,
v3v4, v8v10}. Suppose F1 = {v1v6, v2v7, v4v5, v8v10}. Note that v3v8, v4v9 ∈ E(F2), v5v10 ∈
E(F3). Then the edges in E(C2)\{v4v5} belong to F2 or F3. Since the subgraph induced by
these edges is a path of length 4, it follows that v5v1, v2v3 ∈ E(F2) or v1v2, v3v4 ∈ E(F2).
Whenever which case happens, we have a path of length at least 2 in F2, a contradiction.

Similarly to the proof of (2), we can also prove the correctness of (2)-(4).

The following observation is immediate, which will be used in lemma 3.6.

Observation 3.1 Let C5 = w1w2w3w4w5w1 be a cycle. If la3(C5) = 2, then C5 can be
decomposed into two linear 3-forests F1, F2 such that F1 = w1w2w3w4, F2 = w4w5w1, or
F1 = w1w2w3 ∪ w4w5, F2 = w3w4 ∪ w5w1.

Lemma 3.6 For Peterson graph HP3, la3(HP3) = 3.

Proof. Note that the forest F1 induced by the edges in {v2v1v5v4, v9v7v10v8}, the forest
F2 induced by the edges in {v9v6v8, v4v3v2} and the forest F3 induced by the edges in
{v1v6, v2v7, v3v8, v4v9, v5v10} form linear 3-forests in HP3. So lak(HP3) ≤ 3.

It suﬃces to show that la3(HP3) ≥ 3. Since HP3 contains cycles, it follows that 2 ≤
lak(HP3) ≤ 3. We claim that la3(HP3) = 3. Assume, to the contrary, that la3(HP3) = 2.
Then HP3 can be decomposed into 2 linear 3-forests, say F1, F2. Set C1 = v6v8v10v7v9v6,
C2 = v1v2v3v4v5v1, and M = {v1v6, v2v7, v3v8, v4v9, v5v10}. Note that C1, C2 are two
cycles, E(Ci) ∩ E(F1) 6= ∅ and E(Ci) ∩ E(F2) 6= ∅ for i = 1, 2. Since k = 3 and la3(HP3) =
2, it follows from Observation 3.1 that

(1) E(C1) ∩ E(F1) = {v6v8, v8v10, v10v7} and E(C1) ∩ E(F2) = {v7v9, v6v9}.

(2) E(C1) ∩ E(F1) = {v7v9, v6v9} and E(C1) ∩ E(F2) = {v6v8, v8v10, v10v7}.

(3) E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10} and E(C1) ∩ E(F2) = {v7v9, v8v10}.

(4) E(C1) ∩ E(F1) = {v7v9, v8v10} and E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10}.

12

By symmetry, we only need to consider (1) and (3). For (1), we claim that there is at
most one edge in M belonging to F1. Otherwise, there exists a vertex of degree 3 in F1 or
a path of length at least 4, a contradiction. So there is at most one edge in M belonging
to F1. Furthermore, there are at least four edges in M belonging to F2. Then there exists
a path of length at least 4 in F2, also a contradiction.

We conclude that (3) holds. Similarly, C2 must have the same decomposition as C1.

By symmetry of HP3, we have the following.

(3.1) E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10}, E(C1) ∩ E(F2) = {v7v9, v8v10}, E(C2) ∩
E(F1) = {v1v5, v2v3, v3v4}, E(C2) ∩ E(F2) = {v4v5, v1v2}.

(3.2) E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10}, E(C1) ∩ E(F2) = {v7v9, v8v10}, E(C2) ∩
E(F1) = {v1v2, v4v5}, E(C2) ∩ E(F2) = {v1v5, v2v3, v3v4}.

(3.3) E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10}, E(C1) ∩ E(F2) = {v7v9, v8v10}, E(C2) ∩
E(F1) = {v1v2, v1v5, v3v4}, E(C2) ∩ E(F2) = {v4v5, v2v3}.

(3.4) E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10}, E(C1) ∩ E(F2) = {v7v9, v8v10}, E(C2) ∩
E(F1) = {v2v3, v4v5}, E(C2) ∩ E(F2) = {v1v2, v1v5, v3v4}.

(3.5) E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10}, E(C1) ∩ E(F2) = {v7v9, v8v10}, E(C2) ∩
E(F1) = {v1v2, v2v3, v4v5}, E(C2) ∩ E(F2) = {v1v5, v3v4}.

(3.6) E(C1) ∩ E(F1) = {v6v8, v6v9, v7v10}, E(C1) ∩ E(F2) = {v7v9, v8v10}, E(C2) ∩
E(F1) = {v1v5, v3v4}, E(C2) ∩ E(F2) = {v1v2, v2v3, v4v5}.

We only prove that (3.1) is not true, and the other ﬁve cases can be discussed similarly.
For (3.1), we claim that v2v7 ∈ E(F2). Otherwise, the path induced by the edges in
{v4v3, v3v2, v2v7, v7v10} has length 4, a contradiction. So v2v7 ∈ E(F2). We now focus
our attention to the edge v4v9. If v4v9 ∈ E(F1), then the path induced by the edges in
{v2v3, v3v4, v4v9, v9v6, v6v8} has length 5, a contradiction. If v4v9 ∈ E(F2), then the path
induced by the edges in {v1v2, v2v7, v7v9, v9v4, v4v5} has length 5, a contradiction.

From Claim 1, we have lak(HP3) = 3, as desired.

Proposition 3.2 For a Peterson graph HP3,

Proof. From Lemmas 3.4 and 3.5, the results follow for k = 1, 3. For k = 2, the forest
F1 induced by the paths in {v1v5v10, v6v9v7, v2v3v8}, the forest F2 induced by the paths

lak(HP3) =

4 if k = 1,
3 if k = 2,
3 if k = 3,
2 if k ≥ 4.




13

in {v3v4v9, v6v8v10, v1v2v7}, and the forest F3 induced by the edges in {v1v6, v7v10, v4v5}
form linear 2-forests in HP3. So la2(HP3) ≤ 3. From Lemma 2.1 and Lemma 3.5, we
have la2(HP3) ≥ la3(HP3) = 3 and hence la2(HP3) = 3, as desired. For k ≥ 4, the forest

v4

v5

v9

v10

v6

v1

v3

v4

v8

v3

v7

v2

v5

v9

v10

v6

v8

v7

v3

u4

v1

v2

u4

u3

u5

u9
u10

u5

u1

u6

(b)

u8
u7

u2

u3

u10

u9

u8
u7

u2

u1

u6

(c)

v5

v4

v9

v8

v10

v6

v1

v7

v2

(a)

Figure 3: (a) Petersen graph; (b) The network HP4; (c) The structure of HL4.

F1 induced by the paths in {v3v2v1v5v4, v7v9v6v8v10} and the forest F2 induced by the
paths in {v8v3v4v9, v5v10v7v2, v1v6} form linear k-forests in HP3. So lak(HP3) ≤ 2. From
Observation 2.4, we have lak(HP3) = 2.

3.1 Two-dimensional grid graph

A two-dimensional grid graph is an m × n graph Gn,m that is the graph Cartesian
product Pn(cid:3)Pm of path graphs on m and n vertices. For more details on grid graph, we
refer to [7, 18]. The network Pn ◦ Pm is the graph lexicographical product Pn ◦ Pm of path
graphs on m and n vertices. For more details on Pn ◦ Pm, we refer to [24].

Proposition 3.3 (i) For network Pn(cid:3)Pm (m ≥ n ≥ 3),

if k ≥ max{m − 1, n − 1},

lak(Pn(cid:3)Pm) = 2
2 ≤ lak(Pn(cid:3)Pm) ≤ 3 if k ≥ m − 1, k ≤ n − 1,
2 ≤ lak(Pn(cid:3)Pm) ≤ 3 if k ≥ n − 1, k ≤ m − 1,
2 ≤ lak(Pn(cid:3)Pm) ≤ 4 if k ≤ max{m − 1, n − 1}.




(ii) For network Pn ◦ Pm (n ≥ 4, m ≥ 3),

lak(Pn ◦ Pm) = m + 1
m + 1 ≤ lak(Pn ◦ Pm) ≤ 2m + 1 if k ≥ m − 1, k ≤ n − 1,
m + 1 ≤ lak(Pn ◦ Pm) ≤ m + 2
if k ≥ n − 1, k ≤ m − 1,
m + 1 ≤ lak(Pn ◦ Pm) ≤ 2m + 2 if k ≤ max{m − 1, n − 1}.

if k ≥ max{m − 1, n − 1},




14

(iii) For network Pn × Pm (n ≥ 4, m ≥ 3),

(iv) For network Pn ⊠ Pm (n ≥ 4, m ≥ 3),

if k ≥ max{m − 1, n − 1},

lak(Pn × Pm) = 2
2 ≤ lak(Pn × Pm) ≤ 4 if k ≥ m − 1, k ≤ n − 1,
2 ≤ lak(Pn × Pm) ≤ 4 if k ≥ n − 1, k ≤ m − 1,
2 ≤ lak(Pn × Pm) ≤ 8 if k ≤ max{m − 1, n − 1}.

lak(Pn ⊠ Pm) = 4
4 ≤ lak(Pn ⊠ Pm) ≤ 7
4 ≤ lak(Pn ⊠ Pm) ≤ 7
4 ≤ lak(Pn ⊠ Pm) ≤ 12 if k ≤ max{m − 1, n − 1}.

if k ≥ max{m − 1, n − 1},
if k ≥ m − 1, k ≤ n − 1,
if k ≥ n − 1, k ≤ m − 1,






Proof.

(i) From Observation 2.4, lak(Pn(cid:3)Pm) ≥ 2. From Theorem 2.5, we have

lak(Pn(cid:3)Pm) ≤ lak(Pn) + lak(Pm) ≤

The result follows.

2 if k ≥ max{m − 1, n − 1},
3 if k ≥ m − 1, k ≤ n − 1,
3 if k ≥ n − 1, k ≤ m − 1,
4 if k ≤ max{m − 1, n − 1}.

(ii) From Theorem 2.9, we have lak(Pn ◦ Pm) ≥l ∆(Pm)+|V (Pm)|∆(Pn)

Theorem 2.9, we have

2

m = m + 1. From

lak(Pn ◦ Pm) ≤ lak(Pn)|V (Pm)| + lak(Pm) =

if k ≥ max{m − 1, n − 1},

m + 1
2m + 1 if k ≥ m − 1, k ≤ n − 1,
if k ≥ n − 1, k ≤ m − 1,
m + 2
2m + 2 if k ≤ max{m − 1, n − 1}.









(iii) From Theorem 2.10, we have lak(Pn × Pm) ≥l ∆(Pm)∆(Pn)

2.10 and Lemma 3.1, we have

2

m = 2. From Theorem

lak(Pn × Pm) ≤ 2lak(Pn)lak(Pm) =

2 if k ≥ max{m − 1, n − 1},
4 if k ≥ m − 1, k ≤ n − 1,
4 if k ≥ n − 1, k ≤ m − 1,
8 if k ≤ max{m − 1, n − 1}.

(iv) From Observation 1.1, (i) and (iii) of this proposition, we have lak(Pn ⊠ Pm) ≤

lak(Pn(cid:3)Pm) + lak(Pn × Pm) and hence

lak(Pn ⊠ Pm) ≤




if k ≥ max{m − 1, n − 1},
if k ≥ m − 1, k ≤ n − 1,
if k ≥ n − 1, k ≤ m − 1,

4
7
7
12 if k ≤ max{m − 1, n − 1}.

15

From Theorem 2.11, we have lak(Pn ⊠ Pm) ≥l ∆(Pm)∆(Pn)+∆(Pm)+∆(Pn)

2

m = 4.

Remark 1. Let G = Pn and H = Pm. For k ≥ max{m−1, n−1}, we have lak(Pn(cid:3)Pm) =
2 = lak(Pn) + lak(Pm), which implies that the upper bound of Theorem 2.5 is sharp for
k = ℓ and k ≥ max{m − 1, n − 1}. For k ≥ max{m − 1, n − 1}, from Theorem 2.9, we

have m + 1 =l ∆(Pm)+|V (Pm)|∆(Pn)

2

m ≤ lak(Pn ◦ Pm) ≤ lak(Pn)|V (Pm)| + lak(Pm) = m + 1,

which implies that the upper and lower bounds of Theorem 2.9 are sharp for k = ℓ and
k ≥ max{m − 1, n − 1}. For k ≥ max{m − 1, n − 1}, from Theorem 2.10, we have
2 = ⌈ ∆(Pn)∆(Pm)
⌉ ≤ lak(Pn × Pm) ≤ 2lak(Pn)lak(Pm) = 2, which implies that the upper
and lower bounds of Theorem 2.10 are sharp for k = ℓ and k ≥ max{m − 1, n − 1}. For

2

k ≥ max{m − 1, n − 1}, from Theorem 2.11, we have 4 = l ∆(Pn)∆(Pm)+∆(Pn)+∆(Pm)

lak(Pn ⊠ Pm) ≤ lak(Pn) + lak(Pm) + 2lak(Pn)lak(Pm) = 4, which implies that the upper
and lower bounds of Theorem 2.11 are sharp for k = ℓ and k ≥ max{m − 1, n − 1}.

m ≤

2

3.2

r-dimensional mesh

An r-dimensional mesh is the Cartesian product of r paths. By this deﬁnition, two-
dimensional grid graph is a 2-dimensional mesh. An r-dimensional hypercube is a special
case of an r-dimensional mesh, in which the r paths are all of size 2; see [20].

Proposition 3.4 (i) For r-dimensional mesh Pm1

(cid:3)Pm2

(cid:3) · · · (cid:3)Pmr ,

2 ≤ lak(Pm1

(cid:3)Pm2

(cid:3) · · · (cid:3)Pmr ) ≤ 2r.

(ii) For network Pm1 ◦ Pm2 ◦ · · · ◦ Pmr ,

1 +

r

Yi=2

mimi+1 . . . mr ≤ lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr ) ≤ 2  r
Xi=2

mimi+1 . . . mr + 1! .

(iii) For network Pm1 × Pm2 × · · · × Pmr ,

2r−1 ≤ lak(Pm1 × Pm2 × · · · × Pmr ) ≤ 22r−1.

(iv) For network Pm1

⊠ Pm2

⊠ · · · ⊠ Pmr ,

1
2

(3r − 1) ≤ lak(Pm1

⊠ Pm2

⊠ · · · ⊠ Pmr ) ≤ 2r + 22r−1.

(i) From Corollary 2.6 and Lemma 3.1, we have lak(Pm1

(cid:3) · · · (cid:3)Pmr ) ≤
Proof.
lak(Pm1 ) + lak(Pm2 ) + . . . + lak(Pmr ) ≤ 2r. From this together with Observation 2.4, we
have 2 ≤ lak(Pm1 ) + lak(Pm2 ) + . . . + lak(Pmr ) ≤ 2r, as desired.

(cid:3)Pm2

16

(ii) From Theorem 2.9, we have lak(G ◦ H) ≤ lak(G)|V (H)| + lak(H) for any two

graphs G and H, and hence

lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr )

= lak((Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−1) ◦ Pmr )

≤ lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−1)mr + lak(Pmr )

≤ lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−1)mr + 2

≤ [lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−2)mr−1 + lak(Pmr−1 )]mr + 2

≤ [lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−2)mr−1 + 2]mr + 2

= lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−2)mr−1mr + 2mr + 2

≤ [lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−3)mr−2 + lak(Pmr−2 )]mr−1mr + 2mr + 2

≤ lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−3)mr−2mr−1mr + 2mr−1mr + 2mr + 2

≤ . . .

≤ lak(Pm1 ◦ Pm2)m3 . . . mr−2mr−1mr + 2m4 . . . mr−2mr−1mr + . . . + 2mr−1mr + 2mr + 2

≤ 2m2m3 . . . mr−2mr−1mr + 2m3 . . . mr−2mr−1mr + . . . + 2mr−1mr + 2mr + 2

≤ 2

r

Xi=2

mimi+1 . . . mr + 2.

From Theorem 2.9, we have lak(G ◦ H) ≥ l ∆(H)+|V (H)|∆(G)

H, and hence

2

m for any two graphs G and

lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr )

2

2

(cid:25)

∆(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−1)m
2 (cid:0)∆(Pmr−1) + |V (Pmr−1)|∆(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−2)(cid:1)m

≥ (cid:24) ∆(Pmr ) + |V (Pmr )|∆(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−1)
≥ 1 +l mr
≥ 1 +l mr
≥ 1 + mr +l mrmr−1
≥ 1 + mr + mrmr−1 + · · · +l mrmr−1 · · · m2

∆(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr−2)m

≥ 1 + mr + mrmr−1 + · · · + mrmr−1 · · · m2

2

∆(Pm1 )m

≥ . . .

2

≥ 1 +

r

Yi=2

mimi+1 . . . mr.

17

(iii) From Theorem 2.10, we have lak(G × H) ≤ 2lak(G)lak(H) for any two graphs G

and H, and hence

lak(Pm1 × Pm2 × · · · × Pmr ) ≤ 2lak(Pm1 × Pm2 × · · · × Pmr−1)lak(Pmr )

≤ 22lak(Pm1 × Pm2 × · · · × Pmr−1)
≤ 23lak(Pm1 × Pm2 × · · · × Pmr−2)lak(Pmr−1)
≤ 24lak(Pm1 × Pm2 × · · · × Pmr−2)
≤ . . .
≤ 22(r−1)lak(Pm1 )
≤ 22r−1.

From Theorem 2.10, we have lak(G × H) ≥l ∆(G)∆(H)

hence

2

m for any two graphs G and H, and

lak(Pm1 × Pm2 × · · · × Pmr ) ≥ (cid:24) ∆(Pm1 × Pm2 × · · · × Pmr−1)∆(Pmr )

2

≥ ∆(Pm1 × Pm2 × · · · × Pmr−1)

(cid:25)

≥ ∆(Pm1 × Pm2 × · · · × Pmr−2)∆(Pmr−1)

= 2∆(Pm1 × Pm2 × · · · × Pmr−2)

≥ 2∆(Pm1 × Pm2 × · · · × Pmr−3)∆(Pmr−2 )
= 22∆(Pm1 × Pm2 × · · · × Pmr−3)
≥ . . .
≥ 2r−2lak(Pm1 )
≥ 2r−1.

(iv) From (i), (iii) of this proposition and Observation 1.1, we have

lak(Pm1

⊠ Pm2

⊠ · · · ⊠ Pmr ) ≤ lak(Pm1

(cid:3)Pm2

(cid:3) · · · (cid:3)Pmr ) + lak(Pm1 × Pm2 × · · · × Pmr )

≤ 2r + 22r−1.

From Theorem 2.10, we have

lak(G ⊠ H) ≥(cid:24) ∆(G)∆(H) + ∆(G) + ∆(H)

2

(cid:25) =(cid:24) ∆(G)(∆(H) + 1) + ∆(H)

2

(cid:25)

18

for any two graphs G and H, and hence

⊠ Pm2
⊠ Pm2

⊠ · · · ⊠ Pmr )
⊠ · · · ⊠ Pmr−1)(∆(Pmr ) + 1) + ∆(Pmr )

2

(cid:25)

lak(Pm1

2

2

≥ (cid:24) ∆(Pm1
= (cid:24) 3
≥ (cid:24) 3
= (cid:24) 32
≥ (cid:24) 32
= (cid:24) 33
≥ (cid:24) 3r−1

2
≥ . . .

2

2

2

=

(3r − 1).

1
2

∆(Pm1

∆(Pm1

⊠ Pm2

⊠ Pm2

∆(Pm1

⊠ Pm2

∆(Pm1

⊠ Pm2

∆(Pm1

⊠ Pm2

⊠ · · · ⊠ Pmr−1)(cid:25) + 1
⊠ · · · ⊠ Pmr−2)(∆(Pmr−1 ) + 1) + ∆(Pmr−1)(cid:25) + 1
⊠ · · · ⊠ Pmr−2)(cid:25) + 3 + 1
⊠ · · · ⊠ Pmr−3)(∆(Pmr−2) + 1) + ∆(Pmr−2)(cid:25) + 1
⊠ · · · ⊠ Pmr−3)(cid:25) + 32 + 3 + 1

∆(Pm1)(cid:25) + 3r−2 + . . . + 32 + 3 + 1

3.3

r-dimensional torus

An r-dimensional torus is the Cartesian product of r cycles Cm1, Cm2 , · · · , Cmr of
size at least three. The cycles Cmi are not necessary to have the same size. Ku et al.
[21] showed that there are r edge-disjoint spanning trees in an r-dimensional torus. The
network Cm1 ◦ Cm2 ◦ · · · ◦ Cmr is investigated in [24]. Here, we consider the networks
constructed by Cm1

(cid:3) · · · (cid:3)Cmr and Cm1 ◦ Cm2 ◦ · · · ◦ Cmr , respectively.

(cid:3)Cm2

Proposition 3.5 (i) For r-dimensional torus Cm1

(cid:3)Cm2

(cid:3) · · · (cid:3)Cmr ,

2 ≤ lak(Cm1

(cid:3)Cm2

(cid:3) · · · (cid:3)Cmr ) ≤ 3r.

(ii) For network Cm1 ◦ Cm2 ◦ · · · ◦ Cmr ,

1 +

r

Yi=2

mimi+1 . . . mr ≤ lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr ) ≤ 3  r
Xi=2

(ii) For network Cm1 × Cm2 × · · · × Cmr ,

mimi+1 . . . mr + 1! .

2r−1 ≤ lak(Cm1 × Cm2 × · · · × Cmr ) ≤ 3 · 6r−1.

(iv) For network Cm1

⊠ Cm2

⊠ · · · ⊠ Cmr ,

1
2

(3r − 1) ≤ lak(Cm1

⊠ Cm2

⊠ · · · ⊠ Cmr ) ≤ 3(r + 6r−1).

19

Proof.

(i) From Corollary 2.6 and Lemma 3.4, we have

2 ≤ max{lak(Cm1 ), lak(Cm2), . . . , lak(Cmr )}

≤ lak(Cm1

(cid:3)Cm2

(cid:3) · · · (cid:3)Cmr )

≤ lak(Cm1) + lak(Cm2) + . . . + lak(Cmr )

≤ 3r.

(ii) From Theorem 2.5, we have lak(G ◦ H) ≤ lak(G)|V (H)| + lak(H) for any two

graphs G and H, and hence

lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr )

= lak((Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−1) ◦ Cmr )

≤ lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−1)mr + lak(Cmr )

≤ lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−1)mr + 3

≤ [lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−2)mr−1 + lak(Cmr−1)]mr + 3

≤ [lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−2)mr−1 + 3]mr + 3

= lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−2)mr−1mr + 3mr + 3

≤ [lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−3)mr−2 + lak(Cmr−2)]mr−1mr + 3mr + 3

≤ lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr−3)mr−2mr−1mr + 3mr−1mr + 3mr + 3

≤ . . .

≤ lak(Cm1 ◦ Cm2 )m3 . . . mr−2mr−1mr + 3m4 . . . mr−2mr−1mr + . . . + 3mr−1mr + 3mr + 3

≤ 3m2m3 . . . mr−2mr−1mr + 3m3 . . . mr−2mr−1mr + . . . + 3mr−1mr + 3mr + 3

≤ 3

r

Xi=2

mimi+1 . . . mr + 3.

From Observation 2.1 and (ii) of Proposition 3.4, we have lak(Cm1 ◦ Cm2 ◦ · · · ◦ Cmr ) ≥

lak(Pm1 ◦ Pm2 ◦ · · · ◦ Pmr ) ≥ 1 +Qr

i=2 mimi+1 . . . mr.

(iii) From Theorem 2.10, we have lak(G × H) ≤ 2lak(G)lak(H) for any two graphs G

and H, and hence

lak(Cm1 × Cm2 × · · · × Cmr ) ≤ 2lak(Cm1 × Cm2 × · · · × Cmr−1)lak(Cmr )

≤ 6lak(Cm1 × Cm2 × · · · × Cmr−1)

≤ 6[2lak(Cm1 × Cm2 × · · · × Cmr−2)lak(Cmr−1)]
≤ 62lak(Cm1 × Cm2 × · · · × Cmr−2)
≤ . . .
≤ 6r−1lak(Cm1)
≤ 3 · 6r−1.

20

From Observation 2.1 and (iii) of Proposition 3.4, we have lak(Cm1 × Cm2 × · · · × Cmr ) ≥
lak(Pm1 × Pm2 × · · · × Pmr ) ≥ 2r−1.

(iv) From (i), (iv) of this proposition and Observation 1.1, we have

lak(Cm1

⊠ Cm2

⊠ · · · ⊠ Cmr )

≤ lak(Cm1
≤ 3(r + 6r−1).

(cid:3)Cm2

(cid:3) · · · (cid:3)Cmr ) + lak(Cm1 × Cm2 × · · · × Cmr )

From Observation 2.1 and (iv) of Proposition 3.4, we have lak(Cm1
lak(Pm1

i=2 mimi+1 . . . mr.

⊠ Pm2

⊠ Cm2

⊠ · · · ⊠ Cmr ) ≥

⊠ · · · ⊠ Pmr ) ≥ 1 +Qr

3.4

r-dimensional generalized hypercube

Let Km be a clique of m vertices, m ≥ 2. An r-dimensional generalized hypercube

[12, 14] is the Cartesian product of r cliques. We have the following:

Proposition 3.6 (i) For generalized hypercube Km1
2, 1 ≤ i ≤ r),

(cid:3)Km2

(cid:3) · · · (cid:3)Kmr (mi ≥ 2, r ≥

maxnl mi

2 m | 1 ≤ i ≤ ro ≤ lak(Km1

(cid:3)Km2

(cid:3) · · · (cid:3)Kmr ) ≤

mi.

r

Xi=1

(ii) For network Km1 ◦ Km2 ◦ · · · ◦ Kmr (mi ≥ 2, r ≥ 2, 1 ≤ i ≤ r),

(cid:24)Pr

i=1 mi
2

(cid:25) ≤ lak(Km1

(cid:3)Km2

(cid:3) · · · (cid:3)Kmr ) ≤ Pr

i=1 mi
2

.

(iii) For network Km1 × Km2 × · · · × Kmr (mi ≥ 2, r ≥ 2, 1 ≤ i ≤ r),

& 1

2

r

(mi − 1)' ≤ lak(Km1 × Km2 × · · · × Kmr ) ≤ 2r−1
Yi=1

r

Yi=1

mi.

(iv) For network Km1

⊠ Km2

⊠ · · · ⊠ Kmr (mi ≥ 2, r ≥ 2, 1 ≤ i ≤ r),

& 1

2

r

Yi=1

mrmr−1 . . . mi+1(mi − 1)' ≤ lak(Km1

⊠ Km2

⊠ · · · ⊠ Kmr ) ≤

mi + 2r−1

r

Xi=1

mi.

r

Yi=1

Proof.

(i) From Corollary 2.6 and Lemma 3.4, we have

maxnl mi

2 m | 1 ≤ i ≤ ro = max{lak(Km1), lak(Km2 ), . . . , lak(Kmr )}

≤ lak(Km1

(cid:3)Km2

(cid:3) · · · (cid:3)Kmr )

≤ lak(Km1 ) + lak(Km2 ) + . . . + lak(Kmr )

≤

r

Xi=1

mi.

21

(ii) From the deﬁnition of lexicographical product, Km1 ◦ Km2 ◦ · · · ◦ Kmr is a complete

graph. From Lemma 3.4, we have

(cid:24)Pr

i=1 mi
2

(cid:25) ≤ lak(Km1 ◦ Km2 ◦ · · · ◦ Kmr ) ≤ Pr

i=1 mi
2

.

(iii) From Theorem 2.10, we have lak(G × H) ≤ 2lak(G)lak(H) for any two graphs G

and H, and hence

lak(Km1 × Km2 × · · · × Kmr ) ≤ 2lak(Km1 × Km2 × · · · × Kmr−1)lak(Kmr )

≤ 2mrlak(Km1 × Km2 × · · · × Kmr−1)
≤ 22mrlak(Km1 × Km2 × · · · × Kmr−2)lak(Kmr−1)
≤ 22mrmr−1lak(Km1 × Km2 × · · · × Kmr−2)
≤ . . .
≤ 2r−1mrmr−1 . . . m2lak(Km1 )

= 2r−1

mi.

r

Yi=1

2

hence

m for any two graphs G and H, and

From Theorem 2.10, we have lak(G × H) ≥l ∆(G)∆(H)
lak(Km1 × Km2 × · · · × Kmr ) ≥ (cid:24) ∆(Km1 × Km2 × · · · × Kmr−1)∆(Kmr )
(cid:25)
∆(Km1 × Km2 × · · · × Kmr−1)(cid:25)
∆(Km1 × Km2 × · · · × Kmr−2)∆(Kmr )(cid:25)

2

2

2

≥ (cid:24) mr − 1
≥ (cid:24) mr − 1
≥ (cid:24) (mr − 1)(mr−1 − 1)
≥ (cid:24) (mr − 1)(mr−1 − 1) . . . (m2 − 1)
= & 1

(mi − 1)' .
Yi=1

≥ . . .

2

2

2

r

∆(Km1 × Km2 × · · · × Kmr−2)(cid:25)

∆(Km1 )(cid:25)

(iv) From (i), (iii) of this proposition and Observation 1.1, we have

lak(Km1

⊠ Km2

⊠ · · · ⊠ Kmr )

≤ lak(Km1

(cid:3)Km2

(cid:3) · · · (cid:3)Kmr ) + lak(Km1 × Km2 × · · · × Kmr )
r

≤

r

Xi=1

mi + 2r−1

mi.

Yi=1

22

From Theorem 2.11, we have

lak(G ⊠ H) ≥(cid:24) ∆(G)(∆(H) + 1) + ∆(H)

2

(cid:25)

for any two graphs G and H, and hence

lak(Km1

⊠ Km2
⊠ Km2

⊠ · · · ⊠ Kmr )
⊠ · · · ⊠ Kmr−1)(∆(Kmr ) + 1) + ∆(Kmr )

(cid:25)

2

2

≥ (cid:24) ∆(Km1
= (cid:24) mr − 1
≥ (cid:24) mr − 1
= (cid:24) mr − 1
≥ (cid:24) mr − 1
= & 1
Yi=1

≥ . . .

2
r

2

2

+

+

+

+

2

∆(Km1

⊠ Km2

mr
2
mr

⊠ Km2

2 (cid:2)∆(Km1

mr(mr−1 − 1)

2

mr(mr−1 − 1)

2

+

+

⊠ · · · ⊠ Kmr−1)(cid:25)
⊠ · · · ⊠ Kmr−2)(∆(Kmr−1 ) + 1) + ∆(Kmr−1)(cid:3)(cid:25)

mrmr−1

2

∆(Km1

⊠ Km2

⊠ · · · ⊠ Kmr−2)(cid:25)

mrmr−1(mr−2 − 1)

2

+ . . . +

mrmr−1 . . . m2

2

∆(Km1)(cid:25)

mrmr−1 . . . mi+1(mi − 1)' .

3.5 n-dimensional hyper Petersen network

An n-dimensional hyper Petersen network HPn is the product of the well-known Pe-
tersen graph and Qn−3 [11], where n ≥ 3 and Qn−3 denotes an (n − 3)-dimensional
hypercube. The cases n = 3 and 4 of hyper Petersen networks are depicted in Figure 2.
Note that HP3 is just the Petersen graph; see Figure 3 (a).

The network HLn is the lexicographical product of the Petersen graph and Qn−3,
where n ≥ 3 and Qn−3 denotes an (n − 3)-dimensional hypercube; see [24]. Note that HL4
is a graph obtained from two copies of the Petersen graph by add one edge between one
vertex in a copy of the Petersen graph and one vertex in another copy; see Figure 3 (c)
for an example (We only show the edges v1ui (1 ≤ i ≤ 10)).

Similarly, the networks HDn and HSn are deﬁned as the direct and strong product
of the Petersen graph and Qn−3, respectively, where n ≥ 3 and Qn−3 denotes an (n − 3)-
dimensional hypercube. Note that HL3 = HD3 = HS3 is just the Petersen graph, and

23

Proposition 3.7 (i) For network HP4,

(ii) For network HL4,

(iii) For network HD4,

(iv) For network HS4,

4 ≤ lak(HP4) ≤ 5 if k = 1,
3 ≤ lak(HP4) ≤ 4 if k = 2,
3 ≤ lak(HP4) ≤ 4 if k = 3,
2 ≤ lak(HP4) ≤ 3 if k ≥ 4.

4 ≤ lak(HL4) ≤ 14 if k = 1,
4 ≤ lak(HL4) ≤ 13 if k = 2,
4 ≤ lak(HL4) ≤ 13 if k = 3,
4 ≤ lak(HL4) = 12 if k ≥ 4.

2 ≤ lak(HD4) ≤ 8 if k = 1,
2 ≤ lak(HD4) ≤ 6 if k = 2,
2 ≤ lak(HD4) ≤ 6 if k = 3,
2 ≤ lak(HD4) ≤ 4 if k ≥ 4.

4 ≤ lak(HS4) ≤ 13 if k = 1,
4 ≤ lak(HS4) ≤ 10 if k = 2,
4 ≤ lak(HS4) ≤ 10 if k = 3,
if k ≥ 4.
4 ≤ lak(HS4) ≤ 7










Proof.

(i) From Theorem 2.5, we have

lak(HP4) ≥ lak(HP3) ≥

4 if k = 1,
3 if k = 2,
3 if k = 3,
2 if k ≥ 4.




From Theorem 2.5, Lemmas 3.1 and 3.5, we have

lak(HP4) ≤ lak(HP3) + lak(P2) = lak(HP3) + 1 ≤

(ii) From Theorem 2.9, Lemmas 3.1 and 3.5, we have

5 if k = 1,
4 if k = 2,
4 if k = 3,
3 if k ≥ 4.




4 ≤ lak(HP4) ≤ lak(HP3)|V (P2)| + lak(P2) = 2lak(HP3) + 1 ≤

24

9 if k = 1,
7 if k = 2,
7 if k = 3,
5 if k ≥ 4.




(iii) From Theorem 2.10, Lemmas 3.1 and 3.5, we have

lak(HD4) ≤ 2lak(HP3)lak(P2) = 2lak(HP3) ≤

8 if k = 1,
6 if k = 2,
6 if k = 3,
4 if k ≥ 4.




(iv) From Theorem 2.11, lak(HS4) ≥ 4. From Observation 1.1, we have

lak(HS4) ≤ lak(HP4) + lak(HD4) ≤

13 if k = 1,
10 if k = 2,
10 if k = 3,
if k ≥ 4.
7




References

[1] F. Bao, Y. Igarashi, S.R. ¨Ohring, Reliable Broadcasting in Product Networks, Discrete

Applied Math. 83 (1998), 3-20.

[2] R.E.L. Aldred, N.C. Wormald, More on the linear k-arboricity of regular graphs, Aus-

tralasian J. Combin. 18(1998), 97–104.

[3] N. Alon, The linear arboricity of graphs, Israel J. Math. 62(3)(1988), 311–325.

[4] N. Alon, V.J. Teague, N.C. Wormald, Linear arboricity and linear k-arboricity of

regular graphs, Graphs & Combin. 17(1)(2001), 11–16.

[5] J.C. Bermond, J.L. Fouquet, M. Habib, B. P´eroche, On linear k-arboricity, Discrete

Math. 52(2-3)(1984), 123–132.

[6] J.A. Bondy, U.S.R. Murty, Graph Theory, GTM 244, Springer, 2008.

[7] N.J. Calkin, H.S. Wilf, The number of independent sets in a grid graph, SIAM J.

Discrete Math. 11(1)(1998), 54–60.

[8] G.J. Chang, Algorithmic aspects of linear k-arboricity, Taiwanese J. Math. 3(1)(1999),

73–81.

[9] G.J. Chang, B.L. Chen, H.L. Fu, K.C. Huang, Linear k-arboricities on trees, Discrete

Appl. Math. 103(1-3)(2000), 281–287.

[10] B.L. Chen, K.C. Huang, On the linear k-arboricity of Kn and Kn,n, Discrete Math.

254(1-3)(2002), 51–61.

25

[11] S.K. Das, S.R. ¨Ohring, A.K. Banerjee, Embeddings into hyper Petersen network: Yet

another hypercube-like interconnection topology, VLSI Design 2(4)(1995), 335–351.

[12] K. Day, A.-E. Al-Ayyoub, The cross product of interconnection networks, IEEE Trans.

Parallel and Distributed Systems 8(2)(1997), 109–118.

[13] G. Dirac, On Hamilton circuits and Hamilton paths, Math. Ann. 197(1972), 57–70.

[14] P. Fragopoulou, S.G. Akl, H. Meijer, Optimal communication primitives on the
generalized hypercube network, IEEE Trans. Parallel and Distributed Computing
32(2)(1996), 173–187.

[15] R. Hammack, W. Imrich, Sandi Klav˘zr, Handbook of product graphs, Secend edition,

CRC Press, 2011.

[16] M. Habib, B. Peroche, La k-arboricit´e lin´eaire des arbres, Annales Polonici Mathe-

matici 17(1983), 307–317.

[17] F. Harary, Covering and packing in graphs. I, Annals of the New York Academy of

Sciences 175(1970), 198–205.

[18] A. Itai, M. Rodeh, The multi-tree approach to reliability in distributed networks, In-

form. Comput. 79(1988), 43–59.

[19] B. Jackson, N. C. Wormald, On the linear k-arboricity of cubic graphs, Discrete Math.

162(1-3)(1996), 293–297.

[20] S.L. Johnsson, C.T. Ho, Optimum broadcasting and personaized communication in

hypercubes, IEEE Trans. Computers 38(9)(1989), 1249-1268.

[21] S. Ku, B. Wang, T. Hung, Constructing edge-disjoint spanning trees in product net-
works, Parallel and Distributed Systems, IEEE Transactions on parallel and disjoited
systems, 14(3)(2003), 213-221.

[22] R. Laskar, B. Auerbach, On decomposition of r-partite graphs into edge-disjoint

Hamilton circuits, Discrete Math. 14(1976), 265–268.

[23] K.W. Lih, L.D.Tong, W.F.Wang, The linear 2-arboricity of planar graphs, Graphs &

Combin. 19(2)(2003), 241–248.

[24] Y. Mao, Path-connectivity of lexicographical product graphs, Int. J. Comput. Math.

93(1)(2016), 27–39.

[25] A. Vesel, J. ˘Zerovnik, On the linear k-arboricity of cubic graphs, Inter. J. Comput.

Math. 75(4)(2000), 431–444.

26

[26] B. Xue, L. Zuo, Linear (n − 1)-arboricity of Kn(m), Discrete Appl. Math.

158(14)(2010), 1546–1550.

[27] C.H. Yeh, Linear k-arboricity of complete multipartite graphs, Thesis for Doctor De-

gree, National Chiao Tung University, 2005.

[28] C.H. Yen, H.L. Fu, Linear 2-arboricity of the complete graph, Taiwanese J. Math.

14(1)(2010), 273–286.

[29] L. Zuo, S. He, B. Xue, The linear (n−1)-arboricity of Cartesian product graphs, Appl.

Anal. Discr. Math. 9(1)(2015), 13–28.

27

