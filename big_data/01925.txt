N P-Completeness of the Negative

k-Cycle Problem ⋆

Longkun Guo1, Peng Li2

1School of Computer Science, The University of Adelaide, Australia

2Department of Catalog Quality, Amazon.com, Unite States

Abstract. Given a positive integer k and a directed graph with real
edge cost, the negative k-cycle problem (kNCP) is to determine whether
there exists a negative cycle with at least k edges. The kNCP problem
generalizes two well known problems: The negative cycle detection prob-
lem of determining whether there exist negative cycles in a given graph,
and the k-cycle problem of determining whether there exist a cycle with
at least k edges.
This paper proves the N P-completeness of kNCP for any ﬁxed k ≥ 3 by
giving a reduction from the 3 occurrence 3-Satisﬁability (3O3SAT ) prob-
lem. Compared to the fact that the negative cycle detection problem is
polynomial solvable and the k-cycle problem is ﬁxed-parameter tractable
with respect to k, the hardness result for kNCP seems interesting.

Keywords: N P-complete, 3 occurrence 3-Satisﬁability, negative k-cycle.

1 Introduction

The negative cycle detection problem, to determine whether a given graph con-
tains negative cycles, has wide application areas. Other than only detecting
a negative cycle, some problems, such as verifying deadlock-free property of
a dataﬂow system, require detecting negative cycles with a minimum length
greater than two [8,7]. This motivated us to study the negative k-cycle detection
problem (kNCP). Compared with the classic negative cycle detection problem,
the new problem has restriction on the minimum length of the cycles.

Before introducing our results, we would like ﬁrst to clarify some deﬁnitions.

Deﬁnition 1 (Cycle) For a graph G = (V ; E), a cycle O is a walk v0v1 . . . vn
over G such that there are no repeated vertices except v0 = vn. Let c(e) → R be
the cost function of e ∈ E. Then cycle O is negative if the total weight of edges
on O is negative, e.g. Pn

i=0 c(vivi+1) < 0.

For convenience, we refer to cycles that have k edges as k-cycle.

⋆ This research work is supported by Australian Research Council Discovery Project

DP150104871, and Natural Science Foundation of China #61300025.

6
1
0
2

 
r
a

M
7

 

 
 
]

C
C
.
s
c
[
 
 

1
v
5
2
9
1
0

.

3
0
6
1
:
v
i
X
r
a

2

Longkun Guo and Peng Li

Deﬁnition 2 (Negative k-cycle Problem, kNCP) Given a graph G = (V, E),
where each edge e ∈ E is with a cost c(e) → R, and a length l(e) = 1, the neg-
ative k-cycle problem is to decide whether there exists a cycle O, such that the
length l(O) = Pe∈O l(e) ≥ k and the cost c(O) < 0.

The kNCP problem generalizes both the negative cycle detection problem and
the k cycle problem (or namely the long directed cycle problem [2]). The former
is exactly 2NCP, i.e. kNCP with k = 2, which can be solved in polynomial time
with classic algorithms such as the Bellman-Ford algorithm [1,5]. The latter, i.e.
the k cycle problem to determine whether a given graph contains a cycle O with
l(O) ≥ k, is exactly kNCP when c(e) < 0 holds for every e ∈ E. It is shown
by [6] that the problem is ﬁxed parameter tractable, and admits an algorithm
with a time complexity kO(k)nO(1). The time complexity is then improved to
O(cknO(1)) for a constant c > 0 by using representative sets as in [4], and
currently to 6.75knO(1) independently by [3] and [9].

Diﬀerent to the two classic special cases above, the kNCP problem admits no
polynomial algorithms for any ﬁxed k ≥ 3. Formally, we will prove the following
theorem.

Theorem 3 The k-negative cycle problem is N P-complete in a simple graph
(where parallel edge in opposite direction is allowed), for any ﬁxed integer k ≥ 3.

2 Proof of Theorem 3

In this section, we will prove Theorem 3 by reducing from the 3 occurrence 3SAT
(3O3SAT ) problem which is known to be N P-complete [10]. In an instance of
3O3SAT , we are given n variables {x1, . . . , xn} and m clauses {C1, . . . , Cm},
where Ci is the OR of at most three literals, and each literal is an occurrence
of the variable xj or its negation. In addition, each variable xi, including both
literal xi and xi, appears at most 3 times in all the m clauses. The 3O3SAT
problem answers whether there is an assignment satisfying all the m clauses.

To simplify the reduction, W.l.o.g. we assume that the possible occurrences

of a variable x in an instance of 3O3SAT fall in the following three cases:

Case 1: All occurrences of x are all x;
Case 2: The occurrences of x are exactly one positive literal and one negative

literal;

Case 3: The occurrences of x are exactly two positive literals and one neg-

ative literal;

Note that there are still two other cases: (1) all occurrences of x are negative
literals; (2) exactly two occurrences of negative literals and one positive literal.
However, these two cases can be immediately reduced to Case 1 and Case 3,
respectively, by setting y = x and replacing occurrences of x and x with y and
y, respectively. Therefore, we only need to consider the three cases above..

The key idea of the proof is, for any given instance of 3O3SAT, to construct
a graph G, such that there exists a cycle O with c(O) < 0 and l(O) ≥ 3 in G if
and only if the instance is satisﬁable. An important fact used in the construction

N P-Completeness of kNCP

3

is that every variable appears at most 3 times in a 3O3SAT instance. In the
following, we will show how to construct G according to clauses, variables, and
the relation between clauses and variables.

1. For each Ck:

Add to G two vertices uk and vk, as well as edge (vk, uk+1), 1 ≤ k ≤ m − 1
with cost 0, and edge (vm, u1) with cost −1.

2. For each variable xi, construct a lobe according to the occurrences of xi and

xi:

– Case 1: all occurrences of xi in are positive literal xi, such as x4 in

Figure 1.
For the jth occurrence of xi, add a directed edge (yj
−2m to it.

i , zj

i ) and assign cost

– Case 2: exactly one occurrence for each of positive literal xi and negation

xi, such as x2 in Figure 1.
(a) Add two vertex zj2
directed edges (yj1

i = yj1
i , zj1

i and yj2
i , zj2

i = zj1
i ).

i ) and (yj2

i , and connect them with

(b) Assign edge (yj1

m+1 ;
– Case 3: exactly 2 occurrences of xi and one occurrence xi, such as x1

i ) with cost −2m and (yj2

i ) with cost

i , zj1

i , zj2

1

in Figure 1.
(a) For the two positive literals of xi, say the j1th and j2th occurrence
i , and two directed

i , zj1

i , zj2

of xi, j1 < j2, add four vertices yj1
edges (yj1

i ) connecting them with cost −2m;

i ) , (yj2

i , zj2

i , zj1

, yj2

i

(b) For the negation xi, say the j3th occurrence, set zj3
i , zj1

i , and add three directed edges (yj3
zj2
2m+2 , respectively.
costs

2m+2 , 0 and

i ), (yj2

i , yj2

1

1

i = yj1
i ), (zj1

i and yj3
i , zj3

i =
i ) with

3. For the relation between the variables and the clauses, say Ck is the clause
containing the jth occurrence of xi, i.e. Ck is the jth clause xi appears in,
add directed edges (uk, yj
i , vk). If the occurrence of xi in Ck is a
positive literal, assign the newly added edges with cost m; Otherwise, assign
them with cost 0. Note that no edges will be added between lobes and uk, vk
if xi does not appear in Ck.

i ) and (zj

An example of the construction of G according to F = (x1 ∨x3)(x1 ∨x2 ∨x4)(x1 ∨
x2 ∨ x4) is as depicted in Figure 1.

It remains only to prove the following lemma, which could immediately result

in the correctness of Theorem 3.

Lemma 4 An instance of 3O3SAT is feasible iﬀ the corresponding graph G
contains a cycle O with l(O) ≥ 3 and c(O) < 0.

Let U = {ui, vi|i = 1, . . . , m} be the set of vertices that correspond to the
clauses. We ﬁrst prove a proposition that if a path from uh to vl (h 6= l) does
not enroute any other u ∈ U , the cost of the path is at least m.

Proposition 5 Let P (u, v) be a path from u to v. For any path P (uh, vl) that
satisﬁesP (uh, vl) ∩ U = {uh, vl}, if h 6= l, then c(p(uh, vl)) ≥ m.

4

Longkun Guo and Peng Li

x1

x2

x3

x4

1 (z 3
1 )
y 1

z 1

1

y 2

1

1 (y 3
z 2

1 ) y 1

2 (z 2
2 )

2 (y 2
2 )
z 1

y 1

3

z 1

3

y 1

4

z 1

4

y 2

4

z 2

4

u1

v1

u2

v2

u3

v3

Cost −2m edge
Cost m edge

Cost

1

m+1 edge

Cost 0 edge

Cost

1

2m+2 edge

Cost −1 edge

Fig. 1. The construction of G wrt (x1 ∨ x3)(x1 ∨ x2 ∨ x4)(x1 ∨ x2 ∨ x4).

Proof. Apparently, for every edge (y, z) with cost −2m, there exists only one
edge e1 entering y, and only one edge e2 leaving z. Furthermore, e1 = (uh′ , y)
and e2 = (z, vh′ ). So P (uh, vl), h 6= l, as in the proposition can not go through
any cost −2m edge. That is, P (uh, vl), h 6= l, can only go through the non-
negative cost edges. It remains to show P (uh, vl), h 6= l, must go through at
least one cost m edge.

i and zj2

Suppose P (uh, vl), h 6= l does not go through any cost m edges. Let (uh, yj1

i ),
(zj2
i , vl) ∈ P (uh, vl) be the two edges leaving uh and entering vl, respectively.
Then yj1
i must incident to two edges that corresponds to the negation
of two variables. Further, the two variable must be identical, since vertices of
two distinct lobes will be separated by U , and hence for P (yj1
i ) ⊂ P (uh, vl),
P (yj1
⊓⊔

i ) ∩ U 6= ∅. This contradicts with P (uh, vl) ∩ U = {uh, vl}.

i , zj2

i , zj2

Proposition 6 In graph G \ e(vm, u1), every path P (u, v), u, v ∈ U , has a
non-negative cost.

i , zj

Proof. Apparently, in G\e(vm, u1), every edge with negative cost is exactly with
cost −2m. Let (yj
i ) be such an edge with cost −2m. From the structure of
G, there exists exactly one edge entering yj
i , each of
which is with exactly cost m. So for every path P (u, v), u, v ∈ U , if it contains
edge (yj
i and the
edge leaving zj
i . That is, the three edges must all present or all absent in P (u, v),
and contribute a total cost 0. Therefore, c(P (u, v)) ≥ 0 must hold.
⊓⊔

i ), then it must also go through both the edge entering yj

i , and exactly one leaving zj

i , zj

Proof of Lemma 4

Proof. (=>) Suppose that there exists an assignment τ : x → {true, f alse}
satisfying all the m clauses. Since c(vm, u1) = −1, we need only to show there

N P-Completeness of kNCP

5

exists a u1vm-path with cost smaller than 1 by construction such one path. For a
satisﬁed clause Ck, there must exist a literal, say wk with τ (wk) = true. If wk is
the jth occurrence of xi, then set the corresponding subpath as Pk = uk−yj
i −
vk. We need only to show P = {Pk|k = 1, . . . , m}∪{(vh, uh+1)|h = 1, . . . , m−1}
exactly composes a path from u1 to vm with cost smaller than 1. For the ﬁrst,
P is a path. Because τ is an assignment, τ (xi) = true and τ (xi) = true can
not both hold, and hence P contains no length-2 cycle. For the cost, according
to the construction, if τ (wk) = τ (xi) = true then the subpath Pk is with cost
exactly equal to 0; otherwise, i.e. τ (wk) = τ (xi) = true, the subpath Pk is with
1
cost exactly equal to
m+1 . Meanwhile, c(e(vh, uh+1)) = 0 for each h. Therefore,
the total cost c(P ) ≤ m
m+1 < 1, where the maximum is attained when all clauses
are all satisﬁed by negative of the variables.

i −zj

(<=) Conversely, assume that there exists a negative-cost cycle O, which
contains NO negative cost length-2 cycle. According to Proposition 6, e(vm, u1)
must appears on O, so that c(O) < 0 can hold. Let P = O \ e(vm, u1) and τ be a
true assignment according to P : if P go through literal xi, set τ (xi) = f alse and
set τ (xi) = true otherwise. It remains to show such the assignment according to
P satisﬁes all the clauses. To do this, we shall ﬁrstly show P will go through all
the vertices of U in the order u1 ≺ v1 ≺ · · · ≺ ui ≺ vi ≺ · · · ≺ um ≺ vm; and
secondly show that P (uh, vh) has to go through exactly a subpath corresponding
to a literal, say w, for which if τ (w) = true, then Ch is satisﬁed. Then from the
fact that P contains no negative cost length-2 cycle, τ is a feasible assignment
satisfying all the clauses.

For the ﬁrst, according to Proposition 5, if P (ui, vj) ∩ U = {ui, vj}, then
j = i (i.e. vj = vi) must hold. Since otherwise, according to Proposition 5
c(P (ui, vj)) ≥ m must hold; while according to Proposition 6, the other parts
of P is with c(P (u1, ui)) ≥ 0 and c(P (vj , vm)) ≥ 0. That is, c(P ) ≥ m. On
the other hand, since c(e(vm, u1)) = −1 and c(O) < 0, we have c(P ) < 1,
a contradiction. Furthermore, since there exists only one edge leaving vi, i.e.
(vi, ui+1), P must go through every edge e(vi, ui+1) incrementally on i, i.e. in
the order of u1 ≺ v1 ≺ · · · ≺ ui ≺ vi ≺ · · · ≺ um ≺ vm. For the second,
according to the structure of G and c(P ) < 1, c(P (uh, vh)) ≤ 1
m+1 must hold.
Then c(P (uh, vh)) has to go through exactly a subpath corresponding to a literal.
⊓⊔

3 Conclusion

In this paper, we have shown that the negative k-cycle problem is N P-complete.
We hope the conclusion can beneﬁt the research community in related problems,
such as the k-cycle problem.

References

1. Richard Bellman. On a routing problem. Technical report, DTIC Document, 1956.

6

Longkun Guo and Peng Li

2. Marek Cygan, Fedor V Fomin, Łukasz Kowalik, Daniel Lokshtanov, Dániel Marx,
Marcin Pilipczuk, Michał Pilipczuk, and Saket Saurabh. Parameterized Algo-
rithms, volume 4. Springer, 2015.

3. Fedor V Fomin, Daniel Lokshtanov, Fahad Panolan, and Saket Saurabh. Represen-
tative sets of product families. In Algorithms-ESA 2014, pages 443–454. Springer,
2014.

4. Fedor V Fomin, Daniel Lokshtanov, and Saket Saurabh. Eﬃcient computation
of representative sets with applications in parameterized and exact algorithms.
In Proceedings of the Twenty-Fifth Annual ACM-SIAM Symposium on Discrete
Algorithms, pages 142–151. SIAM, 2014.

5. Lester Randolph Ford. Network ﬂow theory. 1956.
6. Harold N Gabow and Shuxin Nie. Finding a long directed cycle. ACM Transactions

on Algorithms (TALG), 4(1):7, 2008.

7. Peng Li, Kunal Agrawal, Jeremy Buhler, and Roger D. Chamberlain. Deadlock
avoidance for streaming computations with ﬁltering. In Proc. 22nd ACM Symp.
on Parallelism in Algorithms and Architectures, pages 243–252, 2010.

8. Peng Li and J. Buhler. Polyhedral constraints for bounded-memory execution of
synchronized ﬁltering dataﬂow. In Data-Flow Execution Models for Extreme Scale
Computing (DFM), 2013, pages 29–37, Sept 2013.

9. Hadas Shachnai and Meirav Zehavi. Faster computation of representative families

for uniform matroids with applications. CoRR, abs/1402.3547, 2014.

10. Craig A Tovey. A simpliﬁed np-complete satisﬁability problem. Discrete Applied

Mathematics, 8(1):85–89, 1984.

