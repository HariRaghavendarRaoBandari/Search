6
1
0
2

 
r
a

 

M
5
1

 
 
]
T
G
.
s
c
[
 
 

1
v
1
4
6
4
0

.

3
0
6
1
:
v
i
X
r
a

A compositional approach to economic game

theory

Neil Ghani

Jules Hedges

Abstract

This paper aims to signiﬁcantly impact the way we conceive of, reason
about, and construct software for economic game theory. We achieve this
by building an new and original model of economic games based upon the
computer science idea of compositionality: concretely we i) give a number
of operators for building up complex and irregular games from smaller and
simpler games; and ii) show how the equilibria of these complex games can
be deﬁned recursively from the equilibria of their simpler components. We
apply compositional reasoning to sophisticated games where agents must
reason about how their actions aﬀect future games and how those future
games eﬀect the utility they receive. This requires further originality —
we augment the usual lexicon of games with a new concept of coutility.
This dual notion to utility arises because, in order for games to accept
utility, this utility must be generated by other games. A third source of
originality is the representation of our games as string diagrams so as to
give a clear visual interface to manipulate them. Our fourth, and ﬁnal,
source of originality is a categorical formalisation of these intuitive string
diagrams which guarantees our model is mathematically rigourous.

1 Introduction

We must all grapple with this important question:

How can we ensure that our theories of the world scale from the
small examples in our classrooms or on our blackboards, to the huge
and complex systems that appear in the real world?

One answer — the brute force answer — is to simply be very, very good at
applying our theories. For example in computer science, many researchers are
grappling with the phenomena of big data by building faster and faster com-
puters. The equivalent within economic game theory might be to represent
complex games as huge pay-oﬀ matrices of actions and associated utilities and
use some of those very fast computers to compute the associated Nash equilibria
of these games. An alternative to brute force techniques, widely regarded within
computer science as being best practice, is compositonality where one sees com-
plex systems as being built from smaller subsystems. Because these subsystems

1

are smaller, they are easier to reason about. One then combines properties of
these subsystems into properties of the overall system. Compositionality also
promotes reuse:
if a particular system is a subsystem of many other systems,
then any results concerning that system do not need to be regenerated whenever
compositional reasoning takes place on any super-system of that system: this
further promotes eﬃcient reasoning. Examples of compositional reasoning are
numerous, e.g.

• Within logic, the truth of a formulae A ∧ B is computed from the truth

of A and B which, in turn, are computed recursively.

• Within programming languages, the eﬀect of executing a programme p then q

is computed by combining the eﬀect of executing p with the eﬀect of exe-
cuting q. These, in turn, are computed recursively.

• Within concurrency, Milner’s highly inﬂuential Communicating Sequential
Processes proposes operators for building processes. As above, properties
of processes are proved by combining properties of sub-processes.

Can the gains of compositionality within Computer Science be replicated within
economic game theory? After all, not all reasoning can be put in compositional
form, especially if there is signiﬁcant emergent behaviour present in a large
system which is not present in subsystems. And, such emergent behaviour is
certainly present within economic games. For example, if σ is an optimal strat-
egy for a game G, then is σ part of an optimal strategy for G ∗ H where H is
another game and G ∗ H is some super-game built from G and H? Clearly the
answer is not necessarily! More concretely, the iterated prisoner’s dilemma has
many equilibria (such as cooperative equilibria) that do not arise from repeat-
edly playing the Nash equilibrium of the stage game. Indeed, the diﬃculty in
constructing a compositional model of economic game theory led one econome-
trician present at a recent talk on this work to exclaim “This can’t be done!”
while another described this as “a conjuring trick” in that it seemed to achieve
the impossible!

So, how do we achieve the impossible? Our approach to cutting this partic-
ular Gordian knot is to observe that, at its essence, any compositional model
of game theory must model not just each game, but the interaction of each
game with all other games it might interact with. Of course, all current models
of economic games do not attempt this endeavour with good reason — as just
demonstrated, this interaction is non-trivial and a priori, there is a huge number
of such games - indeed a proper class! Our solution — and the crucial tech-
nical insight underpinning our model — is that it suﬃces to replace the class
of games which a given game might interact with the utility functions of those
games. Put simply, standard models of game theory hardwire a speciﬁc utility
function into the deﬁnition of a game while the novelty of our model is that
each game is parameterised by the space of all possible utility functions. This is
accomplished by embedding within each game “ports” where interaction with
other games takes place in the form of sending the environment information

2

about moves played and receiving utility from the environment. This leads to
a second innovation within this paper: we introduce a new representation of
games which complements the usual representation of games via trees or pay-oﬀ
matrices. This new representation of games uses string diagrams because they
enable us to clearly visualise the structure of complex games via the places where
the ports of one game are glued together with the ports of other games. For
example, a bimatrix game such as the Prisoner’s Dilemma can be represented
as the following string diagram

P1

P2

B

B

R

U

R

where the players are marked P1 and P2, the arrow out of each player represents
their moves, and these are fed into U which computes utility and then feeds that
utility back to each player. Switching to string diagrams - as demonstrated in the
Prisoner’s Dilemma example - gives an intuitively clear and simple presentation
of the key components of a game and their interaction via the ﬂow of information
between them. Now, in a compositional model, games are built by operators
combining simpler games which we call pregames. These pregames have the
general form

S

X

G

R

Y

where i) X is the type of the current state of the world; ii) Y is the type of
possible actions or moves; iii) R is the type of utilities or payoﬀs; and iv) S
is the type of the coutility extruded back to the environment. This concept of
coutility is another of our contributions — coutility arises as, in a closed sys-
tem, the utility of one player must have been generated by another player. For
example, if I place a bet with a bookmaker and expect utility in the form of
winnings, those winnings will have to come from the bookmaker. This we call
the bookmakers coutility. Pregames also possess functions describing how moves

3

are chosen, exactly how much coutility to extrude, and a relation describing its
equilibria. Crucially, the equilibria relation can be any relation and need not
be restricted to Nash equilibria. The scientiﬁc value of these pregames is that
they form a compositional model of economic games in that we can provide
operators for building complex pregames from simpler pregames and, in partic-
ular, for deﬁning the equilibria of these complex pregames from the equilibria
of their component pregames. Our ﬁnal contribution is a categorical interpre-
tation of pregames and their string diagram representations which ensures they
have precise mathematical meanings and thus that our reasoning about them is
mathematically rigorous.

Related Work: The context of this paper begins with [12], which for the ﬁrst
time approached game theory using ideas from program semantics. Neverthe-
less, the game theory developed in that paper is no more compositional than
ordinary game theory. A key point of originality within our approach is the
use of continuations to allow players to consider the possible outcomes of de-
cisions and factor those possible outcomes into their decision making process.
Continuations are implicit in the literature on selection functions (see [6] for an
introduction). Pregames are also closely related to the ‘partially deﬁned games’
of [10].

The relationship between string diagrams and monoidal categories has been
developed extensively in quantum information theory [2] and bialgebra [4], and
also applied to distributional semantics in linguistics [5]. There are many vari-
ants of monoidal categories, each with its own associated string language, sur-
veyed in [15]. The language used in this paper is a fragment of the one for
compact closed categories (section 4.8 of loc. cit.). We use a fragment because,
within game theory, there is only a limited form of backward-causality (arising
from rational agents reasoning about potential future values).

The paper is structured as follows: Section 2 introduces some of the nota-
tion used in this paper while Section 3 demonstrates the feasibility of a com-
positional model of game theory by considering a simple class on non-dynamic
games. Section 4 introduces pregames and their representation as string dia-
grams, Section 5 deﬁnes the key operators of parallel and sequential composition
of pregames, Section 6 gives a rigorous mathematical foundation for pregames
and their representation as string diagrams, and Section 7 extends previous
work to cover the inﬁnite iteration of pregames. Finally, Section 8 discusses
the choices inherent within our compositional model and directions for further
research.

2 Preliminaries

We denoted by R the set of real numbers. We also denote by 1 the set containing
only the element ∗ - when a function requires an input of type 1, we often elide
that input to increase legibility. We use the λ-calculus notation λx.t to denote
the function which takes x as input and returns the value of t — this will of

4

course usually depend upon x.
If f is a function in two variables, we often
write f (−, x) and f (x, −) respectively for the function in one variable obtained
by instantiating the ﬁrst and second inputs respectively of f to be x. We also
follow computer science notation and write f x — as opposed to f (x) — for the
application of a function f to an input x. Composition of functions is written
f ◦ g and projections are denoted π1 : A × B → A and π2 : A × B → B. We
denote by P the powerset functor on sets. At the centre of game theory is the
desire to maximise utility and so we deﬁne, for any function f : A → B (where
B is a preordered set), the set argmaxf of inputs where f attains a maximal
value.

argmax f = {a ∈ A | ∀a′ ∈ A.f a ≥ f a′}

We assume familiarity with basic category theory and ﬁnal coalgebras respec-
tively as can be found in [?, ?]. Readers not familiar with these topics can
simply skip the technical details of Section 6 and Section 7 respectively. Where
we use ﬁnal coalgebras, we give concrete descriptions of them.

3 Simple Games, Compositionality and Nash Equi-

libria

To ensure accessibility of our methods to non-computer scientists, we begin by
treating simple games where players choose actions and utility is then generated.
Without loss of generality, we consider just two players

Deﬁnition 1 (Simple 2-player Game). A simple two-player game G consists of
a 5-tuple (Y1, Y2, R1, R2, k : Y1 × Y2 → R1 × R2), where Yi are the sets of moves
available to each player, Ri are the types of utility expected by each players,
and k computes the utility associated to each pair of moves. Let k1 = π1 ◦ f
and k2 = π2 ◦ f . Then, the set of Nash equilibria EG ⊆ Y1 × Y2 is deﬁned by

(y1, y2) ∈ E iﬀ y1 ∈ argmax k1(−, y2)
∧ y2 ∈ argmax k2(y1, −)

This deﬁnition of Nash equilibrium is not compositional: it is not derived from
more primitive concepts but rather is postulated as being itself a primitive con-
cept whose myriad of diﬀerent applications, and conceptual simplicity, underpin
its value. While of course accepting its usefulness, and conceptual simplicity, we
do believe it can be derived in a compositional manner from the interaction of
the ﬁrst player with the second player. Substantiating this belief will show that
a compositional model of economic game theory is possible and what it might
look like. First, consider the players:

Deﬁnition 2 (Simple Game). A simple game consists of a set Y of moves, a
set R of utilities and an equilibria function E : (Y → R) → PY . The set of
simple players with actions Y and utilties R is written SPRY

5

This deﬁnition leaves equilibria abstract - they may maximise utility from a
choice of move or, as in say the El Farrol Bar game, they may reﬂect other
criteria.
(The functions E are precisely the multi-valued selection functions
[8].) Thus, an equilibrium y ∈ Ek means that if the utility in the game is
given by the context k, then there is no move preferable to y. And, crucially,
the equilibria of the game are not given for a speciﬁc utility function, but are
given for every utility function! In computer science this is called ‘continuation
passing style’. Now, recall the essence of compositionality is to build new games
from old in such a way that properties of the former can be derived from those
of the later. We now introduce such an operator

Deﬁnition 3 (Monoidal Product of Simple Games). Let G1 ∈ SPR1Y1 and
G2 ∈ SPR2Y2 be simple games. Their monoidal product is the simple game
G1 ⊗ G2 : SPR1×R2 Y1 × Y2 with equilibrium function

(y1, y2) ∈ EG1⊗G2 k

iﬀ y1 ∈ E1(π1 ◦ k(−, y2))
∧ y2 ∈ E2(π2 ◦ k(y1, −))

Although the Nash equilibria of a simple 2-player game appeared initially to be
a primitive and non-compositional concept, we can now show it arises composi-
tionally. The proof is by unwinding deﬁnitions.

Theorem 4. Let G = (Y1, Y2, R1, R2, k) be a simple 2-player game. Then
(y1, y2) ∈ EG iﬀ (y1, y2) ∈ EG1⊗G2 k where G1 and G2 are the simple games
G1 = (Y1, R1, argmax) and G2 = (Y2, R2, argmax).

Note that in the simple games G1 and G2, the ‘rational behaviour’ of the players
is to maximise (where ‘rational’ is taken to mean ‘playing according to their
equilibrium’). However the rational behaviour of players in G1 ⊗ G2 may not be
globally maximising – this is precisely what the Prisoner’s Dilemma illustrates.
Thus maximising behaviour is not compositional, so the generalisation from
argmax to the equilibrium function E is essential. Also notice how in Theorem 4
it is essential to not hardwiring a utility function into a simple game but rather
deﬁne the equilibria for all possible utility functions. Finally, notice how the
equilibria of G1 ⊗ G2 can be computed compositionally from only the equilibria
of G1 and G2, even if G1 and G2 are highly complex games. That is, one
need not delve into the deﬁnitions of G1 and G2 to see how they are built. In
the rest of this paper, we generalise this basic compositional model economic
game theory to a more sophisticated compositional model encompassing a much
broader class of games.

4 Pregames

Section 3 deﬁned a compositional model of economic game theory. That is, we
deﬁned i) the notion of a simple game ii) an operator for building new simple
games from old; and iii) the equilibria for compound simple games in terms of
the equilibria of their component simple games. However, simple games possess

6

limited structure and hence support limited operators — this is a problem, as
more operators enable more compositional reasoning! Therefore, we introduce
a more sophisticated compositional model which ﬁnds a sweet spot of being
expressive enough to model complex and highly irregular games while retain-
ing enough simplicity to continue to deliver conceptual clarity. As motivation,
consider me placing a bet with a bookmaker:

• My state informs my actions, e.g. my wealth aﬀects the size of my bet.
Secondly, I have diﬀerent strategies, e.g. high-risk, long-odds bets, or low-
risk, short-odds bets. Strategy and state are conceptually diﬀerent as I
can choose my strategy but not my state. Together, a state and a strategy
determine the action taken, i.e. which bet I place. The environment, i.e.
the bookmaker, returns my winnings.

• The bookmaker also has a state:

in this case, the bet placed. They too
have a number of strategies, e.g. to refuse the bet, to accept the bet, or to
lay the bet. Again, their state and strategy determine their action. And,
again, it is the environment that converts their actions into results and
hence utility. Finally, the bookmaker will return winnings to the better
— we call this coutility since it is the source of the better’s utility.

The above example motivates our more general deﬁnition:

Deﬁnition 5 (Pregame). Let X, Y , R and S be sets. A pregame G over
X, Y, R, S consists of the following data:

• A set ΣG of strategy proﬁles

• A play function PG : ΣG → (X → Y )

• A coutility function CG : ΣG → (X × R → S)

• An equilibrium function EG : X × (Y → R) → PΣG.

For reasons that will become apparent later, we denote such a pregame G :
(X, S) → (Y, R). If σ ∈ EG(x, k), then we imagine there is no better strategy
than σ if we are in state x and k : Y → R computes the utilities arising from
each action. We also represent pregames as string diagrams containing ports
where interaction with other games takes place.

S

X

G

R

Y

7

Example 6 (Prisoners Dilemma and Other Simple Games). Let M be the set of
moves in the Prisoners Dilemma game, i.e. M = {C, D}2. Deﬁne the pregame
PD : (1, R × R) → (M, R × R) with strategies ΣPD = M and with play function
(eliding the unit type) choosing the strategy, i.e.

Coutility is CPD m r = r, while

PPD m = m

(σ1, σ2) ∈ EPDk iﬀ σ1 ∈ argmax π1 ◦ k(−, σ2)
∧ σ2 ∈ argmax π2 ◦ k(σ1, −)

The Prisoners Dilemma is a simple game (see Defn. 2) and in fact all simple
games are pregames where X = S = 1, Σ = Y and P is the identity function.

We can also deﬁne a two round Prisoners Dilemma:

Example 7 (2-Round Prisoners Dilemma). Again, let M = {C, D}2 be the
set of moves in the Prisoners Dilemma game. We deﬁne a pregame 2PD :
(1, R × R) → (M × M, R × R) which represents two rounds of the Prisoners
Dilemma Game. The strategy set for the game ought to be a move for the ﬁrst
round together with a function which gives a round 2 move for each round 1
moves. That is Σ2PD = M × (M → M ). The play function is

P2PD (σ1, σ2) = (σ1, σ2σ1)

Coutility is similar to that above, while

(σ1, σ2) ∈ E2PD k iﬀ σ1 ∈ EPD k(−, σ2−) ∧

∀σ ∈ M. σ2σ ∈ EPD k(σ, −)

Note σ2 must compute an optimal strategy for all round-1 plays — this accords
with the no-incredible-threats principle of subgame perfect equilibria. Our def-
inition of 2PD is compositional: subgame perfect equilibrium for 2PD consist of
a Nash equilibrium in the ﬁrst round (for a particular utility function deﬁned
using the second round strategies), together with a Nash equilibrium in the sec-
ond round for each ﬁrst round play (with another utility function deﬁned by
that ﬁrst round play). We now show how we can deﬁne operators that build
complex pregames from simpler pregames.

5 Operators on Pregames

We introduce operators for building pregames. The ﬁrst three build atomic
pregames while the last two build compound pregames from other pregames:

Deﬁnition 8 (Players). A player who observes a state of type X, makes a
choice of type Y and optimises an outcome of type R is represented by a pregame
P : (X, 1) → (Y, R), where the set of strategies is ΣP = X → Y , i.e. mappings

8

from states to choices. The play function PP (σ, x) = σ(x) applies the strategy
to the state, while the coutility function is trivial. In general, the equilibrium
function can be varied in diﬀerent examples to give diﬀerent goals to the player.

If the player does not make any observation then X = 1. In the two cases X 6= 1
and X = 1, a player is represented by a string diagram as

X

P

P

R

Y

R

Y

(triangles traditionally denote components of string diagrams that have connec-
tions on only one side). For an example of a classical, utility-maximising player,
take R = R with the equilibrium relation being given by

EP (x, k) = {σ : X → Y | σ(x) ∈ argmax k}

If X = 1, this simpliﬁes to

EP (∗, k) = argmax k

Deﬁnition 9 (Computations). A function f : X → Y deﬁnes a two pregames,
a ‘covariant computation’ f : (X, 1) → (Y, 1) and a ‘contravariant computation’
f ∗ : (1, Y ) → (1, X). These are used to represent aspects of a game that
are not players (more precisely, that cannot make strategic choices), e.g. utility
functions. In both cases we have Σ = 1, and deﬁne Ef and Ef ∗ to always return
{∗}. In the covariant case, we set Pf (∗, x) = f x, while in the contravariant case
we set Cf ∗ (∗, ∗, x) = f x.

Covariant and contravariant computations are respectively drawn as

X

f

Y

Y

f

X

9

An important example of a covariant computation is copying ∆X : (X, 1) →
(X ×X, 1) arising from the function ∆X : X → X ×X which copies its argument.
Within games, this allows information to be used more than once, for example
both being observed by a player, and used as input to a utility function.

X

X

X

Our ﬁnal basic constructor for pregames is the Teleological Counit which medi-
ates between the forward direction of information (chose strategy, play move)
and the backward ﬂow of information (a process generates coutility and passes
it to a previous process as utility). More concretely, the teleological unit —
in combination with a computation — allows us to specify a particular utility
function to be used in the pregame. Of course, this curtails the possibility of
interacting with other pregames by closing oﬀ the ports where that interaction
can happen:

Deﬁnition 10 (Teleological counit). The pregame τX : (X, X) → (1, 1) is given
by ΣτX = 1, CτX (∗, x, ∗) = x and with EτX always returning {∗}.

We graphically represent the teleological counit by a cup

X

X

After introducing three basic operators for pregames, we now present two com-
pound operators — the monoidal product which generalises the similar operator
of Section 3, and sequential composition.

Deﬁnition 11 (Monoidal Product of Pregames). If G : (X1, R1) → (Y1, S1)
and H : (X2, S2) → (Y2, R2) are pregames, their monoidal product

G ⊗ H : (X1 × X2, S1 × S2) → (Y1 × Y2, R1 × R2)

is deﬁned by

• ΣG⊗H = ΣG × ΣH

• PG⊗H(σ1, σ2)(x1, x2) = (PG σ1 x1, PH σ2 x2)

• CG⊗H(σ1, σ2)((x1, x2), (r1, r2)) = (CG(σ1(x1, r1), CH(σ2)(x2, r2))

10

• (σ1, σ2) ∈ EG⊗H ((x1, x2), k) iﬀ σ1 ∈ EG (x1, k1) and σ2 ∈ EH (x2, k2)

where

k1(y1) = (π1 ◦ k)(y1, PH(σ2)(x2))

k2(y2) = (π2 ◦ k)(PG(σ1)(x1), y2)

Deﬁnition 12 (Sequential Composotion). Let G : (X, T ) → (Y, S) and H :
(Y, S) → (Z, R) be pregames. The composition H ◦ G : (X, T ) → (Z, R) is
deﬁned by

• ΣH◦G = ΣG × ΣH

• PH◦G(σ1, σ2) = PH(σ2) ◦ PG(σ1)

• CH◦G(σ1, σ2)(x, r) = CG(σ1)(x, CH(σ2)(PG (σ1)(x), r)))

• (σ1, σ2) ∈ EH◦G(x, k) iﬀ

1. σ1 ∈ EG(x, k′), where k′(y) = CH(σ2)(y, k(PH(σ2)(y))), and
2. σ2 ∈ EH(PG(σ′

1, x), k) for all σ′

1 ∈ ΣG

The deﬁnition of sequential composition highlights two fundamental points

• We promised to explain why we write G : (X, S) → (Y, R) if G has state X,
moves Y , utility R and coutility S. When composing functions f : A → B
and g : B → C, the codomain of f must be the same as the domain of g
because we feed the output of f into the input of g. Similarly, in H ◦ G, we
feed the output move G into the state of H, and the coutility of H into the
utility of G. Thus i) the type of moves of G and the states of H must be
the same; and ii) the type of utility of G and the coutility of H must also
be the same. Thus, the domain of a game contains its state and coutility,
while its codomain contains its moves and utility.

• To treat the composition H ◦ G correctly - as in the example of placing a
bet with a bookmaker - G can only get its utility once H has its own utility.
Technically, within the deﬁnition of equilibrium for a composed system, G
must be in equilibrium for a utility function which depends upon what H
feeds back to G. This ability of the future system H to feed utility into a
previous system G is exactly why we introduced the concept of coutility.
Formally, the deﬁnition of equilibrium in the composition EH◦G depends
upon the existence of the coutility CH.

Example 13. A two-player context-dependent game is deﬁned in [8] to consist
of the following data:

• Sets X, Y of choices for each player, and R of outcomes

• Multivalued selection functions ε : (X → R) → PX, δ : (Y → R) → PY

• An outcome function q : X × Y → R

11

• A strategy proﬁle is simply a pair (σ1, σ2) : X × Y . A strategy proﬁle is

called a selection equilibrium if

σ1 ∈ ε(q(−, σ2))

σ2 ∈ δ(q(σ1, −))

Context dependent games generalise the simple games of Def 2 in that the selec-
tion functions need not be argmax. For example, in [8] it is shown that selection
functions returning a set of ﬁxpoints or non-ﬁxpoints gives an elegant model
of coordination or diﬀerentiation goals of players, respectively. The selection
equilibria of context dependent games can be characterised compositionally.

Theorem 14. The selection equilibria of this game are precisely the equilibria
of the string diagram

Pε

Pδ

X Y

q

R

R

where q is the lifting of the outcome function as a covariant computation, and
Pε and Pδ are players, whose equilibrium functions are respectively

EPε(∗, k) = εk

EPδ (∗, k) = δk

Proof. The above string diagram is clearly deﬁnable within our grammar of
pregames, for example, by the expression

G = (τR ⊗ τR) ◦ (id∗

R ⊗(∆R ◦ q) ⊗ id∗

R) ◦ (Pε ⊗ Pδ) : (1, 1) → (1, 1)

Unwinding the deﬁnitions, we have

(σ1, σ2) ∈ EG(∗, ∗)

⇐⇒ (σ1, σ2) ∈ EPε⊗Pδ (∗, k) ∧ ∗ ∈ E(τR⊗τR)◦(id∗

R

⊗(∆R◦q)⊗id∗

R)(∗, ∗)

12

The second term of this is found to be vacuously true, and so it is equivalent to

⇐⇒ (σ1, σ2) ∈ EPε⊗Pδ (∗, k)
⇐⇒ σ1 ∈ EPε (∗, k1) ∧ σ2 ∈ EPδ (∗, k2)
⇐⇒ σ1 ∈ εk1 ∧ σ2 ∈ δk2

It is straightforward but tedious to verify that, according to the above deﬁni-
tions, the continuations k, k1 and k2 are given as follows:

k(x, y) = C(τR⊗τR)◦(id∗

R

⊗(∆R◦q)⊗id∗
R

⊗ id∗

R)(∗)((x, y), ∗)

= (q(x, y), q(x, y))

k1(x) = (π1 ◦ k)(x, PPδ (σ2, ∗)) = (π1 ◦ k)(x, σ2) = q(x, σ2)

k2(y) = (π2 ◦ k)(PPε (σ1, ∗), y) = (π2 ◦ k)(σ1, y) = q(σ1, y)

Thus, we have proved that EG(∗, ∗) is exactly the set of (σ1, σ2) that satisfy the
conditions of a selection equilibrium.

Context dependent games and selection equilibria include ordinary normal form
games and Nash equilibria as a special case, by taking R = R2, and the selection
function ε and δ to be the argmax operators for the ﬁrst and second coordinates:

ε(k) = {x ∈ X | (π1 ◦ k)(x) ≥ (π1 ◦ k)(x′) for all x′ ∈ X}

δ(k) = {y ∈ Y | (π2 ◦ k)(y) ≥ (π2 ◦ k)(y′) for all y′ ∈ Y }

A second class of games that are subsumed by our grammar are generalised
sequential games, which subsume classical games of perfect information.

Deﬁnition 15. A two-player sequential game is deﬁned in [6] to consist of the
following data:

• Sets X, Y of choices for each player, and R of outcomes

• Multivalued quantiﬁers ϕ : (X → R) → PR, ψ : (Y → R) → PR

• An outcome function q : X × Y → R

• A strategy proﬁle for this game consists of a move σ1 : X for the ﬁrst
player and a contingent strategy σ2 : X → Y for the second player. A
strategy proﬁle is called optimal if

q(σ1, σ2(σ1)) ∈ ϕλx.q(x, σ2(x))

q(x, σ2(x)) ∈ ψλy.q(x, y)

for all x ∈ X

Note that the diﬀerence between selection functions and quantiﬁers is relatively
unimportant: we could equally well deﬁne simultaneous games using quantiﬁers,
and sequential games using selection functions.

13

Theorem 16. Every optimal strategy proﬁle for this game is an equilibrium of
the string diagram

Pϕ

X

X

Y

Pψ

R

q

R

where Pε and Pδ are players with equilibrium functions

σ1 ∈ EPϕ (∗, k1) ⇐⇒ k1(σ1) ∈ ϕ(k1)
σ2 ∈ EPψ (x, k2) ⇐⇒ k2(σ2(x)) ∈ ψ(k2)

Proof. Again, this string diagram falls within our grammar being given alge-
braically by

(τR ⊗ τR) ◦ (id∗

R ⊗(((∆R ◦ q) ⊗ id∗

R) ◦ (idX ⊗Pψ) ◦ ∆X )) ◦ Pϕ : (1, 1) → (1, 1)

Unwinding the deﬁnition, we have

(σ1, σ2) ∈ E(τR⊗τR)◦(id∗

R

⊗(((∆R◦q)⊗id∗

R)◦(idX ⊗Pψ)◦∆X ))◦Pϕ(∗, ∗)

⇐⇒ (σ1, σ2) ∈ E(id∗
⇐⇒ σ1 ∈ EPϕ (∗, k1) ∧ ∀σ′

R

R)◦(idX ⊗Pψ)◦∆X ))◦Pϕ(∗, idR×R)
1)(∗), idR×R)

1 ∈ X. σ2 ∈ EG(PPϕ (σ′

⊗(((∆R◦q)⊗id∗

where

G = id∗

R ⊗(((∆R ◦ q) ⊗ id∗

R) ◦ (idX ⊗Pψ) ◦ ∆X ) : (X, R) → (R × R, R × R)

and

k1(x) = CG(σ2)(x, idR×R(PG(σ2)(x))) = q(x, σ2(x))

14

The ﬁrst condition is therefore equivalent to

q(σ1, σ2(σ1)) ∈ ϕ(λx.q(x, σ2(x)))

which is the ﬁrst part of the deﬁnition of an optimal strategy.
1 ∈ X is

Continuing, the second condition for a particular σ′

σ2 ∈ EG(PPε (σ′

1)(∗), idR×R) ⇐⇒ σ2 ∈ EG(σ′

1, idR×R)

⇐⇒ σ2 ∈ E((∆R◦q)⊗id∗
⇐⇒ σ2 ∈ E((∆R◦q)⊗id∗
⇐⇒ σ2 ∈ EidX ⊗Pψ ((σ′
⇐⇒ σ2 ∈ EPψ (σ′
1, k3)

R)◦(idX ⊗Pψ )◦∆X (σ′
R)◦(idX ⊗Pψ )((σ′
1, σ′
1, σ′

1), k2)

1, π2)
1), π2)

where

k2(x, y) = C(∆R◦q)⊗id∗

R

(∗)((x, y), (π2 ◦ P(∆R◦q)⊗id∗

R

(∗))(x, y)))

= q(x, y)
k3(y) = k2(σ′

1, y) = q(σ′

1, y)

Thus, the second condition is that for all σ′

1 ∈ X,

k3(σ2(σ′

1)) ∈ ψ(k3)

which is

q(σ′

1, σ2(σ′

1)) ∈ ψ(λy.q(σ′

1, y))

which is the second part of the deﬁnition of an optimal strategy.

6 The Monoidal Category of Pregames

The mathematical treatment of pregames above delivers a bottom-up collection
of operators for deﬁning complex pregames from simple pregames and comput-
ing the equilibria of those complex games from their more simple components.
Furthermore, pregames naturally posses a graphical form as a string diagram
showing the ﬂow of information around the game. This makes pregames easier
to visualise and therefore comprehend. However, this mathematical treatment
is so far insuﬃcient for a number of reasons:

• Reasoning about string diagrams needs us to formally deﬁne diagrams —
this can be a very intricate and messy process. Category theory oﬀers
a treatment of string diagrams known as monoidal category theory which
has been successfully applied to a number of areas, eg network theory,
quantum physics, concurrency theory.

• We want our operators to capture fundamental structure. Category theory
is used to ﬁnd fundamental structures across mathematics and computer
science, eg one such is the monoidal product which arises in both simple
games and pregames.

15

• To reason eﬀectively, we need to know when two diﬀerent pregames are the
same, eg the associativity of composition or the distributivity of contra
variant computations over composition: (g ◦ f )∗ = f ∗ ◦ g∗. Category
theory gives canonical laws one can expect to hold between the canonical
operators that arise in category theory.

• Category theory provides universal properties for structuring and reason-
ing. A key example are ﬁnal coalgebras which we use to model inﬁnite
iteration of pregames.

For these reasons (and for others more related to future work), we introduce
a categorical model of pregames. The ﬁrst guess is to take as objects pairs
of sets and deﬁne the morphisms from (X, S) to (Y, R) to be the pregames
(X, S) → (Y, R). However this doesn’t quite work, e.g. composition would fail
to be associative. The problem is that games which have isomorphic sets of
strategies ought really to be the same and hence we quotient pregames by such
isomorphisms. This is in tune with general categorical principles where one
allows objects to be isomorphic but asks morphisms to either be equal or not.
A similar approach underlies the construction of free cartesian closed categories
where one quotients well typed λ-calculus terms by βη-equality.

Theorem 17. There is a category Pregame whose objects are pairs of sets
(X, S). Morphisms from (X, S) to (Y, R) are pregames (X, S) → (Y, R) quo-
tiented by the relation which identiﬁes two pregames if their sets of strategy
proﬁles are isomorphic and their play, coutility and equilibrium functions are
the same under this isomorphism.

Proof. To ensure readability, our proof treats pregames and we omit the entirely
trivial checks that our arguments preserve the equivalence relation on pregames.
On the other hand, since morphisms/pregames contain a lot of data, we give
the rest of the proof in some detail. The identity on the object (X, S) is the
pregame idX ⊗ id∗

S. More concretely, this is the pregame

• Σid(X,S) = 1

• Pid(X,S) (∗) = idX

• Cid(X,S) (∗)(x, r) = r

• ∗ ∈ Eid(X,S) (x, k) for every x and k

Left identity Let G : (X, S) → (Y, R). We prove that id(Y,R) ◦ G = G. Then

• Σid(Y,R) ◦ G = Σid(Y,R) × ΣG = 1 × ΣG = ΣG

• Pid(Y,R) ◦ G(σ) = Pid(Y,R) (∗) ◦ PG(σ) = idY ◦PG(σ) = PG(σ)

• Cid(Y,R) ◦ G(σ)(x, r) = CG(σ)(x, Cid(Y,R) (∗)(PG (σ)(x), r)) = CG(σ)(x, r)

16

• σ ∈ Eid(Y,R) ◦ G(x, k) ⇐⇒ σ ∈ EG(x, k′) ∧ ∗ ∈ Eid(Y,R) (PG (σ)(x), k) ⇐⇒

σ ∈ EG(x, k′) where

k′(y) = Cid(Y,R) (∗)(y, k(Pid(Y,R) (∗)(y))) = k(Pid(Y,R) (∗)(y)) = k(y)

Right identity We prove that G ◦ idX,S = G. We have

• ΣG◦id(X,S) = ΣG × Σid(X,S) = ΣG × 1 = ΣG

• PG◦id(X,S) (σ) = PG(σ) ◦ Pid(X,S) (∗) = PG(σ) ◦ idX = PG(σ)

• CG◦id(X,S) (σ)(x, r) = Cid(X,S) (∗)(x, CG (σ)(Pid(X,S) (∗)(x), r)) =

CG(σ)(Pid(X,S) (∗)(x), r) = CG(σ)(x, r)

• σ ∈ EG◦id(X,S) (x, k) ⇐⇒ ∗ ∈ Eid(X,S) (x, k′) ∧ σ ∈ EG(Pid(X,S) (∗)(x), k)

⇐⇒ σ ∈ EG(x, k)

Associativity Let G : (X, U ) → (Y, T ), H : (Y, T ) → (Z, S) and I : (Z, S) →
(W, R). We have

Σ(I◦H)◦G = ΣG × ΣI◦H = ΣG × ΣH × ΣI = ΣH◦G × ΣI = ΣI◦(H◦G)

For the play function we have

P(I◦H)◦G(σ1, σ2, σ3) = PI◦H(σ2, σ3) ◦ PG(σ1)

= PI(σ3) ◦ PH(σ2) ◦ PG(σ1)
= PI(σ3) ◦ PH◦G(σ1, σ2)
= PI◦(H◦G)(σ1, σ2, σ3)

and for the coutility function have

C(I◦H)◦G(σ1, σ2, σ3)(x, r)

= CG(σ1)(x, CI◦H(σ2, σ3)(PG(σ1)(x), r))
= CG(σ1)(x, CH(σ2)(PG (σ1)(x), CI (σ3)(PH(σ2)(PG (σ1)(x), r))))
= CG(σ1)(x, CH(σ2)(PG (σ1)(x), CI (σ3)(PH◦G(σ1, σ2)(x), r)))
= CH◦G(σ1, σ2)(x, CI (σ3)(PH◦G(σ1, σ2)(x), r))
= CI◦(H◦G)(σ1, σ2, σ3)(x, r)

17

For the equilibrium condition we have

(σ1, σ2, σ3) ∈ E(I◦H)◦G(x, k3)

⇐⇒ σ1 ∈ EG(x, k1) ∧ ∀σ′
⇐⇒ σ1 ∈ EG(x, k1) ∧ ∀σ′

1 ∈ ΣG.(σ2, σ3) ∈ EI◦H(PG(σ′
1 ∈ ΣG.[σ2 ∈ EH(PG(σ′

1)(x), k2)

1)(x), k3)

∧ ∀σ′

2 ∈ ΣH.σ3 ∈ EI (PH(σ′

2)(PG (σ′

1)(x)), k3)]

⇐⇒ σ1 ∈ EG(x, k1) ∧ [∀σ′

1 ∈ ΣG .σ2 ∈ EH(PG(σ′

1)(x), k2)]

∧ ∀(σ′

1, σ′

2) ∈ ΣH◦G.σ3 ∈ EI (PH◦G(σ′

1, σ′

2)(x), k3)

⇐⇒ (σ1, σ2) ∈ EH◦G(x, k2)

∧ ∀(σ′

1, σ′

2) ∈ ΣH◦G.σ3 ∈ EI (PH◦G(σ′

1, σ′

2)(x), k3)

⇐⇒ (σ1, σ2, σ3) ∈ EI◦(H◦G)(x, k3)

where

k1(y) = CI◦H(σ2, σ3)(y, k3(PI◦H(σ2, σ3)(x)))

= CI◦H(σ2, σ3)(y, k3(PI (σ3)(PH(σ2)(x))))
= CH(σ2)(y, CI (σ3)(PH(σ2)(y), k3(PI (σ3)(PH(σ2)(x)))))
= CH(σ2)(y, k2(PH(σ2)(x)))
k2(z) = CI (σ3)(z, k3(PI (σ3)(z)))

This completes the proof.

Theorem 17 demonstrates how our composition operator is a fundamental alge-
braic operation. The same is true of our operation for putting games in parallel.

Theorem 18. The category Pregame is symmetric monoidal.

Proof. The monoidal product acts on objects (X, R) and (X ′, R′) by taking
their product componentwise giving (X × X ′, R × R′). The action of the
monoidal product on morphisms is given by parallel composition. The unit
of this monoidal structure is (1, 1), while the symmetry is inherited from that
of the product on the category of sets. As the proof that this data does indeed
form a symmetric monoidal category is straightforward, containing none of the
detail of Theorem 17, we leave the proof as an exercise.

One ﬁnal piece of categorical structure bears a striking resemblance to graphical
reasoning in a compact closed category:
Theorem 19. If f : X → Y is a computation then τY ◦ (f ⊗ id∗
(idX ⊗f ∗). In diagrams,

Y ) = τX ◦

Y

X

f

X

Y

f

=

18

Proof. Firstly note that we have

Pf ⊗id∗

Y

(∗)(x) = f (x)

PidX ⊗f ∗ (∗)(x) = x

Cf ⊗id∗

Y

(∗)(x, y) = y

CidX ⊗f ∗ (∗)(x, x′) = f (x′)

We have ΣτY ◦(f ⊗id∗
Y )
function X → 1. For the coutility function,

∼= 1 ∼= ΣτX ◦(idX ⊗f ∗). Both play functions are the unique

CτY ◦(f ⊗id∗

Y )(∗)(x, ∗) = f (x) = CτX ◦(idX ⊗f ∗)(∗)(x, ∗)

Finally for both cases we have ∗ ∈ E(x, ∗) for all x.

7 Iteration

While we have so far demonstrated the possibility of a compositional theory
of Nash equilibria, more operators are needed to cover a compelling variety of
games. As there will likely never be a set of operators capturing all possible
games, we seek a balance between i) the desire for more operators to model
more games; and ii) fewer (but perhaps better) operators to ensure the collec-
tion of operators remains small and hence tractable. Obtaining this balance
is a substantial endeavour requiring a follow-up paper. Nevertheless we make
a start here, primarily to showcase how compositional Nash equilibria can be
deﬁned for games more sophisticated than those studied already. To that end,
we consider IPD - the Iterated Prisoners’ Dilemma.

Informally, IPD consists of playing PD inﬁnitely often. Thus, one might conjec-
ture IPD is deﬁned recursively by the equation IPD = IPD ◦ PD. However, this
is not quite right as the deﬁnition of composition means that a strategy for IPD
would consist of a strategy for PD and another strategy for IPD. However, a
strategy for IPD actually consists of a strategy for PD and - for each move of PD
- a strategy for IPD to be followed if that move were played. Thus the correct
deﬁnition is

Deﬁnition 20 (Inﬁnite Iteration). Let G : (X, R) → (Y, R) be a pregame with
strategies, play, coutility and equilibria given by ΣG, PG , CG and EG respectively.
Further, let φ : Y → X be a function which updates state after a move is played.
Deﬁne the iterated pregame Gω
φ : (X, R) → (Y ω, R), where Y ω is the type of
inﬁnite lists over Y , as follows

ΣGω = νZ. ΣG × (Y → Z)

PGω

φ

(σ, f ) x = let y = PG σ x in y : PGω

φ

(f y) (φ y)

CGω

φ

(σ, f ) x r = let y = PG σ x in CG σ x (CGω

φ

(k y) (φ y) r)

(σ, f ) ∈ EGω

φ

x k iﬀ σ ∈ EG x k′ ∧ (∀y ∈ Y ) f y ∈ EGω

φ

(φ y) k

where k′ y = CGω

φ

(f y) (φy) (k(y : PGω

φ

(f y) (φy))

19

φ

φ

The above deﬁnition is somewhat complex and hence needs explanation. First
note that νZ. ΣG × (Y → Z) is a ﬁnal coalgebra that denotes the set of inﬁnite
depth trees with nodes labelled by an element of ΣG and where each node has Y -
children. As a result, an element of ΣGω
can be written uniquely as a pair (σ, f )
maps each element of Y to its associated child-
where σ ∈ ΣG and f : Y → ΣGω
tree. Next, note that the symbol : is the ‘cons’ operator which takes a stream of
data an a piece of data and adds the data to the front of the stream. The play
function of Gω
φ is deﬁned by computing the ﬁrst move and then adding that to
the recursive computation of subsequent moves. Note how the coutility function
is similar to the coutility function for composition reﬂecting how coutility from
subsequent moves played later in the game is fed into the coutility function
for the ﬁrst move. Finally, a strategy is in equilibrium iﬀ the strategy to be
played in the ﬁrst game is in equilibrium for the one-step game, and - for each
potential move - the associated strategies for the remaining subgame are also in
equilibrium.

As an example, we apply the above deﬁnition to the Prisoners Dilemma,
thereby producing the Iterated Prisoners Dilemma. Recalling the Prisoners
Dilemma PD is a pregame PD : (1, S) → (M, S) where M = {C, D}2 and
S = R2. The strategies, play, coplay and utility functions are all given in
Example 6. Applying our iteration combinator with the (unique) state function
φ : M → 1, we get the Iterated Prisoners Dilemma IPD = PDω

φ as follows:

Example 21. The Iterated Prisoners Dilemma is the game IPD : (1, R × R) →
(M ω, R2) with strategies, play, coutility and equilibria given - once again after
removing any unit types - by

ΣIPD = νZ. M × (M → Z)

PIPD (σ, f ) = σ : PIPD (f σ)

(σ, f ) ∈ EIPD k iﬀ σ ∈ EPD (k(PIPD (−, f )))

∧
(∀σ ∈ M )f σ ∈ EIPD k

with the trivial coutility function.

Note that the strategies ΣIPD consist of inﬁnite depth trees whose nodes are
labelled by elements of M and each node has M -children. The element at each
node describes the strategy to be used in the ﬁrst round and each child de-
scribes the strategy to be used if the corresponding move were to have been
played. These are precisely the pure strategies for the ordinary iterated pris-
oner’s dilemma. If we choose k : M ω → R2 to be a utility function for the iter-
ated prisoner’s dilemma (perhaps given by a discounted sum, but perhaps not)
then EIPD k exactly characterises those strategies in ΣIPD that are subgame-
perfect equilibria of the iterated prisoner’s dilemma. Intuitively, the condition
says that i) the ﬁrst move is a Nash equilibrium of the one-shot game PD but,
crucially, for a utility function that incorporates information about future moves

20

via PIPD; and ii) for every potential ﬁrst move, the associated subsequent strat-
egy for the remaining subgame (which is still an inﬁnitely repeated game) is also
in equilibrium. Formally, for each k, the equilibirum predicate EIPDk is a coal-
gebraic predicate [?] which therefore supports the following reasoning principle
called coinduction

Theorem 22. Let Q ⊆ ΣIPD and k : M ω → R2. Further, if

∀(σ, f ) ∈ Q. σ ∈ EPD (k(PIPD (−, f ))) ∧ (∀σ ∈ M )f σ ∈ Q

then Q ⊆ EIPD k.

We can use the above theorem to show certain strategies are in EIPD for
various utility functions. The point is not that the result below is anything but
obvious, but rather to demonstrate the nature of the coinductive proof technique
to econometricians who may not be familiar with it.

Example 23. Deﬁne σ : ΣIPD by σ0 = ((D, D), λm.σ). That is σ is the
strategy in which both players defect upon their ﬁrst turn and no matter what
moves are played, decide to defect forever after. Further, deﬁne k : M → R × R
to be the utility function for PD deﬁned by

k(C, C) = (−1, −1)

k(D, C) = (0, −4)

k(C, D) = (−4, 0)

k(D, D) = (−3, −3)

Such a k is a classic utility function for which the only Nash equilibria are for
both players to defect. Now, lets deﬁne a utility function kω : M ω → R × R
for IPD by discounting: kω(m : ms) = km ⊕ kωms where ⊕ is componentwise
addition. To show σ ∈ EIPD we use the above theorem with Q = {σ}. Thus,
we need to show

(D, D) ∈ EPD ((k−) ⊕ kωdω)

∧ σ ∈ Q

where dω = (D, D) : dω is the sequence of plays where both players keep on
defecting. The ﬁrst subgoal is clear as one can easily check that the only equi-
libria of the Prisoners Dilemma with utility function (k−) ⊕ kωdω is for both
players to defect. The second subgoal is true by assumption.

We conclude with a question of utility. We were asked by friends “What ques-
tions could your work help those interested in economic game theory solve”.
Such questions are always diﬃcult for a paper aiming at concepts and ideas,
but nevertheless, we ask readers the following questions

1. Can you develop a model of equilibria in iterated games that does not
insist that the utility of an iterated game is obtained by discounting?
The above work infact is exactly such a model as nowhere do we assume
discounting. This is in the tradition of best scientiﬁc practice where one
ought not to make assumptions (here discounting) unless one need to.

21

2. Lets say we want to enter some software in a tournament for games playing
Iterated Prisoners Dilemma. We would thus have to play the iterated
Prisoners’ Dilemma over an over again. Can you formalise that game, the
associated strategies, moves and equilibria? With out work, it is simply
the iterated version of the iterated prisoners dilemma, i.e. IIPD = IPDω =
(PDω)ω. It is thus simply a matter of reading oﬀ the right deﬁnitions from
our formulas above.

3. Can you ﬁnd conditions for a general class of iterated games which en-
sure repeating a strategy which is in equilibria for each state game is in
equilibrium for the iterated variant of the stage game? Our work suggests
exactly such a generic answer.

8 Conclusions and Future Research

We ﬁnish the paper with a discussion about what we have achieved and what
we intend to do in the future.

Achievements: This paper’s most signiﬁcant contribution is a new way to
think about economic games using the idea of compositionality from computer
science. This involved the development of a new model of economic games
which had several original features: i) games do not come with a speciﬁc utility
function; ii) games can reason about how current actions eﬀect future utility via
the new concept of coutility; iii) games posses a clear visual interface as string
diagrams; and iv) have a fully rigorous treatment within monoidal category
theory. The compositionality of this model is demonstrated by the operators
that can be deﬁned on arbitrary games and used to build, reason about and even
implement larger games from smaller games. Before discussing future work, we
analyse decisions implicitly taken is the design of our model and their validity.

• To facilitate accessibility of our paper we chose to work internally to
the category of sets as opposed to internally to an ambient symmetric
monoidal category. The choice between clarity and mathematical sophis-
tication is important - and we believe we have it right - but is not inherently
a scientiﬁc one but rather a subjective matter of presentation.

• We made pregames the morphisms of a category to highlight the in-
puts and outputs of games which was a prerequisite to formalising the
idea of coutility. This also enabled a string diagram interpretation of
pregames thereby giving rigour to our pregame constructors and relating
them to constructions on string diagrams. However, ought we to have
made pregames the objects of a category? Certainly making pregames
objects would have enabled universal properties to have been developed
for pregame operators. Actually, both perspectives are valid. Just as the
category of sets, relations and relation preserving morphisms is naturally
a 2-category, so the category of pregames is naturally a 2-category. For

22

this paper, the 2-dimensional structure was not relevant so we focussed on
the 1-dimensional structure of pregames. As commented below, in future
work we will need to turn to the 2-dimensional structure of pregames.

Future Work: The potential applications of a compositional, graphical game
theory are numerous, especially in economics, and this paper also raises some
interesting theoretical questions. We conclude by broadly giving some future
research directions and questions:

• Possibly the most important theoretical concepts missing from this paper
are incomplete information games, which are ubiquitous in economic ap-
plications. This requires the 2-dimensional structure of pre-games alluded
to above. Examples of such games show that delicate choices need to be
made about whether data should be treated covariantly, contravariantly or
relationally. Nevertheless, we have initial thoughts and hope to progress
them soon.

• Another important aspect of game theory that cannot be modelled by
the operators above is the ability of a pregame to depend on a previous
move.
Inﬂuence diagrams also suﬀer from this problem. For example
in a market entry game a ﬁrm decides whether to enter a new market,
and then subsequently a particular game is played only if the market
was entered. This is also commonly used with the ‘moves of nature’ in the
standard approach to incomplete information. Our approach will be to use
dependent types and ﬁbred monoidal categories to underpin dependently
typed string diagrams.

• Computer support is vital. The ﬁrst author has developed a Haskell imple-
mentation, but it is extremely awkward because the Haskell type system
does not unify types like X ∼ 1 × X and X ∼ 1 → X, and so the user
must manually track these isomorphisms. As an intermediate step, a code
generator for a domain speciﬁc language similar to Haskell’s arrows [11]
would be useful. Unfortunately, for technical reasons it does not seem to
be possible to use GHC’s built-in arrow preprocessor. Ultimately a graph-
ical interface would be invaluable for these ideas to become accessible to
working economists.

• As a by-product of obtaining a compositional theory, we have the ability
to model preferences of agents which are extremely diﬀerent to utility
maximisation or preference relations. This extends a line of work begun
in [8], which uses ﬁxpoint selection functions to model coordination and
diﬀerentiation. Obvious next steps include modelling bounded rationality
[14] and social concerns.

• As described above, a potentially very powerful dimension is to vary the
underlying category from Sets to another category. The use of ordinary
(possibilistic) nondeterminism in game theory is explored in [12, 3, 7] and
[9, chapter 9], and work in progress by the author suggests that the order

23

structure on possibilistic strategies is important. We also have experimen-
tal evidence that correlated equilibria [1] appear as a special case by using
a commutative monad transformer stack in which a reader monad gives
players read-only access to a shared randomising device. This is strong
evidence that side eﬀects in the sense of programming languages can also
be a unifying idea in game theory.

• Using noncommutative side-eﬀects is potentially even more rewarding. In
this case, the category of pregames may be premonoidal. A major aim
is to use strategies with mutable states to model learning, and individual
rationality relations to specify that a strategy can be subjectively rational
with respect to the current epistemic state, for example using methods of
epistemic game theory [13].

References

[1] Robert Aumann. Subjectivity and correlation in randomized strategies.

Journal of mathematical economics, 1:67–96, 1974.

[2] John Baez and Mike Stay. Physics, topology, logic and computation: a
Rosetta stone. In Bob Coecke, editor, New structures for physics, pages
95–172. Springer, 2010.

[3] Achim Blumensath and Viktor Winschel. A coalgebraic framework for

games in economics. Working paper, 2013.

[4] Filippo Bonchi, Pawel Sobocinski, and Fabio Zanasi. Interacting bialgebras
are Frobenius. In Proceedings of FoSSaCS 2014, volume 8412, pages 351–
365. Springer, 2014.

[5] Bob Coecke, Edward Grefenstette, and Mehrnoosh Sadrzadeh. Lambek vs.
Lambek: functorial vector space semantics and string diagrams for Lambek
calculus. Annals of pure and applied logic, 2013.

[6] Martin Escard´o and Paulo Oliva. Sequential games and optimal strategies.

Proceedings of the Royal Society A, 467:1519–1545, 2011.

[7] Jules Hedges. Monad transformers for backtracking search. In Proceedings

of MSFP’14, EPTCS, pages 31–50, 2014.

[8] Jules Hedges, Paulo Oliva, Evguenia Sprits, Viktor Winschel, and Philipp

Zahn. Higher-order game theory. Submitted, 2015.

[9] Steven M. LaValle. Planning algorithms. Cambridge University Press, 2006.

[10] Paulo Oliva and Thomas Powell. A constructive interpretation of Ramsey’s
theorem via the product of selecion functions. Mathematical structures in
computer science, 2014.

24

[11] Ross Paterson. A new notation for arrows. In Proceedings of the sixth ACM
SIGPLAN international conference on functional programming, pages 229–
240. ACM, 2001.

[12] Dusko Pavlovic. A semantical approach to equilibria and rationality. In
Algebra and coalgebra in computer science, volume 5728 of Lectures notes
in computer science, pages 317–334. Springer, 2009.

[13] Andr´es Perea. Epistemic game theory. Cambridge University Press, 2012.

[14] Ariel Rubinstein. Modelling bounded rationality. MIT Press, 1998.

[15] Peter Selinger. A survey of graphical languages for monoidal categories. In
Bob Coecke, editor, New structures for physics, pages 289–355. Springer,
2011.

25

