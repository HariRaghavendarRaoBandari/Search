RankSynd a PRNG Based on Rank Metric

Philippe Gaborit1, Adrien Hauteville1,2, and Jean-Pierre Tillich2

1 Université de Limoges, XLIM-DMI, 123, Av. Albert Thomas, 87060 Limoges,

2 Inria, Domaine de Voluceau, BP 105, Le Chesnay 78153, France

Cedex, France

Abstract. In this paper, we consider a pseudo-random generator based
on the diﬃculty of the syndrome decoding problem for rank metric codes.
We also study the resistance of this problem against a quantum com-
puter. Our results show that with rank metric it is possible to obtain
fast PRNG with small public data, without considering additional struc-
ture for public matrices like quasi-cyclicity for Hamming distance.

1 Introduction

Pseudo-random number generators (PRNG) are an essential tool in cryp-
tography. They can be used for one-time cryptography or to generate ran-
dom keys for cryptosystems. A long series of articles have demonstrated
that the existence of a PRNG is equivalent to the existence of one-way
functions [29,22,19]. Basically, a one-way function is a function which is
easy to compute but hard to invert.

There are two types of PRNG in cryptography. The ﬁrst one is based
on block cipher schemes, like AES for instance, used in OFB mode. This
gives in general very fast random generators. The second type includes
PRNG proven to be secure by reduction to a hard problem. The problems
considered can be based on classical problems from cryptography, like
factorization or discrete logarithm, [6,5] or they may be based on linear
algebra, like coding theory [11] or lattices [1] or multivariate quadratic
systems [2].

Recent works [13,26] have proven that PRNG based on the syndrome
decoding (SD) problem could be almost as fast as PRNG based on AES.
However the PRNG based on the SD problem have to store huge matrices.
This problem can be solved with the use of quasi-cyclic codes but there is
currently no proof of the hardness of the SD problem for quasi-cyclic codes.
Moreover recent quantum attacks on special ideal lattices [10], clearly
raise the issue of the security of quasi-cyclic structures for lattices and
codes, even if a straight generalization of this quantum attack from cyclic
structures to quasi-cyclic structures seems currently out of reach.

6
1
0
2

 
r
a

 

M
6
1

 
 
]

R
C
.
s
c
[
 
 

1
v
8
2
1
5
0

.

3
0
6
1
:
v
i
X
r
a

Code-based cryptography has been studied for many years, since the
proposal of the McEliece cryptosystem [25]. This type of cryptography
relies on the diﬃculty of the SD problem for Hamming distance, which
is proven NP-hard [3]. Besides this particular metric, other metrics may
be interesting for cryptographic purposes. For instance, the rank metric
leads to SD problems whose complexity grows very fast with the size of
parameters. In particular, recent advances in this ﬁeld have shown that the
problem of decoding general codes in rank metric is hard [15]. Moreover
the best known attacks have an exponential complexity with a quadratic
term in the exponent. In practice it means that it is possible to obtain
cryptosystems with keysizes of only a few thousand bits and without ad-
ditional structure such as cyclicity (or quasi-cyclicity). This is particularly
interesting since it avoids relying on the hardness of structured problems
whose security is less known than the security of general instances.

In this paper we study the case of a PRNG based on general instances
of the Rank Syndrome Decoding problem. We build a PRNG based on the
rank metric which has both a reasonable data size (a few thousand bits),
which is reasonably fast and which is asymptotically better than PRNG
based on the Hamming metric without cyclic structure. It is possible to
optimize separately each of these aspects, like the size in constrained en-
vironments such as chip cards. We prove that breaking our PRNG is not
easier than breaking the Fischer-Stern PRNG[11]. We also study how a
quantum computer can be used to speed up the best known combinatorial
attacks on the rank syndrome decoding problem. In the last section, we
give parameters for our system, against classical and quantum attacks.

2 Generalities on the rank metric

First, let us deﬁne the central notion of this paper, namely matrix codes

Deﬁnition 1 (matrix code). A matrix code C of length m × n over Fq
is a subspace of the vector space of matrices of size m × n with entries in
Fq. If C is of dimension K, we say that C is an [m × n, K]q matrix code,
or simply an [m × n, K] code if there is no ambiguity.

def

The diﬀerence between an [m× n, K] matrix code and a code of length
mn and dimension K is that it allows to deﬁne another metric given by
def
d(A, B)
=
d(c, 0). Linear codes over an extension ﬁeld Fqm give in a natural way
matrix codes, and they have in this case a very compact representation
which allows to decrease key sizes.

= Rank(A − B). The weight of a word c is equal to wR(c)

Deﬁnition 2 (matrix code associated to an Fqm-linear code). Let C
be an [n, k] linear code over Fqm. Each word c of C can be associated to an
m×n matrix over Fq by representing each coordinate ci by a column vector
(ci1, . . . , cim)T where ci = Pm
j=1 cijβj with β1, . . . , βm being an arbitrary
basis of Fqm viewed as a vector space over Fq and cij ∈ Fq. In other words
the cij’s are the coordinates of ci in this basis. The matrix code associated
to C is of type [m × n, km]q.

By deﬁnition, the weight of a word c ∈ C is the rank of its associated
matrix. It does not depend on the choice of the basis. Such matrix codes
have a more compact representation than generic matrix codes. Indeed an
[n, k] Fqm-linear code can be described by a systematic parity-check matrix
over Fqm , which requires k(n− k)m⌈log q⌉ bits, whereas a representation
of an [m× n, km]q matrix code requires in general km(mn− km)⌈log q⌉ =
k(n − k)m2 ⌈log q⌉ bits. In other words we can reduce the size of the
representation of such codes by a factor m if we consider the subclass of
matrix codes obtained from Fqm-linear codes.

There is also a notion of Gilbert-Varshamov distance for the rank met-
ric. For the Hamming metric, the Gilbert Varshamov distance for [n, k]q
codes corresponds to the “typical” minimum distance of such codes. It is
t | ≥ qn−k where BH is the ball of ra-
given by the smallest t for which |BH
dius t centered around 0 for the Hamming metric. The Gilbert-Varshamov
distance for [m × n, km]q matrix codes in the rank metric is given by the
smallest t for which

|BR

t | ≥ qm(n−k)

where BR is the ball of radius t centered around 0 for the rank metric
(in other words it is the set of m × n matrices over Fq of rank ≤ t). It is
readily checked that (see [24])

|BR

t | ≈ qt(m+n−t)

m+n−√(m+n)2−4m(n−k)

.

which gives dGV ≈

2

3 Cryptography based on rank metric

3.1 A diﬃcult problem

Similarly to the syndrome decoding problem for the Hamming metric we
can deﬁne the rank syndrome decoding (RSD) problem.

Problem 1 (Rank Syndrome Decoding). Let C be an [n, k] Fqm-linear code,
w an integer and s ∈ Fn−k
qm . Let H be a parity-check matrix of C. The
problem is to ﬁnd a word e ∈ Fn

qm such that

(cid:26) HeT = s

wR(e) = w

Recently it was proven in [15] that this problem had a probabilistic
reduction to the Syndrome Decoding problem for the Hamming distance
which is known to be NP-complete. This substantiates claims on the hard-
ness of this problem.

3.2 Complexity of practical attacks

The complexity of practical attacks grows quickly with the size of param-
eters, there is a structural reason for this: for the Hamming distance a
key notion in the attacks is counting the number of words of length n
and support size t, which corresponds to the notion of Newton binomial

def

coeﬃcient (cid:0)n
log2(cid:0)n

t(cid:1) = nh(t/n)(1 + o(1)) where h(x)

t(cid:1), whose value is exponential in n for a ﬁxed ratio t/n, since
= −x log2 x− (1− x) log2(1− x).
In the case of the rank metric, counting the number of possible supports
of size w for a matrix code associated to an Fqm-linear code of length
n corresponds to counting the number of subspaces of dimension w in
Fqm. This is given by the Gaussian binomial coeﬃcient [m
r ]q. In this case
logq [m
r ]q = w(m− w)(1 + 0(1)). Again this number behaves exponentially
but the exponent is quadratic. This is of course to be compared to the
“real” length of the matrix code which is also quadratic: m × n.
two categories:

The approaches that have been tried to solve this problem fall into

- combinatorial approach: this approach gives the best results for
small values of q (typically q = 2) and for large values of n and k. When
q becomes large, they become less eﬃcient however. The ﬁrst non-trivial
combinatorial algorithm for the RSD problem was proposed in 1996 (see
[8]), then in 2002 Ourivski and Johannson [27] improved it. However for
both of the algorithms suggested in [27] the exponent of the complexity
does not involve n. Recently these two algorithms were generalized in

[14] by Gaborit et al. with a complexity in O(cid:0)(n − k)3m3q

Notice that the exponent involves now n and when n > m the exponent
becomes better than the one in [27].

(w−1)l (k+1)m

n

m(cid:1).

- algebraic approach: the particular nature of rank metric makes
it a natural ﬁeld for algebraic system solving by Groebner bases. The

complexity of these algorithms is largely independent of the value of q and
in some cases may also be largely independent from m. These attacks are
usually the most eﬃcient ones when q becomes large. There exist diﬀerent
types of algebraic modeling for the rank metric decoding problem. The
algebraic modeling proposed by Levy and Perret [23] in 2006 considers
a quadratic system over Fq by taking as unknowns the support E of the
error and the error coordinates regarding E. There are also other ways of
performing the algebraic modeling: the Kernel attack [9,17], the Kipnis-
Shamir modeling [21] or the minor approach (see [28] for the most recent
results on this topic). The last one uses the fact that the determinant
of minors of size greater than w is zero to derive algebraic equations of
degree w + 1. All of these proposed algorithms can be applied to the RSD
problem but they are based on an algebraic modeling in the base ﬁeld Fq
so that the number of unknowns is always quadratic in n (for m = Θ(n)
and w = Θ(n)), so that the general complexity for solving these algebraic

equations with Groebner basis techniques is exponential in O(cid:0)n2(cid:1).

More recently, a new algebraic modeling based on a annulator ap-
proach was proposed by Gaborit et al. in [14]. It yields multivariate sparse
equations of degree qr+1 but on the extension ﬁeld Fqm rather than on
the base ﬁeld Fq and results in a drastic reduction of the number of un-
knowns. The latter attack is based on the notion of q-polynomial and
is particularly eﬃcient when w is small. Moreover all these attacks can
be declined in a hybrid approach where some unknowns are guessed but
asymptotically they are less eﬃcient than other approaches.

Overall, all the known attacks for solving the RSD problem in the

case where m = O(cid:0)n(cid:1), w = O(cid:0)n(cid:1) have a complexity in 2O(cid:0)n2(cid:1). Moreover

because of the behavior of the Gaussian binomial coeﬃcient and because
of the number of unknowns for algebraic solving, it seems delicate to do
better.

4 One-way functions based on rank metric

We use here the hardness of the RSD problem to build a family of one-way
functions based on this problem. Let us start by recalling the deﬁnition
of a strongly one-way function (see [12, Deﬁnition 1]):
Deﬁnition 3. A collection of functions {fn : En → Fkn
one way if :

2 } is called strongly

– there exists a polynomial-time algorithm which computes fn(x) for all

x ∈ En

– for every probabilistic polynomial-time algorithm A, for all c > 0 and

1
nc

for suﬃciently large n, P rob(cid:0)A(fn(x)) ∈ f−1

n (fn(x))(cid:1) <

We will consider the following family :

En,k = {(H, y) : H ∈ F(n−k)×n

qn

, y ∈ Fn
f : En,k → F

qn, wR(y) = wn}
(n−k)×(n+1)
qn
(H, y) 7→ (H, HyT )

We take m = n so that the ﬁrst algorithm of [14] does not improve
the complexity of [27]. These functions should be strongly one-way if we
choose wn ≈ dGV (n, k) which corresponds to the range where there is
basically in general a unique preimage.

5 A PRNG based on rank metric codes

5.1 Description of the generator

Now that we have a family of one-way functions based on a hard prob-
lem, our goal is to use them to build a PRNG which will inherit of that
hardness. We begin by letting k = Rn and w = ωn for some constant R
and ω. The security and the complexity of computing the pseudo-random
sequence associated to this generator will then be expressed as a function
of n, with R and ω as parameters.

First it is necessary to expand the size of the input, so that the number
of syndromes becomes larger than the number of words of weight wn. By
deﬁnition, these two numbers are equal when w = dGV so that we can
choose ω < dGV
n . The size of the input is n(n − k)n⌈log q⌉ = n3(1 −
R)⌈log q⌉ for H plus wn(2n− wn)⌈log q⌉ = n2(2ω − ω2)⌈log q⌉ for y and
the size of the output is n3(1−R)⌈log q⌉+n2(1−R)⌈log q⌉. So the function
fn expands the size of the input by n2(1 − R − 2ω + ω2)⌈log q⌉ = O(cid:0)n2(cid:1)
bits. To compute fn(H, y) one has to perform a product matrix-vector in
a ﬁeld of degree n, which costs O(cid:0)n3(cid:1) operations in Fq.
qn of
weight ωn with n2(2ω − ω2)⌈log q⌉ bits. This can be done very easily.
According to Deﬁnition 2, y can be seen as an n× n matrix M over Fq of
rank ωn. Let β = (β1, . . . , βωn) be a basis of the subspace generated by
the rows of M . We can represent β by a matrix B ∈ Fωn×n
. There exists
a unique matrix A ∈ Fnn
such that M = AB. In order to ensure the
unicity of this representation, we need to take B in its echelon form Bech,
then M = A′Bech for some matrix A′. Unfortunately, it is not so easy to

Secondly we need an algorithm which computes a word y ∈ Fn

q

q

enumerate all the echelon matrices eﬃciently. To avoid this problem, we
only generate words with a certain form, as it is done for SYND [13].

Deﬁnition 4 (Regular Rank Words). A word y ∈ Fn
said regular if its associated matrix M ∈ Fn×n

is of the form

q

qn of weight r is

1

M = A


. . . C

1




with A ∈ Fn×r

q

and C ∈ Fr×(n−r)

q

The probability that a word of weight r is regular is equal to the
probability that a r × r matrix over Fq is invertible. This probability is
greater than a constant c > 0 for all r and q. Thus it is not harder to solve
the RSD problem in the general case than to solve the RSD problem by
restraining it to the regular words, since if a polynomial algorithm could
solve the RSD problem in the case of regular words then it would also
give an algorithm solving the RSD problem with a probability divided by
a constant, hence the RSD problem with regular words remains hard.

Algorithm 1: Expansion Algorithm
Input: n2(2ω − ω2)⌈log q⌉ bits
Output: y ∈ Fn
qn, wR(y) = ωn
Data: A basis (β1, . . . , βn) of Fqn/Fq
begin

n2(2ω−ω2)
q

with the input bits;

q
ωn×(n−ωn)
q

compute x ∈ F
with the ﬁrst ωn2 coordinates of x;
compute A ∈ Fn×ωn
compute B ∈ F
with the last coordinates of x;
B ← (Iωn|B) /* this is the concatenation of two
M ← AB;
y ← (β1, . . . , βn)M ;
return y;

matrices

*/;

The most expensive step of this algorithm is the matrix product which

takes ωn3 operations in Fq, so its overall complexity is O(cid:0)n3(cid:1).

With these two functions, we can construct an iterative version of the

generator which can compute as many bits as we want.

Algorithm 2: Our Pseudo-Random Generator
Input: a vector x ∈ FK
Output: N pseudo-random bits
Data: a random matrix in systematic form H ∈ F

q where K is the security parameter

(1−R)n×n
qn

, an

initialization vector v ∈ F

n2(2ω−ω2)−K
q

begin

y ← Expansion(xkv);
repeat

s ← HyT ;
split s into two strings of bits s1 and s2, with s1 of length
n2(2ω − ω2)⌈log q⌉;
output s2;
y ← Expansion(s1);

until the number of bits generated > N ;

5.2 Security of the generator

We recall that a distribution is pseudo-random if it is polynomial-time
indistinguishable from a truly random distribution. If our generator were
not pseudo-random, then there would exist a distinguisher DR which dis-
tinguishes a sequence produced by our generator from a truly random
sequence with a non-negligible advantage. We can use this distinguisher
to build another distinguisher for the Fischer-Stern generator [11]. That
generator is proven pseudo-random if syndrome decoding in the Hamming
metric is hard [3]. It takes as input a parity-check matrix M ∈ Fk×n
of a
random code and a vector x ∈ Fn
2 of Hamming weight d, with d smaller
than the Gilbert-Varshamov bound (in the Hamming metric) of the code
and outputs (M, M xT ).

2

We need a method to embed an Fq-linear code into an Fqm-linear code.

We use the same technique as in [15].
Deﬁnition 5. Let m > n and α = (α1, . . . , αn) ∈ Fn
embedding of Fn

q into Fn

qm. We deﬁne the

qm by :
Fn
q

ψα :

→ Fn

qm

(1)
For every Fq-linear code C, we denote by C(C, α) the Fqm-linear code gen-
erated by the set ψα(C).

(x1, . . . , xn) 7→ (α1x1, . . . , αnxn)

Our distinguisher works as follow :

(n−k)×n
2

– it takes as input M ∈ F
– it chooses a vector α ∈ Fn
F2-linearly independent.
– it gives to DR the input (ψα(M ), s).
– it returns the same value as DR.

and s ∈ Fn−k

2

.

2m at random until the coordinates of α are

If (M, s) is an output of the Fisher-Stern generator, then there exists an
x such that s = M xT and wH(x) = d. Hence s = ψα(M )ψβ(x)T with
β = α−1 = (α−1

1 , . . . , α−1

n ).

Let C be the code of parity-check matrix M . Since C is a random code,
its Hamming minimum distance d is on the Gilbert-Varshamov bound, so
d ≈ dGV .
Note that wH(ψβ(x)) = d. According to Theorem 8 of [15], if we choose
m > 8n, the probability that the rank minimum distance dR of C(C, α)
is diﬀerent from d decreases exponentially with n. According to Lemma 7
of [15], the rank weight of ψβ(x) satisﬁes wR(ψβ(x)) = wH(x) = d. This
implies that the distinguisher DR accepts (M, s) with a non-negligible
advantage.

If (M, s) is purely random, DR sees only a random distribution and

accepts the inputs with probability 1/2.

Thus the existence of a distinguisher for our generator implies the ex-
istence of a distinguisher for the Fisher-Stern generator, which contradicts
Theorem 2 of [12]. This implies that our generator is pseudo-random.

6 Quantum attacks

In this section we evaluate the complexity of solving the rank (metric)
syndrome decoding problem with a quantum computer. We will use for
that a slight generalization of Grover’s quantum search algorithm [16,18]
given in [7] what we will use in the following form. We will use the NAND
circuit model as in [4], which consists in a directed acyclic graph where
each node has two incoming edges and computes the NAND of its prede-
cessors.
Theorem 1. [7] Let f be a Boolean function f : {0, 1}b → {0, 1} that is
computable by a NAND circuit of size S. Let p be the proportion of roots
of the Boolean function

def
=

p

#{x ∈ {0, 1}b : f (x) = 0}

2b

.

Then there is a quantum algorithm based on iterating a quantum circuit
2 one of the roots

O(cid:0) 1√p(cid:1) many times that outputs with probability at least 1
of the Boolean function. The size of this circuit is O(cid:0)S(cid:1).

Basically this tool gives a quadratic speed-up when compared to a
classical algorithm. Contrarily to what happens for the Hamming metric
[4], where using this tool does not yield a quadratic speed-up over the
best classical decoding algorithms, the situation is here much clearer : we
can divide the exponential complexity of the best algorithms by two. The
point is that the algorithms of [14] and [20] can be viewed as looking for
a linear subspace which has the right property, where linear spaces with
appropriate parameters are drawn uniformly at random and this property
can be checked in polynomial time. The exponential complexity of these

algorithms is basically given by O(cid:0) 1

spaces that have this property. More precisley we have

p(cid:1) where p is the fraction of linear

for m > n, see [20]) and

1
p

= O(cid:0)q(w−1)(k+1)(cid:1)

1
p

= O(cid:0)q(w−1)⌊ (k+1)m

n

⌋(cid:1)

when m ≤ n, see [14]. Checking whether the linear space has the right
property can be done by
(i) solving a linear system with (n − k − 1)m equations and with about
as many unknowns over Fq,
(ii) checking whether a matrix over Fq of size r × r′ is of rank equal to
w where (r, r′) = (m − ⌈ (k+1)m
⌉, n) in the case m ≤ n and (r, r′) =
(n − k − 1, m) in the case m > n.
size O(cid:0)(n−k)3m3(cid:1) that realizes these operations. In other words, by using

If we view q as a ﬁxed quantity, there is a classical NAND circuit of

Theorem 1 we obtain

n

Proposition 1. For ﬁxed q, there is a quantum circuit with O(cid:0)(n −
k)3m3(cid:1) gates that solves the rank metric syndrome decoding problem in
time O(cid:0)(n−k)3m3(cid:1)q(w−1)(k+1)/2 when m > n and in time O(cid:0)(n−k)3m3q
when m ≤ n.

(w−1)l (k+1)m

n

m/2(cid:1)

7 Performances and examples of parameters

7.1 Asymptotic behaviour

Consider the case of a random parity check matrix without any structure,
n = m, q = 2 and the case where w is on the rank Gilbert-Varsahmov

bound (which is equal in this case to n(1 −pk/n)). In that case the cost
of a syndrome computation is in O(cid:0)n3(cid:1) operations in the base ﬁeld F2
and the number of random bits that are obtained is in O(cid:0)n2(cid:1), hence the
number of operations in the base ﬁeld F2 per bit is O(cid:0)n(cid:1). Now since the
complexity of the best attacks is in 2O(cid:0)n2(cid:1), for a given security parameter
λ, we obtain n = O(cid:0)√λ(cid:1) and the cost of the protocol is O(cid:0)√λ(cid:1) per bit,
when for other Hamming based approach the cost is in O(cid:0)λ(cid:1) in the case

of random parity check matrices without additional structure.

Concerning the amount of data, there is also an asymptotic improve-
ment when compared to the Hamming metric. The data for this protocol
is given by the matrix H of the code. If it is written in systematic form,
H is described by its k(n− k) coeﬃcients in F2n, so k(n− k)n bits, hence
the size of the data N is in O(cid:0)n3(cid:1) = O(cid:0)λ3/2(cid:1) whereas the size of the data
is in O(cid:0)λ2(cid:1) for the Hamming metric with random matrices [11].

7.2 Parameters

We propose two sets of parameters. In the ﬁrst table, we optimize the size
of the required data, that is to say the matrix of the code and the initial-
ization vector. These parameters are useful in constrained environments
where the lack of memory is the main issue. The drawback of small data
size is that the performance of the generator is very low.

n n-k dGV (n, k) w security data size key size cycles/bytes
31 18
41 25
47 30
61 39

7646 bits
17048 bits
24899 bits
54103 bits

128
192
256
512

273
144
183
977

11
16
19
25

10
12
15
23

128
192
256
512

In the second table, we optimize the speed of the generator at the cost
of data size (but still with small matrix sizes compared to SYND and
XSYND). We obtain speeds comparable to those of SYND [13] and we are
less eﬃcient than XSYND [26]. But we can always increase the parameters
to improve the speed of the generator. Moreover our parameters are chosen
at random and have no cyclic structure. In practice as for SYND and

XSYND our results are slower than optimized versions of AES in counter
mode, but at the price of increasing the size of the matrix it is possible
to do better: the parameters we propose in this second table show how it
is possible to optimize the speed at the cost of a larger matrix size. Note
that the parameters we propose here are only examples and that it should
be possible to have faster speed.

n n-k dGV (n, k) w security data size key size cycles/bytes
43 36
61 50
83 73
127 115

14038 bits
35143 bits
63859 bits
183652 bits

128
192
256
512

48
51
51
76

24
35
54
87

14
17
25
42

128
192
256
512

All the lengths n are prime, although there is no evidence that a
speciﬁc attack against composite length would exist. As quantum attacks
divide the exponent of the complexity of the attack by two, our two last
parameters are quantum resilient.

We made a non-optimized implementation of our scheme with the
MPFQ library, which showed that the theoretical complexity we give,
ﬁtted with what we obtained in practice. Moreover the main operation of
our system, the syndrome computation (a matrix-vector product) is highly
parallelizable, which can be used to further improve the performances.

8 Conclusion

In this paper we give the ﬁrst PRNG based on rank metric. The security
if system relies on the hardness of solving general instances of the RSD
problem, which permits to obtain small size of keys without considering
additional structure like cyclicity or quasi-cyclicity. We give results and
parameters which show that our system is a good trade-oﬀ between speed
and data size when compared to other code-based PRNG in a context of
PRNG provably as secure as known diﬃcult problems. We also study the
improvement of the complexity of the best known combinatorial attacks a
quantum computer may bring. We give parameters both resistant to the
best known classical and quantum attacks.

Acknowledgment

Jean-Pierre Tillich acknowledges the support of the Commission of the
European Communities through the Horizon 2020 program under project
number 645622 PQCRYPTO.

References

1. Abhishek Banerjee, Chris Peikert, and Alon Rosen. Pseudorandom functions and
lattices. In Advances in Cryptology–EUROCRYPT 2012, pages 719–737. Springer,
2012.

2. Côme Berbain, Henri Gilbert, and Jacques Patarin. Quad: A practical stream
In Advances in Cryptology-EUROCRYPT 2006,

cipher with provable security.
pages 109–128. Springer, 2006.

3. Elwyn Berlekamp, Robert McEliece, and Henk van Tilborg. On the inherent in-
tractability of certain coding problems. IEEE Trans. Inform. Theory, 24(3):384–
386, May 1978.

4. Daniel J. Bernstein. Grover vs. McEliece.

In Nicolas Sendrier, editor, Post-
Quantum Cryptography 2010, volume 6061 of Lecture Notes in Comput. Sci., pages
73–80. Springer, 2010.

5. Lenore Blum, Manuel Blum, and Mike Shub. A simple unpredictable pseudo-

random number generator. SIAM Journal on computing, 15(2):364–383, 1986.

6. Manuel Blum and Silvio Micali. How to generate cryptographically strong se-
quences of pseudorandom bits. SIAM journal on Computing, 13(4):850–864, 1984.
7. M. Boyer, G. Brassard, P. Høyer, and A. Tapp. Tight bounds on quantum search-

ing. Fortsch. Phys., 46:493, 1998.

8. Florent Chabaud and Jacques Stern. The cryptographic security of the syndrome
decoding problem for rank distance codes.
In Advances in Cryptology - ASI-
ACRYPT 1996, volume 1163 of Lecture Notes in Comput. Sci., pages 368–381,
Kyongju, Korea, November 1996. Springer.

9. Nicolas Courtois. Eﬃcient zero-knowledge authentication based on a linear algebra
problem MinRank. In Advances in Cryptology - ASIACRYPT 2001, volume 2248
of Lecture Notes in Comput. Sci., pages 402–421, Gold Coast, Australia, 2001.
Springer.

10. Ronald Cramer, Léo Ducas, Chris Peikert, and Oded Regev. Recovering short gen-
erators of principal ideals in cyclotomic rings. Cryptology ePrint Archive, Report
2015/313, 2015. http://eprint.iacr.org/.

11. A. Fiat and A. Shamir. How to prove yourself: Practical solutions to identiﬁca-
tion and signature problems.
In A.M. Odlyzko, editor, Advances in Cryptology
- CRYPTO ’86, volume 263 of Lecture Notes in Comput. Sci., pages 186–194.
Springer, 1987.

12. Jean-Bernard Fischer and Jacques Stern. An eﬃcient pseudo-random generator
In Ueli Maurer, editor, Advances in
provably as secure as syndrome decoding.
Cryptology - EUROCRYPT’96, volume 1070 of Lecture Notes in Comput. Sci.,
pages 245–255. Springer, 1996.

13. Philippe Gaborit, Cédric Lauradoux, and Nicolas Sendrier. SYND: a fast code-
based stream cipher with a security reduction. In Proc. IEEE Int. Symposium Inf.
Theory - ISIT, pages 186–190, Nice, France, June 2007.

14. Philippe Gaborit, Olivier Ruatta, and Julien Schrek. On the complexity of the

rank syndrome decoding problem. CoRR, abs/1301.1026, 2013.

15. Philippe Gaborit and Gilles Zémor. On the hardness of the decoding and the

minimum distance problems for rank codes. CoRR, abs/1404.3482, 2014.

16. Keith Gibson. The security of the Gabidulin public key cryptosystem. In Ueli Mau-
rer, editor, Advances in Cryptology - EUROCRYPT ’96, volume 1070 of Lecture
Notes in Comput. Sci., pages 212–223. Springer, 1996.

17. Louis Goubin and Nicolas Courtois. Cryptanalysis of the TTM cryptosystem. In
Tatsuaki Okamoto, editor, Advances in Cryptology - ASIACRYPT 2000, volume
1976 of Lecture Notes in Comput. Sci., pages 44–57. Springer, 2000.

18. L. K. Grover. Quantum mechanics helps in searching for a needle in a haystack.

Phys. Rev. Lett., 79:325, 1997.

19. Johan Håstad, Russell Impagliazzo, Leonid A Levin, and Michael Luby. A pseu-
dorandom generator from any one-way function. SIAM Journal on Computing,
28(4):1364–1396, 1999.

20. Adrien Hauteville and Jean-Pierre Tillich. New algorithms for decoding in the

rank metric and an attack on the LRPC cryptosystem, 2015. abs/1504.05431.

21. Aviad Kipnis and Adi Shamir. Cryptanalysis of the HFE public key cryptosystem
by relinearization. In Advances in Cryptology - CRYPTO’99, volume 1666 of Lec-
ture Notes in Comput. Sci., pages 19–30, Santa Barbara, California, USA, August
1999. Springer.

22. Leonid A Levin. One way functions and pseudorandom generators. Combinatorica,

7(4):357–363, 1987.

23. Françoise Lévy-dit Vehel and Ludovic Perret. Algebraic decoding of codes in rank
metric. In proceedings of YACC06, Porquerolles, France, June 2006. available on
http://grim.univ-tln.fr/YACC06/abstracts-yacc06.pdf.

24. Rudolf Lidl and Harald Niederreiter. Finite ﬁelds, volume 20 of Encyclopedia of
Mathematics and its Applications. Cambridge University Press, Cambridge, second
edition, 1997. With a foreword by P. M. Cohn.

25. Robert J. McEliece. A Public-Key System Based on Algebraic Coding Theory,

pages 114–116. Jet Propulsion Lab, 1978. DSN Progress Report 44.
26. Mohammed Meziani, Gerhard Hoﬀmann, and Pierre-Louis Cayrel.

Improving
the Performance of the SYND Stream Cipher.
In Progress in Cryptology -
AFRICACRYPT 2012, volume 7374 of Lecture Notes in Comput. Sci., pages 99–
116. Springer, 2012.

27. Alexei V. Ourivski and Thomas Johansson. New technique for decoding codes
in the rank metric and its cryptography applications. Problems of Information
Transmission, 38(3):237–246, 2002.

28. Pierre-Jean Spaenlenhauer. Résolution de systèmes multi-homogènes et determi-

nantiels. PhD thesis, Univ. Pierre et Marie Curie- Paris 6, October 2012.

29. Andrew C Yao. Theory and application of trapdoor functions.

In Foundations
of Computer Science, 1982. SFCS’08. 23rd Annual Symposium on, pages 80–91.
IEEE, 1982.

