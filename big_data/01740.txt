6
1
0
2

 
r
a

M
5

 

 
 
]
S
D
.
s
c
[
 
 

1
v
0
4
7
1
0

.

3
0
6
1
:
v
i
X
r
a

New Algorithms for Maximum Disjoint Paths

Based on Tree-Likeness

Krzysztof Fleszar∗

Matthias Mnich†

Joachim Spoerhase‡

Abstract

We study the classical NP-hard problems of ﬁnding maximum-size subsets from given sets of k terminal
pairs that can be routed via edge-disjoint paths (MaxEDP) or node-disjoint paths (MaxNDP) in a
given graph. The approximability of MaxEDP/NDP is currently not well understood; the best known
lower bound is Ω(log1/2−ε n), assuming P (cid:54)= NP. This constitutes a signiﬁcant gap to the best known
√
approximation upper bound of O(
n), due to Chekuri et al. (2006). In their seminal paper, Raghavan
and Thompson (Combinatorica, 1987) introduce the technique of randomized rounding for LPs; their

technique gives an O(1)-approximation when edges (or nodes) may be used by O(cid:16) log n

paths.

(cid:17)

log log n

In this paper, we provide the ﬁrst non-trivial reﬁnements of these fundamental results by achieving
bounds that are independent of the input size. Our bounds are formulated in terms of the feedback vertex
set number r of a graph which measures its vertex deletion distance to a forest. In particular, we obtain
the following.

√
• For MaxEDP, we give an O(

√
factors, our result can be considered a strengthening of the best known approximation factor O(
for MaxEDP, due to Chekuri et al.

r · log1.5 kr)-approximation algorithm. As r ≤ n, up to logarithmic
n)

• Further, we show how to route Ω(OPT) pairs with congestion O(cid:16) log kr

, strengthening the bound

(cid:17)

log log kr

obtained by the classic approach of Raghavan and Thompson.

• For MaxNDP, we give an algorithm that gives the optimal answer in time (k + r)O(r) · n. If r is at
most triple exponential in k, this improves the best known algorithm for MaxNDP with parameter
k, by Kawarabayashi and Wollan (STOC 2010).

We complement these positive results by showing that MaxEDP is NP-hard even for r = 1, and
MaxNDP is W[1]-hard for parameter r; so neither problem is ﬁxed-parameter tractable in r unless
FPT = W[1]. Additionally, this shows that our approximation guarantees are relevant also for very small
constant values of r.

1

Introduction

In this paper, we study disjoint paths routing problems. In this setting, we are given an undirected graph G
and a collection of source-destination pairs M = {(s1, t1), . . . , (sk, tk)}. The goal is to select a maximum-sized
subset M(cid:48) ⊆ M of the pairs that can be routed, where a routing of M(cid:48) is a collection P of paths such that,
for each pair (si, ti) ∈ M(cid:48), there is a path in P connecting si to ti. In the Maximum Edge Disjoint Paths
(MaxEDP) problem, a routing P is feasible if its paths are pairwise edge-disjoint, and in the Maximum
Node Disjoint Paths (MaxNDP) problem the paths in P must be pairwise vertex-disjoint.

Disjoint paths problems are fundamental problems with a long history and signiﬁcant connections to
optimization and structural graph theory. The decision version of MaxEDP/MaxNPD asks whether all of
the pairs can be routed subject to the capacities. Karp showed that, when the number of pairs is part of the

∗Universit¨at W¨urzburg, W¨urzburg, Germany. krzysztof.fleszar@uni-wuerzburg.de
†Universit¨at Bonn, Bonn, Germany. mmnich@uni-bonn.de. Supported by ERC Starting Grant 306465 (BeyondWorstCase).
‡Universit¨at W¨urzburg, W¨urzburg, Germany. joachim.spoerhase@uni-wuerzburg.de

1

input, the decision problem is NP-complete (the node disjoint paths problem is part of Karp’s list [21] of 21
NP-complete problems). In undirected graphs, MaxEDP and MaxNDP are solvable in polynomial time
when the number of pairs is a ﬁxed constant; this is a very deep result of Robertson and Seymour [33] that
builds on several fundamental results in structural graph theory from their graph minors project.

In this paper, we consider the optimization problems MaxEDP and MaxNDP when the number of
√
pairs are part of the input. In this setting, the best approximation ratio for MaxEDP is achieved by
an O(
n)-approximation algorithm [9, 27], where n is the number of nodes, whereas the best hardness for
undirected graphs is only Ω(log1/2−ε n) [2]. Bridging this gap is a fundamental open problem that seems
quite challenging at the moment.

√

√
n), and this is the main obstacle for improving the O(

Most of the results for routing on disjoint paths use a natural multi-commodity ﬂow relaxation as a
starting point. A well-known integrality gap instance due to Garg et al. [18] shows that this relaxation has an
integrality gap of Ω(
n) approximation in general
graphs. The integrality instance on an n × n grid (of treewidth Θ(
n)) exploits a topological obstruction
in the plane that prevents a large integral routing; see Fig. 1. This led Chekuri et al. [12] to studying the
approximability of MaxEDP with respect to the tree-width of the underlying graph. In particular, they pose
the following conjecture:

√

Conjecture 1 ([10]). The integrality gap of the standard multi-commodity ﬂow relaxation for MaxEDP
is Θ(w), where w is the treewidth of the graph.

Recently, Ene et al. [15] showed that MaxEDP admits an O(w3)-approximation algorithm on graphs
of treewidth at most w. Theirs is the best known approximation in terms of w, improving on an earlier
O(w·3w)-approximation due to Chekuri et al. This shows that the problem seems more amenable on “tree-like”
graphs.

However, for w = ω(n1/6) the bound is weaker than the bound of O(

n). In fact, EDP remains NP-hard
even for graphs of constant treewidth, namely treewidth w = 2 [30]. This further rules out the existence of a
ﬁxed-parameter algorithm for MaxEDP parameterized by w, assuming P (cid:54)= NP. Therefore, to obtain ﬁxed-
parameter tractability results as well as better approximation guarantees, one needs to resort to parameters
stronger than treewidth.

√

Another route to bridge the large gap between approximation lower and upper bounds for MaxEDP is to
allow the paths to have low congestion c: that is, instead of requiring the routed paths to be pairwise disjoint,
at most c paths can use an edge. In their groundbreaking work, Raghavan and Thompson [31] introduced
the technique of randomized rounding of LPs to obtain polynomial-time approximation algorithms for
.
O(1) k-approximation algorithm with congestion 2 for MaxEDP [14].

combinatorial problems. Their approach allows to route Ω(OPT) pairs of paths with congestion O(cid:16) log n

This line of work has culminated in a log

(cid:17)

log log n

1.1 Motivation and Contribution

The goal of this work is to study disjoint paths problems under another natural measure for how “far” a
graph is from being a tree. In particular, we propose to examine MaxEDP and MaxNDP under the feedback
vertex set number, which for a graph G denotes the smallest size r of a set R of G for which G − R is a forest.
Note that the treewidth of a graph is at most r + 1. Therefore, given the NP-hardness of EDP for w = 2
and the current gap between the best known upper bound O(w3) and the linear upper bound suggested by
Conjecture 1, it is interesting to study the stronger restriction of bounding the feedback vertex set number r
of the input graph. Our approach is further motivated by the fact that MaxEDP is eﬃciently solvable on
trees by means of the algorithm of Garg, Vazirani and Yannakakis [18]. Similarly, MaxNDP is easy on trees
(see Theorem 3).

Our main insight is that one can in fact obtain bounds in terms of r that either reﬁne the best known
bounds or are almost tight (see Table 1). It therefore seems that parameter r correlates quite well with the
“diﬃculty” of disjoint paths problems.

Our ﬁrst result allows the paths to have small congestion: in this setting, we reﬁne the result, obtained
by the classic randomized LP-rounding approach of Raghavan and Thompson [31], that one can always

2

route Ω(OPT) pairs with congestion O(cid:16) log n
congestion O(cid:16) log kr
(cid:17)
for MaxEDP with congestion O(cid:16) log kr

(cid:17)

log log kr

log log kr

.

(cid:17)

with constant probability.

log log n

Theorem 1. For any instance (G,M) of MaxEDP, one can eﬃciently ﬁnd a routing of Ω(OPT) pairs with
with constant probability; in other words, there is an eﬃcient O(1)-approximation

Our second result employs our ﬁrst result as subroutine. We show how to use a routing for MaxEDP
with low congestion to obtain a polynomial-time approximation algorithm for MaxEDP without congestion
that performs well in terms of r.

√
Theorem 2. The integrality gap of the multi-commodity ﬂow relaxation for MaxEDP with k terminal
pairs is O(
r · log1.5 rk) for graphs with feedback vertex set number r. Moreover, there is a polynomial time
√
algorithm that, given a fractional solution to the relaxation of value opt, it constructs an integral routing of
r · log1.5 rk).
size opt/O(

In particular, our algorithm reﬁnes the best known approximation algorithm for MaxEDP on general
graphs [9] as always r ≤ n, and indeed it matches that algorithm’s performance up to polylogarithmic factors.
Substantially improving upon our bounds would also improve the current state of the art of MaxEDP.
Conversely, the result implies that it suﬃces to study graphs with close to linear feedback vertex set number
in order to improve the currently best upper bound of O(
n) on the approximation ratio [9]. In order to
obtain our result, we introduce the new concept of irreducible routings with low congestion, which helps us to
√
upper bound the number of conﬂicts between paths of an appropriately pre-processed solution to the natural
LP relaxation. The known O(
n)-approximation algorithm for MaxEDP by Chekuri et al. [9] employs
√
a clever LP-rounding approach. In contrast, the natural greedy approach of always routing the shortest
conﬂict-free path gives only O(
m). We believe that it is non-trivial to obtain our bounds via a more direct
or purely combinatorial approach.

√

We achieve our approximation results by a careful aggregation and rerouting of the ﬂows of an optimum
solution to the multicommodity ﬂow relaxation of MaxEDP, which exploits the tree-likeness of the underlying
graph.

Our third result is a ﬁxed-parameter algorithm for MaxNDP in k + r.

Theorem 3. MaxNDP can be solved in time (8k + 8r)2r+2·O(n) on graphs with feedback vertex set number r
and k terminal pairs.

This run time is polynomial for constant r. We also note that for small r, our algorithm is asymptotically
signiﬁcantly faster than the fastest algorithm for NDP, by Kawarabayashi and Wollan [22], which requires
time at least quadruple-exponential in k [1]. Namely, if r is at most triple exponential in k, our algorithm is
asymptotically faster than theirs. We achieve this result by the idea of so-called essential pairs and realizations,
which characterizes the “interaction” between the feedback vertex set R and the paths in an optimum solution.
(Note that if only k is a parameter, we reduce MaxNDP to NDP by guessing the subset of pairs to be
routed, at an expense of 2k in the run time.)

Once a ﬁxed-parameter algorithm for a problem has been obtained, the existence of a polynomial-size
kernel comes up. Here we note that MaxNDP does not admit a polynomial kernel for parameter k + r, unless
NP ⊆ coNP/poly [6].
Another natural question is whether the run time f (k, r) · n in Theorem 3 can be improved to f (r) · nO(1).
We answer this question in the negative, ruling out the existence of a ﬁxed-parameter algorithm for MaxNDP
parameterized by r (assuming FPT (cid:54)= W[1]):
Theorem 4. MaxNDP in unit-capacity graphs is W[1]-hard parameterized by r.

This contrasts the known result that NDP is ﬁxed-parameter tractable in r [34]—which further stresses

the relevance of understanding this parameter.

For MaxEDP, we prove that the situation is, in a sense, even worse:

3

Theorem 5. MaxEDP is NP-hard for unit-capacity graphs with r = 1 and EDP is NP-hard for unit-capacity
graphs with r = 2.

This theorem nicely complements the NP-hardness for MaxEDP in capacitated trees [18].
Our results are summarized in Table 1.

const.

param.

EDP

poly [18]

open

NP-hard (Thm. 5)

MaxEDP

poly [18]

NP-hard (Thm. 5)
NP-hard (Thm. 5)

NDP

poly [34]
poly [34]
poly [34]

MaxNDP

poly (Thm. 3)
poly (Thm. 3)
poly (Thm. 3)

r = 0
r = 1
r ≥ 2

r

√
O(

O(1)-approx. w.cg. O(cid:16) log kr

para-NP-hard (Thm. 5)
r · log1.5 kr)-approx (Thm. 2)

(cid:17)

log log kr

(Thm. 1)

FPT [34] W[1]-hard (Thm. 4)

exact (k + r)O(r) (Thm. 3)

Table 1: Summary of results obtained in this paper.

Our study of the feedback vertex set number is in line with the general attempt to obtain bounds for
MaxEDP (or related problems) that are independent of the input size. Besides the above-mentioned works
that provide bounds in terms of the tree-width of the input graph, G¨unl¨uk [19] and Chekuri et al. [13] give
bounds on the ﬂow-cut gap for the closely related integer multicommodity ﬂow problem that are logarithmic
with respect to the vertex cover number of a graph. This improved upon earlier bounds of O(log n) [28]
and O(log k) [4, 29]. As every feedback vertex set is in particular a vertex cover of a graph, our results
generalize earlier work for disjoint path problems on graphs with bounded vertex cover number. Bodlaender
et al. [6] showed that NDP does not admit a polynomial kernel parameterized by vertex cover number and
the number k of terminal pairs, unless NP ⊆ coNP/poly ; therefore, NDP is unlikely to admit a polynomial
kernel in r + k either. Ene et al. [15] showed that MaxNDP is W[1]-hard parameterized by treedepth, which
is another restriction of treewidth that is incomparable to the feedback vertex set number.

The basic gap in understanding the approximability of MaxEDP has led to several improved results
for special graph classes, and also our results can be seen in this light. Rao and Zhou [32] give an eﬃcient
O(1)(n)-approximation algorithm on graphs G whose global minimum cut value is Ω(log5 n).
randomized log
Further algorithms with polylogarithmic approximation guarantee are known for bounded-degree expanders [7,
8, 17, 24, 28]. Algorithms with constant factor approximation guarantee are known for capacitated trees [11, 18],
grids and grid-like graphs [3, 5, 25, 26]. For planar graphs, Seguin-Charbonneau and Shepherd [35] gave
a constant-factor approximation algorithm with congestion 2. For the special case of Eulerian planar or
4-connected planar graphs, Kawarabayashi and Kobayashi [23] give an O(log n)-approximation. However,
√
improving the O(
n)-approximation algorithm for EDP remains elusive even on unrestricted planar graphs.

2 Preliminaries

We use standard graph theoretic notation. For a graph G, let V (G) denote its vertex set and E(G) its edge
set. Let G be a graph. A feedback vertex set of G is a set R ⊆ V (G) such that G − R is a forest. A minor
of G is a graph H that is obtained by successively contracting edges from a subgraph of G (and deleting any
occurring loops). A class G of graphs is minor-closed if for any graph in G also all its minors belong to G.
For an instance (G,M) of MaxEDP/MaxNPD, we refer to the vertices participating in the pairs M
as terminals. It is convenient to assume that M forms a matching on the terminals; this can be ensured by
making several copies of a terminal and attaching them as leaves.

Multi-commodity ﬂow relaxation. We use the following standard multi-commodity ﬂow relaxation for
MaxEDP (there is an analogous relaxation for MaxNDP). We use P(u, v) to denote the set of all paths

4

pairwise disjoint. Let P =(cid:83)k

in G from u to v, for each pair (u, v) of nodes. Since the pairs M form a matching, the sets P(si, ti) are
i=1 P(si, ti). The LP has a variable f (P ) for each path P ∈ P representing the
amount of ﬂow on P . For each pair (si, ti) ∈ M, the LP has a variable xi denoting the total amount of ﬂow
routed for the pair (in the corresponding IP, xi denotes whether the pair is routed or not). The LP imposes
the constraint that there is a ﬂow from si to ti of value xi. Additionally, the LP has constraints that ensure
that the total amount of ﬂow on paths using a given edge (resp. node for MaxNDP) is at most 1.

max

s.t.

xi

k(cid:88)
(cid:88)
(cid:88)

i=1

(MaxEDP LP)

f (P ) ≤ 1

P∈P(si,ti)

P : e∈P
f (P ) ≥ 0

f (P ) = xi ≤ 1

i = 1, . . . , k,

e ∈ E(G)
P ∈ P

Figure 1: Multi-commodity ﬂow relaxation for MaxEDP. The instance on the right shows an Ω(
n) integrality
gap for MaxEDP [18]: any integral routing routes at most one pair, whereas a multi-commodity ﬂow can
send 1/2 unit of ﬂow for each pair (si, ti) along the canonical path from si to ti in the grid.

√

It is well-known that the relaxation MaxEDP LP can be solved in polynomial time, since there is an
eﬃcient separation oracle for the dual LP (alternatively, one can write a compact relaxation). We use (f, x)
to denote a feasible solution to MaxEDP LP for an instance (G,M) of MaxEDP. For each terminal v,
let x(v) denote the total amount of ﬂow routed for v and we refer to x(v) as the marginal value of v in the
multi-commodity ﬂow f .

We will use the following result by Chekuri et al. [9, Sect. 3.1]; see also Proposition 3.3 of Chekuri et

al. [12].
Proposition 1. Let (f, x) be a fractional solution to the LP relaxation of a MaxEDP instance (G,M). If
some node v is contained in all ﬂow paths of f , then we can ﬁnd an integral routing of size at least 1
i xi
12
in polynomial time.

(cid:80)

3 Bi-Criteria Approximation for MaxEDP with Low Congestion

We present a randomized rounding algorithm that will lead to the proof of Theorem 1.

3.1 Algorithm
Consider an instance (G,M) of MaxEDP, and let r be the size of a feedback vertex set R in G. For sake of
simpler terminology, we assume that the feedback vertex set contains the set of terminal nodes. It is not hard
to see that this assumption can be removed just by distinguishing between the two types of nodes. Also note
that this assumption increases the bound of Theorem 1 by at most a constant factor.
First, solve the corresponding MaxEDP LP. We obtain an optimum solution (f, x). For each terminal
pair (si, ti), we further obtain a set P(cid:48)(si, ti) = {P ∈ P(si, ti) | f (P ) > 0} of positive weighted paths that
i=1 P(cid:48)(si, ti) is of size polynomially bounded in the
input size. In what follows, we will modify P(cid:48) and then select a (unweighted) subset S of P(cid:48) that will form
our integral solution.

satisfy the LP constraints. Note that the total set P(cid:48) =(cid:83)k

5

s1s2skt1t2tkweight f (J [P ]) :=(cid:80)

Each P ∈ P(cid:48) has the form (r1, . . . , r2, . . . , r(cid:96)) where r1, . . . , r(cid:96) are the nodes in R that are traversed by P
in this order. The paths (rj, . . . , rj+1) with j = 1, . . . , (cid:96) − 1 are called subpaths of P . For every subpath P (cid:48)
of P , we set f (P (cid:48)) = f (P ). Let J be the multi-set of all subpaths of all paths in P(cid:48). Let F = G − R be the
forest obtained by removing R.
We now modify some paths in P(cid:48), one by one, and at the same time construct a subset H of nodes that
we will call “hot spots”. At the end, every subpath in J will contain at least one hot spot.
Initially, let H = ∅. Consider any tree T in F and ﬁx any of its nodes as a root. Then let JT be the
multi-set of all subpaths in J that visit T . For each subpath P ∈ JT , deﬁne its hot spot h(P ) as the node
on P closest to the root. Note that P ∩ T = P ∩ F is a path. Now, pick a subpath P ∈ JT that does not
contain any node in H and whose h(P ) is farthest away from the root. Consider the multi-set J [P ] of all
subpaths in JT that are identical to P (but may be subpaths of diﬀerent ﬂow paths in P(cid:48)). Note that the
P∈J [P ] f (P ) of J [P ] is at most 1 by the constraints of the LP. Let u, v ∈ R be the
endpoints of P . We deﬁne Juv as the set of all subpaths in J \ J [P ] that have u and v as their endpoints
and that do not contain any node in H.
Intuitively speaking, we now aggregate ﬂow on P by rerouting as much ﬂow as possible from Juv to P . To
this end, we repeatedly perform the following operation as long as f (J [P ]) < 1 and Juv (cid:54)= ∅. We pick a path P (cid:48)
in J that contains a subpath in Juv. We reroute ﬂow from P (cid:48) by creating a new path P (cid:48)(cid:48) that arises from P (cid:48)
by replacing its subpath between u and v with P , and assign it the weight f (P (cid:48)(cid:48)) = min{f (P (cid:48)), 1 − f (J [P ])}.
Then we set the weight of (the original path) P (cid:48) to max{0, f (P (cid:48)) + f (J [P ]) − 1}. We update the sets P(cid:48),
P(cid:48)(si, ti), J , JT , J [P ] and Juv accordingly.
As soon as f (J [P ]) = 1 or Juv = ∅, we add h(P ) to H. Then, we proceed with the next P ∈ JT not
containing a hot spot, and if there is no such P left, we consider the next tree T in F .
At the end, we create our solution S by randomized rounding: We route every terminal pair (si, ti) with
probability xi. In case (si, ti) is routed, we randomly select a path from P(cid:48)(si, ti) and add it to S where the
probability that path P is taken is f (P )/xi.

3.2 Analysis

terminal pair did not change. Thus the expected number of pairs routed in our solution is(cid:80)k

First, observe that x did not change during our modiﬁcations of the paths, as the total ﬂow between any
i=1 xi ≥ OPT.
Using the Chernoﬀ bound, the probability that we route less than OPT /2 pairs is at most e−1/8 OPT < 1/2,
assuming that OPT > 8. Secondly, we bound the congestion of our solution—our second criterion.

Lemma 1. The congestion of ﬂow f is at most 2.

Proof. In our algorithm, we increase the ﬂow only along ﬂow subpaths that are pairwise edge-disjoint. To see
this, consider two distinct ﬂow subpaths P and P (cid:48) on which we increase the ﬂow. Assume, without loss of
generality, that P was considered before P (cid:48) by the algorithm. If there was an edge e lying on P and P (cid:48), then
both subpaths traverse the same tree in forest F . Hence, the path from e to h(P (cid:48)) would visit the node h(P ),
and h(P ) would be an internal node of P (cid:48). This yields a contradiction, as h(P ) was already marked as a hot
spot when P (cid:48) was considered. This shows that we increased the ﬂow along any edge by at most one unit, and,
hence, f has congestion at most 2.

We now bound the congestion of the integral solution obtained by randomized rounding. In the algorithm,
we constructed a set H of hot spots. As a part of the analysis, we will now extend this set as follows. We
build a sub-forest F (cid:48) of F consisting of all edges of F that lie on a path connecting two hot spots. Then we
add to H all nodes that have degree at least 3 in F (cid:48). Since the number of nodes of degree 3 in any forest is at
most its number of leaves and since every leaf of F (cid:48) is a hot spot, it follows that this can at most double the
size of H. Finally, we add the set R of all feedback vertex nodes to H.
Lemma 2. The number |H| of hot spots is O(kr2).
Proof. It suﬃces to show that the number of hot spots added to H by the algorithm is O(kr2). To this
end, ﬁx two nodes u, v ∈ R and consider the set of ﬂow subpaths P with end nodes u and v for which we

6

added h(P ) to H. Due to the aggregation of ﬂows in our algorithm, all except possibly one of the subpaths
are saturated, that is, they carry precisely one unit of ﬂow. Since no two of these subpaths are contained in a
same ﬂow path of f and since the ﬂow value of f is bounded from above by k, we added only O(k) hot spots
for the pair u, v. Since there are at most r2 pairs in R, the claim follows.
Deﬁnition 1. A hot spot u ∈ H is good if the congestion on any edge incident on u is bounded by c·
where c is a suﬃciently large constant. Otherwise, the hot spot is bad.
Lemma 3. Let u ∈ H be a hot spot. Then the probability that u is bad is at most 1/(k2r3).
Proof. Let e1 = uv1, . . . , e(cid:96) = uv(cid:96) be the edges incident on u and let fi ≤ 2 be the total ﬂow on edge uvi for
i=1 fi on the

i = 1, . . . , (cid:96). Since any ﬂow path visits at most two of the edges incident on u, the total ﬂow(cid:80)(cid:96)
For any i = 1, . . . , (cid:96), we have that fi =(cid:80)
some terminal pair and containing ei. Let fij =(cid:80)

P : P(cid:51)ei f (P ), where P runs over the set of all paths connecting
P∈P(sj ,tj ) : P(cid:51)ei f (P ) be the total amount of ﬂow sent
across ei by terminal pair (sj, tj). Recall that xj is the total ﬂow sent for terminal pair (sj, tj). The probability
that the randomized rounding procedure picks path P with P ∈ P(sj, tj) is precisely xj · f (p)
= f (p).
Given the disjointness of the respective events, the probability that pair (sj, tj) routes a path across ei is
precisely fij. Let Xij be the binary random variable indicating whether pair (sj, tj) routes a path across ei.
j Xij be the number of paths routed across ei by the algorithm. By
− 1. Note that for ﬁxed i, the variables Xij are independent.

Then Pr [Xij = 1] = fij. Let Xi =(cid:80)
linearity of expectation, we have that E [Xi] =(cid:80)

j E [Xij] =(cid:80)

Fix any edge ei. Set δ = c·

edges incident on u is at most 2k.

log kr

log log kr and δ(cid:48) = δ

fi

j fij = fi.

log kr
log log kr ,

xj

Hence, by the Chernoﬀ bound, we have that

(cid:20)
Xi ≥ c ·

Pr

(cid:21)

log kr

log log kr

≤ Pr [Xi ≥ (1 + δ

(cid:48))fi] <

(cid:48)

eδ

(1 + δ(cid:48))1+δ(cid:48)

(cid:32)

(cid:33)fi

≤ f δ

i · (δ/e)−δ ≤ fie

−c
(cid:48)

log log kr·

log kr

log log kr ≤ fi

2k3r3 ,

where for the last inequality we pick c(cid:48) suﬃciently large by making c and k suﬃciently large. (Note that
MaxEDP can be solved eﬃciently for constant k.)

Now, using the union bound, we can infer that the probability that any of the edges incident on u carries

more than δ paths is at most(cid:80)

i fi/(2k3r3) ≤ (2k)/(2k3r3) = 1/(k2r3).

Lemma 4. Assume that every hot spot is good. Then the congestion on any edge is bounded by 2c log kr

log log kr .
Proof. Consider an arbitrary edge e = uv that is not incident on any hot spot. In particular, this means
that e lies in the forest F = G − R. A hot spot z in F is called direct to u (or v) if the path in F from z to u
(or v) neither contains e nor any hot spot other than z.
Now observe that there can be only one hot spot z direct to u and only one hot spot z(cid:48) direct to v. If
there was a second hot spot z(cid:48)(cid:48) (cid:54)= z direct to u then there would have to be yet another hot spot at the node
where the path Pz from z to u joins the path from z(cid:48)(cid:48) to u contradicting the choice of z. Let Pz(cid:48) be the path
from z(cid:48) to v in F . Moreover, let ez be the edge incident on z on path Pz and let ez(cid:48) be the edge incident
on z(cid:48) on path Pz(cid:48).
Now let P be an arbitrary path that is routed by our algorithm and that traverses e. It must visit a
hot spot. If P visited neither z nor z(cid:48), then P would contain a hot spot direct to u or to v that is distinct
from z and z(cid:48)—a contradiction. Therefore, P contains ez or e(cid:48)
z. The claim now follows from the fact that this
holds for any path traversing e, that z and z(cid:48) are good, and that therefore at most 2c log kr
log log kr paths visit ez
or e(cid:48)
z.

Theorem 6. The algorithm from Sect. 3.1 produces—with constant probability—a routing with Ω(OPT)

paths, such that the congestion is O(cid:16) log kr

(cid:17)

log log kr

.

7

Proof. As argued above, we route less than OPT /2 paths with probability at most 1/2. The probability that
at least one of the O(kr2) many hot spots is bad is O(kr2/(k2r3)) = O(1/(kr)), by Lemma 3. Hence, with
constant probability, we route at least OPT /2 pairs with congestion at most 2c log kr

log log kr , by Lemma 4.

4 Reﬁned Approximation Bound for MaxEDP

In this section, we provide an improved approximation guarantee for MaxEDP without congestion, thereby
proving Theorem 2. To obtain this result without congestion, we ﬁrst need to derive some necessary results for
MaxEDP with low congestion. (In contrast to the previous section, we do not assume here that all terminals
are contained in the feedback vertex set.)

4.1 Irreducible Routings with Low Congestion

We ﬁrst develop the concept of irreducible routings with low congestion, which is the heart of our reﬁned
bound on the approximability of MaxEDP based on the feedback vertex number r.
Consider any multigraph G and any set P of (not necessarily simple) paths in G with congestion c. We
say that an edge e is redundant in P if there is an edge e(cid:48) (cid:54)= e such that the set of paths in P covering
(containing) e is a subset of the set of paths in P covering e(cid:48).
Deﬁnition 2. Set P is called an irreducible routing with congestion c if each edge belongs to at most c paths
of P and there is no edge redundant in P.

In contrast to a feasible routing of an MaxEDP instance, we do not require a irreducible routing to
connect a set of terminal pairs. If there is an edge e redundant in P, we can apply the following reduction rule:
We contract e in G and we contract e in every path of P that covers e. By this, we obtain a minor G(cid:48) of G
and a set P(cid:48) of paths that consists all the contracted paths and of all paths in P that were not contracted.
Thus, there is a one-to-one correspondence between the paths in P and P(cid:48).

We make the following observation about P and P(cid:48).

Observation 1. Any subset of paths in P(cid:48) is edge-disjoint in G(cid:48) if and only if the corresponding subset of
paths in P is edge-disjoint in G.

Since the application of the reduction rule strictly decreases the number of redundant edges, an iterative

application of this rule yields an irreducible routing on a minor of the original graph.
Theorem 7. Let G be a minor-closed class of multigraphs and let pG > 0. If for each graph G ∈ G and every
non-empty irreducible routing S of G with congestion c there exists a path in S of length at most pG, then the
average length of the paths in S is at most c · pG.
Proof. Take a path P0 of length at most pG. Contract all edges of P0 in G and obtain a minor G(cid:48) ∈ G of G.
For each path in S contract all edges shared with P0 to obtain a set S(cid:48) of paths. Remove P0 along with all
degenerated paths from S(cid:48), thus |S(cid:48)| < |S|. Note that S(cid:48) is an irreducible routing of G(cid:48) with congestion c. We
repeat this reduction procedure recursively on G(cid:48) and S(cid:48) until S(cid:48) is empty which happens after at most |S|
steps. At each step we decrease the total path length by at most c · pG. Hence, the total length of paths in S
is at most |S| · c · pG.

As a consequence of Theorem 7, we get the following result for forests.

Lemma 5. Let F be a forest and let S be a non-empty irreducible routing of F with congestion c. Then the
average path length in S is at most 2c.
Proof. We show that S contains a path of length as most 2. The lemma follows immediately by applying
Theorem 7.

Take any tree in F , root it with any node and consider a leaf v of maximum depth. Let e1 and e2 be
the ﬁrst two edges on the path from v to the root. By deﬁnition of irreducible routing, the set of all paths

8

covering e1 is not a subset of the paths covering e2, hence, e1 is covered by a path which does not cover e2.
Since all other edges incident to e1 end in a leaf, this path has length at most 2.

Note that the bound provided in Lemma 5 is actually tight up to a constant. Let c ≥ 1 be an arbitary
integer. Consider a graph that is a path of length c − 1 with a star of c − 1 leafs attached to one of its end
points. The c − 1 many paths of length c together with the 2c − 2 many paths of length 1 form an irreducible
routing with congestion c. The average path length is ((c − 1)c + (2c − 2))/(3c − 3) = (c + 2)/3.

The result of Lemma 5 cannot be extended to graphs of treewidth greater than 1.

Observation 2. For any even (cid:96) ∈ N there is a series-parallel multi-graph G and an irreducible routing S
of G with congestion 2, size |S| = (cid:96) and average path length Ω((cid:96) 2).

Proof. Take a path of length (cid:0)(cid:96)
construct S by laying (cid:96) paths between the two endpoints of G. Hence, all path are of length(cid:0)(cid:96)

(cid:1) and copy each edge (cid:96)/2 times. Let the resulting multigraph be G. We
(cid:1). We can

ensure that any two paths of S go exactly once through a same edge, thus S is an irreducible routing with
congestion 2.

2

2

4.2 Approximation Algorithm
Consider an instance (G,M) of MaxEDP, and let r be the size of a feedback vertex set R in G. Using our
containing Ω(OPT)
paths. We remark that our result is limited to uncapacitated graphs, as MaxEDP is NP-hard already on
edge-capacitated trees [18].

result of Sect. 3, we can eﬃciently compute a routing P with congestion c := O(cid:16) log kr
Below we argue how to use the routing P to obtain a feasible routing of cardinality Ω(cid:0)|P|/(c1.5√
which yields an overall approximation ratio of O(cid:0)√
Let r(cid:48) =(cid:112)

(cid:17)
r · log1.5 rk(cid:1); that will prove Theorem 2.

r/c. We distinguish the following cases.

r)(cid:1),

log log kr

To obtain P(cid:48)

Case 1: At least half of the paths in P visit at most r(cid:48) nodes of the feedback vertex set R. Let P be the
subset of these paths. As long as there is an edge e not adjacent to R that is redundant in P(cid:48), we iteratively
apply the reduction rule from Sect. 4.1 on e. Let G(cid:48) be the obtained minor of G with forest F (cid:48) = G(cid:48) − R,
and let P(cid:48) be the obtained set of (not necessarily simple) paths corresponding to P. By Observation 1, it
suﬃces to show that there is an edge-disjoint subset P(cid:48)
0 ⊆ P(cid:48) of size Ω (|P|/(cr(cid:48))) in order to obtain a feasible
routing for (G,M) of size Ω (|P|/(cr(cid:48))).
0, we ﬁrst bound the total path length in P(cid:48). Removing R from G(cid:48) “decomposes” the set P (cid:48)
into a set S := {S is a connected component of P ∩ F | P ∈ P(cid:48) } of subpaths lying in F (cid:48). Observe that S is
an irreducible set of F (cid:48) with congestion c, as the reduction rule is not applicable anymore. (Note that a single
path in P(cid:48) may lead to many paths in the cover S which are considered distinct.) Thus, by Lemma 5, the
average path length in S is at most 2c.
Let P be an arbitrary path in P(cid:48). Each edge on P that is not in a subpath in S is incident on a node in R,
and each node in R is incident on at most two edges in P . Together with the fact that P visits at most r(cid:48)
nodes in R and that the average length of the subpaths in S is at most 2c, we can upper bound the total
P∈P(cid:48) |P| by |P(cid:48)|r(cid:48)(2c + 2). Let P(cid:48)(cid:48) be the set of the |P(cid:48)|/2 shortest paths in P(cid:48). Hence, each
path in P(cid:48)(cid:48) has length at most 4r(cid:48)(c + 1).
0 by iteratively picking an arbitrary path P from P(cid:48)(cid:48) adding
it to P(cid:48)
0 and removing all paths from P(cid:48)(cid:48) that share at least one edge with P (including P itself). We stop
when P(cid:48)(cid:48) becomes empty. Because P(cid:48)(cid:48) has congestion c, we remove at most 4r(cid:48)c(c + 1) paths from P(cid:48)(cid:48) in every
iteration. Therefore, |P(cid:48)
Case 2: At least half of the paths in P visit at least r(cid:48) nodes of the feedback vertex set R. Let P(cid:48) be the
subset of these paths. Consider each path in P(cid:48) as a ﬂow of value 1/c and let f be the sum of all these ﬂows.
Note that f provides a feasible solution to the MaxEDP LP relaxation for (G, M ) of value at least |P|/(2c).
Note that each such ﬂow path contributes 1/c unit of ﬂow to each of the r(cid:48) nodes in R it visits. Since every
ﬂow path in f has length at least r(cid:48), the total inﬂow of the nodes in R is at least |f|r(cid:48). By averaging, there

0| ≥ |P(cid:48)(cid:48)|/(4r(cid:48)c(c + 1)) = Ω(cid:0)|P|/(c1.5√

We greedily construct a feasible solution P(cid:48)

path length(cid:80)

r(cid:1).

9

must be a node v ∈ R of inﬂow at least r(cid:48)|f|/r = |f|/r(cid:48). Let f(cid:48) be the subﬂow of f consisting of all ﬂow
paths visiting v. This subﬂow corresponds to a feasible solution (f(cid:48), x(cid:48)) of the LP relaxation of value at
least |f|/r(cid:48) ≥ |P|/(2cr(cid:48)). Using Proposition 1, we can recover an integral feasible routing of size at least

i ≥ |P|/(24cr(cid:48)) = Ω(cid:0)|P|/(c1.5√

(cid:80)
i x(cid:48)
This completes the proof of Theorem 2.

r(cid:1).

1
12

5 Fixed-Parameter Algorithm for MaxNDP
We give a ﬁxed-parameter algorithm for MaxNDP with run time (k + r)O(r) · n, where r is the size of a
minimum feedback vertex set R in the given instance (G,M). By the matching assumption, each terminal
in M is a leaf of G − R.
Consider an optimal routing P of the given MaxNDP instance. Let MR ⊆ M be the set of terminal
pairs that are connected via P by a path that visits at least one node in R. Let P ∈ P be a path connecting a
terminal pair (si, ti) ∈ MR. This path has the form (si, . . . , r1, . . . , r2, . . . , r(cid:96), . . . , ti), where r1, . . . , r(cid:96) are the
nodes in R that are traversed by P in this order. The pairs (si, r1), (r(cid:96), ti) and (rj, rj+1) with j = 1, . . . , (cid:96) − 1
are called essential pairs for P . A node pair is called essential if it is essential for some path in P. Let Me
be the set of essential pairs.
Let F be the forest that arises when deleting R from the input graph G. Let (u, v) be an essential pair.
A u-v path P in G is said to realize (u, v) if all internal nodes of P lie in F . A set P(cid:48) of paths is said to
realize Me if every pair in Me is realized by some path in P(cid:48) and if two paths in P(cid:48) can only intersect at
their end nodes. Note that the optimum routing P induces a natural realization of Me, by considering all
maximal subpaths of paths in P whose internal nodes all lie in F . Conversely, for any realization P(cid:48) of Me,
we can concatenate paths in P(cid:48) to obtain a feasible routing that connects all terminal pairs in MR. Therefore,
we consider P(cid:48) (slightly abusing notation) also as a feasible routing for MR.
In our algorithm, we ﬁrst guess the set Me (and thus MR). Then, by a dynamic program, we construct
two sets of paths, Pe and PF where Pe realizes Me and PF connects in F a subset of MR := M \ MR. In
our algorithm, the set Pe ∪ PF forms a feasible routing that maximizes |PF| and routes all pairs in MR.
(Recall that we consider the realization Pe of Me as a feasible routing for MR.)
Now assume that we know set Me. We will describe below a dynamic program that computes an optimum
routing in time 2O(r)(k + r)O(1)n. For the sake of easier presentation, we only describe how to compute the
cardinality of such a routing.

We make several technical assumption that help to simplify the presentation. First, we modify the input
instance as follows. We subdivide every edge incident on a node in R by introducing a single new node on
this edge. Note that this yields an instance equivalent to the input instance. As a result, every neighbor of a
node in R that lies in F , that is, every node in NG(R), is a leaf in F . Moreover, the set R is an independent
set in G. Also recall that we assumed that every terminal is a leaf. Therefore, we may assume that R does not
contain any terminal. We also assume that forest F is a rooted tree, by introducing a dummy node (which
plays the role of the root) and arbitrarily connecting this node to every connected component of F by an
edge. In our dynamic program, we will take care that no path visits this root node. We also assume that F is
an ordered tree by introducing an arbitrary order among the children of each node.
For any node v, let Fv be the subtree of F rooted at v. Let cv := degF (v) − 1 be the number of children
of v and let v1, . . . vcv be the (ordered) children of v. Then, for i = 1, . . . , cv, let F i
v denote the subtree of Fv
induced by the union of v with the subtrees Fv1 , . . . , Fvi. For leaves v, we deﬁne F 0
v as Fv = v.
v and every subset M(cid:48)
of Me. Roughly speaking, the value of such an entry is the solution to the subproblem, where we restrict the
forest to F i
e. More precisely, table T contains ﬁve parameters. Parameters v
and i describing F i
e, and two more parameters u and b. Parameter u is either a terminal, or a
node in R, and b is in one of the three states: free, to-be-used , or blocked . The value T [v, i,M(cid:48)
e, u, b] is the
maximum cardinality of a set PF of paths with the following properties:

We introduce a dynamic programming table T . It contains an entry for every F i

v, and the set of essential pairs to M(cid:48)

v, parameter M(cid:48)

e

1. PF is a feasible routing of some subset of MR.

10

2. PF is completely contained in F i
v.
3. There is an additional set Pe of paths with the following properties:

v ∪ R.

(a) Pe is completely contained in F i
(b) Pe is a realization of M(cid:48)
(c) There is no path in Pe ∪ PF visiting v if b = free.
(d) Pe is node-disjoint from the paths in PF .
e, u, b] is −∞.

e ∪ {(u, v)} if b = to-be-used . Else, it is a realization of M(cid:48)
e.

e2 is a partition of M(cid:48)

e, u, free] ≥ T [v, i,M(cid:48)

In the base case v is a leaf. We set T [v, 0,∅, u, free] = 0. Then we set T [v, 0,M(cid:48)

Next, we show how to compute the entries of T in a bottom-up manner. In a high level view, we guess
v ∪ R and which part is realized in Fvi ∪ R. For this, we consider every
e. By our dynamic programming table we ﬁnd a

e is realized in F i−1
e2) such that M(cid:48)
e1 (cid:93) M(cid:48)

We now give the details of computing the entries of T in a bottom-up manner. Note that the parameter u
e, u, blocked ] ≥
e, u, to-be-used ]. Below, we describe how to compute the entries of T in a

If no such set PF exists then T [v, i,M(cid:48)
which part of M(cid:48)
tuple (M(cid:48)
e1,M(cid:48)
tuple that maximizes our objective.
is only relevant when b = to-be-used (otherwise, it can just be ignored). Observe that T [v, i,M(cid:48)
T [v, i,M(cid:48)
bottom-up manner.
e is
either empty, consists of a single pair of nodes in R ∩ NG(v), or consists of a single pair where one node is v
and the other one is in R ∩ NG(v). Finally, we set T [v, 0,∅, u, to-be-used ] = 0 if u = v or u is in R ∩ NG(v).
For all other cases where v is a leaf, we set T [v, i,M(cid:48)
that T [v, 1,M(cid:48)
start at a leaf node of Fv1. It also holds that T [v, 1,M(cid:48)
to T [v1, cv,M(cid:48)
is realized in Fvi ∪ R. For this, we consider every tuple (M(cid:48)
of M(cid:48)
we assume that we guessed (M(cid:48)
T [v, i,M(cid:48)

For the inductive step, we consider the two cases i = 1 and i > 1. Let i = 1. It holds
e, u, to-be-used ] since the path in Pe realizing (u, v) has to
e, u, free] are equal
v ∪ R and which part
e1 (cid:93) M(cid:48)
e2 is a partition
e. By our dynamic programming table, we ﬁnd a tuple that maximizes our objective. In the following,
v ∪ R. Hence,
For b = free, node v is not allowed to be visited by any path, especially by any path in F i−1

Now, let i > 1. In a high level view, we guess which part of M(cid:48)
e1,M(cid:48)

e, u, blocked ] and T [v, 1,M(cid:48)
e is realized in F i−1
e2) such that M(cid:48)

e2) correctly. Let us consider the diﬀerent cases of b in more detail.

e, u, to-be-used ] = T [v1, cv,M(cid:48)

e, u, blocked ] = 0 if M(cid:48)

e, u, b] = −∞.

e, u, blocked ].

e1,M(cid:48)

e, u, free] is equal to

e1, u, free] + T [vi, cvi,M(cid:48)
In the case of b = to-be-used , we have to realize (u, v) in F i

T [v, i − 1,M(cid:48)

e2, u, blocked ] .
v ∪ R. For this, there are two possibilities:
v ∪ R, or there is a realizing path that ﬁrst goes through Fvi ∪ R and

Either (u, v) is realized by a path in F i−1
then reaches v via the edge (vi, v). Hence, for the ﬁrst case, we consider

T [v, i − 1,M(cid:48)

e1, u, to-be-used ] + T [vi, cvi,M(cid:48)

e2, u, blocked ],

for the second case, we consider

T [v, i − 1,M(cid:48)

e1, u, free] + T [vi, cvi,M(cid:48)

e2, u, to-be-used ] .

Maximizing over both, we obtain T [v, i,M(cid:48)

e, u, to-be-used ].

For the case of b = blocked , we will consider two subcases. In the ﬁrst subcase, there is no path in Pe ∪PF

going through edge (vi, v), hence, we get
T [v, i − 1,M(cid:48)

e1, u, blocked ] + T [vi, cvi ,M(cid:48)

e2, u, blocked ] .

In the second subcase, there is a path P in Pe ∪ PF going through edge (vi, v). Since P is connecting two
v ∪ R and the other part is in Fvi ∪ R. If P ∈ Pe, then it is realizing a pair
leafs in F i
of M(cid:48)

e. Hence, for every pair (u1, u2) ∈ M(cid:48)

v, a part of P is in F i−1

e, we have to consider the term

T [v, i − 1,M(cid:48)

e1 − (u1, u2), u1, to-be-used ] + T [vi, cvi,M(cid:48)

e2 − (u1, u2), u2, to-be-used ]

11

and the symmetric term where we swap u1 and u2. If P ∈ PF , then it is realizing a terminal pair of MR.
Hence, for every pair (u1, u2) ∈ MR we get the term

1 + T [v, i − 1,M(cid:48)

e1, u1, to-be-used ] + T [vi, cvi ,M(cid:48)

e2, u2, to-be-used ]

and the symmetric term where we swap u1 and u2. Note that we count the path realizing (u1, u2) in our
objective. Maximizing over all the terms of the two subcases, we obtain T [v, i,M(cid:48)
Let us analyze the run time of the algorithm. In order to guess Me, we enumerate all potential sets of
essential pairs. There are at most (2k + r + 1)2r candidate sets to consider, since each pair contains a node in R,
and each node in R is paired with at most two other nodes each of which is either a terminal or another node in R.
For each particular guess Me, we run the above dynamic program. The number of entries in T —as speciﬁed
by the ﬁve parameters v, i, M(cid:48)
v∈V (F ) degF (v))× 22r × (2k + r)× 3.
For the computation of each such entry, we consider all combinations of at most 22r partitions of M(cid:48)
e with
e, or with at most k terminal pairs in MR. Altogether, this gives a run
either at most r essential pairs in M(cid:48)
time of (8k + 8r)2r+2 · O(n). This ﬁnishes the proof of Theorem 3.

e, u and b—for each ﬁxed Me is at most ((cid:80)

e, u, to-be-used ].

6 Parameterized Intractability of MaxNDP for Parameter r

In this section we show that MaxNDP is W[1]-hard parameterized by the size r of a feedback vertex set.
This reduction was originally devised for parameter treedepth, by Ene et al. [15]; here we notice that the
same reduction also works for parameter r. (Both treedepth and feedback vertex set number are restrictions
of treewidth, but they are incomparable to each other.)

ui,1 if i > 1 or xi

v,k−1 and xi

v adjacent to the ﬁrst vertex of X i

v on vertices xi

v,1, xi

v,2, . . . , xi

v,i−1, xi

v,i+1, . . . , xi

v,2 and xi

u1,2 if i = 1), a vertex ti
v, ti
ui,k−1 if i = k), and make (si

For sake of completeness, we include the reduction here, and argue about the feedback vertex set number
of the reduced graph. The reduction is from the W [1]-hard Multicolored Clique problem [16], where
given a graph G, an integer k, and a partition V = V 1 (cid:93) V 2 (cid:93) . . . (cid:93) V k, we are to check if there exists k-clique
in G with exactly one vertex in every set V i. By adding dummy vertices, we can assume that |V i| = n for
every i = 1, . . . , k, and that n, k ≥ 2.
Construction. Given an instance (G, k, (V i)k
equivalent instance (H,M, (cid:96)) of MaxNDP.
a (k − 1)-vertex path X i
vertex ui ∈ Vi. Third, for every v ∈ V i \ {ui}, we add a vertex si
and xi
if i < k or xi
the gadget W i. By Mst we denote the set of terminal pairs constructed in this step.

i=1) of Multicolored Clique, we aim at constructing an
We start with a construction, for every set V i, a gadget W i as follows. First, for every v ∈ V i we construct
v,k. Second, we select an arbitrary
v,1

v adjacent to the last vertex of X i
ui,k
v) a terminal pair. This concludes the description of
To encode adjacencies in G, we proceed as follows. For every pair 1 ≤ i < j ≤ k, we add a vertex pi,j,
u,i for u ∈ Vj. For every edge vu ∈ E(G) with v ∈ Vi
u,i). Let Mx be the set of terminal pairs constructed in this step;

adjacent to all vertices xi
and u ∈ Vj, we add a terminal pair (xi
we have M = Mst ∪ Mx.
instance (H,M, (cid:96)).
From a clique to disjoint paths. Assume that the input Multicolored Clique instance is a “yes”-
instance, and let {vi | i = 1, . . . , k} be a clique in G with vi ∈ V i for i = 1, . . . , k. We construct a family of (cid:96)
vertex-disjoint paths as follows. First, for i = 1, . . . , k and every v ∈ V i \ {ui}, we route a path from si
v to ti
v
through the path X i
ui if v = vi. Note that in this step we have created
k(n − 1) vertex-disjoint paths connecting terminal pairs, and in every gadget W i the only unused vertices
are vertices on the path X i
vj ,i through pi,j; note that the assumption that vivj ∈ E(G) ensures that
the 3-vertex path from xi
(xi

Finally, we set the required number of paths (cid:96) := k(n − 1) +(cid:0)k

(cid:1) paths, for every pair 1 ≤ i < j ≤ k we take

v if v (cid:54)= vi, and through the path X i

vi. To construct the remaining(cid:0)k

(cid:1). This concludes the description of the

v,j for v ∈ Vi and all vertices xj

vi,j, xj

vj ,i) is indeed a terminal pair in M.

v (i.e., xi
v,k and xi

v (i.e., xi

vi,j to xj

v,j, xj

2

2

12

From disjoint paths to a clique. In the other direction, let P be a family of (cid:96) vertex-disjoint paths
connecting terminal pairs in H. Let Pst ⊆ P be the set of paths connecting terminal pairs from Mst,
and similarly deﬁne Px. First, observe that the set P = {pi,j | 1 ≤ i < j ≤ k} separates every terminal

pair from Mx. Hence, every path from Px contains at least one vertex from P . Since |P| =(cid:0)k
|Mx| ≤(cid:0)k
pairs in Mst without using any vertex of P , while Px routes(cid:0)k

(cid:1), we have
(cid:1) = k(n − 1) = |Mst|. We infer that Pst routes all terminal
(cid:1) pairs from Px, and every path from Px

(cid:1), and, consequently, |Pst| ≥ (cid:96) −(cid:0)k

2

2

2

contains exactly one vertex from P .

Since the paths in Pst cannot use any vertex in P , every such path needs to be contained inside one
gadget W i. Furthermore, observe that a shortest path between terminals si
v,a inside W i is either X i
ui
or X i
v, prolonged with the terminals at endpoints, and thus contains k + 1 vertices. Furthermore, a shortest
path between two terminals in Mx contains three vertices. We infer that the total number of vertices on
paths in P is at least

v,a and ti

2

(cid:18)k

(cid:19)

2

(cid:18)k

(cid:19)

2

= |V (H)| .

|Pst| · (k + 1) + |Px| · 3 = k(n − 1)(k + 1) + 3

= k (n(k − 1) + 2(n − 1)) +

|Px| =(cid:0)k

We infer that every path in Pst consists of k + 1 vertices, and every path in Px consists of three vertices. In
particular, for i = 1, . . . , k and v ∈ V i \ {ui}, the path in Pst that connects si
v goes either through X i
ui. Consequently, for i = 1, . . . , k there exists a vertex vi ∈ V i such that the vertices of W i that do not
v
or X i
lie on any path from Pst are exactly the vertices on the path X i
vi .
We claim that {vi | i = 1, . . . , k} is a clique in G. To this end, consider a pair 1 ≤ i < j ≤ k. Since

(cid:1), there exists a path in Px that goes through pi,j. Moreover, this path has exactly three vertices.

Since the only neighbours of pi,j that are not used by paths from Pst are xi
vi,j, xj
(xi
construction.

vj ,i, we infer that
vj ,i) ∈ M and, consequently, vivj ∈ E(G). This concludes the proof of the correctness of the

vi,j and xj

v and ti

2

Bounding the feedback vertex set number. We are left with a proof that H has bounded feedback
vertex set number.
To this end, ﬁrst observe that H − P contains k connected components, being the gadgets W i. Second,
observe that the deletion of the endpoints of the path X i
ui from the gadget W i breaks W i into connected
components being paths on at most k + 1 vertices. Consequently, H has a feedback vertex set R consisting
of P and {xi

ui,k ∈ V (W i) | i = 1, . . . , k}, of size |R| = O(k2). This ﬁnishes the proof of Theorem 4.

ui,1, xi

7 Hardness of Edge-Disjoint Paths in Almost-Forests

In this section we show that EDP (and hence MaxEDP) is NP-hard already in graphs that are almost
forests, namely, in graphs that are forests after deleting two nodes. That is, we prove Theorem 5.

Proof of Theorem 5. We ﬁrst show NP-hardness of EDP for r = 2. We reduce from the problem Edge
3-Coloring in cubic graphs, which is NP-hard [20]. Given a cubic graph H, we construct a complete bipartite
graph G, where one of the two partite classes of V (G) consists of three nodes {v1, v2, v3}, and the other
partite class consists of V (H). As terminal pairs, we create the set M = {(s, t) | {s, t} ∈ E(H)}; in words,
we want to connect a pair of nodes by a path in G if and only if they are connected by an edge in H. This
completes the construction of the instance (G,M) of MaxEDP. Notice that G has a feedback vertex set of
size r = 2, since removing any size-2 subset of {v1, v2, v3} from G yields a forest.
Regarding correctness of the reduction, we show that H is 3-edge-colorable if and only if all pairs in M
can be routed in G.
In the forward direction, suppose that H is 3-edge-colorable. Let ϕ : E(H) → {1, 2, 3} be a proper 3-edge-
coloring of H. For c = 1, 2, 3, let Ec ⊆ E(H) be the set of edges that receive color c under ϕ. Then there is a

13

routing in G that routes all terminal pairs {(s, t) ∈ M | {s, t} ∈ Ec} exclusively via the node vc (and thus via
paths of length 2). Notice that this routing indeed yields edge-disjoint paths, for if there are distinct vertices
s, t1, t2 ∈ V (H) and edges e1 = {s, t1}, e2 = {s, t2} ∈ E(H), then e1, e2 receive distinct colors under ϕ (as ϕ
is proper), and so the two terminal pairs {s, t1},{s, t2} are routed via distinct nodes c1, c2 ∈ {v1, v2, v3}, and
thus also via edge-disjoint paths.
In the backward direction, suppose that all terminal pairs in M can be routed in G. Since H is cubic,
any node s ∈ V (H) is contained in three terminal pairs. Therefore, no path of the routing can have a node
in V (H) as an internal node and thus all paths in the routing have length 2. Then this routing naturally
corresponds to a proper 3-edge-coloring ϕ of H, where any terminal pair {s, t} routed via c means that we
color the edge {s, t} ∈ E(H) with color c under ϕ.

In order two show NP-hardness of MaxEDP for r = 1, we also reduce from Edge 3-Coloring in cubic
graphs and perform a similar construction as described above: This time, we construct a bipartite graph G
with one subset of the partition being {v1, v2}, the other being V (H), and the set M of terminal pairs being
again speciﬁed by the edges of H. This completes the reduction. The resulting graph G has a feedback vertex
set of size r = 1.

We claim that H is 3-colorable if and only if we can route n = |V (H)| pairs in G.
In the forward direction, suppose that H is 3-edge-colorable. Let ϕ : E(H) → {1, 2, 3} be a proper 3-edge-
coloring of H. For c = 1, 2, 3, let Ec ⊆ E(H) be the set of edges that receive color c under ϕ. Then there is a
routing in G that routes all f {(s, t) ∈ M | {s, t} ∈ Ec} exclusively via the node vc (and thus via paths of
length 2) for the colors c = 1, 2. (The terminals corresponding to edges receiving color 3 remain unrouted.)
The reasoning that the resulting routing is feasible is analogous to the case of r = 2. Since for each of
the n terminals exactly two of the three terminal pairs are routed, this means that precisely n terminal pairs
are routed overall.
In the backward direction, suppose that n terminal pairs in M can be routed in G. Since any terminal v
in G is a node in V (H) has therefore has degree two in G, this means that at most two paths can be routed
for v. As n terminal pairs are realized, this also means that exactly two paths are routed for each terminal.
Hence, none of the paths in the routing has length more than two. Otherwise, it would contain an internal
node in V (H), which then could not be part of two other paths in the routing. Then this routing naturally
corresponds to a partial edge-coloring of H, where any terminal pair {s, t} routed via c means that we color
the edge {s, t} ∈ E(H) with color c. Since each terminal v in V (H) is involved in exactly two paths in
the routing, exactly one terminal pair for v remains unrouted. Hence, exactly one edge incident on v in H
remains uncolored in the partial coloring. We color all uncolored edges in H by color 3 to obtain a proper
3-coloring.

Thus, we almost close the complexity gap for EDP with respect to the size of a minimum feedback
vertex set, only leaving the complexity of the case r = 1 open. We conjecture that this case can be solved in
polynomial time.

References

[1] I. Adler, S. G. Kolliopoulos, P. K. Krause, D. Lokshtanov, S. Saurabh, and D. Thilikos. Tight bounds
for linkages in planar graphs. In Proc. ICALP 2011, volume 6755 of Lecture Notes Comput. Sci., pages
110–121, 2011.

[2] M. Andrews, J. Chuzhoy, V. Guruswami, S. Khanna, K. Talwar, and L. Zhang. Inapproximability of
edge-disjoint paths and low congestion routing on undirected graphs. Combinatorica, 30(5):485–520,
2010.

[3] Y. Aumann and Y. Rabani. Improved bounds for all optical routing. In Proc. SODA 1995, pages

567–576, 1995.

14

[4] Y. Aumann and Y. Rabani. An O(log k ) approximate min-cut max-ﬂow theorem and approximation

algorithm. SIAM J. Comput., 27(1):291–301, 1998.

[5] B. Awerbuch, R. Gawlick, T. Leighton, and Y. Rabani. On-line admission control and circuit routing for

high performance computing and communication. In Proc. FOCS 1994, pages 412–423, Nov 1994.

[6] H. L. Bodlaender, S. Thomass´e, and A. Yeo. Kernel bounds for disjoint cycles and disjoint paths. Theoret.

Comput. Sci., 412(35):4570–4578, 2011.

[7] A. Z. Broder, A. M. Frieze, S. Suen, and E. Upfal. Optimal construction of edge-disjoint paths in random

graphs. SIAM J. Comput., 28(2):541–573 (electronic), 1999.

[8] A. Z. Broder, A. M. Frieze, and E. Upfal. Existence and construction of edge-disjoint paths on expander

graphs. SIAM J. Comput., 23(5):976–989, 1994.

√
[9] C. Chekuri, S. Khanna, and F. B. Shepherd. An O(

n) approximation and integrality gap for disjoint

paths and unsplittable ﬂow. Theory Comput., 2:137–146, 2006.

[10] C. Chekuri, S. Khanna, and F. B. Shepherd. A note on multiﬂows and treewidth. Algorithmica,

54(3):400–412, 2009.

[11] C. Chekuri, M. Mydlarz, and F. B. Shepherd. Multicommodity demand ﬂow in a tree and packing

integer programs. ACM Trans. Algorithms, 3(3):Art. 27, 23, 2007.

[12] C. Chekuri, G. Naves, and F. B. Shepherd. Maximum edge-disjoint paths in k-sums of graphs. In Proc.

ICALP 2013, volume 7965 of Lecture Notes Comput. Sci., pages 328–339, 2013.

[13] C. Chekuri, F. B. Shepherd, and C. Weibel. Flow-cut gaps for integer and fractional multiﬂows. J.

Comb. Theory, Ser. B, 103(2):248–273, 2013.

[14] J. Chuzhoy and S. Li. A polylogarithmic approximation algorithm for edge-disjoint paths with congestion

2. In Proc. FOCS 2012, pages 233–242, 2012.

[15] A. Ene, M. Mnich, M. Pilipczuk, and A. Risteski. On routing disjoint paths in bounded treewidth graphs.

http://arxiv.org/abs/1512.01829, 2015.

[16] M. R. Fellows, D. Hermelin, F. Rosamond, and S. Vialette. On the parameterized complexity of

multiple-interval graph problems. Theoret. Comput. Sci., 410(1):53–61, 2009.

[17] A. M. Frieze. Edge-disjoint paths in expander graphs. SIAM J. Comput., 30(6):1790–1801 (electronic),

2001.

[18] N. Garg, V. V. Vazirani, and M. Yannakakis. Primal-dual approximation algorithms for integral ﬂow

and multicut in trees. Algorithmica, 18(1):3–20, 1997.

[19] O. G¨unl¨uk. A new min-cut max-ﬂow ratio for multicommodity ﬂows. SIAM J. Discrete Math., 21(1):1–15,

2007.

[20] I. Holyer. The NP-completeness of edge-coloring. SIAM J. Comput., 10(4):718–720, 1981.

[21] R. M. Karp. Reducibility among combinatorial problems. In Complexity of Computer Computations,

pages 85–103, 1972.

[22] K. Kawarabayashi and P. Wollan. A shorter proof of the graph minor algorithm: the unique linkage

theorem. In Proc. STOC 2010, pages 687–694, 2010.

[23] K.-i. Kawarabayashi and Y. Kobayashi. Breaking O(n1/2)-approximation algorithms for the edge-disjoint

paths problem with congestion two. In Proc. STOC 2011, pages 81–88. 2011.

15

[24] J. Kleinberg and R. Rubinfeld. Short paths in expander graphs. In Proc. FOCS 1996, pages 86–95. 1996.

[25] J. Kleinberg and ´E. Tardos. Disjoint paths in densely embedded graphs. In Proc. FOCS 1995, pages

52–61, Oct 1995.

[26] J. Kleinberg and ´E. Tardos. Approximations for the disjoint paths problem in high-diameter planar

networks. J. Comput. System Sci., 57(1):61–73, 1998.

[27] S. Kolliopoulos and C. Stein. Approximating disjoint-path problems using packing integer programs.

Math. Prog., 99(1):63–87, 2004.

[28] T. Leighton and S. Rao. Multicommodity max-ﬂow min-cut theorems and their use in designing

approximation algorithms. J. ACM, 46(6):787–832, 1999.

[29] N. Linial, E. London, and Y. Rabinovich. The geometry of graphs and some of its algorithmic applications.

Combinatorica, 15(2):215–245, 1995.

[30] T. Nishizeki, J. Vygen, and X. Zhou. The edge-disjoint paths problem is NP-complete for series-parallel

graphs. Discrete Appl. Math., 115(1-3):177–186, 2001.

[31] P. Raghavan and C. D. Tompson. Randomized rounding: A technique for provably good algorithms and

algorithmic proofs. Combinatorica, 7(4):365–374.

[32] S. Rao and S. Zhou. Edge disjoint paths in moderately connected graphs. SIAM J. Comput., 39(5):1856–

1887, 2010.

[33] N. Robertson and P. D. Seymour. Graph minors. XIII. The disjoint paths problem. J. Combin. Theory

Ser. B, 63(1):65–110, 1995.

[34] P. Scheﬄer. A practical linear time algorithm for disjoint paths in graphs with bounded tree-width.

Technical Report TR 396/1994, FU Berlin, Fachbereich 3 Mathematik, 1994.

[35] L. S´eguin-Charbonneau and F. B. Shepherd. Maximum edge-disjoint paths in planar graphs with

congestion 2. In Proc. FOCS 2011, pages 200–209. 2011.

16

