6
1
0
2

 
r
a

M
2

 

 
 
]

C
C
.
s
c
[
 
 

2
v
2
8
0
0
0

.

3
0
6
1
:
v
i
X
r
a

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT

SATISFACTION

MICHAEL KOMPATSCHER AND TRUNG VAN PHAM

Abstract. In this paper we determine the complexity of a broad class of problems that
extends the temporal constraint satisfaction problems in [BK10]. To be more precise we
study the problems Poset-SAT(Φ), where Φ is a given set of quantiﬁer-free ≤-formulas.
An instance of Poset-SAT(Φ) consists of ﬁnitely many variables x1, . . . , xn and formulas
φi(xi1 , . . . , xik ) with φi ∈ Φ; the question is whether this input is satisﬁed by any partial
order on x1, . . . , xn or not. We show that every such problem is NP-complete or can be
solved in polynomial time, depending on Φ.

All Poset-SAT problems can be formalized as constraint satisfaction problems on reducts
of the random partial order. We use model-theoretic concepts and techniques from universal
algebra to study these reducts. In the course of this analysis we establish a dichotomy that
we believe is of independent interest in universal algebra and model theory.

Contents

1.
Introduction
2. Preliminaries
2.1. Poset-SAT(Φ)
2.2. Poset-SAT(Φ) as CSP
3. The universal-algebraic approach
3.1. Primitive positive deﬁnability
3.2. Polymorphism clones
3.3. Structural Ramsey theory
3.4. Model-complete cores
3.5. Primitive positive interpretations
4. A pre-classiﬁcation by model-complete cores
5. The case where < and ⊥ are pp-deﬁnable
5.1. Horn tractable CSPs given by e< and e≤
5.2. Canonical binary functions on (P ; ≤, ≺)
6. The NP-hardness of Low
7. Violating the Low relation
7.1.
7.2.
8. The NP-hardness of Betw, Sep and Cycl

f (a, a) < f (b, c) ∧ f (a, a) < f (c, b)
f (a, a)⊥f (b, c) ∧ f (a, a)⊥f (c, b)

2
3
3
4
5
6
6
7
8
8
9
16
16
17
20
22
22
24
25

Date: March 3, 2016.
2010 Mathematics Subject Classiﬁcation. primary 08A70, 03C05, 03C40; secondary 06A07, 08A35.
The ﬁrst author has been funded through projects P27600 and I836-N26 of the Austrian Science Fund
(FWF). The second author has received funding from the European Research Council under the European
Community’s Seventh Framework Programme (FP7/2007-2013 Grant Agreement no. 257039) and the project
P27600 of the Austrian Science Fund (FWF).

1

2

M. KOMPATSCHER AND T. VAN PHAM

9. Main Results
9.1. An algebraic dichotomy
9.2. A complexity dichotomy
References

27
27
29
29

1. Introduction

Reasoning about temporal knowledge is a common task in various areas of computer science,
for example Artiﬁcial Intelligence, Scheduling, Computational Linguistics and Operations
Research. In many application temporal constraints are expressed as collections of relations
between time points or time intervals. A typical computational problem is then to determine
whether such a collection is satisﬁable or not.

A lot of research in this area concerns only linear models of time. In particular there exists
a complete classiﬁcation of all satisﬁability problems for linear temporal constraints in [BK10].
However, it has been observed many times that more complex time models are helpful, for
instance in the analysis of concurrent and distributed systems or certain planning domains.
A possible generalizations is to model time by partial orders (e.g. in [Lam86], [Ang89]).

Some cases of the arising satisﬁability problems have already been studied in [BJ03]. We
will give a complete classiﬁcation in this paper. Speaking more formally, let Φ be a set
of quantiﬁer-free formulas in the language consisting of a binary relation symbol ≤. Then
Poset-SAT(Φ) asks if constraint expressible in Φ are satisﬁable by a partial order or not.
We are going to give a full complexity classiﬁcation of problems of the type Poset-SAT(Φ).
In particular we are going to show that every such problem is NP-complete or solvable in
polynomial time.

The proof of our result is based on a variety of methods and results. A ﬁrst step is that
we give a description of every Poset-SAT problem as constraint satisfaction problem over a
countably inﬁnite domain, where the constraint relations are ﬁrst-order deﬁnable over the
random partial order, a well-known structure in model theory.

A helpful result has already been established in the form of the classiﬁcation of the closed
supergroups of the automorphism group of the random partial order in [PPP+14]. We extend
this analysis to closed transformation monoids. Informally, then our result implies that we can
identify three types of Poset-SAT problems: (1) trivial ones (i.e., if there is a solution, there
is a constant solution), (2) problems that can be reduced to the problems studied in [BK10]
and (3) CSPs on templates that are model-complete cores.

So we only have to study problems in the third class. The basic method to proceed then
is the universal-algebraic approach to constraint satisfaction problems. Here, one studies
certain sets of operations (known as polymorphism clones) instead of analysing the constraints
themselves. An important tool to deal with polymorphisms over inﬁnite domains is Ramsey
theory. We need a Ramsey result for partially ordered sets from [PTJW85] for proving that
polymorphisms behave regularly on large parts of their domain. This allows us to perform a
more simpliﬁed combinatorial analysis.

This paper has the following structure: In Section 2 we introduce some basic notation and
show how every Poset-SAT problem is equal to a constraint satisfaction problem on a reduct of
the random partial order. In Section 3 we give a brief introduction to the universal-algebraic
approach and the methods from Ramsey theory that we need for our classiﬁcation. Section 4
contains a preclassiﬁcation, by the analysis of closed transformation monoids containing the

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

3

automorphism group of the random partial order. This is followed by the actual complexity
analysis using the universal algebraic approach. In Section 9 we summarize our results to
show the complexity dichotomy for Poset-SAT problems.

We further show in Section 9 that an even stronger dichotomy holds, regarding the question
whether certain reducts of the random partial order allow pp-interpretations of all ﬁnite
structures or not (cf. the discussion in [BP15b] and [PB16]). In this respect the situation is
similar to previous classiﬁcations for CSPs where the constraints are ﬁrst-order deﬁnable over
the rational order [BK10], the random graph [BP15a], or the homogeneous binary branching
C-relation [MBP15].

2. Preliminaries

In this section we ﬁx some standard terminology and notation. When working with rela-
tional structures it is often convenient not to distinguish between a relation and its relational
symbol. We will also do so on several occasions, but this should never cause any confusion.
Let ≤ always denote a partial order relation, i.e. a binary relation that is reﬂexive, anti-
symmetric and transitive. Let < be the corresponding strict order deﬁned by x ≤ y ∧ x 6= y.
Let x⊥y denote the incomparability relation deﬁned by ¬(x ≤ y) ∧ ¬(y ≤ x). Sometimes we
will write x < y1 · · · yn for the conjunction of the formulas x < yi for all 1 ≤ i ≤ n. Similarly
we will use x⊥y1 · · · yn if x⊥yi holds for all 1 ≤ i ≤ n.

2.1. Poset-SAT(Φ). Let φ(x1, . . . , xn) be a formula in the language that only consists of
the binary relation symbol ≤. Then we say that φ(x1, . . . , xn) is satisﬁable if there exists a
partial order (A; ≤) with elements a1, . . . , an such that φ(a1, . . . , an) holds in (A; ≤). In this
case we call (A; ≤) a solution to φ.

Let Φ = {φ1, φ2, . . . , φk} be a ﬁnite set of quantiﬁer free ≤-formulas. Then the poset sat-

isﬁability problem Poset-SAT(Φ) is the following computational problem:

Poset-SAT(Φ):
Instance: A ﬁnite set of variables {x1, . . . , xn} and a ﬁnite set of formulas Ψ that is obtained
from φ ∈ Φ, by substituting the variables of φ by variables from {x1, . . . , xn}
Question: Is there a partial order (A; ≤) that is a solution to all formulas in Ψ?

Example 1: An instance of Poset-SAT({<}) is given by variables in {x1, . . . , xn} and formulas
in Ψ of the form xi < xj. The question is, if there is partial order on {x1, . . . , xn} that satisﬁes
all formulas xi < xj in Ψ. It is easy to see that such a partial order always exists if Ψ does
not contain formulas xi1 < xi2 , . . ., xin−1 < xin, xin < xi1. The existence of such “cycles” in
Ψ can be veriﬁed in polynomial time, thus Poset-SAT({<}) is tractable.
Every partial order can be extended to a total order. Therefore there is a solution to I if and
only if there is a totally ordered solution to I. So Poset-SAT({<}) is the same problem as the
corresponding temporal constraint satisfaction problem Temp-SAT({<}), i.e. the question if
there is a total order that is a solution to the input.

Example 2: We deﬁne the betweenness relation Betw(x, y, z) := (x < y ∧ y < z) ∨ (z < y ∧ y <
x). Again an instance of Poset-SAT({Betw}) is accepted if and only if it is accepted by Temp-
SAT({Betw}). It is know that Temp-SAT({Betw}) is NP-complete, so Poset-SAT({Betw})
is NP-complete. We remark that if every relation in Φ is positively deﬁnable in < that then
Poset-SAT(Φ) is the same problem as Temp-SAT(Φ). All temporal constraint satisfaction

4

M. KOMPATSCHER AND T. VAN PHAM

problems are classiﬁed in [BK10].

Example 3: Let every formula φ(x1, . . . , xn) in Φ be a ≤-Horn formula, that is a formula of
the form

xi1 ≤ xj1 ∧ xi2 ≤ xj2 ∧ · · · ∧ xik ≤ xjk → xik+1 ≤ xjk+1 or
xi1 ≤ xj1 ∧ xi2 ≤ xj2 ∧ · · · ∧ xik ≤ xjk → ’false’

All problems of this “Horn-type” are tractable. One can see this by giving an algorithm based
on the resolution rule. We discuss this class of tractable problems in Section 5.1.

Example 4: We deﬁne Cycl(x, y, z) by

Cycl(x, y, z) :=(x < y ∧ y < z) ∨ (z < x ∧ x < y) ∨ (y < z ∧ z < x)∨

(x < y ∧ x⊥z ∧ y⊥z) ∨ (y < z ∧ x⊥y ∧ x⊥z) ∨ (z < x ∧ y⊥z ∧ y⊥x).

We will see in Section 8 that Poset-SAT({Cycl}) is an NP-complete problem.

Every problem Poset-SAT(Φ) is clearly in NP. We can “guess” a partial order on the
variables x1, . . . , xn and then checks in polynomial time if this partial order is a solution to
the input formulas in Ψ or not. The main result of this paper is to give a full classiﬁcation of
the computational complexity, showing the following dichotomy:

Theorem 1. Let Φ be a ﬁnite set of quantiﬁer-free ≤-formulas. The problem Poset-SAT(Φ)
is in P or NP-complete.

2.2. Poset-SAT(Φ) as CSP. In this section we are going to show that every Poset-SAT
problem can be translated into a constraint satisfaction problem or CSP over an inﬁnite do-
main. This reformulation will allow us the use of universal-algebraic and Ramsey-theoretical
methods.

i ⊂ Dki

1 , RΓ

Let Γ be a relational structure with signature τ = {R1, R2, . . .}, i.e. Γ = (D; RΓ

2 , . . .)
where D is the domain of Γ and RΓ
is a relation of arity ki over D. When ∆
and Γ are two τ -structures, then a homomorphism from ∆ to Γ is a mapping h from the
domain of ∆ to the domain of Γ such that for all R ∈ τ and for all (x1, . . . , xj) ∈ R∆
we have h(x1, . . . , xj) ∈ RΓ. Injective homomorphisms that also preserve the complement
of each relation are called embeddings. Bijective embeddings from ∆ onto itself are called
automorphisms of ∆.

Suppose that the signature τ of Γ is ﬁnite. Then the constraint satisfaction problem CSP(Γ)

is the following decision problem:

CSP(Γ):
Instance: A ﬁnite τ -structure ∆
Question: Is there a homomorphism from ∆ to Γ?

We say that Γ is the template of the constraint satisfaction problem CSP(Γ).

We now need some terminology from model theory. Let ∆ be a structure with domain D.
We say a relation R ⊂ Dn is deﬁnable in ∆, if there is a ﬁrst order formula φ in the signature
of ∆ with free variables (x1, . . . , xn) such that (a1, . . . , an) ∈ R if and only if φ(a1, . . . , an)

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

5

holds in ∆. A relational structure Γ with the same domain as ∆ is called a reduct of ∆ if all
relations of Γ are deﬁnable in ∆.

A structure is called homogeneous if every isomorphism between ﬁnitely generated sub-

structures can be extended to an automorphism of the whole structure.

Let C be a class of relational structures of the same signature. We say C has the amal-
gamation property if for every A, B, C ∈ C and all embeddings u : A → B and v : A → C
there is a D ∈ C with embeddings u′ : B → D, v′ : C → D such that u′ ◦ u = v′ ◦ v. A class
C is called an amalgamation class if it has the amalgamation property and is closed under
isomorphism and taking induced substructures.

Theorem 2 (Fra¨ıss´e, see Theorem 7.1.2 in [Hod97]). Let C be an amalgamation class that
has only countably many non-isomorphic members. Then there is a countable homogeneous
structure Γ such that C is the age of Γ, i.e. the class of all structures that embeds into Γ. The
structure Γ, which is unique up to isomorphism, is called the Fra¨ıss´e limit of Γ.
(cid:3)

Since the class of all ﬁnite partial orders forms an amalgamation class, it has a Fra¨ıss´e limit
which is called the random partial order or random poset P = (P ; ≤). The random poset is
a well-studied object in model theory that has a lot of helpful properties. As a homogenous
structure in a ﬁnite relational language P has quantiﬁer-elimination, i.e. every formula in P
is equivalent to a quantiﬁer-free formula. Also it is ω-categorical, i.e. all countable structures
that satisfy the same ﬁrst order formulas as P are isomorphic to P. Reducts of ω-categorical
structures are ω-categorical as well. Therefore P and all of its reducts are ω-categorical. For
further model-theoretic background on ω-categorical and homogeneous structures we refer
to [Hod97].

Now let Φ = {φ1, . . . , φn} be a ﬁnite set of quantiﬁer free ≤-formulas. We associate with Φ
the τ -structure PΦ = (P ; R1, . . . , Rn) that we obtain by setting (a1, . . . , ak) ∈ Ri if and only
if φi(a1, . . . , ak) holds in P. We claim that CSP(ΓΦ) and Poset-SAT(Φ) are essentially the
same problem. Let Ψ be an instance of Poset-SAT(Φ) with the variables x1, . . . , xn. Then we
deﬁne a structure ∆Ψ with domain {x1, . . . , xn} as follows: The relation R∆
i contains the tuple
(xi1 , . . . , xiki
). It is quite
straightforward to see that Ψ is accepted by Poset-SAT(Φ) if and only if ∆Ψ homomorphically
maps to PΦ.

) if and only if the instance Ψ contains the formula φi(xi1 , . . . , xiki

Conversely let Γ = (P ; R1, . . . , Rn) be a reduct of P. Since P has quantiﬁer-elimination,
every relation Ri in Γ has a quantiﬁer-free deﬁnition φi in P. With that in mind, we study
the problem Poset-SAT({φ1, . . . , φn}). Let ∆ be an instance of CSP(Γ). Then let Ψ∆ be an
instance of Poset-SAT(Φ) where the variables are the points in ∆ and φi(x1, . . . , xk) ∈ Ψ if
and only if (x1, . . . , xk) ∈ R∆
i . Then ∆ is accepted by CSP(Γ) if and only if Ψ∆ is accepted
by Poset-SAT(Φ).

So by the observations in the paragraphs above the following holds:

Theorem 3. The problems of the form Poset-SAT(Φ) correspond precisely to the problems
of the form CSP(Γ), where Γ is a reduct of the random partial order P.
(cid:3)

3. The universal-algebraic approach

We apply the so-called universal-algebraic approach to obtain our complexity results. Using
the language of universal algebra we can elegantly describe the border between tractability
and NP-hardness for CSPs on reducts of the random poset. In this section we give a brief

6

M. KOMPATSCHER AND T. VAN PHAM

introduction to this approach. For a more detailed introduction we refer to [Bod12] as well
as the shorter [Pin15].

3.1. Primitive positive deﬁnability. A ﬁrst-order formula φ(x1, . . . , xn) in the language
τ is called primitive positive if it is of the form ∃y1, . . . , yk (ψ1 ∧ · · · ∧ ψm) where ψ1, . . . , ψm
are atomic τ -formulas with free variables from the set {x1, . . . , xn, y1, . . . , yk}.

Let Γ be a τ -structure. We then say a relation R is is primitively positive deﬁnable or pp-
deﬁnable in Γ if there is a primitive positive formula φ(x1, . . . , xn) such that (a1, . . . , an) ∈ R
if and only if φ(a1, . . . , an) holds in Γ.

Lemma 1. (Jeavons [Jea98]) Let Γ be a relational structure in ﬁnite language, and let Γ′ be
the structure obtained from Γ by adding a relation R. If R is primitive positive deﬁnable in
Γ, then CSP(Γ) and CSP(Γ′) are polynomial-time equivalent.
(cid:3)

By hΓipp we denote the set of all primitively positive deﬁnable relations on Γ. So for
two structures Γ and ∆ the problems CSP(Γ) and CSP(∆) have the same complexity if
hΓipp = h∆ipp. This means that in our analysis we only have to study reduct of the random
poset up to primitive positive deﬁnability.

3.2. Polymorphism clones. Let Γ be a relational structure with domain D. By Γn we
denote the direct product of n-copies of Γ. This is, we take a structure on Dn with same
signature Γ. Then for n-tuples ¯x(1), . . . , ¯x(k) we set that (¯x(1), . . . , ¯x(k)) ∈ R if and only if
(x(1)

) ∈ R holds in Γ for every coordinate i ∈ [n].

, . . . x(k)

i

i
Then an n-ary operation f is called a polymorphism of Γ if f is a homomorphism from Γn
to Γ. Unary polymorphisms are called endomorphisms. For every relation R on D we say f
preserves R if f is a polymorphism of (D; R). Otherwise we say f violates R.

For a given structure Γ the set of all polymorphisms Pol(Γ) contains all the projections
πn
i (x1, . . . , xn) = xi and is closed under composition. Every set of operation with these
properties is called a clone or function clone (cf. [Sze86]). Pol(Γ) is called the polymorphism
clone of Γ. We write Pol(Γ)(k) for the set of k-ary functions in Pol(Γ). We write End(Γ) for
the monoid consisting of all endomorphisms of Γ.
The clone Pol(Γ) is furthermore locally closed in the following sense: Let k > 1 be arbitrary
and f a k-ary operation on D. If for every ﬁnite subset A ⊆ Dk there is a g ∈ Pol(Γ) with
g ↾ A = f ↾ A then also f ∈ Pol(Γ).

For a set of operation F on D being locally closed is equal to be closed in the topology of
pointwise convergence. We write F for smallest locally closed set containing F . We say a set
of operation F generates an operation g if g is in the smallest locally closed clone containing
F .

It is of central importance to us that primitive positive deﬁnability in ω-categorical (and

ﬁnite) structures can be characterized by preservation under polymorphisms:

Theorem 4 (Bodirsky, Neˇsetˇril [BN06]). Let Γ be an ω-categorical structure. Then a relation
is pp-deﬁnable in Γ, if and only if it is preserved by the polymorphisms of Γ.

Thus, by Lemma 1 the complexity of CSP(Γ) only depend on the polymorphism clone

Pol(Γ) for ω-categorical Γ.

We also need the fact that a relation is not deﬁnable in Γ can be described by polymorphisms

of bounded arity.

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

7

Theorem 5 (Bodirsky, Kara [BK10]). Let Γ be a relational structure and let R be a k-ary
relation that is a union of at most m orbits of Aut(Γ) on Dk. If Γ has a polymorphism f that
violates R, then Γ also has an at most m-ary polymorphism that violates R.
(cid:3)

3.3. Structural Ramsey theory. We apply Ramsey theory to analyse certain regular be-
haviour of polymorphisms. This approach has been proven to be useful in several other papers
(e.g. [BK10], [BP15a], [MBP15]). We only give a brief introduction how Ramsey theory helps
us to study polymorphism clones, a detailed introduction can be found in [BP11].

substructures of ∆ that are isomorphic to Γ. We write Θ → (∆)Γ

Let Γ and ∆ be two ﬁnite structures of the same signature. Then (cid:0)∆
Γ(cid:1) → [k] there is an isomorphic copy ∆′ of ∆ such that κ is monochromatic on (cid:0)∆′
κ :(cid:0)Θ
Γ(cid:1).

Let C be a category of structures with the same signature that is closed under taking
isomorphic copies and substructures. Then C is said to be a Ramsey class if for every k ≥ 1
and every Γ, ∆ ∈ C there is a Θ ∈ C such that Θ → (∆)Γ
k .

Γ(cid:1) denotes all the

k if for every coloring

A homogeneous structure is said to be a homogeneous Ramsey structure if its age is a

Ramsey class. A structure is called ordered, if it contains a total order relation.

If we look at the class of all structures (A; ≤, ≺), where ≺ is a linear order that extends ≤,
it has the Ramsey property and the amalgamation property (see [PTJW85]). Therefore its
Fra¨ıss´e limit (P ; ≤, ≺) is an ordered homogeneous Ramsey structure.

Deﬁnition 1. Let Γ and ∆ be two structures and f an n-ary operation from the domain of
Γ to the domain of ∆. Let A be a subset of Γ. Then f is called canonical on A, if for every
integer s ≥ 1, all automorphisms α1, . . . , αn ∈ Aut(Γ) and tuples d1, . . . , dn ∈ As there is an
automorphism β ∈ Aut(∆) such that

If f is canonical on the domain of Γ, we say that f is canonical.

f (α1(d1), . . . , αn(dn)) = β(f (d1, . . . , dn)).

We remark that sometimes canonical functions are also deﬁned as functions that preserve
model-theoretic types. However, by the theorem of Ryll-Nardzewski, Engeler and Svenonius
(confer [Hod97]), the s-types of a countable ω-categorical structure Γ are exactly the orbits of
s-tuples under the action of Aut(Γ). Therefore the model theoretical deﬁnition is equivalent
to the one we gave above, for ω-categorical Γ and ∆. For this reason we are also going to use
(s-)orbit and (s-)type synonymously.

Now Ramsey structures allows us to generate functions that are canonical on arbitrary

large ﬁnite substructures of Γ in the following sense:

Theorem 6 (Lemma 19 in [BP11]). Let Γ be an ordered homogeneous Ramsey structure with
domain D and let f : Dl → D. Then for every ﬁnite subset A of Γ there are automorphisms
α1, . . . , αl ∈ Aut(Γ) such that f ◦ (α1, . . . , αl) is canonical on Al.
(cid:3)

We can reﬁne this statement by additionally ﬁxing constants. Let c1, . . . , cn be elements
of the domain of Γ. Then (Γ, c1, . . . , cn) denotes the structure that we obtain by extending Γ
by the unary relations {c1}, . . . , {cn}.

Theorem 7 (Lemma 27 in [BP11]). Let Γ be an ordered homogeneous Ramsey structure
with domain D. Let c1, . . . , cn ∈ D and f : Dl → D. Then {f } ∪ Aut(Γ, c1, . . . , cn)
generates a function g that is canonical as operation from (Γ, c1, . . . , cn) to Γ and satisﬁes
f ↾ {c1, . . . , cn} = g ↾ {c1, . . . , cn}.
(cid:3)

8

M. KOMPATSCHER AND T. VAN PHAM

By the behaviour of a canonical function f : ∆ → Λ we denote the set of all tuples (p, q)
where p is an s-type of ∆, q is a s-type of Λ and for for every tuple ¯a of type p the image f (¯a)
has type q in Λ. So we can regard the behaviour of a canonical function as a function from
the types of ∆ to the types of Λ. Let A be a subset of the domain of ∆. We call the behaviour
of f ↾ A the behaviour of f on A. We say a function f : ∆ → Λ behaves like g : ∆ → Λ (on
A) if their behaviour (on A) is equal.

3.4. Model-complete cores. Let ∆ and Γ be to structures with the same signature. We
say ∆ is homomorphically equivalent to Γ if there is a homomorphisms from ∆ to Γ and a
homomorphism from Γ to ∆. By deﬁnition, the constraint satisfaction problems CSP(∆) and
CSP(Γ) encode the same computational problem for homomorphically equivalent structures
∆ and Γ. By homomorphic equivalence we can ﬁnd for every CSP a template with some nice
model-theoretical properties.

A structure ∆ is called a core if every endomorphism e of ∆ is a self embedding. A structure
is called model-complete if every formula in its ﬁrst order theory is equivalent to an existential
formula. Note that endomorphisms preserve existential positive formulas, and embeddings
preserve existential formulas. In the case of ω-categorical structures also the opposite holds.
Therefore we have:

Lemma 2 (Lemma 13 in [BP14]). A countable ω-categorical structure Γ is a model-complete
core if and only if the endomorphism monoid of Γ is generated by Aut(Γ). In this case, every
deﬁnable relation in Γ is also deﬁnable by existential positive formulas.
(cid:3)

Now every CSP with ω-categorical template can be reformulated as a CSP on a template

with model-complete core by the following theorem:

Theorem 8 (Theorem 16 from [Bod05]). Every ω-categorical structure Γ is homomorphically
equivalent to a model-complete core which is unique up to isomorphism. This core is ω-
categorical or ﬁnite.
(cid:3)

So an important step in analyzing the complexity of CSP(Γ) is to identify the model-
complete core of Γ. By the following theorem of Bodirsky the complexity of the CSP of a
core does not increase if we add ﬁnitely many constants.

Theorem 9 (Theorem 19 from [Bod05]). Let Γ be a model-complete ω-categorical or ﬁnite
core, and let c be an element of Γ. Then CSP(Γ) and CSP(Γ, c) have the same complexity,
up to polynomial time.
(cid:3)

3.5. Primitive positive interpretations. A tool to compare the complexity of CSPs of
structures ∆ and Γ of possibly diﬀerent domains and signatures are interpretations. We say
∆ is pp-interpretable in Γ if there is a n ≥ 1 and a partial map I : Γn → ∆ such that

• I is surjective,
• the domain of I is pp-deﬁnable in Γ,
• the preimage of the equality relation in ∆ is pp-deﬁnable in Γ,
• the preimage of every relation in ∆ is pp-deﬁnable in Γ.

Then the following result holds:

Lemma 3 (Theorem 5.5.6 in [Bod12]). If ∆ is pp-interpretable in Γ then CSP(∆) can be
reduced to CSP(Γ) in polynomial time.

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

9

The positive-1-in-3-SAT problem is a well-studied problem in literature that is known to be

NP-complete [Sch78]. It can be written as CSP({0, 1}; 1IN3) with 1IN3 := {(1, 0, 0), (0, 1, 0), (0, 0, 1)}.
In practice we often show the NP-completeness of CSP(Γ) by ﬁnding a pp-interpretation of
({0, 1}; 1IN3) in Γ.

As pp-deﬁnability, also pp-interpretation can be translated into the language of clones. A

clone homomorphism ξ : Pol(Γ) → Pol(∆) is a map that preserves arities such that

i ) = πn
i

• ξ(πn
• ξ(f ◦ (g1, . . . , gn)) = ξ(f ) ◦ (ξ(g1), . . . , ξ(gn)).

for all projections,

For ω-categorical or ﬁnite structures ∆ and Γ it is known that ∆ is pp-interpretable in Γ if
and only if there exists a continuous clone homomorphism from Pol(Γ) onto Pol(∆).

Theorem 10 (Bodirsky, Pinsker [BP15b]). Let Γ be ﬁnite or ω-categorical and ∆ be ﬁnite.
Then Γ has a primitive positive interpretation in ∆ if and only if Pol(Γ) has a continuous
clone homomorphism to Pol(∆).
(cid:3)

The polymorphism clone of ({0, 1}; 1IN3) consist only of the projections πn

i on the two
element set {0, 1}. We call it the projection clone 1. So ({0, 1}; 1IN3) has a pp-interpretation
in the ω-categorical structure Γ if and only if there is a continuous clone homomorphism
ξ : Pol(Γ) → 1. By Theorem 10 then every ﬁnite structure ∆ has a pp-interpretation in Γ,
since it is easy to see that there is always a continuous clone homomorphism from 1 to Pol(∆).

We summarize that for ﬁnite or ω-categorical and ﬁnite structures ∆ and Γ the complexity

of CSP(∆) reduces to CSP(Γ) in the following cases:

(1) ∆ is pp-interpretable in Γ.
(2) ∆ is the model-complete core of Γ.
(3) Γ is a model-complete core and ∆ is obtained by adding ﬁnitely many constants to

the signature of Γ.

By some recent results of Barto, Pinsker we can also express this fact nicely by polymor-

phism clones.

Theorem 11 (Theorem 1.4 in [PB16]). Let Γ be ﬁnite or ω-categorical and let ∆ be its
model-complete core. Then the following are equivalent:

(1) Every ﬁnite structure has a pp-interpretation in some extension of ∆ by ﬁnitely many

constants.

(2) There is a continuous clone homomorphism Pol(∆, c1, . . . , cn) → 1 for some constants

c1, . . . , cn ∈ ∆.

(3) There is a clone homomorphism Pol(∆, c1, . . . , cn) → 1 for some c1, . . . , cn ∈ ∆.
(4) Pol(∆) contains no pseudo-Siggers operation, i.e. a 6-ary operations s such that

αs(x, y, x, z, y, z) = βs(y, x, z, x, z, y)

for some unary α, β ∈ Pol(∆).

(cid:3)

Note that (4) shows that the question whether ({0, 1}; 1IN3) is pp-interpretable in any

(∆, c1, . . . , cn) only depends on algebraic but not the topological properties of Pol(∆).

4. A pre-classification by model-complete cores

In this section we start our analysis of reducts of the random partial order P = (P ; ≤). Our
aim is to determine the model-complete core for every reduct Γ of P. Therefore we are going

10

M. KOMPATSCHER AND T. VAN PHAM

to study all possible endomorphism monoids End(Γ) ⊇ Aut(P). Part of the work was already
done in [PPP+14] where all the automorphism groups Aut(Γ) ⊇ Aut(P) were determined.
Several parts of our proof are very similar to the group case; at that points we are going to
directly refer to the corresponding proofs of [PPP+14].

If we turn the partial order P upside-down, then the obtained partial order is again iso-
morphic to P. Hence there exists a bijection l: P → P such that for all x, y ∈ P we have
x < y if and only if l (y) < l (x). By the homogeneity of P it is easy to see that the monoid
generated by l and Aut(P) does not depend on the choice of the function l.

The class of all ﬁnite structures (A; ≤, F ), where (A; ≤) is a partial order and F is upwards
closed set is an amalgamation class. Its Fra¨ıss´e limit is isomorphic to P with an additional
unary relation F . We say F is a random ﬁlter on P. Note that F and I = P \ F are both
isomorphic to the random partial order. Furthermore for every pair x ∈ I and y ∈ F either
x < y or x⊥y holds.

We deﬁne a new order relation <F on by setting x <F y if and only if

• x, y ∈ F and x < y or,
• x, y ∈ I and x < y or,
• x ∈ I, y ∈ F and x⊥y.

It is shown in [PPP+14] that the resulting structure (P ; <F ) is isomorphic to (P, <). We
ﬁx a map (cid:8)F : P → P that maps (P ; <) isomorphically to (P, <F ). By the homogeneity of P
one can see that the smallest closed monoid generated by (cid:8) and Aut(P) does not depend on
the choice of the random ﬁlter F . We ﬁx a random ﬁlter F and set (cid:8):=(cid:8)F .

For B ⊆ Sym(P ), let hBi denote the smallest closed subgroup of Sym(P ) containing B.
For brevity, when it is clear we are discussing supergroups of Aut(P), we may abuse notation
and write hBi to mean hB ∪ Aut(P)i.

Theorem 12 (Theorem 1 from [PPP+14]). Let Γ be a reduct of P. Then Aut(Γ) ⊇ Aut(P)
is equal to one of the ﬁve groups Aut(P), hli, h(cid:8)i, hl, (cid:8)i or Sym(P ).
(cid:3)

We are going to show the following extension of Theorem 12:

Theorem 13. Let Γ be a reduct of P. Then for End(Γ) at least one of the following cases
applies:

(1) End(Γ) contains a constant function,
(2) End(Γ) contains a function g< that preserves < and maps P onto a chain,
(3) End(Γ) contains a function g⊥ that preserves ⊥ and maps P onto an antichain,
(4) The automorphism group Aut(Γ) is dense in End(Γ), i.e. Γ is a model-complete core.
So by the classiﬁcation in Theorem 12, End(Γ) is the topological closure of Aut(P),
hli, h(cid:8)i, hl, (cid:8)i or Sym(P ) in the space of all functions P P .

Before we start with the proof Theorem 13 we want to point out its relevance for the

complexity analysis of the CSPs on reducts of P.

Constraint satisfaction problems on reducts of (Q; <) are called temporal satisfaction prob-
lems. The CSPs on reducts of a countable set with a predicate for equality (ω; =) are
called equality satisfaction problems. For both classes a full complexity dichotomy is known,
see [BK10] and [BK08]. As a corollary of Theorem 13 we get the following pre-classiﬁcation
of CSPs reducing all the cases where Γ is not a model-complete core to temporal or equality
satisfaction problems:

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

11

Corollary 1. Let Γ be a reduct of P. Then one of the following holds

(1) CSP(Γ) is trivial;
(2) The model-complete core of Γ is a reduct of (ω; =),

so CSP(Γ) is equal to an equality satisfaction problem;

(3) The model-complete core of Γ is a reduct of (Q; <),

so CSP(Γ) is equal to a temporal satisfaction problem;

(4) End(Γ) is the topological closure of Aut(P), hli, h(cid:8)i or hl, (cid:8)i.

Proof. If there is a constant function in End(Γ), then CSP(Γ) accepts every instance, so we
are in the ﬁrst case. So let End(Γ) contain no constants.

Assume that g⊥ ∈ End(Γ). Since g⊥ preserves ⊥, the image of (P ; ⊥) under g⊥ is isomorphic
to a countable antichain, or in other word, a countable set ω with a predicate for inequality
(ω; 6=). Thus, for every reduct of Γ the image g⊥(Γ) can be seen as a reduct of (ω; 6=). Now
clearly Γ and g⊥(Γ) are homomorphically equivalent. It is shown in [BK08] that every reduct
of (ω; 6=) without constant endomorphisms is a model-complete core. So we are in the second
case.

Now assume that g< ∈ End(Γ) but g⊥ 6∈ End(Γ). Since g< preserves < and is a chain,
the image of (P ; <) under g< has to be isomorphic to the rational order (Q; <). Thus for
every reduct of Γ the image g<(Γ) can be seen as a reduct of Q. Now clearly Γ and g<(Γ)
are homomorphically equivalent. It is shown in [BK10] that the model-complete core of every
reduct of (Q, <) is either trivial, deﬁnable in (ω, 6=) or the reduct itself. So we are in the third
case.

Note that also in the case where End(Γ) = Sym(P ) we have that e⊥ ∈ End(Γ). So by
Theorem 13 we are only left with the cases where End(Γ) is the topological closure of Aut(P),
hli, h(cid:8)i or hl, (cid:8)i.
(cid:3)

Let us deﬁne the following relations on P :

Betw(x, y, z) :=(x < y ∧ y < z) ∨ (z < y ∧ y < x).
Cycl(x, y, z) :=(x < y ∧ y < z) ∨ (y < z ∧ z < x) ∨ (z < x ∧ x < y)∨
(x < y ∧ z⊥xy) ∨ (y < z ∧ x⊥yz) ∨ (z < x ∧ y⊥zx).

Par(x, y, z) :=(x⊥yz ∧ y⊥z) ∨ (x < yz ∧ y⊥z) ∨ (x > yz ∧ y⊥z)

Sep(x, y, z, t) :=(Cycl(x, y, z) ∧ Cycl(y, z, t) ∧ Cycl(x, y, t) ∧ Cycl(x, z, t))∨
(Cycl(z, y, x) ∧ Cycl(t, z, y) ∧ Cycl(t, y, x) ∧ Cycl(t, z, x)).

In Lemma 5 we are going to give a description of the monoids hli, h(cid:8)i and hl, (cid:8)i as
endomorphism monoids with the help of the above relations. We remark that Cycl and Par
describes the orbits triples under h(cid:8)i and Sep describes the orbit of a linearly ordered 4-tuple
under hl, (cid:8)i.

Lemma 4. The incomparability relation ⊥ is pp-deﬁnable in (P ; <, Cycl) and Par is pp-
deﬁnable in (P ; Cycl).

Proof. To proof the ﬁrst part of the lemma, let

ψ(x, y, a, b, c, d) := x < a < c ∧ x < b < d ∧ y < c ∧ y < d ∧ Cycl(x, a, y) ∧ Cycl(x, b, y)

∧ Cycl(y, c, b) ∧ Cycl(y, d, a) ∧ Cycl(b, d, c) ∧ Cycl(a, c, d).

12

M. KOMPATSCHER AND T. VAN PHAM

We claim that x⊥y is equivalent to ∃a, b, c, d ψ(x, y, a, b, c, d).

It is not hard to verify
that x⊥y implies ∃a, b, c, d ψ(x, y, a, b, c, d). For the other direction note that ψ(x, y, a, b, c, d)
implies that x 6= y because Cycl(x, a, y) is part of the conjunction ψ.

Let us assume that x < y and ψ(x, y, a, b, c, d) holds for some elements a, b, c, d ∈ P . Then
Cycl(x, a, y) implies that a < y, symmetrically we have b < y. Since y < c, d we have that
a < d and b < c. Then Cycl(b, d, c) implies d < c and Cycl(a, c, d) implies c < d, which is a
contradiction.

Now assume that y < x and ψ(x, y, a, b, c, d) holds for some elements a, b, c, d ∈ P . Then we
have y < a, b by the transitivity of the order. Then Cycl(y, c, b) implies c < b and Cycl(y, d, a)
implies d < a. But this leads to the contradiction a < c < b and b < d < a.

For the second part of the lemma let s, t ∈ P be two elements with s < t. Then the set X =
{x ∈ P : s < x < t} is pp-deﬁnable in (P ; Cycl, s, t) by the formula φ(x) := Cycl(s, x, t). By a
back-and-forth argument one can show the two structures (X; ≤) and (P ; ≤) are isomorphic.
The order relation, restricted to X is also pp-deﬁnable in (P ; Cycl, s, t) by the equivalence

y <|X z ↔ φ(x) ∧ φ(y) ∧ Cycl(y, z, t).

Since ⊥ is pp-deﬁnable in (P ; <, Cycl), we have that its restriction to X has a pp-deﬁnition
in (P ; Cycl, s, t). Therefore also the relation R = {(x, y, z) ∈ X 3 : x⊥y ∧ x⊥z ∧ z⊥y} is
pp-deﬁnable in (P ; Cycl, s, t). Let φ(s, t, u, v, w) be a primitive positive formula deﬁning R.

We claim that ∃x, y φ(x, y, u, v, w) is equivalent to (u, v, w) ∈ Par. Let (u, v, w) ∈ Par.
The relation Par describes the orbit of a 3-element antichain under the action of h(cid:8)i ⊆
End(P ; Cycl). So we can assume that (u, v, w) is a 3-antichain, otherwise we take an image
under a suitable function form h(cid:8)i.Now let us take elements s < t such that s < uvw and
uvw < t. Then clearly ψ(s, t, u, v, w) has to hold.

Conversely let (s, t, u, v, w) be a tuple such that ψ(s, t, u, v, w) holds. We can assume that
s < t (otherwise we take the image of (s, t, u, v, w) under a suitable function in h(cid:8)i). By what
we proved above, (u, v, w) is antichain, hence it satisﬁes Par.
(cid:3)

Lemma 5.

(1) End(P ; <, ⊥) = Aut(P)
(2) End(P ; Betw, ⊥) = hli
(3) End(P ; Cycl) = h(cid:8)i
(4) End(P ; Sep) = hl, (cid:8)i

Proof.

(1) Clearly Aut(P) ⊂ End(P ; <, ⊥). For the other inclusion let f ∈ End(P ; <, ⊥). Let
A ⊂ P be an arbitrary ﬁnite set. The restriction of f to a ﬁnite subset A ⊂ P is
an isomorphism between posets. By the homogeneity of P there is an automorphism
α ∈ Aut(P) such that f ↾ A = α ↾ A.

(2) Since l preserves Betw and ⊥, we know that hli ⊆ End(P ; Betw, ⊥) holds. For the
opposite inclusion let f ∈ End(P ; Betw, ⊥). If f preserves <, then f ∈ End(P ; <, ⊥)
and we are done. Otherwise there is a pair of elements c1 < c2 with f (c1) > f (c2).
Let d1 < d2 be an other pair of points in P . Then there are a1, a2 ∈ P such that
c1 < c2 < a1 < a2 and d1 < d2 < a1 < a2. Since f preserves Betw, f (a1) > f (a2)
holds and hence also f (d1) > f (d2). So f inverts the order, while preserving ⊥.
Therefore l ◦f ∈ End(P ; <, ⊥). We conclude that f ∈ hli.

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

13

(3) It is easy to see that h(cid:8)i ⊆ End(P ; Cycl). So let f ∈ End(P ; Cycl). Clearly f is
injective and preserves also the relation Cycl′(x, y, z) := Cycl(y, x, z). By Lemma 4, f
also preserves the relation Par. Furthermore h(cid:8)i is 2-transitive: This can be veriﬁed
by the fact that for every two elements of P , we can ﬁnd a α ∈ Aut(P) that map one
element to the random ﬁlter F and the other element to P \ F . So also End(P ; Cycl)
is 2-transitive. It follows that End(P ; Cycl) also preserves the negation of Cycl. In
other words, f is a self-embedding of (P ; Cycl). So, when restricted to a ﬁnite A ⊂ P ,
f is a partial isomorphism. By the results in [PPPS13] we know that (P ; Cycl) is
a homogeneous structure. Hence for every ﬁnite A ⊂ P we ﬁnd an automorphism
α ∈ Aut(P ; Cycl) = h(cid:8)i such that f ↾ A = α ↾ A.

(4) Let f ∈ End(P ; Sep). We claim that either f or l ◦f preserves Cycl.

If we can
prove our claim we are done by (3). First of all note that Sep(x, y, z, u) implies
Cycl(x, y, z) ↔ Cycl(y, z, u).

Without loss of generality let there be a elements x, y, z ∈ P with Cycl(x, y, z) and
Cycl(f (x), f (y), f (z)), otherwise we look at l ◦f instead of f . Let (r, s, t) be arbitrary
tuple satisfying Cycl.

We can always ﬁnd elements a < b < c in P that are incomparable with all entries of
(x, y, z) and (r, s, t). Further we can choose elements u, v ∈ P that are incomparable
with (a, b, c) such that z < u < v and Sep(x, y, z, u) ∧ Sep(y, z, u, v) holds. This can
be done by a case distinction and is left to the reader. By construction we have

Sep(x, y, z, u) ∧ Sep(y, z, u, v) ∧ Sep(z, u, v, a) ∧ Sep(u, v, a, b) ∧ Sep(v, a, b, c).

So we have that (f (x), f (y), f (z)) ∈ Cycl if and only if (f (a), f (b), f (c)) ∈ Cycl.
Repeating the same argument for (r, s, t) gives us that (f (r), f (s), f (t)) ∈ Cycl. So f
preserves Cycl.

(cid:3)

Recall that we obtain an ordered homogeneous Ramsey structure (P ; ≤, ≺) by taking the
Fra¨ıss´e limit of the class of ﬁnite structures (A; ≤, ≺), where (A; ≤) is a partial order on A
and ≺ an extension of < to a total order. We can regard this structure to be an extension of
P by a total order. By Theorem 7 the following holds:

Lemma 6. Let f : P → P and c1, . . . , cn ∈ P be any points. Then there exists a function
g : P → P such that

(1) g ∈ hAut(P) ∪ {f }i.
(2) g(ci) = f (ci) for i = 1, . . . n.
(3) Regarded as a function from (P ; ≤, ≺, ¯c) to (P ; ≤), g is a canonical function.

(cid:3)

Let Γ be a reduct of P. We are going to study all feasible behaviors of a canonical function
f : (P ; ≤, ≺, ¯c) → (P ; ≤) when f ∈ End(Γ). Note that the behaviour of such f only depends
on the behaviour on the 2-types because (P ; ≤, ≺, ¯c) is homogeneous and its signature contains
at most 2-ary relation symbols. Since there are only ﬁnitely many 2-types, the study of all
possible behaviors of such canonical functions is a combinatorial problem. We introduce the
following notation:

Notation 1. Let A, B be deﬁnable subsets of P and let φ1(x, y), . . . , φn(x, y) be formulas.
We let pA,B,φ1,...,φn(x, y) denote the (partial) type determined by the formula x ∈ A ∧ y ∈
B ∧ φ1(x, y) ∧ . . . ∧ φn(x, y). Using this notation, we can describe the 2-types of (P ; ≤, ≺, ¯c).

14

M. KOMPATSCHER AND T. VAN PHAM

They are all of the form pX,Y,φ,ψ = {(a, b) ∈ P 2 : a ∈ X, b ∈ Y, φ(a, b) and ψ(a, b)}, where X
and Y are 1-types, φ ∈ {=, <, >, ⊥} and ψ ∈ {=, ≺, ≻}.

Let X, Y be two distinct inﬁnite 1-types of (P ; ≤, ≺, ¯c). We write X ⊥

< Y if there are pairs

(x, y), (x′, y′) ∈ X × Y with x < y and x′⊥y′.

When it is convenient for us we will abuse notation and write ¯c to describe the set containing

all entries of the tuple ¯c.

Observation 1. If X is an 1-type of (P ; ≤, ≺, ¯c) with inﬁnite elements, then (X; ≤, ≺) is
isomorphic to (P ; ≤, ≺) itself. This can be seen by a back-and-forth argument. Similarly, if
X and Y are 1-types of (P ; ≤, ≺, ¯c) with inﬁnite elements such that X ⊥
< Y holds, then X ∪ Y
If we deﬁne X ≤ Y ↔ ∃(x, y) ∈
is isomorphic to (P ; ≤) with X being a random ﬁlter.
X × Y (x ≤ y) we get a partial order on the 1-types of (P ; ≤, ≺, ¯c) (confer Lemma 18
of [PPP+14]). But note that the 1-types of (P ; ≤, ≺, ¯c) are not necessarily linearly ordered
by ≺: There can be inﬁnite 1-types X, Y and (x, y), (x′, y′) ∈ X × Y with x ≺ y, x⊥y and
y′ ≺ x′, x′⊥y′.

In the following lemmas let Γ be always be a reduct of P and let f ∈ End(Γ) be a canonical

function from (P ; ≤, ≺, ¯c) to (P ; ≤).

Lemma 7. Let X be a 1-type of (P ; ≤, ≺, ¯c) with inﬁnite elements. Then f behaves like id
or l on X, otherwise End(Γ) contains a constant function, g< or g⊥.

Proof. Note that (X; ≤, ≺) is isomorphic to (P ; ≤, ≺). Then we can prove the statement with
the same arguments as in Lemma 8 of [PPP+14].
(cid:3)

Lemma 8. Let X, Y two inﬁnite 1-types of (P ; ≤, ≺, ¯c) with X ⊥
< Y . Assume f behaves like
id on X. Then f behaves like id or (cid:8)X on X ∪ Y , otherwise End(Γ) contains a constant
function, g< or g⊥.

Proof. Assume that f does not contains a constant function, g< or g⊥. Note that the union
of X and Y is isomorphic to P and X is a random ﬁlter of X ∪ Y . By following the arguments
of Lemma 22 in [PPP+14] one can show that we only have the two possibilities that

(1) f (pX,Y,<) = p< and f (pX,Y,⊥,≺) = p⊥ or
(2) f (pX,Y,<) = p⊥ and f (pX,Y,⊥,≺) = p>.

By Lemma 7 we may assume that f behaves like id or l on Y . But if f behaves like l on
Y , the image of y1, y2 ∈ Y and x ∈ X with x ≺ y1 < y2, x⊥y1 and x < y2 would be a non
partially ordered set. So if the type pX,Y,⊥,≻ is empty, f behaves like id or (cid:8)X on X ∪ Y and
we are done.

If pX,Y,⊥,≻ is not empty, there are x ∈ X and y ∈ Y with x ≻ y and x⊥y. We claim that
in this case f (pX,Y,⊥,≻) = f (pX,Y,⊥,≺). We only prove this claim for (1), the proof for (2) is
the same.

Assume that f (pX,Y,⊥,≻) = p<. Then let x′ ∈ X be an element such that y ≺ x′ and x < x′
and y⊥x′. The fact that such an element exists can be veriﬁed by checking that the extension
of {x, y} ∪ ¯c by such an element x′ still lies in the age of (P ; ≤, ≺, ¯c). By our assumption we
then have f (x) < f (x′) < f (y), which contradicts to f (x)⊥f (y).

Now assume that f (pX,Y,⊥,≻) = p>. Then let x′ ∈ X be such that x ≺ y ≺ x′ and x < y
and x′⊥xy. Again the fact that x′ exists can be veriﬁed by the homogeneity of (P ; ≤, ≺, ¯c).
Then f (x) < f (y) < f (x′), which contradicts to f (x′)⊥f (x′).

(cid:3)

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

15

Lemma 9. Either f behaves like id or l on every single 1-type or End(Γ) contains a constant
function, g< or g⊥.
Proof. For every two inﬁnite orbits X < Y there is a inﬁnite orbit Z with X ⊥
< Y .
For every two inﬁnite orbits X⊥Y there is an inﬁnite orbit Z with X < Z and Y < Z. So
this statement holds by Lemma 8. (cf Lemma 23 of [PPP+14])
(cid:3)

< Z and Z ⊥

Lemma 10. Assume End(Γ) does not contains constant functions, g< or g⊥. Then there is
a g ∈ h(cid:8), li ∩ End(Γ) such that g ◦ f is canonical from (P ; ≤, ≺, ¯c) to (P ; ≤) and behaves like
id on every set (P \ ¯c) ∪ {c}, with c ∈ ¯c.

Proof. By Lemma 9, f behaves like id or l on every inﬁnite orbit. Without loss of generality
we can assume that the ﬁrst case holds, otherwise consider l ◦f .

Let X ⊥

< Y , Y ⊥

< Z and X ⊥

< Z or X < Z. If f behaves like id on X ∪Y and Y ∪Z it also has to
behave like id on X ∪ Z; otherwise the image of a triple (x, y, z) ∈ X × Y × Z with x < y < z
would not be partially ordered. Let X < Z, Y < Z and X⊥Z. Again, if f behaves like id on
X ∪ Y and Y ∪ Z it also has to behave like id on X ∪ Z, otherwise we get a contradiction.

By Lemma 8 f either behaves like id or like (cid:8)X on the union two orbits X ⊥

< Y . In the
second case (cid:8) ∈ End(Γ). The set A = {x ∈ P : y < x ∨ y⊥x for all y ∈ f (Y )} is a union of
orbits of Aut(P ; ≤, ≺, ¯c) and a random ﬁlter of P . So (cid:8)A ◦f is canonical and behaves like id
on X ∪ Y . Repeating this step ﬁnitely many times gives us a function g ∈ h(cid:8)i such that g ◦ f
behaves like id on the union of inﬁnite orbits, by the observations in the paragraph above.

It is only left to show that g ◦ f behaves like id between a given constant c in ¯c and an
inﬁnite orbit X. Assume for example that c < X and g ◦ f (pc,X,<) = p⊥. Let A ⊆ P with
a ∈ A. By homogeneity of P we ﬁnd an automorphism of P that maps a to c and all points
that are greater than a to X. If we then apply g ◦ f and repeat this process at most |A|-times
we can map A to an antichain. Thus g⊥ ∈ End(Γ) which contradicts to our assumption.

Similarly all other cases where g ◦ f does not behave like id between c and X contradict
our assumptions. We leave the proof to the reader. Hence g ◦ f behaves like id everywhere
except on ¯c.
(cid:3)

Now we are ready to proof the main result of the section.

Proof of Theorem 13. Let Γ be a reduct of P such that End(Γ) does not contains constant
functions, g< or g⊥. We show that then End(Γ) is equal to Aut(P), hli, h(cid:8)i or hl, (cid:8)i.

First assume that End(Γ) contains a non injective function. This can be witnessed by
constants c1 6= c2 and a function f ∈ End(Γ) with f (c1) = f (c2) that is canonical as function
f : (P ; ≤, ≺, c1, c2) → (P ; ≤). By Lemma 10 we can assume that f behaves like id everywhere
except from c1, c2. But this is not possible, since there is a point in a ∈ P with a⊥c1 but
¬(a⊥c2). Since f (c1) = f (c2) either < or ⊥ is violated, which contradicts to f behaving like
id everywhere except on {c1, c2}. So from now on let End(Γ) only contain injective functions.
Assume End(Γ) violates Sep. This can also be witnessed by a canonical function f : (P ; ≤
, ≺, ¯c) → (P ; ≤) such that ¯c ∈ Sep but f (¯c) 6∈ Sep. By Lemma 10 we can assume that f
behaves like id on every set (P \ ¯c) ∪ {c}, with c ∈ ¯c. If there are ci < cj with f (ci)⊥f (cj)
it is easy to see that End(Γ) generates g⊥ which contradicts to our assumptions. If there are
ci < cj or ci⊥cj with f (ci) > f (cj) let a be an element of (P \ ¯c) with a < cj and a⊥ci. Then
the image of a, ci, cj under f induces a non partially ordered structure - contradiction.

So End(Γ) preserves Sep. By Lemma 5 we know that End(Γ) ⊆ hl, (cid:8)i. If End(Γ) violates
Cycl and Betw or Cycl and ⊥ we can proof as in the paragraph above that End(Γ) = hl, (cid:8)i.

16

M. KOMPATSCHER AND T. VAN PHAM

Similarly, if End(Γ) preserves Cycl but violates Betw or ⊥ then End(Γ) = h(cid:8)i.
If End(Γ) preserves Betw and ⊥ but violates Cycl. Then End(Γ) = hli.
Finally, if End(Γ) preserves Betw, ⊥ and Cycl we have End(Γ) = Aut(P).

(cid:3)

5. The case where < and ⊥ are pp-definable

Throughout the remaining parts of this paper we are going to study the complexity of
CSP(Γ) for model-complete reducts Γ of P. We start with the case where End(Γ) is the
topological closure of the automorphism group of P. In this case the two relations < and ⊥
are pp-deﬁnable by Theorem 5. So throughout this section let Γ be a reduct of P in which <
and ⊥ are pp-deﬁnable. We are ﬁrst going to discuss the binary part of the Pol(Γ). This will
be essential for proving the dichotomy in this case.
Observation 2. The binary relation x ⊥
positive formula ∃z (z < y) ∧ z⊥x. Therefore x ⊥

< y deﬁned by x < y∨x⊥y is equivalent to the primitive

< y is pp deﬁnable in Γ.

By e< we denote an embedding of the structure (P ; <)2 into (P ; <). Clearly e< is canonical

when regarded as map e< : (P ; ≤, ≺)2 → (P ; ≤). It has the following behaviour:

e< = < > ⊥
= = ⊥ ⊥ ⊥
< ⊥ < ⊥ ⊥
> ⊥ ⊥ > ⊥
⊥ ⊥ ⊥ ⊥ ⊥

By e≤ we denote an embedding of (P ; ≤)2 into (P ; ≤) that is canonical function when

regarded as map e≤ : (P ; ≤, ≺)2 → (P ; ≤). It has the following behaviour:

e≤ = < > ⊥
= = < > ⊥
< < < ⊥ ⊥
> > ⊥ > ⊥
⊥ ⊥ ⊥ ⊥ ⊥

5.1. Horn tractable CSPs given by e< and e≤. The two functions e< or e≤ are of central
interest to us. We will show in this section that if one of them is a polymorphisms of Γ, then
the problem CSP(Γ) is tractable.

Let ∆ and Λ be relational structures of the same signature. We say a map h : ∆ → Λ
is a strong homomorphism if ¯x ∈ R ↔ h(¯x) ∈ R. By ˆ∆ we denote the extension of ∆ that
contains the negation ¬R for every R is in ∆.

Theorem 14 (Proposition 14 from [BCKvO09]). Let ∆ be an ω-categorical structure and let
Γ be a reduct of ∆. Suppose CSP( ˆ∆) is tractable. If Γ has a polymorphism that is a strong
homomorphism from ∆2 to ∆, then also Γ is tractable.
(cid:3)

By deﬁnition e< is a strong homomorphism from (P ; <)2 → (P ; <) and e≤ s a strong
homomorphism from (P ; ≤)2 → (P ; ≤). Let 6< respectively 6≤ denote the negation of the order
relation < respectively ≤. One can see that every input to CSP(P ; <, 6<) and CSP(P ; ≤, 6≤)
is accepted as long as it does not contradict to the transitivity of < respectively ≤. But this
can be checked in polynomial time, thus the two problems are tractable. So by Theorem 14
every template Γ with polymorphism e< or e≤ gives us a tractable problem.

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

17

In the following theorem we additionally give a semantic characterization of these tractable
problems via Horn formulas. This characterisation works also in the general setting, we refer
to [BCKvO09] for the proof.

Theorem 15. Let Γ be a reduct of P. Suppose that e≤ ∈ Pol(Γ). Then CSP(Γ) is tractable
and every relation in Γ is equivalent to Horn formula in (P ; ≤):

xi1 ≤ xj1 ∧ xi2 ≤ xj2 ∧ · · · ∧ xik ≤ xjk → xik+1 ≤ xjk+1 or
xi1 ≤ xj1 ∧ xi2 ≤ xj2 ∧ · · · ∧ xik ≤ xjk → ’false’

Suppose that e< ∈ Pol(Γ). Then CSP(Γ) is tractable and every relation in Γ is equivalent to
a Horn formula in (P ; <), i.e. a formula of the form:

xi1 ⊳1 xj1 ∧ xi2 ⊳2 xj2 ∧ · · · ∧ xik ⊳k xjk → xik+1 ⊳k+1 xjk+1 or
xi1 ⊳1 xj1 ∧ xi2 ⊳2 xj2 ∧ · · · ∧ xik ⊳k xjk → ’false’,

where ⊳i ∈ {<, =} for all i = 1, . . . , k + 1.

(cid:3)

5.2. Canonical binary functions on (P ; ≤, ≺). A ﬁrst step in analysing the binary part
of Pol(Γ) is to look at the special case of canonical functions. So in the following text we
are going to study the behaviour of binary functions f ∈ Pol(Γ) that are canonical seen
as functions from (P ; ≤, ≺)2 to (P ; ≤).We are going to specify conditions for which Pol(Γ)
contains e< or e≤.
Deﬁnition 2. Let f : P2 → P be a function. Then f is called dominated on the ﬁrst argument
if

• f (x, y) < f (x′, y′) for all x < x′ and
• f (x, y)⊥f (x′, y′) for all x⊥x′.

We say f is dominated if f or (x, y) 7→ f (y, x) is dominated on the ﬁrst argument.

We are going to prove the following theorem:

Theorem 16. Let Γ be a reduct of P in which < and ⊥ are pp-deﬁnable. Let f (x, y) ∈ Pol(Γ)
be canonical when seen as a function from (P ; ≤, ≺)2 to (P ; ≤). Then at least one of the
following cases holds:

• f is dominated
• Pol(Γ) contains e<
• Pol(Γ) contains e≤

First of all we make some general observations for binary canonical functions preserving <
and ⊥. We are again going to use the notation introduced in Notation 1. Let us ﬁx a function
− : (P ; ≤, ≺) → (P ; ≤, ≺) such that x ≺ y ↔ −y ≺ −x holds. It is easy to see that such a
function exists.
Lemma 11. Let f : (P ; ≤, ≺)2 → (P ; ≤) be canonical and f ∈ Pol(Γ). Then the following
statements are true:

(1) f (p<, p<) = p<, f (p⊥, p⊥) = p⊥
(2) f (p, q) = −f (−p, −q), for all types p, q.
(3) f (p<, p⊥,≺), f (p<, p⊥,≻), f (p⊥,≻, p<) and f (p⊥,≺, p<) can only be equal to p< or p⊥.
(4) At least one of f (p<, p⊥,≺) and f (p⊥,≺, p<) is equal to p⊥.
(5) At least one of f (p<, p⊥,≻) and f (p⊥,≺, p>) is equal to p⊥.
(6) It is not possible that f (p<, p>) = p= holds.

18

M. KOMPATSCHER AND T. VAN PHAM

(7) f (p⊥,≺, p<) = p⊥ → f (p⊥, p=) = p⊥

Proof.

(1) This is clear, since f is a polymorphism of Γ and hence preserves < and ⊥.
(2) This is true by deﬁnition of −.
(3) This is true since f preserves the relation ⊥
(4) Assume f (p<, p⊥,≺) = f (p⊥,≺, p<) = p<. Let a1 ≺ a2 ≺ a3 with a1 < a2, a3⊥a1a2
and b1 ≺ b2 ≺ b3 with b2 < b3, b1⊥b2b3. By our assumption f (a1, b1) < f (a2, b2) <
f (a3, b3) holds, which is a contradiction to f preserving ⊥.

< , see Observation 2.

(5) This can be proven similarly to (4).
(6) Assume that f (p<, p>) = p= holds. Let a1 ≺ a2 ≺ a3 with a1 < a3, a2 < a3, a1⊥a2
and b1 ≻ b2 ≻ b3 with b1 > b3, b2 > b3, b1⊥b2. Then f (a1, b1)⊥f (a2, b2) but also
f (a1, b1) = f (a3, b3) = f (a2, a2) have to hold, which is a contradiction.

(7) Assume that there are a1⊥a2 and b such that f (a1, b) ≤ f (a2, b) holds. Then we
take elements a3 and b′ with a2 < a3, a1⊥a3 , a1 ≺ a3 and b′ > b. Then f (a1, b) ≤
f (a2, b) < f (a3, b′) holds, which is a contradiction to f (a1, b)⊥f (a3, b′).

(cid:3)

By Lemma 11 (2) we only have to consider pairs of types where the ﬁrst entry is p=, p< or
p⊥,≺ when studying the behaviour of f . Further Lemma 11 implies that f (x, y) 6= f (x′, y′)
always holds for x 6= x′ and y 6= y′.

Lemma 12. Let f ∈ Pol(Γ). Then the following are equivalent:

(1) f (p<, p>) = p<
(2) f (p<, p⊥,≻) = p<
(3) f (p<, q) = p< for all 2-types q
(4) f is dominated in the ﬁrst argument

Proof. It is clear that the implications (4) → (3) → (2) and (3) → (1) are true.

(1) → (3): Let a1 < a2 < a3 and b1b3 < b2. Then f (a1, b1) < f (a2, b2) < f (a3, b3) has to
hold regardless if the type of (b1, b3) is p⊥,≺, p⊥,≻ or p=. So f (p<, q) = p< for all 2-types q.
(2) → (1): Let a1 < a2 < a3 and b1 ≻ b2 ≻ b3 with b1 > b3, b2⊥b1b3. Then f (a1, b1) <

f (a2, b2) < f (a3, b3) implies f (a1, b1) < f (a3, b3) and so f (p<, p>) = p<.

(3) → (4): We have to consider all the pairs of 2-types where the ﬁrst entry is p⊥,≺. By
Lemma 11 (4) and (5) we know that f (p⊥,≺, p<) = f (p⊥,≺, p>) = p⊥. From Lemma 11(7)
follows that f (p⊥, p=) = p⊥.

We want to point out that we did not require f to be canonical; it can be easily veriﬁed
(cid:3)

that all proof steps also work for general binary functions.

Lemma 13. Let f : (P ; ≤, ≺)2 → (P ; ≤) be canonical and f ∈ Pol(Γ). If f is not dominated
the following statements are true:

(1) f (p<, p>) = f (p<, p⊥,≻) = f (p⊥,≺, p>) = p⊥.
(2) f (p<, p=) = p< or f (p<, p=) = p⊥.
(3) f (p⊥,≺, p=) = p⊥ or f (p⊥,≺, p=) = p<.

Proof.

(1) is a direct consequence of Lemma 12.

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

19

(2) Suppose there are a1 < a2 and b such that f (a1, b) ≥ f (a2, b). Then we take elements
a3, b′ ∈ P with a2⊥a3 a2 ≻ a3, a1 < a3 and a b′ > b. Then f (a2, b) ≤ f (a1, b) <
f (a3, b′) holds, which is a contradiction to f (a2, b)⊥f (a3, b′).

(3) Assume that there are a1⊥a2, a1 ≺ a2 and b such that f (a1, b) ≥ f (a2, b) holds.
There are elements a3 and b′ with a2 > a3, a1⊥a3, a1 ≺ a3 and b′ < b. Then
f (a2, b) > f (a3, b′) and f (a1, b)⊥f (a3, b′). But this contradicts to our assumption.

(cid:3)

Deﬁnition 3. Let us say a binary function is ⊥-falling, if it has the same behaviour as e<
respectively e≤ on pairs of partial type (p6=, p6=).

Lemma 14. Let f ∈ Pol(Γ) be a canonical function f : (P ; ≤, ≺)2 → (P ; ≤) of ⊥-falling
behaviour. Then Pol(Γ) contains e< or e≤.

Proof. From Lemma 11 (7) follows that f (p⊥, p=) = p⊥ and f (p=, p⊥) = p⊥. By Lemma
13 we further know that f (p<, p=), f (p=, p<) ∈ {p⊥, p<}. So we have to do a simple case
distinction:

• If f (p=, p<) = f (p<, p=) = p⊥, then f behaves like e<, hence e< ∈ Pol(Γ).
• If f (p=, p<) = p< and f (p<, p=) = p⊥, the function (x, y) → f (f (x, y), x) has the

same behaviour as e<, thus e< ∈ Pol(Γ).

• Symmetrically if f (p=, p<) = p⊥ and f (p<, p=) = p<, the function (x, y) → f (f (y, x), y)

has the same behaviour as e<, thus e< ∈ Pol(Γ).

• If f (p=, p<) = p< = f (p<, p=) = p<, then f has the same behaviour as e≤, thus

e≤ ∈ Pol(Γ).

(cid:3)

We now give a simple criterium for the existence of a canonical ⊥-falling function in Pol(Γ).

This criterium will allows us to ﬁnish the proof of Theorem 16.
Lemma 15. Assume that for every k > 1, every pair of tuples ¯a, ¯b ∈ P k and every indices
p, q ∈ [k] with ap < aq and ¬(bp ≤ bq) there exists a binary function g ∈ Pol(Γ) such that
g(ap, bp)⊥g(aq, bq) and for all i, j ∈ [k]:

(1) ai < aj implies g(ai, bi) < g(aj , bj) or g(ai, bi)⊥g(aj , bj),
(2) ai⊥aj implies g(ai, bi)⊥g(aj , bj).

Then Pol(Γ) contains e< and e≤.
Proof. First we are going to show that for all ¯a, ¯b ∈ P k there is a binary function f ∈ Pol(Γ)
that has ⊥-falling on (¯a, ¯b). To be more precise we want to construct an f ∈ Pol(Γ) such
that:

• f (ai, bi) < f (aj, bj) if ai < aj and bi < bj,
• f (ai, bi)⊥f (aj , bj) if ai < aj and ¬(bp ≤ bq).
• f (ai, bi)⊥f (aj , bj) if ai⊥aj and bi 6= bj

We are going to construct f by a recursive argument.

Let f (0)(x, y) = g(0)(x, y) = x and ¯a(0) = f (0)(¯a, ¯b). If already f (0) has the desired properties

we set f (x, y) = f (0)(x, y) and are done.

Otherwise, in the (k + 1)-th recursion step, we are given a function f (k)(x, y) and a tuple
¯a(k) = f (k)(¯a, ¯b). Let us assume that there are indices p, q with ap < aq, ¬(bp ≤ bq) and

20

M. KOMPATSCHER AND T. VAN PHAM

a(k)
p < a(k)
q
g(k+1)(a(k)

. Then by our assumption there is a function g(k+1)(x, y) ∈ Pol(Γ) such that

p , bp)⊥g(k)(a(k)

p , bp). We set f (k+1)(x, y) = g(k)(f (k)(x, y), y) and ¯a(k) = f (k)(¯a, ¯b).

Note that by the properties (1) and (2) of the function gk the only possible cases for f k
being not ⊥-falling is the case above. It is clear that the recursion ends after ﬁnitely many
steps.

So on every ﬁnite subset X × Y of P 2 we ﬁnd a ⊥-falling function. By a compactness
argument there exists a h ∈ Pol(Γ) that is ⊥-falling on P 2. It remains to show that there is
also a canonical ⊥-falling function in Pol(Γ).

By Theorem 6 we have that h is canonical on arbitrarily large substructures of P 2. Let
(Fn)n∈ω be an increasing sequence of ﬁnite substructures such that its union is equal to P .
Then for every n ∈ ω there are α(n)
2 ) is canonical on
Fn. By thinning out the sequence we can assume that f ◦ (α(n)
2 ) has the same behaviour
for every n ∈ ω.

2 ∈ Aut(Γ) such that f ◦ (α(n)

1 , α(n)

1 , α(n)

1 , α(n)

Since the behaviour f ◦ (α(n)

phisms βn ∈ Aut(P) such that βn ◦ f ◦ (α(n)
, α(n+1)
Fn. The limit of this sequence is a canonical function in Pol(Γ) with ⊥-falling behaviour.

2 ) agrees with βn+1 ◦ f ◦ (α(n+1)

2 ) on all Fn is the same, we can inductively pick automor-
) on

1 , α(n)

1 , α(n)

1

2

By Lemma 14 we have that e< or e≤ is an element of Pol(Γ). This concludes the proof. (cid:3)

Proof of Theorem 16. Let f : (P ; ≤, ≺)2 → (P ; ≤) be canonical and f ∈ Pol(Γ). Let us
assume that f is not dominated. By Lemma 13 we know f (p<, p>) = f (p<, p⊥,≻) =
f (p⊥,≺, p>) = p⊥.

By Lemma 11 (3) and (4) we have to look at the following cases:

(1) f (p<, p⊥,≺) = f (p⊥,≺, p<) = p⊥.
(2) f (p<, p⊥,≺) = p< and f (p⊥,≺, p<) = p⊥.
(3) f (p<, p⊥,≺) = p⊥ and f (p⊥,≺, p<) = p<.
In the ﬁrst case f has ⊥-falling behaviour therefore we are done by Lemma 14.
For the remaining cases we can restrict ourselves to (2), otherwise we take (x, y) → f (y, x).
From Lemma 11 (7) follows that f (p⊥, p=) = p⊥. Thus f (p⊥, q) = p⊥ holds for every 2-type
q.

We are going to show that then the conditions in Lemma 15 are satisﬁed. Let ¯a, ¯b ∈ P k be
two tuples of arbitrary length k and let p, q ∈ [k] such that ap < aq, bp ≺ bq and bp⊥bq hold.
Then let α ∈ Aut(P) with α(bp) ≻ α(bq). Such an automorphism exists by the homogeneity
of P. Then we set g(x, y) = f (x, α(y)).

Clearly g(ap, aq)⊥g(bp, bq), since α(bp) ≻ α(bq). Also the other conditions in Lemma 15 are
(cid:3)

satisﬁed, by the properties of f . Therefore Pol(Γ) contains e< or e≤.

Let Low be the 3-ary relation deﬁned by

6. The NP-hardness of Low

Low(x, y, z) := (x < y ∧ z⊥xy) ∨ (x < z ∧ y⊥xz).

Clearly ⊥ and < are pp-deﬁnable in Low. Note that Low is not preserved by e< or e≤,
so CSP(P ; Low) is not covered by the tractability result in Theorem 15. In this section we
prove the NP-hardness of CSP(P ; Low).

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

21

Lemma 16. Let us deﬁne the relations

Abv(x, y, z) :=(y < x ∧ xy⊥z) ∨ (z < x ∧ xz⊥y)

U (x, y, z) :=(y < x ∨ z < x) ∧ (y⊥z)

Then Abv and U are pp-deﬁnable in Low.

Proof. Note that the formula

u⊥v ∧ Low(u, y, z) ∧ Low(y, x, v) ∧ Low(z, x, v)

implies that at least one element of {y, z} is smaller that x and at most one element of {y, z}
is smaller than v.
With that in mind one can see that

∃u1, u2, v (u1⊥v ∧ u2⊥x ∧ Low(u1, y, z) ∧ Low(u2, y, z) ∧ Low(y, x, v))

is equivalent to Abv(x, y, z) and

∃u, v (u⊥x ∧ Low(u, y, z) ∧ Low(y, v, x))

is equivalent to U (x, y, z).

(cid:3)

Theorem 17. Let a, b ∈ P with a⊥b. There is a pp-interpretation of ({0, 1}; 1IN3) in
(P ; Low, a, b). Thus CSP(P ; Low) is NP-hard.

Proof. Let NAE be the boolean relation {0, 1}3\{(0, 0, 0), (1, 1, 1)}.
It is easy to see that
Pol({0, 1}, NAE, 0, 1) is the projection clone 1. So by Theorem 11 it suﬃces to show that
({0, 1}; NAE, 0, 1) has a pp-interpretation in (P ; Low, a, b) to prove the Lemma.

Let D := {x ∈ P : Low(x, a, b)}, D0 := {x ∈ D : x < a}, D1 := {x ∈ D : x < b}. Note that

D0⊥D1. Let I : D → {0, 1} be given by:

I(x) :=(0

1

if x ∈ D0
if x ∈ D1

.

Clearly the domain D of I is pp-deﬁnable in (P ; Low, a, b). Since the order relation < is
pp-deﬁnable in Low also the sets D0 and D1 are pp-deﬁnable. Let R = {(x, y, z, t) ∈ P 4 :
(x > y ∨ x > z ∨ x > t) ∧ ¬(x ≤ yzt)}. We claim that the relation R is pp-deﬁnable in Low.
Observe that (x, y, z, t) ∈ R is equivalent to

∃u, v (Abv(x, u, v) ∧ U (x, y, u) ∧ U (x, z, u) ∧ U (x, t, v))

and therefore pp-deﬁnable in Low by Lemma 16. By the deﬁnition of R we have that
I(c1, c2, c3) ∈ NAE if and only if (a, c1, c2, c3) ∈ R and (b, c1, c2, c3) ∈ R. Thus the preimage
of NAE is pp-deﬁnable in (P ; Low, a, b).
(cid:3)

The following lemma gives us an additional characterization of reducts, in which Low is

pp-deﬁnable.

Lemma 17. The relation Low is pp-deﬁnable in Γ if and only if every binary polymorphism
of Γ is dominated.

Proof. Every dominated function f : P 2 → P preserves Low. For the other direction observe
that by Lemma 12 we have that f is dominated in the ﬁrst argument if and only if f (a1, b1) <
f (a2, b2) for all a1 < a2 and b1⊥b2. Note that Lemma 12 also works for non-canonical
functions.

22

M. KOMPATSCHER AND T. VAN PHAM

So if f ∈ Pol(Γ) is a binary, not dominated function, there are a1 < a2, b1⊥b2, a′
1 < b′
b′

2 such that f (a1, b1)⊥f (a2, b2) and f (a′

2). Hence f violates the relation

1⊥a′

1, b′

1)⊥f (a′

2, b′

2 and

S(x1, x2, y1, y2) := (x1 < x2 ∧ y1⊥y2) ∨ (x1⊥x2 ∧ y1 < y2).

But the relation S and Low are pp-interdeﬁnable:

Low(x, y, z) ↔S(x, y, x, z) ∧ y⊥z

S(x1, x2, y1, y2) ↔∃u, v, w (Low(x1, x2, u) ∧ Abv(u, x1, v),

∧ Low(u, v, w) ∧ Abv(w, y1, v) ∧ Low(y1, y2, w)).

We conclude that f violates Low.

(cid:3)

7. Violating the Low relation

We saw in Theorem 15 that CSP(Γ) is tractable if e< or e≤ are polymorphisms of Γ. By
Theorem 17 we know that CSP(Γ) is NP-complete if Low is pp-deﬁnable in Γ. In this section
we are going to show that these results already cover all possible reducts where < and ⊥ are
pp-deﬁnable.

Theorem 18. Let Γ be a reduct of P such that ⊥ and < are pp-deﬁnable in Γ. Then Low is
not pp-deﬁnable in Γ if and only if Pol(Γ) contains one of the functions e< or e≤.

Proof. Note that by Theorem 5 Low is not pp-deﬁnable in Γ if and only if there is a binary
f ∈ Pol(Γ) violating Low. This means that there are a, b, c ∈ P such that a < b ∧ ab⊥c and
f (a, a) < f (b, c) ∧ f (a, a) < f (c, b), or f (a, a)⊥f (b, c) and f (a, a)⊥f (c, b).

We have only these two cases since f preserves ⊥

< and ⊥. We can assume that a ≺ b ≺ c
since otherwise we can ﬁnd an automorphism α ∈ Aut(P) such that α(a) ≺ α(b) ≺ α(c).
Then we consider the map (x, y) 7→ f (α−1(x), α−1(y)) with three elements α(a), α(b) and
α(c) instead.

By Theorem 7 we can assume that f is canonical as a function from (P ; <, ≺, a, b, c)2 to
(P ; <). We deal with the two cases in Lemma 18 and Lemma 24 in the following subsections.
(cid:3)

Notation 2. For simplicities sake, a canonical binary function in this section means a function
that is canonical as a function from (P ; ≤, ≺)2 → (P ; <).
Let f : P 2 → P be a function and X, Y, X ′, Y ′ be subsets of P such that f is dominated on
X × Y and X ′ × Y ′. We say that f has the same domination on X × Y and X ′ × Y ′ if f is
dominated by the ﬁrst argument on both X × Y and X ′ × Y ′, or dominated by the second
argument on both X × Y and X ′ × Y ′. Otherwise, we say that f has the diﬀerent domination
on X × Y and X ′ × Y ′.

7.1. f (a, a) < f (b, c) ∧ f (a, a) < f (c, b). The aim of this subsection is to prove the following
lemma.

Lemma 18. Let f ∈ Pol(Γ) be canonical as a function from (P ; <, ≺, a, b, c)2 to (P ; <). If
f (a, a) < f (b, c) ∧ f (a, a) < f (c, b) then Pol(Γ) contains e< or e≤.

We deﬁne the following two sets:

• B1 := {x ∈ P : x > c ∧ x⊥a ∧ x⊥b},
• B2 := {x ∈ P : x > b ∧ x > c}.

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

23

Let x, y ∈ B1 ∪ B2. We say that x and y are in the same orbit if x ∈ Bi and y ∈ Bi for an
i ∈ [2].

Observation 3. B1 and B2 are orbits of Aut(P ; <, ≺, a, b, c). By the homogeneity of (P ; ≤
, ≺) we can show that (B1; ≤, ≺), (B2; ≤, ≺) are isomorphic to (P ; ≤, ≺). Further also the
union of B1 and B2 is an isomorphic copy of (P ; ≤, ≺), in which B1 forms a random ﬁlter.

If there is a canonical g ∈ Pol(Γ) that is not dominated, then Lemma 16 gives us that e< or
e≤ is in Pol(Γ). So throughout the lemmata and corollaries below in this section, we assume
that every binary canonical function in Pol(Γ) is dominated and f (a, a) < f (b, c) ∧ f (a, a) <
f (c, b).

Lemma 19. f is dominated on Bi × Bj for every i, j ∈ [2].

Proof. For a contradiction, we assume that f is not dominated on Bi × Bj. Since (Bi; ≤, ≺)
and (Bj; ≤, ≺) are isomorphic to (P ; ≤, ≺), there are α : P → Bi and β : P → Bj such that
α is an isomorphism from (P ; ≤, ≺) to (Bi; ≤, ≺) and β is an isomorphism from (P ; ≤, ≺) to
(Bj; ≤, ≺). Let g : P 2 → P be given by g(x, y) := f (α(x), β(y)). It follows from Observation
3 that g is canonical and is not dominated, a contradiction.
(cid:3)

Lemma 20. f has the same domination on all sets Bi × Bj, i, j ∈ [2].

Proof. We claim that f has the same domination on B1 × Bk and B2 × Bk for any k ∈ [2].
For a contradiction, we assume that f does not have the same domination B1 × Bk and
B2 × Bk. Without loss of generality we can assume that f is dominated by the ﬁrst argument
on B1 × Bk and dominated by the second argument on B2 × Bk. Let x, y ∈ B1, z, t ∈ B2 be
such that x < y ∧ y < z ∧ x⊥t. Let x′, y′, z′, t′ ∈ Bk be such that x′⊥t′ ∧ y′ < z′ ∧ z′ < t′.
Since f is dominated by the ﬁrst argument on B1 × Bk, we have f (x, x′) < f (y, y′). Since f is
dominated by the second argument on B2 × Bk, we have f (z, z′) < f (t, t′). Since f preserves
<, we have f (y, y′) < f (z, z′). Thus f (x, x′) < f (t, t′), a contradiction to the fact that f
preserves ⊥.

By considering the map (x, y) 7→ f (y, x) we have that f has the same domination on
Bk × B1 and Bk × B2 for every k ∈ [2]. This implies that f has the same dominations on all
products Bi × Bj , i, j ∈ [2].
(cid:3)

In the rest of this section, we assume that f is dominated by the ﬁrst argument on Bi × Bj
for every i, j ∈ [2]. The other case can be reduced to this case by considering the map
(x, y) 7→ f (y, x).

Lemma 21. Let u, v ∈ B1 and u′ ∈ B2, v′ ∈ B1 be such that u < v ∨ u⊥v. Then
f (u, u′)⊥f (v, v′).

Proof. First, we claim that f (u, u′) > f (v, v′) ∨ f (u, u′)⊥f (v, v′). For a contradiction, we
assume that f (u, u′) ≤ f (v, v′). Since f preserves <, we have f (c, b) < f (u, u′). Therefore
f (a, a) < f (c, b) < f (u, u′) < f (v, v′), a contradiction to the ⊥-preservation of f . Thus the
claim follows.

The proof is completed by showing that f (u, u′) > f (v, v′) is impossible. For a contradic-
tion, we assume that f (u, u′) > f (v, v′). Let s, t ∈ B1 be such that s⊥t ∧ s < v ∧ u < t.
Let s′ ∈ B1, t′ ∈ B2 be such that s′⊥t′. By the domination of f , we have f (s, s′) <
f (v, v′) ∧ f (u, u′) < f (t, t′).
It follows from f (u, u′) > f (v, v′), we have f (s, s′) < f (t, t′),
a contradiction to ⊥-preservation of f .
(cid:3)

24

M. KOMPATSCHER AND T. VAN PHAM

Lemma 22. Let u, v ∈ B1 be such that u⊥v. Then for every u′, v′ ∈ B1 ∪ B2, we have
f (u, u′)⊥f (v, v′).

Proof. For a contradiction, we assume that ¬(f (u, u′)⊥f (v, v′)). Without loss of generality,
we assume that f (u, u′) ≤ f (v, v′). Let s, t ∈ B1 be such that s < u ∧ v < t ∧ s⊥t. Let
s′, t′ ∈ B1∪B2 be such that s′⊥t′, s′, u′ are in the same orbit and t′, v′ are in the same orbit. By
the domination of f , we have f (s, s′) < f (u, u′) ∧ f (v, v′) < f (t, t′). Since f (u, u′) < f (v, v′),
we have f (s, s′) < f (t, t′), a contradiction to the ⊥-preservation of f .
(cid:3)

Lemma 23. Let u, v ∈ B1 and u′, v′ ∈ B1 ∪ B2 be such that u < v. Then f (u, u′) <
f (v, v′) ∨ f (u, u′)⊥f (v, v′).

Proof. For a contradiction, we assume that f (v, v′) ≤ f (u, u′). Let s, t ∈ B1 be such that
t < v ∧u < s∧s⊥t. Let s′, t′ ∈ B1 ∪B2 be such that s′⊥t′, s′, u′ are in the same orbit, and t′, v′
are in the same orbit. By the domination of f , we have f (t, t′) < f (v, v′) ∧ f (u, u′) < f (s, s′).
Since f (v, v′) < f (u, u′), we have f (t, t′) < f (s, s′), a contradiction to the ⊥-preservation of
f .
(cid:3)

Proof of Lemma 18. We are going to show that Pol(Γ) contains a function that behaves like
e< or like e≤ by checking the conditions of Lemma 15.

So let ¯a, ¯b ∈ P k with ap < aq and ¬(bp ≤ bq). We set Y := {bi : bi ≥ bp}, Z := {bi :
¬(bi ≥ bp)}. By deﬁnition we have bq ∈ Z. By the homogeneity of P, there is α ∈ Aut(P)
such that α(Y ) ⊆ B2 and α(Z) ⊆ B1. Let β ∈ Aut(P) such that β({ai : i ∈ [k]}) ⊆ B1. Let
g(x, y) := f (β(x), α(y)). Clearly, g ∈ Pol(Γ).
By Lemma 21 we have that g(ap, bp)⊥g(aq , bq). Further we know by Lemma 23 that g(ai, bi) <
g(aj , bj) or g(ai, bi)⊥g(aj , bj) holds for all ai < aj. By Lemma 22 we know that g(ai, bi)⊥g(aj , bj)
holds for all ai⊥aj. So the conditions of Lemma 15 are satisﬁed. Hence e< or e≤ is a poly-
morphism of Γ.

(cid:3)

7.2. f (a, a)⊥f (b, c) ∧ f (a, a)⊥f (c, b). The aim of this section is to prove the following.

Lemma 24. Let f ∈ Pol(Γ) be canonical as a function from (P ; <, ≺, a, b, c)2 to (P ; <). If
f (a, a)⊥f (b, c) ∧ f (a, a)⊥f (c, b), then Pol(2)(Γ) contains e< or e≤.

We deﬁne the following sets.

B1 := {x ∈ P : a < x < b ∧ x⊥c}
B2 := {x ∈ P : x < b ∧ x < c ∧ x⊥a ∧ x ≺ a}.

Throughout the lemmata and corollaries below in this section, we assume that every binary

canonical function in Γ is dominated and f (a, a)⊥f (b, c) ∧ f (a, a)⊥f (c, b).

Observe that by the homogeneity of (P ; ≤; ≺) and the back-and-forth argument, we can
show that (B1 ∪ B2; ≤, ≺) is isomorphic to (P ; ≤, ≺), with B2 being a random ﬁlter. For every
two k-tuples ¯x and ¯y in Bk
i , ¯x and ¯y are in the same orbit of Aut(P) if and only if ¯x and ¯y
are in the same orbit of Aut(P ; a, b, c).

Lemma 25. f has the same domination on sets Bi × Bj, i, j ∈ [2].

Proof. This lemma can be shown as in Lemma 19 and Lemma 20.

(cid:3)

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

25

In the rest of this section we assume that f is dominated by the ﬁrst argument on Bi × Bj

for every i, j ∈ {1, 2}. Similarly, to Lemma 21, we have the following.

Lemma 26. Let u, v ∈ B1 and u′ ∈ B1, v′ ∈ B2 be such that u < v ∨ u⊥v. Then
f (u, u′)⊥f (v, v′).

Proof. First we prove that f (v, v′) < f (u, u′) ∨ f (v, v′)⊥f (u, u′). For a contradiction we
assume that f (u, u′) ≤ f (v, v′). Since a < u ∧ a < u′, we have f (a, a) < f (u, u′). Since
v < b ∧ v′ < c, we have f (v, v′) < f (b, c). Thus f (a, a) < f (b, c), a contradiction to the fact
that f (a, a)⊥f (b, c). Thus f (v, v′) < f (u, u′) ∨ f (v, v′)⊥f (u, u′).

The proof is completed by showing that f (u, u′) > f (v, v′) is impossible. For a contradic-
tion, we assume that f (u, u′) > f (v, v′). Let s, t ∈ B1 be such that s⊥t ∧ s < v ∧ u < t.
Let s′ ∈ B2, t′ ∈ B1 be such that s′⊥t′. By the domination of f , we have f (s, s′) <
f (v, v′) ∧ f (u, u′) < f (t, t′).
It follows from f (u, u′) > f (v, v′), we have f (s, s′) < f (t, t′),
a contradiction to ⊥-preservation of f .

(cid:3)

Lemma 27. Let u, v ∈ B1 be such that u⊥v. Then for every u′, v′ ∈ B1 ∪ B2, we have
f (u, u′)⊥f (v, v′).

Proof. analogous to Lemma 22.

(cid:3)

Lemma 28. Let u, v ∈ B1 and u′, v′ ∈ B1 ∪ B2 be such that u < v. Then f (u, u′) <
f (v, v′) ∨ f (u, u′)⊥f (v, v′).

Proof. analogous to Lemma 23.

(cid:3)

Proof of Lemma 24. We are again going to show that Pol(Γ) contains a function that behaves
like e< or like e≤ by checking the conditions of Lemma 15.

So let ¯a, ¯b ∈ P k with ap < aq and ¬(bp ≤ bq). We set Y := {bi : bi ≥ bp}, Z := {bi :
¬(bi ≥ bp)}. By deﬁnition we have bq ∈ Z. By the homogeneity of P, there is α ∈ Aut(P)
such that α(Y ) ⊆ B1 and α(Z) ⊆ B2. Let β ∈ Aut(P) such that β({ai : i ∈ [k]}) ⊆ B1. Let
g(x, y) := f (β(x), α(y)). Clearly, g ∈ Pol(Γ).
By Lemma 21 we have that g(ap, bp)⊥g(aq , bq). Further we know by Lemma 23 that g(ai, bi) <
g(aj , bj) or g(ai, bi)⊥g(aj , bj) holds for all ai < aj. By Lemma 22 we know that g(ai, bi)⊥g(aj , bj)
holds for all ai⊥aj. So the conditions of Lemma 15 are satisﬁed. Hence e< or e≤ is a poly-
morphism of Γ.
(cid:3)

8. The NP-hardness of Betw, Sep and Cycl

By Corollary 1 we are now left with the cases where End(Γ) is equal to one of the monoids

hli, h(cid:8)i or hl, (cid:8)i.

We are going to deal with all these remaining cases in this section. Interestingly, we can
treat them all similarly: By ﬁxing ﬁnitely many constants c1, . . . , cn on Γ we obtain deﬁnable
subsets of (Γ, c1, . . . , cn) on which < and Low are pp-deﬁnable. This enables us to reduce
every every such case to the NP-completeness of Low.

Lemma 29. Let u, v ∈ P with u < v. Then the relations < and Low are pp-deﬁnable in
(P, Betw, ⊥, u, v).

26

M. KOMPATSCHER AND T. VAN PHAM

Proof. It is easy to verify that there is a pp-deﬁnition of the order relation by the following
equivalence:

x < y ↔ ∃a, b (Betw(x, y, a) ∧ Betw(y, a, b) ∧ Betw(u, v, a) ∧ Betw(v, a, b)).

The two maps e< : P 2 → P and e≤ : P 2 → P do not preserve Betw, since for every triple
¯a = (a1, a2, a3) with a1 < a2 < a3 and ¯b = (b1, b2, b3) with b1 > b2 > b3, the image of (¯a, ¯b)
forms an antichain.

By Theorem 18 we have that Low is pp-deﬁnable in (P, Betw, ⊥, u, v).

(cid:3)

Theorem 19. Let Γ be a reduct of P such that End(Γ) = hli. Then there are constants
u, v, w, t ∈ P such that ({0, 1}, 1IN3) is pp-interpretable in (Γ, u, v, w, t). Hence CSP(Γ) is
NP-complete.

Proof. Note that the betweenness relation Betw is an orbit of End(Γ) = hli on P 3. Now
Theorem 5 implies that Betw is primitively positive deﬁnable in Γ. For the same reason ⊥ is
pp-deﬁnable in Γ. By Lemma 29 there is pp-deﬁnition of Low in (Γ, u, v). By Theorem 17 we
can ﬁnd a pp-interpretation of ({0, 1}, 1IN3) in (Γ, u, v, w, t), where w, t are two additional
constants. Hence CSP(Γ) is NP-complete.
(cid:3)

For the case where End(Γ) = h(cid:8)i, we ﬁrst need the following lemma:

Lemma 30. Let c, d be two constants in P such that c < d. Then there is a pp-interpretation
of (P ; Low) in (P ; Cycl, c, d)

Proof. Let X := {x ∈ P : c < x < d}. By using back-and-forth argument one can show easily
that (P ; <) and (X; <|X ) are isomorphic. We ﬁrst show that X (as a unary predicate) and
<|X are pp-deﬁnable in (P ; Cycl, c, d). It is easy to verify that the set X can be deﬁned in
(P ; Cycl, c, d) by φ(x) := Cycl(c, x, d) and that x <|X y ↔ φ(x) ∧ φ(y) ∧ Cycl(c, x, y). Now a
pp-interpretation of (P ; <, Cycl) in (P ; Cycl, c, d) is simply given by the identity on X.

By Lemma 4 we have that ⊥ is pp-deﬁnable in (P ; <, Cycl). It is easy to verify that e<
and e≤ do not preserve Cycl. Therefore, by Theorem 18, Low is pp-deﬁnable in (P ; <, Cycl),
which concludes the proof of the Lemma.
(cid:3)

Theorem 20. Let Γ be a reduct of P such that End(Γ) = h(cid:8)i. Then there are constants
a, b, c, d ∈ P such that ({0, 1}, 1IN3) is pp-interpretable in (Γ, a, b, c, d). Hence CSP(Γ) is
NP-complete.

Proof. The cyclic order relation Cycl is an orbit of End(Γ) = h(cid:8)i on P 3. So Theorem 5
implies that Cycl is primitively positive deﬁnable in Γ. By Lemma 30 there is pp-deﬁnition of
Low in (Γ, c, d) with c < d. By Theorem 17 we can ﬁnd a pp-interpretation of ({0, 1}, 1IN3)
in (Γ, a, b, c, d), where a, b are two additional constants. Hence CSP(Γ) is NP-complete. (cid:3)

In the following, we prove the NP-hardness of CSP(P ; Sep) by using the same proof idea

as the proof of NP-hardness of CSP(P ; Cycl) in Section 8.

Lemma 31. Let c, d, u be constants in P such that c < d < u. Then (P ; Low) has a pp-
interpretation in (P ; Sep, c, d, u).

Proof. Let X := {x ∈ P : d < x < u}. By using a back-and-forth argument, one can show
easily that (X; ≤) and P are isomorphic. Similarly as in the proof of Theorem 20, X and <|X
are pp deﬁnable in (P ; Sep, c, d, u) as follows.

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

27

The set X can be deﬁned by the formula φ(x) := Sep(c, d, x, u), and <|X can be deﬁned by
x <|X y :⇔ φ(x) ∧ φ(y) ∧ Sep(c, d, x, y). Also Cycl(x, y, z)|X can be deﬁned by the primitive
positive formula φ(x) ∧ φ(y) ∧ φ(z) ∧ Sep(c, x, y, z)

So a pp-interpretation of (P ; <, Cycl) in (P ; Sep, c, d, u) is simply given by the identity,
restricted to X. By Lemma 30, Low is pp-deﬁnable in (P ; <, Cycl), which concludes the
proof of the Lemma.
(cid:3)

Theorem 21. Let Γ be a reduct of P such that End(Γ) = hl, (cid:8)i. Then there are constants
a, b, c, d, u ∈ P such that ({0, 1}, 1IN3) is pp-interpretable in (Γ, a, b, c, d, u). Hence CSP(Γ)
is NP-complete.

Proof. The relation Sep is an orbit of End(Γ) = hl, (cid:8)i on P 3. So Theorem 5 implies that
Sep is primitively positive deﬁnable in Γ. By Lemma 31 there is pp-deﬁnition of Low in
(Γ, c, d, u) with c < d < u. By Theorem 17 we can ﬁnd a pp-interpretation of ({0, 1}, 1IN3) in
(Γ, a, b, c, d, u), where a, b are two additional constants. Hence CSP(Γ) is NP-complete.
(cid:3)

9. Main Results

In this section we complete the proof of the complexity dichotomy for the Poset-SAT(Φ)
problems that we announced in Theorem 1 and that we reformulated as CSPs on the reducts
of the random poset P. We have proven an even stronger dichotomy that remains interesting
even if P=NP. This dichotomy regards model-theoretic properties of the reducts of P and can
be also stated in terms of universal-algebra by what we saw in Section 3.5. We will phrase it
in Theorem 22.

9.1. An algebraic dichotomy. Let Γ be a reduct of P and ∆ be its model-complete core.
Throughout this paper we have studied the question whether there is a pp-interpretation of
the structure ({0, 1}; 1IN3) in ∆, extended by ﬁnitely many constants or not.
By Theorem 10 and Theorem 11 we know that this fact can be elegantly described with the
help of topological clones. We sum up our results and show that - for reducts of the random
poset - we can also give an additional characterization by weak near unanimity polymorphisms
(modulo endomorphism). First we are going to look in detail at the case, where < and ⊥ are
pp-deﬁnable.

Lemma 32. Let Γ be a reduct of P in which < and ⊥ are pp-deﬁnable. Then the following
are equivalent:

(1) There is a binary f ∈ Pol(Γ) which is not dominated.
(2) The relation Low is not pp-deﬁnable in Γ.
(3) e< or e≤ is a polymorphism of Γ.
(4) There is a binary f ∈ Pol(Γ) and endomorphisms e1, e2 ∈ End(Γ) such that

e1(f (x, y)) = e2(f (x, y))

(5) For all c1, . . . , cn ∈ Γ there is no clone homomorphism from Pol(Γ, c1, . . . , cn) onto 1.
(6) For all c1, . . . , cn ∈ Γ there is no continuous clone homomorphism from Pol(Γ, c1, . . . , cn)

onto 1.

(7) There is no pp-interpretation of ({0, 1}; 1IN3) in any expansion of Γ by ﬁnitely many

constants.

Proof.
The equivalences of the points (5)-(7) hold for all ω-categorical structures Γ and were discussed

28

M. KOMPATSCHER AND T. VAN PHAM

in Theorem 11.
(1) ↔ (2) This is the statement of Lemma 17.
(2) → (3): This is the statement of Theorem 18.
(3) → (4): Set f = e< respectively f = e≤.
(4) → (5): If there are e1, e2, f ∈ Pol(Γ) satisfying the equation e1(f (x, y)) = e2(f (x, y))
then there are also such polymorphisms ﬁxing ﬁnitely many elements c1, . . . , cn. This is
true for all ω-categorical cores, see Lemma 82 of [MBP15]. It follows that there is no clone
homomorphism from Pol(Γ, c1, . . . , cn) onto 1.
(7) → (2): This follows from the contraposition of Theorem 17.

(cid:3)

With Lemma 32 we are now able to show the following Theorem.

Theorem 22. Let Γ be a reduct of P and let ∆ be the model-complete core of Γ. Then the
following are equivalent:

(1) There is a binary f ∈ Pol(∆) and endomorphisms e1, e2 ∈ End(∆) such that

e1(f (x, y)) = e2(f (x, y))

or there is a ternary f ∈ Pol(∆) and endomorphisms e1, e2, e3 ∈ End(∆) such that

e1(f (x, x, y)) = e2(f (x, y, x)) = e3(f (x, x, y)).

(2) There is a pseudo Siggers polymorphism, i.e. a function f ∈ Pol(∆)(6) and endomor-

phism e1, e2 ∈ End(∆) such that

e1(f (x, y, x, z, y, z)) = e2(f (y, x, z, x, z, y)).

(3) For all c1, . . . , cn ∈ ∆ there is no clone homomorphism from Pol(∆) onto 1.
(4) For all c1, . . . , cn ∈ ∆ there is no continuous clone homomorphism from Pol(∆) onto

1.

(5) There is no pp-interpretation of ({0, 1}, 1IN3) in any expansion of ∆ by ﬁnitely many

constants.

Proof. First of all we remark that the equivalence of the points (2)-(6) holds for all ω-
categorical structures and was discussed in Theorem 11.

In Theorem 13 we saw that the model-complete core ∆ is either equal to Γ or a reduct of

(Q, <) or (ω, =).

Suppose the core ∆ is a reduct of (Q, <) or (ω, =). We know from the analysis of temporal
satisfaction problems that then the statement is true: By Theorem 10.1.1. in [Bod12] there
is no pp-interpretation of ({0, 1}, 1IN3) in ∆, if and only if an equation e1(f (x, x, y)) =
e2(f (x, y, x)) = e3(f (x, x, y)) holds in Pol(∆).

So let Γ = ∆. By Lemma 32 the equivalence (1)↔(6) holds when < and ⊥ are pp-
deﬁnable in Γ. In the remaining cases End(Γ) is equal to hli, h(cid:8)i or hl, (cid:8)i and we have a
pp-interpretation of ({0, 1}; 1IN3) in an extension of Γ with ﬁnitely many constants Theorems
17, 19, 20 and 21.
(cid:3)

We want to recall, that in all cases where Γ was a model-complete core itself, we obtained
deﬁnable subsets on which < is pp-deﬁnable by ﬁxing ﬁnitely many constants (cf. Section 8).
A natural question that arises from this is, whether this is true in a more general setting:

Question 1. Let ∆ = (D; R1, . . . , Rn) be a homogeneous structure and let Γ be a reduct
of ∆ that is a model-complete core. Further let Aut(Γ) 6⊇ Aut(D; Ri1 , . . . , Rin) for all
{Ri1 , . . . , Rin} ( {R1, . . . , Rn} , i.e. we need all the relations in ∆ to deﬁne the relations

A COMPLEXITY DICHOTOMY FOR POSET CONSTRAINT SATISFACTION

29

in Γ. Do we always ﬁnd constants c1, . . . , ck ∈ D and an orbit X of Aut(Γ, c1, . . . , ck) such
that the restrictions R1|X , . . . , Rn|X are pp-deﬁnable in (Γ, c1, . . . , ck)?
9.2. A complexity dichotomy. For the complexity of the CSPs of reducts of P that are
model-complete we have proven the following dichotomy:

Theorem 23. Let Γ be a reduct of P in a ﬁnite relational language and a model-complete
core. Under the assumption P6=NP either

• one of the relations Low, Betw, Cycl, Sep is pp-deﬁnable in Γ and CSP(Γ) is NP-

complete or

• CSP(Γ) is tractable.

Proof. If Low, Betw, Cycl or Sep is pp-deﬁnable in Γ, the CSP(Γ) is NP-complete by the
Theorems 19, 21, 20 and 17.

By Theorem 13 the only remaining case is the one, where < and ⊥ are pp-deﬁnable, but
Low is not. In this case e< or e≤ is a polymorphism of Γ by Theorem 18. Theorem 15 then
implies that the problem is tractable.
(cid:3)

Corollary 2. Let Γ be a reduct of P in a ﬁnite relational language. Under the assumption
P6=NP the problem CSP(Γ) is either NP-complete or solvable in polynomial time. Further the
“meta-problem” of deciding whether a given problem CSP(Γ) is tractable or NP-complete, is
decidable.

Proof. By Theorem 13 we know that either Γ is a model-complete core or g< or g⊥ are
endomorphisms of Γ. In the ﬁrst case the dichotomy holds by Theorem 23, in the second case
Γ is homomorphically equivalent to a reduct of (Q, <) and the dichotomy holds by the result
in [BK10] respectively [BK08].

The main result in [BPT13] imply that it is decidable if the relations <, ⊥, Low, Betw,
Cycl or Sep are pp-deﬁnable in Γ. By Lemma 5 the question whether Γ is model-complete
core or not is then also decidable. By Theorem 23 and Corollary 52 of [BK10] we have that
the meta-problem is decidable.
(cid:3)

We ﬁnish with an algebraic version of our dichotomy that is a direct implication of Theorem

22:

Corollary 3. Let Γ be a reduct of P in a ﬁnite relational language and let ∆ be its model
complete core. Under the assumption P6=NP either

• CSP(Γ) is NP-complete and all ﬁnite structures are pp-interpretable in ∆, extended

by ﬁnitely many constant, or

• CSP(Γ) is tractable and the conditions (1)-(6) in Theorem 22 hold.

(cid:3)

References

[Ang89]

Frank D Anger. On Lamport’s interprocessor communication model. ACM Transactions on Pro-
gramming Languages and Systems (TOPLAS), 11(3):404–417, 1989.

[BCKvO09] Manuel Bodirsky, Hubie Chen, Jan K´ara, and Timo von Oertzen. Maximal inﬁnite-valued con-

[BJ03]

[BK08]

[BK10]

straint languages. Theoret. Comput. Sci., 410(18):1684–1693, 2009.
Mathias Broxvall and Peter Jonsson. Point algebras for temporal reasoning: Algorithms and
complexity. Artiﬁcial Intelligence, 149(2):179–220, 2003.
Manuel Bodirsky and Jan K´ara. The complexity of equality constraint languages. Theory of Com-
puting Systems, 43(2):136–158, 2008.
Manuel Bodirsky and Jan K´ara. The complexity of temporal constraint satisfaction problems. J.
ACM, 57(2):Art. 9, 41, 2010.

30

[BN06]

[Bod05]

[Bod12]

[BP11]

[BP14]

[BP15a]

[BP15b]

[BPT13]

[Hod97]
[Jea98]

[Lam86]

[MBP15]

[PB16]

[Pin15]

M. KOMPATSCHER AND T. VAN PHAM

Manuel Bodirsky and Jaroslav Neˇsetˇril. Constraint satisfaction with countable homogeneous tem-
plates. J. Logic Comput., 16(3):359–373, 2006.
Manuel Bodirsky. The core of a countably categorical structure. In STACS 2005, pages 110–120.
Springer, 2005.
Manuel Bodirsky. Complexity classiﬁcation in inﬁnite-domain constraint satisfaction, 2012.
M´emoire HDR `a l’Universit´e Paris 7, arXiv:1201.0856v7.
Manuel Bodirsky and Michael Pinsker. Reducts of Ramsey structures. AMS Contemporary Math-
ematics, vol. 558 (Model Theoretic Methods in Finite Combinatorics), pages 489–519, 2011.
Manuel Bodirsky and Michael Pinsker. Minimal functions on the random graph. Israel Journal of
Mathematics, 200(1):251–296, 2014.
Manuel Bodirsky and Michael Pinsker. Schaefer’s theorem for graphs. J. ACM, 62(3):Art. 19, 52,
2015.
Manuel Bodirsky and Michael Pinsker. Topological Birkhoﬀ. Transactions of the American Math-
ematical Society, 367(4):2527–2549, 2015.
Manuel Bodirsky, Michael Pinsker, and Todor Tsankov. Decidability of deﬁnability. Journal of
Symbolic Logic, 78(4):1036–1054, 2013.
Wilfrid Hodges. A shorter model theory. Cambridge University Press, Cambridge, 1997.
Peter Jeavons. On the algebraic structure of combinatorial problems. Theoretical Computer Sci-
ence, 200(1):185–204, 1998.
Leslie Lamport. The mutual exclusion problem: part I-a theory of interprocess communication.
Journal of the ACM (JACM), 33(2):313–326, 1986.
Peter Jonsson Manuel Bodirsky and Trung Van Pham. The complexity of phylogeny constraint
satisfaction. Submitted. Arxiv:1503.07310, 2015.
Michael Pinsker and Libor Barto. The algebraic dichotomy conjecture for inﬁnite domain con-
straint satisfaction problems. preprint on the authors website, January 2016.
Michael Pinsker. Algebraic and model theoretic methods in constraint satisfaction. arXiv preprint
arXiv:1507.00931, 2015.

[PPP+14] P´eter P´al Pach, Michael Pinsker, Gabriella Pluh´ar, Andr´as Pongr´acz, and Csaba Szab´o. Reducts

[PPPS13]

of the random partial order. Advances in Mathematics, 267:94–120, 2014.
P´eter P´al Pach, Michael Pinsker, Andr´as Pongr´acz, and Csaba Szab´o. A new operation on partially
ordered sets. Journal of Combinatorial Theory, Series A, 120:1450–1462, 2013.

[PTJW85] M Paoli, WT Trotter Jr, and JW Walker. Graphs and orders in Ramsey theory and in dimension

[Sch78]

[Sze86]

theory. In Graphs and Order, pages 351–394. Springer, 1985.
Thomas J Schaefer. The complexity of satisﬁability problems. In Proceedings of the tenth annual
ACM symposium on Theory of computing, pages 216–226. ACM, 1978.
´Agnes Szendrei. Clones in universal algebra, volume 99 of seminaires de mathematiques su-
perieures. University of Montreal, 61, 1986.

Institut f¨ur Computersprachen, Theory and Logic Group, Technische Universit¨at Wien, Fa-

voritenstrasse 9/E1852, A-1040 Wien, Austria

E-mail address: michael@logic.at
URL: https://www.logic.at/staff/kompatscher/

Institut f¨ur Computersprachen, Theory and Logic Group, Technische Universit¨at Wien, Fa-

voritenstrasse 9/E1852, A-1040 Wien, Austria

E-mail address: pvtrung@math.ac.vn
URL: https://www.logic.at/staff/pvtrung/

