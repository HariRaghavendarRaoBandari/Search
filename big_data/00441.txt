Crowdsourcing On-street Parking Space Detection

Ruizhi Liao1, Cristian Roman1, Peter Ball1, Shumao Ou1, and Liping Chen2

1Department of Computing and Communication Technologies, Oxford Brookes University, United Kingdom

{rliao,pball,sou}@brookes.ac.uk, cristian@cristianroman.com, lipingch@ie.ibm.com

2Industry Solution, IBM Analytics, Ireland

Abstract

As the number of vehicles continues to grow, parking spaces are at a premium in city streets. Additionally, due to the lack
of knowledge about street parking spaces, heuristic circling the blocks not only costs drivers’ time and fuel, but also increases
city congestion. In the wake of recent trend to build convenient, green and energy-efﬁcient smart cities, we rethink common
techniques adopted by high-proﬁle smart parking systems, and present a user-engaged (crowdsourcing) and sonar-based prototype
to identify urban on-street parking spaces. The prototype includes an ultrasonic sensor, a GPS receiver and associated Arduino
micro-controllers. It is mounted on the passenger side of a car to measure the distance from the vehicle to the nearest roadside
obstacle. Multiple road tests are conducted around Wheatley, Oxford to gather results and emulate the crowdsourcing approach.
By extracting parked vehicles’ features from the collected trace, a supervised learning algorithm is developed to estimate roadside
parking occupancy and spot illegal parking vehicles. A quantity estimation model is derived to calculate the required number of
sensing units to cover urban streets. The estimation is quantitatively compared to a ﬁxed sensing solution. The results show that
the crowdsourcing way would need substantially fewer sensors compared to the ﬁxed sensing system.

on-street/roadside parking, crowdsourcing, sonar/ultrasonic, supervised learning

Index Terms

6
1
0
2

 
r
a

M
1

 

 
 
]

C
H
.
s
c
[
 
 

1
v
1
4
4
0
0

.

3
0
6
1
:
v
i
X
r
a

Crowdsourcing On-street Parking Space Detection

1

I. INTRODUCTION

Due to the lack of real-time knowledge about the roadside
parking occupancy, circling around urban streets to ﬁnd a
parking space not only wastes time and fuel, but also increases
trafﬁc ﬂows. The continuous growth of vehicles and the waves
of urbanization made the parking problem worse. A downtown
trafﬁc study [1] on several major cities reveals that cruising for
kerb vacancies is an often-overlooked source of congestion,
which accounts for up to 30 percent of total trafﬁc ﬂows1.
In order to quantify the wasted time and fuel, we made an
intuitive calculation based on the JustPark2 estimation that
heuristic searching takes an average of 6.75 minutes to ﬁnd a
parking spot in the UK. Assuming the turnover of a parking
spot is 10 cars a day, cruising for parking costs 67.5 minutes
per spot a day (24637.5 minutes a year). If the cruising speed
is 15 kilometers per hour (km/h), it generates 16.87 km per
spot a day (6157.55 km a year), or 615.755 litres fuel a year
for a single parking spot - based on a consumption of 10 litres
fuel per 100 km at the speed of 15 km/h. Imagine the number
of roadside parking spots worldwide, and its impact in both
ecological and economical terms.

The frustrating circling, and the above-mentioned time or
fuel wastes are exactly what an Intelligent Transportation
System (ITS) aims to address, or broadly speaking, to build
convenient, green and energy-efﬁcient Smart Cities. There
are various ITS or smart city projects related to parking
monitoring, such as private parking [2] [3], off-street parking
[4] [5] and on-street parking [6] [7].

Private parking originates from peer-to-peer based sharing
economy, whose concept is to rent out owners’ spare facilities,
e.g., Airbnb for rooms, Uber for cars, and JustPark for empty
driveways. Off-street parking refers to multi-storey car parks
or large ﬁelds that can accommodate hundreds of vehicles.
The occupancy of off-street parks can be easily obtained by
applying entrance counters, acoustic or vision based sensing
techniques. The parking availability is disseminated via APPs
or web portals (e.g., Parker and Parkopedia). On-street or
roadside parking refers to parking spaces along public roads.

1The surveyed cities include New York, San Francisco, Freiburg, Jerusalem,

Cape Town, Sydney and London.

2www.justpark.com.

It accounts for a considerable fraction of urban parking, and
moreover, it provides preferable access to drivers’ destinations.
However, on-street parking spaces are not usually monitored.
The reasons for that are twofold. First, comparing to off-
street parking, on-street parking has more severe environment,
e.g., harsh weather or light conditions, which may negatively
impact sensors’ functionalities. Secondly, although Smart City
implies the trend of using various sensing technologies to
instrument the city, it is rather expensive and unscalable to
dig underneaths or mount overhead for roadside parking due
to safety, road implementation, maintenance and municipal
coordination issues that may get involved.

For these reasons, we focus on on-street parking and present
a user-engaged Crowdsourcing Parking monitoring system,
which is named as CroPark. It employs ultrasonic sensors to
measure the distance from the vehicle to roadside, and uses
a supervised learning algorithm to estimate the number of
available parking spaces. Only a reduced set of the sensed data,
namely, the interpreted parked vehicles and empty spaces,
together with Global Positioning System (GPS) coordinates,
vehicle speed and timestamps, are transmitted to a central
server, where a parking occupancy map is built. The parking
availability information is updated as next CroPark vehicle
passes by, and disseminated to trafﬁc enforcement or users
via a mobile APP or a web portal.

The rest of the article is organized as follows. First, Section
II reviews relevant on-street parking systems, and summarizes
representative features of each work. By exploring other
systems, the contributions of CroPark are also presented. Then,
Section III explains the CroPark system and the supervised
learning algorithm. After that, Section IV analyses our drive-
test data and presents obtained results. Finally, Section VI
concludes the article and looks into future works.

II. RELATED WORK AND CONTRIBUTIONS

In this section, we overview prominent on-street parking
systems and summarize their representative features. By com-
paring CroPark with these parking systems, the contributions
of our work are described.

SFpark [6] is a U.S. federally-funded parking management
project in San Francisco, which spans from 2009 to 2014 with

2

TABLE I: Comparisons of On-street Parking Projects

On-street Parking Projects

Sensing Technologies

Remarks

SFpark [6], 2014

FASTPRK [7]

Street Parking System [8], 2013

Smart Parking [9]

Smart Santander [10], 2014

magnetometer

a complete on/off-street solution;

>1 sensor needed per spot

digging roads required

magnetic

a company portfolio including sensing, analysis, open data interface and APP;

1 sensor per spot

digging roads required

magnetic

82 sensors are deployed at Shenzhen Institute of Advanced Technology;

1 sensor per spot

digging roads required

infrared

a company portfolio including sensing, guiding, payment and management;

unspeciﬁed number

digging roads required

ferromagnetic

part of a smart city project;

1 sensor per spot

digging roads required

Integrated Smart Parking [11], ongoing

radar

sensing not only parking but also trafﬁc ﬂows;

Parking Spotter [12], ongoing

ParkNet [13], 2010

ParkSense [14], 2013

<1 sensor needed per spot

mounting overhead

sonar or radar

crowdsource sensing;

<1 sensor needed per spot

Ford proprietary application

sonar

crowdsource sensing;

<1 sensor needed per spot

environmental ﬁngerprinting to reduce GPS errors

mobile phone and WiFi

use beacons between mobile phone and WiFi to infer parking status;

1 mobile phone per spot

presence of both mobile phone and WiFi infrastructure required

a total budget of 46.2 million dollars. It adopts a classical
wireless sensor network structure, where the data ﬂows from
parking sensors and parking meters to a data warehouse via
wireless mesh networks. The system gives a complete on/off-
street parking solution and brings a list of beneﬁts: easier
to ﬁnd parking (searching time decreases by 43%), reduced
congestion (trafﬁc volume decreases by 8%), lower parking
rates (11 cents cheaper), fewer parking tickets (23% lower),
et cetera. However, the cost of the high-proﬁle parking sysem
is rather high. The SFpark pilot deployment installed 11700
magnetometer sensors and 300 pole-mounted mesh nodes for
8000 parking spaces (one or two sensors are installed in each
parking space). From SFpark’s ﬁnance ﬁgures, the parking
sensors cost 5.7 million dollars (approximately 480 dollars
each), which do not account for management, installation and
maintenance expenditure. FASTPRK (magnetic) [7], Street
Parking System (magnetic) [8], Smart Parking (infrared) [9]
and Smart Santander (ferromagnetic) [10] are similar parking
projects using different sensing techniques.

Integrated Smart Parking Solution [11] is a Siemens-led
ongoing project aiming at simplifying the searching process,
which launched a testing pilot in Berlin in September, 2015.
Different from the above sensor-burying approaches, radar
sensors are mouted on street lamps to scan a bigger area. The
radars not only monitor trafﬁc ﬂows but also parking spaces,
which can be either used for trafﬁc control or facilitating
drivers to ﬁnd a parking spot. The beneﬁts of the overhead
radar approach are claimed to be as follows. First, it is not
impaired by weather or light conditions. Secondly, it detects
more than just parking spots. For example, it can measure
vehicle speed, trafﬁc ﬂows and pedestrian ﬂows. Thirdly, it is
mounted on street lamps, which alleviates the infrastructure
changes.

Parking Spotter [12] is an ongoing joint work by Ford and
Georgia Tech. The idea is to leverage sonars and radars that
are already widely employed on Ford cars to sense the on-
street parking occupancy. The sensing results are updated to a
cloud server, and the results are presented to other Ford drivers

3

(a) GPS unit and Arduino Micro-controllers

(b) Rangeﬁnder mounted at Side Door

Fig. 1: Prototype Deployment

as an added-value service.

Mathur et al.

in [13] present ParkNet, a mobile street
parking system, which collects parking occupancy information
as vehicles pass by. ParkNet consists of a GPS receiver and
an ultrasonic rangeﬁnder. Through one-month runs of three
vehicles passing by the urban streets of Highland Park, New
Jersey, the authors built a parking map from collected data. In
order to achieve improved location accuracy, the authors uti-
lize an environmental ﬁngerprinting approach, namely, using
objects on the street to correct GPS errors.

Nawaz et al. in [14] propose a WiFi beacon association
based sensing system named ParkSense to estimate if a driver
has entered or driven away from a parking spot. More speciﬁ-
cally, ParkSense uses the WiFi association and de-association
changing rates to sense the parking status. From the empirical
evaluation, the authors claim that the WiFi beacon rate is
highly correlated with driver’s activity. The disadvantages of
the system are that 1) the presence of both mobile phone and
WiFi infrastructure are required, and 2) the access to spatially
distributed WiFi access points for analysis is assumed.

The features of the surveyed parking systems are summa-

rized in Table I.

The contributions of the article are summarized as follows.
Some high-proﬁle parking projects are overviewed. By looking
into their features, we rethink the common sensing solutions,
and present a crowdsourcing mobile sensing technique. A
supervised learning algorithm is developed for CroPark to
recognize parked cars and empty spaces. The algorithm uses
parked cars’ contouring vector extracted from the driving trace
to train a classiﬁer, which is used to differentiate parked cars
from road clutters. A simple estimation model is proposed to

calculate how many mobile sensing units are needed to cover
urban streets with certain updating frequency. The estimation
produced by the model is quantitatively compared to a ﬁxed
sensing solution. The results show that CroPark would need
signiﬁcantly lower number of sensing units than the ﬁxed
sensing system.

III. ON-STREET PARKING SPACE DETECTION:

PROTOTYPE, TESTING SCENARIO AND ALGORITHM

A. The Prototype System

The prototype kit consists of an HC-SR04 ultrasonic
rangeﬁnder, a GPS receiver and associated Arduino micro-
controllers. In the road test, we placed the prototype kit
under the windshield (Fig.1(a)) to provide the GPS receiver
with a clear view from satellites, while we led the ultrasonic
rangeﬁnder to the passenger door (Fig.1(b)) to measure the
distance from the vehicle to roadside. Note the video camera
above the ultrasonic sensor is not a part of the CroPark system.
The employment the camera is to record the ground truth to
compare it with the ultrasonic sensor data.

The employed ultrasonic sensor is set to transmit a short
pulse every 50 milliseconds. The emitted wave is bounced
back when there is an object in the way. By counting the
elapsed time, together with the sound speed in the air, the
distance to the object is measured. After interpolating the GPS
coordinates, the format of the measurement and an example
of the road test trace are given as follows.

(cid:26) timestamp/distance/latitude/longitude/speed

93777 ms/532 cm/51.748295/-1.14049621/24.85 km/h

4

(a) Drive-test Routes

(b) Trace of Fully-parked Route1

Fig. 2: Drive-test Routes and Trace Plot of Route1

to the central database. It

The measurement data is locally preprocessed to reduce
the data trafﬁc. In other words, only those data groups that
are interpreted as parked vehicles or empty spaces by the
algorithm are sent
is proposed
that the CroPark kits could be employed on public vehicles
such as buses and taxis, and they continually gather data as
they travel along their routes. The on-board communication
links or a 3G shield card can be used for the back-haul data
transmission. The central database has pre-installed parking
zones’ information (e.g., the capacity and GPS coordinates
of parking zones), which are used to identify illegal parking
vehicles and empty parking spaces from the received sonar
data. The inferred results are accessed via mobile APPs or
web portals by users or trafﬁc enforcement agents.

B. The Supervised Learning Algorithm

A supervised learning algorithm is developed to recognise
parked cars and empty spaces. We use contouring patterns that
are extracted from the drive-test trace to train a classiﬁer in the
purpose of discriminating parked cars and spaces from road
clutters.

1) Train the Classiﬁer: As shown in Fig.2(a), we conducted
a serial of drive tests on two roads in Wheatley, Oxford. High
Street (Route1) has two parks (park1 has 6 spaces and park2
has 1 space), and Church Road (Route2) has three parks (park3
has 1 space, park4 has 11 spaces and park5 has 5 spaces). In
our test, we repeatedly circled the two streets to emulate the
crowdsourcing approach.

The algorithm takes the drive-test trace as inputs and scans
the data in sequence. An example is illustrated in Fig.2(b)

when park1 and park2 of the Route1 are fully parked. As
can be observed from the ﬁgure, the sonar scanning presents
parked vehicles to distinctive U-shaped contours as the testing
car drives by. The contouring features allow us to distinguish
parked vehicles from road furnitures (e.g., the two poles as
shown in Fig.2(b)). The classiﬁer training patterns vector is
summarized as follows.

• Distance: From a driving-by car’s perspective, there is a
distance range that a parked vehicle should reside in. The
lower bound of the range corresponds to lateral safety
distance or minimum safety distance (Distancemin = 70
cm). In addition to the minimum safety distance, the
higher bound of the range is obtained by adding a car’s
width (Distancemax = 250 cm).

• Standard

many

The
clutters

distance
that

range
are

deviation:
road

ﬁlters
out
outside
[Distancemin, Distancemax], however, many still remain.
Standard deviation is used to quantify the dispersion
of a group of parked vehicle data. In particular,
the
standard deviation of the U-shaped bottom is relatively
ﬂat, which refers to the small-scale standard deviation
(σsmall = 10.9) and is used to describe the vehicles’ core
frame; while the standard deviation at the edge of the
U-shaped bottom is much larger, which refers to the
big-scale standard deviation (σbig = 51.3) and is used to
describe the vehicles’ edges accordingly.

• Length: Due to the fact of various vehicles’ length, we
adopt 2.1 meters as a bottom line (Lengthmin) to catego-
rize the trace for calculating the ”small-scale” standard

131415161718192021222350150250350450550αθRoute1, High StreetTime (s)Distance (cm)park2, 1 carpark1, 6 cars2 polesdeviation, and 9 meters as a upper bound (Lengthmax)
for deriving the ”large-scale” standard deviation.

• Angle: The angle between vehicle’s contouring vertices
and bottom is calculated using trigonometric functions.
The angle of the contour we obtained from the parked
vehicle trace ranges from 80◦ to 130◦ (a function of speed
and vehicle’s length). We apply this contour angle range
in the classiﬁer to mask out road furnitures. For example,
as shown in Fig.2(b), α = 87.97◦ is the angle of ﬁrst
parked car, which falls in the angle range, while θ =
55.69◦ is the angle of the two poles, which are masked
out as noise.

2) Classiﬁer: The above four contouring patters form a
feature vector, which is used to train the classiﬁer. The
classiﬁer interprets the fed data into groups of road clutters,
parked vehicles or empty spaces according to the features’
ascription. As illustrated in Algorithm 1, the classiﬁer iterates
through the gathered trace, obtains the indices within the
length range, and then checks whether the data are in line
with the above-mentioned features.

Algorithm 1: Classiﬁer Pseudocode
Input: Lengthmin,max, Distancemin,max, σsmall,big, Speed
Output: vecparked, vecempty
for len = 1 : length(T race) do

Durationmin,max = Lengthmin,max/Speed
Rangemin,max =
T race(:, 1) ∈ [T race(len, 1), T race(len, 1)+Durationmin,max]
(cid:46) Rangemin,max consists of all data indices in Lengthmin,max

if

std(T race(Rangemin, 2))<σsmall & std(T race(Rangemax, 2))>σbig
then

if Distance ∈ [Distancemin, Distancemax] & Angle ∈
[Anglemin, Anglemax] then
end
vecparked(end + 1) = [T race(len, 3), T race(len, 4)]

end

(cid:46) std() represents the standard deviation function

if T race(Rangemax, 1) ∈
[T race(len, 1), T race(len, 1) + Durationmax] then

if Distance>Distancemax then

vecempty(end + 1) = [T race(len, 3), T race(len, 4)]

end

end

end

C. Presentation of Illegally-Parked Cars and Empty Spaces

The software bundle, namely, Linux, Apache, MySQL, and
PHP (LAMP) is employed to present the interpreted data by
the classiﬁer. An example of the developed web portal showing
the parking status is shown in Fig.2(a).

5

1) Illegally-Parked Cars: Presenting illegally-parked cars
is straightforward. We ﬁrst infer the illegally-parked cars by
checking whether GPS coordinates of the detected cars are in
the parking database. Then we mark those cars that are outside
the permitted parking zones as illegal parking on the map.

2) Empty Spaces: The empty spaces can be presented in
two ways: either just a space or a space with variable length.
The former is derived using a predeﬁned length threshold, and
is suitable for line-delimited parking spaces; while the latter
is adaptively obtained by multiplying the time difference of
two neighbouring obstacles and the average speed, which is
suitable for un-delimited spaces and ﬂexible for compact cars
or long lorries.

3) Offsetting GPS: A GPS with high frequency refresh rate
is advisable. In order to accurately pinpoint the illegal paring
vehicles or empty spaces on the map, the GPS coordinates
obtained from the sensor need to be calibrated. In this article, a
pre-deﬁned list of outstanding environment signatures is used
to offset the GPS drift. In other words, we align the GPS
sensor data with the pre-deﬁned environment signatures when
the supervised learning algorithm recognizes the environment
signatures as the CroPark vehicle drives by.

IV. EMPIRICAL RESULTS

In this section, we evaluate the supervised learning algo-
rithm by examining the vehicle and space detection accuracy.
In our drive test, the average cruising speed is 20 km/h, and
the updating time is around 120 seconds, namely, we will pass
by the same point every 2 minutes.

A. Vehicle Detection

Table II-(a) gives parked cars’ statistics from park1 to park5
with 6 runs. The data format of x/y/z denotes ’number of
detected vehicles/ground truth/parking capacity’. For example,
in park1 of the ﬁfth run, there were 3 cars detected by the
algorithm, 3 cars actually parked, and 6 parking spaces in
total. The last column shows the false positives of each run,
which is the number of road clutters detected as vehicles.

The vehicle detection rate is 123/124 = 99.2%, and the
accuracy rate is 123/140 = 87.9% by counting the false
positives. Note, the accuracy will increase if the updating fre-
quency is higher or if there are more CroPark units employed,
the relationship of which is explored in the following Section
V and Fig. 4.

6

TABLE II: Drive-test Results
(a) Parked Vehicle Detection

Run no.

park1

park2

park3

park4

park5

false positives

1
2
3
4
5
6

6/6/6
6/6/6
6/6/6
2/2/6
3/3/6
4/4/6

1/1/1
1/1/1
0/0/1
0/0/1
1/1/1
1/1/1

1/1/1
1/1/1
1/1/1
1/1/1
1/1/1
1/1/1

10/10/11
10/10/11
10/10/11
10/10/11
9/10/11
7/7/11

5/5/5
5/5/5
5/5/5
5/5/5
5/5/5
5/5/5

2
4
3
3
2
2

(b) Space Detection

Run no.

1
2
3
4
5
6

park1

0/0/0
0/0/0
0/0/0

4/9.39m, 9.04m/ > 1
3/6.24m, 5.54m/ > 1
2/6.52m, 7.09m/ > 1

park2

0/0/0
0/0/0

1/7.00m/1
1/9.62m/1

0/0/0
0/0/0

park3

0/0/0
0/0/0
0/0/0
0/0/0
0/0/0
0/0/0

park4

1/6.86m/1
1/6.56m/1
1/7.23m/1
1/6.11m/1

2/9.45m/ > 1
4/7.19m/ > 1

park5

0/0/0
0/0/0
0/0/0
0/0/0
0/0/0
0/0/0

B. Space Detection

As the on-street parking zones on High Street and Church
Road are un-delimited parking, the length and the parking
manner of the parked cars will greatly affect the detection
results. Therefore, it may not be accurate to infer the number
of parking spaces by deducting the number of detected cars
from the parking capacity. For this reason, we give parking
spaces in two ways, namely, the number of parking spaces by
subtracting the number of detected cars from the parking ca-
pacity, and parking spaces with detected available length. The
data format of x/y/z in the Table II-(b) denotes ’number of
detected spaces by subtracting from parking capacity/detected
spaces with variable length/ground truth’. For example, in
park1 of the ﬁfth run, 3 spaces are inferred by the subtraction,
2 spaces with different length are obtained from the length-
auto-adjusting algorithm, and more than 1 space is observed
in the recorded video. The trace plot of Run 5 and its space
map are shown in Fig.3. The space map Fig.3(b) provides
the parking space with extra length information, which is
particularly important to customized requests. For example,
a Smart for-two Cabrio can ﬁt in a 3-meter space, while a
BMW M5 may require a 6-meter space.

V. ESTIMATING CROPARK UNITS NEEDED FOR A CITY

Let s, p and w denote the area of a city, the ratio that total
roads account for a city area, and the average road width,
respectively. The total road length of the city can be obtained:
L = s·p/w. If the parking occupancy map updating frequency

and the vehicle detection accuracy rate are τ and γ, the number
of CroPark units m needed to cover the city can be estimated:

m =

L
ν · 1

τ · γ

,

(1)

where ν is the average cruising speed of CroPark vehicles.

In order to compare with ﬁxed sensing techniques, we use
this model to estimate the number of CroPark units needed
for San Francisco. The upper east part of San Francisco has
an area of 19.26km2, where the SFpark pilot is deployed
(excluding the metropolitan area). Assuming urban streets
account for around 10% of the city area, and the average street
width in San Francisco is 10 meters. The total road length is
then derived as:

19.26 · 106 · 10%

10

L =

= 1.926 · 105 meters.

If the parking occupancy map is updated every 2 minutes
(i.e., τ = 0.0083), the vehicle detection accuracy rate is γ =
87.9%, and the average city cruising speed is assumed to be
ν = 20 kilo meters per hour (i.e., 5.55 meters per second), the
required number of CroPark units to be mounted on vehicles
is:

m =

1.926 · 105

5.55 · 120 · 87.9%

= 328,

7

(a) Raw Data

(b) Space Map

Fig. 3: Trace Plot of Run 5

from the vehicle to roadside. It is proposed that CroPark
units could be placed on vehicles such as buses, taxis or
private cars to continually gather data as they travel along
their routes. CroPark leverages the users’ heuristic searching
and converts users to stakeholders. On the one hand, CroPark
requires much lower number of sensor units compared with
the ﬁxed sensing solutions thanks to users’ participation; on
the other hand, CroPark cuts down the time and fuel consumed
in searching thanks to the dissemination of parking availability
information. As soon as the initial occupancy map is built up
in the crowdsourcing manner, CroPark can substantially bring
down the searching effort.

As for next steps, lane-changing detection, a balanced guid-
ance algorithm and a right price model for on-street parking
need to be considered.

1) Lane-changing detection: The designed algorithm and
current sonar conﬁgurations can only handle the single
lane situation. If the vehicle moves to a second lane,
then the sonar may misunderstand the extra distance
as empty parking spaces. One solution is to employ a
high-precision GPS, however, it may be difﬁcult as the
adjacent lanes are within just a few meters. The other
solution could be employing dual ranger sensors posi-
tioned at each end of the car to measure the differentials.
For example, if the vehicle moves away from one lane to
another, then the difference of the two sensors’ reading
remains constant if we adjust the lateral time difference.
2) Balanced guidance algorithm: Owing to the updating
delay and some parking areas are more preferable than

Fig. 4: Number of Units against Updating Time

which is signiﬁcantly lower than 12000 sensors deployed for
8000 parking spaces in the SFpark pilot area.

Note that, this simple estimation model is indifferent to the
number or spatial distribution of parking bays, as all points
of the roads will be covered by a ν · 1
τ rolling window with
frequency τ and accuracy γ.

Fig.4 also illustrates how many CroPark units are needed
against updating time (i.e., 1/τ) as cruising speed ν and the
vehicle detection accuracy γ vary.

VI. CONCLUSIONS

In this article, we present CroPark that is consisted of an
ultrasonic ranger and a GPS receiver to determine the distance

0204060801001200100200300400500600Time (s)Distance (cm)  Raw dataParking spaceParked carLonLat  GPSParking spaceParked car6.24 m5.54 m9.45 m40608010012014016018002004006008001000120014001600Updating Time (s)No. of Units  ν=10km/h, γ=87.9%ν=20km/h, γ=87.9%ν=30km/h, γ=87.9%ν=20km/h, γ=77.9%ν=20km/h, γ=97.9%[15] G. M. Dias, B. Bellalta, and S. Oechsner, “Predicting occupancy trends
in barcelona’s bicycle service stations using open data,” in SAI Intelligent
Systems Conference (IntelliSys), 2015, pp. 439–445, Nov 2015.

8

others, people may ﬂock to the same places and then
ﬁnd the spaces already occupied. One solution is to
provide future occupancy prediction based on open data
or history data [15]. The other solution is to design a
reservation system or a balancing algorithm that guilds
people to different locations if multiple requests to the
same space are received.

3) Right price model: As pointed out

in [1], drivers
are actually encouraged to circle blocks to ﬁnd on-
street parking spaces if the kerb parking is free or
under-priced. In other words, drivers ﬂock to the cheap
kerb parking spaces, and thus create more cruising and
congestions. This suggests further research is needed to
ﬁnd the right price model for on-street parking.

REFERENCES

[1] D. Shoup, “Cruising for parking,” Transport Policy, vol. 13, no. 6, 2006.
[2] Amsterdam Smart City. www.amsterdamsmartcity.com/projects/detail/

id/64/slug/smart-parking. [Accessed 8 December 2015].

[3] Garagescanner, “USharePark: smart secUres system to SHARE PARK-
ing places in private garages.” www.ec.europa.eu/easme/en/sme/6851/
usharepark-smart-secures-system-share-parking-places-private-garages.
[Accessed 8 December 2015].

[4] E. Polycarpou, L. Lambrinos, and E. Protopapadakis, “Smart parking
solutions for urban areas,” in IEEE 14th International Symposium and
Workshops on a World of Wireless, Mobile and Multimedia Networks
(WoWMoM), pp. 1–6, 2013.

[5] S. Mahmud, G. Khan, M. Rahman, H. Zafar, et al., “A survey of intel-
ligent car parking system,” Journal of applied research and technology,
vol. 11, no. 5, pp. 714–726, 2013.

[6] SFpark. www.sfpark.org. [Accessed 8 December 2015].
[7] Worldsensing, “FASTPRK: The easiest way to park.” www.fastprk.com.

[Accessed 8 December 2015].

[8] Z. Zhang, X. Li, H. Yuan, and F. Yu, “A street parking system using
wireless sensor networks,” International Journal of Distributed Sensor
Networks, vol. 2013, 2013.

[9] Smart Parking, “On-street parking.” www.smartparking.com/on-street.

[Accessed 8 December 2015].

[10] Smart Santander. www.smartsantander.eu/index.php/testbeds/item/132-

santander-summary. [Accessed 8 December 2015].

[11] Siemens,

“Integrated

Smart

Parking

Solution.”

www.mobility.siemens.com/mobility/global/en/urban-mobility/road-
solutions/integrated-smart-parking-solution/Pages/integrated-smart-
parking-solution.aspx. [Accessed 8 December 2015].

[12] Ford,

“Parking Spotter.” www.media.ford.com/content/fordmedia/

fna/us/en/news/2015/01/06/mobility-experiment-parking-spotter-
atlanta.html. [Accessed 8 December 2015].

[13] S. Mathur, T. Jin, N. Kasturirangan, J. Chandrasekaran, W. Xue,
M. Gruteser, and W. Trappe, “Parknet: drive-by sensing of road-side
parking statistics,” in Proceedings of the 8th international conference on
Mobile systems, applications, and services, pp. 123–136, ACM, 2010.
[14] S. Nawaz, C. Efstratiou, and C. Mascolo, “Parksense: A smartphone
based sensing system for on-street parking,” in Proceedings of the 19th
annual international conference on Mobile computing & networking,
pp. 75–86, ACM, 2013.

