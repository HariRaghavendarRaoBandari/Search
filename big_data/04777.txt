6
1
0
2

 
r
a

M
 
5
1

 
 
]

.

A
N
h
t
a
m

[
 
 

1
v
7
7
7
4
0

.

3
0
6
1
:
v
i
X
r
a

AN ENSEMBLE-PROPER ORTHOGONAL

DECOMPOSITION METHOD FOR THE

NONSTATIONARY NAVIER-STOKES EQUATIONS∗
MAX GUNZBURGER†, NAN JIANG†, AND MICHAEL SCHNEIER†

Abstract. The deﬁnition of partial diﬀerential equation (PDE) models usually involves a set of
parameters whose values may vary over a wide range. The solution of even a single set of parameter
values may be quite expensive. In many cases, e.g., optimization, control, uncertainty quantiﬁca-
tion, and other settings, solutions are needed for many sets of parameter values. We consider the
case of the time-dependent Navier-Stokes equations for which a recently developed ensemble-based
method allows for the eﬃcient determination of the multiple solutions corresponding to many pa-
rameter sets. The method uses the average of the multiple solutions at any time step to deﬁne a
linear set of equations that determines the solutions at the next time step. To signiﬁcantly further
reduce the costs of determining multiple solutions of the Navier-Stokes equations, we incorporate
a proper orthogonal decomposition (POD) reduced-order model into the ensemble-based method.
The stability and convergence results for the ensemble-based method are extended to the ensemble-
POD approach. Numerical experiments are provided that illustrate the accuracy and eﬃciency of
computations determined using the new approach.

Key words. Ensemble methods, proper orthogonal decomposition, reduced-order models,

Navier-Stokes equations.

1. Introduction. Computing an ensemble of solutions of ﬂuid ﬂow equations for
a set of parameters or initial/boundary conditions for, e.g., quantifying uncertainty or
sensitivity analyses or to make predictions, is a common procedure in many engineer-
ing and geophysical applications. One common problem faced in these calculations
is the excessive cost in terms of both storage and computing time. Thanks to recent
rapid advances in parallel computing as well as intensive research in ensemble-based
data assimilation, it is now possible, in certain settings, to obtain reliable ensemble
predictions using only a small set of realizations. Successful methods that are cur-
rently used to generate perturbations in initial conditions include the Bred-vector
method, [11], the singular vector method, [12], and the ensemble transform Kalman
ﬁlter, [13]. Despite all these eﬀorts, the current level of available computing power
is still insuﬃcient to perform high-accuracy ensemble computations for applications
that deal with large spatial scales such as numerical weather prediction. In such ap-
plications, spatial resolution is often sacriﬁced to reduce the total computational time.
For these reasons the development of eﬃcient methods that allow for fast calculation
of ﬂow ensembles at a suﬃciently ﬁne spatial resolution is of great practical interest
and signiﬁcance.

Only recently, a ﬁrst step was taken in [3, 5] where a new algorithm was proposed
for computing an ensemble of solutions of the time-dependent Navier-Stokes equations
(NSE) with diﬀerent initial condition and/or body forces. At each time step, the new
method employs the same coeﬃcient matrix for all ensemble members. This reduces
the problem of solving multiple linear systems to solving one linear system with mul-
tiple right-hand sides. There have been many studies devoted to this type of linear
algebra problem and eﬃcient iterative methods have been developed to signiﬁcantly
save both storage and computing time, e.g., block CG [20], block QMR [19], and block

∗Supported by the US Air Force Oﬃce of Scientiﬁc Research grant FA9550-15-1-0001 and US
†Department of Scientiﬁc Computing, Florida State University, Tallahassee, FL 32306-4120

Department of Energy Oﬃce of Science grants de-sc0009324 and de-sc0010678.

(mgunzburger@fsu.edu, njiang@fsu.edu, mschneier89@gmail.com).

1

GMRES [18]. Even for some direct methods, such as the simple LU factorization, one
can save considerable computing cost.

Because the main goal of the ensemble algorithm is computational eﬃciency, it
is natural to consider using reduced-order modeling (ROM) techniques to further
reduce the computational cost. In this paper, we study a Galerkin proper orthogonal
decomposition (POD-G-ROM) based ensemble algorithm for approximating solutions
of the NSE.

Accordingly, our aim in this paper is to develop and demonstrate a procedure for
the rapid solution of multiple solutions of the NSE, requiring only the solution of one
reduced linear system with multiple right-hand sides at each time step.

1.1. Previous works on ensemble algorithms. The ensemble method given
in [3] is ﬁrst-order accurate in time and requires a CFL-like time step condition to
ensure stability and convergence. Two ensemble eddy viscosity numerical regulariza-
tions are studied in [5] to relax the time step restriction. These two methods utilized
the available ensemble data to parametrize the eddy viscosity based on a direct calcu-
lation of the kinetic energy in ﬂuctuations without further modeling. They both give
the same parametrization for each ensemble member and thus preserve the eﬃciency
of the ensemble algorithm. The extension of the ensemble method to higher-order
accurate ensemble time discretization is nontrivial. For instance, the method is not
extensible to the most commonly used Crank-Nicolson scheme. Making use of a spe-
cial combination of a second-order in time backward diﬀerence formula and an explicit
second-order Adams-Bashforth treatment of the nonlinear term, a second-order ac-
curate in time ensemble method was developed in [4]. The ensemble algorithm was
further used in [6] to model turbulence. By analyzing the evolution of the model
variance, it was proved that the proposed ensemble based turbulence model converges
to statistical equilibrium, which is a desired property of turbulence models.

2. Notation and preliminaries. Let Ω ⊂ Rd, d = 2, 3, denote an open reg-
ular domain with boundary ∂Ω and let [0, T ] denote a time interval. Consider J
Navier-Stokes equations on a bounded domain, each subject to the no-slip boundary
condition, and driven by J diﬀerent initial conditions uj,0(x) and body force densities
f j(x, t), i.e., for j = 1, . . . , J, we have



t + uj · ∇uj − ν(cid:52)uj + ∇pj = f j(x, t)
uj

∇ · uj = 0
uj = 0

uj(x, 0) = uj,0(x)

∀x ∈ Ω × (0, T ]
∀x ∈ Ω × (0, T ]
∀x ∈ ∂Ω × (0, T ]
∀x ∈ Ω,

(2.1)

where ν denotes the given constant kinematic viscosity of the ﬂuid and uj(x, t) and
pj(x, t) respectively denote the velocity and pressure of the ﬂuid ﬂow.
We denote by (cid:107) · (cid:107) and (·,·) the L2(Ω) norm and inner product, respectively, and
denote by (cid:107) · (cid:107)1 a norm on the Sobolev space H 1(Ω). The space H−1(Ω) denotes
0 (Ω) = {v ∈ H 1(Ω) : v =
the dual space of bounded linear functionals deﬁned on H 1
0 on ∂Ω}; this space is equipped with the norm

(cid:107)f(cid:107)−1 = sup
0(cid:54)=v∈X

(f, v)
(cid:107)∇v(cid:107)

∀f ∈ H−1(Ω).

The solutions spaces X for the velocity and Q for the pressure are respectively

2

deﬁned as

X :=[H 1

Q :=L2

0 (Ω)]d = {v ∈ [L2(Ω)]d : ∇v ∈ [L2(Ω)]d×d and v = 0 on ∂Ω}
0(Ω) =

q ∈ L2(Ω) :

qdx = 0

.

(cid:110)

(cid:90)

Ω

(cid:111)

For s = {0, 1} and for a function v(x, t) that is well deﬁned on Ω × [0, T ] we deﬁne
the norms

(cid:107)|v|(cid:107)2,s :=

(cid:107)v(·, t)(cid:107)2

sdt

and

(cid:107)|v|(cid:107)∞,s := ess sup[0,T ](cid:107)v(·, t)(cid:107)s.

(cid:16)(cid:90) T

0

(cid:17) 1

2

The subspace of X consisting of weakly divergence free functions is deﬁned as

V := {v ∈ X : (∇ · v, q) = 0 ∀q ∈ Q} ⊂ X.

A weak formulation of (2.1) is given as follows: for j = 1, . . . , J, ﬁnd uj : (0, T ] →

X and pj : (0, T ] → Q that, for almost all t ∈ (0, T ], satisfy

 (uj

t , v) + (uj · ∇uj, v) + ν(∇uj,∇v) − (pj,∇ · v) = (f j, v)

(∇ · uj, q) = 0

uj(x, 0) = uj,0(x).

∀v ∈ X
∀q ∈ Q

(2.2)

Conforming velocity and pressure ﬁnite element spaces based on a regular trian-

gulation of Ω having maximum triangle diameter h are respectively denoted by

Xh ⊂ X

and

Qh ⊂ Q.

We assume that the pair of spaces (Xh, Qh) satisfy the discrete inf-sup (or LBBh)
condition required for stability of ﬁnite element approximation; we also assume that
the ﬁnite element spaces satisfy the approximation properties

vh∈Xh

(cid:107)v − vh(cid:107) ≤ Chs+1 ∀v ∈ [H s+1(Ω)]d
∀v ∈ [H s+1(Ω)]d
∀q ∈ H s(Ω)

inf
(cid:107)∇(v − vh)(cid:107) ≤ Chs
(cid:107)q − qh(cid:107) ≤ Chs

inf

vh∈Xh

inf
qh∈Qh

for a constant C > 0 having value independent of h. The total number of ﬁnite element
degrees of freedom is given by dim Xh + dim Qh. A concrete example for which the
LBBh stability condition approximation estimates are known to hold is the family of
Taylor-Hood P s-P s−1, s ≥ 2, element pairs [10, 17]. For the most commonly used
s = 2 Taylor-Hood element pair based on a tetrahedral grid, dim Xh + dim Qh is
roughly equal to three times the number of vertices plus twice the number of edges.
Further, in this paper we will need to solve the NSE (2.1) using a second order
time stepping scheme (e.g., Crank Nicolson). We will assume the FE approximations
satisfy the following error estimates:

(cid:107)u − uh(cid:107) ≤ C(hs+1 + ∆t2)
(cid:107)∇(u − uh)(cid:107) ≤ C(hs + ∆t2).

3

(2.3)

(2.4)

The subspace of Xh consisting of discretely divergence free functions is deﬁned as

Vh := {vh ∈ Xh : (∇ · vh, qh) = 0 ∀qh ∈ Qh} ⊂ X.

Note that in most cases, and for the Taylor-Hood element pair in particular, Vh (cid:54)⊂ V ,
i.e., discretly divergence free functions are not divergence free.

As is common to do, we deﬁne the explicitly skew-symmetric trilinear form intro-

duced by Temam given by

b∗(w, u, v) :=

1
2

(w · ∇u, v) − 1
2

(w · ∇v, u)

∀u, v, w ∈ [H 1(Ω)]d.

This form satisﬁes the bounds, [23]

b∗(w, u, v) ≤ C(cid:107)∇w(cid:107)(cid:107)∇u(cid:107)((cid:107)v(cid:107)(cid:107)∇v(cid:107))1/2
b∗(w, u, v) ≤ C((cid:107)w(cid:107)(cid:107)∇w(cid:107))1/2(cid:107)∇u(cid:107)(cid:107)∇v(cid:107)

∀u, v, w ∈ X,
∀u, v, w ∈ X.

Moreover, we have that b∗(u, u, v) = (u · ∇u, v) for all u ∈ V, v ∈ X so that we
may replace the nonlinear term (uj · ∇uj, v) in (2.2) by b∗(uj, uj, v). The advantage
garnered through the use of b∗(w, u, v) compared to b(w, u, v) is that b∗(w, u, u) = 0
for all u, w ∈ X whereas b(w, u, u) = 0 only if w ∈ V .

Definition 2.1. Let tn = n∆t, n = 0, 1, 2, . . . , N , where N := T /∆t, denote a
partition of the interval [0, T ]. For j = 1, . . . , J and n = 0, 1, 2, . . . , N , let uj,n(x) :=
uj(x, tn). Then, the ensemble mean is deﬁned, for n = 0, 1, 2, . . . , N , by

J(cid:88)

j=1

< u >n:=

1
J

uj,n.

For j = 1, . . . , J, let uj,0

h (x) ∈ Xh denote approximations, e.g., interpolants or
projections, of the initial conditions uj,0(x). Then, the full space-time discretization
of (2.1), or more precisely of (2.2), we consider is given as follows: given, for j =
h (x) ∈ Xh and f j(x, t) ∈ [H−1(Ω)]d for almost every t ∈ (0, T ], ﬁnd, for
1, . . . , J, uj,0
(x) ∈ Qh satisfying
n = 0, 1, . . . , N −1 and for j = 1, . . . , J, uj,n+1

(x) ∈ Xh and pj,n+1

h

(cid:0) uj,n+1

h



− uj,n
∆t

h

, vh
−(pj,n+1

h

(cid:1) + b∗(< uh >n, uj,n+1

h

h

,∇ · vh) + ν(∇uj,n+1
(∇ · uj,n+1

h

h

h − < uh >n, uj,n

, vh)+b∗(uj,n
,∇vh) = (f j,n+1, vh)
, qh) = 0

h , vh)
∀vh ∈ Xh
∀qh ∈ Qh.

(2.5)

We refer to this discretization as En-full-FE indicating that we are referring to an
ensemble-based discretization of (2.2) using a high-dimensional ﬁnite element space.
This ensemble-based discretization of the NSE is noteworthy because the system (2.5)
is not only linear in the unknown functions uj,n+1
(x), but because of
the use of ensembles, we also have that the coeﬃcient matrix associated with (2.5)
is independent of j, i.e., at each time step, all members of the ensemble can be
determined from J linear algebraic systems all of which have the same coeﬃcient
matrix. On the other hand, the linear system can be very large because in practice
dim Xh + dim Qh can be very large. This observation, in fact, motivates interest in
building reduced-order discretizations of the NSE.

(x) and pj,n+1

h

h

4

Because Xh and Qh are assumed to satisfy the LBBh condition, (2.5) can be
h (x) ∈ Xh and
more compactly expressed as follows: given, for j = 1, . . . , J, uj,0
f j(x, t) ∈ [H−1(Ω)]d for almost every t ∈ (0, T ], ﬁnd, for n = 0, 1, . . . , N − 1 and for
j = 1, . . . , J, uj,n+1

(x) ∈ Vh satisfying

(cid:0) uj,n+1

h

h

− uj,n
∆t

h

(cid:1) + b∗( < uh >n, uj,n+1

h

, vh

+ ν(∇uj,n+1

h

,∇vh) = (f j,n+1, vh)

, vh) + b∗(uj,n

h − < uh >n, uj,n
∀vh ∈ Vh.

h , vh)

(2.6)

Note that in general it is a diﬃcult matter to construct a basis for the space Vh so
that in practice, one still works with (2.5). We introduce the reduced system (2.6) so
as to facilitate the analyses given in later sections.

3. Proper orthogonal decomposition (POD) reduced-order modeling.
The POD model reduction scheme can be split into two main stages: an oﬄine por-
tion and an online portion. In the oﬄine portion, one collects into what is known as
a snapshot set the solution of a partial diﬀerential equation (PDE), or more precisely,
of a discrete approximation to that solution, for a number of diﬀerent input functions
and/or evaluated at several time instants. The snapshot set is hopefully generated in
such a way that it is representative of the behavior of the exact solution. The snap-
shot set is then used to generate a POD basis, hopefully of much smaller cardinality
compared to that of the full ﬁnite element space, that provides a good approximation
to the data present in the snapshot set itself. In the online stage, the POD basis is
used to generate approximate solutions of the PDE for other input functions; ideally
these will be accurate approximations achieved much more cheaply compared to the
use of a standard method such as a standard ﬁnite element method.

In the rest of this section, we delve into further detail about the generation of the
snapshot set, the construction of the POD basis in a ﬁnite element setting, and how
the POD basis can be used to construct a reduced-order model for the NSE in the
ensemble framework. This section will focus on the framework speciﬁc to this paper;
for more detailed presentations about POD, see, e.g., [1, 7, 14, 16].

3.1. Snapshot set generation. The oﬄine portion of the algorithm begins with
the construction of the snapshot set which consists of the solution of the PDE for a
number of diﬀerent input functions and/or evaluated at several diﬀerent time instants.
Given a positive integer NS, let 0 = t0 < t1 < ··· < tNS = T denote a uniform
partition of the time interval [0, T ]. Note that this partition is usually much coarser
than the partition of [0, T ] into N intervals, introduced in Deﬁnition 2.1, which is used
to discretize the PDE, i.e., we have NS (cid:28) N . We ﬁrst deﬁne the set of snapshots
corresponding to exact solutions of the weak form of the NSE (2.2). For j = 1, . . . , JS,
S (x) ∈ X the exact
we select JS diﬀerent initial conditions uj,0(x) and denote by uj,m
velocity ﬁeld satisfying (2.2), evaluated at t = tm, m = 1, . . . , NS, which corresponds
to the initial condition uj,0(x). Then, the space spanned by the JSNS so obtained
snapshots is deﬁned as

S (x)}JS ,NS

XS := span{uj,m

j=1,m=1 ⊂ X.
(3.1)
h,S (x) ∈ Xh, j = 1, . . . , JS,
In the same manner, we can construct a set of snapshots uj,m
m = 1, . . . , NS, of ﬁnite element approximations of the velocity solution determined
from a standard ﬁnite element discretization of (2.2). Note that one could also deter-
mine, at lesser cost but with some loss of accuracy, the snapshots from the ensemble-
based discretization (2.5). We can then also deﬁne the space spanned by the JSNS

5

function uj,m
matrix A as

A =(cid:0)(cid:126)u1,1

discrete snapshots as

Xh,S := span{uj,m

h,S (x)}JS ,NS

j=1,m=1 ⊂ Vh ⊂ Xh.

(3.2)
Note that S = dim Xh,S ≤ JSNS. The snapshots are ﬁnite element solutions so the
span of the snapshots is a subset of the ﬁnite element space Xh. Additionally, it is
important to note that by construction, the snapshots satisfy the discrete continuity
equation so that the span of the snapshots is indeed a subspace of the discretly
divergence free subspace Vh ⊂ Xh.

If we denote by (cid:126)uj,m

the vector of coeﬃcients corresponding to the ﬁnite element
h,S (x), where K = dim Xh, we may also deﬁne the K × JSNS snapshot

S

S , (cid:126)u1,2

S , . . . , (cid:126)u1,NS

S

, (cid:126)u2,1

S , (cid:126)u2,2

S , . . . , (cid:126)u2,NS

S

, . . . , (cid:126)uJS ,1

S

, (cid:126)uJS ,2

S

, . . . , (cid:126)uJS ,NS

S

i.e., the columns of A are the ﬁnite element coeﬃcient vectors of the discrete snapshots.
To construct a reduced basis that results in accurate approximations, the snapshot
set must contain suﬃcient information about the dynamics of the solution of the PDE.
In our context, this requires one to not only take a suﬃcient number of snapshots
with respect to time, but also to select a set of initial conditions that generate a set
of solutions that is representative of the possible dynamics one may encounter when
using other initial conditions. In the POD framework for the NSE, the literature on
selecting this set is limited. One of the few algorithms which has been explored in the
ensemble framework is the previously mentioned Bred-vectors algorithm given in [11].
Further exploration of this and other approaches for the selection of initial conditions
is a subject for future research.

next construct the POD basis {ϕi(x)}R
XR := span{ϕi}R

3.2. Construction of the POD basis. Using the set of discrete snapshots, we
i=1. We deﬁne the POD function space XR as
i=1 ⊂ XS ⊂ Vh ⊂ Xh.

There are a number of equivalent ways in which one may characterize the problem
of determining XR; for a full discussion see [2, Section 2]. For example, the POD
basis construction problem can be deﬁned as follows: determine an orthonormal ba-
sis {ϕi}S
i=1 solves the following
constrained minimization problem

i=1 for XS such that for all R ∈ {1, . . . , S}, {ϕi}R

(cid:1),

JS(cid:88)

NS(cid:88)

k=1

l=1

(cid:13)(cid:13)(cid:13)uk,l
h,s − R(cid:88)

j=1

min

(cid:13)(cid:13)(cid:13)2

(uk,l

h,s, ϕj)ϕj

(3.3)

subject to (ϕi, ϕj) = δij

for i, j = 1, . . . , R,

where δij is the Kronecker delta and the minimization is with respect to all orthonor-
mal bases for XS. We note that by deﬁning our basis in this manner we elect to
view the snapshots as ﬁnite element functions as opposed to ﬁnite element coeﬃcient
vectors.
Deﬁne the JSNS × JSNS correlation matrix C = AT MA, where M denotes the
Gram matrix corresponding to full ﬁnite element space. Then, the problem (3.3) is
equivalent to determine the R dominant eigenpairs {λi, (cid:126)ai} satifying

C(cid:126)ai = λi(cid:126)ai,

|(cid:126)ai| = 1,

i (cid:126)aj = 0 if i (cid:54)= j, and λi ≥ λi−1 > 0,
(cid:126)aT

(3.4)

6

where | · | denotes the Euclidean norm of a vector. The ﬁnite element coeﬃcient
vectors corresponding to the POD basis functions are then given by

(cid:126)ϕi =

1√
λi

A(cid:126)ai,

Alternatively, we can let M = ST S, and deﬁne (cid:101)A = SA so that C = AT MA = (cid:101)AT(cid:101)A
(cid:101)A; the vectors (cid:126)ai, i = 1, . . . , R are then given as the ﬁrst R left singular vectors of (cid:101)A

and then determine the singular value decomposition of the modiﬁed snapshot matrix

i = 1, . . . , R.

(3.5)

√

which correspond to the ﬁrst R singular values σi =

λi.

3.3. POD reduced-order modeling. We next illustrate how a POD basis is
used to construct a reduced-order model for the NSE within the ensemble framework.
The discretized system that deﬁnes the POD approximation mimics that for the full
ﬁnite element approximation, except that now we seek an approximation in the POD
space XR having the basis {ϕi}R
i=1. Speciﬁcally, for j = 1, . . . , J, we deﬁne the
i=1(uj,0, ϕi)ϕi(x) ∈ XR and then
POD approximate initial conditions as uj,0
R (x) ∈ XR, for n = 0, 1, . . . , N − 1 and for
pose the following problem: given uj,0
∈ XR satisfying
j = 1, . . . , J, ﬁnd uj,n+1

R (x) =(cid:80)R

(cid:0) uj,n+1

R

− uj,n
∆t

R

R

, ϕ(cid:1)+b∗(< uR >n, uj,n+1

R

, ϕ) + b∗(uj,n
,∇ϕ) = (f j,n+1, ϕ)

R − < uR >n, uj,n
∀ϕ ∈ XR.

R , ϕ)

(3.6)

+ ν(∇uj,n+1

R

We refer to this discretization as En-POD indicating that we are referring to an
ensemble-based discretization of (2.2) using a low-dimensional POD space. Note
that because XR ⊂ Vh, i.e., the POD approximation is by construction discretely
divergence free, the pressure term in the POD-discretized NSE (3.6) drops out and
we are left with a system involving only the POD approximation to the velocity. One
further point of emphasis is that the J initial conditions used in (3.6) are diﬀerent
from the JS initial conditions used to construct the snapshot set, i.e., we use JS initial
conditions to solve the full ﬁnite element system (2.5) to determine the snapshots, and
now solve J additional approximations of the NSE by solving the much smaller POD
system (3.6).

As was the case for (2.5), the POD system (3.6) is linear in the unknown uj,n+1
and the associated coeﬃcient matrix does not depend on j, i.e., it is the same for all
realizations of the initial condition. On the other hand, (3.6) is a system of R equations
in R unknowns whereas (2.5) involves dim Xh + dim Qh equations in the same number
of unknowns, where R and dim Xh + dim Qh denote the total number of POD and
ﬁnite element degrees of freedom, respectively. Thus, if R (cid:28) dim Xh +dim Qh, solving
(3.6) requires much less cost compared to solving (2.5). In this way the oﬄine cost of
constructing the POD basis can be amortized over many online solves using the much
smaller POD system. We address the assembly costs related to (3.6) in Section 6.

R

time stability of solutions of (3.6).

4. Stability analysis of En-POD. We prove the conditional, nonlinear, long-
The L2(Ω) projection operator ΠR: L2(Ω) → XR is deﬁned by

(u − ΠRu, ϕ) = 0

∀ϕ ∈ XR.

(4.1)
Denote by (cid:107)| · (cid:107)|2 the spectral norm for symmetric matrices and let MR denote the
R × R POD mass matrix with entries [MR]i,i(cid:48) = (ϕi, ϕ(cid:48)
i) and SR denote the R × R

7

matrix with entries [SR]i,i(cid:48) = [MR]i,i(cid:48) + ν(∇ϕi,∇ϕi(cid:48)), i, i(cid:48) = 1, . . . , R. It is shown in
[8] that

(4.2)
Theorem 4.1. [Stability of En-POD] For n = 0, . . . , N − 1 and j = 1, . . . , J, let

∀ϕ ∈ XR.

satisfy (3.6). Suppose the time-step condition

(cid:107)∇ϕ(cid:107) ≤(cid:0)(cid:107)|SR(cid:107)|2(cid:107)|M−1

R (cid:107)|2

(cid:1)1/2(cid:107)ϕ(cid:107)
R − < uR >n)(cid:107)2(cid:1)∆t ≤ 1

for j = 1, . . . , J

(4.3)

ν∆t

4

(cid:107)∇uj,n

R (cid:107)2 +

ν∆t

4

n−1(cid:88)

n(cid:48)=0

(cid:107)∇uj,n(cid:48)+1

R

(cid:107)2

(4.4)

(cid:107)uj,0

R (cid:107)2 +

1
2

ν∆t

4

R (cid:107)2
(cid:107)∇uj,0

for j = 1, . . . , J.

uj,n+1
R

(cid:0)Cν−1(cid:107)|SR(cid:107)|1/2

2 (cid:107)∇(uj,n
holds. Then, for n = 1, . . . , N ,

n−1(cid:88)

(cid:107)uj,n(cid:48)+1

R

− uj,n(cid:48)

R (cid:107)2 +

(cid:107)uj,n

R (cid:107)2 +

1
4

≤ n−1(cid:88)

n(cid:48)=0

∆t
2ν

n(cid:48)=0
(cid:107)f j,n(cid:48)+1(cid:107)2−1 +

1
2

1
2

R

in (3.6). By the skew symmetry of b∗(·,·,·), we have
Proof. Set ϕ = uj,n+1
R (cid:107)2 +
(cid:107)uj,n
(cid:107)uj,n+1
(cid:107)uj,n+1
1
2
R − < uR >n, uj,n
+ ∆tb∗(uj,n

R (cid:107)2 + ν∆t(cid:107)∇uj,n+1
− uj,n

R ) = ∆t(f j,n+1, uj,n+1
Applying the Cauchy-Schwarz and Young inequalities to the right-hand side yields

(cid:107)2 − 1
2

R , uj,n+1

− uj,n

(cid:107)2

).

R

R

R

R

R

− uj,n
R (cid:107)2 + ν∆t(cid:107)∇uj,n+1
− uj,n
R )

R

(cid:107)2

(4.5)

Next, we bound the trilinear term using the interpolation inequalities and (4.2):
−b∗(uj,n

R − < uR >n, uj,n
≤ C(cid:107)∇(uj,n

R

R

R

R

R

∆t
2ν

(cid:107)2 +

(cid:107)uj,n

R (cid:107)2 +

R , uj,n+1

(cid:107)uj,n+1
1
2
+ ∆tb∗(uj,n
≤ ν∆t
2

(cid:107)2 − 1
(cid:107)uj,n+1
1
2
2
R − < uR >n, uj,n
R , uj,n+1
(cid:107)f j,n+1(cid:107)2−1.
(cid:107)∇uj,n+1
(cid:113)
− uj,n
R )
(cid:107)uj,n+1
R − < uR >n)(cid:107)(cid:107)∇uj,n
R (cid:107)
(cid:113)
R − < uR >n)(cid:107)(cid:107)uj,n
R · (uj,n+1
C(cid:107)∇ · (uj,n
(cid:113)
(cid:107)uj,n+1
R (cid:107)
R − < uR >n)(cid:107)(cid:107)∇uj,n
R − < uR >n)(cid:107)(cid:107)∇uj,n
R (cid:107)
R (cid:107)(cid:107)|SR(cid:107)|1/4
R (cid:107)(cid:107)|SR(cid:107)|1/4

R − < uR >n)(cid:107)(cid:107)∇uj,n
R − < uR >n)(cid:107)(cid:107)∇uj,n

R

R

R

R

(cid:107)uj,n+1
2 (cid:107)|M−1
2 (cid:107)|M−1

− uj,n

− uj,n

+

1
2

≤ C(cid:107)∇(uj,n

1
2

C(cid:107)∇ · (uj,n

+
≤ C(cid:107)∇(uj,n
C(cid:107)∇(uj,n

+

1
2

− uj,n
R )(cid:107)

R

R (cid:107)(cid:107)∇(uj,n+1
− uj,n
R )(cid:107)
R (cid:107)(cid:107)∇(uj,n+1
− uj,n
R (cid:107)|1/4
R (cid:107)|1/4

R (cid:107)(cid:107)∇(uj,n+1
2 (cid:107)uj,n+1
2 (cid:107)uj,n+1

R

R

R

R

R )(cid:107)
− uj,n
− uj,n
R )(cid:107)
R (cid:107)
− uj,n
− uj,n
R (cid:107).

(4.6)

By construction, the POD basis functions are orthonormal with respect to the L2(Ω)
inner product so that (cid:107)|MR(cid:107)|2 = (cid:107)|M−1
R , uj,n+1
R − < uR >n)(cid:107)(cid:107)∇uj,n

R − < uR >n, uj,n
≤ C(cid:107)∇(uj,n

R (cid:107)|2 = 1. Then, (4.6) reduces to

R (cid:107)(cid:107)|SR(cid:107)|1/4

2 (cid:107)uj,n+1

− uj,n
R (cid:107).

−b∗(uj,n

− uj,n
R )

R

R

8

Using Young’s inequality again results in

−∆tb∗(uj,n

R − < uR >n, uj,n
≤ C∆t2(cid:107)|SR(cid:107)|1/2

R , uj,n+1
2 (cid:107)∇(uj,n

R

− uj,n
R )

R − < uR >n)(cid:107)2(cid:107)∇uj,n

R (cid:107)2 +

(cid:107)uj,n+1

R

− uj,n

R (cid:107)2.

1
4

Combining with (4.5) results in

(cid:107)uj,n+1

R

1
2

(cid:107)2− 1
(cid:107)uj,n
2
≤ ∆t
2ν

1
4

− uj,n

(cid:107)uj,n+1

R (cid:107)2 +
2
(cid:107)f j,n+1(cid:107)2−1 + C∆t2(cid:107)|SR(cid:107)|1/2

R (cid:107)2 +

R

ν∆t

(cid:107)∇uj,n+1

R

(cid:107)2

2 (cid:107)∇(uj,n

R − < uR >n)(cid:107)2(cid:107)∇uj,n

R (cid:107)2.

Adding and subtracting ν∆t
R (cid:107)2 +

(cid:107)uj,n

1
2

(cid:107)uj,n+1
ν∆t

R

+

(cid:107)2 − 1
2

(cid:110)(cid:107)∇uj,n+1

R

4 (cid:107)∇uj,n
(cid:107)uj,n+1

R (cid:107)2 yields
− uj,n

(cid:107)2 +(cid:0)1 − C∆tν−1(cid:107)|SR(cid:107)|1/2

R (cid:107)2 +

1
4

R

ν∆t

4

2 (cid:107)∇(uj,n

R (cid:107)2(cid:111)
(cid:110)(cid:107)∇uj,n+1
R (cid:107)2(cid:111)
R − < uR >n)(cid:107)2(cid:1)(cid:107)∇uj,n

(cid:107)2 − (cid:107)∇uj,n

R

4

Assuming that the restriction (4.3) holds, we have

≤ ∆t
2ν

(cid:107)f j,n+1(cid:107)2−1.

(cid:0)1 − C∆tν−1(cid:107)|SR(cid:107)|1/2

2 (cid:107)∇(uj,n

ν∆t

4

(cid:107)uj,n+1

Combining the last two results then yields
(cid:107)uj,n+1
− uj,n
R (cid:107)2
(cid:107)2 − (cid:107)∇uj,n

(cid:110)(cid:107)∇uj,n+1

(cid:107)uj,n
(cid:107)2 − 1
2
ν∆t

R (cid:107)2 +

1
2

1
4

+

R

R

4

R

R (cid:107)2 ≥ 0.

R − < uR >n)(cid:107)2(cid:1)(cid:107)∇uj,n
R (cid:107)2(cid:111)

(cid:107)∇uj,n+1

ν∆t

+

R

4

(cid:107)2 ≤ ∆t
2ν

(cid:107)f j,n+1(cid:107)2−1.

Summing up the above inequality results in (4.4).

5. Error analysis of En-POD. We next provide an error analysis for En-POD

solutions.

Lemma 5.1. [L2(Ω) norm of the error between snapshots and their projections

onto the POD space] We have

JS NS(cid:88)

(cid:13)(cid:13)(cid:13)uj,m
h,S − R(cid:88)
JS(cid:88)
NS(cid:88)
(cid:13)(cid:13)(cid:13)uj,m
h,S − R(cid:88)

(uj,m

m=1

NS(cid:88)

j=1

i=1

m=1

i=1

1

JSNS

1
NS

h,S , ϕi)ϕi

(cid:13)(cid:13)(cid:13)2
(cid:13)(cid:13)(cid:13)2 ≤ JS

i=R+1

JS NS(cid:88)

i=R+1

λi.

(5.2)

(uj,m

h,S , ϕi)ϕi

=

λi

(5.1)

and thus for j = 1, . . . , JS,

Proof. The proof of (5.1) follows exactly the proof of [7, Theorem 3]; (5.2) is then

a direct consequence of (5.1).

Lemma 5.2. [H 1(Ω) norm of the error between snapshots and their projections

in the POD space] We have

JS(cid:88)

NS(cid:88)

j=1

m=1

(cid:13)(cid:13)(cid:13)∇(cid:16)

h,S − R(cid:88)

uj,m

1

JSNS

i=1

9

(cid:17)(cid:13)(cid:13)(cid:13)2

JS NS(cid:88)

i=R+1

(uj,m

h,S , ϕi)ϕi

=

λi(cid:107)∇ϕi(cid:107)2

(5.3)

and thus for j = 1, . . . , JS,

NS(cid:88)

m=1

(cid:13)(cid:13)(cid:13)∇(cid:16)

h,S − R(cid:88)

uj,m

i=1

1
NS

(uj,m

h,S , ϕi)ϕi

(cid:17)(cid:13)(cid:13)(cid:13)2 ≤ JS

JS NS(cid:88)

i=R+1

λi(cid:107)∇ϕi(cid:107)2.

(5.4)

Proof. The proof of (5.3) follows exactly the proof of [9, Lemma 3.2]; (5.4) is then

direct consequence of (5.3).
Lemma 5.3. [Error in the projection onto the POD space] Consider the partition
0 = t0 < t1 < ··· < tNS = T used in Section 3.1. For any u ∈ H 1(0, T ; [H s+1(Ω)]d),
let um = u(·, tm). Then, the error in the projection onto the POD space XR satisﬁes
the estimates

(cid:107)um − ΠRum(cid:107)2

inf

j∈{1,...,JS}

2
NS

NS(cid:88)

m=1

(cid:107)um − uj,m

S (cid:107)2 + C(h2s+2 + (cid:52)t4) + 2JS

JS NS(cid:88)

i=R+1

λi

(5.5)

1
NS

NS(cid:88)

m=1

≤

NS(cid:88)

1
NS

(cid:107)∇(um − ΠRum)(cid:107)2

m=1

≤

inf

j∈{1,...,JS}

2
NS

NS(cid:88)

m=1

((cid:107)∇(um − uj,m

S )(cid:107)2 + (cid:107)|SR(cid:107)|2(cid:107)(um − uj,m

S )(cid:107)2)

(5.6)

JS NS(cid:88)

+ (C + h2(cid:107)|SR(cid:107)|2)h2s + (C + (cid:107)|SR(cid:107)|2)(cid:52)t4 + 2JS

(cid:107)∇ϕi(cid:107)2λi.

i=R+1

Proof. By (4.1) and the Cauchy-Schwarz inequality, we have

(cid:107)um − ΠRum(cid:107)2 = (um − ΠRum, um − ΠRum)

= (um − ΠRum, um − ϕ) + (um − ΠRum, ϕ − ΠRum)
= (um − ΠRum, um − ϕ) ≤ (cid:107)um − ΠRum(cid:107)(cid:107)um − ϕ(cid:107)

∀ϕ ∈ XR

so that

(cid:107)um − ΠRum(cid:107) ≤ (cid:107)um − ϕ(cid:107)
S − uj,m

∀ϕ ∈ XR.
h,S − ϕ) for all j = 1, . . . , JS.
S ) + (uj,m
h,S , ϕi)ϕi and using the triangle inequality as well as

h,S =(cid:80)R

h,S ) + (uj,m

We rewrite um − ϕ = (um − uj,m
i=1(uj,m
Setting ϕ = ΠRuj,m
Lemma 5.1, we have, for j = 1, . . . , JS,

1
NS

(cid:107)um − ΠRum(cid:107)2

NS(cid:88)

m=1

≤ 1
NS

≤ 2
NS

NS(cid:88)
NS(cid:88)

m=1

((cid:107)um − uj,m

(cid:107)um − uj,m

h,S(cid:107) + (cid:107)uj,m

S (cid:107) + (cid:107)uj,m
S − uj,m
(cid:16)

h2s+2 + (cid:52)t4(cid:17)

S (cid:107)2 + C

h,S − ΠRuj,m
JS NS(cid:88)

+ 2JS

λi

h,S(cid:107))2

m=1

i=R+1

10

from which (5.5) easily follows.

Similarly, by using Lemmas 4.2 and 5.2, we have

NS(cid:88)

1
NS

(cid:107)∇(um − ΠRum)(cid:107)2

NS(cid:88)

(cid:16)(cid:107)∇(um − uj,m

m=1

≤ 1
NS

≤ 2
NS

≤ 2
NS

≤ 2
NS

m=1

NS(cid:88)

NS(cid:88)

m=1

NS(cid:88)

S )(cid:107) + (cid:107)∇(uj,m

S − uj,m
h,S )(cid:107)

h,S − ΠRum)(cid:107)(cid:17)2

+ (cid:107)∇(uj,m

h,S − ΠRuj,m

h,S )(cid:107) + (cid:107)∇(ΠRuj,m

S )(cid:107)2 + C(cid:0)h2s + (cid:52)t4(cid:1)

(cid:107)∇(um − uj,m

m=1

+ 2JS

JS NS(cid:88)

i=R+1

+ 2(cid:107)|SR(cid:107)|2

1
NS

(cid:107)∇(um − uj,m

+ 2(cid:107)|SR(cid:107)|2

1
NS

(cid:107)∇(um − uj,m

(cid:16)

m=1

+ 2(cid:107)|SR(cid:107)|2

S − ΠRum(cid:107)2(cid:17)

(cid:107)∇ϕi(cid:107)2λi

m=1

h,S − ΠRuj,m

(cid:16)(cid:107)ΠRuj,m

(cid:107)∇ϕi(cid:107)2λi
NS(cid:88)
S )(cid:107)2 + C(cid:0)h2s + (cid:52)t4(cid:1) + 2JS
NS(cid:88)

(cid:16)(cid:107)uj,m
h,S − uj,m
(cid:16)
h2s+2 + (cid:52)t4(cid:17)

S )(cid:107)2 + C

h2s + (cid:52)t4(cid:17)

+ (cid:107)|SR(cid:107)|2

S (cid:107)2 + (cid:107)uj,m

NS(cid:88)

+ 2JS

m=1

2
NS

m=1

S (cid:107)2 + (cid:107)ΠRuj,m

i=R+1

JS NS(cid:88)
S − um(cid:107)2(cid:17)
JS NS(cid:88)

(cid:107)∇ϕi(cid:107)2λi

i=R+1

(cid:107)um − uj,m
S (cid:107)2

from which (5.6) easily follows.

To bound the error between the POD based approximations and the true solu-

tions, we assume the following regularity for the true solutions and body forces:

uj ∈ L∞(0, T ; H s+1(Ω)) ∩ H 1(0, T ; H s+1(Ω)) ∩ H 2(0, T ; L2(Ω)),

pj ∈ L2(0, T ; H s(Ω)),

and f j ∈ L2(0, T ; L2(Ω)).

R be the error between the true solution and the POD approxi-

Let ej,n = uj,n − uj,n
mation, then we have the following error estimates.
Theorem 5.4 (Error analysis of En-POD). Consider the method (2.6) and the
partition 0 = t0 < t1 < ··· < tNS = T used in Section 3.1. Suppose that for any
0 ≤ n ≤ NS, the following conditions hold

C(cid:52)t(cid:107)|SR(cid:107)|1/2

2

ν

(cid:107)∇(uj,n

R − < uR >n)(cid:107)2 < 1 ,

11

j = 1, ..., J.

(5.7)

Then, for any 1 ≤ N ≤ NS, there is a positive constant C such that

N−1(cid:88)

(cid:107)ej,N(cid:107)2 + C∆t

1
2

n=0

ν(cid:107)∇ej,n+1(cid:107)2

(cid:32)
∆t2 + h2s + ∆t(cid:107)|SR(cid:107)|−1/2
h2s∆t−1 + (cid:107)|SR(cid:107)|1/2

≤ C
+ (cid:107)|SR(cid:107)|−1/2

2

2

+ (cid:107)|SR(cid:107)|2∆t4 + (cid:107)|SR(cid:107)|2h2s+2

(cid:16)

NS(cid:88)

2 ∆t3
((cid:107)∇(um − uj,m

2 h2s+2∆t−1 + (cid:107)|SR(cid:107)|1/2
JS NS(cid:88)

(cid:17)(cid:33)

1
NS

m=1

inf

(cid:107)∇ϕi(cid:107)2λi

S )(cid:107)2

j∈{1,...,JS}

+ (1 + NS (cid:107)|SR(cid:107)|−1/2

2

)

+ (cid:107)|SR(cid:107)|2(cid:107)um − uj,m

S (cid:107)2) + JS

Proof. For j = 1,··· , J, the true solutions of the NSE uj satisﬁes

i=R+1

uj,n+1 − uj,n

(

∆t

, ϕ) + b∗(uj,n+1, uj,n+1, ϕ) + ν(∇uj,n+1,∇vh) − (pj,n+1,∇ · ϕ)
= (f j,n+1, ϕ) + Intp(uj,n+1; ϕ) ,

for any ϕ ∈ XR ,

where Intp(uj,n+1; ϕ) is deﬁned as

Intp(uj,n+1; ϕ) = (

uj,n+1 − uj,n

∆t

− uj

t (tn+1), ϕ) .

(5.8)

(5.9)

Let
ej,n = uj,n − uj,n

where ΠRun
gives

R = (uj,n − ΠRuj,n) + (ΠRuj,n − uj,n

j = 1, ..., J ,
j ∈ XR is the L2 projection of uj,n in XR. Subtracting (3.6) from (5.9)

R ) = ηj,n + ξj,n
R ,

, ϕ) + ν(∇ξj,n+1

R

,∇ϕ) + b∗(uj,n+1, uj,n+1, ϕ)

−b∗(< uR >n, uj,n+1

R

, ϕ) − b∗(uj,n

R − < uR >n, uj,n

R , ϕ) − (pj,n+1,∇ · ϕ)

(5.10)

, ϕ) − ν(∇ηj,n+1,∇ϕ) + Intp(uj,n+1; ϕ) .

ξj,n+1
R

(

− ξj,n
∆t

R

ηj,n+1 − ηj,n

= −(

∆t

∈ XR and rearrange the nonlinear terms. By the deﬁnition of the L2

) = 0. Thus (5.10) becomes

R

Set ϕ = ξj,n+1
projection, we have (ηj,n+1 − ηj,n, ξj,n+1
(cid:107)ξj,n
R (cid:107)2 +

R

R

1
∆t

−b∗(uj,n

(

(cid:107)2 − 1
2

(cid:107)ξj,n+1
1
1
2
2
= −b∗(uj,n+1, uj,n+1, ξj,n+1
R − < uR >n, uj,n+1
− uj,n
−ν(∇ηj,n+1,∇ξj,n+1

R

R

R

R

(cid:107)ξj,n+1
− ξj,n
R (cid:107)2) + ν(cid:107)∇ξj,n+1
) + b∗(uj,n
R , uj,n+1

R
, ξj,n+1
)
) + (pj,n+1,∇ · ξj,n+1

R

R

(cid:107)2

R

R , ξj,n+1
) + Intp(uj,n+1; ξj,n+1
12

R

R

) .

)

(5.11)

Now we bound the right hand side of the equation above. First, for the nonlinear
R − < uR >n
term, adding and subtracting both b∗(uj,n+1, uj,n+1
, uj,n+1 − uj,n, ξj,n+1

) and b∗(uj,n

, ξj,n+1

R

R

)

R

R

R

, ξj,n+1

R , ξj,n+1

R , uj,n+1
)

) + b∗(uj,n
− uj,n
) − b∗(uj,n+1 − uj,n, uj,n+1
R − < uR >n, uj,n+1
) − b∗(uj,n+1 − uj,n, uj,n+1

R

R

) + b∗(uj,n

R

)

R

, ξj,n+1
− uj,n
R
, ξj,n+1
)

R

R , ξj,n+1

R

R

R

R

R

R
, ξj,n+1

R
, ξj,n+1

), we have
− b∗(uj,n+1, uj,n+1, ξj,n+1
R − < uR >n, uj,n+1
+ b∗(uj,n
= −b∗(uj,n+1, ej,n+1, ξj,n+1
− b∗(ej,n, uj,n+1
= −b∗(uj,n+1, ηj,n+1, ξj,n+1
− b∗(ηj,n, uj,n+1
− b∗(uj,n
+ b∗(uj,n
= −b∗(uj,n+1, ηj,n+1, ξj,n+1
− b∗(ηj,n, uj,n+1
− b∗(uj,n
+ b∗(uj,n
+ b∗(uj,n

R
, ξj,n+1

R

) − b∗(ξj,n

R

R

R , uj,n+1
R − < uR >n, ej,n+1 − ej,n, ξj,n+1
)
R − < uR >n, uj,n+1 − uj,n, ξj,n+1

R

R

R

)

, ξj,n+1

)

R

) − b∗(uj,n+1 − uj,n, uj,n+1

R

, ξj,n+1

R

)

)

R

, ξj,n+1
R − < uR >n, ηj,n, ξj,n+1

R

) + b∗(uj,n

R

R , uj,n+1

) − b∗(ξj,n
R − < uR >n, ηj,n+1, ξj,n+1
R − < uR >n, ξj,n
)
R − < uR >n, uj,n+1 − uj,n, ξj,n+1

R , ξj,n+1

R

R

R

R

) .

We estimate the nonlinear terms as follows

)

(5.12)

)

(5.13)

(cid:107)2 + Cν−1(cid:107)∇uj,n+1(cid:107)2(cid:107)∇ηj,n+1(cid:107)2 ,

b∗(uj,n+1,ηj,n+1, ξj,n+1

)

R

(cid:107)2 + Cν−1(cid:107)∇(uj,n+1 − uj,n)(cid:107)2(cid:107)∇uj,n+1

(cid:107)2

R

(cid:107)

R

R

R

R

R

R

R

(cid:107)

, ξj,n+1

(cid:107)∇ξj,n+1

(cid:107)∇ξj,n+1

(cid:107)(cid:107)∇ξj,n+1

≤ C(cid:107)∇uj,n+1(cid:107)(cid:107)∇ηj,n+1(cid:107)(cid:107)∇ξj,n+1
≤ ν
64
b∗(uj,n+1 − uj,n, uj,n+1
)
≤ C(cid:107)∇(uj,n+1 − uj,n)(cid:107)(cid:107)∇uj,n+1
≤ ν
64
≤ ν
64
ν
64
≤ ν
64
≤ ν
64

(cid:107)∇ uj,n+1 − uj,n
(cid:90) tn+1
(cid:90)
(cid:90) tn+1
(cid:90)
(cid:90) tn+1

1
∆t
(cid:107)∇uj

(cid:107)∇ξj,n+1

(cid:107)∇ξj,n+1

(cid:107)∇ξj,n+1

(cid:107)∇ξj,n+1

(∇uj

|∇uj

(cid:107)2 +

(cid:107)2 +

(cid:107)2 +

(cid:107)2 +

C∆t2

C∆t2

C∆t2

1
∆t

C∆t

∆t

=

tn

tn

ν

ν

ν

ν

R

R

R

R

R

Ω

Ω

(

(

(

(

(

tn

t(cid:107)2dt)(cid:107)∇uj,n+1

(cid:107)2 ,

(cid:107)2(cid:107)∇uj,n+1

(cid:107)2

R

t )dt)2dΩ)(cid:107)∇uj,n+1

R

(5.14)

(cid:107)2

t|2dt)dΩ)(cid:107)∇uj,n+1

R

(cid:107)2

b∗(ηj,n,uj,n+1

R

, ξj,n+1

)

R

≤ C(cid:107)∇ηj,n(cid:107)(cid:107)∇uj,n+1
≤ ν
64

(cid:107)∇ξj,n+1

R

R

13

(cid:107)(cid:107)∇ξj,n+1

(cid:107)

R

(cid:107)2 + Cν−1(cid:107)∇ηj,n(cid:107)2(cid:107)∇uj,n+1

R

(5.15)

(cid:107)2,

b∗(ξj,n

R ,uj,n+1

R

(cid:107)

R

R

R

, ξj,n+1
)
2(cid:107)∇uj,n+1
(cid:107)(cid:107)∇ξj,n+1
R (cid:107) 1
2(cid:107)ξj,n
R (cid:107) 1
≤ C(cid:107)∇ξj,n
2(cid:107)∇ξj,n+1
2(cid:107)ξj,n
≤ C(cid:107)∇ξj,n
(cid:107)
R (cid:107) 1
R (cid:107) 1
(cid:107)2 +
≤ C((cid:107)∇ξj,n+1
(cid:107)∇ξj,n
1

(δ(cid:107)∇ξj,n
(cid:107)2 +
≤ C((cid:107)∇ξj,n+1
1

≤ (
(cid:107)∇ξj,n+1
(cid:107)2 +
(cid:107)∇ξj,n
ν
8

R (cid:107)(cid:107)ξj,n
R (cid:107))
R (cid:107)2 +
1
δ
R (cid:107)2) +
C

ν
64

R

R

R

R

R (cid:107))
(cid:107)ξj,n
ν2(cid:107)ξj,n
R (cid:107)2,

b∗(uj,n

R − < uR >n, ηj,n+1, ξj,n+1

R

)

≤ C(cid:107)∇uj,n
≤ ν
64

(cid:107)∇ξj,n+1

R

R − < uR >n (cid:107)(cid:107)∇ηj,n+1(cid:107)(cid:107)∇ξj,n+1

R

(cid:107)

(cid:107)2 + Cν−1(cid:107)∇uj,n

R − < uR >n (cid:107)2(cid:107)∇ηj,n+1(cid:107)2 ,

b∗(uj,n

R − < uR >n, ηj,n, ξj,n+1

R

)

≤ C(cid:107)∇uj,n
≤ ν
(cid:107)∇ξj,n+1
64
R − < uR >n, ξj,n
The next term, b∗(uj,n
Note that by skew symmetry and Lemma 1

R

R , ξj,n+1

R

R − < uR >n (cid:107)(cid:107)∇ηj,n(cid:107)(cid:107)∇ξj,n+1

R

(cid:107)

(cid:107)2 + Cν−1(cid:107)∇uj,n

R − < uR >n (cid:107)2(cid:107)∇ηj,n(cid:107)2 .

(5.16)

(5.17)

(5.18)

), is the key term in the error analysis.

b∗(uj,n

)

R

= −(cid:16)

R − <uR >n, ξj,n
R , ξj,n+1
R − ξj,n+1
R − < uR >n, ξj,n
= b∗(uj,n
(cid:16)
R − < uR >n) · ∇ξj,n+1
(uj,n
− 1
2

(cid:16)∇ · uj,n

R − < uR >n,

R

R

)

, ξj,n+1
R
R − ξj,n+1
, ξj,n
R − ξj,n+1
ξj,n

R

R

(cid:17)
(cid:17) · ξj,n+1

R

(5.19)

(cid:17)

.

)

R

R

R , ξj,n+1

R

R − < uR >n, ξj,n

Using standard estimates for each additive term (with ε = 1/(2(cid:52)t) ) and the inverse
inequality gives
b∗(uj,n
≤ C(cid:107)∇uj,n
+ C(cid:107)∇ · (uj,n
≤ C(cid:107)∇(uj,n
+ C(cid:107)∇ · (uj,n
≤ C(cid:107)∇(uj,n
≤ C(cid:107)∇(uj,n
≤ 1
4(cid:52)t

(cid:113)
(cid:107)
R − < uR >n (cid:107)(cid:107)∇ξj,n+1
(cid:107)ξj,n+1
(cid:113)
· (ξj,n+1
R − < uR >n)(cid:107)(cid:107)ξj,n+1
(cid:113)
(cid:107)ξj,n+1
R − < uR >n)(cid:107)(cid:107)∇ξj,n+1
(cid:107)
(cid:113)
(cid:107)ξj,n+1
R − < uR >n)(cid:107)(cid:107)∇ξj,n+1
(cid:107)
R − < uR >n)(cid:107)(cid:107)∇ξj,n+1
(cid:107)ξj,n+1
(cid:107)(cid:107)|SR(cid:107)|1/4
R − < uR >n)(cid:107)(cid:107)∇ξj,n+1

− ξj,n
R (cid:107)(cid:107)∇(ξj,n+1
R )(cid:107)
− ξj,n
R (cid:107)(cid:107)∇(ξj,n+1
− ξj,n
− ξj,n
R (cid:107)(cid:107)∇(ξj,n+1
− ξj,n
R (cid:107)(cid:107)∇(ξj,n+1
2 (cid:107)ξj,n+1

R − < uR >n (cid:107)2(cid:17)(cid:107)∇ξj,n+1

R )(cid:107)
− ξj,n
− ξj,n
R )(cid:107)
− ξj,n
R )(cid:107)

C(cid:52)t(cid:107)|SR(cid:107)|1/2

2 (cid:107)∇uj,n

− ξj,n

R (cid:107)2 +

− ξj,n
R )(cid:107)

− ξj,n
R (cid:107)

(cid:107)ξj,n+1

(5.20)

(cid:16)

(cid:107)2.

(cid:107)

R

R

R

R

R

R

R

R

R

R

R

R

R

R

R

R

14

For the last nonlinear term we have
b∗(uj,n

R − < uR >n, uj,n+1 − uj,n, ξj,n+1

R

)

≤ C(cid:107)∇uj,n
≤ ν
64
≤ ν
64

R

R

(cid:107)∇ξj,n+1

R − < uR >n (cid:107)(cid:107)∇(uj,n+1 − uj,n)(cid:107)(cid:107)∇ξj,n+1
(cid:90) tn+1

(cid:107)2 + Cν−1(cid:107)∇(uj,n

(cid:107)

R

(cid:107)∇ξj,n+1

(cid:107)2 +

C∆t

(cid:107)∇(uj,n

R − < uR >n)(cid:107)2(cid:107)∇(uj,n+1 − uj,n)(cid:107)2
R − < uR >n)(cid:107)2(
t(cid:107)2 dt) .
∈ XR ⊂ Vh we have for qh ∈ Qh

(cid:107)∇uj

tn

ν

(5.21)

,∇ · ξj,n+1
)
(cid:107)(cid:107)∇ · ξj,n+1

R

R

(cid:107)

(cid:107)2 + Cν−1(cid:107)pj,n+1 − qn+1

h

(5.22)

(cid:107)2 .

R

R

(pj,n+1,∇ · ξj,n+1

Next, consider the pressure term. Since ξj,n+1
) = (pj,n+1 − qn+1
≤ (cid:107)pj,n+1 − qn+1
≤ ν
64
The other terms, are bounded as
ν(∇ηj,n+1,∇ξj,n+1

(cid:107)∇ξj,n+1

R

h

h

R

) ≤ ν(cid:107)∇ηj,n+1(cid:107)(cid:107)∇ξj,n+1
≤ Cν(cid:107)∇ηj,n+1(cid:107)2 +
ν
64

R

(cid:107)
(cid:107)∇ξj,n+1

R

(cid:107)2 .

(5.23)

Finally,

Intp(uj,n+1; ξj,n+1

R

− uj

) = (

∆t

uj,n+1 − uj,n
≤ C(cid:107) uj,n+1 − uj,n
(cid:107)2 +
≤ ν
64
≤ ν
64

∆t
(cid:107)∇ξj,n+1

(cid:107)∇ξj,n+1

(cid:107)2 +

R

R

)

R

t (tn+1), ξj,n+1
t (tn+1)(cid:107)(cid:107)∇ξj,n+1
(cid:107)
− uj
(cid:107) uj,n+1 − uj,n
(cid:90) tn+1
t (tn+1)(cid:107)2
− uj
(cid:107)uj

C
ν
C∆t

tt(cid:107)2dt .

∆t

R

ν

tn

Combining, we now have the following inequality:
R (cid:107)2) +

(cid:107)ξj,n+1

R

R

(

(cid:107)2− 1
2

1
∆t

1
2

− ξj,n
2 (cid:107)∇(uj,n

((cid:107)∇ξj,n+1

(cid:107)2 − (cid:107)∇ξj,n
R (cid:107)2)
R − < uR >n)(cid:107)2)(cid:107)∇ξj,n+1
(cid:107)2

ν
8

R

R

+ (
≤ Cν−1(cid:107)∇uj,n+1(cid:107)2(cid:107)∇ηj,n+1(cid:107)2 + Cν(cid:107)∇ηj,n+1(cid:107)2

1
4

R (cid:107)2 +
(cid:107)ξj,n+1
(cid:107)ξj,n
− C(cid:52)t(cid:107)|SR(cid:107)|1/2
ν
4
(cid:90) tn+1

(

R

R

ν

tn

+

C∆t

(cid:107)2 +

(cid:107)∇uj

+ Cν−1(cid:107)∇ηj,n(cid:107)2(cid:107)∇uj,n+1
+ Cν−1(cid:107)∇(uj,n
+ Cν−1(cid:107)∇(uj,n
(cid:107)∇(uj,n

t(cid:107)2dt)(cid:107)∇uj,n+1
C

(cid:107)2
ν2(cid:107)ξj,n
R (cid:107)2
R − < uR >n)(cid:107)2(cid:107)∇ηj,n+1(cid:107)2
(cid:90) tn+1
R − < uR >n)(cid:107)2(cid:107)∇ηj,n(cid:107)2
R − < uR >n)(cid:107)2(
(cid:90) tn+1

C∆t

+

tn

ν

+ Cν−1(cid:107)pj,n+1 − qn+1

(cid:107)2 +

C∆t

h

ν

tn

15

(cid:107)∇uj

t(cid:107)2dt)

(cid:107)uj

tt(cid:107)2dt .

(5.24)

(5.25)

By the timestep condition ν
sum of (5.25) from n=1 to n=N-1 and multiply through by ∆t

2 (cid:107)∇(uj,n

R − < uR >n)(cid:107)2 > 0. Take the

4 − C(cid:52)t(cid:107)|SR(cid:107)|1/2
N−1(cid:88)

(cid:107)ξj,n+1

R

1
4

n=0

− ξn

j,R(cid:107)2 + C∆t
N−1(cid:88)

C

(cid:107)∇ξj,0

R (cid:107)2 + ∆t

ν2(cid:107)ξj,n
R (cid:107)2
Cν−1(cid:107)∇uj,n+1(cid:107)2(cid:107)∇ηj,n+1(cid:107)2

n=0

N−1(cid:88)

n=0

ν(cid:107)∇ξj,n+1

R

(cid:107)2

(cid:107)ξj,N
R (cid:107)2+

1
2

ν∆t

8

≤ 1
2

ν∆t

(cid:107)∇ξj,N

R (cid:107)2 +
R (cid:107)2 +
(cid:107)ξj,0
(cid:40)
N−1(cid:88)
(cid:90) tn+1

+ ∆t

n=0

8

C∆t

(

ν

tn

+
+ Cν−1(cid:107)∇(uj,n
+ Cν−1(cid:107)∇(uj,n
(cid:107)∇(uj,n

C∆t

R

(cid:107)2

t(cid:107)2 dt)(cid:107)∇uj,n+1

(cid:107)∇uj
R − < uR >n)(cid:107)2(cid:107)∇ηj,n+1(cid:107)2
R − < uR >n)(cid:107)2(cid:107)∇ηj,n(cid:107)2

R − < uR >n)(cid:107)2(cid:16)(cid:90) tn+1
(cid:90) tn+1

(cid:107)∇uj
(cid:107)2 + Cν(cid:107)∇ηj,n+1(cid:107)2

tn

h

C∆t

(cid:107)2 +

ν

tn

ν

+
+ Cν−1(cid:107)pj,n+1 − qn+1
+ Cν−1(cid:107)∇ηj,n(cid:107)2(cid:107)∇uj,n+1

R

(cid:17)
t(cid:107)2dt

(cid:41)
tt(cid:107)2 dt

(cid:107)uj

(5.26)

.

R = (cid:80)R
N−1(cid:88)
N−1(cid:88)

1
4

n=0

1
2

R (cid:107)2 +
(cid:107)ξj,N
(cid:32)

≤ ∆t

Since uj,0

i=1(uj,0, ϕi)ϕi, we have (cid:107)ξj,0

R (cid:107)2 = 0 and (cid:107)∇ξj,0

R (cid:107)2 = 0. Now

applying interpolation inequalities and Lemma 5.3 gives

N−1(cid:88)

n=0

(cid:107)ξj,n+1

R

− ξj,n

R (cid:107)2 +

ν∆t

8

(cid:107)∇ξj,N

R (cid:107)2 + C∆t

ν(cid:107)∇ξj,n+1

R

(cid:107)2

CD(f j, ν, T, uj,0

R )∆t2

(cid:107)|∇uj

t|(cid:107)2

2,0

CNSD(f j, ν, T, uj,0

R )(cid:52)t

+ CNS(cid:107)|SR(cid:107)|−1/2

2

n=0

CNS(cid:52)t

ν

+

C

ν2(cid:107)ξj,n
R (cid:107)2 +
(cid:107)|∇uj|(cid:107)2∞,0 +
(cid:32)
(cid:33)

ν

NS(cid:88)

ν

1
NS

((cid:107)∇(um − uj,m

S )(cid:107)2

inf

·

+ CNSν(cid:52)t
+ (cid:107)|SR(cid:107)|2(cid:107)um − uj,m
(cid:107)∇ϕi(cid:107)2λi

JS NS(cid:88)

+ JS

j∈{1,...,JS}
(cid:33)
S (cid:107)2) + (C + h2(cid:107)|SR(cid:107)|2)h2s + (C + (cid:107)|SR(cid:107)|2)(cid:52)t4

m=1

+ C∆t(cid:107)|SR(cid:107)|−1/2

2

(cid:107)|∇uj

t|(cid:107)2

2,0

i=R+1
h2s
ν

(cid:107)|pj|(cid:107)2

2,s +

C∆t2

ν

(cid:107)|uj

tt|(cid:107)2

2,0,

+ C

where

D(f j, ν, T, uj,0

R ) =

2

ν2(cid:107)f j(cid:107)−1 +

2
T ν

16

(cid:107)uj,0

R (cid:107)2 + (cid:107)∇uj,0

R (cid:107)2,

(5.27)

(5.28)

(cid:107)2 using Theorem 4.1. The next step will be
which comes from bounding (cid:107)∇uj,n+1
the application of the discrete Gronwall inequality (Girault and Raviart [10], p. 176).

R

− ξj,n

R (cid:107)2 +

ν∆t

8

(cid:107)∇ξj,N

R (cid:107)2 + C∆t

N−1(cid:88)

n=0

ν(cid:107)∇ξj,n+1

R

(cid:107)2

(cid:107)ξj,n+1

R

1
2

1
4

N−1(cid:88)
R (cid:107)2 +
(cid:107)ξj,N
(cid:17)(cid:40)
(cid:16) CT
(cid:32)

≤ exp

n=0

ν2

+

(cid:107)|∇uj|(cid:107)2∞,0 +

CT
ν

CD(f j, ν, T, uj,0

R )∆t2

ν

(cid:107)|∇uj

t|(cid:107)2

2,0

CT D(f j, ν, T, uj,0
R )

(cid:33)

(cid:32)

ν

NS(cid:88)

2

+ CNS(cid:107)|SR(cid:107)|−1/2
+ (cid:107)|SR(cid:107)|2(cid:107)um − uj,m
(cid:107)∇ϕi(cid:107)2λi

JS NS(cid:88)

+ JS

·

inf

j∈{1,...,JS}

S )(cid:107)2
((cid:107)∇(um − uj,m
+ CT ν
(cid:33)
S (cid:107)2) + (C + h2(cid:107)|SR(cid:107)|2)h2s + (C + (cid:107)|SR(cid:107)|2)(cid:52)t4

1
NS

m=1

+ C∆t(cid:107)|SR(cid:107)|−1/2

2

(cid:107)|∇uj

t|(cid:107)2

2,0

i=R+1

+ C

h2s
ν

(cid:107)|pj|(cid:107)2

2,s +

C∆t2

ν

(cid:107)|uj

tt|(cid:107)2

2,0

(cid:41)

.

(5.29)

Recall that ej,n = ηj,n + ξj,n
R . To simplify formulas, we drop the second and third
term on the left hand side of (5.29). Then by the triangle inequality and Lemma 5.3,
absorbing constants, we have

N−1(cid:88)

(cid:107)ej,N(cid:107)2 + C∆t

1
2

ν(cid:107)∇ej,n+1(cid:107)2

(cid:32)
∆t4 + (cid:107)|SR(cid:107)|−1/2

n=0

≤ C

2 ∆t3 + ∆t2 + ∆t(cid:107)|SR(cid:107)|−1/2

2

h2s∆t−1

2

+ (cid:107)|SR(cid:107)|2∆t4 + (cid:107)|SR(cid:107)|2h2s+2 + (cid:107)|SR(cid:107)|−1/2
+ (cid:107)|SR(cid:107)|1/2
NS(cid:88)
2 ∆t3 + h2s
+ (1 + NS (cid:107)|SR(cid:107)|−1/2

2 h2s+2∆t−1 + (cid:107)|SR(cid:107)|1/2
JS NS(cid:88)

j∈{1,...,JS}

+ (cid:107)|SR(cid:107)|2(cid:107)um − uj,m

S (cid:107)2) + JS

1
NS

(cid:16)

m=1

inf

)

2

(cid:107)∇ϕi(cid:107)2λi

(cid:17)(cid:33)

((cid:107)∇(um − uj,m

S )(cid:107)2

(5.30)

Further simpliﬁcation of the above inequality gives (5.8).

i=R+1

6. Numerical simulations. We investigate the eﬃcacy of our algorithm via
the numerical simulation of a ﬂow between two oﬀset circles [3]. Before we discuss
the examples and the numerical results, we brieﬂy discuss the computational costs
associated with the En-POD algorithm and how they compare to those of the En-
full-FE algorithm.

17

6.1. Computational costs. As stated in Section 3 we can split the computa-
tional cost of our algorithm into oﬄine and online portions. In the oﬄine portion,
we generate the snapshot matrix A by solving the Navier-Stokes equations for JS
perturbations. Using A, we then generate a reduced basis to be used in our online
calculations. It is fair to assume that the cost of creating the snapshot matrix will
dominate the cost of generating the reduced basis associated with the eigenvalue prob-
lem (3.4), especially when we consider that there exist very eﬃcient techniques [15]
for determining the partial SVD of matrices.

Turning to the cost of solving the Navier-Stokes equation, the discrete systems
that arise from a FEM discretization have been studied at great length. Whereas it is
possible to use a nonlinear solver such as Newton’s method or a nonlinear multigrid
iteration, these methods often suﬀer from a lack of robustness. Instead, it is more
popular to linearize the system and then to use the Schur complement approach. This
allows for the use of a linear multigrid solver or Krylov method such as GMRES to
solve the problem. For full details, see, e.g., [21]. Unfortunately, there are a number
of factors such as the mesh size, the value of the Reynolds number, and the choice of
pre-conditioner which make it very diﬃcult to precisely estimate how quickly these
methods converge.

Estimating the online cost of the En-POD method, however, is much easier. Be-
cause the POD discrete system is small and dense and the ensemble method has J
right-hand sides, the most eﬃcient way to solve this problem is, at each time step, to
do a single LU factorization and a backsolve for each right-hand side. Denoting again
by R the cardinality of the reduced basis, the online cost of the En-POD method is

RBonline = NO(R3) + N JO(R2).

(6.1)

We note that this process is highly parallelizable. For example, if we have access to
J total processors, then we can remove the factor J in the second term.

It is important to note that the assembly of the low-dimensional reduced basis
system requires manipulations involving the reduced basis which, as we have seen, are
ﬁnite element functions so that, in general, that assembly involves computational costs
that depend on the dimension of the ﬁnite element space. Thus, naive implementations
of a reduced basis method involve assembly costs that are substantially greater than
solving costs and which, given the availability of very eﬃcient solvers, do not result in
signiﬁcant savings compared to that incurred by the full ﬁnite element discretization.
For linear problems the stiﬀness matrix is independent of the solution so that one
can assemble the small reduced basis stiﬀness matrix during the oﬄine stage. For
nonlinear problems, the discrete system changes at each time step (and generally at
each interrogation of a nonlinear solver) so that, in general, it is not an easy matter
to avoid the high assembly costs. However, because the nonlinearity in the Navier-
Stokes system is quadratic, the assembly costs can again be shifted to the oﬄine stage
during which one assembles a low-dimensional third-order tensor that can be reused
throughout the calculations.

Turning to the computational cost for the FEM ensemble method, as mentioned
previously, the most eﬃcient way to solve the resulting systems is a block solver (e.g.,
block GMRES). In trying to estimate the computational cost, we run into the same
problem as we do for estimating the cost of solving the standard FEM discretization
of the Navier-Stokes problem; speciﬁcally, it is very diﬃcult to precisely determine
how quickly any block solver converges.

Due to the diﬃculties outlined above in a priori estimation of the computational
costs for both our algorithms we omit any CPU time comparison in the numerical

18

experiments.
Instead, we focus on the accuracy of our En-POD method, demon-
strating that it is possible to achieve similar results as those given by the En-full-FE
method. A more rigorous and thorough analysis comparing the computational cost
of the En-POD and En-full-FE method is a subject of future research.

6.2. Flow between two oﬀset circles. For the numerical experiment we ex-
amine the two-dimensional ﬂow between two oﬀset circles with viscosity coeﬃcient
ν = 1
200 . The domain is a disk with a smaller oﬀ center disc inside. Let r1 = 1,
r2 = 0.1, c1 = 1/2, and c2 = 0; then the domain is given by

Ω = {(x, y) : x2 + y2 ≤ r2

1 and (x − c1)2 + (y − c2)2 ≥ r2
2}.

No-slip, no-penetration boundary conditions are imposed on both circles. All compu-
tations are done using the FEniCS software suite [22]. The deterministic ﬂow driven
by the counterclockwise rotational body force

f (x, y, t) =(cid:0) − 4y(1 − x2 − y2) , 4x(1 − x2 − y2)(cid:1)T

displays interesting structures interacting with the inner circle. A K´arm´an vortex
street is formed which then re-interacts with the inner circle and with itself, generating
complex ﬂow patterns.

For our test problems, we generate perturbed initial conditions by solving a steady

Stokes problem with perturbed body forces given by

f(x, y, t) = f (x, y, t) + (cid:0) sin(3πx) sin(3πy), cos(3πx) cos(3πy)(cid:1)T

with diﬀerent perturbations deﬁned by varying . We discretize in space via the P 2-P 1
Taylor-Hood element pair. Meshes ware generated using the FEniCS built-in mshr
package with varying reﬁnement levels. An example mesh is given in Figure 6.1.

Fig. 6.1. Mesh for ﬂow between oﬀset circles resulting in 16,457 total degrees of freedom for

the Taylor-Hood element pair.

In order to generate the POD basis, we use two perturbations of the initial condi-
tions corresponding to 1 = 10−3 and 2 = −10−3. Using a mesh that results in 16,457
total degrees of freedom and a ﬁxed time step ∆t = .025, we run a standard full ﬁnite

19

element code1 for each perturbation from t0 = 0 to T = 5. For the time discretization
we use the Crank-Nicolson method and take snapshots every 0.1 seconds. In Figure
6.2 we illustrate the decay of the singular values generated the snapshot matrix.

Fig. 6.2. The 40 largest singular values of the snapshot matrix.

6.3. Example 1. The purpose of this example is to illustrate our theoretical
error estimates and to show the eﬃcacy of our method in a “data mining” setting,
i.e., to show that we can accurately represent the information contained in the En-
full-FE approximation which requires the speciﬁcation of 16,457 coeﬃcients by the
En-POD approximation that requires the speciﬁcation of a much smaller number of
coeﬃcients, in fact, merely 10 will do. Thus, we determine the En-POD approximation
using the same perturbations, mesh, and time step as were used in the generation of
the POD basis. We verify at each time step that condition (4.3) is satisﬁed.
In
order to illustrate the accuracy of our approach, we provide in Figure 6.3 plots of the
velocity ﬁeld of the ensemble average at the ﬁnal time T = 5 for both the En-full-FE
and En-POD approximations. In addition, in Figure 6.4 we plot, for 0 ≤ t ≤ 5 and
for both methods, the energy 1

2(cid:107)u(cid:107)2 and the enstrophy 1

2 ν(cid:107)∇ × u(cid:107)2.

We need 10 POD basis functions to reproduce the ﬂow with a reasonable level
of accuracy. This is seen in Table 6.1(a) which shows a small discrete L2 error cor-
responding to 10 basis vectors and, as the number of basis vectors increases beyond
that, the error appears to decreases monotonically. Visual conﬁrmation is given by
comparing the two plots in Figure 6.3; at time T = 5 the En-POD method appears to
produce a ﬂow which is very similar to that for the En-full method. Additionally, in
Figure 6.4, we plot the energy and enstrophy of En-POD with varying cardinalities
for the POD basis and for the En-full-FE method. It can be seen that as the number
of POD basis vectors increases our approximation improves with the En-POD energy
and enstrophy becoming indistinguishable from that for the En-full-FE for 10 or more
POD basis functions.

6.4. Example 2. Of course, the approximation of solutions of PDEs using
reduced-order models such as POD are used not in the context of Section 6.3, but,

1We also generated snapshots using the En-full-FE method. We found that we obtained exactly

the same results as those reported here for the use of a standard ﬁnite element method.

20

Fig. 6.3. The ensemble average of the velocity ﬁeld at the ﬁnal time T = 5 of the En-full-FE

(left) approximation and the En-POD approximation with 10 reduced basis vectors (right).

Fig. 6.4. For 0 ≤ t ≤ 5, the energy (left) and enstrophy (right) of the ensemble determined for

the En-full-FE approximations and for the En-POD approximation of several dimensions.

(a) Example 1
R
error
2
4
6
8
10
12
14
16
18
20

0.089387
0.055630
0.170164
0.345291
0.011695
0.010348
0.008462
0.008346
0.007798
0.003859

error

(b) Example 2:  = 1
R
2
4
6
8
10
12
14
16
18
20

0.089718
0.055804
0.170523
0.345958
0.011978
0.010736
0.008899
0.008906
0.008481
0.004849
Table 6.1

error

(c) Example 2:  = 0.1
R
4
8
12
16
20
24
28
32
36

0.134240
0.091791
0.107638
0.063628
0.082378
0.027519
0.011310
0.004689
0.002783

The L2 error ||uave

1 and 2.

h − uave

R ||2,0 vs. the dimension R of the POD approximation for Examples

in our setting, for values of the perturbation parameter  diﬀerent from those used to

21

generate the reduced-order basis. Thus, we consider the problem described in Section
6.2 except that now we apply the En-POD method, using the basis generated as de-
scribed in Section 6.2, for the two values  = 0.1 and  = 1, both of which are diﬀerent
from the values used to generate the snapshots used to construct the POD basis. For
comparison purposes, we also determine the En-full-FE approximation for these two
values of . Note that these two values of  take us to an extrapolatory setting, i.e.,
these values are outside of the interval [−10−3, 10−3] bracketed by the values of  used
to generate the POD basis. Using a reduced-order method in an extrapolatory setting
is usually a stern test on its eﬃcacy.

Results for  = 1 are given in Table 6.1(b) and Figures 6.5 and 6.6. The discussion
in Section 6.3 corresponding to Example 1 carries over to this example except that
the error does not decrease quite as fast; compare Table 6.1(a) and Table 6.1(b).

Fig. 6.5. For Example 2 with  = 1, the ensemble average of the velocity ﬁeld at the ﬁnal time
T = 5 of the En-full-FE (left) approximation and the En-POD approximation with 10 reduced basis
vectors (right).

Fig. 6.6. For Example 2 with  = 1 and for 0 ≤ t ≤ 5, the energy (left) and enstrophy (right)
of the ensemble determined for the En-full-FE approximations and for the En-POD approximation
of several dimensions.

Results for  = 0.1 are given in Table 6.1(c) and Figures 6.7 and 6.8.

In this
case, compared to the  = 1 case, the solution has greater diﬀerences from those
used to generate the snapshots; this is easily seen from Figures 6.3, 6.5, and 6.7. A

22

consequence of this greater diﬀerence is that we had to halve the time step in order
to obtain a stable En-POD approximation. From Table 6.1(c) and Figure 6.8, we see
that another consequence is that more POD basis vectors were needed, in fact about
28, to obtain a similar level of accuracy as is obtained using 10 POD basis vectors for
the case  = 1. Also, the beginning of the monotone decrease of the error as the POD
dimension increases is delayed until about dimension 20, as compared to 10 for the
 = 1 case.

Fig. 6.7. For Example 2 with  = 0.1, the ensemble average of the velocity ﬁeld at the ﬁnal
time T = 5 of the En-full-FE (left) approximation and the En-POD approximation with 28 reduced
basis vectors (right).

Fig. 6.8. For Example 2 with  = 0.1 and for 0 ≤ t ≤ 5, the energy (left) and enstrophy (right)
of the ensemble determined for the En-full-FE approximations and for the En-POD approximation
of several dimensions.

REFERENCES

[1] M. Gunzburger, J. Peterson, and J. Shadid, Reduced-order modeling of time-dependent
PDEs with multiple parameters in the boundary data, Comput. Meth. Appl. Mech. Engrg.,
196 (2007), 1030-1047.

[2] J. Burkardt, M. Gunzburger, and H.-C. Lee, POD and CVT-based reduced-order modeling

of Navier-Stokes ﬂows, Comput. Meth. Appl. Mech. Engrg., 196 (2006), 337-355.

[3] N. Jiang and W. Layton, An algorithm for fast calculation of ﬂow ensembles, International

Journal for Uncertainty Quantiﬁcation, 4 (2014), 273-301.

23

[4] N. Jiang, A higher order ensemble simulation algorithm for ﬂuid ﬂows, Journal of Scientiﬁc

Computing, 64 (2015), 264-288.

[5] N. Jiang and W. Layton, Numerical analysis of two ensemble eddy viscosity numerical reg-

ularizations of ﬂuid motion, Numer. Meth. Part. Diﬀ. Equations, 31 (2015), 630-651.

[6] N. Jiang, S. Kaya, and W. Layton, Analysis of model variance for ensemble based turbulence

modeling, Comput. Meth. Appl. Math., 15 (2015), 173-188.

[7] S. Volkwein, Optimal Control of a Phase-Field Model Using Proper Orthogonal Decomposi-

tion, Z. Angew. Math. Mech., 81 (2001), 83-97.

[8] K. Kunisch and S. Volkwein, Galerkin proper orthogonal decomposition methods for parabolic

problems, Numer Math, 90 (2001), 117-148.

[9] T. Iliescu and Z. Wang, Variational multiscale proper orthogonal decomposition: Navier-

Stokes equations, Num. Meth. PDEs, 30 (2014), 641-663.

[10] V. Girault and P. Raviart, Finite element approximation of the Navier-Stokes equations,

Lecture Notes in Mathematics, Vol. 749, 1979.

[11] Z. Toth and E. Kalnay, Ensemble forecasting at NMC: The generation of perturbations, Bull.

AMER. Metero. Soc., 74 (1993), 2317-2330.

[12] R. Buizza and T. Palmer, The singular-vector structure of the atmospheric global circulation,

Journal of the Atmospheric Sciences, 52 (1995), 1434-1456.

[13] C.H. Bishop, B.J. Etherton and S.J. Majumdar, Adaptive sampling with the Ensemble
transform Kalman ﬁlter. Part I: theoretical aspects, Month. Weath. Review, 129 (2001),
420-436.

[14] D. Chapelle, A. Gariah and J. Sainte-Marie, Galerkin approximation with proper orthog-
onal decomposition: new error estimates and illustrative examples, ESAIM: Math. Model.
Numer. Anal., 46 (2012), 731-757.

[15] S. Huffel, Partial singular value decomposition algorithm, J. Comput. Appl. Math. 33 (1990)

105-112

[16] P. Holmes, J. Lumley and G. Berkooz, Turbulence, Coherent Structures, Dynamical Sys-

tems and Symmetry, Cambridge University Press, Cambridge, UK, 1996.

[17] M. Gunzburger, Finite Element Methods for Viscous Incompressible Flows - A Guide to

Theory, Practices, and Algorithms, Academic Press, London, 1989.

[18] E. Gallopulos and V. Simoncini, Convergence of BLOCK GMRES and matrix polynomials,

Lin. Alg. Appl., 247 (1996), 97-119.

[19] R. Freund and M. Malhotra, A block QMR algorithm for non-Hermitian linear systems
with multiple right-hand sides, Linear Algebra and its Applications, 254 (1997), 119-157.
[20] Y. Feng, D. Owen, and D. Peric, A block conjugate gradient method applied to linear systems
with multiple right hand sides, Comp. Meth. Appl. Mech. & Engng. 127 (1995), 203-215.
[21] R. Rannacher, Finite element methods for the incompressible Navier-Stokes equations, Fun-

damental Directions in Mathematical Fluid Dynamics (Birkhauser 2000), pp. 191-293.

[22] A. Logg, K.-A. Mardal, G. Wells, et al. (2012). Automated Solution of Diﬀerential Equa-

tions by the Finite Element Method, Springer. [doi:10.1007/978-3-642-23099-8]

[23] W. Layton, Introduction to the Numerical Analysis of Incompressible Viscous Flows, Society

for Industrial and Applied Mathematics (SIAM), 2008.

24

