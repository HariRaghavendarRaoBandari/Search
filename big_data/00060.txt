Anchored Rectangle and Square Packings∗

Kevin Balas†‡

Adrian Dumitrescu§

Csaba D. T´oth∗¶

March 2, 2016

Abstract

For points p1, . . . , pn in the unit square [0, 1]2, an anchored rectangle packing consists of
interior-disjoint axis-aligned empty rectangles r1, . . . , rn ⊆ [0, 1]2 such that point pi is a corner
of the rectangle ri (that is, ri is anchored at pi) for i = 1, . . . , n. We show that for every set of
n points in [0, 1]2, there is an anchored rectangle packing of area at least 7/12 − O(1/n), and
for every n ∈ N, there are point sets for which the area of every anchored rectangle packing is
at most 2/3. The maximum area of an anchored square packing is always at least 5/32 and
sometimes at most 7/27.

The above constructive lower bounds immediately yield constant-factor approximations, of
7/12 − ε for rectangles and 5/32 for squares, for computing anchored packings of maximum
area in O(n log n) time. We prove that a simple greedy strategy achieves a 9/47-approximation
for anchored square packings, and 1/3 for lower-left anchored square packings. Reductions to
maximum weight independent set (MWIS) yield a QPTAS and a PTAS for anchored rectangle
and square packings in nO(1/ε) and exp(poly(log(n/ε))) time, respectively.

Keywords: Rectangle packing, anchored rectangle, greedy algorithm, charging scheme, ap-
proximation algorithm.

1

Introduction

Let P = {p1, . . . , pn} be a ﬁnite set of points in an axis-aligned bounding rectangle U . An anchored
rectangle packing for P is a set of axis-aligned empty rectangles r1, . . . , rn that lie in U , are interior-
disjoint, and pi is one of the four corners of ri for i = 1, . . . , n; rectangle ri is said to be anchored
at pi. For a given point set P ⊂ U , we wish to ﬁnd the maximum total area A(P ) of an anchored
rectangle packing of P . Since the ratio between areas is an aﬃne invariant, we may assume that
U = [0, 1]2. However, if we are interested in the maximum area of an anchored square packing, we
must assume that U = [0, 1]2 (or that the aspect ratio of U is bounded from below by a constant;
otherwise, with an arbitrary rectangle U , the guaranteed area is zero).

6
1
0
2

 

b
e
F
9
2

 

 
 
]

G
C
.
s
c
[
 
 

1
v
0
6
0
0
0

.

3
0
6
1
:
v
i
X
r
a

Finding the maximum area of an anchored rectangle packing of n given points is suspected
but not known to be NP-hard. Balas and T´oth [8] observed that the number of distinct rectangle
packings that attain the maximum area, A(P ), can be exponential in n. From the opposite direc-
tion, the same authors [8] proved an exponential upper bound on the number of maximum area
conﬁgurations, namely 2nCn = Θ(8n/n3/2), where Cn = 1
number. Note that a greedy strategy may fail to ﬁnd A(P ); see Fig. 1.

n(cid:1) = Θ(4n/n3/2) is the nth Catalan

n+1(cid:0)2n

∗This work was partially supported by the NSF awards CCF-1422311 and CCF-1423615.
†Department of Mathematics, California State University Northridge, Los Angeles, CA, USA.
‡Mathematics Department, Los Angeles Mission College, Sylmar, CA, USA. Email: balask@lamission.edu.
§Department of Computer Science, University of Wisconsin–Milwaukee, WI, USA. Email: dumitres@uwm.edu.
¶Department of Computer Science, Tufts University, Medford, MA, USA. Email: cdtoth@acm.org.

1

p1

p2

r2

r1

p2

r2

p1

r1

Figure 1: For P = {p1, p2}, with p1 = ( 1
4 · 3

64 (left), which is less than the area 1

4 ) and p2 = ( 3
4 · 3

8 = 41

8 · 5

4 + 1

8 , 7
4 + 5

4 , 3

3

8 ), a greedy algorithm selects rectangles of area
8 · 7

64 of the packing on the right.

8 = 47

Variants and generalizations. We consider three additional variants of the problem. An an-
chored square packing is an anchored rectangle packing in which all rectangles are squares; a lower-
left anchored rectangle packing is a rectangle packing where each point pi ∈ ri is the lower-left
corner of ri; and a lower-left anchored square packing has both properties.
We suspect that all variants, with rectangles or with squares, are NP-hard. Here, we put forward
several approximation algorithms, while it is understood that the news regarding NP-hardness can
occur at any time or perhaps take some time to establish.

The problem can be generalized to other geometric shapes with distinct representatives. Let
P = {p1, . . . , pn} be a ﬁnite set of points in a compact domain U ⊂ Rd, and let F = {F1, . . . ,Fn}
be n families of measurable sets (e.g., rectangles, squares, or disks) such that for all r ∈ Fi, we
have pi ∈ r ⊆ U and µ(r) ≥ 0 is the measure of r. An anchored packing for (P,F) is a set of
pairwise interior-disjoint representatives r1, . . . , rn with ri ∈ Fi for i = 1, . . . , n. We wish to ﬁnd an
anchored packing for (P,F) of maximum measurePn
i=1 µ(ri). While some variants are trivial (e.g.,
when U = [0, 1]2 and Fi consists of all rectangles containing pi), there are many interesting and
challenging variants (e.g., when Fi consists of disks containing pi; or when U is nonconvex). In this
paper we assume that the domain U and the families F are axis-aligned rectangles or axis-aligned
squares in the plane.

Anchored packing with
Guaranteed max. area
Greedy approx. ratio
Approximation scheme

7

12 − O( 1

rectangles
n ) ≤ A(n) ≤ 2
7/12 − ε
QPTAS

3

squares

LL-rect.

LL-sq.

5

32 ≤ Asq(n) ≤ 7

27

9/47
PTAS

0

0.091 [22]
QPTAS

0
1/3

PTAS

Table 1: Table of results for the four variants studied in this paper. The last two columns refer to lower-left
anchored rectangles and lower-left anchored squares, respectively.

Contributions. Our results are summarized in Table 1.

(i) We ﬁrst deduce upper and lower bounds on the maximum area of an anchored rectangle
12 − O(1/n) ≤

packing of n points in [0, 1]2. For n ∈ N, let A(n) = inf|P|=n A(P ). We prove that 7
A(n) ≤ 2
3 for all n ∈ N (Sections 2 and 3).
Asq(n) = inf|P|=n Asq(P ). We prove that 5

(ii) Let Asq(P ) be the maximum area of an anchored square packing for a point set P , and

27 for all n (Sections 2 and 4).

32 ≤ Asq(n) ≤ 7

(iii) The above constructive lower bounds immediately yield constant-factor approximations for
computing anchored packings of maximum area (7/12 − ε for rectangles and 5/32 for squares) in
O(n log n) time (Sections 3 and 4). In Section 5 we show that a (natural) greedy algorithm for
anchored square packings achieves a better approximation ratio, namely 9/47 = 1/5.22 . . ., in O(n2)
time. By reﬁning some of the tools developed for this bound, in Section 6 we prove a tight bound
of 1/3 for the approximation ratio of a greedy algorithm for lower-left anchored square packings.

2

(iv) We obtain a polynomial-time approximation scheme (PTAS) for the maximum area an-
chored square packing problem, and a quasi-polynomial-time approximation scheme (QPTAS) for
the maximum area anchored rectangle packing problem, via a reduction to the maximum weight
independent set (MWIS) problem for axis-aligned squares [16] and rectangles [2], respectively.
Given n points, an (1 − ε)-approximation for the anchored square packing of maximum area can
be computed in time nO(1/ε); and for the anchored rectangle packing of maximum area, in time
exp(poly(log(n/ε))). Both results extend to the lower-left anchored variants (Section 7).

Motivation and related work. Packing axis-aligned rectangles in a rectangular container, al-
beit without anchors, is the unifying theme of several classic optimization problems. The 2D
knapsack problem, strip packing, and 2D bin packing involve arranging a set of given rectangles in
the most economic fashion [2, 9]. The maximum area independent set (MAIS) problem for rect-
angles (squares, or disks, etc.), is that of selecting a maximum area packing from a given set [3];
see classic papers such as [6, 32, 33, 34, 35] and also more recent ones [10, 11, 21] for quantita-
tive bounds and constant approximations. These optimization problems are NP-hard, and there
is a rich literature on approximation algorithms. Given an axis-parallel rectangle U in the plane
containing n points, the problem of computing a maximum-area empty axis-parallel sub-rectangle
contained in U is one of the oldest problems studied in computational geometry [5, 19]; the higher
dimensional variant has been also studied [20]. In contrast, our problem setup is fundamentally
diﬀerent: the rectangles (one for each anchor) have variable sizes, but their location is constrained
by the anchors.

Map labeling problems in geographic information systems (GIS) [28, 29, 31] call for choosing
interior-disjoint rectangles that are incident to a given set of points in the plane. GIS applications
often impose constraints on the label boxes, such as aspect ratio, minimum and maximum size, or
priority weights. Most optimization problems of such variants are known to be NP-hard [24, 26,
27, 30]. In this paper, we focus on maximizing the total area of an anchored rectangle packing.

In a restricted setting where each point pi is the lower-left corner of the rectangle ri and
(0, 0) ∈ P , Allen Freedman [36, 37] conjectured almost 50 years ago that there is a lower-left
anchored rectangle packing of area at least 1/2. The current best lower bound on the area under
these conditions is (about) 0.091, as established in [22]. The analogous problem of estimating the
total area for lower-left anchored square packings is much easier.
If P consists of the n points
(i/n, i/n), i = 0, 1, . . . , n − 1, then the total area of the n anchored squares is at most 1/n, and so
it tends to zero as n tends to inﬁnity. A looser anchor restriction, often appearing in map labeling
problems with square labels, requires the anchors to be contained in the boundaries of the squares,
however the squares need to be congruent; see e.g., [38].

In the context of covering (as opposed to packing), the problem of covering a given polygon by
disks of given centers and varying radii such that the sum of areas of the disks is minimized has
been considered in [1, 14]. In particular, covering [0, 1]2 with ℓ∞-disks of given centers and minimal
area as in [12, 13] is dual to the anchored square packings studied in this paper.

Notation. Given an n-element point set P contained in U = [0, 1]2, denote by OPT = OPT(P )
a packing (of rectangles or squares, as the case may be) of maximum total area. An algorithm for
a packing problem has approximation ratio α if the packing it computes, Π, satisﬁes area(Π) ≥
α area(OPT), for some α ≤ 1. A set of points is in general position if no two points have the same
x- or y-coordinate. The boundary of a planar body B is denoted by ∂B, and its interior by int(B).

3

2 Upper Bounds

Proposition 1. For every n ∈ N, there exists a point set Pn such that every anchored rectangle
packing for Pn has area at most 2
Proof. Consider the point set P = {p1, . . . , pn}, where pi = (xi, yi) = (2−i, 2−i), for i = 1, . . . , n;
2 , 1
see Fig. 2 (left). Let R = {r1, . . . , rn} be an anchored rectangle packing for P . Since p1 = ( 1
2 ),
any rectangle anchored at p1 has height at most 1
2 , and hence area at most 1
4 .

3 . Consequently, A(n) ≤ 2
3 .

2 , width at most 1

2i ) = 1

For i = 2, . . . , n, the x-coordinate of pi, xi, is halfway between 0 and xi−1, and yi is halfway
between 0 and yi−1. Consequently, if pi is the lower-right, lower-left or upper-left corner of ri, then
2i − 1
2i )(1− 1
area(ri) ≤ ( 1
4i . Therefore,
in all cases, we have area(ri) ≤ 1
4i . The total area of an anchored rectangle packing is bounded
from above as follows:

4i . If, pi is the upper-right corner of ri, then area(ri) ≤ 1
2i − 1
4i(cid:19) =(cid:18)1 −

3(cid:18)1 −

4n(cid:19) =

2n(cid:19) −

A(P ) ≤

1
2n +

2
3 −

2i −

1

3 · 4n ≤

2
3

.

nXi=1(cid:18) 1

1

1

1

1

Figure 2: Left: 2/3 upper bound construction for anchored rectangles. Right: 7/27 upper bound construction
for anchored squares.

Proposition 2. For every n ∈ N, there exists a point set Pn such that every anchored square
packing for Pn has area at most 7
27 . Consequently, Asq(n) ≤ 7
27 .
3 · 2−i, 4
Proof. Consider the point set P = {p1, . . . , pn}, where pi = ( 4
3 · 2−i), for i = 1, . . . , n; see
Fig. 2 (right). Let S = {s1, . . . , sn} be an anchored square packing for P . Since p1 = ( 2
3 , 2
3 ) and
3 , hence area at most 1
3 ), any square anchored at p1 or at p2 has side-length at most 1
p2 = ( 1
9 . For
i = 3, . . . , n, the x-coordinate of pi, xi, is halfway between 0 and xi−1, and yi is halfway between
0 and yi−1. Hence any square anchored at pi has side-length at most xi = yi = 4
3·2i , hence area at
most 16

9·4i . The total area of an anchored square packing is bounded from above as follows:

3 , 1

Asq(P ) ≤

2
9

+

1
9

n−1Xj=1

1
4j <

2
9

+

1
9

∞Xj=1

1
4j =

2
9

+

1
9 ·

1
3

=

7
27

.

Remark. Stronger upper bounds hold for small n, e.g., n ∈ {1, 2}. Speciﬁcally, A(1) = Asq(1) =
1/4 attained for the center ( 1
2 ) ∈ [0, 1]2, and A(2) = 4/9 and Asq(2) = 2/9 attained for P =
{( 1

3 )}.

3 ), 2

3 , 2

3 , 1

2 , 1

4

3 Lower Bound for Anchored Rectangle Packings

In this section, we prove that for every set P of n points in [0, 1]2, we have A(P ) ≥ 7n−2
12(n+1) . Our
proof is constructive; we give a divide & conquer algorithm that partitions U into horizontal strips
and ﬁnds n anchored rectangles of total area bounded from below as required. We start with a
weaker lower bound, of about 1/2, and then sharpen the argument to establish the main result of
this section, a lower bound of about 7/12.

n

2(n+1) can be computed in O(n log n) time.

Proposition 3. For every set of n points in the unit square [0, 1]2, an anchored rectangle packing
of area at least
Proof. Let P = {p1, . . . , pn} be a set of points in the unit square [0, 1]2 sorted by their y-coordinates.
Draw a horizontal line through each point in P ; see Fig. 3 (left). These lines divide [0, 1]2 into n + 1
horizontal strips. A strip can have zero width if two points have the same x-coordinate. We leave
a narrowest strip empty and assign the remaining strips to the n points such that each rectangle
above (resp., below) the chosen narrowest strip is assigned to a point of P on its bottom (resp.,
top) edge. For each point divide the corresponding strip into two rectangles with a vertical line
through the point. Assign the larger of the two rectangles to the point.

p7

p6
p6

p5

r7

r5

r6

p4

r4

p3

r3

r2

p2

r1

p1

(a)

(b)

(c)

Figure 3: Left: Horizontal strips with anchored rectangles for 7 points. Middle: an example of the partition
for odd n (here n = 5). Right: an example of the partition for even n (here n = 6). The strip that is
discarded is shaded in the drawing.

The area of narrowest strip is at most

1
n+1 . The rectangle in each of the remaining n strips

covers at least 1

2 of the strip. This yields a total area of at least

n

2(n+1) .

For a stronger lower bound, our key observation is that for two points in a horizontal strip, one
can always pack two anchored rectangles in the strip that cover strictly more than half the area of
the strip. Speciﬁcally, we prove the following easy-looking statement with 2 points in a rectangle
(however, we did not ﬁnd an easy proof!). The proof of Lemma 1 is deferred to Appendix A.
Lemma 1. Let P = {p1, p2} be two points in an axis-parallel rectangle R such that p1 lies on the
bottom side of R. Then there exist two empty rectangles in R anchored at the two points of total
area at least 7

12 area(R), and this bound is the best possible.

In order to partition the unit square into strips that contain two points, one on the boundary,
we need to use parity arguments. Let P be a set of n points in [0, 1]2 with y-coordinates 0 ≤ y1 ≤
y2 ≤ ··· ≤ yn ≤ 1. Set y0 = 0 and yn+1 = 1. For i = 1, . . . , n + 1, put hi = yi − yi−1, namely hi is
the ith vertical gap. Obviously, we have

hi ≥ 0 for all i = 1, . . . , n + 1, and

hi = 1.

n+1Xi=1

5

(1)

Parity considerations are handled by the following lemma.

Lemma 2. (i) If n is odd, then at least one of the following (n + 1)/2 inequalities is satisﬁed:

hi + hi+1 ≤

2

n + 1

, for (odd) i = 1, 3, . . . , n − 2, n.

(2)

(ii) If n is even, then at least one of the following n + 2 inequalities is satisﬁed:

h1 ≤

2

n + 2

,

hn+1 ≤

2

n + 2

,

hi + hi+1 ≤

2

n + 2

, for i = 1, 2, . . . , n.

(3)

n+1 and assume that none of the inequalities in (2) is

Proof. Assume ﬁrst that n is odd. Put a = 2

Assume now that n is even. Put a = 2

satisﬁed. Summation would yieldPn+1
satisﬁed. Summation would yield 2Pn+1

i=1 hi > n+1

We can now prove the main result of this section.

2 a = 1, which is an obvious contradiction.

n+2 and assume that none of the inequalities in (3) is

i=1 hi > (n + 2)a = 2, an obvious contradiction.

12(n+1) when n is odd and

Theorem 1. For every set of n points in the unit square [0, 1]2, an anchored rectangle packing of
area at least 7(n−1)
12(n+2) when n is even can be computed in O(n log n) time.
Proof. Let P = {p1, . . . , pn} be a set of points in the unit square [0, 1]2 sorted by their y-coordinates
with the notation introduced above. By Lemma 2, we ﬁnd a horizontal strip corresponding to one
of the inequalities that is satisﬁed.

7n

n+1 ) = 7(n−1)
12(n+1) .

Assume ﬁrst that n is odd. Draw a horizontal line through each point in pj ∈ P , for j even,
as shown in Fig. 3. These lines divide [0, 1]2 into n+1
rectangles (horizontal strips). Suppose now
2
that the satisﬁed inequality is hi + hi+1 ≤ 2
n+2 for some odd i. Then we leave a rectangle between
y = yi−1 and y = yi+1 empty, i.e., ri is a rectangle of area 0. For the remaining rectangles, we
assign two consecutive points of P such that each strip above y = yi+1 (resp., below y = yi−1) is
assigned a point of P on its bottom (resp., top) edge. Within each rectangle R, we can choose
two anchored rectangles of total area at least 7
12 area(R) by Lemma 1. By Lemma 2(i), the area of
2
the narrowest strip is at most
n+1 . Consequently, the area of the anchored rectangles is at least
7
12 (1 − 2
If the selected horizontal strip corresponds to the inequality
h1 ≤ 2
n+2 , then divide the unit square along the lines y = yi, where i is odd. We leave the strip of
height h1 empty, and assign pairs of points to all remaining strips such that one of the two points
lies on the top edge of the strip. We proceed analogously if the inequality hn+1 ≤ 2
n+2 is satisﬁed.
Suppose now that the satisﬁed inequality is hi + hi+1 ≤ 2
n+2 . If i is odd, we leave the strip of height
hi ≤ 2
n+2 (between y = yi−1 and y = yi) empty; if i is even, we leave the strip of height hi+1 ≤ 2
n+2
(between y = yi and yi+1) empty. Above and below the empty strip, we can form a total of n/2
strips, each containing two points of P , with one of the two points lying on the bottom or the top
2
edge of the strip. By Lemma 2(i), the area of the empty strip is at most
n+2 . Consequently, the
area of the anchored rectangles is at least 7

Assume now that n is even.

n+2 ) = 7n

12(n+2) , as claimed.

12 (1 − 2

4 Lower Bound for Anchored Square Packings

Given a set P ⊂ U = [0, 1]2 of n points, we show there is an anchored square packing of large
total area. The proof we present is constructive; we give a recursive partitioning algorithm (as an
inductive argument) based on a quadtree subdivision of U that ﬁnds n anchored squares of total
area at least 5/32. We need the following easy fact:

6

Observation 1. Let u, v ⊆ U be two congruent axis-aligned interior-disjoint squares sharing a
common edge such that u ∩ P 6= ∅ and int(v) ∩ P = ∅. Then u ∪ v contains an anchored empty
square whose area is at least area(u)/4.

Proof. Let a denote the side-length of u (or v). Assume that v lies right of u. Let p ∈ P be the
rightmost point in u. If p lies in the lower half-rectangle of u then the square of side-length a/2
whose lower-left anchor is p is empty and has area a2/4. Similarly, if p lies in the higher half-
rectangle of u then the square of side-length a/2 whose upper-left anchor is p is empty and has
area a2/4.
Theorem 2. For every set of n points in U = [0, 1]2, where n ≥ 1, an anchored square packing of
total area at least 5/32 can be computed in O(n log n) time.

2 + x2

3 ≥ 2/9 > 5/32, as required.

Proof. We ﬁrst derive a lower bound of 1/8 and then sharpen it to 5/32. We proceed by induction
on the number of points n contained in U and assigned to U ; during the subdivision process, the
rˆole of U is taken by any subdivision square. If all points in P lie on U ’s boundary, ∂U , pick one
arbitrarily, say, (x, 0); assume x ≤ 1/2. (All assumptions in the proof are made without loss of
generality.) Then the square [x, x + 1/2] × [0, 1/2] is empty and its area is 1/4 > 5/32, as required.
Otherwise, discard the points in P ∩ ∂U and continue on the remaining points.
If n = 1, we can assume that x(p), y(p) ≤ 1/2. Then the square of side-length 1/2 whose lower-
left anchor is p is empty and contained in U , as desired; hence Asq(P ) ≥ 1/4. If n = 2 let x1, x2, x3
be the widths of the 3 vertical strips determined by the two points, where x1 + x2 + x3 = 1. We
can assume that 0 ≤ x1 ≤ x2 ≤ x3; then there are two anchored empty squares with total area at
least x2
Assume now that n ≥ 3. Subdivide U into four congruent squares, U1, . . . , U4, labeled coun-
terclockwise around the center of U according to the quadrant containing the square. Partition P
into four subsets P1, . . . , P4 such that Pi ⊂ Ui for i = 1, . . . , 4, with ties broken arbitrarily. We next
derive the lower bound Asq(P ) ≥ 1/8. We distinguish 4 cases, depending on the number of empty
sets Pi.
Case 1: precisely one of P1, . . . , P4 is empty. We can assume that P1 = ∅. By Observation 1,
U1∪ U2 contains an empty square anchored at a point in P1∪ P2 of area at least area(U1)/4 = 1/16.
By induction, U3 and U4 each contain an anchored square packing of area at least c · area(U3) =
c · area(U4). Overall, we have Asq(P ) ≥ 2c/4 + 1/16 ≥ c, which holds for c ≥ 1/8.
Case 2: precisely two of P1, . . . , P4 are empty. We can assume that the pairs {P1, P2}
and {P3, P4} each consist of one empty and one nonempty set. By Observation 1 U1 ∪ U2 and
U3 ∪ U4, respectively, contain a square anchored at a point in P1 ∪ P2 and P3 ∪ P4 of area at least
area(U0)/4 = 1/16. Hence Asq(P ) ≥ 2 · 1
Case 3: precisely three of P1, . . . , P4 are empty. We can assume that P3 6= ∅. Let (a, b) ∈ P
be a maximal point in the product order (e.g., the sum of coordinates is maximum). Then s =
[a, a + 1
2 ] is a square anchored at (a, b), s ⊆ [0, 1]2 since (a, b) ∈ U3, and int(s) ∩ P = ∅.
Hence Asq(P ) ≥ area(s) = 1/4.

2 ] × [b, b + 1

16 = 1/8.

Case 4: Pi 6= ∅ for every i = 1, . . . , 4. Note that Asq(P ) ≥ P4

anchored at Pi are restricted to Ui. Induction completes the proof in this case.

i=1 Asq(Pi), where the squares

In all four cases, we have veriﬁed that Asq(P ) ≥ 1/8, as claimed. The inductive proof can be
turned into a recursive algorithm based on a quadtree subdivision of the n points, which can be
computed in O(n log n) time [7, 18]. In addition, computing an extreme point (with regard to a
speciﬁed axis-direction) in any subsquare over all needed such calls can be executed within the
same time bound. Note that the bound in Case 3 is at least 5/32 and Case 4 is inductive.

7

Sharpening the analysis of Cases 1 and 2 yields an improved bound 5/32; since 5/32 < 1/4, the
value 5/32 is not a bottleneck for Cases 3 and 4. Details are given in Appendix B; the running
time remains O(n log n).

5 Constant-Factor Approximations for Anchored Square Packings

In this section we investigate better approximations for square packings. Given a ﬁnite point set
P ⊂ [0, 1]2, perhaps the most natural greedy strategy for computing an anchored square packing
of large area is the following.

Algorithm 1. Set Q = P and S = ∅. While Q 6= ∅, repeat the following. For each point q ∈ Q,
compute a candidate square s(q) such that (i) s(q) ⊆ [0, 1]2 is anchored at q, (ii) s(q) is empty of
points from P in its interior, (iii) s(q) is interior-disjoint from all squares in S, and (iv) s(q) has
maximum area. Then choose a largest candidate square s(q), and a corresponding point q, and set
Q ← Q \ {q} and S ← S ∪ {s(q)}. When Q = ∅, return the set of squares S.

Remark. Let ρ1 denote the approximation ratio of Algorithm 1, if it exists. The construction in
Fig. 4(a–b) shows that ρ1 ≤ 1/4. For a small ε > 0, consider the point set P = {p1, . . . , pn}, where
p1 = (1/2 + ε, 1/2 + ε), p2 = (1/2, 0), p3 = (0, 1/2), and the rest of the points lie on the lower side
of U in the vicinity of p2, i.e., xi ∈ (1/2 − ε/2, 1/2 + ε/2) and yi = 0 for i = 4, . . . , n. The packing
generated by Algorithm 1 consists of a single square of area (1/2 + ε)2, as shown in Fig. 4(a), while
the packing in Fig. 4(b) has an area larger than 1 − ε. By letting ε be arbitrarily small, we deduce
that ρ1 ≤ 1/4.

ai

pi

aj

pj

sj

(c)

(a)

(b)

Figure 4: (a–b) A 1/4 upper bound for the approximation ratio of Algorithm 1. (c) Charging scheme for
Algorithm 1. Without loss of generality, the ﬁgure illustrates the case when sj is a lower-left anchored square.

We ﬁrst show that Algorithm 1 achieves a ratio of 1/6 (Theorem 3) using a charging scheme that
compares the greedy packing with an optimal packing. We then reﬁne our analysis and sharpen
the approximation ratio to 9

47 = 1/5.22 . . . (Theorem 4).

Charging scheme for the analysis of Algorithm 1. Label the points in P = {p1, . . . , pn}
and the squares in S = {s1, . . . , sn} in the order in which they are processed by Algorithm 1 with
i=1 area(si) be the area of the greedy packing, and let OPT denote
i=1 area(ai), where ai is the square anchored at pi.

q = pi and si = s(q). Let G =Pn
an optimal packing with A = area(OPT) =Pn

8

We employ a charging scheme, where we distribute the area of every optimal square ai with
area(ai) > 0 among some greedy squares; and then show that the total area of the optimal squares
charged to each greedy square sj is at most 6 area(sj) for all j = 1, . . . , n. (Degenerate optimal
squares, i.e., those with area(ai) = 0 do not need to be charged). For each step j = 1, . . . , n of
Algorithm 1, we shrink some of the squares a1, . . . , an, and charge the area-decrease to the greedy
square sj. By the end (after the nth step), each of the squares a1, . . . , an will be reduced to a single
point.

Speciﬁcally in step j, Algorithm 1 chooses a square sj, and: (1) we shrink square aj to a single
point; and (2) we shrink every square ai, i > j that intersects sj in its interior until it no longer
does so. This procedure ensures that no square ai, with i < j, intersects sj in its interior in step j.
Refer to Fig. 4(c). Observe three important properties of the above iterative process:

(i) After step j, the squares s1, . . . , sj, a1, . . . , an have pairwise disjoint interiors.
(ii) After step j, we have area(aj) = 0 (since aj was shrunk to a single point).
(iii) At the beginning of step j, if ai intersects sj in its interior (and so i ≥ j), then area(ai) ≤
area(sj) since sj is feasible for pi when aj is selected by Algorithm 1 due to the greedy choice.
Lemma 3. Suppose there exists a constant ̺ ≥ 1 such that for every j = 1 . . . n, square sj receives
a charge of at most ̺ area(sj). Then Algorithm 1 computes an anchored square packing whose area
G is at least 1/̺ times the optimal.

Proof. Overall, each square sj receives a charge of at most ̺ area(sj) from the squares in an optimal
j=1 area(sj) = ̺ G, and thus

solution. Consequently, A = area(OPT) = Pn

G ≥ A/̺, as claimed.

i=1 area(ai) ≤ ̺Pn

In the remainder of this section, we bound the charge received by one square sj, for j = 1, . . . n.

We distinguish two types of squares ai, i > j, whose area is reduced by sj:

Q1 = {ai : i > j, the area of ai is reduced by sj, and int(ai) contains no corner of sj},
Q2 = {ai : i > j, the area of ai is reduced by sj, and int(ai) contains a corner of sj}.

It is clear that if the insertion of sj reduces the area of ai, i > j, then ai is in either Q1 or Q2.

Note that the area of aj is also reduced to 0, but it is in neither Q1 nor Q2.
Lemma 4. Each square sj receives a charge of at most 6 area(sj).
Proof. Consider the squares in Q1. Assume that ai intersects the interior of sj, and it is shrunk
to a′i. The area-decrease ai \ a′i is an L-shaped region, at least half of which lies inside sj; see
Fig. 4. By property (i), the L-shaped regions are pairwise interior-disjoint; and hence the sum of
their areas is at most 2 area(sj). Consequently, the area-decrease caused by sj in squares in Q1 is
at most 2 area(sj).
Consider the squares in Q2. There are at most three squares ai, i > j, that can contain a corner
of sj since the anchor of sj is not contained in the interior of any square ai. Since the area of each
square in Q2 is at most area(sj) by property (iii), the area decrease is at most 3 area(sj), and so is
the charge received by sj from squares.
Finally, area(aj) ≤ area(sj) by property (iii), and this is also charged to sj. Overall sj receives

a charge of at most 6 area(sj).

The combination of Lemmas 3 and 4 readily implies the following.

Theorem 3. Algorithm 1 computes an anchored square packing whose area is at least 1/6 times
the optimal.

9

Reﬁned analysis of the charging scheme. We next improve the upper bound for the charge
received by sj; we assume for convenience that sj = U = [0, 1]2. For the analysis, we use only a few
properties of the optimal solution. Speciﬁcally, assume that a1, . . . , am are interior-disjoint squares
such that each ai: (a) intersects the interior of sj; (b) has at least a corner in the exterior of sj;
(c) does not contain (0, 0) in its interior; and (d) area(ai) ≤ area(sj).
The intersection of any square ai with ∂U is a polygonal line on the boundary ∂U , consisting of
one or two segments. Since the squares ai form a packing, these intersections are interior-disjoint.
Let ∆1(x) denote the maximum area-decrease of a set of squares ai in Q1, whose intersections
with ∂U have total length x. Similarly, let ∆2(x) denote the maximum area-decrease of a set of
squares ai in Q2, whose intersections with ∂U have total length x. By adding suitable squares to
Q1, we can assume that 4 − x is the total length of the intersections ai ∩ ∂U over squares in Q2
(i.e., the squares in Q1 ∪ Q2 cover the entire boundary of U ). Consequently, the maximum total
area-decrease is given by

∆(x) = ∆1(x) + ∆2(4 − x), and ∆ = sup
0≤x≤4

∆(x).

(4)

We now derive upper bounds for ∆1(x) and ∆2(x) independently, and then combine these

bounds to optimize ∆(x). Since the total perimeter of U is 4, the domain of ∆(x) is 0 ≤ x ≤ 4.
Lemma 5. The following inequalities hold:

∆1(x) ≤ 2,
∆1(x) ≤ x,
∆1(x) ≤ 1 + (x − 1)2, for 1 ≤ x ≤ 2,
∆1(x) ≤ 1 + ⌊x⌋

(x − ⌊x⌋)2

+

4

4

, for 0 ≤ x ≤ 4.

(5)

(6)

(7)

(8)

Proof. Inequality (5) was explained in the proof of Theorem 3. Inequalities (6) and (7) follow from
the fact that the side-length of each square ai is at most 1 and from the fact that the area-decrease

is at most the area (of respective squares); in addition, we use the inequalityP x2
i ≤ (P xi)2, for
xi ≥ 0 andP xi ≤ 1, and the inequality x2 + y2 ≤ 1 + (x + y − 1)2, for 0 ≤ x, y ≤ 1, and x + y > 1.

Write

∆1(x) = ∆in

1 (x) + ∆out

1

(x),

(9)

1 (x) and ∆out

where ∆in
(x) denote the maximum area-decrease contained in U and the complement
of U , respectively, of a set of squares in Q1 whose intersections with ∂U have total length x, where
0 ≤ x ≤ 4. Obviously, ∆in

1 (x) ≤ area(U ) = 1. We next show that

1

∆out

1

(x) ≤ ⌊x⌋

4

+

(x − ⌊x⌋)2

4

,

and thereby establish inequality (8).

the rectangle ai \ U . The area-decrease outside U equals xizi − z2
by x2

Consider a square ai of side-length xi ≤ 1 in Q1. Let zi denote the length of the shorter side of
i and so it is bounded from above
i /4 (equality is attained when zi = xi/2).
Consequently,

∆out

1

(x) ≤ sup X0≤xi≤1

P xi=x

x2
i
4

= ⌊x⌋
4

+

(x − ⌊x⌋)2

,

4

10

where the last equality follows from a standard weight-shifting argument, and equality is attained
when x is subdivided into ⌊x⌋ unit length intervals and a remaining shorter interval of length
x − ⌊x⌋.

Let k ≤ 3 be the number of squares ai in Q2, where i > j. We can assume that exactly 3
squares ai, with i > j, are in Q2, one for each corner except the lower-left anchor corner of U , that
is, k = 3; otherwise the proof of Lemma 4 already yields an approximation ratio of 1/5. Clearly,
we have ∆2(x) ≤ k ≤ 3, for any x.
We ﬁrst bring the squares in Q2 into canonical position: x monotonically decreases, ∆(x) does
not decrease, and properties (a–d) listed earlier are maintained. Speciﬁcally, we transform each
square ai ∈ Q2 as follows (refer to Fig. 5):

• Move the anchor of ai to another corner if necessary so that one of its coordinates is contained

in the interval (0, 1);

• translate ai horizontally or vertically so that ai ∩ U decreases to a skinny rectangle of width

ε, for some small ε > 0.

Figure 5: Bounding the area-decrease; moving the squares in Q2 into canonical position. The parts of the
boundary of U covered by each square (after transformations) are drawn in thick red lines.

Lemma 6. The following inequality holds:

∆2(x) ≤ 2x −

x2
3

, for 0 ≤ x ≤ 4.

(10)

Proof. Assume that the squares in Q2 are in canonical position. Let yi denote the side-length of
ai, let xi denote the length of the longer side of the rectangle ai ∩ U and zi denote the length of the
shorter side of the rectangle ai \ U , i = 1, 2, 3. Since the squares in Q2 are in canonical position,
i=1 xi = x − O(ε). Letting ε → 0, we have

i=1 xi = x.

we have xi + zi = yi ≤ 1, for i = 1, 2, 3. We also haveP3
P3
3Xi=1
(1 − (1 − x2

0≤x1,x2,x3≤1

3Xi=1

∆2(x) =

sup

i ) =

sup

xi+zi=yi≤1

i )) =

sup

0≤x1,x2,x3≤1

3Xi=1
(2xi − x2
i )

= 2x −

inf

0≤x1,x2,x3≤1

x2
i = 2x − 3

x2
9

i − z2
(y2
3Xi=1

x2
3

.

= 2x −

11

Observe that the inequality ∆2(x) ≤ 3, for every 0 ≤ x ≤ 4, is implied by the inequality (10).

Putting together the upper bounds in Lemmas 5 and 6 yields Lemma 7:

Lemma 7. The following inequality holds:

∆ ≤

38
9

.

(11)

From the opposite direction, ∆ ≥ 4 holds even in a geometric setting, i.e., as implied by several
constructions with squares.
Proof. The lower bound ∆ ≥ 4 is implied by any of the two (obviously diﬀerent!) conﬁgurations
shown in Fig. 6.

Figure 6: Two constructions with ∆ ≥ 4 − ε.
We now prove the upper bound. Recall (4); and by (10) we obtain
8 + 2x − x2

(4 − x)2

=

.

∆2(4 − x) ≤ 2(4 − x) −

3

3

We partition the interval [0, 4] into several subintervals, and select the best upper bound we have
in each case. We distinguish the following cases (marked with ♣):

♣ 0 ≤ x ≤ 1: By (6), ∆1(x) ≤ 1; since ∆2(4 − x) ≤ 3, we immediately get that

∆ = ∆1(x) + ∆2(4 − x) ≤ 1 + 3 = 4 < 38/9.

√3
3 : Put g1(x) = 14 − 4x + 2x2. On this interval we have

♣ 1 ≤ x ≤ 1 +

1 + (x − 1)2 ≤

5
4

+

(x − 1)2

4

,

and so we can use the upper bound in (7) on ∆1(x) and obtain

∆(x) = ∆1(x) + ∆2(4 − x) ≤ 1 + (x − 1)2 +
38
9

14 − 4x + 2x2

g1(1 + 1/√3)

≤

=

=

3

3

8 + 2x − x2

3

.

♣ 1 +

√3
3 ≤ x < 2: Put g2(x) = 50 + 2x − x2. On this interval we have

1 + (x − 1)2 ≥

5
4

+

(x − 1)2

4

,

12

and so we can use the upper bound in (8) on ∆1(x) and obtain
(x − 1)2
38
9

∆(x) = ∆1(x) + ∆2(4 − x) ≤

g2(1 + 1/√3)

50 + 2x − x2

5
4

12

12

=

+

=

≤

4

+

.

8 + 2x − x2

3

♣ 2 ≤ x < 3: Put g3(x) = 62 − 4x − x2. Using the upper bound in (8) on ∆1(x) yields

∆(x) = ∆1(x) + ∆2(4 − x) ≤
g3(2)

62 − 4x − x2

=

≤

12

12

+

8 + 2x − x2

3

6
4

=

+

(x − 2)2
4
25
38
9
6

<

.

♣ 3 ≤ x < 4: Put g4(x) = 80 − 10x − x2. Using the upper bound in (8) on ∆1(x) yields

7
∆(x) = ∆1(x) + ∆2(4 − x) ≤
4
g4(3)

80 − 10x − x2

=

+

=

≤

12

12

4

(x − 3)2
41
12

< 4 <

+

3

8 + 2x − x2
38
9

.

♣ x = 4: By (5), ∆ ≤ ∆1(x) ≤ 2 < 38/9.

All cases have been checked, and so the proof of the upper bound is complete.

Lemma 8. Each square sj receives a charge of at most 47

9 area(sj).

Proof. By Lemma 7, the area-decrease is at most 38/9 area(sj), and so is the charge received by sj
from squares in Q1 and from squares in Q2 with the exception of the case i = j. Adding this last

charge yields a total charge of at most(cid:0)1 + 38

9(cid:1) area(sj) = 47

The combination of Lemmas 3 and 8 now yields the following.

9 area(sj).

Theorem 4. Algorithm 1 computes an anchored square packing whose area is at least 9/47 times
the optimal.

6 Constant-Factor Approximations for Lower-Left Anchored

Square Packings

The following greedy algorithm, analogous to Algorithm 1, constructs a lower-left anchored square
packing, given a ﬁnite point set P ⊂ [0, 1]2.
Algorithm 2. Set Q = P and S = ∅. While Q 6= ∅, repeat the following. For each point q ∈ Q,
compute a candidate square s(q) such that (i) s(q) ⊆ [0, 1]2 has q as its lower-left anchor, (ii) s(q)
is empty of points from P in its interior, (iii) s(q) is interior-disjoint from all squares in S, and
(iv) s(q) has maximum area. Then choose a largest candidate square s(q), and a corresponding
point q, and set Q ← Q \ {q} and S ← S ∪ {s(q)}. When Q = ∅, return the set of squares S.

13

Figure 7: A 1/3 upper bound for the approximation ratio of Algorithm 2.

Remark. Let ρ2 denote the approximation ratio of Algorithm 2. The construction in Fig. 7
shows that ρ2 ≤ 1/3. Speciﬁcally, for ε > 0, with ε−1 ∈ N, consider the point set P =
{(ε, ε), (0, 1
2 + kε) : k = 1, . . . , 1/(2ε) − 1}. Then the area of the packing
in Fig. 7 (right) is 3
4 − O(ε), but Algorithm 2 returns the packing shown in Fig. 7 (left) of area
1
4 + O(ε).
We next demonstrate that Algorithm 2 achieves approximation ratio 1/3. According to the

2 , 0)} ∪ {( 1

2 + kε, 1

2 ), ( 1

above example, this is the best possible for this algorithm.

Theorem 5. Algorithm 2 computes a lower-left anchored square packing whose area is at least 1/3
times the optimal.

where ai is the square anchored at pi.

Proof. Label the points in P = {p1, . . . , pn} and the squares in S = {s1, . . . , sn} in the order in which
i=1 area(si) be the area of
i=1 area(ai),

they are processed by Algorithm 2 with q = pi and si = s(q). Let G =Pn
the greedy packing, and let OPT denote an optimal packing with A = area(OPT) =Pn

We charge the area of every optimal square ai to one or two greedy squares sℓ; and then show
that the total area charged to sℓ is at most 3 area(sℓ) for all ℓ = 1, . . . , n. Consider a square ai,
1 ≤ i ≤ n, with area(ai) > 0. Let j = j(i) be the minimum index such that sj intersects the interior
of ai. Let bi denote the candidate square associated to pi in step j + 1 of Algorithm 2. Note that
bi ⊂ ai, thus area(bi) < area(ai). If area(bi) > 0, then let k = k(i) be the minimum index such that
sk intersects the interior of bi.

ai

pi

pj

sj

ai \ bi

sj

sk

ai \ bi

sj

bi

pi

pj

pk

pi

bi

pj

Figure 8: Left: ai contains the upper-left corner of sj; and area(ai) is charged to sj. Middle and Right: ai
contains no corner of sj, but it contains the lower-right corner of sk. Then area(ai \ bi) is charged to sj and
area(bi) is charged to sk.

We can now describe our charging scheme: If ai contains the upper-left or lower-right corner
of sj, then charge area(ai) to sj (Fig. 8, left). Otherwise, charge area(ai \ bi) to sj, and charge
area(bi) to sk (Fig. 8, middle-right).
We ﬁrst argue that the charging scheme is well-deﬁned, and the total area of ai is charged to
one or two squares (sj and possibly sk). Indeed, if no square sℓ, ℓ < i, intersects the interior of ai,

14

then ai ⊆ si, and j(i) = i; and if ai 6⊆ sj and no square sℓ, j < ℓ < i, intersects the interior of bi,
then bi ⊆ si and k(i) = i.

sℓ

type T1

ai

pi

bi

type T2

aℓ

pℓ

type T2

type T1

Figure 9: The shaded areas are charged to square sℓ.

Note that if area(ai) is charged to sj, then area(ai) ≤ area(sj). Indeed, if area(ai) > area(sj),
then ai is entirely free at step j, so Algorithm 2 would choose a square at least as large as ai instead
of sj, which is a contradiction. Analogously, if area(bi) is charged to sk, then area(bi) ≤ area(sk).
Moreover, if area(bi) is charged to sk, then the upper-left or lower-right corner of sk is on the
boundary of bi, and so this corner is contained in ai; refer to Fig. 8 (right).

Fix ℓ ∈ {1, . . . , n}. We show that the total area charged to sℓ is at most 3 area(sℓ). If a square
ai, i = 1, . . . , n, sends a positive charge to sℓ, then ℓ = j(i) or ℓ = k(i). We distinguish two types
of squares ai that send a positive charge to sℓ; refer to Fig. 9:

T1: ai contains the upper-left or lower-right corner of sℓ in its interior.
T2: ai contains neither the upper-left nor the lower-right corner of sℓ.

Since OPT is a packing, at most one optimal square contains each corner of sℓ. Consequently,
there is at most two squares ai of type T1. Since area(ai) ≤ area(sℓ), the charge received from the
squares of type T1 is at most 2 area(sℓ).
The following technical lemma is used for controlling the charge that a greedy square s receives

from squares of an optimal solution.

Lemma 9. Let s be an axis-aligned square, and a1, a, . . . , am be interior-disjoint axis-aligned
squares such that

P1: each ai intersects the bottom or the left side of a square s, but

P2: the interior of ai does not contain any corner of s.

For i = 1, . . . , m, let bi be a maximal square contained in ai \ int(s). Then Pm

area(s).

i=1 area(ai \ bi) ≤

Proof. For i = 1, . . . , m, let ci denote the side-length of ai, and deﬁne the depth di of ai as the
length of a shortest side of ai ∩ s. With this notation, we have 0 ≤ di ≤ ci ≤ c, the area of the
L-shaped region ai \ bi is

area(ai \ bi) = area(ai) − area(bi) = c2

i − (ci − di)2 = 2cidi − d2

i = (2ci − di)di.

We apply a sequence of operations on the squares a1, . . . , am that maintain properties P1
i=1(2ci − di)di. The operations successively transform the
squares, eventually eliminate m − 1 squares, and ensure that the last surviving square is ak = s.

and P2, and monotonically increasePm
This impliesPm

i=1 2cidi − d2

i ≤ area(s), as required.

15

s

s

s

s

⇒

⇒

⇒

Figure 10: Operations 1, 2 and 3.

Operation 1. Translate ai horizontally or vertically so that its depth increases until ci = di or ai
is blocked by some other square. See Fig. 10. Perform operation 1 successively for every square ai
i − (ci − di)2 of ai since
in an arbitrary order. The operation can only increase the contribution c2
ci is ﬁxed and the depth di can only increase.
Operation 2. Translate ai horizontally or vertically so that its depth remains ﬁxed but ai moves
closer to the lower-left corner p until it reaches p or is blocked by another square. See Fig. 10.
Perform operation 2 successively for every square ai in the order determined by their distance from
p. This operation does not change the contribution of the squares ai.
Operation 3. If ai intersects the bottom (left) side of s and its right (top) side is not in contact
with any other square or a corner of s, then dilate ai from its upper-left (lower-right) corner until
it is blocked by another square or the boundary of s. See Fig. 10 (right).

Since operation 3 increases ci and keeps di ﬁxed, the contribution (2ci − di)di of ai increases.
Note that if the lower-left corner of ai is p originally and operation 3 is applied to ai, then its
lower-left corner may move to the exterior of s.

s

s

ai

s

s

s

aj

ai

ai

aj

ajaj

ai

aj

Figure 11: Operation 4.

Operation 4. Consider two squares, ai and aj, such that both intersect the bottom side of s and
they are adjacent. Without loss of generality, assume ai is left of aj and di ≥ dj. See Fig. 11. We
wish to increase ci and decrease cj while ci +cj is ﬁxed, and such that their depths does not increase.
We distinguish two cases to ensure that ai intersects the bottom side of s after the operation. If
dj < cj, then dilate ai from its upper-left corner and aj from its upper-right corner simultaneously
until dj = cj or ai is blocked by some other square or a corner of s. In this case, di and dj remain
constant, and the contribution of ai and aj increases or remains the same. Indeed, if ci increases
and cj decreases by ε > 0, then

(2(ci + ε) − di)di + (2(cj − ε) − dj)dj) = (2ci − di)di + (2cj − dj)dj + 2ε(di − dj)

≥ (2ci − di)di + (2cj − dj)dj.

If dj = cj, then dilate ai from its upper-left corner and aj from its lower-right corner simultaneously
until cj = 0 or ai is blocked by some other square or a corner of s. In this case, di is constant, and

16

dj = cj decreases. The contribution of ai and aj increases or remains the same:

j + 2ε(di − dj) + ε2
j + 2ε(di − dj).
We apply analogous operations to adjacent squares intersecting the left side of s.

(2(ci + ε) − di)di + (dj − ε)2 = (2ci − di)di + d2
≥ (2ci − di)di + d2

s

s

s

aj

aiai

ai

aj

Figure 12: Operation 5.

Operation 5. Consider two adjacent squares, ai and aj, such that ai is incident to the lower-left
corner of s and intersects the bottom (resp., left) side of s, and aj intersects the left (resp., bottom)
side of s. See Fig. 12. Note that dj ≤ ci, otherwise operation 2 could increase ci; and if dj < ci,
then cj = dj, otherwise operation 1 could increase dj. Let R be the axis-aligned bounding box of
(ai ∪ aj) ∩ s, which is incident to the lower-left corner of p and area(R) = ci(di + cj). We replace
ai and aj with one new square ak such that ak ∩ s = R.
It remains to show that operation 5 increases the total contribution of the squares. We distin-
guish two cases depending on which side of R is longer.
Case 1. If di + cj ≥ ci, then ak has side-length ck = di + cj and depth dk = ci. In case dj = ci
(Fig. 11, left), we have

(2ci − di)di + (2cj − dj)dj = (2ci − di)di + (2cj − ci)ci

= 2cidi − d2
≤ 2cidi + 2cicj − c2
= (2(di + cj) − ci)ci
= (2ck − dk)dk.
Otherwise we have dj = cj < ci and dj = cj (Fig. 11, right). Thus,

i

i + 2cjci − c2

i

(2ci − di)di + c2

i

j − d2
j − (ci − cj)2

j = 2cidi + c2
≤ 2cidi + c2
= 2cidi + 2cicj − c2
= (2(di + cj) − ci)ci
= (2ck − dk)dk.

i

Case 2. If di + cj ≤ ci, then ak has side-length ck = ci and depth dk = di + cj. In this case, we

17

have dj = ci, otherwise operation 1 could increase dj. Thus,

i

j + d2
i )

(2ci − di)di + c2

j − d2
j − (c2

j = 2cidi + c2
= 2cidi + 2c2
= 2cidi + 2cicj − 2(ci − cj)cj − (d2
i + c2
j )
≤ 2cidi + 2cicj − 2dicj − (d2
i + c2
j )
= 2cidi + 2cicj − (di + cj)2
= (2ci − (di + cj))(di + cj)
= (2ck − dk)dk.

After successively applying operation 5, we obtain a single square ak = s, whose contribution

is area(ak) = area(s), as required.

By Lemma 9, sℓ receives a charge of at most area(sℓ) from squares of type T2. It follows that

each sℓ received a charge of at most 3 area(sℓ). Consequently,

A = area(OPT) =

nXi=1

area(ai) ≤ 3

nXℓ=1

area(sℓ) = 3 G,

and thus G ≥ A/3. This completes the proof of Theorem 5.

7 Approximation Schemes

In this section, we show that there is a PTAS (resp., QPTAS) for the maximum anchored square
(resp., rectangle) problem using reductions to the minimum weight independent set (MWIS) prob-
lem for axis-aligned squares (resp., rectangles) in the plane. The current best approximation ratio
for MWIS with axis-aligned rectangles is O(log n/ log log n) [17], and O(log log n) in the unweighted
case [15]. There is a PTAS for MWIS with axis-aligned squares [23, 16] (even a local search strategy
works in the unweighted case [4]); and there is a QPTAS for MWIS with axis-aligned rectangles [2].
Speciﬁcally, for n axis-aligned squares an (1− ε)-approximation for MWIS which can be computed
in time nO(1/ε) [16], and for n axis-aligned rectangles in time exp(poly(log n/ε)) [2].

7.1 The Reach of Lower-Left Anchored Packings

An anchored rectangle can be also viewed from the perspective of robotics applications such as
a rectangular robotic arm anchored at the given point. In this context, an anchored packing of
maximum total area represents the maximum collective reach of a collection of nonoverlapping
rectangular robotic arms. The maximum area of a lower-left anchored rectangle (resp., square)
packing can be arbitrarily small, i.e., with no constant lower-bound guarantee, when the points in
P are close to the top or right boundary of [0, 1]2, or for square packings, when n is large and the
points are suitably placed, e.g., along the diagonal of unit slope. However, we show below that a
greedy packing still covers a constant fraction of the region that could potentially be covered by
lower-left anchored rectangles (resp., squares). We then employ this lower bound in the design of
a QPTAS (resp., PTAS) for lower-left anchored rectangles (resp., squares) in Section 7.2.

18

The reach of lower-left anchored rectangles. For a set P of n points in U , deﬁne the reach

of lower-left anchored rectangles as W (P ) = Sp∈P r(p), where r(p) is the axis-aligned rectangle

spanned by p and the upper-right corner of [0, 1]2. Clearly, W (P ) is a simple orthogonal polygon
in which every lower-left corner is an element in P . Vertical lines through the lower-left corners
of W (P ) subdivide W (P ) into axis-aligned rectangles whose lower left-corners are in P . Each of
these rectangles r admits a lower-left anchored rectangle packing of area at least 0.091 area(r) by
the main result in [22], consequently area(OPT) ≥ 0.091 area(W (P )).

The reach of lower-left anchored squares. Similarly, we deﬁne the reach of lower-left an-

chored squares as Wsq(P ) =Sp∈P s(p), where s(p) is the (unique) maximal square contained in U

whose lower-left corner is p and that is empty of points of P in its interior. Observe that Wsq(P )
is the union of candidate squares in the ﬁrst iteration of Algorithm 2.

i=1 3si. This claim clearly holds

Lemma 10. Let P = {p1, . . . , pn} ⊂ U be a point set with a lower-left anchored square packing

S = {s1, . . . , sn} returned by Algorithm 2. Then Wsq(P ) ⊂Sn
Proof. We need to show that every point q ∈ Wsq(P ) lies in Sn

when q is covered by one of the squares s1, . . . , sn.

i=1 3si.

Let q ∈ Wsq(P ) \ P be a point left uncovered by the greedy square packing. By the deﬁnition
of Wsq(P ), point q lies in some lower-left anchored square s = s(pi), pi ∈ P , of maximum area
contained in [0, 1]2 but empty of points of P in its interior. Note that the boundary of s contains
at least one point from P , namely pi ∈ P .
Let sj be the ﬁrst square chosen by Algorithm 2 that intersects the interior of s. We are
guaranteed the existence of sj because if no previous greedy square intersects the interior of s, then
si = s (possibly i = j). At the beginning of the step j of Algorithm 2, no square in S intersects s.
By the greedy choice, we have area(sj) ≥ area(s). Since sj ∩ s 6= ∅ and the side-length of s is less
than or equal to the side-length of sj, we have q ∈ s ⊂ 3sj.
Theorem 6. For every ﬁnite point set P in [0, 1]2, there is a lower-left anchored square packing of
total area at least 1
Proof. Given a point set P = {p1, . . . , pn} ⊂ [0, 1]2 and a greedy lower-left anchored square packing
S = {s1, . . . , sn}, Lemma 10 yields

9 area(Wsq(P )).

area(Wsq(P )) ≤ area  n[i=1

3si! ≤

nXi=1

area(3si) = 9

area(si),

nXi=1

i area(si) ≥ 1

9 area(Wsq(P )), as claimed.

which impliesPn
The reach of anchored squares. For a ﬁnite (nonempty) set P ⊂ [0, 1]2, the reach of anchored
squares Rsq(P ) is the union of all maximal squares anchored at a point in P and contained in
U . Obviously, we have Rsq(P ) ≥ 5/32 by Theorem 2, and we suspect that area(Rsq(P )) ≥ 1
2 for
every P . If true, this bound would be the best possible: choose a small ε > 0 and place all n points
in the ε-neighborhood of ( 1
2 , 0) on the lower side of U . The side-length of any anchored square is at
most 1
2 + ε, which is an upper bound for the distance of these points from the left and right side of
[0, 1]2. Consequently all anchored squares lie below the horizontal line y = 1
2 + ε, and so the area
of their reach is at most 1

2 + ε.

19

7.2 The approximation schemes

Anchored rectangles. The anchored rectangle packing problem can be discretized [8], as one
can specify a set of Θ(n3) anchored rectangles that contains the optimum packing: consider the
Hanan grid [25] induced by the points, i.e., the union of ∂U and the 2n unit horizontal and vertical
unit segments incident to the n points and contained in U . Then an optimal rectangle packing
can be found in this grid (with at most n2 candidates for each anchor). To formulate the anchored
rectangle packing problem as a maximum weight independent set (MWIS) problem, the set of
rectangles anchored at the same point are slightly enlarged so that they contain the common
anchors in their interiors. For a set of points in general position, this procedure yields an QPTAS
for ﬁnding a maximum area anchored rectangle packing for a set of n points in U .

Anchored squares.
It is worth noting that no similar discretization is known for the anchored
square packing problem. With an ε-factor loss of the total area, however, we can construct
O(n log(n/ε)) squares for which MWIS gives an anchored packing of area at least (1−ε)area(OPT).
After a similar transformation ensuring that the set of squares anchored at the same point contain
the point in their interiors, and under the assumption of points in general position, we obtain a
PTAS for the maximum-area anchored square packing problem.

Theorem 7. There is a PTAS for the maximum area anchored square problem. For every ε > 0,
there is an algorithm that computes, for a set of n points in general position in [0, 1]2, an anchored
square packing of area at least (1 − ε)area(OPT) in time nO(1/ε).
Proof. First we show that the problem can be discretized if we are willing to lose a factor ε > 0
of the maximum area of a packing. Let P be a set of n points in [0, 1]2, and let OPT be an
anchored square packing of maximum area. For a given ε > 0, drop all squares in OPT of area
less than ε/n, and shrink all remaining squares in OPT so that its anchor remains the same, and
its area decreases by a factor of at most 1 + ε to (ε/n)(1 + ε)k for some integer k ≥ 0. Denote
by OPTε the resulting anchored square packing. We have dropped small squares of total area at
most ε, and the area of any remaining square decreased by a factor of at most 1 + ε. Consequently,
(area(OPT)− ε)/(1 + ε) ≤ area(OPTε). For anchored square packings, we have area(OPT) ≥ 5/32
by Theorem 2, which yields

(1 − 32ε/5) area(OPT) ≤ area(OPTε).

(12)

Let ε > 0 be given. For every set P of n points in general position in [0, 1]2, we compute a set

bC of O((n/ε) log(n/ε)) candidate squares, and show that a MWIS of bC (where the weight of each
square is its area) has area at least (1 − ε) area(OPT). For each point p ∈ P , consider a set C(p)
of empty squares anchored at s and contained in U whose areas are of the form (ε/n)(1 + ε)k, for
k = 0, . . . ,⌊log(n/ε)/ log(1 + ε)⌋ = O(ε−1 log(n/ε)). Translate each square in C(p), for all p ∈ P ,
by a suﬃciently small δ so that each square contains its anchor in its interior, but does not cross
any new horizontal or vertical line through the points in P ; denote by bC(p) the resulting set of
squares. Let bC = Sp∈P bC(p). Note that the squares in bC(p) pairwise intersect for each p ∈ P ,

hence an MWIS contains precisely one square (possibly of 0 area) for each point in P . The number
of squares is

|bC| =Xp∈P

|bC(p)| = n · O(ε−1 log(n/ε)) = O((n/ε) log(n/ε)).

By (12), the area of a MWIS for the candidate squares in bC is at least (1 − ε) area(OPT).

20

Using the PTAS for MWIS with axis-aligned squares due to Chan [16]: an (1−ε)-approximation
for a set of m = O((n/ε) log(n/ε)) weighted axis-aligned squares can be computed in time mO(1/ε) =
nO(1/ε).

Lower-left anchored packings. Even though the area of lower-left anchored square packings
is not bounded by any constant, and Theorem 2 no longer holds, the PTAS in Theorem 7 can
be extended for this variant. Recall that for a set P ⊂ [0, 1]2, the reach of lower-left anchored
squares, denoted Wsq(P ), is the union of all maximal squares in [0, 1]2 whose lower-left corner is in
P , and are empty from points of P in their interior. It is clear that Wsq(P ) contains all squares of a
lower-left anchored square packing for P , and we have area(OPT) ≥ 1
9 area(Wsq(P )) by Theorem 6.
By adjusting the resolution of the candidate squares, we obtain a PTAS for the maximum area
lower-left anchored square packing problem.

Similarly, we obtain a QPTAS for the maximum area lower-left anchored rectangle problem.
Consequently, for n anchors, an (1 − ε)-approximation for the lower-left anchored square pack-
ing can be computed in time nO(1/ε); and for the lower-left anchored rectangle packing in time
exp(poly(log n/ε)).

8 Conclusion

We conclude with a few open problems:

1. Is the problem of computing the maximum-area anchored rectangle (respectively, square)

packing NP-hard?

2. Is there a polynomial-time approximation scheme for the problem of computing an anchored

rectangle packing of maximum area?

3. What lower bound on A(n) can be obtained by extending Lemma 1 concerning rectangles

from 2 to 3 points? Is there a short proof of Lemma 1?

4. Does Algorithm 1 for computing an anchored square packing of maximum area achieve a ratio
of 1/4? By Theorem 4 and the construction in Fig. 4, the approximation ratio is between
9/47 = 1/5.22 . . . and 1/4. Improvements beyond the 1/5 ratio are particularly exciting.

5. Is the reach of anchored squares always at least 1/2? (Does area(Rsq(P )) ≥ 1

2 hold for every

nonempty set P ?)

6. Is A(n) = 2

3 ? Is Asq(n) = 7

27 ?

7. What upper and lower bounds on A(n) and Asq(n) can be established in higher dimensions?

8. A natural variant of anchored squares is one where the anchors must be the centers of the

squares. What approximation can be obtained in this case?

Acknowledgment. The authors are thankful to Ren´e Sitters for constructive feedback on the
problems discussed in this paper. In particular, the preliminary approximation ratio 1/6 in Theo-
rem 3 incorporates one of his ideas.

References

[1] A. K. Abu-Aﬀash, P. Carmi, M. J. Katz, and G. Morgenstern, Multi cover of a polygon

minimizing the sum of areas, Int. J. Comput. Geometry & Appl. 21(6) (2011), 685–698.

21

[2] A. Adamaszek and A. Wiese, Approximation schemes for maximum weight independent set of

rectangles, in Proc. 54th Sympos. on Found. of Comp. Sci., IEEE, 2013.

[3] A. Adamaszek and A. Wiese, A quasi-PTAS for the two-dimensional geometric knapsack

problem, in Proc. 26th ACM-SIAM Sympos. Discrete Algor., SIAM, 2015.

[4] P. K. Agarwal and N. H. Mustafa, Independent set of intersection graphs of convex objects in

2D, Comput. Geom. 34(2) (2006), 83–95.

[5] A. Aggarwal and S. Suri, Fast algorithms for computing the largest empty rectangle, in: Proc.

3rd Ann. Sympos. Comput. Geometry, ACM, 1987, pp. 278–290.

[6] M. Ajtai, The solution of a problem of T. Rado, Bulletin de l’Acad´emie Polonaise des Sciences,

S´erie des Sciences Math´ematiques, Astronomiques et Physiques 21 (1973), 61–63.

[7] S. Aluru, Quadtrees and octrees, Ch. 19 in Handbook of Data Structures and Applications (D.

P. Mehta and S. Sahni, editors), Chapman & Hall/CRC, 2005.

[8] K. Balas and Cs. D. T´oth, On the number of anchored rectangle packings for a planar point

set, in Proc. 21st Ann. Internat. Comput. Combin. Conf., Springer, 2015, pp. 377–389.

[9] N. Bansal and A. Khan, Improved approximation algorithm for two-dimensional bin packing,

in Proc. 25th ACM-SIAM Sympos. Discrete Algor., SIAM, 2014, pp. 13–25.

[10] S. Bereg, A. Dumitrescu, and M. Jiang, Maximum area independent set in disk intersection

graphs, Internat. J. Comput. Geom. Appl. 20 (2010), 105–118.

[11] S. Bereg, A. Dumitrescu and M. Jiang, On covering problems of Rado, Algorithmica 57 (2010),

538–561.

[12] S. Bhowmick, K. Varadarajan, and S.-K. Xue, A constant-factor approximation for multi-
covering with disks, in Proc. 29th ACM Sympos. on Comput. Geom., ACM, 2013, pp. 243–248.

[13] S. Bhowmick, K. Varadarajan,

and S.-K. Xue, Addendum to

approximation for multi-covering with disks”, manuscript,

factor
at http://homepage.cs.uiowa.edu/~kvaradar/papers.html.

“A constant-
available

2014,

[14] V. B´ılo, I. Caragiannis, C. Kaklamanis, and P. Kanellopoulos, Geometric clustering to minimize

the sum of cluster sizes, in Proc. European Sympos. Algor., LNCS 3669, 2005, pp. 460–471.

[15] P. Chalermsook and J. Chuzhoy, Maximum independent set of rectangles, in Proc. 20th ACM-

SIAM Sympos. Discrete Algor., SIAM, 2009, pp. 892–901.

[16] T. M. Chan, Polynomial-time approximation schemes for packing and piercing fat objects, J.

Algorithms 46 (2003), 178–189.

[17] T. M. Chan and S. Har-Peled, Approximation algorithms for maximum independent set of

pseudodisks, Discrete Comput. Geom. 48(2) (2012), 373–392.

[18] K. L. Clarkson, Fast algorithms for the all nearest neighbors problem, in Proc. 24th Annu.

IEEE Sympos. Found. Comput. Sci., IEEE, 1983, pp. 226–232

[19] B. Chazelle, R.L. Drysdale, and D.T. Lee, Computing the largest empty rectangle, SIAM J.

Comput. 15(1) (1986), 300–315.

22

[20] A. Dumitrescu and M. Jiang, On the largest empty axis-parallel box amidst n points, Algo-

rithmica 66(2) (2013), 225–248.

[21] A. Dumitrescu and M. Jiang, Computational Geometry Column 56, SIGACT News Bulletin

44(2) (2013), 80–87.

[22] A. Dumitrescu and Cs. D. T´oth, Packing anchored rectangles, Combinatorica 35(1) (2015),

39–61.

[23] T. Erlebach, K. Jansen, and E. Seidel, Polynomial-time approximation schemes for geometric

intersection graphs, SIAM J. Comput. 34(6) (2006), 1302–1323.

[24] M. Formann and F. Wagner, A packing problem with applications to lettering of maps, in

Proc. 7th Sympos. Comput. Geometry, 1991, ACM Press, pp. 281–288.

[25] M. Hanan, On Steiner’s problem with rectilinear distance, SIAM J. Appl. Math. 14 (1966),

255–265.

[26] C. Iturriaga and A. Lubiw, Elastic labels around the perimeter of a map, J. Algorithms 47(1)

(2003), 14–39.

[27] J.-W. Jung and K.-Y. Chwa, Labeling points with given rectangles, Inf. Process. Lett. 89(3)

(2004), 115–121.

[28] K. G. Kakoulis and I. G. Tollis, Labeling algorithms, Ch. 28 in Handbook of Graph Drawing

and Visualization (R. Tamassia, ed.), CRC Press, 2013.

[29] D. Knuth and A. Raghunathan, The problem of compatible representatives, SIAM J. Disc.

Math. 5 (1992), 36–47.

[30] A. Koike, S.-I. Nakano, T. Nishizeki, T. Tokuyama, and S. Watanabe, Labeling points with

rectangles of various shapes, Int. J. Comput. Geometry Appl. 12(6) (2002), 511–528.

[31] M. van Kreveld, T. Strijk, and A. Wolﬀ, Point labeling with sliding labels, Comput. Geom. 13

(1999), 21–47.

[32] R. Rado, Some covering theorems (I), Proc. Lond. Math. Soc. 51 (1949), 232–264.

[33] R. Rado, Some covering theorems (II), Proc. Lond. Math. Soc. 53 (1951), 243–267.

[34] R. Rado, Some covering theorems (III), Proc. Lond. Math. Soc. 42 (1968), 127–130.

[35] T. Rado, Sur un probl`eme relatif `a un th´eor`eme de Vitali, Fund. Math., 11 (1928), 228–229.

[36] W. Tutte, Recent Progress in Combinatorics: Proc. 3rd Waterloo Conf. Combin., May 1968,

Academic Press, New York, 1969.

[37] P. Winkler, Packing rectangles, in Mathematical Mind-Benders, A.K. Peters Ltd., Wellesley,

MA, 2007, pp. 133–134.

[38] B. Zhu and M. Jiang, A combinatorial theorem on labeling squares with points and its appli-

cation, J. Comb. Optim. 11(4) (2006), 411–420.

23

A Proof of Lemma 1

We have P = {p1, p2} with pi = (xi, yi) for i ∈ {1, 2}, and y1 = 0. We can assume that x1 ≤ x2
by applying a reﬂection with respect to a vertical line if necessary. Consider the grid induced by
the two points in [0, 1]2, consisting of six rectangles ri, i = 1, . . . , 6, as shown in Fig. 13. Put
ai = area(ri), i = 1, . . . , 6. As a shorthand notation, a union of rectangles, ri1 ∪ . . . ∪ rik is denoted
ri1...ik , and ai1...ik = area(ri1...ik ) = ai1 + . . . + aik denotes its area.
It is not diﬃcult to show that every maximal rectangle packing for P = {p1, p2} is one of
the eight packings in Fig. 13 (although, we do not use this fact in the remainder of the proof).
Speciﬁcally, p1 is a lower-left or lower-right corner of a rectangle. If p1 is the lower-right corner of a
rectangle of height 1, then p2 can be the anchor of any of r2, r2, r5, and r6, producing the packings
r124, r134, r145, and r146. If p1 is the lower-left corner of a rectangle of height 1, then p2 can be the
anchor of r3 or r6, producing r235 and r256. If p1 is the lower-left corner of a rectangle of height
y2, then p2 can be the anchor of r12 or r3, which yields the packings r1256 and r356. If p1 is the
lower-right corner of a rectangle of height y2, then p2 must be the anchor of r1, and we obtain r124
again.

r1

r2

r3

r1

r2

r3

r1

r2

r3

r1

r2

r3

r4

r5

r6

r4

r5

r6

r4

r5

r6

r4

r5

r6

a124

a134

a145

a146

r1
r1

r2
r2

r3
r3

r1

r2

r3

r1

r2

r3

r1

r2

r3

r4
r4

r5
r5

r6
r6

r4

r5

r6

r4

r5

r6

r4

r5

r6

a235
a235

a256

a356

a1256

Figure 13: Eight possible anchored rectangle packings for p1 and p2.

The area of each of the eight packing in Fig. 13 is a quadratic function in the variables x1, x2, y2

over the domain

D = {(x1, x2, y2) ∈ R3 : 0 ≤ x1 ≤ x2 ≤ 1 and 0 ≤ y2 ≤ 1}.

We wish to ﬁnd the minimum A of the upper envelope of these eight 3-variate functions over the
domain D. Observe that

(13)
In particular, if a1 ≥ 1/6 holds, the desired lower bound, 7/12, follows. For the case analysis below,
we also use the following fact.

a1256 + a134 = 1 + a1.

Fact 1. Consider the quadratic equation 12τ 2 − 7τ + 1 = 0. Since its roots are τ1 = 1/4 and

τ2 = 1/3, we have 12τ 2 − 7τ + 1 ≤ 0 for τ ∈ [τ1, τ2].
Case analysis. We distinguish six cases covering the range of x1: 0 ≤ x1 ≤ 1/2.

Case 1: x1 ≤ 1/4. If y2 ≥ 1/3 then
1
2

max(a356, a1256) ≥ (1 − x1)y2 +

(1 − y2) ≥

3
4

y2 +

1
2

(1 − y2) =

1
2

+

y2
4 ≥

1
2

+

1
12

=

7
12

,

24

as required. If y2 ≤ 1/3, we distinguish two subcases:
follows that

If x2 ≤ 1/2, then select rectangle r3 anchored at p2, and one of r14 and r25 anchored at p1. If

2
3 −

x2
6 ≥

2
3 −

1
12

=

7
12

,

max(a134, a235) ≥

as required.

If x2 ≥ 1/2, then

x2
2

+

2
3

(1 − x2) =

a235 = (1 − x1) − a6 = (1 − x1) − (1 − x2)y2 ≥

3
4 −

1
2 ·

1
3

=

7
12

,

as required.

Case 2: 1/4 ≤ x1 ≤ 1/3. If y2 ≥ 1/2, we have

max(a356, a1256) ≥ (1 − x1)y2 +

1
2

(1 − y2) ≥

2
3

y2 +

1
2

(1 − y2) =

1
2

+

y2
6 ≥

1
2

+

1
12

=

7
12

,

as required.

If y2 ≤ 1/3, we have

a1 = x1(1 − y2) ≥

1
4 ·

2
3

=

1
6

,

and the lower bound follows from (13).

If 1/3 ≤ y2 ≤ 1/2, we distinguish two subcases:
Case 2.1: x2 ≤ 1/2.
If 1

1

3 ≤ y2 ≤

6(1−2x1) , then

a1 = x1(1 − y2) ≥ x1(cid:18)1 −

1

6(1 − 2x1)(cid:19) =

x1(5 − 12x1)
6(1 − 2x1) ≥

1
6

,

and the lower bound follows from (13) (due to Fact 1).

If

1

6(1−2x1) ≤ y2 ≤ 1

2 , then

a356 = (1 − x2) + (x2 − x1)y2 ≥ (1 − x2) + (x2 − x1)

=

6 − 13x1 − 5x2 + 12x1x2

6(1 − 2x1)

7
12

,

≥

1

6(1 − 2x1)

as required. The last inequality above is equivalent to

5(1 − 2x2) ≥ 12x1(1 − 2x2),

which holds for x1 ≤ 5/12.

Case 2.2: x2 ≥ 1/2.
If 1
3 ≤ y2 ≤ 1 − 1

6x1

, then

a1 = x1(1 − y2) ≥ x1

1
6x1

=

1
6

,

and the lower bound follows from (13).

25

If 1 − 1

6x1 ≤ y2 ≤ 1

2 , then

a1256 = (1 − x1)y2 + x2(1 − y2) = x2 + y2(1 − x1 − x2) ≥ x2 +
7x1 − 6x2
6x1

1 − 6x1x2 − 1 + x1 + x2
6x1

6x1x2 + 6x1 − 6x2

≥

=

(1 − x1 − x2)

6x1 − 1
6x1
1 − 1/2

7
12

,

≥

as required. Indeed, the last inequality above is equivalent to 12x2
x1 ∈ [1/4, 1/3] and according to Fact 1.

1 − 7x1 + 1 ≤ 0, which holds since

Case 3: 1/3 ≤ x1 ≤ 2/5. If y2 ≤ 1/2, then

a1 = x1(1 − y2) ≥

1
3 ·

1
2

=

1
6

,

and the lower bound follows from (13). If y2 ≥ 1/2, we distinguish two subcases:

Case 3.1: x2 ≤ 3x1/2. Then

a146 = x1 + (1 − x2)y2 ≥ x1 +(cid:18)1 −

3x1

2 (cid:19) y2

1

2(cid:18)1 −

3x1

2 (cid:19) =

1
2

+

x1
4 ≥

1
2

+

1
12

=

7
12

,

≥ x1 +

as required.

Case 3.2: x2 ≥ 3x1/2. Then

= y2 +

a1256 = (1 − x1)y2 + x2(1 − y2) ≥ (1 − x1)y2 +
5x1

5x1y2

3x1
2 −
1

2(cid:18)1 −

+

=

2
5x1

2 (cid:19) =

3x1
2

+ y2(cid:18)1 −

1
2

+

x1
4 ≥

1
2

2 (cid:19)

1
12

+

=

7
12

,

3x1
2

(1 − y2)

3x1
2

≥

as required.

Case 4: 2/5 ≤ x1 ≤ 5/12. Observe that x1 ≥ 2/5 > 7/19, and consequently, 19x1/7 − 1 > 0, as

used below in Case 2.4.2. If y2 ≤ 7/12, then

a1 = x1(1 − y2) ≥

2
5 ·

5
12

=

1
6

,

and the lower bound follows from (13). If y2 ≥ 7/12, we distinguish two subcases:

Case 4.1: x2 ≤ 12x1/7. Then

a146 = x1 + (1 − x2)y2 ≥ x1 +(cid:18)1 −

12x1

7 (cid:19) y2

7

12(cid:18)1 −

12x1

7 (cid:19) =

7
12

,

≥ x1 +

as required.

26

Case 4.2: x2 ≥ 12x1/7. Then

a1256 = (1 − x1)y2 + x2(1 − y2) ≥ (1 − x1)y2 +

(1 − y2)

7

=

12x1

7 − y2(cid:18) 19x1

7 − 1(cid:19) ≥

12x1

7 −(cid:18) 19x1

7 − 1(cid:19)

12x1

= 1 − x1 ≥

7
12

,

as required.

Case 5: 5/12 ≤ x1 ≤ 4/9. If y2 ≤ 3/5, then

a1 = x1(1 − y2) ≥

5
12 ·

2
5

=

1
6

,

and the lower bound follows from (13). If y2 ≥ 3/5, we distinguish two subcases:

If x2 ≤ 13/18, then

a146 = x1 + (1 − x2)y2 ≥

5
12

+

5
18 ·

3
5

=

7
12

,

as required.

If x2 ≥ 13/18 and y2 ≤ 5/6, then

a1256 = (1 − x1)y2 + x2(1 − y2) ≥

5
9

y2 +

13
18

(1 − y2) =

13
18 −

y2
6 ≥

13
18 −

5
36

=

7
12

,

as required.

If x2 ≥ 13/18 and y2 ≥ 5/6, then select r45 anchored at p2 and a zero-area rectangle anchored

a45 = x2y2 ≥

13
18 ·

5
6

=

65
108

>

63
108

=

7
12

,

at p1:

as required.

area is

Case 6: x1 ≥ 4/9. Select r14 and the largest of the 4 empty rectangles anchored at p2; the total

A ≥ x1 +

1 − x1

4

=

1 + 3x1

4

7
12

,

≥

as required.

This completes the case analysis and thereby the proof of the lower bound. To see that this
lower bound is the best possible, put x1 = 1/3 and x2 = y2 = 1/2 and verify that no system of
anchored rectangles covers an area larger than 7/12.

B Proof of Theorem 2 (continued)

The same general idea applies to all cases (as well as the notation in the ﬁgures): two adjacent axis-
aligned rectangles are speciﬁed, one empty of points and the other containing points, that allows
the selection of an empty square of a suitable size anchored at an extreme point of the nonemepty
rectangle. The relevant subcases are illustrated in the ﬁgures (nonempty squares or subsquares
are shaded) and the compact arguments are summarized in the tables. Any missing case is either
similar or obtained by reﬂection of a present case with respect to a line. In each case:

- we consider a quadtree subdivision up to a certain level;

27

- in nonempty squares in the subdivision (shaded in the ﬁgures), some anchored square packing

covers c times the area of corresponding squares by induction;

- we ﬁnd new anchored squares of area 1/4, 1/16, 1/64, or other, (in bold lines), which partially

cover some empty and nonempty squares of the subdivision;

- the new anchored squares supersede the previous packing (i.e., obtained by induction) in the

nonempty squares of the subdivision that they intersect.

We repeatedly make use of the following easy fact:

Observation 2. Let R1, R2 ⊆ U be two axis-aligned interior-disjoint rectangles of sizes a1 × b
and a2 × b, respectively, where a2 ≥ b/2, sharing a common edge of length b. If R1 ∩ P 6= ∅ and
int(R2) ∩ P = ∅, then R1 ∪ R2 contains an anchored empty square whose area is at least b2/4.
Proof. Assume that R1 lies left of R2 and let p ∈ P be the rightmost point in R1. If p lies in the
lower half-rectangle of u then the square of side b/2 whose lower-left anchor is p is empty and has
area b2/4. Similarly, if p lies in the higher half-rectangle of R1 then the square of side b/2 whose
upper-left anchor is p is empty and has area b2/4.

To specify anchor points, we use the following notation. Let ∅ 6= Q ⊂ P . Let x−(Q) and x+(Q)
denote the leftmost and rightmost points of Q, respectively (these points coincide if |Q| = 1). Let
y−(Q) and y+(Q) denote the lowest and highest points of Q, respectively (these points coincide if
|Q| = 1).
We next proceed with the details. In Cases 1 and 2, subdivide Ui, i = 1, . . . , 4 (in Case 1, U2,
only) into four congruent squares Uij, j = 1, . . . , 4, labeled counterclockwise around the center of
Ui according to the subquadrant containing the square. Then partition Pi, i = 1, . . . , 4 into four
subsets Pij, j = 1, 2, 3, 4, Pij ⊂ Ui (ties are broken as speciﬁed earlier). We distinguish several
subcases depending on the number of empty sets Pij, i = 2, j = 1, 2, 3, 4, in the second level of the
quadtree subdivision.

Reﬁned analysis of Case 1 (P1 = ∅, only). Let λ2 ∈ {0, 1, 2, 3} denote the number of empty
P2j. The relevant subcases are illustrated in Fig. 14 and summarized in Table 2. For example,
in the ﬁrst two rows in the table there are two inductive instances of area 1/4 and two inductive
instances of area 1/16, contributing 2c/4 and 2c/16, respectively, toward the total covered area.

Figure 14: Case 1: the number of empty P2j is in {0, 1, 2, 3}; rows: 1, 2; left to right: a, b, c, d.

If the two nonempty squares are adjacent, say P2, P3 6= ∅, then
Reﬁned analysis of Case 2.
one of the two squares of side 1/2, whose lower-left or upper-left anchor is the rightmost point in
P2 ∪ P3 is empty and contained in U ; its area is 1/4 > 5/32, as required. Assume henceforth that

28

Figure

14 (1a)

14 (1b,1c)

14 (1d)
14 (2a)

14 (2b,2c)

14 (2d)

λ2
0
1
2
2
2
3
3

Anchor(s)
x+(P21 ∪ P24)
x+(P21 ∪ P24)

y+(P23), x+(P21 ∪ P24)
x+(P22 ∪ P23), y+(P4)
y+(P23), x+(P21 ∪ P24)
x−(P21 ∪ P24), y+(P4)

y+(P23), y+(P31 ∪ P34 ∪ P4)

Inductive/direct proof Resulting c

c = 2c
c = 2c
c = 2c

4 + 2c
4 + 2c
4 + 1

16 + 1
16 + 1
16 + 1

16

16

64

c = c

4 + 2

16

c = 2c

4 + 1

16 + 1

64

c = c
c = 9

4 + 2
64 + 1

16

64

1

6 > 5
6 > 5

1

32

32

1

6 > 5

32

1

6 > 5

32

5
32

5
32

5
32

Table 2: Inductive/direct proofs for the subcases of Case 1.

the two nonempty squares lie in opposite quadrants, e.g., P2, P4 6= ∅. For i = 2, 4, let λi denote the
number of empty sets Pij; by symmetry, we can assume that λ2 ≤ λ4; thus 0 ≤ λ2 ≤ λ4 ≤ 3. We
further distinguish Cases 2a, 2b, 2c, 2d, as determined by the diﬀerent values of λ2.
Case 2a: λ2 = 0. The relevant subcases are illustrated in Fig. 15 and summarized in Table 3.
Fig. 15 (3b) and Fig. 15 (3c) correspond to |P42| ≥ 2 and |P42| = 1, respectively.

Figure 15: Case 2a: the number of empty P2j is 0; rows: 1, 2, 3; left to right: a, b, c, d.

Case 2b: λ2 = 1. The relevant subcases for λ4 = 1, 2, 3 are are illustrated in Figures 16, 17, 18,
respectively; the proofs are summarized in Table 4.

For example:

if λ4 = 3, so that P42 6= ∅ as in Fig. 18 (1b,2b,3b), we proceed depending on
whether |P42| ≥ 2 or |P42| = 1. If |P42| ≥ 2 we proceed as in Fig. 18 (1b); if |P42| = 1 and the
corresponding point, say p, lies in U422∪U423, then p is set as a left anchor and one can get an empty
covered area at least 9/64 + 1/64 = 5/32; if |P42| = 1 and the corresponding point, say p, lies in
U421∪U424, then p is set as an upper-left anchor and the lowest point in P24 is set as an upper anchor
as shown in Fig. 18 (2b,3b), with an empty covered area at least 25/256 + 1/16 = 41/256 > 5/32.
Case 2c: λ2 = 2. The relevant subcases are illustrated in Fig. 19 and summarized in Table 5.
Assume ﬁrst that λ4 = 2. If P22 and P24 are nonempty, as in Fig. 19 (1a,1b), we proceed according
to whether the two nonempty P4j are in adjacent vertical strips of width 1/4 or in the same vertical
strip of width 1/4: in the former case, we select empty squares as in Fig. 19 (1a) while in the latter

29

Figure
15 (1a)

15 (1b,1c)

15 (1d)

15 (2a,2b)
15 (2c,2d)

15 (3a)
15 (3b)
15 (3c)
15 (3d)

λ2 λ4
0
0
1
0
0
1
2
0
2
0
3
0
0
3
3
0
0
3

Anchor(s)

Inductive/direct proof Resulting c

x+(P21 ∪ P24), x−(P42 ∪ P43)
x+(P21 ∪ P24), x−(P42 ∪ P43)
x+(P21 ∪ P24), x−(P42 ∪ P43), . . .
x+(P21 ∪ P24), y−(P23), . . .
x+(P21 ∪ P24), x−(P42 ∪ P43), . . .
y−(P23 ∪ P24), y+(P41)
x+(P21 ∪ P24), x−(P42 ∪ P43), . . .
x+(P21 ∪ P24), x−(P42 ∪ P43)

y−(P23 ∪ P24), y+(P44)

c = 4c
c = 4c

16 + 2
16 + 2

16

16

c = 2c

16 + 2

16 + 1

64

c = 2

16 + 2

64

c = 2c

16 + 2

16 + 1

64

c = 9

64 + 1

64

c = 3
16
16 + 25
64 + 1

c ≥ 1
c ≥ 9

64

256

1

1

32

6 > 5
6 > 5
56 > 5

32

9

32

9

56 > 5

32

5
32

5
32

3

41

32

16 > 5
256 > 5
≥ 5

32

32

Table 3: Inductive/direct proofs for Case 2a.

Figure 16: Case 2b with one empty P2j and one empty P4j ; rows: 1, 2, 3; left to right: a, b, c, d.

Anchor(s)

x+(P21 ∪ P24), y−(P23), . . .
x+(P21 ∪ P24), y−(P22), . . .
x+(P21 ∪ P24), y+(P23), . . .

Figure

16 (1a,1b,1c,1d)
16 (2a,2b,2c,2d)
16 (3a,3b,3c,3d)

17 (1a through 4d)

18 (1a,1c)

18 (1b)
18 (1d)

18 (2a,2c,2d)

18 (2b)

18 (3a,3c,3d)

18 (3b)

λ2 λ4
1
1
1
1
1
1
1
2
3
1
3
1
1
3
3
1
3
1
3
1
1
3

Table 4: Direct proofs for Case 2b.

30

32

64

32

64

32

32

64

64

Direct proof Resulting c
c ≥ 2
16 + 2
c ≥ 2
16 + 2
c ≥ 2
16 + 2
16 + 2
c ≥ 2
c ≥ 9
64 + 1
c ≥ 25
256 + 1
c ≥ 1
64 + 1
c ≥ 9
c ≥ 25
256 + 1
c ≥ 9
64 + 1
c ≥ 25
256 + 1

≥ 5
≥ 5
≥ 5
≥ 5
≥ 5
≥ 5
4 > 5
≥ 5
≥ 5
≥ 5
≥ 5

≥ 1

64

32

16

32

32

32

16

64

32

64

32

16

32

4

Figure 17: Case 2b with one empty P2j and two empty P4j ; rows: 1, 2, 3, 4; left to right: a, b, c, d.

Figure 18: Case 2b with one empty P2j and three empty P4j ; rows: 1, 2, 3; left to right: a, b, c, d.

31

case, we select empty squares as in Fig. 19 (1b). If P21 and P23 are nonempty, as in Fig. 19 (1c,1d),
we proceed analogously. If P22 and P23 are nonempty, as in Fig. 19 (2a,2b), it suﬃces to consider the
cases when the two nonempty squares P4j are in the same strip of width 1/4 (the complementary
cases have been covered in row 1); then the empty covered area is at least 9/64 + 1/64 = 5/32,
or at least 3/16 > 5/32, as required. If P21 and P24 are nonempty, as in Fig. 19 (2c,2d), it again
suﬃces to consider the cases when the two nonempty squares P4j are in the same strip of width
1/4, and then the empty covered area is at least 3/16 > 5/32, as required.

Figure 19: Case 2c: two empty P2j and two or three empty P4j; rows: 1, 2, 3, 4; left to right: a, b, c, d.

Assume now that λ4 = 3. If P22 and P24 are nonempty, as in Fig. 19 (3a,3b), we proceed as
follows1: if P41, P43 or P44 are nonempty, the empty covered area is at least 9/64 + 1/64 = 5/32;
if P42 is nonempty, consider |P22|, |P24|, and |P42|.
If |P24| ≥ 2 or |P42| ≥ 2, select two empty
squares of area 1/16 anchored at points of the respective “large” set, and another empty square
of area 1/16 anchored at the point of the other set (among P24 and P42); we thereby have a total
If |P24| = |P42| = 1, the empty covered area is at least
empty area 3/16 > 5/32, as required.
9/64 + 1/64 = 5/32, unless the point in P24, say p, lies in U242 and the point in P42, say q, lies
in U424; then an empty square whose upper-left anchor is p and side x(q) − x(p) and an empty
128 > 5
32 ,
as required. If P21 and P23 are nonempty, as in Fig. 19 (3c,3d), the empty covered area is at least
9/64 + 1/64 = 5/32, or at least 1/4, as required. If P22 and P23 are nonempty, as in Fig. 19 (4a,4b),
there are two possibilities: P4j is nonempty where j ∈ {1, 2}, or where j ∈ {3, 4}; each case is dealt
with easily. If P21 and P24 are nonempty, as in Fig. 19 (4c,4d), each case is dealt with easily.
Case 2d: λ2 = 3. Since λ2 ≤ λ4, we have λ4 = 3. The relevant subcases are illustrated in Fig. 20
1Observe that our quadtree decomposition analysis “matches” the lower bound construction in Proposition 2 in

square whose lower-left anchor is q and side 1 − x(q) cover an area at least 2(cid:0) 5
16(cid:1)2

= 25

the sense that the hardest case to deal with in our proof is the one in which the lower bound construction ﬁts in.

32

and summarized in Table 5. If P21 or P22 or P23 are nonempty, as in Fig. 20 (1a,1b), the empty
covered area is at least 9/64 + 1/64 = 5/32, as required. If P24 is nonempty, as in Fig. 20 (1c),
at least one of the nonempty sets has at least 2 points, and so the empty covered area is at least
3/16 > 5/32, as required.

Figure 20: Case 2d: three empty P2j and three empty P4j; left to right: a, b, c.

Figure

19 (1a,1b)
19 (1c,1d)
19 (2a,2b)
19 (2c,2d)

19 (3c,4a,4b)

19 (3d)

19 (4c,4d)
20 (a,b)
20 (c)

λ2 λ4
2
2
2
2
2
2
2
2
2
3
3
2
3
2
3
3
3
3

64

64

64

Direct proof
c ≥ 2
16 + 2
c ≥ 2
16 + 2
c ≥ 9
64 + 1
c ≥ 3
64 + 1
c ≥ 1
c ≥ 3
64 + 1
c ≥ 3

c ≥ 9

16

16

64

16

4

c ≥ 9

64 = 5

32

Resulting c

32

32

32

32

≥ 5
≥ 5
≥ 5
16 > 5
≥ 5
4 > 5
16 > 5
≥ 5
16 > 5

32

32

32

≥ 3
≥ 1
≥ 3
≥ 3

32

32

Table 5: Direct proofs for Case 2c and Case 2d.

This completes the case analysis and thereby the proof of Theorem 2.

33

