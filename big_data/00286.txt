6
1
0
2

 
r
p
A
5

 

 
 
]
T
G
.
s
c
[
 
 

2
v
6
8
2
0
0

.

3
0
6
1
:
v
i
X
r
a

How to Re-Divide a Cake Fairly

Erel Segal-Halevi, Bar-Ilan University

We study the classic problem of fairly dividing a heterogeneous resource (”cake”) among several agents
with different preferences. In our setting, the resource is already divided among several ”old” agents. When
”young” agents come, the resource should be re-divided in a way that is fair both for the young and for
the old agents. Motivated by land redivision and other two-dimensional division problems, we assume that
the cake is a rectilinear polygon and require that the allotted pieces be rectangles. Our re-division protocol
has an implication on another problem: the price-of-fairness - the loss of social welfare caused by fairness
requirements. Our protocol allows us to prove upper bounds on the price-of-fairness in two-dimensional
cake-cutting with rectangular pieces. Our protocol also handles the more general case in which the cake is
convex and the pieces can be arbitrary convex ﬁgures.
CCS Concepts: •Applied computing→ Economics;
Additional Key Words and Phrases: cake-cutting, dynamic allocation, price-of-fairness, rectangles

1. INTRODUCTION
Fair division of land and other resources among agents with different preferences has
been an important issue since Biblical times. Today it is an active area of research
in the interface of computer science [Procaccia 2015; Robertson and Webb 1998] and
economics [Moulin 2004]. Its applications range from politics [Brams 2007; Brams and
Taylor 1996] to multi-agent systems [Chevaleyre et al. 2006].

The classic setting assumes a one-shot division: the resource is divided once and for
all, like a cake that is divided and eaten. But in practice, it is often required to re-divide
an already-divided resource. One example is a cloud-computing environment, where
new agents often come and require resources already held by other agents. A second
example is fair allocation of radio spectrum among several broadcasting agencies: it
may be required to re-divide the frequencies to accommodate new broadcasters. A third
example is land-reform: large land-estates are held by a small number of landlords,
and the government may want to re-divide them among landless citizens.

In the classic one-shot division setting, all agents have equal rights and the goal is
to give each agent a fair share of the cake. The common deﬁnition of a ”fair share”
is a piece worth at least 1/n of the total cake value, according to the agent’s personal
valuation function. This fairness requirement is usually termed proportionality.

In contrast, in the re-division setting it may be required to give extra rights to the
”old” agents - the agents currently holding pieces of the cake. In particular, it may
be required to give each old agent the opportunity to keep a substantial share of its
currently-held piece. This may be due either to efﬁciency reasons (in the cloud comput-
ing scenario) or economic reasons (in the radio spectrum scenario) or political reasons
(in the land-reform scenario). Ideally, if the number of old agents is m and the total
number of agents (old+young) is n, we would like to let each old agent keep a fraction

This research is funded in part by the ISF grant 1083/13, the Doctoral Fellowships of Excellence Program
and the Mordecai and Monique Katz Graduate Fellowship Program at Bar-Ilan University.
Author’s address: Computer Science Dept., Bar-Ilan University, Ramat-Gan, Israel. erelsgl@gmail.com.
Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted
without fee provided that copies are not made or distributed for proﬁt or commercial advantage, and that
copies bear this notice and the full citation on the ﬁrst page. Copyrights for third-party components of
this work must be honored. For all other uses, contact the owner/author(s). Copyright is held by the au-
thor/owner(s).

ACM .

http://dx.doi.org/10.1145/XXXXXXX.XXXXXXX

of its current piece with a value of at least m/n its current value, so that the decrease
in value is proportional to the increase in population. We refer to this fairness require-
ment as retention.

While most cake-cutting papers assume that the cake is a 1-dimensional interval, we
handle the more realistic scenario of a 2-dimensional cake. Moreover, we require that
the piece given to each agent be rectangular. Rectangularity requirement is sensible
when dividing land, exhibition space in museums, advertisement space in newspapers
and even virtual space in web-pages. Moreover, in the frequency-range allocation prob-
lem, it is possible to allocate frequency ranges for a limited time-period; the frequency-
time space is two-dimensional and it makes sense to require that the ”pieces” are rect-
angles in this space [Iyer and Huhns 2009]. In Sub. 7.1 we show that our protocol
can also handle a convexity requirement. 2-dimensional cake-cutting introduces new
challenges over the traditional 1-dimensional setting; see Sub. 1.4.

The three goals of proportionality, retention and geometry may be impossible to sat-
isfy simultaneously. We therefore relax the fairness requirements. Following previ-
ous cake-cutting papers (see Subsection 2.1), we require partial proportionality, which
means that each agent receives at least 1/(A· n) of the total, where A > 1 is a constant
independent of n. Similarly, instead of retention we require partial retention. In the
following subsections we formalize these concepts and present our solutions.

1.1. Cake-cutting
The cake C is a polygon in the Euclidean plane R2. In the
main body of the paper, the pieces have to be rectangular, so
we assume that C is rectilinear (aka orthogonal), i.e, each
angle is either 90◦ or 270◦. Rectilinearity is a common as-
sumption in polygon partition problems [Keil 2000]. Our
bounds depend on the complexity of the cake, which can
be quantiﬁed by the number of its reﬂex vertexes (vertexes
with a 270◦ angle). We denote the cake complexity by R.
When C is a rectangle - the simplest rectilinear polygon - it
has R = 0. The cake at the right has R = 4 reﬂex vertexes
(circled). For the moment, ignore the diamond-shaped ar-
eas; they are explained later.

C has to be divided among n ≥ 1 agents. Each agent i ∈ {1, . . . , n} has a value-density
function vi, which is an integrable, non-negative and bounded function on C. The value
of a piece X to agent i is marked by Vi(X) and it is the integral of its value-density:

(cid:90)

x∈X

Vi(X) =

vi(x)dx

The Vi are measures and are absolutely continuous with respect to the Lebesgue mea-
sure, i.e., any piece with zero area has zero value to all agents. Therefore, we do not
need to worry about who gets the boundary of a piece, since its value is 0.

The agents’ valuations are their private information. A division protocol accesses
the agents’ valuations via queries. Standard cake-cutting protocols use two types of
queries [Robertson and Webb 1998]: an eval query asks an agent to reveal its value
for a speciﬁed piece of cake; a mark query asks an agent to mark a piece of cake with
a speciﬁed value. As usual in the cake-cutting literature since Steinhaus [1948], the
fairness guarantees of our division protocols are valid for every agent answering the
queries truthfully, regardless of the behavior of the other agents. However, our proto-
cols are not dominant-strategy-truthful, i.e, an agent may gain by answering untruth-
fully. Designing dominant-strategy-truthful mechanisms for cake-cutting is known to

be a difﬁcult problem even in one dimension, see e.g. [Chen et al. 2013]. Hence, in the
present paper we ignore strategic considerations and assume agents answer truthfully.
An allocation is a vector of n pieces, X = (X1, . . . , Xn), one piece per agent, such
i=1Xi ⊆ C. Note that some cake may remain
that the Xi are pairwise-disjoint and ∪n
unallocated, i.e, free disposal is assumed. We explain in Sub. 1.4 why this is important.
An allocation is proportional if every agent receives at least 1/n of the total cake value:

∀i ∈ {1, . . . , n} : Vi(Xi) ≥ Vi(C)

n

For a constant A ≥ 1, an allocation is called (1/A)-proportional if every agent receives
at least a fraction 1/(An) of the total cake value, according to its personal valuation:

∀i ∈ {1, . . . , n} : Vi(Xi) ≥ Vi(C)
A · n

An allocation is partially-proportional if it is (1/A)-proportional for some constant A
independent of n.

An allocation X is called rectangular, if for every i, Xi is a rectangle. In this paper
we are interested only in rectangular allocations in which the sides of the rectangles
are parallel to the sides of C. In Sub. 7.1 we discuss how our results can be extended to
other geometric constraints, such as convexity, connectivity and bounded aspect ratio.

1.2. Redivision
In the redivision problem, the n agents are divided to two groups: m agents (indexed
1, . . . , m) are called old and the other n − m agents (indexed m + 1, . . . , n) are called
young. There is an existing allocation of the cake C to the m old agents: C1, . . . , Cm.
It is assumed that the old pieces Ci are pairwise-disjoint and rectangular. Other than
that, nothing is assumed on the division. In particular, we do not assume that the
original division is fair or that all of C is divided.

It is required to create a new allocation of C to all agents: X1, . . . , Xn. We would
like to give each old agent a subset of its previous piece. Moreover, we would like this
subset to be sufﬁciently valuable. Ideally, we would like all old agents to receive at
n of their old value, so that the decrease in value is proportional to the increase
least m
in population. Hence, we say that the allocation X satisﬁes the retention property, if:

∀j ∈ {1, . . . , m} : Xj ⊆ Cj and Vj(Xj) ≥ m
n

Vj(Cj).

Similarly to partial-proportionality, for a given constant B ≥ 1 independent of m, n, we
would like to say that an allocation has (1/B)-retention if:

Vj(Cj).

∀j ∈ {1, . . . , m} : Xj ⊆ Cj and Vj(Xj) ≥ m
B · n
Unfortunately, partial-retention according to the above
deﬁnition cannot always be satisﬁed together with partial-
proportionality. An example is illustrated at the right. The
square is C1 - the old piece allocated to the old agent #1.
The value density of that agent, v1, is uniform over C1.
There are m = h2 old agents and n − m = h2 young
agents, for some parameter h (in the ﬁgure h = 5). Each
young agent has a positive value-measure only in a very
speciﬁc location, marked by a diamond-shape inside C1. If
#1 receives a rectangle that covers a diamond-shape, the
young agent that wants this diamond will have a value of

B·n for any constant B.

m its current value. This does not equal m

0. Hence, partial-proportionality requires to give #1 a rect-
angle that does not cover any diamond. Such a rectangle
√
has an area of at most 1/h the total area of C1, so the new value of agent #1 is at most
1/
This bad example is based on the assumption that many young agents want a piece
inside the allocation of the same old agent. This hints that, by the pigeonhole principle,
such misfortune will happen to only a small number of old agents; most old agents will
still be able to keep a decent fraction of their old value. Based on this observation, we
present a relaxed deﬁnition of the partial-retention property. Our deﬁnition is inspired
by the ”90th percentile” criterion common in Service-Level-Agreements and Quality-
of-Service analysis, e.g. [Delimitrou and Kozyrakis 2014; Zhang et al. 2014]. We would
like to guarantee 90% of the old agents, a certain fraction of m/n of their old value;
guarantee 80% of the old agents an even larger fraction of m/n of their old value; etc.
Moreover, since the retention property is intended to help old agents and not harm
them, we would like to allow each old agent to choose between the guarantee of the re-
tention property and the guarantee of the partial-proportionality property. Therefore,
if the value guarantee provided to an old agent by partial-retention is smaller than
the value guarantee provided to that agent by partial-proportionality, then the agent
receives the partial-proportionality guarantee.
Formally, our partial-retention property is deﬁned as follows. For every integer k ∈
{1, . . . , m}, at least m − k old agents receive the best out of two options: (a) a subset of
their previously-owned piece with a value of more than k
n+k of their previous value; (b)
a piece with a value of at least 1/(An), where A is the partial-proportionality constant
of the protocol. I.e, for every k ∈ {1, . . . , m}, there are at least m − k indexes j ∈
{1, . . . , m} for which:

Vj(Xj) ≥ max(

k

n + k

Vj(Cj),

1
A · n

Vj(C)).

Substituting appropriate values of k yields that, for example,

— at least 90% of the old agents receive more than m/(11n) of their old value (k = m/10),
— at least 75% of the old agents receive more than m/(5n) of their old value (k = m/4),
— at least half of the old agents receive more than m/(3n) of their old value (k = m/2).

1.3. Social Welfare and Price of Fairness
In addition to fairness, it is often required that a division has a high social welfare.
The social welfare of an allocation is a certain aggregate function of the normalized
values of the agents (the normalized value is the piece value divided by the total
cake value). The three common social welfare functions are egalitarian, utilitarian
and Nash [Moulin 2004]. We normalize them such that the maximum welfare is 1:

— Egalitarian welfare - the minimum of the agents’ normalized values:

Wegal(X) = min

i∈{1,...,n}

Vi(Xi)
Vi(C)

— Utilitarian welfare - the arithmetic mean of the agents’ normalized values:

(cid:88)

Wutil(X) =

1
n

Vi(Xi)
Vi(C)

i∈{1,...,n}

— Nash welfare - the geometric mean of the agents’ normalized values:

 (cid:89)

i∈{1,...,n}

WN ash(X) =

1/n

Vi(Xi)
Vi(C)

The goal of maximizing the social welfare is not always compatible with the goal of
guaranteeing a fair share to every agent. For example, Caragiannis et al. [2012] de-
scribe a simple example in which the maximum utilitarian welfare of a proportional
√
allocation is O(1/n) while the maximum utilitarian welfare of an arbitrary (unfair)
allocation is O(1/
n). This means that society has to pay a price, in terms of social-
welfare, for insisting on fairness. This is called the price of fairness. Formally, given a
social welfare function W and a fairness criterion F , the price-of-fairness relative to
W and F (also called: ”the W -price-of-F ”) is the ratio:

maxX W (X)
maxY ∈F W (Y )

(*)

where the maximum at the nominator is over all allocations X and the maximum at
the denominator is over all allocations Y that also satisfy the fairness criterion F . The
cited example shows that the utilitarian-price-of-proportionality might be Ω(

When the allocation is required to be rectangular, both maxima are taken only on
rectangular allocations. The price-of-fairness may be either higher or lower than with
arbitrary pieces, so both upper bounds and lower bounds have to be re-calculated.

n).

√

1.4. The challenges in two-dimensional cake-cutting
Most cake-cutting papers, especially in computer science,
assume that the cake is the unit interval [0,1] and the
pieces are its sub-intervals. It is often claimed [Woodall
1980] that this assumption is without loss of general-
ity, since 2-dimensional division can be reduced to 1-
dimensional division by projecting the cake on the unit
interval and projecting the resulting division back on the
original cake. Indeed, projecting a connected division of a
1-dimensional interval on a rectangular cake yields a 2-
dimensional division with rectangular pieces (see illustration at the right). However,
when social welfare is concerned, the 1-dimension assumption loses generality:

(a) The reduction to a one-dimensional division might
miss the optimal division. For example, suppose the cake
is as the one illustrated at the right. There are 4 agents
and each agent i has positive value-density only inside Ci.
The socially-optimal division, according to any deﬁnition,
is to give each Ci entirely to agent i. However, this division
cannot be attained by reduction to one dimension.

(b) In two dimensions, the optimal division might re-
quire to leave some of the cake unallocated. In the above-
mentioned cake, any socially-optimal division that gives
each agent a rectangle must leave an unallocated space in the middle of C. This
counter-intuitive scenario cannot happen in a one-dimensional cake.

Due to such reasons, two-dimensional cake-cutting requires brand new techniques.
For example, because we cannot assume that the entire cake is allocated, we must use
a special allocation-completion step before our main redivision protocol (see Subsection
1.6). The habit of assuming a one-dimensional cake might cause authors to miss such

interesting steps. One goal of the present paper is to encourage authors to use a more
general cake-model, like the model offered in Subsection 1.1 or a similar one.

1

1

1

1.5. Results
The ﬁrst contribution of this paper is a protocol for re-division of a rectilinear cake to
rectangular pieces. Its guarantees are:
— Partial proportionality: Every agent, whether old or young, receives a piece with
a value of more than
4n+R of the total cake value, where R is the number of reﬂex
vertexes of C. Particularly, when the cake is a rectangle, R = 0 and the allocation is
(1/4)-proportional.
— Partial retention: For every integer k ∈ {1, . . . , m}, at least m− k old agents receive
the best of the following two options: (a) a subset of their previously-owned piece with
a value of more than k
n+k of their previous value; (b) a piece with a value of more than
4n+R of the total cake value.
Our proportionality guarantees depend on R. This dependence is inevitable. Con-
sider the cake at Subsection 1.1, having R = 4 reﬂex vertexes. There are no old agents
and a single young agent, whose value-density is positive only inside the R+1 diamond-
shaped areas. Any rectangle in C contains at most one diamond; hence the agent can
get at most

R+1 of the total cake value.

The redivision protocol is used to produce the second contribution of this paper: two
upper bounds on the price-of-partial-proportionality. For simplicity we present bounds
for rectangular cakes. We prove that for every B ≥ 4:
— The utilitarian price of (1/B)-proportionality with rectangular pieces is O(
— The Nash price of (1/B)-proportionality with rectangular pieces is O(1).
Note that the egalitarian price of (1/B)-proportionality is 1 for all B ≥ 1 whenever
a (1/B)-proportional allocation exists. Let W be the optimal egalitarian welfare in the
denominator of (*). Then, since the maximization is on (1/B)-proportional allocations,
W ≥ 1/(Bn). Since the optimal egalitarian welfare is at least W , the egalitarian-
optimal allocation is also (1/B)-proportional. Hence, the optimal egalitarian welfare
in the nominator of (*) must also be W .

n).

Our upper bounds use the redivision protocol. In fact, the original motivation for
developing the redivision protocol was to prove upper bounds on price-of-fairness (this
is why we insist that our redivision protocol does not assume that the old division is
fair or that all C is divided). Hence, our upper bounds are constructive: their proofs
can be used to convert any existing unfair division to a fair division such that the
reduction in social welfare is upper-bounded. In particular, they can be used to convert
any socially-optimal division which is not proportional, to a (1/4)-proportional division
in which the social welfare approximates the optimal welfare by the given factor.

When the rectangularity constraint is replaced with a convexity constraint (the cake

and the pieces are convex), the same results are true with ”4” replaced by ”5”.

√

1.6. Techniques
Dividing a two-dimensional cake requires techniques from two different ﬁelds: com-
binatorics and computational geometry. Our redivision protocol uses two algorithmic
building-blocks - the ﬁrst is combinatorial and the second is geometric.

Block #1 is a multi-cake cutting protocol. It can be used to fairly divide an archipelago
of islands among several agents such that each agent receives a piece entirely con-
tained within a single island. It is presented in Section 3.

Block #2 is an allocation-completion algorithm. It takes an allocation of a part of the

cake and returns an allocation of the entire cake. It is presented in Section 4.

The main redivision protocol uses Block #2 to convert the old allocation (which may
be a partial allocation) to an intermediate allocation of the entire cake. Then, each
rectangle in the intermediate allocation is treated as an island, and Block #1 is used
to divide the resulting archipelago among the agents. Because each piece is entirely
contained within one of the islands, it is possible to use the pigeonhole principle to
conclude that a large number of the islands have a small population. This implies that
a large number of the old agents can retain a large fraction of their old piece.

The main protocol is presented in Section 5. In Section 6 we use the re-division
protocol to prove upper bounds on the price-of-fairness. In Section 7 we discuss some
alternative geometric constraints and plans for future work.

2. RELATED WORK
2.1. Partial proportionality
While proportionality is the most common criterion of fair cake-cutting, it is often
relaxed to partial-proportionality in order to achieve additional goals, such as:
(1) Speed: ﬁnding a proportional division takes Θ(n log n) queries, but ﬁnding a (1/A)-
proportional division takes only Θ(n) queries, for some sufﬁciently large A ≥ 10
[Edmonds and Pruhs 2006; Edmonds et al. 2008].

(2) Improving the social welfare: proportional allocations may be socially inefﬁcient,
but it is possible to achieve more socially-efﬁcient allocations by decreasing the
value-guarantee per agent [Arzi 2012; Zivan 2011].

(3) Guaranteeing a minimum-size constraint. Caragiannis et al. [2011] prove that it
is impossible to guarantee a (1/A)-proportional allocation for any ﬁnite A, and
provide additive approximation algorithms.

(4) Satisfying geometric constraints like square pieces [Segal-Halevi et al. 2015a,b].
For example, when the cake is square and the pieces must be square, it is impos-
sible to guarantee a (1/A)-proportional allocation for any A ≤ 2, but there is an
algorithm that guarantees a 1/4-proportional allocation.

Since geometric constraints are central in our setting, it makes sense to adopt partial-
proportionality as the fairness criterion.

2.2. Dynamic fair division
Our cake redivision problem differs from several division problems studied recently.

1. Dynamic resource allocation [Friedman et al. 2015; Kash et al. 2013] is a common
problem in cloud-computing environments. The server has several resources, such as
memory and disk-space. Agents (processes) come and depart. The server has to allocate
the resources fairly among agents. When new agents come, the server may have to take
some resources from existing agents. The goal is to do the re-allocation with minimal
disruption to existing agents [Friedman et al. 2015]. In this problem, the resources are
homogeneous, which means that the only thing that matters is what quantity of each
resource is given to each agent. In contrast, our cake is heterogeneous and different
agents may have different valuations on it, so our protocol must decide which parts of
the cake should be given to which agent.

2. Population monotonicity [Moulin 1990, 2004; Thomson 1983, 2011] is an axiom
that describes a desired property of allocation rules. When new agents arrive and the
same division rule is re-activated, the value of all old agents should be weakly smaller
than before. This axiom represents the virtue of solidarity: if sacriﬁces have to be made
to support an additional agent, then everybody should contribute [Thomson 1983]. We,

too, assume that old agents are taking part in supporting the new agents. However,
we add the retention requirement, which means that old agents should be allowed to
keep at least some of their previous allocation. In addition, while their approach is
axiomatic and mainly interested in existence results, our approach is constructive and
our goal is to provide an actual re-division protocol.

3. Private endowment, in economics resource allocation problems, means that each
agent is endowed with a certain initial bundle of resources. Then, agents exchange re-
sources using a certain market mechanism. The classic problem in economics involves
homogeneous resources, but it has also been studied in the cake-cutting framework
[Aziz and Ye 2014; Berliant and Dunz 2004]. A basic requirement in these works is
individual rationality, which means that the ﬁnal value allocated to each agent must
be weakly larger than the value of the initial endowment (note the contrast with the
population monotonicity axiom). In our problem we do not make this assumption as it
is incompatible with fairness: since the young agents come with no initial endowment,
individual rationality would mean that they will not receive anything in the exchange.
4. Online cake-cutting [Walsh 2011] is characteristic of a birthday party in an ofﬁce,
in which some agents come or leave early while others come or leave late. It is required
to give some cake to agents who come early while keeping a fair share to those who
come late. In contrast to our model, there it is impossible to re-divide allocated pieces,
since they are eaten by their receivers. The fairness guarantees are inevitably weaker.
5. Land reform, the re-division of land among citizens, has been attempted in numer-
ous countries around the globe and in many periods throughout history, from ancient
Egypt in the times of King Bakenranef (8th century BC) to modern-day Scotland (21st
century AD). Fairness is a major concern in such reforms. Many books have been writ-
ten on this topic, e.g. [Bernstein 2002; Lipton 2009; Powelson 1988; Rosset et al. 2006].

2.3. Geometric cake models
The most prominent cake-model is a one-dimensional interval, in which case the pieces
are often required to be contiguous sub-intervals. This is especially true in computer
science papers. Some exceptions (mostly from other disciplines) are:

— The cake is a 1-dimensional circle and the pieces are contiguous arcs [Barbanel et al.

2009; Brams et al. 2008; Thomson 2007].

— The cake is a 2-dimensional territory that lies among several countries. Each coun-

try should receive a piece adjacent to its border [Beck 1987; Hill 1983].

— The cake is 2-dimensional and the pieces are rectangles whose dimensions can be

determined by the agents [Iyer and Huhns 2009].

— The cake is 2-dimensional and the pieces must be squares or fat polygons [Segal-

Halevi et al. 2015a,b].

— The cake is 2-dimensional; the geometric constraints are connectivity, simple-

connectivity or convexity [Devulapalli 2014].

— The cake is multi-dimensional and the pieces should be simplexes or polytopes

[Berliant et al. 1992; Dall’Aglio and Maccheroni 2009; Ichiishi and Idzik 1999].

Many natural 2-dimensional settings have not been studied yet. One of them is the
setting studied here - the cake is a rectilinear polygon and the pieces are rectangles.

2.4. Price of fairness
The price-of-fairness in cake-cutting has been studied in two different settings:

— The cake is a one-dimensional interval and the pieces must be intervals. Upper and
lower bounds are calculated on the egalitarian and utilitarian prices of proportional-

Algorithm 1 Room Partition Algorithm [Culter 2013]
INPUT: N = {1, ..., n} (a set of agents) and m(cid:48) (a number of rooms).
For each agent i ∈ N, a set of m(cid:48) non-negative partner-numbers Pi,j (with j ∈
{1, . . . , m(cid:48)}) such that Σm(cid:48)
j=1Pi,j ≥ n (in words: for every agent, the sum of the partners-
numbers is at least the total number of agents).
OUTPUT: A partitioning of N to m(cid:48) disjoint groups Gj (some possibly empty), such
that: For every i ∈ N, j ∈ {1, . . . , m(cid:48)}: if i ∈ Gj then Pi,j ≥ |Gj| (in words: for every
agent in group j, its partners-number for room j is at least as large as the number of
agents in group j).
ALGORITHM:
- Initialize Gm(cid:48) := ∅.
- Order the agents in decreasing order of their Pi,m(cid:48), breaking ties arbitrarily.
- While Pi,m(cid:48) > |Gm(cid:48)|: Let Gm(cid:48) := Gm(cid:48) ∪ {i}.
- If m(cid:48) > 1, recursively call the procedure with agents N \ Gm(cid:48) and m(cid:48) − 1 rooms.

ity, as well as other fairness criteria such as envy-freeness and equitability [Aumann
and Dombb 2010].

— The cake is arbitrary and the pieces may be arbitrary. Upper and lower bounds are
calculated on the utilitarian prices of proportionality, envy-freeness and equitability
[Caragiannis et al. 2012].

√
The utilitarian price-of-proportionality in both cases is Θ(
n); Nash price was not
calculated. We are not aware of any bounds on price-of-fairness for two-dimensional
(or multi-dimensional) cakes when there is a geometric constraint on the pieces.

3. MULTI-CAKE CUTTING PROTOCOL
The ﬁrst building-block in our re-division protocol is a protocol for fairly dividing a set
of disjoint cakes. The protocol operates on m(cid:48) disjoint cakes, C1, . . . , Cm(cid:48), each of which
is a rectangle. They can be thought of as islands; the ”archipelago” (the union of all
islands) is called C, and C = ∪m(cid:48)

The protocol should return a rectangular allocation X of the archipelago C among

j=1Cj.

the n agents. X should satisfy the following properties:
— Locality: every agent receives a piece entirely contained within a single island:

∀i ∈ {1, . . . , n} : ∃j ∈ {1, . . . , m(cid:48)} : Xi ⊆ Cj
— Partial proportionality: every agent receives a piece such that:

∀i ∈ {1, . . . , n} : Vi(Xi) ≥ Vi(C)

n + m(cid:48) − 1

Below (Example 3.2) we show that this is the largest value that can be guaranteed.

3.1. The protocol
Step 1. Normalize the value measures such that ∀i ∈ {1, . . . , n} : Vi(C) = n + m(cid:48) − 1.
Our goal is now to give each agent a piece with value at least 1.
Step 2. For each i ∈ {1, . . . , n} and j ∈ {1, . . . , m}, issue an eval-query asking agent
Step 3. For each i, j, let Pi,j = (cid:98)Vi(Cj)(cid:99). P stands for “partners” and represents the
maximum number of partners with which agent i can share the island Cj (including
agent i itself), such that i is still guaranteed a value of at least 1. For example, if an
agent values a certain island as 2.4, then its partners-number for that island is 2,

i to evaluate the island Cj.

Table I. Valuations of agents in Example 3.1.

Agent #3

V = 3.1 → P = 3*
V = 1.9 → P = 1

Agent #4

V = 4 → P = 4*
V = 1 → P = 1

Agent #1

Agent #2

West
East

V = 2.4 → P = 2
V = 2.6 → P = 2*

V = 0.8 → P = 0
V = 4.2 → P = 4*

j=1 Vi(Cj) = n + m(cid:48) − 1, also(cid:80)n

Total (cid:80) V = 5 ;(cid:80) P = 4 (cid:80) V = 5 ;(cid:80) P = 4 (cid:80) V = 5 ;(cid:80) P = 4 (cid:80) V = 5 ;(cid:80) P > 4
because if the agent shares this island in a group of 2 partners including itself, it is
Step 4. Note that for all i, because(cid:80)n
guaranteed a value of at least 1.2, but if it shares the island in a larger group, it is not
guaranteed more than 0.8.
j=1 Pi,j > n − 1
(cid:80)n
(the agent ”loses” less than 1 unit of value per island). Because all numbers are integer,
j=1 Pi,j ≥ n. Hence, we can use the Room Partition Algorithm. This algorithm is due
to Culter [2013]. Since it was never formally published, we bring it here as Algorithm
1. This is a combinatorial algorithm, which takes as input the partner-numbers Pi,j,
and returns a partitioning of the agents to m groups G1, . . . , Gm(cid:48), such that the number
of agents in each group is bounded by the “partners” values of the agents in that group.
I.e., for every group j and for every agent i ∈ Gj: Pi,j ≥ |Gj|.
By deﬁnition of the Pi,j, ∀i, j : Vi(Cj) ≥ Pi,j. Hence, the Room Partition Algorithm
guarantees that for every agent i ∈ Gj: Vi(Cj) ≥ |Gj|.
Step 5. Project the rectangular island Cj on an interval, divide it proportionally
among the agents in group Gj using a one-dimensional protocol such as [Even and
Paz 1984], and project the resulting intervals back onto Cj (see Sub. 1.4). Each agent
i ∈ Gj receives a rectangle Xi ⊆ Cj with a value of at least Vi(Cj)/|Gj| ≥ 1. Since
Vi(C) = n + m(cid:48) − 1, the value per agent is at least 1 = Vi(C)/(n + m(cid:48) − 1), as required.

3.2. Examples
Example 3.1. Table I shows an example with n = 4 agents and m(cid:48) = 2 islands. The
total value of the archipelago is m(cid:48) + n − 1 = 5. In each cell, V is the value of that
agent to that island and P is the corresponding partners-number. The Room Partition
Algorithm sends agents 1 and 2 to the East island and agents 3 and 4 to the West
island (marked by an asterisk). All agents value their island as more than 2. Each
island is divided between its two agents using a proportional cake-cutting protocol,
such as cut-and-choose. Each agent is guaranteed a piece worth at least half the value
of the island, which in this case is more than 1.

Example 3.2. The following example shows that the fraction of 1/(n + m(cid:48) − 1),
guaranteed by our multi-cake cutting protocol, is the largest that can be guaranteed.
Assume that all agents i ∈ {1, . . . , n} have the same value measure:

∀j ∈ {1, . . . , m(cid:48) − 1} : Vi(Cj) = 1

Vi(Cm(cid:48)) = n

For all agents, the total value of the archipelago is Vi(C) = n + m(cid:48) − 1. The piece of
every agent must be entirely contained in a single island. If any agent receives a piece
in islands C1, . . . , Cm(cid:48)−1, then that agent receives a value of at most 1. Otherwise, if all
n agents receive a piece in island Cm(cid:48), then the value of at least one agent is at most 1.
In both cases, at least one agent receives a fraction of at most 1/(n + m(cid:48) − 1) of Vi(C).

4. ALLOCATION-COMPLETION ALGORITHM
Our second building-block is an algorithm that converts a partial allocation to a com-
plete allocation. Its input is a rectilinear cake C with R reﬂex vertexes, and an alloca-
tion C1, . . . , Cm of disjoint rectangles, such that C1 ∪ ··· ∪ Cm ⊆ C. Its output is a new
allocation, C(cid:48)

m(cid:48), with m(cid:48) ≥ m, satisfying the following requirements:

1, . . . , C(cid:48)

— Rectangle-preservation: every input rectangle is contained in an output rectangle:

∀j ∈ {1, . . . , m} : Cj ⊆ C(cid:48)

j

— Completeness: the new allocation is a partition of the entire cake:

1 ∪ ··· ∪ C(cid:48)
C(cid:48)

m(cid:48) = C

1, . . . , C(cid:48)

Our goal is to use the multi-cake cutting protocol of Section 3 with the complete parti-
tion C(cid:48)
m(cid:48). Since the partial-proportionality guarantees of the multi-cake-cutting
protocol depend on m(cid:48), we would like m(cid:48) to be as small as possible, i.e, add as few new
rectangles as possible.
A-priori, it seems that a sophisticated algorithm is needed to attain a small m(cid:48).
However, as it turns out, the following simple algorithm attains near-optimal results:
— Phase 1: For j ∈ {1, . . . , m}, extend rectangle Cj to the maximum extent possible
without overlapping the other rectangles. Now, there are m enlarged rectangles and
possibly some ”holes”, each of which is a rectilinear polygon.

— Phase 2: Partition each hole to a minimal number of rectangles. This can be done
using one of the algorithms surveyed by Keil [2000][pages 10-13] and Eppstein
[2009][pages 3-5].

— Return the m rectangles from Phase 1 and the rectangles from Phase 2.
To analyze the performance of this algorithm, we have to bound the number of rectan-
gles produced in Phase 2. We recently proved [Segal-Halevi 2016] the following bound:

LEMMA 4.1. If, on a rectilinear polygon with R reﬂex vertexes, there is an arrange-
ment of m ≥ 2 pairwise-disjoint rectangles, and this arrangement is maximal (no rect-
angle can be enlarged without overlapping other rectangles), then the number of rect-
angular parts of all ”holes” in the arrangement is at most m + R − 2.
(we also showed that the bound of m + R − 2 is asymptotically tight, since there exists
a maximal arrangement with m + R − O(

Hence, the total number of rectangles in the completed allocation is m(cid:48) < 2m + R.

m) rectangular holes).

√

5. CAKE REDIVISION PROTOCOL
Our re-division protocol takes as input a group of m old agents. There is a rectilinear
cake C and there is an existing allocation to the old agents, such that every agent
j ∈ {1, . . . , m} holds a rectangular piece Cj. Some cake may be unallocated, i.e, it is
possible that C (cid:41) C1 ∪ ··· ∪ Cm. There is a group of n − m young agents that currently
hold no cake (n is the new number of agents; n ≥ m). The protocol should re-divide the
cake C among the n agents. The allocation X should be rectangular and satisfy the
following properties:
— Partial proportionality: every agent receives a rectangle worth at least 1/(4n + R) of

total cake value:

∀i ∈ {1, . . . , n} : Vi(Xi) ≥

— Partial retention: for every integer k ≤ m, at least m − k old agents receive the best
of the following two options: (a) a rectangular subset of their previously-owned piece
with a value of more than k
n+k of their previous value; (b) a rectangular piece with
a value of at least

n+4m+R of the total cake value.

1

Vi(C)

n + 3m + R

≥ Vi(C)
4n + R

5.1. The protocol
First, use the algorithm of Section 4 to convert the existing partial allocation to a full
allocation of C with m(cid:48) < 2m + R rectangles. Then, use the multi-cake cutting protocol
of Section 3 to divide the pieces C1, ..., Cm(cid:48) to all n agents, in the following way. For
each old agent j ∈ {1, . . . , m}, add a ”virtual agent” j∗ and assign it a value-density
function v∗

j such that:

v∗
j (x) = vj(x)
v∗
j (x) = 0

if x ∈ Cj
if x /∈ Cj

The total number of agents is now n + m, so the valuations are normalized such that
∀i : Vi(C) = n + m + m(cid:48) − 1 < n + 3m + R. The multi-cake cutting protocol allocates a
piece to each agent. As a ﬁnal step, we let each old agent j ∈ {1, . . . , m} choose either
the piece allocated to its normal agent j or the piece allocated to its virtual agent j∗.

5.2. Analysis
The ﬁnal allocation satisﬁes the partial-proportionality requirement; this follows im-
mediately from the guarantees of the multi-cake cutting protocol of Section 3. The
following claim is sufﬁcient to prove that it also satisﬁes partial-retention.

CLAIM 5.1. For each k ∈ {1, . . . , m}, there are at least m − k virtual agents j∗ who

receive a rectangular subset of Cj that is worth for agent j at least

n+k · Vj(Cj).

k

PROOF. First, note that the multi-cake cutting protocol must put every virtual
agent j∗ in group Gj, since its value is positive only in sub-cake Cj.
By the pigeonhole principle, for every integer k ≤ m, at most k of the groups Gj have
at least n/k normal agents. Hence, there are at least m − k virtual agents j∗ whose
group Gj has less than n/k normal agents. Together with the virtual agent itself, the
total number of agents in these groups is at most (n/k) + 1 = (n + k)/k. Hence, the
cake-cutting protocol of Step #5 gives these virtual agents a rectangular subset of Cj
worth at least a fraction k
Therefore, at least m − k old agents have the option to choose a subset of Cj worth for
them at least

n+k · Vj(Cj), as required by the deﬁnition of partial-retention.

n+k of its total value.

k

6. PRICE-OF-FAIRNESS BOUNDS
In this section, the redivision protocol of Section 5 is used to prove upper bounds on
the price of partial-proportionality. Two bounds are proved: one for utilitarian welfare
and one for Nash welfare. For simplicity, we focus here on a rectangular cake (R = 0).

6.1. Utilitarian price of partial-proportionality

THEOREM 6.1. For every constant B ≥ 4 and for any number n of agents, the utili-

tarian price of (1/B)-proportionality with rectangularity constraint is O(n1/2).
The theorem is proved by the following:

LEMMA 6.1. Assume that there are n agents whose value functions are normalized
such that the value of the entire cake C is 1. Assume that there is a division of C among
these n agents such that each agent j ∈ {1, . . . , n} holds a rectangular piece Cj and the
utilitarian welfare is U:

n(cid:88)

j=1

U :=

Vj(Cj)

Then, there exists a (1/4)-proportional rectangular allocation of C to these same n
agents with utilitarian welfare W , and U/W = O(n1/2).

PROOF. Apply the redivision protocol of Section 5 to the existing division by setting
m = n and treating all n agents as ”old”. The partial-proportionality of that protocol
ensures that the new division is 1/4-proportional. The partial-retention of that protocol
ensures that for every integer k ∈ {0, . . . , n}, there is a set Sk containing at least
n − k agents whose value is more than max( kVj (Cj )
4n ). Renumber the agents in the
, 1
following way. Pick an agent from Sn−1 (which contains at least one agent) and number
it n− 1. Pick an agent from Sn−2 (which contains at least one other agent) and number
it n−2. Continue this way to number the agents by k = n−1, . . . , 0. Now, the utilitarian
welfare of the new division is lower-bounded by:

2n

n−1(cid:88)

k=0

W >

max(

kVk(Ck)

2n

· n−1(cid:88)

,

1
4n

) ≥ 1
4n

k=0

(cid:80)n−1
(cid:80)n−1
k=0 max(k · Vk(Ck), 1)

k=0 Vk(Ck)

< 4n ·

U
W

and the utilitarian welfare ratio is at most:

max(kVk(Ck), 1)

(cid:80)n−1
k=0 ak and DEN = (cid:80)n−1

sequence a0, . . . , an−1 that maximizes NUM

DEN subject to ∀k : 0 ≤ ak ≤ 1.

Denote the ratio in the right-hand side by NUM

DEN . Let ak = Vk(Ck), so that NUM =
k=0 max(k · ak, 1). To get an upper bound on U/W , we ﬁnd a
Observation 1. in a maximizing sequence, a0 = 1 and there is no k > 0 such that
ak < 1/k. Proof : Setting such ak to 1/k increases NUM and does not change DEN.
Observation 2. A maximizing sequence must be weakly-decreasing (for all k < k(cid:48),
ak(cid:48) ≥ ak). Proof : if there exists k < k(cid:48) such that ak < ak(cid:48), then we can swap ak with ak(cid:48).
This does not change NUM but strictly decreases DEN.
Observation 3. In a maximizing sequence, there is no k > 0 such that 1/k < ak < 1.
Proof (for which we are grateful to Varun Dubey): If 1/k < ak < 1 then for some
sufﬁciently small  > 0, both ak +  and ak −  are in (1/k, 1) and replacing ak with
ak ±  makes the ratio strictly smaller than the maximum. Replacing ak with ak + 
DEN so  · DEN < k · NUM.
makes the ratio NUM+
Replacing ak with ak −  makes the ratio NUM−
DEN−k; that new ratio is smaller than NUM
so − · DEN < −k · NUM. But the two latter inequalities  · DEN < k · NUM and
−· DEN < −k· NUM are contradictory. Hence, the assumption 1/k < ak < 1 is false.
Observations 1-3 imply that a maximizing sequence has a very speciﬁc format. It is
characterized by an integer l ∈ {0, . . . , n − 1} such that, for all k ≤ l, ak = 1 and for all
k ≥ l + 1, ak = 1/k. So:

DEN+k; this new ratio is smaller than NUM

DEN

=

NUM
DEN

where Hn =(cid:80)n
maximizes the above expression is l = (cid:112)2(n − 1) + (Hn + 1)(Hn + 2) − (Hn + 1) =

The number l is integer, but the expression is bounded by the maximum attained
when l is allowed to be real. By standard calculus we get that the real value of l which

k=1(1/k) is the n-th harmonic number.

2(l + Hn + 1)
l2 − l + 2(n − 1)

(l + 1) + (Hn−1 − Hl)
2 l(l + 1) + (n − l − 1)

=

<

1

(cid:80)n−1
(cid:80)n−1
k=0 max(k · ak, 1)

k=0 ak

n). Substituting into the above inequality gives:

√
Θ(

NUM
DEN

≤ Θ(n1/2)
Θ(n)

= Θ(n−1/2)

=⇒

U
W

< 4n · NUM
DEN

= O(n1/2)

as claimed.

6.2. Nash price of partial-proportionality

THEOREM 6.2. For every constant B ≥ 4 and for any number n of agents, the Nash

price of (1/B)-proportionality with rectangularity constraint is less than 11.2.
The theorem is proved by the following:

LEMMA 6.2. Assume that there are n agents whose value functions are normalized
such that the value of the entire cake C is 1. Assume that there is a division of C among
these n agents such that each agent j ∈ {1, . . . , n} holds a rectangular piece Cj, so the
Nash welfare U (the geometric mean of the values) is given by

n(cid:89)

U n =

Vj(Cj)

Then, there exists a (1/4)-proportional rectangular allocation of C to these same n
agents with Nash welfare W , and U/W < 11.2.

j=1

PROOF. Apply the redivision protocol of Section 5 to redivide the existing n pieces
among the n agents. Renumber the agents as in the proof Theorem 6.1. Then the Nash
welfare of the new division, raised to the n-th power, can be bounded as:

n−1(cid:89)

k=0

k · Vk(Ck)

2n

(cid:81)n−1

(cid:81)n−1

n−1(cid:89)

k=0

(cid:81)n−1

=

W n >

max(

) ≥ (

,

1
4n

1
4n

)n

max(k · Vk(Ck), 1)

and the ratio of the new welfare to the previous welfare can be bounded as:

U n

W n < (4n)n ·

k=0 Vk(Ck)

(4n)n

k=0 max(kVk(Ck), 1)

k=0 max(k, 1/Vk(Ck))

U n
W n <

(4n)n(cid:81)n−1

k=1 k

The nominator does not depend on the valuations, so the ratio is maximized when the
denominator is minimized. This happens when each factor in the product is minimized.
The minimal value of the 0-th factor is 1 and the minimal value of the other factors is
k. Hence:

=

(4n)n
(n − 1)!

=

n(4n)n

n!

≈

√

n(4n)n
2πn(n/e)n

=

· (4e)n

(cid:112)n/2π

where e is the base of the natural logarithm. Taking the n-th root gives U/W < (4e) ·

1/n. A calculation in Wolfram Alpha shows that the rightmost term(cid:112)n/2π

is bounded globally by 1.03, so all in all U/W < 1.03 · 4 · e < 11.2 as claimed.
7. FUTURE WORK
Two-dimensional division, re-division, and price-of-fairness are three relatively new
topics, and there is a lot of room for future research in each of them.

1/n

(cid:114) n

2π

7.1. Handling other geometric constraints
Two steps in our redivision algorithm are sensitive to the geometric constraint: the 1-
dimensional reduction used in Sub. 3.1 Step 5, and the allocation-completion algorithm
of Sec. 4. We describe how these steps are affected by several alternative constraints:
(a) Convexity in two dimensions. When the cake is convex and the pieces must
be convex, the 1-dimensional reduction shown in Sub. 1.4 works as-is, since the pre-
image of an interval is a convex subset of C. The simple allocation-completion algo-

rithm also works as-is. As explained in [Segal-Halevi 2016], the bound on the num-
ber of additional convex pieces changes from m − 2 to 2m − 4. Hence, the partial-
proportionality guarnatee of our redivision protocol changes from 1/4-proportionality
to 1/5-proportionality. The price-of-fairness bounds are true for every B ≥ 5, and the
bound on the Nash-price-of-fairness changes from 11.2 to 14.
(b) Convexity in one dimension. If the cake is 1-dimensional and the pieces have
to be intervals, the allocation-completion algorithm becomes trivial: just stretch each
existing interval to the right/left to ﬁll the unallocated parts. No empty intervals re-
main, so our redivision protocol immediately becomes 1/3-proportional. The price-of-
fairness bounds are true for every B ≥ 3, and the bound on the Nash-price-of-fairness
changes from 11.2 to 8.4.
(c) Convexity in three or more dimensions. The 1-dimensional reduction works
as-is when the cake and the pieces are multi-dimensional convex objects. However, we
currently do not have an allocation-completion algorithm for convex objects (or even
for boxes) in three or more dimensions.

(d) Path-connectivity in two dimensions. If the pieces have to be path-connected
but not necessarily convex, then the allocation-completion step is much easier and no
holes are created [Segal-Halevi 2016]. Hence m(cid:48) = m. However, the 1-dimensional
reduction step is more complicated. The simple vertical projection shown in Sub. 1.4
does not work because, when the cake is not convex, the pre-image of an interval is
not necessarily connected. In some cases it may be possible to ﬁnd a different function
that does preserve connectivity, for example, when C is open and simply-connected
[Justpassingby 2016]. The algorithmic aspects require some more work.

(e) Fatness. A fat object is an object with a bounded length/width ratio, such as a
square. Fatness makes sense in land division: if you are entitled to a 900 square meters
of land, you will probably prefer to get them as a 30 × 30 square or a 45 × 20 rectangle
rather than 9000 × 0.1 sliver. A division problem with fatness requirement cannot be
reduced to one-dimensional division. In previous papers [Segal-Halevi et al. 2015a,b]
we developed some specialized division protocols that support fatness constraints, and
they can be used instead of the 1-dimensional reduction. However, we do not have an
allocation-completion algorithm with fatness constraints.

7.2. Improving the constants
Our redivision protocol is 1/4-proportional (for a rectangular cake) and the constant 4
enters into the price-of-fairness bounds. This ”4” comes from several factors that can
potentially be improved.

(a) In the redivision protocol of Section 5, we add m virtual agents, so that the total
number of agents is n + m. However, in the ﬁnal step each old agent chooses either
its virtual or its normal agent, while the other agent is ”wasted”. If we could know
the m choices of the agents in advance, we could employ only n agents overall and
this would subtract 1 from the constant (from 1/4 to 1/3). One way to analyze this sce-
nario is to deﬁne a strategic game in which each old agent has two possible strategies:
”normal” vs. ”virtual”. A pure-strategy Nash equilibrium in this game corresponds to
an allocation satisfying the partial-retention requirement. We conjecture that a pure-
strategy Nash equilibrium indeed exists. While ﬁnding a Nash equilibrium is usually
a computationally-hard problem, it may be useful as an existential result and improve
the constants in the price-of-fairness theorems.

(b) As shown by Example 3.2, as long as we treat each existing piece Cj as an ”is-
land” and insist that each new piece be entirely contained in an existing piece (i.e,
we do not cross the existing division lines), the resulting division can only be partially-
proportional and not fully proportional. It may be possible to improve the proportional-

ity guarantees by devising a different redivision procedure that does cross the existing
division lines, but this may require new geometric techniques.

√

7.3. Price-of-fairness
There is a lower bound of Ω(
n) on the utilitarian price of proportionality with arbi-
trary pieces [Caragiannis et al. 2012]. The example used in their lower bound can be
easily modiﬁed to prove a similar bound on the price of proportionality with rectangu-
lar pieces. However, we could not generalize it to the price of partial proportionality,
√
and it is interesting to know which of the following two options is correct: (a) there is
√
a lower bound of Ω(
n) matching our Theorem 6.1, or (b) the actual price of partial-
proportionality is o(
n). The latter option would imply that partial-proportionality is
asymptotically ”cheaper” than full proportionality, in social welfare terms.

ACKNOWLEDGMENTS
I am grateful to Galya Segal-Halevi, Yonatan Aumann, Avinatan Hassidim and Reuven Cohen for helpful
discussions and suggestions. I am also grateful to Math Stack Exchange members, particularly, Arseiny
Akopyan, Chris Culter, Varun Dubey (vnd), Alex Ravsky, Swami Sarvattomananda (Shreesh), David K and
JustPassingBy.

REFERENCES
Orit Arzi. 2012. Cake Cutting: Achieving Efﬁciency While Maintaining Fairness. Mas-

ter’s thesis. Bar-Ilan University. Under the supervision of Prof. Yonatan Aumann.

Yonatan Aumann and Yair Dombb. 2010. The Efﬁciency of Fair Division with
Connected Pieces. Web, Internet and Network Economics 6484 (2010), 26–37.
DOI:http://dx.doi.org/10.1007/978-3-642-17572-5 3

Haris Aziz and Chun Ye. 2014. Cake Cutting Algorithms for Piecewise Constant and
Piecewise Uniform Valuations. In Web and Internet Economics, Tie-Yan Liu, Qi Qi,
and Yinyu Ye (Eds.). Lecture Notes in Computer Science, Vol. 8877. Springer Inter-
national Publishing, 1–14. DOI:http://dx.doi.org/10.1007/978-3-319-13129-0 1

Julius B. Barbanel, Steven J. Brams, and Walter Stromquist. 2009.

Cutting
a pie is not a piece of cake. Amer. Math. Monthly 116, 6 (2009), 496–514.
DOI:http://dx.doi.org/10.4169/193009709X470407

Anatole Beck. 1987. Constructing a Fair Border. The American Mathematical Monthly

94, 2 (Feb. 1987), 157–162. DOI:http://dx.doi.org/10.2307/2322417

Marcus Berliant and Karl Dunz. 2004. A foundation of location theory: existence of
equilibrium, the welfare theorems, and core. Journal of Mathematical Economics
40, 5 (Aug. 2004), 593–618. DOI:http://dx.doi.org/10.1016/s0304-4068(03)00077-6

Marcus Berliant, William Thomson, and Karl Dunz. 1992. On the fair division of a
heterogeneous commodity. Journal of Mathematical Economics 21, 3 (Jan. 1992),
201–216. DOI:http://dx.doi.org/10.1016/0304-4068(92)90001-n

Henry Bernstein. 2002. Land Reform: Taking a Long(er) View. Journal of Agrarian
Change 2, 4 (1 Oct. 2002), 433–463. DOI:http://dx.doi.org/10.1111/1471-0366.00042
Steven J. Brams. 2007. Mathematics and Democracy: Designing Better Voting and
Fair-Division Procedures (ﬁrst edition ed.). Princeton University Press. http://www.
sciencedirect.com/science/article/pii/S089571770800174X

Steven J. Brams, Michael Jones, and Christian Klamler. 2008. Proportional pie-
cutting. International Journal of Game Theory 36, 3-4 (28 March 2008), 353–367.
DOI:http://dx.doi.org/10.1007/s00182-007-0108-z

Steven J. Brams and Alan D. Taylor. 1996. Fair Division: From Cake-Cutting to Dis-
pute Resolution. Cambridge University Press. http://www.amazon.com/exec/obidos/
redirect?tag=citeulike07-20&path=ASIN/0521556449

Ioannis Caragiannis, Christos Kaklamanis, Panagiotis Kanellopoulos, and Maria Ky-
ropoulou. 2012. The Efﬁciency of Fair Division. Theory of Computing Systems 50, 4
(8 Sept. 2012), 589–610. DOI:http://dx.doi.org/10.1007/s00224-011-9359-y

Ioannis Caragiannis, John K. Lai, and Ariel D. Procaccia. 2011.

Towards
the 22nd International
more expressive cake cutting.
Joint Conference on Artiﬁcial Intelligence (IJCAI-11). AAAI Press, 127–132.
DOI:http://dx.doi.org/10.5591/978-1-57735-516-8/ijcai11-033

In Proceedings of

Yiling Chen, John K. Lai, David C. Parkes, and Ariel D. Procaccia. 2013. Truth, jus-
tice, and cake cutting. Games and Economic Behavior 77, 1 (Jan. 2013), 284–297.
DOI:http://dx.doi.org/10.1016/j.geb.2012.10.009

Y. Chevaleyre, P. E. Dunne, U. Endriss, J. Lang, M. Lemaˆıtre, N. Maudet, J. Padget,
S. Phelps, J. A. Rodriguez-Aguilar, and P. Sousa. 2006. Issues in Multiagent Re-
source Allocation. Informatica 30, 1 (2006), 3–31. http://www.informatica.si/index.
php/informatica/article/view/70

Chris Culter. 2013.

Exchange.
URL:http://math.stackexchange.com/q/461675 (version: 2013-08-07).

Aug.

(7

Dividing people
2013).

to

rooms.

Mathematics Stack
http://math.stackexchange.com/q/461675

Marco Dall’Aglio and Fabio Maccheroni. 2009. Disputed lands. Games and Economic

Behavior 66, 1 (May 2009), 57–77. DOI:http://dx.doi.org/10.1016/j.geb.2008.04.006

Christina Delimitrou and Christos Kozyrakis. 2014. Quasar: Resource-efﬁcient
the 19th Interna-
and QoS-aware Cluster Management.
tional Conference on Architectural Support for Programming Languages and
Operating Systems
(ASPLOS ’14). ACM, New York, NY, USA, 127–144.
DOI:http://dx.doi.org/10.1145/2541940.2541941

In Proceedings of

Raghuveer Devulapalli. 2014. Geometric partitioning algorithms for fair division of ge-
ographic resources. Ph.D. Dissertation. University of Minnesota. http://conservancy.
umn.edu/handle/11299/165305

Jeff Edmonds and Kirk Pruhs. 2006. Balanced Allocations of Cake. In FOCS, Vol. 47.

IEEE Computer Society, 623–634. DOI:http://dx.doi.org/10.1109/focs.2006.17

Jeff Edmonds, Kirk Pruhs, and Jaisingh Solanki. 2008. Conﬁdently Cutting a Cake
into Approximately Fair Pieces. Algorithmic Aspects in Information and Manage-
ment (2008), 155–164. DOI:http://dx.doi.org/10.1007/978-3-540-68880-8 16

David Eppstein. 2009. Graph-Theoretic Solutions to Computational Geometry Prob-

lems. (26 Aug. 2009). DOI:http://dx.doi.org/10.1007/978-3-642-11409-0 1

3

(March 1984),

cake

cut-
285–296.

Shimon Even

1984.
Discrete Applied Mathematics

ting.
DOI:http://dx.doi.org/10.1016/0166-218x(84)90005-2

and Azaria

Paz.

7,

A note

on

Eric Friedman, Christos A. Psomas, and Shai Vardi. 2015. Dynamic Fair Divi-
sion with Minimal Disruptions. In Proceedings of the Sixteenth ACM Conference
on Economics and Computation (EC ’15). ACM, New York, NY, USA, 697–713.
DOI:http://dx.doi.org/10.1145/2764468.2764495

Theodore P. Hill. 1983. Determining a Fair Border. The American Mathematical

Monthly 90, 7 (Aug. 1983), 438–442. DOI:http://dx.doi.org/10.2307/2975720

Tatsuro Ichiishi and Adam Idzik. 1999.

Equitable allocation of divisible
Journal of Mathematical Economics 32, 4 (Dec. 1999), 389–400.

goods.
DOI:http://dx.doi.org/10.1016/s0304-4068(98)00053-6

Karthik Iyer and Michael N. Huhns. 2009.

cation of Two-Dimensional Resources
national Journal
DOI:http://dx.doi.org/10.1142/S0218843009002051

of Cooperative

A Procedure for
in a Multiagent System.

the Allo-
Inter-
Information Systems 18 (2009), 1–34.

Justpassingby. 2016. A connectivity-preserving function from a connected set onto an
interval. Mathematics Stack Exchange. (5 Feb. 2016). http://math.stackexchange.

com/q/1637220/29780 URL: http://math.stackexchange.com/q/1637220/29780.

Ian Kash, Ariel D. Procaccia, and Nisarg Shah. 2013. No agent left behind: dynamic
fair division of multiple resources. In Proceedings of the 2013 international confer-
ence on Autonomous agents and multi-agent systems (AAMAS ’13). IFAAMAS, 351–
358. http://portal.acm.org/citation.cfm?id=2484977

J. Mark Keil. 2000.

In Handbook of Computational
Geometry. University of Saskatchewan Saskatoon, Sask., Canada, 491–518.
DOI:http://dx.doi.org/10.1016/B978-044482537-7/50012-7

Polygon Decomposition.

Michael Lipton. 2009. Land Reform in Developing Countries: Property Rights and
Property Wrongs. Routledge. http://www.amazon.com/exec/obidos/redirect?tag=
citeulike07-20&path=ASIN/0415096677

Herve Moulin. 1990.
and open problems.
DOI:http://dx.doi.org/10.1007/bf01560582

Fair division under joint ownership: Recent results
Social Choice and Welfare 7, 2 (1990), 149–170.

Herv´e Moulin. 2004. Fair Division and Collective Welfare. The MIT Press. 1–
295 pages. http://www.amazon.com/exec/obidos/redirect?tag=citeulike07-20&path=
ASIN/0262633116

John P. Powelson. 1988. The Story of Land: A World History of Land Tenure and
Agrarian Reform. Lincoln Institute of Land Policy. http://www.amazon.com/exec/
obidos/redirect?tag=citeulike07-20&path=ASIN/0899462189

Ariel D. Procaccia. 2015. Cake Cutting Algorithms. In Handbook of Computational So-
cial Choice, Felix Brandt, Vincent Conitzer, Ulle Endriss, Jerome Lang, and Ariel D.
Procaccia (Eds.). Cambridge University Press, Chapter 13. http://www.cs.cmu.edu/∼
Jack M. Robertson and William A. Webb. 1998. Cake-Cutting Algorithms: Be Fair if
You Can (ﬁrst ed.). A K Peters/CRC Press. 1–177 pages. http://www.amazon.com/
exec/obidos/redirect?tag=citeulike07-20&path=ASIN/1568810768

Peter Rosset, Raj Patel, and Michael Courville (Eds.). 2006.

Land: Competing Visions of Agrarian Reform (ﬁrst
ed.).
citeulike07-20&path=ASIN/0935028285

Food First Books.

Promised
trade paper edition
http://www.amazon.com/exec/obidos/redirect?tag=

Erel Segal-Halevi. 2016. Cutting a Cake without Harming the Toppings.

2016). http://arxiv.org/abs/1604.00960 arXiv preprint 1604.00960.

Erel Segal-Halevi, Avinatan Hassidim, and Yonatan Aumann. 2015a. Envy-Free Cake-
Cutting in Two Dimensions. In Proceedings of the 29th AAAI Conference on Arti-
ﬁcial Intelligence (AAAI-15). 1021–1028. http://www.aaai.org/ocs/index.php/AAAI/
AAAI15/paper/view/9656

Erel Segal-Halevi, Shmuel Nitzan, Avinatan Hassidim, and Yonatan Aumann. 2015b.
Fair and Square: Cake-Cutting in Two Dimensions. (12 Oct. 2015). http://arxiv.org/
abs/1510.03170 arXiv preprint 1510.03170.

Hugo Steinhaus. 1948. The problem of fair division. Econometrica 16, 1 (Jan. 1948),

(4 April

101–104. http://www.jstor.org/stable/1914289

William Thomson. 1983. The Fair Division of a Fixed Supply Among a Growing
Population. Mathematics of Operations Research 8, 3 (01 Aug. 1983), 319–326.
DOI:http://dx.doi.org/10.1287/moor.8.3.319

William Thomson. 2007. Children Crying at Birthday Parties. Why? Economic Theory

31, 3 (June 2007), 501–521. DOI:http://dx.doi.org/10.1007/s00199-006-0109-3

William Thomson. 2011.

Fair Allocation Rules. Vol. 2.

Elsevier, 393–506.

DOI:http://dx.doi.org/10.1016/s0169-7218(10)00021-3

Toby Walsh. 2011. Online Cake Cutting. Algorithmic Decision Theory 6992 (2011),

292–305. DOI:http://dx.doi.org/10.1007/978-3-642-24873-3 22

Douglas R. Woodall. 1980. Dividing a cake fairly. J. Math. Anal. Appl. 78, 1 (Nov.

1980), 233–247. DOI:http://dx.doi.org/10.1016/0022-247x(80)90225-5

Yunqi Zhang, Michael A. Laurenzano, Jason Mars, and Lingjia Tang. 2014. SMiTe:
Precise QoS Prediction on Real-System SMT Processors to Improve Utilization in
Warehouse Scale Computers. In Proceedings of the 47th Annual IEEE/ACM In-
ternational Symposium on Microarchitecture (MICRO-47). IEEE Computer Society,
Washington, DC, USA, 406–418. DOI:http://dx.doi.org/10.1109/micro.2014.53

Roie Zivan. 2011. Can trust increase the efﬁciency of cake cutting algorithms. In The
International Conference on Autonomous Agents and Multiagent Systems (AAMAS).
1145–1146. http://aamas.csc.liv.ac.uk/Proceedings/aamas2011/papers/B2.pdf

