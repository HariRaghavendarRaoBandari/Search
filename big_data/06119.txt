A Big-Data Approach to Handle Process Variations:

Uncertainty Quantiﬁcation by Tensor Recovery

Zheng Zhang, Tsui-Wei Weng and Luca Daniel

Research Laboratory of Electronics, Massachusetts Institute of Technology, Cambridge, MA 02139, USA

E-mail: z zhang@mit.edu, twweng@mit.edu, luca@mit.edu

6
1
0
2

 
r
a

 

M
9
1

 
 
]
E
C
.
s
c
[
 
 

1
v
9
1
1
6
0

.

3
0
6
1
:
v
i
X
r
a

Abstract—Stochastic spectral methods have become a popular
technique to quantify the uncertainties of nano-scale devices and
circuits. They are much more efﬁcient than Monte Carlo for
certain design cases with a small number of random parameters.
However, their computational cost signiﬁcantly increases as the
number of random parameters increases. This paper presents a
big-data approach to solve high-dimensional uncertainty quantiﬁ-
cation problems. Speciﬁcally, we simulate integrated circuits and
MEMS at only a small number of quadrature samples; then, a
huge number of (e.g., 1.5 × 1027) solution samples are estimated
from the available small-size (e.g., 500) solution samples via a
low-rank and tensor-recovery method. Numerical results show
that our algorithm can easily extend the applicability of tensor-
product stochastic collocation to IC and MEMS problems with
over 50 random parameters, whereas the traditional algorithm
can only handle several random parameters.

I. INTRODUCTION

Fabrication process variations can signiﬁcantly decrease the
yield of nano-scale chip design [1]. In order to estimate
the uncertainties of chip performance, Monte Carlo [2], [3]
has been used in commercial electronic design automation
software for decades. Monte Carlo is easy to implement but
generally requires a large number of repeated simulations due
to its slow convergence rate. In recent years, stochastic spectral
methods [4], [5] have emerged as a promising alternative due
to their higher efﬁciency for certain design cases.

Stochastic spectral methods approximate a stochastic solu-
tion as a linear combination of some generalized polynomial
chaos basis functions [6], and they may get highly accurate
solutions without (or with only a small number of) repeated
simulations. Based on intrusive (i.e., non-sampling) formula-
tions such as stochastic Galerkin [4] and stochastic testing [7]
as well as sampling-based formulations such as stochastic
collocation [5], extensive results have been reported for IC [7]–
[13], MEMS [14], [15] and photonic [16] applications.

Unfortunately, the computational cost of stochastic spec-
tral methods increases very fast as the number of random
parameters increases. In order to solve high-dimensional prob-
lems, several advanced algorithms have been developed. For
instance, analysis of variance (ANOVA) [14] and compressed
sensing [17] can exploit the sparsity of high-dimensional gen-
eralized polynomial-chaos expansion. The dominant singular
vector method [18] can exploit the low-rank property of the
matrix formed by all coefﬁcient vectors. Stochastic model-
order reduction [19] can remarkably reduce the number of sim-
ulations for sampling-based solvers. With devices or subsys-

tems described by high-dimensional generalized polynomial-
chaos expansions, hierarchical uncertainty quantiﬁcation based
on tensor-train decomposition [15] can handle more complex
systems by changing basis functions.

This paper provides a big-data approach for solving the
challenging high-dimensional uncertainty quantiﬁcation prob-
lem. Speciﬁcally, we investigate tensor-product stochastic col-
location that was only applicable to problems with a few
random parameters. We represent the huge number of required
solution samples as a tensor [20] (i.e., a high-dimensional
generalization of matrix) and develop a low-rank and sparse
recovery method to estimate the whole tensor from only
a small number of solution samples. This technique can
easily extend the applicability of tensor-product stochastic
collocation to problems with over 50 random parameters,
making it even much more efﬁcient than sparse-grid stochastic
collocation. This paper aims at brieﬂy presenting the key idea
and showing its application in IC and MEMS. Theoretical and
implementation details can be found in our preprint manuscript
that is focused on power system applications [21].

II. PRELIMINARIES

A. Uncertainty Quantiﬁcation using Stochastic Collocation

Let ξ = [ξ1, · · · , ξd] ∈ Rd denotes a set of mutually
independent random parameters that describe process vari-
ations. We aim to estimate the uncertainty of y(ξ), which
is a parameter-dependent output of interest (e.g., the power
consumption or frequency of a chip design). When y smoothly
depends on ξ and when it has a bounded variance, a truncated
generalized polynomial-chaos expansion can be applied

y(ξ) ≈

p

X|α|=0

cαΨα(ξ), with E [ΨαΨβ (ξ)] = σα,β.

(1)

Here E denotes expectation, σ denotes a Delta function, the
basis functions {Ψα (ξ)} are some orthonormal polynomials,
α = [α1, · · · , αd] ∈ Nd is a vector indicating the highest
polynomial order of each parameter in the corresponding basis.
The total polynomial order |α| is bounded by p, and thus the
total number of basis functions is (p + d)!/(p!d!).

The coefﬁcient cα can be obtained by a projection:

cα =ZRd

y(ξ)Ψα(ξ)ρ(ξ)dξ, with ρ(ξ) = Πd

k=1ρk(ξk)

(2)

Fig. 1.
data array (e.g., multiple slices of images) is a tensor.

(a) a 2-D data array (e.g., a medical image) is a matrix, (b) a 3-D

where ρ(ξ) is the joint probability density function and ρk(ξk)
the marginal density of ξk. The above integral needs to
be evaluated with some numerical techniques. This paper
considers the tensor-product implementation. Speciﬁcally, let
{(ξik
ik =1 be q pairs of quadrature points and weights
for parameter ξk, the integral in (2) is evaluated as

k , wik

k )}q

cα = X1≤i1,··· ,id≤q

y(ξi1···id )Ψα(ξi1···id )wi1···id

(3)

1 , · · · , ξid

d ] and wi1···id = wi1

where ξi1···id = [ξi1
1 · · · wid
d .
Very often, evaluating each solution sample y(ξi1···id ) requires
a time-consuming numerical simulation (e.g., a RF circuit
simulation that involves periodic steady-state computation or
a detailed device simulation by solving a large-scale partial
differential equation or integral equation formulation).

B. Tensor and Tensor Decomposition

1) Tensor: Tensor is a high-dimensional generalization of
matrix. A matrix X ∈ Rn1×n2 is a 2nd-order tensor, and its
element indexed by (i1, i2) can be denoted as xi1i2. For a
general dth-order tensor X ∈ Rn1×···nd, its element indexed
by (i1, · · · , id) can be denoted as ai1···id. Fig. 1 shows a matrix
and a 3rd-order tensor. Given any two tensors X and Y of
the same size, their inner product is deﬁned as

hX , Yi := Xi1···id

xi1···id yi1···id .

(4)

The Frobenius norm of

tensor X is further deﬁned as

||X ||F :=phX , X i.

2) Tensor Decomposition: A tensor X is rank-1 if it can

be written as the outer product of some vectors:

X = u1 ◦ · · · ◦ ud ⇔ xi1···id = u1(i1) · · · ud(id)

(5)

where uk(ik) denotes the ik-th element of vector uk ∈ Rnk.
Similar to matrices, a low-rank tensor can be written as the
sum of some rank-1 tensors:

r

X =

uj

1 ◦ · · · ◦ uj
d.

(6)

Xj=1

As a demonstration, Fig. 2 shows the low-rank factorizations
of a matrix and 3rd-order tensor, respectively.

III. TENSOR RECOVERY APPROACH

Formulation (3) is only applicable to problems with 5 or 6
random parameters due to the qd simulation samples required.
This section describes our tensor-recovery approach that can
signiﬁcantly reduce the computational cost and extend (3) to
design cases with many random parameters.

Fig. 2. Low-rank factorization of a matrix (top) and of a 3rd-order tensor
(bottom).

A. Stochastic Collocation Using Tensor Recovery

1) Reformulation with Tensors: We deﬁne two tensors Y
and Wα, such that
their elements indexed by (i1, · · · id)
are y(ξi1···id ) and Ψα(ξi1···id )wi1···id respectively. Then, the
operation in (3) can be written with tensors in a compact way:

cα = hY, Wαi.

(7)

It is straightforward to show that Wα is a rank-1 tensor. Our
focus is to compute Y. Once Y is computed, stochastic col-
location can be done easily. Unfortunately, directly computing
Y is impossible for high-dimensional cases, since it requires
simulating a design problem qd times.

2) Tensor Recovery Approach:

In order to reduce the
computational cost, we estimate Y using an extremely small
number of its elements. Let I include all indices for the
elements of Y, and its subset Ω includes the indices of a
few available tensor elements obtained by circuit or MEMS
simulation. With the sampling set Ω, a projection operator P
is deﬁned for Y:

B = PΩ (Y) ⇔ bi1···id =(cid:26) yi1···id , if i1 · · · id ∈ Ω

0, otherwise.

(8)

We want to ﬁnd a tensor X such that it matches Y for the
elements speciﬁed by Ω:

kPΩ (X − Y) k2

F = 0.

(9)

However, this problem is ill-posed, because any value can be
assigned to xi1···id if i1 · · · id /∈ Ω.

3) Regularize Problem (9): In order to make the tensor
recovery problem well-posed, we add the following constraints
based on practical observations.

• Low-Rank Constraint: we observe that very often the
high-dimensional simulation data array Y has a low
tensor rank. Therefore, we expect that its approximation
X also has a low-rank property. Thus, we assume that
X has a rank-r decomposition described in (6).

• Sparse Constraint: as shown in practical cases [14],
[17], most of the coefﬁcients in a high-dimensional
generalized polynomial-chaos expansion have very small
magnitude. This implies that ℓ1-norm of all coefﬁcients

p

X|α|=0

|cα| ≈

should be very small.

|hX , Wαi|

(10)

p

X|α|=0

RF Conducting
        Path

Secondary
  Actuator

RF Capacitor

Contact Bump

Primary
Actuator

Fig. 3. Schematic of the RF MEMS capacitor [22].

COMPARISON OF SIMULATION COST FOR THE MEMS CAPACITOR.

TABLE I

method

tensor product

sparse grid

proposed

simulation samples

8.9 × 1021

4512

300

Combining the low-rank and sparse constraints together, we
suggest the following optimization problem to compute X as
an estimation (or approximation) of Y:

Fig. 4. Numerical results of the MEMS capacitor, with λ = 0.01. Top left:
relative error of the generalized polynomial-chaos coefﬁcients in iterations; top
right: decrease of the cost function in (11); bottom left: sparsity of the obtained
generalized polynomial-chaos expansion; bottom right: obtained probability
density function compared with that from Monte Carlo.

min
k ,··· ,u

1

r

k}d

k=1

{u

1
2

1 ◦ · · · ◦ uj

r

uj

kPΩ
Xj=1

|* r
Xj=1
X|α|=0

p

+ λ

F

d − Y
 k2
d, Wα+ |.

uj

1 ◦ · · · ◦ uj

Vdd

(11)

In this formulation, we compute the vectors that describe the
low-rank decomposition of X . This treatment has a signiﬁcant
advantage: the number of unknown variables is dqr, which is
only a linear function of parameter dimensionality d. We pick
λ and the size of Ω by empirical cross validations.

k}d

k, · · · , ur

4) Solve Problem (11): The optimization problem (11) is
solved iteratively in our implementation. Speciﬁcally, start-
ing from a provided initial guess of the low-rank factors
k=1, alternating minimization is performed re-
{u1
cursively using the result of previous iteration as a new initial
guess. Each iteration of alternating minimization consists of d
steps. At the k-th step, the r vectors {u1
k} correspond-
ing to parameter ξk are updated by keeping all other factors
ﬁxed and by solving (11) as a convex optimization problem.

k, · · · , ur

IV. NUMERICAL RESULTS

In order to verify our tensor-recovery uncertainty quan-
tiﬁcation algorithm, we show the simulation results of two
high-dimensional IC and MEMS examples. All codes are
implemented in MATLAB and run on a Macbook with 2.5-
GHz CPU and 16-G memory.

A. MEMS Example (with 46 Random Parameters)

We consider the MEMS device in Fig. 3, and we in-
tend to approximate its capacitance a 2nd-order generalized
polynomial-chaos expansion of 46 process variations. As
shown in Table I, using 3 Gauss-quadrature points for each pa-
rameter, a tensor-product integration requires 346 ≈ 8.9×1021
simulation samples, and the Smolyak sparse-grid technique
requires 4512 simulation samples.

Fig. 5. Schematic of the CMOS ring oscillator.

We simulate this device using only 300 quadrature samples
randomly selected from the tensor-product integration rules,
then our tensor recovery method estimates the whole tensor
Y [which contains all 346 samples for the output y(ξ)]. The
relative approximation error for the whole tensor is about
0.1% (measured by cross validation). As shown in Fig. 4, our
optimization algorithm converges with less than 70 iterations,
and the generalized polynomial-chaos coefﬁcients are obtained
with a small relative error (below 10−4); the obtained model
is very sparse, and the obtained density function of the MEMS
capacitor is almost identical with that from Monte Carlo. Note
that the number of repeated simulations in our algorithm is
only about 1/4 of the total number of basis functions.

B. 7-Stage CMOS Ring Oscillator (with 57 Parameters)

We further consider the CMOS ring oscillator in Fig. 5. This
circuit has 57 random parameters describing the variations of
threshold voltages, gate-oxide thickness, and effective gate
length/width. We intend to obtain a 2nd-order polynomial-
chaos expansion for its frequency by calling a periodic steady-
state simulator repeatedly. The required number of simulations
for different algorithms are listed in Table II, which clearly
shows the superior efﬁciency of our approach for this example.

COMPARISON OF SIMULATION COST FOR THE RING OSCILLATOR.

TABLE II

method

tensor product

sparse grid

proposed

simulation samples

1.6 × 1027

6844

500

REFERENCES

[1] D. S. Boning, “Variation,” IEEE Trans. Semiconductor Manufacturing,

vol. 21, no. 1, pp. 63–71, Feb 2008.

[2] S. Weinzierl, “Introduction to Monte Carlo methods,” NIKHEF, Theory

Group, The Netherlands, Tech. Rep. NIKHEF-00-012, 2000.

[3] A. Singhee and R. A. Rutenbar, “Statistical blockade: Very fast statistical
simulation and modeling of rare circuit events and its application to
memory design,” IEEE Trans. on CAD of Integrated Circuits and
systems, vol. 28, no. 8, pp. 1176–1189, Aug. 2009.

[4] R. Ghanem and P. Spanos, Stochastic ﬁnite elements: a spectral ap-

proach. Springer-Verlag, 1991.

[5] D. Xiu and J. S. Hesthaven, “High-order collocation methods for
differential equations with random inputs,” SIAM J. Sci. Comp., vol. 27,
no. 3, pp. 1118–1139, Mar 2005.

[6] D. Xiu and G. E. Karniadakis, “The Wiener-Askey polynomial chaos
for stochastic differential equations,” SIAM J. Sci. Comp., vol. 24, no. 2,
pp. 619–644, Feb 2002.

[7] Z. Zhang, T. A. El-Moselhy, I. A. M. Elfadel, and L. Daniel, “Stochastic
testing method for transistor-level uncertainty quantiﬁcation based on
generalized polynomial chaos,” IEEE Trans. Computer-Aided Design
Integr. Circuits Syst., vol. 32, no. 10, Oct. 2013.

[8] P. Manfredi, D. V. Ginste, D. D. Zutter, and F. Canavero, “Stochastic
modeling of nonlinear circuits via SPICE-compatible spectral equiva-
lents,” IEEE Trans. Circuits Syst. I: Regular Papers, vol. 61, no. 7, pp.
2057–2065, July 2014.

[9] I. S. Stievano, P. Manfredi, and F. G. Canavero, “Parameters variability
effects on multiconductor interconnects via hermite polynomial chaos,”
IEEE Trans. Compon., Packag., Manufacut. Tech., vol. 1, no. 8, pp.
1234–1239, Aug. 2011.

[10] K. Strunz and Q. Su, “Stochastic formulation of SPICE-type electronic
circuit simulation with polynomial chaos,” ACM Trans. Modeling and
Computer Simulation, vol. 18, no. 4, pp. 15:1–15:23, Sep 2008.

[11] Z. Zhang, T. A. El-Moselhy, P. Maffezzoni, I. A. M. Elfadel, and
L. Daniel, “Efﬁcient uncertainty quantiﬁcation for the periodic steady
state of forced and autonomous circuits,” IEEE Trans. Circuits Syst. II:
Exp. Briefs, vol. 60, no. 10, Oct. 2013.

[12] R. Pulch, “Modelling and simulation of autonomous oscillators with
random parameters,” Mathematics and Computers in Simulation, vol. 81,
no. 6, pp. 1128–1143, Feb 2011.

[13] M. Rufuie, E. Gad, M. Nakhla, R. Achar, and M. Farhan, “Fast vari-
ability analysis of general nonlinear circuits using decoupled polynomial
chaos,” in Workshop Signal and Power Integrity, May 2014, pp. 1–4.

[14] Z. Zhang, X. Yang, G. Marucci, P. Maffezzoni, I. M. Elfadel, G. Karni-
adakis, and L. Daniel, “Stochastic testing simulator for integrated circuits
and MEMS: Hierarchical and sparse techniques,” in Proc. IEEE Custom
Integrated Circuits Conf. San Jose, CA, Sept. 2014, pp. 1–8.

[15] Z. Zhang, I. Osledets, X. Yang, G. E. Karniadakis, and L. Daniel,
“Enabling high-dimensional hierarchical uncertainty quantiﬁcation by
ANOVA and tensor-train decomposition,” IEEE Trans. CAD of Inte-
grated Circuits and Systems, vol. 34, no. 1, pp. 63 – 76, Jan 2015.

[16] T.-W. Weng, Z. Zhang, Z. Su, Y. Marzouk, A. Melloni, and L. Daniel,
“Uncertainty quantiﬁcation of silicon photonic devices with correlated
and non-Gaussian random parameters,” Optics Express, vol. 23, no. 4,
pp. 4242 – 4254, Feb 2015.

[17] X. Li, “Finding deterministic solution from underdetermined equation:
large-scale performance modeling of analog/RF circuits,” IEEE Trans.
Computer-Aided Design of Integrated Circuits and Systems, vol. 29,
no. 11, pp. 1661–1668, Nov 2011.

[18] T. Moselhy and L. Daniel, “Stochastic dominant singular vectors method
for variation-aware extraction,” in Proc. Design Auto. Conf., Jun. 2010,
pp. 667–672.

[19] T. A. El-Moselhy and L. Daniel, “Variation-aware interconnect extrac-
tion using statistical moment preserving model order reduction,” in
Design, Automation and Test in Europe, 2010, pp. 453–458.

[20] T. G. Kolda and B. W. Bader, “Tensor decompositions and applications,”

SIAM Review, vol. 51, no. 3, pp. 455–500, Aug. 2009.

[21] Z. Zhang, H. D. Nguyen, K. Turitsyn, and L. Daniel, “Probabilistic
power ﬂow computation via low-rank and sparse tensor recovery,” arXiv
preprint, vol. arXiv:1508.02489, 2015.

[22] Z. Zhang, M. Kamon, and L. Daniel, “Continuation-based pull-in and
lift-off simulation algorithms for microelectromechanical devices,” J.
Microelectromech. Syst., vol. 23, no. 5, pp. 1084–1093, Oct. 2014.

Fig. 6. Numerical results of the ring oscillator, with λ = 0.1. Top left: rela-
tive error of the tensor factors for each iteration; top right: decrease of the cost
function in (11); bottom left: sparsity of the obtained generalized polynomial-
chaos expansion; bottom right: obtained density function compared with that
from Monte Carlo using 5000 samples.

We simulate this circuit using only 500 samples randomly
selected from the 357 ≈ 1.6 × 1027 tensor-product integration
samples, then our algorithm estimates the whole tensor Y
with a 1% relative error. As shown in Fig. 6, our optimization
algorithm converges after 46 iterations, and the tensor factors
are obtained with less than 1% relative errors; the obtained
model is very sparse, and the obtained density function of the
oscillator frequency is almost identical with that from Monte
Carlo. Note that the number of our simulations (i.e., 500) is
much smaller than the total number of basis functions (i.e.,
1711) in the generalized polynomial-chaos expansion.

V. CONCLUSION

This paper has presented a big-data approach for solving
the challenging high-dimensional uncertainty quantiﬁcation
problem. Our key idea is to estimate the high-dimensional
simulation data array from an extremely small subset of its
samples. This idea has been described as a tensor-recovery
model with low-rank and sparse constraints. Simulation results
on integrated circuits and MEMS show that our algorithm can
be easily applied to problems with over 50 random parameters.
Instead of using a huge number of (e.g., about 1027) quadrature
samples, our algorithm requires only several hundreds which
is even much smaller than the number of basis functions.

ACKNOWLEDGMENT

This work was supported by the NSF NEEDS program and

by AIM Photonics under Project MCE EPDA004.

