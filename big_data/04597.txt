6
1
0
2

 
r
a

 

M
5
1

 
 
]
S
D
.
s
c
[
 
 

1
v
7
9
5
4
0

.

3
0
6
1
:
v
i
X
r
a

A branch and bound algorithm for a fractional

0-1 programming problem

Irina Utkina, Mikhail Batsyn∗, and Ekaterina Batsyna

Department of Applied Mathematics and Informatics,

Laboratory of Algorithms and Technologies for Network Analysis

National Research University Higher School of Economics

136 Rodionova street, Niznhy Novgorod, Russia

iutkina@hse.ru, mbatsyn@hse.ru, batcyna@hse.ru

Abstract. We consider a fractional 0-1 programming problem arising in
manufacturing. The problem consists in clustering of machines together
with parts processed on these machines into manufacturing cells so that
intra-cell processing of parts is maximized and inter-cell movement is
minimized. This problem is called Cell Formation Problem (CFP) and
it is an NP-hard optimization problem with Boolean variables and con-
straints and with a fractional objective function. Because of its high
computational complexity there are a lot of heuristics developed for it.
In this paper we suggest a branch and bound algorithm which provides
exact solutions for the CFP with a variable number of cells and group-
ing eﬃcacy objective function. This algorithm ﬁnds optimal solutions
for 21 of the 35 popular benchmark instances from literature and for the
remaining 14 instances it ﬁnds good solutions close to the best known.

Keywords: cell formation; biclustering; branch and bound; upper bound; exact
solution

1

Introduction

The ﬁrst work on the Group Technology in manufacturing was written by Flan-
ders (1925). In Russia the Group Technology was introduced by Mitrofanov
(1933). The main problem in the Group Technology (GT) is to ﬁnd an optimal
partitioning of machines and parts into manufacturing cells, in order to maximize
intra-cell processing and minimize inter-cell movement of parts. Maximization
of the so-called grouping eﬃcacy is accepted in literature as a good objective
combining these two goals (Kumar & Chandrasekharan, 1990). This problem is
called the Cell Formation Problem (CFP) (Goldengorin et al., 2013). CFP with
grouping eﬃcacy objective function is a fractional 0-1 programming problem.

Burbidge developed Product Flow Analysis (PFA) approach to this problem
and described the GT and the CFP in his book (Burbidge, 1961). Ballakur &
Steudel (1987) have shown that the CFP is an NP-hard problem for diﬀerent
objective functions. That is why there have been developed a lot of heuristic

approaches (Goncalves & Resende, 2004; James et al., 2007; Bychkov et al.,
2013, Paydar & Saidi-Mehrabad, 2013) and almost no exact ones for the CFP
with a variable number of cells and grouping eﬃcacy objective function.

Kusiak et al. (1993) consider one of the most simple variants of the CFP
called the machine partitioning problem in which it is necessary to partition
only machines into the speciﬁed number of cells minimizing the total Hamming
distance between machines inside the cells. The authors present an exact A*
algorithm for this variant of the CFP. They also develop a branch and bound
algorithm for the CFP with a variable number of cells, a limit on the number
of machines inside each cell, and maximization of the size of so-called mutually
separable cells as an objective function. Spiliopoulos & Soﬁanopoulou (1998) and
Arket et al. (2012) also present branch and bound algorithms for the machine
partitioning problem.

One of the recent exact approaches for the CFP with the grouping eﬃcacy
objective function is suggested by Elbenani & Ferland (2012). These authors
suggest to reduce the fractional programming CFP problem to a number of ILP
problems by means of Dinkelbach approach and to solve each ILP problem with
CPLEX solver. Unfortunately they consider the CFP with a ﬁxed number of cells
which is much easier. They solve 27 of the 35 popular benchmark instances, but
only for a ﬁxed number of cells. The same simpliﬁed formulation of the CFP is
considered by Brusco (2015). The author develops a branch and bound algorithm
and solves 31 of the 35 instances, but again only for some ﬁxed numbers of cells.
For example problem 26 is solved only for 7 cells and it requires more than 15
days of computational time.

To the best of our knowledge the only existing exact approach to the CFP
with a variable number of cells and grouping eﬃcacy objective function is by
Bychkov et al. (2014) who suggested a new approach to reduce the CFP problem
to a small number of ILP problems and for the ﬁrst time solved to optimality 14
of the 35 popular benchmark instances from literature using CPLEX software.
Zilinskas et al. (2015) considered the CFP with a variable number of cells as a
bi-objective optimization problem and developed an exact algorithm which ﬁnds
Pareto frontier.

In this paper we suggest an eﬃcient branch and bound algorithm for the
CFP with a variable number of cells and grouping eﬃcacy objective function.
We are able to ﬁnd optimal solutions for 21 of the 35 benchmark instances. Note
also that the CFP is a biclustering problem in which we simultaneously cluster
machines and parts into cells. So the suggested approach can be also applied to
biclustering problems arising in data mining (Busygin et al., 2008).

2 Formulation

The objective of the CFP is to ﬁnd an optimal partitioning of machines and
parts into groups (production cells, or shops) in order to minimize the inter-cell
movement of parts from one cell to another and to maximize intra-cell processing
operations. The input data for this problem is matrix A which contains zeroes

and ones. The size of this matrix is m×p which means that it has m machines and
p parts. The element aij of the input matrix is equal to one if part j should be
processed on machine i. The objective is to minimize the number of zeroes inside
cells and the number of ones outside cells. There have been suggested several
objective functions which combine these two goals. The objective function which
provides a good combination of these goals and is widely accepted in literature
is the grouping eﬃcacy suggested by Kumar & Chandrasekharan (1990):

f =

nin
1

n1 + nin
0

→ max,

(1)

where n1 is the number of ones in the input matrix, nin
inside cells, nin

0 is the number of zeroes inside cells.

1 is the number of ones

The mathematical programming model for the CFP is the following (see also

Bychkov et al. (2014)).
Decision variables:

0

if machine i is assigned to cell k
otherwise

xik =(1
yjk =(1 if part j is assigned to cell k

0 otherwise

Objective function:

Constraints:

max

nin
1

n1 + nin
0

c

m

p

(2)

(3)

(4)

(5)

(6)

(7)

(8)

(9)

aij xikyjk

(1 − aij)xikyjk

nin

1 =

Xj=1
Xk=1
Xi=1
Xj=1
Xi=1
Xk=1

m

p

c

xik = 1 ∀i = 1, . . . , m

yjk = 1 ∀j = 1, . . . , p

nin

0 =

c

c

p

Xk=1
Xk=1
Xj=1
Xj=1

p

m

Xi=1
Xi=1

m

m

Xi=1
Xj=1

p

xikyjk ≥

xik ∀k = 1, . . . , c

xikyjk ≥

yjk ∀k = 1, . . . , c

(10)

Here c = min(m, p) is the maximum possible number of cells. Constrains (7) and
(8) require that every machine and every part is assigned to exactly one cell.
Constrains (9) and (10) require that there are no cells having only machines
without parts or only parts without machines.

3 Branch and bound algorithm

3.1 Branching

Because of the biclustering structure of the CFP our branching goes by two pa-
rameters. The suggested algorithm has branching on machines and parts sequen-
tially changing each other: machines-parts-machines-... We use vectors M (1×m)
and P (1 × p) for this purpose. Element Mi contains the cell to which machine
i is assigned and element Pj contains the cell to which part j is assigned. For
example M = [1231] and P = [11321] mean that cell 1 contains machines 1, 4 and
parts 1, 2, 5, cell 2 contains machine 2 and part 4, and cell 3 contains machine
3 and part 3.

Branching on machines makes changes in vector M . It starts from assigning
the ﬁrst machine to cell 1. Let k be the number of cells in the current partial
solution. When the algorithm branches on machines, it takes the ﬁrst machine
which is not assigned to any cell and tries to assign it to the existing cells with
numbers from 1 to k or creates a new cell (k + 1) for this machine.

Branching on parts makes changes in vector P . It starts with all zeroes inside
P which means that no parts are assigned to any cell. When the algorithm
branches on parts it takes the ﬁrst part which is not assigned to any cell and
tries to assign it to the existing cells from 1 to k or to a new cell (k + 1)∗ (star
means that the number of the cell can be k + 1 or greater) if there are some
unassigned machines which can be also added later to this new cell. We assume
that the number of parts is greater than the number of machines.

The algorithm branches on parts and machines successively. It starts with
M = [100 . . . 0] and P = [00 . . . 0]. Next it changes vector P , then - vector M
and so on. This way the algorithm builds the search tree. The leaves of the
search tree contain complete solutions and other nodes contain partial solutions.
The complete search tree depends only on the number of machines and parts. It
contains all feasible solutions as its leaves.

To provide an eﬃcient branching, before choosing a branch we calculate an
upper bound for each branch and choose the branch with the greatest value
of the upper bound. This branching strategy allows us to ﬁnd good solutions
earlier.

3.2 Upper bound

To obtain an upper bound for a given partial solution we relax the original CFP
problem and suggest a polynomial algorithm to calculate an optimal solution or
an upper bound for the relaxed problem. The relaxed problem is formulated as

follows. We are given a partial solution in which some of the machines and parts
are already assigned to some cells. For example in Table 1 machines 1, 2 with
parts 1, 2, 3, 4 are assigned to cell 1, and machine 3 with part 5 is assigned to
cell 2. The objective is to assign the remaining machines independently on each
other to the existing cells or to a new cell, and assign the remaining parts to
the existing cells taking into account only the rows already assigned in the given
partial solution. In the relaxed problem we allow an independent assignment
of machines and parts to cells. In this case the best assignment for machine 4
will be to put it to cell 1 with parts 1, 2, 3, 4, 7. This will bring 4 ones and 1
zero inside cells. The best assignment for machine 5 will be to put it to a new
cell 3 with parts 7, 8. This will bring 2 ones and 0 zeroes inside cells. The best
assignment for parts 6 and 7 which takes into account only rows 1, 2, 3 will be
to put it to cell 2 (with machine 3). The best assignment for part 8 which takes
into account only rows 1, 2, 3 will be to put it to cell 1 (with machines 1, 2).
This optimal solution for the relaxed problem is shown in Table 2. This solution
is infeasible for the original CFP problem because independent assignment of
machines and parts is allowed and as a result we obtain non-rectangular cells
which can also intersect by columns. Since it is an optimal solution to the relaxed
problem it provides an upper bound to the original problem. In our example for
the partial solution we have f = 8
≈ 0.36 and the solution of the relaxed
problem gives us an upper bound to the complete solution of the CFP equal to
U B = 8+10
21+1

≈ 0.82.

21+1

Table 1: A partial solution for the CFP

1 2 3 4 5 6 7 8
1 1 1 1 1 1 0 0 1
2 1 1 0 1 0 0 0 1
3 0 0 1 0 1 1 1 0
4 1 0 1 1 1 0 1 0
5 0 0 0 0 0 0 1 1

Table 2: Optimal solution for the relaxed CFP

1 2 3 4 5 6 7 8
1 1 1 1 1 1 0 0 1
2 1 1 0 1 0 0 0 1
3 0 0 1 0 1 1 1 0
4 1 0 1 1 1 0 1 0
5 0 0 0 0 0 0 1 1

In our example from Table 1 it is not obvious whether the chosen alternative
(a1, b1) = (4, 1) (putting 4 ones and 1 zero inside cells) is better than alterna-

tive (a2, b2) = (1, 0) for machine 3. To choose between two alternatives we use
CompareAlternatives function (see Algorithm 1). It returns the index (1 or
2) of the best alternative among two ones, −1 if it cannot choose between these
alternatives, or 0 if these two alternatives are equivalent. We do not provide the
proof of its correctness in this short paper.

Algorithm 1 Algorithm to choose between two alternatives

function CompareAlternatives(a1, b1, a2, b2, n1, n0, nin

1 , nin

0 , ¯nout

1

, ¯nout

0

, ni

1, ni

0)

∆a ← a2 − a1, ∆b ← b2 − b1
if (∆b = 0) then

if (∆a < 0) then

return 1

else if (∆a > 0) then

return 2

else

⊲ ∆b should be non-negative

return 0
1 , bc ← n1+nin

0 , bl ← bc, bu ← n1+n0−¯nout

0 −ni

0, l ←

ac
bc

, u ←

n1− ¯nout

1 −ni
bc

1

ac ← nin
if bl (cid:0)l − ∆a
return 1
if bu (cid:0)u − ∆a
return 2

∆b (cid:1) ≥ b1

∆a

∆b − a1 then

∆b (cid:1) ≤ b1

∆a

∆b − a1 then

return -1

Below we present a polynomial algorithm of calculating the suggested upper
bound as an optimal solution of the relaxed CFP problem, if we can always
choose the best alternative for every machine and part, or as an upper bound
to this solution otherwise. We illustrate the algorithm on the instance shown in
Table 3.

Table 3: Example for upper bound calculation

1 2 3 4 5 6 7 8 9
1 1 1 1 1 1 0 0 0 0
2 1 1 1 1 0 0 0 0 1
3 0 0 0 0 0 1 1 0 0
4 0 1 1 0 0 0 0 1 1
5 0 0 0 0 1 1 0 0 1

1. Calculate the number of ones nin

1 and zeroes nin
inside the cells of the
0
given partial solution and the number of ones ¯nout
and zeroes ¯nout
0 which
1
cannot get inside cells in any solution (see gray area (the gray area with
black zeroes on black-and-white printing) in Table 3). The total number of
ones n1 and zeroes n0 are constant. From these values we get the numerator

Table 4: Solution providing the upper bound

1 2 3 4 5 6 7 8 9
1 1 1 1 1 1 0 0 0 0
2 1 1 1 1 0 0 0 0 1
3 0 0 0 0 0 1 1 0 0
4 0 1 1 0 0 0 0 1 1
5 0 0 0 0 1 1 0 0 1

1 and the denominator bc = n1 + nin

ac = nin
current partial solution. For the example in Table 3 we have: nin
1, ¯nout

0 = 9, n1 = 19, n0 = 26, ac = 11, bc = 20.

0 for the eﬃcacy f = ac/bc of the
0 =

1 = 11, nin

1 = 0, ¯nout

2. For every unassigned machine (row) using Algorithm 1 we compare all pos-

sible alternatives of adding it to one of the existing cells or to a new cell.
For our example we have 3 alternatives for machine i = 4: 1) (4, 3) - add it to
cell 1 with parts 1, 2, 3, 4, 5, 8, 9 putting 4 ones and 3 zeroes inside this cell; 2)
(2, 2) - add it to cell 2 with parts 6, 7, 8, 9 putting 2 ones and 2 zeroes inside;
3) (2, 0) - add it to a new cell 3 with parts 8, 9 putting 2 ones and 0 zeroes
inside. Obviously alternative 3 is better than alternative 2. So we need to
compare only two alternatives (a1, b1) = (2, 0) and (a2, b2) = (4, 3). We have:
1 = 4, ni
ni
1)/bc =
15/20, bl = 20, bu = n1 + n0 − ¯nout
0 = 31. And the values we need to
apply Algorithm 1 are:

0 = 5, ∆a = 2, ∆b = 3, l = ac/bc = 11/20, u = (n1 − ¯nout

0 − ni

1 − ni

b1

∆a
∆b

− a1 = −2,

bl(cid:18)l −

∆a

∆b(cid:19) = −

7
3

,

bu(cid:18)u −

∆a

∆b(cid:19) =

31
12

So neither of the conditions in Algorithm 1 is satisﬁed and we cannot deter-
mine which alternative is better (Algorithm 1 returns −1). In this case we
build an alternative (max(a1, a2), min(b1, b2)), which is better than both in-
comparable alternatives, and use it to obtain an upper bound on the solution
of the relaxed CFP problem. In our example it is alternative (4, 0).
Now for machine i = 5 we have: ni
0 = 6, l = 11/20, u = 16/20, bl =
20, bu = 30. There are 3 alternatives (2, 4), (2, 1), and (1, 0). It is clear that
alternative (2, 4) is worse than (2, 1). For (a1, b1) = (1, 0) and (a2, b2) = (2, 1)
we have:

1 = 3, ni

b1

∆a
∆b

− a1 = −1,

bl(cid:18)l −

∆a

∆b(cid:19) = −9,

bu(cid:18)u −

∆a

∆b(cid:19) = −6

∆a
∆b

− a1 and Algorithm 1 returns alternative (a2, b2) =

So bu(cid:0)u − ∆a

∆b(cid:1) ≤ b1

(2, 1). Thus (2, 1) is the best alternative for machine 5.

3. For every unassigned part (column) in the same way using Algorithm 1 we
compare all possible alternatives of adding it to one of the existing cells or
leaving it unassigned. However in this case we take into account only ones
and zeroes which lie in the rows already assigned in the given partial solution

(blue area (the darkest area with white digits on black-and-white printing)
in Table 3).
In our example part 8 has only zeroes in this area and so it is better not to
add it to any cell. For part 9 (j = 9) we have 3 alternatives: 1) (1, 1) - add
it to cell 1 putting 1 one and 1 zero inside; 2) (0, 1) - add it to cell 2 putting
0 ones and 1 zero inside; 3) (0, 0) - do not add it to any cell. It is clear
that (0, 1) is a bad alternative and we need to compare only (a1, b1) = (0, 0)
and (a2, b2) = (1, 1). We have nj
0 = 2, l = ac/bc = 11/20, u =
(n1 − ¯nout
0 = 34. The
values needed to apply Algorithm 1 are:

1)/bc = 18/20, bl = 20, bu = n1 + n0 − ¯nout

1 = 1, nj

1 − nj

0 − nj

b1

∆a
∆b

− a1 = 0,

bl(cid:18)l −

∆a

∆b(cid:19) = −9,

bu(cid:18)u −

∆a

∆b(cid:19) = −3.4

− a1 and Algorithm 1 returns alternative (a2, b2) =

So bu(cid:0)u − ∆a

∆b(cid:1) ≤ b1

∆a
∆b

(1, 1) as the best alternative for part 9.

4. We calculate the upper bound by putting inside all the ones and zeroes
corresponding to the best alternatives chosen for all unassigned machines
and parts. For our example the corresponding solution which gives an upper
bound to the relaxed CFP problem (and thus to the original CFP problem
also) is shown in Table 4. For this example we have U B = 11+4+2+1
≈
0.86.

19+0+1+1 = 18

21

4 Results

The suggested branch and bound algorithm has been able to solve 21 of 35 pop-
ular benchmark instances from the literature exactly and to ﬁnd good solutions
for the remaining 14 instances. The results are presented in Table 5. All compu-
tations were run on Intel Core i7 with 16Gb RAM. Note that the algorithm was
run without any initial solution while in the results reported by Bychkov et al.
(2014) the best-known solutions were used as initial. The results show that the
developed algorithm is more eﬃcient than the approach suggested by Bychkov
et al. (2014).

5 Acknowledgment

This research is supported by Laboratory of Algorithms and Technologies for
Network Analysis, NRU HSE.

References

[2012]Arkat, J., Abdollahzadeh, H., Ghahve, H. (2012). A new branch and bound algo-
rithm for cell formation problem. Applied Mathematical Modelling, 36, 5091-5100.
[1987]Askin, R. G., Subramanian, S. P. (1987). A cost-based heuristic for group tech-
nology conﬁguration. International Journal of Production Research, 25(1), 101–113.

Table 5: Results

#

Name

Size

Best-
known
solution

f

Time, s

Bychkov et
al. (2014),
Time, s

0.63
5 × 7
1 King & Nakornchai (1982)
2.29
5 × 7
2 Waghodekar & Sahu (1984)
5.69
5 × 18
3 Seifoddini (1989)
1.86
6 × 8
4 Kusiak (1987)
9.14
7 × 11
5 Kusiak & Chow (1987)
5.15
7 × 11
6 Boctor (1991)
13.37
7 Seifoddini & Wolfe (1986)
8 × 12
18.33
8 Chandrasekharan & Rajagopalan (1986a) 8 × 20
208.36
9 Chandrasekharan & Rajagopalan (1986b) 10 × 10
6.25
10 × 15
10 Mosier & Taube (1985a)
2.93
10 × 15
11 Chan & Milner (1982)
259.19
12 Askin & Subramanian (1987)
14 × 24
259.19
14 × 24
13 Stanfel (1985)
b20829.38
16 × 24
14 McCormick et al. (1972)
b13719.99
16 × 30
15 Srinivasan et al. (1990)
b24930.93
16 × 43
16 King (1980)
b13250.01
17 Carrie (1973)
18 × 24
b43531.77
20 × 20
18 Mosier & Taube (1985b)
b33020.13
20 × 23
19 Kumar et al. (1986)
b11626.98
20 × 35
20 Carrie (1973)
b33322.08
21 Boe & Cheng (1991)
20 × 35
0.00
22 Chandrasekharan & Rajagopalan (1989) 24 × 40
b6916.24
23 Chandrasekharan & Rajagopalan (1989) 24 × 40
b14408.88
24 Chandrasekharan & Rajagopalan (1989) 24 × 40
b34524.47
25 Chandrasekharan & Rajagopalan (1989) 24 × 40
b41140.94
26 Chandrasekharan & Rajagopalan (1989) 24 × 40
b44126.76
27 Chandrasekharan & Rajagopalan (1989) 24 × 40
b22627.28
27 × 27
28 McCormick et al. (1972)
b71671.08
29 Carrie (1973)
28 × 46
b22594.20
30 × 41
30 Kumar & Vannelli (1987)
b31080.82
30 × 50
31 Stanfel (1985)
b48977.01
30 × 50
32 Stanfel (1985)
b99435.64
30 × 90
33 King & Nakornchai (1982)
b47744.04
34 McCormick et al. (1972)
37 × 53
b24167.76
35 Chandrasekharan & Rajagopalan (1987) 40 × 100
a The problem is not solved to optimality by our algorithm within the time limit of 100000 seconds.
b The problem is not solved to optimality by Bychkov et al. (2014). In this approach the problem is
divided into a number of IP subproblems and a time limit of 300 seconds is set for every subproblem.
c A greater value is reported in some papers on heuristics probably due to an incorrect input matrix.

0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.00
0.19
0.00
0.00
2.89
5.51
97117.43
837.93
7045.64
5668.25
100000.00
100000.00
88.62
100000.00
0.00
33.70
86007.93
100000.00
100000.00
100000.00
100000.00
100000.00
100000.00
100000.00
100000.00
100000.00
100000.00
100000.00

0.8235
0.6957
0.7959
0.7692
0.6087
0.7083
0.6944
0.8525
0.5872
0.7500
0.9200
0.7206
0.7183
0.5326
c0.6899
0.5753
0.5773
0.4345
0.5081
0.7791
0.5798
1.0000
0.8511
0.7351
0.5329
0.4895
0.4726
0.5482
0.4706
0.6331
0.6012
0.5083
0.4775
0.6064
0.8403

0.8235
0.6957
0.7959
0.7692
0.6087
0.7083
0.6944
0.8525
0.5872
0.7500
0.9200
0.7206
0.7183
0.5326
0.6899
0.5753
0.5773
a0.4211
a0.4697
0.7791
a0.5615
1.0000
0.8511
0.7351
a0.5185
a0.4648
a0.4468
a0.5017
a0.4569
a0.5942
a0.5789
a0.4860
a0.4684
a0.5680
a0.8403

[1987]Ballakur, A., & Steudel, H. J. (1987). A within cell utilization based heuristic
for designing cellular manufacturing systems. International Journal of Production
Research, 25, 639–655.

[1991]Boctor, F. F. (1991). A linear formulation of the machine-part cell formation

problem. International Journal of Production Research, 29(2), 343–356.

[1991]Boe, W., Cheng, C. H. (1991). A close neighbor algorithm for designing cellu-
lar manufacturing systems. International Journal of Production Research, 29(10),
2097–2116.

[2015]Brusco, J. M. (2015) An exact algorithm for maximizing grouping eﬃcacy in

partmachine clustering. IIE Transactions, 47:6, 653–671.

[1961]Burbidge, J. L. (1961). The new approach to production. Prod. Eng., December,

3–19.

[2008]Busygin, S., Prokopyev, O., Pardalos, P. M. (2008). Biclustering in data mining.

Computers & Operations Research 35(9), 2964–2987.

[2013]Bychkov, I., Batsyn, M., Sukhov, P., Pardalod, P.M.(2013) Heuristic Algorithm
for the Cell Formation Problem. In: Goldengorin B. I., Kalyagin V. A., Pardalos
P. M.(eds.) Models, Algorithms, and Technologies for Network Analysis. Springer
Proceedings in Mathematics & Statistics 59, 43–69.

[2014]Bychkov, I., Batsyn, M., Pardalos, P. (2014). Exact model for the cell formation

problem. Optimization Letters 8(8), 2203–2210.

[1973]Carrie, S. (1973). Numerical taxonomy applied to group technology and plant

layout. International Journal of Production Research, 11, 399–416.

[1982]Chan, H. M., Milner, D. A., (1982). Direct clustering algorithm for group forma-

tion in cellular manufacture. Journal of Manufacturing Systems 1 (1), 64–76.

[1986a]Chandrasekharan M. P., Rajagopalan R. (1986a). MODROC: an extension of
rank order clustering for group technology. International Journal of Production
Research, 24(5), 1221–1233.

[1986b]Chandrasekharan M. P., Rajagopalan R. (1986b). An ideal seed non-hierarchical
clustering algorithm for cellular manufacturing. International Journal of Production
Research, 24(2), 451–464.

[1987]Chandrasekharan, M. P., Rajagopalan, R. (1987). ZODIAC: An algorithm for
concurrent formation of part families and machine cells. International Journal of
Production Research, 25(6), 835–850.

[1989]Chandrasekharan, M. P., Rajagopalan, R. (1989). Groupability: Analysis of the
properties of binary data matrices for group technology. International Journal of
Production Research, 27(6), 1035–1052.

[2012]Elbenani, B., Ferland, J. A. (2012). Cell Formation Problem Solved Exactly with

the Dinkelbach Algorithm. Montreal, Quebec. CIRRELT-2012-07, 1–14.

[1925]Flanders, R. E., 1925. Design manufacture and production control of a standard

machine, Transactions of ASME, 46, 691–738.

[2013]Goldengorin, B., Krushinsky D., Pardalos, P. M. (2013). Cell Formation in In-
dustrial Engineering. Theory, Algorithms and Experiments. Springer Optimization
and Its Applications 79, 206 p.

[2004]Goncalves, J. F., Resende, M. G. C. (2004). An evolutionary algorithm for man-

ufacturing cell formation. Computers & Industrial Engineering 47, 247–273.

[2007]James, T. L., Brown, E. C., Keeling, K. B. (2007). A hybrid grouping genetic
algorithm for the cell formation problem. Computers & Operations Research, 34(7),
2059–2079.

[1980]King, J. R. (1980). Machine-component grouping in production ﬂow analysis: An
approach using a rank order clustering algorithm. International Journal of Produc-
tion Research, 18(2), 213–232.

[1982]King, J. R., Nakornchai, V. (1982). Machine-component group formation in group
technology: Review and extension. International Journal of Production Research,
20(2), 117–133.

[1986]Kumar, K. R., Kusiak, A., Vannelli, A. (1986). Grouping of parts and components
in ﬂexible manufacturing systems. European Journal of Operations Research, 24,
387–397.

[1990]Kumar, K. R., Chandrasekharan, M. P. (1990). Grouping eﬃcacy: A quantita-
tive criterion for goodness of block diagonal forms of binary matrices in group
technology. International Journal of Production Research, 28(2), 233–243.

[1987]Kumar, K. R., Vannelli, A. (1987). Strategic subcontracting for eﬃcient dis-
aggregated manufacturing. International Journal of Production Research, 25(12),
1715–1728.

[1987]Kusiak, A. (1987). The generalized group technology concept. International Jour-

nal of Production Research, 25(4), 561–569.

[1987]Kusiak, A., Chow, W. S. (1987). Eﬃcient solving of the group technology prob-

lem. Journal of Manufacturing Systems, 6(2), 117–124.

[1993]Kusiak, A., Boe,J. W., Cheng, C. (1993). Designing cellular manufacturing sys-

tems: branch-and-bound and A* approaches. IIE Transactions, 25:4, 46–56.

[1972]McCormick, W. T., Schweitzer, P. J., White, T. W. (1972). Problem decomposi-
tion and data reorganization by a clustering technique. Operations Research 20(5),
993–1009.

[1933]Mitrofanov, S. P. (1933). Nauchnye osnovy gruppovoy tekhnologii. Lenizdat,

Leningrad, Russia, 1933. 435 pages. (in Russian).

[1985a]Mosier, C. T., Taube, L. (1985a). The facets of group technology and their

impact on implementation, OMEGA, 13(6), 381–391.

[1985b]Mosier, C. T., Taube, L. (1985b). Weighted similarity measure heuristics for the

group technology machine clustering problem. OMEGA, 13(6), 577–583.

[2013]Paydar, M. M., Saidi-Mehrabad, M. (2013). A hybrid genetic-variable neighbor-
hood search algorithm for the cell formation problem based on grouping eﬃcacy.
Computers & Operations Research, 40(4), 980–990.

[1989]Seifoddini, H. (1989). A note on the similarity coeﬃcient method and the problem
of improper machine assignment in group technology applications. International
Journal of Production Research, 27(7), 1161–1165.

[1986]Seifoddini, H., Wolfe, P. M. (1986). Application of the similarity coeﬃcient

method in group technology. IIE Transactions, 18(3), 271–277.

[1998]Spiliopoulos, K., Soﬁanopoulou, S. (1998). An optimal tree search method for the
manufacturing systems cell formation problem. European Journal of Operational
Research, 105, 537–551.

[1990]Srinivasan, G., Narendran, T. T., Mahadevan, B. (1990). An assignment model
for the part-families problem in group technology. International Journal of Produc-
tion Research, 28(1), 145–152.

[1985]Stanfel, L. (1985). Machine clustering for economic production. Engineering

Costs and Production Economics, 9, 73–81.

[1984]Waghodekar, P. H., Sahu, S. (1984). Machine-component cell formation in group

technology MACE. International Journal of Production Research 22, 937–948.

[2015]Zilinskas, J., Goldengorin, B., Pardalos, P. M. (2015). Pareto-optimal front of
cell formation problem in group technology. Journal of Global Optimization 61(1),
91–108.

