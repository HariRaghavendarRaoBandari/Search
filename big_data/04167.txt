Computations in quantum mechanics made easy

H J Korsch1 and K Rapedius2
1 FB Physik, Universit¨at Kaiserslautern, D-67653 Kaiserslautern, Germany
2 Karlsruhe Institute of Technology (KIT), Adenauerring 2, D-76131 Karlsruhe,
Germany

E-mail: korsch@physik.uni-kl.de, kevin.rapedius@kit.edu

,

Abstract. Convenient and simple numerical techniques for performing quantum
computations based on matrix representations of Hilbert space operators are presented
and illustrated by various examples. The applications include the calculations of
spectral and dynamical properties for one-dimensional and two-dimensional single-
particle systems as well as bosonic many-particle and open quantum systems. Due to
their technical simplicity these methods are well suited as a tool for teaching quantum
mechanics to undergraduates and graduates. Explicit implementations of the presented
numerical methods in Matlab are given.

Submitted to: Eur. J. Phys.

1. Introduction

In [1] it was shown how to calculate the spectra of one-dimensional quantum systems in a
simple, convenient and eﬀective way by means of matrix representations of Hilbert space
operators. Here we extend these techniques in various ways including the computation
of dynamical properties as well applications to higher dimensional systems, bosonic
many-particle and open quantum systems.

6
1
0
2

 
r
a

 

M
4
1

 
 
]
h
p
-
t
n
a
u
q
[
 
 

1
v
7
6
1
4
0

.

3
0
6
1
:
v
i
X
r
a

As discussed in [1] the basic building blocks for the discrete matrix representation
of operators used in the following programs are the operators ˆa and ˆa†, well known from
the harmonic oscillator, where they act as ladder operators on the harmonic oscillator
eigenstates |n(cid:105), n = 0, 1, 2, . . . :

√

ˆa|n + 1(cid:105) =

n + 1|n(cid:105) , ˆa†|n(cid:105) =

n + 1|n + 1(cid:105) , ˆa†ˆa|n(cid:105) = n|n(cid:105) .

(1)

√

Motivated, e.g., by the application to the radiation ﬁeld described by harmonic
oscillators with frequency ω0 these operators create or annihilate a photon of this
frequency or, more generally, a bosonic particle in second quantization. Therefore these

Computations in quantum mechanics made easy

2

operators are also known as creation and annihilation operators. Here we will mainly
use the matrix representation of these operators in the harmonic oscillator basis:



0
0
0
0
...

ˆa =

√

1
0
0
0
...

√
0
2
0
0
...

0
. . .
√
0
. . .
3 . . .
0
. . .
...
. . .

 .

(2)

(3)

As an introduction to the numerical applications presented below, the following short
Matlab code shows the construction of these matrices and their application to a basis
vector

N = 4; Np=N+1; n = 1:N;
a = diag(sqrt(1:N),1); ad=a’;
n = [0 0 1 0 0]’;
a*n; ad*n; ad*a*n

where the properties (1) can be tested. It should be noted, however, that such numerical
matrix representations are necessarily ﬁnite, which causes numerical errors. The reader
may try for example to test the validity of the commutation relation [ˆa, ˆa†] = 1
numerically or to construct the eigenstates of the annihilation operator ˆa, the coherent
states, numerically. In many cases these ﬁnite size errors can be reduced by increasing
the matrix size.

In addition, we will use the representation of the position and momentum operators

ˆx = s√

2

(ˆa† + ˆa) ,

√
ˆp = i
s

2

(ˆa† − ˆa)

where the scaling parameter is chosen as s = 1 in the following (see [1] for details).
These matrix representations of operators can now be used to construct in a simple way
matrix representations of other operators, such as the Hamiltonian or time-evolution
operators.

This paper is organized as follows: In section 2 we brieﬂy review the calculation
of quantum eigenvalues for one-dimensional systems [1] and extend the analysis to
time-dependent calculations. The example applications include Bloch-oscillations in a
tilted periodic lattice. Section 3 illustrates the use of matrix representation for angular
momentum operators.
In section 4 it is shown how to calculate the spectrum of a
two-dimensional quantum system. Applications to bosonic many-particle systems are
illustrated in section 5 by means of the Bose-Hubbard model. Finally, the dynamics
of an open quantum system described by a Lindblad master equation is calculated in
section 6.

2. One-dimensional systems

As a ﬁrst example we consider the calculation of bound state energies for a single particle
in a one-dimensional potential described by the Hamiltonian

ˆH =

ˆp2
2m

+ V (ˆx) ,

(4)

Computations in quantum mechanics made easy

3

which has already been discussed in [1] for harmonic and quartic potentials. There
a simple program code can be found for computing the eigenvalues and, in addition,
also the corresponding wave functions. As an introduction we also list this code here,
however for a simple double-well potential

V (x) =

(|x| − x0)2 ,

(5)

1
2

a potential with harmonic minima at ±x0 separated by a barrier of height x2
In the program code

0/2 at x = 0.

1/sqrt(2)*(diag(m,-1)+diag(m,1));

N = 100; n = 1:N-1; x0 = 2.5;
m = sqrt(n);
x =
p = i/sqrt(2)*(diag(m,-1)-diag(m,1));
H = p^2/2+(sqrtm(x^2)-x0*eye(N))^2/2;
E = sort(eig(H)); E(1:8)

where  and the particle mass m are chosen as unity and x0 = 2.5.
In addition it
should be noted that the matrix function |x| has been generated by taking the square
x^2 followed by the Matlab matrix function sqrtm(x^2). The output of the program
is a listing of the ﬁrst eight energy eigenvalues En, n = 0, . . . , 7, where the eigenvalues
below the potential barrier are arranged in doublets. Let us have a brief look at the
time dynamics for an initial state chosen as the ground state of the right potential well.
This can be achieved by adding the lines

H1 = p^2/2 + (x-x0*eye(N))^2/2;
[V,Eig] = eig(H1);
psi = V(:,1);
tstep = 20; t(1) = 0; xav(1) = psi’*x*psi;
U = expm(-i*H*tstep);
for nt=1:400

t(nt+1) = t(nt)+tstep;
psi = U*psi;
xav(nt+1) = psi’*x*psi;

end
plot(t,xav); set(gca,’Fontsize’,20)
xlabel(’t’,’FontSize’,24); ylabel(’<x>’,’Rotation’,0,’FontSize’,24);
hold on
plot(t,x0*cos((E(2)-E(1))*t),’*r’)

to the program above. Then the time evolution operator ˆU = exp−i ˆH∆t/ is used
to propagate the wave function over a sequence of 80 time steps ∆t = 20. At each
step the expectation value (cid:104)ˆx(cid:105) is computed and ﬁnally plotted as a function of time in
comparison with the approximation x(t) = x0 cos((E1 − E0)t) as shown in ﬁgure 1.

As a second application let us consider an extended one-dimensional system, a

particle in a periodic potential V0(x + d) = V0(x) accelerated by a constant force F :

V (x) = V0(x) + F x

(6)

In the tight-binding approximation, the Hamiltonian is expressed in terms of the
Wannier states |n(cid:105) of the lowest band of the periodic potential, which are localized

Computations in quantum mechanics made easy

4

Figure 1. Double well potential: Expectation value (cid:104)ˆx(cid:105) as a function of time
for a Gaussian wave packet initially at the right well (blue line) compared to the
approximation x(t) (red stars).

at the potential minima numbered by n. Taking only transitions between neighboring
wells into account, the tight-binding Hamiltonian reads

(cid:88)

n

ˆH =

( + dF n)|n(cid:105)(cid:104)n| − ∆
4

(|n + 1(cid:105)(cid:104)n| + |n(cid:105)(cid:104)n + 1| )

(7)

(see, e.g., [2] and references therein), where  is the band energy and ∆ is the bandwidth.
For F = 0 we have an almost free motion with quasimomentum κ for energies inside
2 cos κ, whereas for F (cid:54)= 0 the particle is, contrary to a naive
the band E(κ) =  + δ
expectation, conﬁned to a ﬁnite region in space performing an oscillatory motion with a
period TB = 2π/dF , the so-called Bloch period. This is closely related to the fact that
the Hamiltonian possesses the equidistant eigenvalues En =  + dF n, n = 0,±1,±2, . . . .
This Bloch oscillation is illustrated by the following program for F = 0.005, d = 2π,
∆ = 1,  = 1 and an array extending from n = −60 to n = 60.

d = 2*pi; F = 0.005; Delta = 1;
nmax = 60; nmin = -60;
n = nmin:nmax; nn = length(n);
m = ones(1,nn-1);
H = d*F*diag(n,0)+(Delta/4)*(diag(m,-1)+diag(m,1));

The matrix representation of the Hamiltonian (7) in the basis |n(cid:105) is tridiagonal. Its
construction is very similar to the one used for the x matrix in the program above.
Here, however, there are also non-vanishing entries along the diagonal and the other
matrix elements are constant. The interested reader can easily calculate the eigenvalues
of this Hamiltonian numerically and compare with the analytical result given above.
This will show that the results agree with the exception of the regions close to the
boundary of the ﬁnite n-array, where the numerical values are not yet converged. In the
following we will study the time evolution of an initial wave packet. We ﬁrst consider
a wave packet, localized initially at site n = 0, which is propagated over N = 2 Bloch
periods, each one is discretized by J = 80 time steps:

02000400060008000−4−2024t<x>  Computations in quantum mechanics made easy

5

% initial state (gaussian)
psi = 0*n; psi(-nmin+1) = 1; % initial state (localized)
% time propagation (N Bloch periods, J steps each)
J = 80; N = 2;
Psi = zeros(nn,N*J+1);
Psi(:,1) = psi;
U = expm(-i*H*2*pi/d/F/J);
for nt = 1:N*J

Psi(:,nt+1) = U*Psi(:,nt);

end
t = 0:N*J; t = t/J;
imagesc(t,n,abs(Psi))
set(gca,’ydir’,’normal’,’FontSize’,20)
xlabel(’t/T_B’,’FontSize’,20)
ylabel(’n’,’rotation’,0,’FontSize’,20)

Figure 2. Bloch oscillation: Breathing (left) and oscillatory mode (right) for an
initially narrow or extended distribution [2].

The resulting wave function ψn(t) is plotted as a color map in the left panel of ﬁgure
2. This is a breathing mode, where the wave packet oscillates periodically in the region
|n| < ∆
dF | sin πt/TB| (see [2] for more information). If a broad initial wave function is
chosen, the dynamics changes. For example an initial Gaussian distribution, realized in
the program by replacing the line marked as initial state (localized) by the lines

sig = 0.005; phi0 = pi/2;
psi = exp(-sig*n.^2+i*n*phi0)’;
psi = psi/sqrt(sum(abs(psi).^2));

leads to an oscillating mode as shown in the right panel of ﬁgure 2 known as the Bloch
oscillation.

Most remarkably, such a Bloch oscillation leads to an almost dispersionless directed
transport during the ﬁrst quarter of the Bloch period. Then the motion continues in the
opposite direction, which suggests that we can prevent this backward motion by a ﬂip
of the ﬁeld direction at this time. Continuing this process periodically, one can expect

t/TBn00.511.52−60−40−200204060t/TBn00.511.52−60−40−200204060Computations in quantum mechanics made easy

6

a directed dispersionless transport. To study such a ﬁeld-ﬂip system numerically, we
ﬁrst replace the second line in the program above by nmax = 160;nmin = -40; and the
Hamiltonian H by the two lines

Hp =+d*F*diag(n,0)+(Delta/4)*(diag(m,-1)+diag(m,1));
Hm =-d*F*diag(n,0)+(Delta/4)*(diag(m,-1)+diag(m,1));

deﬁning Hamiltonians with diﬀerent signs of F . As an initial state, a Gaussian is chosen
and, for the time-propagation, the corresponding time-evolution operators are deﬁned,
which are then applied alternately during the subsequent Bloch periods:

Up = expm(-i*Hp*2*pi/d/F/J);
Um = expm(-i*Hm*2*pi/d/F/J);
nn = 0;
for nb = 1:2*N

for nt = 1:J/4

nn = nn+1;
Psi(:,nn+1) = Up*Psi(:,nn);

end
for nt = 1:J/4

nn = nn+1;
Psi(:,nn+1) = Um*Psi(:,nn);

end

end

The resulting dynamics shown in ﬁgure 3 agrees with our conjecture. Most remarkably,
however, one can show that the transport velocity is given by v = ∆d/π, which is
independent of the force F [2].

Figure 3. Bloch oscillation: Directed almost dispersionless transport for a ﬁeld ﬂipped
periodically with twice the Bloch frequency.

3. Angular momentum operators

In a similar manner one can construct the matrix representation of the angular
momentum operators ˆJx, ˆJy, ˆJz in the basis of eigenstates |j, m(cid:105) of the operator ˆJz

t/TBn00.511.52050100150Computations in quantum mechanics made easy
7
with eigenvalues m = −j, −j + 1, . . . , +j, where j ≥ 0 is the total angular momentum,
2. First we construct the ladder operators ˆJ+ and
which is an even or odd multiple of 1
†
ˆJ− = ˆJ

+ with ˆJ+|j, m(cid:105) =(cid:112)j(j + 1) − m(m + 1)|j, m+1(cid:105) and the relations

ˆJx = 1

2 ( ˆJ− + ˆJ+) ,

ˆJy = i

2 ( ˆJ− − ˆJ+) ,

ˆJz = 1

2[ ˆJ+, ˆJ−]

(8)

coded in the following program lines for j = 2:

j = 2; m = -j:j-1;
Jp = diag(sqrt(j*(j+1)-m.*(m+1)),1); Jm = Jp’;
Jx = (Jm+Jp)/2;
Jy = -i*(Jm-Jp)/2;
Jz = (Jp*Jm-Jm*Jp)/2;

If desired, one can check here the angular momentum commutation relations [ ˆJx, ˆJy] =
i ˆJz by means of Jx*Jy-Jy*Jx-i*Jz, which should yield the zero matrix. As an
application, one can calculate the energy eigenvalues of the rigid body Hamiltonian
( = 1)

ˆH =

ˆJ 2
x
2Ix

+

ˆJ 2
y
2Iy

+

ˆJ 2
z
2Iz

,

(9)

where the Ix, Iy and Iz are the principal moments of inertia. For a symmetric top, the
eigenvalues of the Hamiltonian are well known, namely

(cid:16) 1

(cid:17)

− 1
2Ix

j(j + 1)

+

Ejk =

(10)
for Ix = Iy (cid:54)= Iz. For an asymmetric top, however, the eigenvalues for the special cases
j = 1, 2, 3 are given in [3], but no general formula exists. This motivates, of course, a
numerical approach, which is achieved by adding the program lines

2Ix

2Iz

k2 ,

k = −j, . . . , j

Ix = 1/3; Iy = 1/2; Iz = 1;
H = Jx^2/2/Ix+Jy^2/2/Iy+Jz^2/2/Iz;
E = eig(H)’

in order to calculate the energy eigenvalues of an asymmetric top with Ix = 1/3,
Iy = 1/2 and Iz = 1 for j = 2. Note, however, that for this system body-ﬁxed angular
momenta must be used with commutation relations [ ˆJx, ˆJy] = −i ˆJz (see, e.g., [3,4] for an
explanation). This can be achieved by changing the sign of the matrix representing ˆJy.
This subtlety does not aﬀect the eigenvalues of the Hamiltonian (9) because it depends
only of the squares of the operators. The numerical eigenvalues
7.7321

6.0000

E = 4.2679

7.5000
given by the program agree with the formulas in [3]:

4.5000

E1 =

2
Iz

+

1
2Ix

E4,5 =

1
Ix

+

1
Iy

+

+

1
2Iy
±

1
Iz

, E2 =

(cid:115)(cid:16) 1

2
Iy

+

1
2Iz

+

1
Iy

+

1
Iz

Ix

+

1
2Ix

(cid:17)2 − 3
(cid:16) 1

, E3 =

2
Ix

+

1
2Iy

+

1
IyIz

+

1

IzIx

IxIy

+

(cid:17)

1
2Iz

,

.

(11)

Such a small value as j = 2 is, of course, not a challenge for a computational
treatment. The interested reader may try, for instance, the larger angular momentum

Computations in quantum mechanics made easy

8

Figure 4. Asymmetric top: Histogram of the density of energy eigenvalues for
rotational momentum j = 1000 showing a pronounced spike at the classical energy
at the saddle point of the energy surface.

x
2Ix

+ J 2
z
2Iz

+ J 2
y
2Iy

j = 1000 and analyze the distribution of the eigenvalues by plotting the state density
via hist(E/j^2,50). The resulting distribution in ﬁgure 4 shows a clear restriction to
an energy interval and a pronounced maximum. This structure can be understood by
the observation that for large angular momentum the system behaves almost classically.
Here the classical dynamics is restricted to a sphere with constant angular momentum
| (cid:126)J | = j and the energy function H = J 2
possesses two minima, two maxima
and two saddle points on the angular momentum sphere. For the parameters used in
the program, the energy at the minima is Emin/j2 = 1/(2Iz) = 0.5, at the maxima
Emax/j2 = 1/(2Ix) = 1.5, and at the saddle point Esad/j2 = 1/(2Iy) = 1. This
explains the restriction of the quantum energy eigenvalues to the classically allowed
region Emin < E < Emax. Furthermore, the quantum state density at the extrema is
approximately equal to the period of the classical orbits divided by 2π, which explains
the spike in the ﬁgure at the location of saddle point energy because the period at the
saddle point is inﬁnite. Note that for j → ∞ the quantum density also diverges at the
saddle point energy. An additional application of the angular momentum operators can
be found in section 5 below.

4. Two-dimensional systems

For a particle bound in a two-dimensional potential, the Hamiltonian

ˆH =

ˆp2
1
2m

+

ˆp2
2
2m

+ ˆV (ˆx1, ˆx2) ,

(12)

can be conveniently expressed in the way described above by means of the tensor
product, i.e. the Kronecker product kron provided by Matlab . Denoting the position
operator for one degree of freedom as ˆx and the corresponding identity operator as ˆI,
the position operator for the two particles are ˆx1 = ˆx ⊗ ˆI and ˆx2 = ˆI ⊗ ˆx. The same

0.511.5020406080100E/j2∆ N/∆ EComputations in quantum mechanics made easy

9

expressions appear for the momentum operators.

As an example the program described below computes the lowest energy eigenvalues

for the Pullen-Edmonds potential [5]
2x2

V (x1, x2) = 1

1 + 1

2x2

2 + αx2

1x2
2

(13)

for α = 0.5. This potential has been employed in a number of studies related to
quantum chaos and also found applications to various molecular systems. The symmetry
group of the Hamiltonian is C4v and the eigenstates can be classiﬁed by the irreducible
representation A1,2, B1,2 and E [5]. The wave functions with symmetry A1 or B2 are
symmetric if x1 and x2 are interchanged, those with A2 or B1 symmetry antisymmetric.
If, on the other hand, the xj are changed to −xj, the A1 or B1 wave functions are
unaﬀected and the A2 or B2 wave functions change sign.
In a harmonic oscillator
expansion

∞(cid:88)

ϕ(x1, x2) =

Cnmϕn(x1)ϕm(x2)

(14)

n,m=0

the coeﬃcients satisfy Cnm = Cmn for A1 or B2 and Cnm = −Cmn for A2 or B1. In
addition only coeﬃcients with even indices appear for A1 or B1 and only coeﬃcients
with odd indices for for A2 or B2. The states with E symmetry are twofold degenerate.
The following program generates the one-dimensional operators as N × N matrices and
constructs the Hamiltonian as N 2 × N 2 matrices using the tensor product as described
above. The ﬁrst nout eigenvalues are displayed on the screen and the wave function of
state number nplot is ﬁnally plotted.

N = 10; nout = 6; nplot = 4;
m = sqrt(1:N-1); md = diag(m,-1);
x = 1/sqrt(2)*(md + md’);
p = i/sqrt(2)*(md - md’);
I = eye(N);
x1 = kron(x,I); x2 = kron(I,x); p1 = kron(p,I); p2 = kron(I,p);
alpha = 0.5;
H = p1^2/2+p2^2/2+x1^2/2+x2^2/2+alpha*x1^2*x2^2;
[C,Eig] = eig(H);
format short
E = diag(Eig)(1:nout)’

2.2634

2.2634

This resulting eigenvalues
1.0980
agree very well with those given in [6] for the ground state energies with A1, E, B1 and
B2 symmetry:
1.0980

3.2791

3.7214

3.2789

3.7223

2.2634

3.5157

In order to identify the symmetry of the states calculated numerically, the matrix of the
expansion coeﬃcients is displayed by means of

format bank
Cplot = reshape(C(:,nplot),N,N)

Computations in quantum mechanics made easy

10

for the state N with energy 3.27914, whose wave function is subsequently plotted. One
observes indeed that for this state the matrix is antisymmetric and that all entries
with odd indices vanish as required for a symmetry B1. This symmetry is, of course,
also visible if the wave function ϕ(x1, x2) is explicitly calculated and plotted as a
color map. The following program lines ﬁrst compute the one-dimensional harmonic
oscillator wave functions ϕn(x) iteratively which are then stored in the matrix hermval
as described in [1]. Finally the expansion (14) is carried out as the scalar product
psi = hermval*Cplot*hermval’ and plotted:

xx = -4:0.05:4;
Nx = length(xx);
hermval = zeros(Nx,N);
h0 = [1];
hermval(:,1) = polyval(h0,xx).*exp(-0.5*xx.^2);
h1 = [sqrt(2) 0];
hermval(:,2) = polyval(h1,xx).*exp(-0.5*xx.^2);
v1 = [1 0]; v0 = [0 0 1];
for n = 2:N-1 % recursion

h2 = sqrt(2/n)*conv(h1,v1)-sqrt(1-1/n)*conv(h0,v0);
h0 = h1; h1 = h2;
hermval(:,n) = polyval(h2,xx).*exp(-0.5*xx.^2);

end
psi = hermval*Cplot*hermval’;
imagesc(xx,xx,psi); axis square;
set(gca,’Fontsize’,20)
xlabel(’x’,’FontSize’,24); ylabel(’y’,’Rotation’,0,’FontSize’,24);

For more pictures of Pullen-Edmonds eigenfunctions see, e.g., [7].

Figure 5. Pullen-Edmonds potential: Color map of the wave function of the lowest
eigenstate with symmetry B1.

xy−4−2024−4−2024Computations in quantum mechanics made easy

11

5. Many-particle systems

ˆH = (ˆa

1ˆa1 − ˆa
†

†
2ˆa2) + v(ˆa

†
1ˆa2 + ˆa

†
2ˆa1) + c(ˆa

1ˆa1 − ˆa
†

†
2ˆa2)2 ,

n with [ˆan, ˆa†

A prominent example of a many-particle quantum system is the N -particle Bose-
Hubbard system [8], which is one of the basic models studied in theoretical investigations
of the dynamics of many particles on a lattice. Numbering the lattice sites by n, the
operators ˆan and ˆa†
n] = 1 describe annihilation and creation of a particle at
site n and ˆa†
nˆan is the particle number operator at site n. These operators for diﬀerent
†
n+1ˆan describe the destruction of a
sites commute. Then the hermitian operators ˆa
†
particle at site n and the creation at site n + 1, and ˆa†
n+1ˆan the hopping of
a particle between these sites. If the particles interact with each other the interaction
energy is proportional to the product of the particle number operators. In many cases
this interaction is short ranged, so that only the interaction of particles on the same
site must be taken into account. Let us conﬁne ourselves here to the simple case of a
two-site system, the Bose-Hubbard dimer, with Hamiltonian

nˆan+1 + ˆa

(15)
where ± are the site energies, v the hopping and c the interaction strength. The
†
Hamiltonian commutes with the particle number operator ˆN = ˆa
2ˆa2, i.e. the
particle number N is conserved.

†
1ˆa1 + ˆa

It is of interest to realize that the Bose-Hubbard dimer also appears naturally for a
collection of N bosonic atoms in a double-well potential, which is deep enough so that
only the lowest state in each well is populated. In this two-mode approximation the
system can be described by the Hamiltonian (15).

The following Matlab program calculates the eigenvalues of the Hamiltonian (15).
First the creation and annihilation operators at the two sites are constructed by means
of the kron product as well as the Hamiltonian, whose eigenvalues and eigenstates are
then calculated for N = 24, i.e. a matrix dimension of Np = N + 1 = 25 for the single
particle operators ˆa:

N = 24; Np = N+1; Nout = 10; epsilon = 1; v = 1; c = 1;
a = diag(sqrt(1:N),1); ad = a’; I = eye(Np);
a1 = kron(a,I); ad1 = a1’;
a2 = kron(I,a); ad2 = a2’;
H = epsilon*(ad1*a1-ad2*a2)+v*(ad1*a2+ad2*a1)+c/2*(ad1*a1-ad2*a2)^2;
[C,E] = eig(H); E = diag(E);

p matrices and therefore one obtains N 2

One should be aware of the fact that the many-particle operators are represented by
p × N 2
N 2
p = 625 energy eigenvalues, however
not all of them are fully converged because of the restricted basis set |n1, n2(cid:105), n1,2 =
0, 1, . . . , N . All eigenstates populating only this restricted basis set are accurately
represented, i.e. those with particle numbers up to N , a number of Np(Np + 1)/2 states.
To illustrate this, the following program lines compute for all calculated eigenstates the
expectation values (cid:104) ˆN(cid:105) of the number operator, which agree with the exact particle
number for the eigenstates because ˆH and ˆN commute. These values are subsequently
ordered. There are N(cid:48) + 1 eigenstates for each value of N(cid:48) = (cid:104) ˆN(cid:105) ≤ N , and therefore a
total number of Np(Np + 1)/2, which are converged for the chosen basis size Np. Finally
the converged energy eigenvalues are plotted as a function of the particle number N(cid:48).

Computations in quantum mechanics made easy

12

Nav = diag(C’*(ad1*a1+ad2*a2)*C);
[Nav,index] = sort(Nav);
E = E(index);
plot(Nav(1:Np*(Np+1)/2),E(1:Np*(Np+1)/2),’b*’)
set(gca,’ydir’,’normal’,’FontSize’,20); axis([0 25 -50 350])
xlabel(’<N>’,’FontSize’,20); ylabel(’E_n’,’rotation’,0,’FontSize’,20)

Figure 6. Bose-Hubbard dimer: Energy eigenvalues as a function of the particle
number N .

In many applications, one is only interested in the eigenvalues and eigenstates of
the Hamiltonian for a prescribed value N of the particle number. Then one can make
use of the following trick: An extra term −λ(ˆa
2ˆa2 − N ) (λ (cid:29) , v) is added to
†
the Hamiltonian which does not aﬀect the states with the given particle number N but
which shifts the states with diﬀerent particle numbers to high energies. The desired
eigenvalues can then be obtained by extracting the low-energy part of the spectrum of
the resulting eﬀective Hamiltonian as implemented in the following program:

†
1ˆa1 + ˆa

N = 6; Np = N+1;
epsilon = 1; v = 1; c = 1;
a = diag(sqrt(1:Np-1),1); ad = a’; I = eye(Np);
a1 = kron(a,I); ad1 = a1’;
a2 = kron(I,a); ad2 = a2’;
H = epsilon*(ad1*a1-ad2*a2)+v*(ad1*a2+ad2*a1)+c/2*(ad1*a1-ad2*a2)^2;
% extraction of eigenvalues for particle number N
lambda = 10000;
H1 = H-lambda.*(ad1*a1+ad2*a2-N*kron(I,I));
E1 = eig(H1);
% filtering in two steps
E2 = E1.*(abs(E1)<10*epsilon.*N);
E = E2(find(E2))’

Calculated are the seven eigenvalues for N = 6 with the result

E = -4.792349 0.078611 4.347781 6.348595 12.731351 12.786011 24.500000

05101520250100200300<N>EnComputations in quantum mechanics made easy

13

A more sophisticated alternative method leading to the same results for the
eigenvalues consists in computing the Hamiltonian ˆHN for a ﬁxed particle number
N by projecting the original Hamiltonian ˆH on the corresponding eigenstates of the
†
number operator ˆa
2ˆa2. Since the latter is a represented by a diagonal matrix, the
implementation is rather straightforward:

†
1ˆa1 + ˆa

N_op = ad1*a1+ad2*a2;
iN=find(abs(diag(N_op)-N)<10^-6);
N_p=N_op(:,iN)./N;
H_N = N_p’*H*N_p;
E = eig(H_N)

For the Bose-Hubbard dimer, there is, however, a much more convenient way to
describe the system for a ﬁxed particle number N . The Jordan-Schwinger representation

ˆJx = (ˆa
ˆJy = (ˆa
ˆJz = (ˆa

†
†
2ˆa1)/2,
1ˆa2 + ˆa
1ˆa2 − ˆa
†
†
2ˆa1)/2i,
1ˆa1 − ˆa
†
†
2ˆa2)/2

(16)

transforms the system to angular momentum operators. The Hamiltonian (15) then
takes the form

ˆH = 2 ˆJz + 2v ˆJx + 2c ˆJ 2

(17)
and the total angular momentum is ˆJ = ˆN /2. Using the matrix representation of
angular momentum operators discussed in section 3, this Hamiltonian can be easily
coded in the following Matlab program:

z

N = 6; j = N/2; m = -j:j-1;
Jp = diag(sqrt(j*(j+1)-m.*(m+1)),1);
Jm = Jp’;
Jx = (Jm+Jp)/2;
Jy = i*(Jm-Jp)/2;
Jz = (Jp*Jm-Jm*Jp)/2;
epsilon = 1; v = 1; c = 1;
H = 2*epsilon*Jz+2*v*Jx+2*c*Jz^2;
E = eig(H)’

The results agree precisely with those given above for N = 6.

In the case of high matrix dimensions time and memory can be saved by using
In Matlab this can be implemented straightforwardly, e.g. the
sparse matrices.
sparse matrix representation of the annihilation operator and the identity in an
N + 1-dimensional space are given by a = sparse(diag(sqrt(1:N),1)) and I =
speye(N+1) respectively. This automatically leads to a sparse matrix representation
of the Hamiltonian ˆH. This already becomes relevant if the Bose-Hubbard dimer is
extended by an additional site. Such a Bose-Hubbard trimer, as described by the
Hamiltonian

eiΦ/3 ˆa

†
j+1ˆaj + e−iΦ/3 ˆa

†
jˆaj+1

+

U
2

†
jˆa

†
jˆajˆaj

ˆa

(18)

(cid:104) − K

(cid:16)

2

3(cid:88)

j=1

ˆH =

(cid:17)

(cid:105)

Computations in quantum mechanics made easy

14

was considered in [9]. Here we identify site number 4 with site number 1, i.e. the three
sites form a triangular structure which constitutes a minimal model for a superﬂuid
circuit of a Bose-Einstein condensate. The additional phase factors in the hopping term
describe the inﬂuence of an applied magnetic ﬂux Φ (in scaled dimensionless units) or
alternatively a rotation of the system with a frequency Ω ∝ Φ (see [9] for more details).
The following program computes the eigenvalues En, eigenstates |n(cid:105) and the
expectation values of the current Jn = (cid:104)n| ˆJ|n(cid:105) = (cid:104)n| ∂ ˆH

∂Φ|n(cid:105) and plots the results:

ND = 3*10+3; N = ND-1
K = 1; Phi = 0.8*pi; u = 0.5
U = K*u/N
u_qm = 3*u/N.^2
a = sparse(diag(sqrt(1:ND-1),1)); ad = a’; I=speye(ND);
a1 = kron(kron(a,I),I); ad1 = a1’;
a2 = kron(kron(I,a),I); ad2 = a2’;
a3 = kron(kron(I,I),a); ad3 = a3’;
N_op = ad1*a1+ad2*a2+ad3*a3;
iN = find(abs(diag(N_op)-N)<10^-6);
N_p = N_op(:,iN)./N;
H = -K/2*(exp(i*Phi/3)*(ad2*a1+ad3*a2+ad1*a3) ...

+exp(-i*Phi/3)*(ad1*a2+ad3*a1+ad2*a3)) ...
+U/2*(ad1^2*a1^2+ad2^2*a2^2+ad3^2*a3^2);

H_N = N_p’*H*N_p;
[C,E] = eig(full(H_N)); E = diag(E)/u;
dH_dPhi = -K/2*(-i/3*exp(i*Phi/3)*(ad2*a1+ad3*a2+ad1*a3) ...

+i/3*exp(-i*Phi/3)*(ad1*a2+ad3*a1+ad2*a3));

dH_dPhi_N = N_p’*dH_dPhi*N_p;
Jav = real(diag(C’*dH_dPhi_N*C));
plot(Jav,E,’o’,’markerfacecolor’,’r’,’markeredgecolor’,’r’)
set(gca,’ydir’,’normal’,’FontSize’,20);
xlabel(’<J>’,’FontSize’,20); ylabel(’E_n/u’,’rotation’,90,’FontSize’,20)
axis square

(depending on the Matlab version used it may be required to replace eig(H_N) by
eig(full(H_N)).)

Figure 7 shows the distribution of the eigenstates with respect to the eigenenergies
and the currents. For noninteracting particles, u = U N/K = 0, the current ˆJ commutes
with the Hamiltonian and each eigenstate carries a quantized current, forming a triangle
in the energy-current plane as explained in [9]. For an integer ﬁlling N = 30 = 10 · 3
of the trimer, the eigenstates are more and more redistributed along the line indicating
zero current with increasing interaction u. In the high interaction limit, even the ground
state becomes a zero current and thus an insulator state. This is a signature of a so-
called superﬂuid to Mott insulator transition, illustrated by the ﬁrst four panels.
In
contrast, for a non-integer ﬁlling per site the ground state always carries a current even
in the strong interaction limit as shown for N = 31 and N = 32 in the last two panels.
More about the rich behavior of this three site Bose-Hubbard system can be found in [9].

Computations in quantum mechanics made easy

15

Figure 7. Trimer: Current (cid:104)J(cid:105) and eigenenergies En/u of the Bose-Hubbard trimer
for K = 1, Φ = 0.8π. First four panels: N = 30 particles and interaction strength
u = U N/K = 0.5, 5, 50, 50000 respectively. Last two panels: N = 31, N = 32 and
u = 50000.

6. The Lindblad master equation for an open quantum system

Open quantum systems are relevant in various ﬁelds including electronic transport in
semiconductors and nanostructures [10] and cavity QED [11]. Another example of
an open system is given by Bose-Einstein condensates in optical lattices which are
subject to a decay process due to coupling to an environment, a setup studied recently
experimentally (see e.g. [12]) and theoretically using diﬀerent approaches [13–18]. For
weak decay such systems can be described by means of a Born-Markov approximation
leading to a Lindblad master equation for the system’s density matrix [19]. For the
Bose-Hubbard dimer of section 5 the Lindblad master equation can be written as (see
e. g. [17])

(cid:16)

(cid:17)

˙ˆρ = −i[ ˆH, ˆρ ] − γ
2

†
2ˆa2 ˆρ + ˆρˆa

2ˆa2 − 2ˆa2 ˆρˆa
†

†
2

ˆa

(19)

where the second term models a particle decay from site 2 with rate γ and the ﬁrst
term corresponds to the hermitian part of the time evolution with the two site Bose-
Hubbard Hamiltonian ˆH as given in equation (15).
In [18] it was shown that this
equation accurately describes tunneling decay from the dimer into a weakly coupled
optical lattice.

In the following we consider the situation where initially N particles are in
the second well of the Bose-Hubbard dimer whereas the ﬁrst well is empty. The
corresponding initial wavefunction and density matrix at time t = 0 are then given
by |ψ0(cid:105) = |0(cid:105) ⊗ |N(cid:105) and ˆρ(0) = |ψ0(cid:105)(cid:104)ψ0| respectively. Using the matrix representations
introduced in the previous sections the following Matlab code propagates the initial

−10−50510−50050100<J>En/u−10−5051005101520<J>En/u−10−5051046810121416<J>En/u−10−5051046810121416<J>En/u−10−5051046810121416<J>En/u−10−5051046810121416<J>En/uComputations in quantum mechanics made easy

16

density matrix according to equation (19) by means of a predictor corrector integrator
[20]. The expectation values of the time-dependent site occupations are then obtained
via nj(t) = trace (ˆρ(t) ˆa

†
jˆaj).

Figure 8. Relative total particle number (n1(t) + n2(t))/N (solid line) and relative
particle number in the second well n2(t)/N (dashed line) as a function of time for an
open Bose-Hubbard dimer with  = 0, v = 0.3, c = 0.6, N = 2 and decay with the rate
γ = 0.02 from the second well. Scaled units with  = 1 are used.

N = 2; Np = N+1; Nout = 10; epsilon = 0; v = 0.3; c = 0.6;
a = diag(sqrt(1:N),1); ad = a’; I = eye(Np);
a1 = kron(a,I); ad1 = a1’;
a2 = kron(I,a); ad2 = a2’;
H = epsilon*(ad1*a1-ad2*a2)+v*(ad1*a2+ad2*a1)+c/2*(ad1*a1-ad2*a2)^2;
gamma = 0.02;
psi0_1 = zeros(Np,1); psi0_1(1) = 1;
% initial wave functions left well
psi0_2 = zeros(Np,1); psi0_2(N+1) = 1; % initial wave function right well
psi0 = kron(psi0_1,psi0_2);
rho = psi0*psi0’;
dt = 0.05; tlist = (0:2000)*dt;
% empty vectors for particle numbers:
n1 = zeros(1,length(tlist)); n2 = zeros(1,length(tlist));
for l = 1:length(tlist)

% initial density matrix

% initial wave function

% time grid

% compute and store particle numbers:
n2(l) = trace(rho*ad2*a2); n1(l) = trace(rho*ad1*a1);
% predictor-corrector-integration of Lindblad Equation
nk = 10;
for k = 1:10

% nk steps per interval dt

rho_pred = rho-1i*(H*rho-rho*H)*dt/nk+0.5*gamma*(a2*rho*ad2...

-ad2*a2*rho+a2*rho*ad2-rho*ad2*a2)*dt/nk;

rho_m = 0.5*(rho+rho_pred);
rho = rho-1i*(H*rho_m-rho_m*H)*dt/nk+0.5*gamma*(a2*rho_m*ad2...

-ad2*a2*rho_m+a2*rho_m*ad2-rho_m*ad2*a2)*dt/nk;

050100Time t00.51Relative particle numberComputations in quantum mechanics made easy

17

end;

end;
figure(1) % plot of particle number expectation value (right well)
hold on
plot(tlist,n2/N,’r--’); plot(tlist,(n1+n2)/N,’b’);
box on
xlabel(’Time t’); ylabel(’Relative particle number’)

Figure 8 shows the resulting decay dynamics of the relative total particle number
(n1(t)+n2(t))/N (solid line) and the relative particle number in the second well n2(t)/N
for a symmetric double well with  = 0, tunneling coeﬃcient v = 0.3, interaction
constant c = 0.6, decay rate γ = 0.02 and an initial particle number N = 2.

In a non-interacting open dimer, the occupation n2(t)/N would yield exponentially
damped cosine-shaped Rabi oscillations. We clearly observe how this behavior is
modiﬁed by the interaction between the particles. Various Fourier components occur
which result from diﬀerent excitation energies in the spectrum of the interacting bosonic
system.

7. Concluding remarks

Matrix representation techniques were presented and illustrated by a variety of diﬀerent
examples demonstrating both their simplicity and wide applicability. These qualities
make them suitable for use in research projects as well as quantum mechanics courses
for undergraduate and graduate students.

Acknowledgments

The authors would like to thank Eva-Maria Graefe for careful reading of the manuscript
and for all valuable comments and suggestions.

References

[1] M. Gl¨uck and H. J. Korsch, Eur. J. Phys. 23 (2002) 413
[2] T. Hartmann, F. Keck, H. J. Korsch, and S. Mossmann, New J. Phys. 6 (2004) 2
[3] L. D. Landau and E. M. Lifshitz, Quantum Mechanics, Pergamon Press, New York, 1977
[4] L. E. Ballentine, Quantum Mechanics – A Modern Development, World Scientiﬁc, Singapore, 2006
[5] R. A. Pullen and A. R. Edmonds, J. Phys. A 14 (1981) L477
[6] P. Amore and F. M. Fernandez, Phys. Scripta 80 (2009) 055002
[7] S. K. Joseph,, 2014. www.youtube.com/watch?v=gVAyZ47Iw7Q
[8] L. Pitaevskii and S. Stringari, Bose-Einstein Condensation, Oxford University Press, Oxford, 2003
[9] G. Arwas, A. Vardi, and D. Cohen, Phys. Rev. A 89 (2014) 013601
[10] M. Di Ventra, Electrical Transport in Nanoscale Systems, Cambridge University Press, Cambridge,

2008

[11] M. O. Scully and M. S. Zubairy, Quantum Optics, Cambridge University Press, Cambridge, 1997
[12] P. W¨urtz, T. Langen, T. Gericke, A. Koglbauer, and H. Ott, Phys. Rev. Lett. 103 (2009) 80404

Computations in quantum mechanics made easy

18

[13] K. Rapedius, C. Elsen, D. Witthaut, S. Wimberger, and H. J. Korsch, Phys. Rev. A 82 (2010)

063601

[14] A. U. J. Lode, A. I. Streltsov, O. E. Alon, H.-D. Meyer, and L. S. Cederbaum, J. Phys. B 42

(2009) 044018

[15] K. Rapedius and H. J. Korsch, Phys. Rev. A 86 (2012) 025601
[16] E. M. Graefe, H. J. Korsch, and A. E. Niederle, Phys. Rev. Lett 101 (2008) 150408
[17] D. Witthaut, F. Trimborn, and S. Wimberger, Phys. Rev. Lett. 101 (2008) 200402
[18] K. Rapedius, J. Phys. B 46 (2013) 125301
[19] H.-P. Breuer and F. Petruccione, The Theory of Open Quantum Systems, Oxford University Press,

Oxford, 2002

[20] W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery, Numerical Recipes, Cambridge

University Press, London, 3. edition, 2007

