The number of distinct and repeated squares

and cubes in the Fibonacci sequence

Huang Yuke1 Wen Zhiying2

ABSTRACT

6
1
0
2

 
r
a

 

M
4
1

The Fibonacci sequence F is the ﬁxed point beginning with a of morphism σ(a, b) = (ab, a). In
this paper, we get the explicit expressions of all squares and cubes, then we determine the number of
distinct squares and cubes in F[1, n] for all n, where F[1, n] is the preﬁx of F of length n. By establishing
and discussing the recursive structure of squares and cubes, we give algorithms for counting the number
of repeated squares and cubes in F[1, n] for all n, and get explicit expressions for some special n such
as n = fm (the Fibonacci number) etc., which including some known results such as in A.S.Fraenkel
and J.Simpson[8, 9], J.Shallit et al[7].

Key words: the Fibonacci sequence; square; cube; algorithm; the sequence of return words.

 
 
]
S
D
h
t
a
m

.

[
 
 

1
v
1
1
2
4
0

.

3
0
6
1
:
v
i
X
r
a

1

Introduction

Let A = {a, b} be a binary alphabet. The concatenation of factors ν and ω denoted by νω. The
Fibonacci sequence F is the ﬁxed point beginning with a of the Fibonacci morphism σ deﬁned by
σ(a) = ab and σ(b) = a. As a classical example over a binary alphabet, F having many remarkable
properties, we refer to M.Lothaire[14, 15], J.M.Allouche and J.Shallit[1], Berstel[2, 3].

Let ω be a factor of F, denoted by ω ≺ F. Since F is uniformly recurrent, ω occurs inﬁnitely
many times. Let ωp be the p-th occurrence of ω. If the factor ω and integer p such that ωpωp+1 (resp.
ωpωp+1ωp+2) is the factor of F, we call it a square (resp. cube) of F. As we know, F contains no
fourth powers. The properties of squares and cubes are objects of a great interest in many aspects of
mathematics and computer science etc.

We denote Fm = σm(a) for m ≥ 0 and deﬁne F−1 = b, F−2 = ε (empty word). Deﬁne fm = |Fm|
the m-th Fibonacci number, f−2 = 0, f−1 = 1, fm+1 = fm + fm−1 for m ≥ −1. Let F[1, n] be the
preﬁx of F of length n. In this paper, we consider the four functions below:
A(n) := ♯{ω : ωω ≺ F[1, n]}, the number of distinct squares in F[1, n];
B(n) := ♯{(ω, p) : ωpωp+1 ≺ F[1, n]}, the number of repeated squares in F[1, n];
C(n) := ♯{ω : ωωω ≺ F[1, n]}, the number of distinct cubes in F[1, n];
D(n) := ♯{(ω, p) : ωpωp+1ωp+2 ≺ F[1, n]}, the number of repeated cubes in F[1, n].
The methods for counting the four functions have attracted some many authors, but known
results are not rich. A.S.Fraenkel and J.Simpson gave the expression of A(fm) and B(fm) in 1999[8]
and 2014[9]. In 2014, C.F.Du, H.Mousavi, L.Schaeﬀer and J.Shallit gave the expression of B(fm) and
D(fm) by mechanical methods, see Theorem 58 and Theorem 59 in [7]. In this paper, we give the
explicit expressions of A(n), B(fm), C(n) and D(fm). Although we haven’t get the explicit expressions
of B(n) and D(n), we give fast algorithms for counting B(n) and D(n) for all n.

The main tool of this paper is the “structure properties” of the sequence of return words in the
Fibonacci sequence, which introduced and studied in [11], also see Property 2.2. The deﬁnition of
return words is from F.Durand[6]. Let ω be a factor of F. For p ≥ 1, let ωp = xi+1 ··· xi+n and
ωp+1 = xj+1 ··· xj+n. The factor xi+1 ··· xj is called the p-th return word of ω and denoted by rp(ω).
The sequence {rp(ω)}p≥1 is called the sequences of the return words of factor ω.

1School of Mathematics and Systems Science, Beihang University (BUAA), Beijing, 100191, P. R. China. E-mail

address: huangyuke07@tsinghua.org.cn, hyg03ster@163.com.

2Department of Mathematical Sciences, Tsinghua University, Beijing, 100084, P. R. China. E-mail address:

wenzy@tsinghua.edu.cn(Corresponding author).

1

By the “structure properties” (Property 2.2), we can determine the positions of all ωp. By the

deﬁnition of square (resp. cube) and return word, we have

ωpωp+1 ≺ F ⇔ rp(ω) = ω, ωpωp+1ωp+2 ≺ F ⇔ rp(ω) = rp+1(ω) = ω,

where the “=” means “have the same expressions”. By these relations, we can determine the positions
of all squares and cubes, and then get A(n), B(n), C(n) and D(n). But this method is complicated,
another improved and fast method is used in this paper.

This paper is organized as follows. Section 2 present some basic notations and known results.
Section 3 prove some basic properties of squares. We determine A(n) (distinct squares) in Section 4.
Section 5 is devoted to establish the recursive structure of squares, then we determine B(n) (repeated
squares) in Section 6. Similarly, we establish the recursive structure of cubes, then determine C(n)
(distinct cubes) and D(n) (repeated cubes) in Section 7 to 10.

2 Preliminaries

Let τ = x1 ··· xn be a ﬁnite word (or τ = x1x2 ··· be a sequence). For any i ≤ j ≤ n, deﬁne
τ [i, j] := xixi+1 ··· xj−1xj. By convention, we denote τ [i] := τ [i, i] = xi and τ [i, i − 1] = ε. Notation
ν ⊲ ω means word ν is a suﬃx of word ω.
For m ≥ −1, let δm ∈ {a, b} be the last letter of Fm, then δm = a iﬀ m is even. The m-th singular
word is deﬁned as Km = δm+1Fmδ−1
m = δm+1Fm[1, fm − 1] for m ≥ −1. By Property 2(9) in [18],
all singular words are palindromes. Let Ker(ω) be the maximal singular word occurring in factor ω,
called the kernel of ω. Then by Theorem 1.9 in [11], Ker(ω) occurs in ω only once. Moreover

Property 2.1 (Theorem 2.8 in [11]). Ker(ωp) = Ker(ω)p for all ω ∈ F and p ≥ 1.

This means, let Ker(ω) = Km, then the maximal singular word occurring in ωp is just Km,p. For

instance, Ker(aba) = b, (aba)3 = F[6, 8], (b)3 = F[7], so Ker((aba)3) = (b)3, (aba)3 = a(b)3a.

Property 2.2 (Theorem 2.11 in [11]). For any factor ω, the sequence of return words {rp(ω)}p≥1
is the Fibonacci sequence over the alphabet {r1(ω), r2(ω)}.

Property 2.3 and 2.4 are useful in our proofs. Property 2.3 can be proved by induction. Since all

singular words are palindromes, Property 2.4 holds by the cylinder structure of palindromes in [13].

Property 2.3 (Lemma 2.2 in [11]). For m ≥ −1, (1) Km+3 = Km+1KmKm+1.

(2) Km+2 = KmKm+1δ−1

m δm+1 = δ−1

m δm+1Km+1Km.

Property 2.4. Km ≺ Km+3[2, fm+3 − 1], Km+1 6≺ Km+3[2, fm+3 − 1], Km+2 6≺ Km+3[2, fm+3 − 1].

3 Basic properties of squares

By Deﬁnition 2.9 and Corollary 2.10 in [11], any factor ω with kernel Km can be expressed
uniquely as ω = Km+1[i, fm+1]KmKm+1[1, j] = Km+3[i, fm+2 + j], where 2 ≤ i ≤ fm+1 + 1 and
0 ≤ j ≤ fm+1 − 1. By Property 2.1, ωpωp+1 ≺ F means
{z

ωpωp+1 = Km+1[i, fm+1] Km,pKm+1[1, j]Km+1[i, fm+1]

By Property 2.2, Km has only two distinct return words r1(Km) = KmKm+1 and r2(Km) =

Km,p+1Km+1[1, j] ≺ F.

|

rp(Km)

}

KmKm−1, so ωpωp+1 ≺ F has two cases as below, and in each case, |ω| = |rp(Km)|.

Case 1. rp(Km) = r1(Km) = KmKm+1. Comparing the two expressions of rp(Km), we have

KmKm+1[1, j]Km+1[i, fm+1] = KmKm+1 ⇒ j = i − 1.

2

Comparing the two ranges of i that 2 ≤ i ≤ fm+1 + 1 and 0 ≤ j = i − 1 ≤ fm+1 − 1, we have
2 ≤ i ≤ fm+1 and m ≥ 0. Moreover |ω| = |r1(Km)| = fm+2 and
ωω =Km+1[i, fm+1]KmKm+1KmKm+1[1, i − 1]

=Km+2[i, fm+2]Km+1Km+2[1, fm + i − 1] = Km+4[i, 2fm+2 + i − 1].

The second and third equalities hold by Property 2.3.

Since Km+1 ≺ ωω ≺ Km+4[2, fm+4 − 1], by Property 2.4, Ker(ωω) = Km+1.
Case 2. rp(Km) = r2(Km) = KmKm−1. Comparing the two expressions, we have

KmKm+1[1, j]Km+1[i, fm+1] = KmKm−1 ⇒ j = i − fm − 1.

So fm + 1 ≤ i ≤ fm+1 + 1 and m ≥ −1. Moreover |ω| = |r2(Km)| = fm+1 and

ωω =Km+1[i, fm+1]KmKm−1KmKm+1[1, i − fm − 1]

=Km+1[i, fm+1]Km+2Km+1[1, i − fm − 1] = Km+5[fm+2 + i, fm+3 + fm+1 + i − 1].

Since Km+2 ≺ ωω ≺ Km+5[2, fm+4 − 1], by Property 2.4, Ker(ωω) = Km+2.

Remark 3.1. By the discussion above, we have: all squares in F are of length 2fm for some m ≥ 0;
for all m ≥ 0, there exists a square of length 2fm in F. This is a known result of P.S´e´ebold[16].
Property 3.2 (Property 4.1 in [13]). P (Km, p) = pfm+1 + (⌊φp⌋ + 1)fm − 1 for m ≥ −1, p ≥ 1.
Corollary 3.3 (Corollary 4.2 in [13]). P (a, p) = p + ⌊φp⌋, P (b, p) = 2p + ⌊φp⌋ for p ≥ 1.

For m, p ≥ 1, we deﬁne two sets below

(h1, Km, pi := {P (ωω, p) : Ker(ωω) = Km,|ω| = fm+1, ωω ≺ F}
h2, Km, pi := {P (ωω, p) : Ker(ωω) = Km,|ω| = fm−1, ωω ≺ F}

Obviously they correspond the two cases of squares respectively. By Property 3.2 we have

h1, Km, pi ={P (ω, p) : ω = Km+1[i, fm+1]KmKm+1[1, fm−1 + i − 1], 2 ≤ i ≤ fm}

={P (Km, p) + fm−1 + i − 1, 2 ≤ i ≤ fm}
={pfm+1 + ⌊φp⌋fm + fm+1,··· , pfm+1 + ⌊φp⌋fm + fm+2 − 2},

h2, Km, pi ={P (ω, p) : ω = Km−1[i, fm−1]KmKm−1[1, i − fm−2 − 1], fm−2 + 1 ≤ i ≤ fm−1 + 1}

={P (Km, p) + i − fm−2 − 1, fm−2 + 1 ≤ i ≤ fm−1 + 1}
={pfm+1 + ⌊φp⌋fm + fm − 1,··· , pfm+1 + ⌊φp⌋fm + 2fm−1 − 1}.
Corollary 3.4. ♯h1, Km, pi = fm − 1 and ♯h2, Km, pi = fm−3 + 1 for m, p ≥ 1.

4 The number of distinct squares in F[1, n]

Denote a(n) := ♯{ω : ωω ⊲ F[1, n], ωω 6≺ F[1, n − 1]}, obversely, A(n) = Pn

count a(n), we only need to consider hi, Km, 1i where i = 1, 2.
Property 4.1. h1, Km, 1i = {2fm+1,··· , fm+3 − 2}, h2, Km, 1i = {fm+2 − 1,··· , fm+1 + 2fm−1 − 1}.
It is easy to see that sets hi, Km, 1i are pairwise disjoint, and each set contains some consecutive

i=1 a(i). In order to

integers. Therefore we get a chain

h2, K1, 1i,h1, K1, 1i,··· ,h1, Km−1, 1i,h2, Km, 1i,h1, Km, 1i,h2, Km+1, 1i,···

By this chain, a(n) = 1 iﬀ n ∈ ∪m≥1(h2, Km, 1i ∪ h1, Km, 1i). The “∪” means pairwise disjoint

union in this paper. Moreover, we have h1, Km, 1i ∪ h2, Km+1, 1i = {2fm+1,··· , fm+2 + 2fm − 1}.

3

Property 4.2. a(1) = a(2) = a(3) = 0, a(4) = 1 and for n ≥ 5

a(n) = 1 iﬀ n ∈ ∪m≥1{2fm+1,··· , fm+2 + 2fm − 1}.

we can give a fast algorithm of A(n) for all n ≥ 1. SincePm

One method for counting A(n) is by A(n) =Pn
Pi=1
fi − f0 − f−1 +

Pi=−1
Theorem 4.3. For all n ≥ 1, let m satisﬁes 2fm ≤ n < 2fm+1,

Pi=1

A(fm+2 + 2fm − 1) = a(4) +
Pi=−1

(fi + fi−2) = 1 +

= 1 +

m−2

m

m

m

i=1 a(i). By consider A(fm+2 + 2fm− 1) for m ≥ 1,

i=−1 fi = fm+2 − 1,

♯{2fi+1,··· , fi+2 + 2fi − 1}

fi = fm+2 + fm − 3.

A(n) =(n − fm−1 − 2,
fm+1 + fm−1 − 3,

n ≤ fm+1 + 2fm−1 − 1;
otherwise.

Proof. When fm+1+2fm−1 ≤ n ≤ 2fm+1−1, a(n) = 0, A(n) = A(fm+1+2fm−1−1) = fm+1+fm−1−3.
When 2fm ≤ n ≤ fm+1 + 2fm−1 − 1, a(n) = 1, A(n) = A(2fm − 1) + n − 2fm + 1. Since
A(2fm − 1) = A(fm + 2fm−2 − 1), we have A(n) = n − fm−1 − 2. Thus the conclusion holds.
Remark 4.4. Since 2fm−2 ≤ fm ≤ fm−1 + 2fm−3 − 1 for m ≥ 2, as a spacial case of Theorem 4.3,

This is a known result of A.S.Fraenkel and J.Simpson, see Theorem 1 in [8].

A(fm) = fm − fm−3 − 2 = 2fm−2 − 2.

5 The recursive structure of squares

In this section, we establish a recursive structure of squares. Using it, we will count the number

of repeated squares in F[1, n] (i.e. B(n)) in Section 6. For m, p ≥ 1, consider the vectors

Γ1,m,p : = [pfm+1 + ⌊φp⌋fm + fm+1 − 1,h1, Km, pi]

= [pfm+1 + ⌊φp⌋fm + fm+1 − 1,··· , pfm+1 + ⌊φp⌋fm + fm+2 − 2];

Γ2,m,p : = [h2, Km, pi, pfm+1 + ⌊φp⌋fm + 2fm−1,··· , pfm+1 + ⌊φp⌋fm + fm+1 − 2]

= [pfm+1 + ⌊φp⌋fm + fm − 1,··· , pfm+1 + ⌊φp⌋fm + fm+1 − 2].

Obversely, each Γi,m,p contains consecutive integers. The numbers of components in vectors Γ1,m,p

Here vector [hi, Km, pi] means arrange all elements in set hi, Km, pi, i = 1, 2.
and Γ2,m,p are fm and fm−1 respectively. Moreover max Γ2,m,p + 1 = min Γ1,m,p for m, p ≥ 1.
Lemma 5.1 (Lemma 5.3 and 5.4 in [13]).

⌊φ(p + ⌊φp⌋ + 1)⌋ = p, ⌊φ(2p + ⌊φp⌋ + 1)⌋ = p + ⌊φp⌋.

Property 5.2. Γ1,m,p = [Γ2,m−1,P (a,p)+1, Γ1,m−1,P (a,p)+1] for m ≥ 2, p ≥ 1.
Proof. By Corollary 3.3, P (a, p) + 1 = p + ⌊φp⌋ + 1. By Lemma 5.1, ⌊φ(p + ⌊φp⌋ + 1)⌋ = p.

min Γ2,m−1,P (a,p)+1 = (p + ⌊φp⌋ + 1)fm + ⌊φ(p + ⌊φp⌋ + 1)⌋fm−1 + fm−1 − 1

=(p + ⌊φp⌋ + 1)fm + pfm−1 + fm−1 − 1 = pfm+1 + ⌊φp⌋fm + fm+1 − 1 = min Γ1,m,p;

max Γ1,m−1,P (a,p)+1 = (p + ⌊φp⌋ + 1)fm + ⌊φ(p + ⌊φp⌋ + 1)⌋fm−1 + fm+1 − 2

=(p + ⌊φp⌋ + 1)fm + pfm−1 + fm+1 − 2 = pfm+1 + ⌊φp⌋fm + fm+2 − 2 = max Γ1,m,p.

Since max Γ2,m,p + 1 = min Γ1,m,p for m, p ≥ 1, max Γ2,m−1,P (a,p)+1 + 1 = min Γ1,m−1,P (a,p)+1.

Thus the conclusion holds.

4

By an analogous argument, we have

Property 5.3. Γ2,m,p = [Γ2,m−2,P (b,p)+1, Γ1,m−2,P (b,p)+1] for m ≥ 3, p ≥ 1.

In Property 5.2 and 5.3, we establish the recursive relations for any Γ1,m,p (m ≥ 2) and Γ2,m,p
(m ≥ 3). By the one-to-one correspondence between Γi,m,p and hi, Km, pi, we can deﬁne the recursive
structure over {hi, Km, pi| i = 1, 2; m, p ≥ 1} denoted by S. Each hi, Km, pi is an element in S. The
recursive structure S is a family of ﬁnite trees with root hi, Km, 1i for all i = 1, 2, m ≥ 1; and with
recursive relations:

(τ1h1, Km, pi = h2, Km−1, P (a, p) + 1i ∪ h1, Km−1, P (a, p) + 1i
τ2h2, Km, pi = h2, Km−2, P (b, p) + 1i ∪ h1, Km−2, P (b, p) + 1i

for m ≥ 2;
for m ≥ 3.
Property 5.4. Each hi, Km, pi belongs to the recursive structure S, i = 1, 2, m, p ≥ 1.
Proof. Each element hi, Km, 1i is root of a ﬁnite tree in S. For m, p ≥ 1,

(h1, Km, P (a, p) + 1i ∈ τ1h1, Km+1, pi
h1, Km, P (b, p) + 1i ∈ τ2h2, Km+2, pi

and (h2, Km, P (a, p) + 1i ∈ τ1h1, Km+1, pi
h2, Km, P (b, p) + 1i ∈ τ2h2, Km+2, pi
Since N = {1} ∪ {P (a, p) + 1} ∪ {P (b, p) + 1}, the recursive structure S contains all hi, Km, pi.

On the other hand, by the recursive relations τ1 and τ2, each element hi, Km, pi has a unique
position in S. By Property 5.2 and 5.3, the trees in S are pairwise disjoint. Fig.1 and Fig.2 show the
two ﬁnite trees in the recursive structure S with roots h1, K5, 1i and h2, K5, 1i respectively.

h1, K5, 1i

42
43
44
45
46
47
48
49
50
51
52
53

✟✟✟✟✟✟✟✯

τ1

❅

❅

❅❅❘

h2, K4, 2i

41
42
43

τ2PPPPPPPq

τ1
❅

❅

❅❅❘

h1, K4, 2i

47
48
49
50
51
52
53

h2, K3, 4i

46
47

✲

h1, K3, 4i

50
51
52
53

τ1
❅

❅

❅❅❘

✲

h2, K2, 6i

41
42

❍❍❍❍❥

τ1

✲
h2, K2, 7i

49
50

44
45

h1, K2, 6i
✏✏✏✏
✲

τ2

h1, K2, 7i

52
53

❍❍❍❍❥

τ1

h2, K1, 10i

43

h2, K1, 11i

46

h2, K1, 12i

51

✲
h1, K1, 10i
✲

45

h1, K1, 11i

48

✲
h1, K1, 12i

53

Fig.1: The ﬁnite tree in the recursive structure S with root h1, K5, 1i.

h2, K5, 1i

33
34
35
36

τ2

❍❍❍❍❍❍❍❥

✲

h2, K3, 3i

33
34

τ2PPPPPPPPq

✲

h2, K1, 8i

33

h1, K1, 8i

35

h1, K3, 3i

37
38
39
40

τ1

✏✏✏✏✏✏✏✶
❍❍❍❍❥

h1, K2, 5i

39
40

h2, K2, 5i

36
37

✲✏✏✏✏✏✏✏✏✶

h1, K1, 9i

40

τ1

h2, K1, 9i

38

Fig.2: The ﬁnite tree in the recursive structure S with root h2, K5, 1i.

By the recursive structure S, we have the relation between the number of squares ending at
position Γ1,m,p[i] = pfm+1 + ⌊φp⌋fm + fm+1 + i − 1 and Γ1,m,1[i] = 2fm+1 + i − 1, see Property
5.5. Similarly, we have the relation between the number of squares ending at position Γ2,m,p[i] =
pfm+1 + ⌊φp⌋fm + fm + i − 2 and Γ2,m,1[i] = fm+2 + i − 2, see Property 5.6.
Property 5.5. For 1 ≤ i ≤ fm − 1,

{ω : ωω ⊲ F[1, 2fm+1 + i − 1]}
={ω : ωω ⊲ F[1, pfm+1 + ⌊φp⌋fm + fm+1 + i − 1], Ker(ω) = Kj , 1 ≤ j ≤ m}.

5

Property 5.6. For 1 ≤ i ≤ fm−3 + 1,

{ω : ωω ⊲ F[1, fm+2 + i − 2]}
={ω : ωω ⊲ F[1, pfm+1 + ⌊φp⌋fm + fm + i − 2], Ker(ω) = Kj , 1 ≤ j ≤ m}.

For instance, taking m = 3, p = 3 and i = 2 in the property above. All squares ending at
position 13 are {aabaab}. All squares ending at position 34 are {aabaab, abaabaababaabaab}. Since
Ker(aabaab) = aabaa = K3 and Ker(abaabaababaabaab) = aabaababaabaa = K5, only {aabaab} is
square with kernel Kj, 1 ≤ j ≤ 3. Fig.3 shows the relation:

h2, K3, 1i

12
13

...

✲

h2, K3, 3i

33
34

· · · · · ·

h2, K5, 1i

33
34
35
36

τ2

❍❍❍❍❍❍❍❥

τ2PPPPPPPPq

τ2PPPPPPPPq

✲

h2, K1, 3i

12

h1, K1, 3i

14
...

✲

...

h2, K1, 8i

33

h1, K1, 8i

35

Fig.3: An example of the graph embedding in the recursive structure S.

From Fig.3 we can see that: in the tree with root h2, K5, 1i, the branch from node h2, K3, 3i is

the graph embedding of the tree with root h2, K3, 1i.

6 The number of repeated squares in F[1, n]

Denote b(n) := ♯{(ω, p) : ωpωp+1 ⊲ F[1, n]} the number of squares ending at position n. By the
deﬁnition of hi, Km, pi, b(n) is equal to the number of integer n occurs in the recursive structure S.
Thus we can calculate b(n) by the property below.

Property 6.1.
b([7, 8]) = [1, 1], b(Γ1,2,1) = b([9, 10, 11]) = [1, 1, 2], for m ≥ 3,

b([1, 2, 3]) = [0, 0, 0], b(Γ2,1,1) = b([4]) = [1], b(Γ1,1,1) = b([5, 6]) = [0, 1], b(Γ2,2,1) =




b(Γ1,m,1) = [b(Γ2,m−1,1), b(Γ1,m−1,1)] + [0, 1,··· , 1
| {z }
fm−1
b(Γ2,m,1) = [b(Γ2,m−2,1), b(Γ1,m−2,1)] + [1,··· , 1
| {z }

fm−3+1

];

].

, 0,··· , 0
| {z }
fm−2−1

The ﬁrst few values of b(n) are b([1, 2, 3]) = [0, 0, 0], b([4]) = [1], b([5, 6]) = [0, 1],
b([7, 8]) = [1, 1], b([9, 10, 11]) = [1, 1, 2], b([12, 13, 14]) = [2, 1, 1], b([15,··· , 19]) = [1, 2, 2, 2, 3],
b([20,··· , 24]) = [2, 2, 2, 1, 2], b([25,··· , 32]) = [2, 2, 2, 2, 3, 3, 3, 4].
For m ≥ 3, the immediately corollaries are

(P b(Γ1,m,1) =P b(Γ2,m−1,1) +P b(Γ1,m−1,1) + fm − 1;
P b(Γ2,m,1) =P b(Γ2,m−2,1) +P b(Γ1,m−2,1) + fm−3 + 1.
5 fm−1 + 2m−3

5 fm−2 − 1,

5 fm + 2m−6

Property 6.2. For m ≥ 1, (1) P b(Γ1,m,1) = 2m+5
(2) P b(Γ2,m,1) = 2m−2
Since Γ1,m,1 = [2fm+1 − 1,··· , fm+3 − 2] and Γ2,m,1 = [fm+2 − 1,··· , 2fm+1 − 2], we have
B(fm+3−2) = B(fm+2−2)+P b(Γ2,m,1)+P b(Γ1,m,1) and B(2fm+1−2) = B(fm+2−2)+P b(Γ2,m,1).

Thus by induction and Property 6.2,

5 fm−3 + 1.

Property 6.3.

(1) B(fm+3 − 2) = 2m−4

5 fm+3 + 2m

5 fm+1 + 4 for m ≥ −1.

(2) B(2fm+1 − 2) = 4m−11

5

fm+1 + 4m−3

5 fm−1 + 5 for m ≥ 0.

6

Property 6.4 can be proved by induction and Property 6.1.

Property 6.4. b(fm − 1) = ⌊ m−1
Remark 6.5. Since B(fm) = B(fm − 2) + b(fm − 1) + b(fm), m ≥ 2. By Property 6.3 and 6.4,
5 fm−1 + m + 2.

2 − 1⌋, b(fm − 1) + b(fm) = m − 2 for m ≥ 2.

5 (m + 7)fm−1 − 4fm−2 + m + 2 = 4m−16

2 ⌋, b(fm) = ⌊ m

5 (m + 1)fm − 2

fm − 2m−6

B(fm) = 4

5

This is a known result of A.S.Fraenkel and J.Simpson[9].

Obversely we can calculate B(n) by B(n) = Pn
i=4 b(i). But when n is large, this method is
complicated. Now we turn to give a fast algorithm. For any n ≥ 4, let m such that fm ≤ n+1 < fm+1.
Since we already determine the expression of B(fm − 2) and B(2fm−1 − 2) for m ≥ 2, in order to give
a fast algorithm of B(n), we only need to calculate Pn
i=2fm−1−1 b(i). One method is
calculating b(n) by Property 6.1, the other method is using the corollaries as below.
Corollary 6.6. For n ≥ 4, let m such that fm ≤ n + 1 ≤ 2fm−1 − 1, then m ≥ 3 and

i=fm−1 b(i) or Pn

b(i) + n − fm + 2,

b(i) + 2m−5

5 fm−5 + 2m−11

5

n + 1 ≤ fm + fm−5 − 1;

fm−7 + 2,

otherwise.

Proof. By Property 6.1, when fm ≤ n + 1 ≤ fm + fm−5 − 1,

n

Xi=fm−1

i=fm−2+fm−5−1

n−fm−1

Pi=fm−2−1
n−fm−1P

b(i) =

Pi=fm−1

n

When fm + fm−5 ≤ n + 1 ≤ 2fm−1 − 1,

b(i) + n − fm + 2.

n−fm−1Pi=fm−2−1
Pi=fm−1

fm+fm−5−2

b(i) +

n

Pi=fm+fm−5−1

b(i), where

[b(i) + 1] =P b(Γ2,m−4,1) + fm−5

fm−7 + 1;

b(i) =

n−fm−1Pi=fm−2−1

[b(i) + 1] =

b(i) =

n

fm−2+fm−5−2

b(i) =

Pi=fm−1
Pi=fm−2−1
5 fm−5 + 2m−11
n−fm−1P

5

i=fm−2+fm−5−1

= 2m−5

b(i) =

b(i) + 1.

Thus

n

Pi=fm−1

n

Xi=2fm−1−1




b(i) =

n

fm+fm−5−2

Pi=fm−1
Pi=fm+fm−5−1
n−fm−1P

i=fm−2+fm−5−1

n−fm−1

n−fm−1

Pi=fm−1−1
Pi=2fm−2−1

b(i) =

b(i) =

Pi=2fm−1−1

n

b(i) + 2m−5

5 fm−5 + 2m−11

5

fm−7 + 2. The conclusion holds.

Corollary 6.7. For n ≥ 9, let m such that 2fm−1 ≤ n + 1 ≤ fm+1 − 1, then m ≥ 4 and

b(i) + n − 2fm−1 + 1,
b(i) + n − 2fm−1 + 2m−8

n + 1 ≤ fm + fm−2 − 1;

5 fm−4 + 2m−9

5 fm−6 + 2, otherwise.

Proof. By Property 6.1, when 2fm−1 ≤ n + 1 ≤ 2fm−1 + fm−4 − 1 = fm + fm−2 − 1,

n−fm−1Pi=fm−1−1

b(i) +

1 =

n−fm−1Pi=fm−1

n−fm−1Pi=fm−1−1

b(i) + n − 2fm−1 + 1.

7

5 fm−6+2. The conclusion holds.

i=20 b(i) is by Property 6.1. Since b(Γ2,4,1) = b([20,··· , 24]) =

n

fm+fm−2−2

b(i) =

b(i) +

n

b(i), where

n

2fm−2−2

b(i) =

[b(i) + 1] =

fm+fm−2−2

2fm−2−2

b(i) =

b(i) +

1 =

2fm−2−2

Pi=fm−1

Pi=2fm−1−1

Pi=2fm−1−1
When fm + fm−2 ≤ n + 1 ≤ fm+1 − 1,
Pi=fm−1−1
Pi=fm−1−1
=P b(Γ2,m−3,1) + fm−4 − 1 = 2m−3
5 fm−4 + 2m−9
n−fm−1Pi=2fm−2−1
n−fm−1Pi=2fm−2−1
b(i) + n − 2fm−1 − fm−4 + 2.
b(i)+n−2fm−1+ 2m−8

Pi=fm+fm−2−1
b(i) + fm−4 − 1
5 fm−6;

Pi=2fm−1−1
Pi=fm+fm−2−1



Pi=2fm−1−1
Example. One method to calculate P23
[2, 2, 2, 1, 2], P23
23−f5Pi=f4+f1−1

i=20 b(i) = 7. The other method is using Corollary 6.6 and 6.7:

b(i) + 5 = 7.

10

Pi=9

n−fm−1Pi=2fm−2−1

5 fm−4+ 2m−9

5 f−1 + 2 =

b(i) + 7

5 f1 + 1

23

Pi=20

Thus

b(i) =

b(i) =

n

Algorithm 6.8 (The number of repeated squares, B(n)).

Step 1. For n ≤ 3, B(n) = 0; for n ≤ 4, ﬁnd the m such that fm ≤ n + 1 < fm+1.
Step 2. Compare n with 2fm−1 − 1.
(1) If n < 2fm−1 − 1, calculate B(fm − 2) by Property 6.3; calculate Pn
6.1 or by Corollary 6.6 and 6.7. Then B(n) = B(fm − 2) +Pn
i=fm−1 b(i).
(2) If n ≥ 2fm−1 − 1, calculate B(2fm−1 − 2) by Property 6.3; calculate Pn
Property 6.1 or by Corollary 6.6 and 6.7. Then B(n) = B(2fm−1 − 2) +Pn
Remark 6.9. When m is large (resp. small), Corollary 6.6 and 6.7 (resp. Property 6.1) is faster.
Example. We calculate B(23). Since f6 = 21 ≤ 23 + 1 < f7 = 34, m = 6. Moreover 23 < 2f5 − 1.
and 6.7,P23

i=20 b(i) = 7. Thus B(23) = B(19) +P23

5 f4 + 4 = 22. By Property 6.1 or by Corollary 6.6
i=20 b(i) = 22 + 7 = 29.

i=fm−1 b(i) by Property
i=2fm−1−1 b(i) by

By Property 6.3, B(f6 − 2) = B(19) = 2

i=2fm−1−1 b(i).

5 f6 + 6

7 Basic properties of cubes

Let ω be a factor with kernel Km, by an analogous argument as Section 3 and by Proposition 4.8
in [11], ωpωp+1ωp+2 ≺ F has only one case: rp(Km) = rp+1(Km) = r1(Km) = KmKm+1. In this case,
|ω| = fm+2. Moreover 2 ≤ i ≤ fm+1 and m ≥ 0,

ωωω =Km+1[i, fm+1]KmKm+1KmKm+1KmKm+1[1, i − 1]

=Km+2[i, fm+2]Km+3Km+2[1, i + fm − 1] = Km+6[i + fm+3, i + fm+5 + fm − 1].

Since Km+3 ≺ ωωω ≺ Km+6[2, fm+6 − 1], by Property 2.4, Ker(ωωω) = Km+3.
Remark 7.1. By the discussion above, we have: all cubes in F are of length 3fm for some m ≥ 2,
and a cube of each such length occurs. This is Theorem 8 in J.Shallit et al[7].

For m ≥ 3 and p ≥ 1, we deﬁne a set below:

hKm, pi := {P (ωωω, p) : Ker(ωωω) = Km,|ω| = fm−1, ωωω ≺ F}.

Obviously it contains all cubes. By Property 3.2 we have

hKm, pi ={P (ω, p) : ω = Km−1[i, fm−1]KmKm−1[1, i + fm−3 − 1], 2 ≤ i ≤ fm−2}

={P (Km, p) + fm−3 + i − 1, 2 ≤ i ≤ fm−2}
={pfm+1 + ⌊φp⌋fm + 2fm−1,··· , pfm+1 + ⌊φp⌋fm + fm+1 − 2}.

Corollary 7.2. ♯hKm, pi = fm−2 − 1 for m ≥ 3, p ≥ 1.

8

8 The number of distinct cubes in F[1, n]

Property 8.1. hKm, 1i = {fm+1 + 2fm−1,··· , 2fm+1 − 2} for m ≥ 3.

Denote c(n) := ♯{ω : ωωω ⊲ F[1, n], ωωω 6≺ F[1, n − 1]}. Obversely, C(n) =Pn
Sets hKm, 1i are pairwise disjoint, and each set contains some consecutive integers. We get a

i=1 c(i).

chain hK3, 1i = {14},hK4, 1i = {23, 24},··· ,hKm, 1i,··· . So c(n) = 1 iﬀ n ∈ ∪m≥3hKm, 1i. Thus
Property 8.2. c(n) = 1 iﬀ n ∈ ∪m≥3{fm+1 + 2fm−1,··· , 2fm+1 − 2}.
By consider C(2fm+1 − 2) for m ≥ 3, we can give a fast algorithm of C(n) for all n ≥ 1. Since
Pm
i=−1 fi = fm+2 − 1, C(2fm+1 − 2) =Pm
Theorem 8.3. For n < 14, C(n) = 0; for n ≥ 14, let m s.t. fm+1 + 2fm−1 ≤ n < fm+2 + 2fm − 1,
then m ≥ 3 and

i=3 ♯hKi, 1i =Pm

i=3(fi−2 − 1) = fm − m − 1.

C(n) =(n − fm+1 − fm−1 − m + 1, n ≤ 2fm+1 − 2;

otherwise.

fm − m − 1,

Proof. When 2fm+1 − 1 ≤ n ≤ fm+2 + 2fm − 1, c(n) = 0, C(n) = C(2fm+1 − 2) = fm − m − 1.

When fm+1 + 2fm−1 ≤ n ≤ 2fm+1 − 2, c(n) = 1,

C(n) = C(fm+1 + 2fm−1 − 1) + n − fm+1 − 2fm−1 + 1.

Since C(fm+1 + 2fm−1 − 1) = C(2fm − 2) = fm−1 − m, C(n) = n − fm+1 − fm−1 − m + 1. Thus the
conclusion holds.

Since 2fm−2 − 1 ≤ fm ≤ fm−1 + 2fm−3 − 1 for m ≥ 6, we have

Theorem 8.4. C(fm) = 0 for m ≤ 5, C(fm) = fm−3 − m + 2 for m ≥ 6.

9 The recursive structure of cubes

In this section, we establish a recursive structure of cubes. Using it, we will count the number of

repeated cubes in F[1, n] (i.e. D(n)) in Section 10.

Property 9.1. For m ≥ 5, minhKm, pi − 2 = maxhKm−2, P (b, p) + 1i.
Proof. Since P (b, p) = 2p + ⌊φp⌋, ⌊φ(2p + ⌊φp⌋ + 1)⌋ = p + ⌊φp⌋, for m ≥ 3, fm−1 + fm−4 = 2fm−2,

maxhKm−2, P (b, p) + 1i + 2 = (2p + ⌊φp⌋ + 1)fm−1 + ⌊φ(2p + ⌊φp⌋ + 1)⌋fm−2 + fm−1

=(2p + ⌊φp⌋ + 1)fm−1 + (p + ⌊φp⌋)fm−2 + fm−1 = pfm+1 + ⌊φp⌋fm + 2fm−1 = minhKm, pi.

This means maxhKm−2, P (b, p) + 1i + 2 = minhKm, pi, so the conclusion holds.

By an analogous argument, we have

Property 9.2. For m ≥ 4, maxhKm, pi + fm−4 + 2 = minhKm−1, P (a, p) + 1i.

In Property 9.1 and 9.2, we establish the recursive relations for any hKm, pi, m ≥ 3. Thus we can
deﬁne the recursive structure over {hKm, pi| m ≥ 3, p ≥ 1} denoted by C. Each hKm, pi is an element
in C. The recursive structure C is a family of ﬁnite trees with roots hKm, 1i for all m ≥ 3; and with
recursive relations:

(τ3hKm, pi = hKm−2, P (b, p) + 1i ∪ hKm−1, P (a, p) + 1i for m ≥ 5;
τ4hK4, pi = hKm−1, P (a, p) + 1i.
Since maxhKm−2, P (b, p) + 1i < minhKm−1, P (a, p) + 1i, the “∪” is a disjoint union.

9

Property 9.3. Each hKm, pi belongs to the recursive structure C, for m ≥ 3 and p ≥ 1.
Proof. Each element hKm, 1i is root of a ﬁnite tree in C. For p ≥ 1,

(hKm, P (a, p) + 1i ∈ τ3hKm+1, pi (m ≥ 4) and hK3, P (a, p) + 1i ∈ τ4hK4, pi;
hKm, P (b, p) + 1i ∈ τ3hKm+2, pi (m ≥ 3).

Since N = {1} ∪ {P (a, p) + 1} ∪ {P (b, p) + 1}, the recursive structure C contains all hKm, pi.

On the other hand, by the recursive relations τ3 and τ4, each element hKm, pi has a unique position

in C. Fig.4 show the ﬁnite tree in the recursive structure C with root hK6, 1i.

hK4, 3i

57
58

τ4
❅
❅❘

 ✒

 

 

hK6, 1i

60
61
62
63
64
65
66

 

 

 

τ3
 
❆
❆

❆
❆❯

hK3, 5i

61

hK3, 6i

69

τ3✏✏✏✏✏✏✏✶

hK5, 2i

71
72
73
74

❅

❅❘

hK4, 4i

78
79

τ4
❅
❅❘

hK3, 7i

82

Fig.4: The ﬁnite tree in the recursive structure C with root hK6, 1i.

Lemma 9.4. For m ≥ 1, (1) P (a, fm − 1) = fm+1 − 2, ⌊φ(fm − 1)⌋ = fm−1 − 1.

(2) ⌊φfm⌋ = fm−1 if m is odd; ⌊φfm⌋ = fm−1 − 1 if m is even. (3) P (b, f2m) = f2m+2 − 1.

Proof. Denote by |ω|a (resp. |ω|b) the number of letter a (resp. b) occurring in ω.
(1) Since |Fm+1|a = fm, aba ⊲ F2m and aab ⊲ F2m+1, we have P (a, fm − 1) = fm+1 − 2. On the
other hand, by Corollary 3.3, P (a, fm − 1) = fm − 1 + ⌊φ(fm − 1)⌋. Comparing the two expressions
of P (a, fm − 1), we have ⌊φ(fm − 1)⌋ = fm−1 − 1 for m ≥ 1.
(2) By Corollary 3.3, P (a, fm) = fm + ⌊φfm⌋. By the analogous argument in (1), we have: when
m is odd, P (a, fm) = fm+1, then P (a, fm) = fm+1 = fm + ⌊φfm⌋ ⇒ ⌊φfm⌋ = fm−1; when m is even,
P (a, fm) = fm+1 − 1, then P (a, fm) = fm+1 − 1 = fm + ⌊φfm⌋ ⇒ ⌊φfm⌋ = fm−1 − 1.

(3) Since |Fm|b = fm−2, aba ⊲ F2m, we have P (b, f2m) = f2m+2 − 1 for m ≥ 1.

Lemma 9.5. fmfk + fm−1fk−1 = fm+k+1 for m, k ≥ −1.
Proof. Since fmfk + fm−1fk−1 = fm(fk−1 + fk−2) + fm−1fk−1 = fmfk−2 + (fm + fm−1)fk−1, using it
repeatedly, fmfk + fm−1fk−1 = fmfk−2 + fm+1fk−1 = ··· = fm+k−1f−1 + fm+kf0 = fm+k+1.

For m ≥ 3, we deﬁne the vectors Γm := [fm+2 − 1,··· , fm+3 − 2], then
Property 9.6. The ﬁnite tree with root hKm, 1i belongs to Γm for m ≥ 3.
Proof. (1) Since P (a, fm − 1) = fm+1 − 2, the maximal of the recursive structure from hKm, 1i is

max{maxhKm, 1i, maxhKm−1, f2 − 1i, maxhKm−2, f3 − 1i,··· , maxhK3, fm−2 − 1i}

By Property 9.2, maxhKm, pi < minhKm−1, P (a, p) + 1i, so maxhKm−i, fi+1 − 1i is strictly increasing
for 0 ≤ i ≤ m − 3. Thus the maximal integer in the tree is maxhK3, fm−2 − 1i.

maxhK3, fm−2 − 1i = (fm−2 − 1)f4 + ⌊φ(fm−2 − 1)⌋f3 + f4 − 2

=(fm−2 − 1)f4 + (fm−3 − 1)f3 + 6 = fm−2f4 + fm−3f3 − 7 = fm+3 − 7 < max Γm.

10

So the minimal integer in the tree is

(2) Similarly, since P (b, f2m) = f2m+2−1, minhKm−2i, f2ii is strictly decreasing for 0 ≤ i ≤ [ m−4
2 ].
min{minhKm, 1i, minhKm−2, f2i, minhKm−4, f4i,··· } =(minhK4, fm−4i
minhK3, fm−3i
When m is even, minhK4, fm−4i = fm−4f5 + ⌊φfm−4⌋f4 + 2f3, ⌊φfm−4⌋ = fm−5 − 1, so

if m is even;
if m is odd.

minhK4, fm−4i = fm−4f5 + (fm−5 − 1)f4 + 2f3 = fm+2 + 2 > min Γm.

When m is odd, minhK3, fm−3i = fm−3f4 + ⌊φfm−3⌋f3 + 2f2, ⌊φfm−3⌋ = fm−4 − 1, so

minhK3, fm−3i = fm−3f4 + (fm−4 − 1)f3 + 2f2 = fm+2 + 1 > min Γm.

In each case, the minimal integer in the tree is larger than min Γm, so the conclusion holds.

By Property 9.6 and the deﬁnition of Γm, the ﬁnite trees in recursive structure C with diﬀerent

roots hKm, 1i are disjoint.

10 The number of repeated cubes in F[1, n]

Denote d(n) := ♯{(ω, p) : ωpωp+1ωp+2 ⊲ F[1, n]}, the number of cubes ending at position n.
i=1 d(i). By the deﬁnition of hKm, pi, d(n) is equal to the number of integer n

Obversely, D(n) = Pn
occurs in the recursive structure C. Thus we can calculate d(n) by the property below.
Property 10.1. For m ≥ 3,

d([fm+4 − 1,··· , fm+5 − 2])
=d([fm+2 − 1,··· , fm+3 − 2, fm+3 − 1,··· , fm+4 − 2]) + [0,··· , 0
| {z }

fm−1+1

].

, 1,··· , 1
| {z }
fm−1

, 0,··· , 0
| {z }

fm+2

The ﬁrst few values of d(n) are d([f5 − 1,··· , f6 − 2]) = [d(12),··· , d(19)] = [0, 0, 1, 0, 0, 0, 0, 0],
d([f6 − 1,··· , f7 − 2]) = [d(20),··· , d(32)] = [0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0],
d([f7 − 1,··· , f8 − 2]) = [d(33),··· , d(53)] = [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0].
By Property 10.1, P d(Γm+2) =P d(Γm) +P d(Γm+1) + fm−2 − 1. By induction, we have

Lemma 10.2.

d(n) = m−5

5 fm + m+2

5 fm−2 + 1 for m ≥ 3.

fm+3−2

Pfm+2−1

Property 10.3. D(fm − 2) = m−11

By the deﬁnition of D(n), D(fm+1 − 2) = D(fm − 2) +Pfm+1−2
By Property 10.1, we get d(fm − 1) = d(fm) = 0 easily by induction, thus D(fm) = D(fm − 2).

5 fm−3 + m + 1 for m ≥ 6.

d(n). By induction, we have

5 fm−1 + m+1

fm−1

Theorem 10.4. D(fm) = m−11

5 fm−1 + m+1

5 fm−3 + m + 1 for m ≥ 6.

Remark 10.5. Theorem 59 in [7] shows the number of cube occurrences in Fm as

where α = 1+√5

2

D(fm) = [d1(m + 2) + d2]αm+2 + [d3(m + 2) + d4]βm+2 + m + 1.
√5 − 3
, β = 1−√5
2 . Since
β )3 = −√5 − 2,

10 , d4 = − 17
α )3 = √5 − 2, ( 1

√5 − 3
β = −1−√5
, 1

10 , d2 = 17
√5−1

2 , d3 = 3+√5

, αβ = −1, 1

, d1 = 3−√5

, ( 1

α =

50

50

2

2

2

fm = αm+2−βm+2

α−β

11

we can prove the two expressions are same. By our expression in Theorem 10.4,

D(fm) − m − 1 = m−11
2 αm+2 + 1+√5
5√5 ×(cid:16)√5−1
= m−11
√5−1
= [ m−11
2 + m+1
5√5 ×
5√5
= [ 3−√5
]αm+2 + [ 3+√5
10 m + 7√5−45

5 × αm+1−βm+1
2 βm+2(cid:17) + m+1
(√5 − 2)]αm+2 + [ m−11
10 m + −7√5−45

+ m+1

α−β

50

50

α−β

5 × αm−1−βm−1
5√5 ×(cid:0)(√5 − 2)αm+2 + (√5 + 2)βm+2(cid:1)
5√5 × 1+√5

(√5 + 2)]βm+2

2 + m+1
5√5

]βm+2.

By J.shallit’s expression in [7],

D(fm) − m − 1 = [ 3−√5

10 m + 3−√5

5 + 17

50

√5 − 3

2 ]αm+2 + [ 3+√5

10 m + 3+√5

5 − 17

50

√5 − 3

2 ]βm+2.

Comparing the coeﬃcients of mαm+2, αm+2, mβm+2 and βm+2, we have the two expressions are same.

method is calculating d(n) by Property 10.1, the other method is using the corollaries as below.

For any n ≥ 12, let m such that fm ≤ n + 1 < fm+1. Since we already determine the expression
i=fm−1 d(i). One

of D(fm − 2), in order to give a fast algorithm of D(n), we only need to calculate Pn
Corollary 10.6. For n ≥ 12, let m such that fm ≤ n + 1 < fm+1, then m ≥ 5 and

n

Xi=fm−1

d(i) =




n−fm−1Pi=fm−2−1
n−fm−1Pi=fm−2+1
n−fm−1Pi=fm−1−1

d(i),

fm ≤ n + 1 ≤ fm + fm−5;

d(i) + n − fm − fm−5 + 1,

fm + fm−5 + 1 ≤ n + 1 ≤ fm + fm−3 − 1;

d(i) + m−4

5 fm−4 + m−2

5 fm−6,

fm + fm−3 ≤ n + 1 < fm+1.

Proof. By Property 10.1, when fm ≤ n + 1 ≤ fm + fm−5,

When fm + fm−5 + 1 ≤ n + 1 ≤ fm + fm−3 − 1,
Pi=fm+fm−5

Pi=fm−1

fm+fm−5−1

d(i) =

d(i) +

n

n

d(i) + n − fm − fm−5 + 1.

Pi=fm−1
n−fm−1Pi=fm−2+1

=

When fm + fm−3 ≤ n + 1 < fm+1,

d(i) =

n

Pi=fm−1
n−fm−1Pi=fm−2+1

d(i) =

n−fm−1Pi=fm−2−1

d(i).

d(i) +

n−fm−1Pi=fm−2+fm−5

1

d(i) =

d(i) +

d(i) +

n

fm−1−2

Pi=fm−1
Pi=fm−2−1

=

fm+fm−5−1

Pi=fm−1

d(i) + fm−4 − 1 +

fm+fm−3−2

Pi=fm+fm−5
n−fm−1Pi=fm−1−1

d(i) =

n−fm−1Pi=fm−1−1

n

Pi=fm+fm−3−1

d(i)

d(i) + m−4

5 fm−4 + m−2

5 fm−6.

So the conclusion holds.

Example. Since [d(33),··· , d(53)] = [0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0], using Property
10.1, we haveP48
i=33 d(i) = 8. The other method is using Corollary 10.6. Since f7 + f4 = 42 ≤ n + 1 =
49 < f8 = 55, P48
i=33 d(i) =P48−f6

Algorithm 10.7 (The number of repeated cubes occurrences, D(n)).

i=20 d(i) + 5 =P14

5 f1 =P27

i=f6−1 d(i) + 3

i=12 d(i) + 7 = 8.

5 f3 + 5

Step 1. For n ≤ 11, D(n) = 0; for n ≤ 12, ﬁnd the m such that fm ≤ n + 1 < fm+1.
Step 2. Calculate D(fm − 2) by Property 10.3.
Step 3. Calculate Pn
Step 4. D(n) = D(fm − 2) +Pn

i=fm−1 d(i) by Property 10.1 or by Corollary 10.6.

i=fm−1 d(i).

12

Example. We calculate D(48). Since f7 = 34 ≤ 48 + 1 < f8 = 55, m = 7.

By Property 10.3, D(32) = D(f7 − 2) = −4
By Property 10.1 or by Corollary 10.6,P48

Acknowledgments

5 f6 + 8

5 f4 + 7 + 1 = 4.

i=33 d(i) = 8. Thus D(48) = D(32) +P48

i=33 d(i) = 12.

The research is supported by the Grant NSF No.11431007, No.11271223 and No.11371210.

References

[1] J.M.Allouche, J.Shallit. Automatic sequences: Theory, applications, generalizations. Cambridge

University Press, Cambridge, 2003.

[2] J.Berstel. Recent results in Sturmian words, in J.Dassow, A.Salomaa (Eds.), Developments in

Language Theory, World Scientiﬁc, Singapore. (1966) 13-24.

[3] J.Berstel. Mot de Fibonacci, S´eminaire d’informatique th´erique, L.I.T.P., Paris, 1980/1981, 57-

78.

[4] W.-F.Chuan, H.-L.Ho. Locating factors of the inﬁnite Fibonacci word, Theoretical Computer

Science. 349 (2005) 429-442.

[5] W.-T.Cao, Z.-Y.Wen. Some properties of the factors of Sturmian sequences, Theoretical Com-

puter Science. 304 (2003) 365-385.

[6] F.Durand. A characterization of substitutive sequences using return words, Discrete Math. 179

(1998) 89-101.

[7] C.-F.Du, H.Mousavi, L.Schaeﬀer, J.Shallit. Decision Algorithms for Fibonacci-Automatic Words,

with Applications to Pattern Avoidance. Eprint Arxiv, 2014.

[8] A.S.Fraenkel, J.Simpson. The exact number of squares in Fibonacci words, Theoretical Computer

Science. 218 (1999) 95-106.

[9] A.S.Fraenkel, J.Simpson. Corrigendum to “The exact number of squares in Fibonacci words”,

Theoretical Computer Science. 547 (2014) 122.

[10] A.Glen. On Sturmian and Episturmian Words, and Related Topics, PhD thesis, The University

of Adelaide, Australia. 2006.

[11] Y.-K.Huang, Z.-Y.Wen. The sequence of return words of the Fibonacci sequence, Theoretical

Computer Science. 593 (2015) 106-116.

[12] Y.-K.Huang, Z.-Y.Wen. Kernel words and gap sequence of the Tribonacci sequence, Acta Math-

ematica Scientia (Series B). 36.1 (2016) 173-194.

[13] Y.-K.Huang, Z.-Y.Wen. The structure of palindromes in the Fibonacci sequence. arXiv:

1601.04391.

[14] M.Lothaire. Combinatorics on words, in: Encyclopedia of Mathematics and its applications,

Vol.17, Addison-Wesley, Reading, MA, 1983.

[15] M.Lothaire. Algebraic combinatorics on words, Cambridge Univ. Press, Cambridge, 2002.

[16] P.S´e´ebold. Propri´et´es combinatoires des mots inﬁnis engendr´es par certains morphismes (Th`ese

de 3e cycle). PhD thesis, Universit´e P. et M. Curie, Institut de Programmation, Paris, 1985.

13

[17] B.Tan, Z.-X.Wen. Invertible substitutions and Sturmian sequences. European Journal of Com-

binatorics, 24.8 (2003) 983-1002.

[18] Z.-X.Wen, Z.-Y.Wen. Some properties of the singular words of the Fibonacci word, European J.

Combin. 15 (1994) 587-598.

14

