Graph-based linear scaling electronic structure theory

Anders M. N. Niklasson,1 Susan M. Mniszewski,2 Christian F. A. Negre,1 Marc

J. Cawkwell,1 Pieter J. Swart,1 Jamal Mohd-Yusof,2 Timothy C. Germann,1

Michael E. Wall,2 Nicolas Bock,1 Emanuel H. Rubensson,3 and Hristo Djidjev4

1Theoretical Division, Los Alamos National Laboratory, Los Alamos, New Mexico 87545

2Computer, Computational, and Statistical Sciences Division,

Los Alamos National Laboratory, Los Alamos, New Mexico 8754

3Division of Scientiﬁc Computing, Department of Information Technology,

Uppsala University, Box 337, SE-751 05 Uppsala, Sweden

4Computer, Computational, and Statistical Sciences Division,

Los Alamos National Laboratory, Los Alamos, New Mexico 87545

(Dated: March 9, 2016)

Abstract

We show how graph theory can be combined with quantum theory to calculate the electronic

structure of large complex systems. The graph formalism is general and applicable to a broad range

of electronic structure methods and materials, including challenging systems such as biomolecules.

The methodology combines well-controlled accuracy, low computational cost, and natural low-

communication parallelism. This combination addresses substantial shortcomings of linear scaling

electronic structure theory, in particular with respect to quantum-based molecular dynamics sim-

ulations.

6
1
0
2

 
r
a

M
3

 

 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 

1
v
7
3
9
0
0

.

3
0
6
1
:
v
i
X
r
a

1

I.

INTRODUCTION

The importance of electronic structure theory in materials science, chemistry, and molec-

ular biology, relies on the development of theoretical methods that provide suﬃcient accu-

racy at a reasonable computational cost. Currently, the ﬁeld is dominated by Kohn-Sham

density functional theory1–4, which often combines good theoretical ﬁdelity with a modest

computational workload that is constrained mainly by the diagonalization of the Kohn-

Sham Hamiltonian – an operation that scales cubically with the system size. However, for

systems beyond a few hundred atoms, the diagonalization becomes prohibitively expensive.

This bottleneck was removed with the development of linear scaling electronic structure

theory5,6, which allows calculations of systems with millions of atoms7,8. Unfortunately, the

immense promise of linear scaling electronic structure theory has never been fully realized

because of some signiﬁcant shortcomings, in particular, a) the accuracy is reduced to a level

that is often diﬃcult, if not impossible, to control; b) the computational pre-factor is high

and the linear scaling beneﬁt occurs only for very large systems that in practice often are

beyond acceptable time limits or available computer resources; and c) the parallel perfor-

mance is generally challenged by a signiﬁcant overhead and the wall-clock time remains high

even with massive parallelism. In quantum-based molecular dynamics (QMD) simulations9

all these problems coalesce and we are constrained either to small system sizes or short

simulation times.

In this paper we propose to overcome these shortcomings by introducing a formal-

ism based on graph theory10,11 that allows practical and easily parallelizable electronic

structure calculations of large complex systems with well-controlled accuracy. The graph-

based electronic structure theory combines the natural parallelism of a divide and conquer

approach12–17 with the automatically adaptive and tunable accuracy of a thresholded sparse

matrix algebra18–31, which can be combined with fast, low pre-factor, recursive Fermi oper-

ator expansion methods32–41 and be applied to modern formulations of Born-Oppenheimer

molecular dynamics (MD)42–50.

2

II. RESULTS

A. Graph-based electronic structure theory

Our graph-based electronic structure theory relies on the equivalence between the cal-

culation of thresholded sparse matrix polynomials and a graph partitioning approach. Let
P (X) be a M th-order polynomial of a N × N symmetric square matrix X that is given as
a linear combination of some basis polynomials T (n)(X),

P (X) =

cnT (n)(X).

(1)

n=0

We deﬁne an approximation Pτ (X) of P (X) using a globally thresholded sparse matrix

algebra, where matrix elements with a magnitude below a numerical threshold τ in all

terms, T (n)(X), are ignored. The pattern of the remaining matrix entries, which at any

point of the expansion have been (or are expected to be) greater than τ , can be described
by a data dependency graph Sτ that represents all possible data dependencies between the
matrix elements in the polynomial expansion. Formally, we deﬁne the graph Sτ with a

vertex for each row of X and an edge (i, j) between vertices i and j if

M(cid:88)

{T (n)(X)}i,j ≥ τ for any n ≤ M .

For a matrix A, we denote by (cid:98)A(cid:99)Sτ the thresholded version of A, where

 Ai,j

0

{(cid:98)A(cid:99)Sτ}i,j =

if (i, j) is an edge of Sτ

otherwise.

The thresholded polynomial Pτ (X) of P (X) with respect to Sτ is given by

M(cid:88)

n=0

Pτ (X) =

cnT (n)Sτ

(X),

where the thresholded T (n)Sτ

(X) can be calculated from a linear recurrence

n−1(cid:88)

(2)

(3)

(4)

(5)

T (n)Sτ

(X) = αn(cid:98)XT (n−1)

Sτ

(X)(cid:99)Sτ +

αmT (m)Sτ

(X),

with T (0)Sτ
(X) = I. A key observation of this paper is that the calculation of Pτ (X) in
Eqs. (4) and (5) is equivalent to a partitioned subgraph expansion on Sτ . This approach is

m=0

3

τ be the subgraph of Sτ induced by the
illustrated in Fig. 1. For any vertex i of Sτ , let si
core (meaning belonging to a single subgraph) vertex i and all halo (shared) vertices that
are directly connected to i in Sτ . Then the ith matrix column of Pτ (X) is given by the
thresholded expansion determined by si

τ only, i.e.

{Pτ (X)}:,i =(cid:8)P (x[si
τ ])(cid:9)

.

:,j

(6)

Here j is the column (or row) of the polynomial for the subgraph si

τ containing all edges
from the core vertex i that corresponds to column i of the complete matrix polynomial

on the left-hand side. x[si

entries of X corresponding to si

τ ] is the small dense principal submatrix that contains only the
τ . The full matrix Pτ (X) can then be assembled, column by
τ ]) for each vertex i. The
calculation of a numerically thresholded matrix polynomial Pτ (X) thus can be replaced by

column, from the set of smaller dense matrix polynomials P (x[si

a sequence of fully independent small dense matrix polynomial expansions determined by a

graph partitioning.

Equation (6) represents an exact relation between a globally thresholded sparse matrix

algebra and a graph partitioning approach, which is valid for a general matrix polynomial

P (X). Several observations can be made about this equivalence: i) Pτ (X) is not symmetric

and with the order of the matrix product for the threshold in Eq. (5) we collect Pτ (X)

column by column in Eq. (6) as illustrated by the directed graph at the bottom of Fig. 1; ii)

the accuracy of the matrix polynomial increases (decreases) as the threshold τ is reduced
(increased) and the number of edges of Sτ increases (decreases); iii) we may thus include
additional edges in Sτ without loss of accuracy; iv) the polynomial Pτ (X) is zero at all entries
outside of Sτ ; v) apart from spurious cancellations, the non-zero pattern of Pτ (X) is therefore
the same as Sτ and we can expect a numerically thresholded exact matrix polynomial,
(cid:98)P (X)(cid:99)τ , to have a non-zero structure similar to Sτ ; vi) the graph partitioning can be
generalized such that each vertex corresponds to a combined set of vertices, i.e. a community,

without loss of accuracy; vii) we may reduce the computational cost by identifying such

communities using graph partitioning schemes, which can be tailored for optimal platform-

dependent performance; viii) the exact relation given by Eqs. (4) - (6) holds for any structure
of Sτ and is not limited to the threshold in Eq. (2); ix) the particular sequence of matrix
operations in the calculation of Pτ (X) is of importance because of the thresholding in Eq. (5),

whereas the order (or grouping) of the matrix multiplications is arbitrary for the contracted

4

matrix polynomials P (x[si

τ ]) in Eq. (6); and x) the computational cost of each polynomial
expansion is dominated by separate sequences of dense matrix-matrix multiplication that

can be performed independently and in parallel.

A main point of this paper is that the equivalence between the calculation of the thresh-

olded sparse matrix polynomial and the graph partitioned expansion in Eq. (6) provides a

natural framework for a graph-based formulation of linear scaling electronic structure the-

ory. In Kohn-Sham density functional theory the matrix polynomial in Eq. (1) is replaced

by the Fermi-operator expansion3,51,52 where

P (H) = D =(cid:2)eβ(H−µ) + 1(cid:3)−1 ≈ M(cid:88)

n=0

cnT (n)(H).

(7)

Here D is the density matrix, H the Hamiltonian, µ the chemical potential, and β the

inverse temperature. The matrix functions, T (n)(X), are typically Chebyshev polynomials

constructed by a recurrence equation as in Eq. (5). With a local basis set H and P (H)

have sparse matrix representations above some numerical threshold for suﬃciently large

non-metallic systems5,6. The graph-based construction of sparse matrix polynomials in Eq.

(6) can then be applied to the calculation of the density matrix with the data dependency
graph Sτ estimated from an approximate prior density matrix that is available in an iterative
self-consistent ﬁeld (SCF) optimization or from previous time steps in a MD simulation.

The computation can be accelerated with a recursive Fermi-operator expansion32–37,39–41. In

the zero temperature limit the Fermi function equals the Heaviside step function θ and a
recursive expansion is then given by D = θ(µI−H) = limn→∞ fn(fn−1(. . . f0(H) . . .)), which
reaches a high expansion order much more rapidly compared to the serial form in Eq. (1).

With fn(X) being 2nd-order polynomials35 we reach an expansion order of over a billion

in only 30 iterations. The ability to use a fast recursive expansion is motivated from ix)

above, and since any recursive expansion also can be written in the general form of Eq. (1).

Once the density matrix D is known, the expectation value of any operator A is given by
(cid:104)A(cid:105) = T r[DA]. Generalizations to quantum perturbation theory are straightforward53,54.

B. Macromolecular test system

Figure 2 shows the error per atom in the density matrix of the band energy, Eband =

T r[DH], calculated with the graph-based formulation above for a 19,945-atom macromolec-

5

ular system of polyalanine solvated in water. The calculations were performed using self-

consistent charge density functional tight-binding theory55–57 as implemented in the elec-

tronic structure program LATTE58 in combination with the recursive second-order spectral

projection (SP2) zero-temperature Fermi-operator expansion scheme35. The data depen-
dency graphs, Sτ , were estimated by thresholding an “exact” density matrix with varying
thresholds, τ . Diﬀerent numbers of subgraph communities (512, 1024 or 2048) were chosen

and optimized with the METIS heuristic multilevel graph partitioning package59 for the

diﬀerent data dependency graphs (one for each threshold) using the multilevel recursive bi-

section method. The errors were determined in comparison to the “exact” density matrix,
which was calculated using regular sparse matrix algebra with a tight threshold of 10−12.
The error is fairly insensitive to the number of graph partitions and is instead controlled by

the value of the threshold that is used to estimate the data dependency graphs. In contrast,

the computational cost varies signiﬁcantly with the size of the graph partitions. The cost in

the limit of only one large community, containing the whole system, or in the opposite limit,
with one partition for each orbital, scale as O(N 3) or O(N m3), respectively, where m is the
average number of edges per vertex in Sτ and N × N is the size of H. A straightforward
graph partitioning may thus lead to a signiﬁcant overhead compared to a Fermi-operator
expansion using thresholded sparse matrix algebra5, which scales as O(N m2). However,
with an optimized graph partitioning the total cost can be reduced to scale as O(N m2).
A similar optimization can be performed for divide and conquer methods, but may not be

applicable to inhomogeneous systems17. Figure 3 shows the timing (66 s, red dashed line) for

a thresholded sparse matrix algebra (SpM Alg) Fermi-operator expansion with Intel’s MKL

sparse matrix library30 running in parallel on a dual eight-core CPU. With the graph-based

approach (ﬁlled circles) using the METIS graph partitioning (Graph Part.) program for

varying numbers of communities it is possible to signiﬁcantly reduce the run time on the

same platform (23 s). The graph-based formalism also has the additional advantage of an

almost trivial and highly scalable parallelism as is demonstrated by the run times on 1, 16

or 32 graphics processing units (GPUs) on separate nodes (open symbols)60. The parallel

performance is close to ideal, reaching a performance of about 25 µs/atom and a subsecond

wall-clock time on the 32 node GPU platform.

6

C. Molecular dynamics simulation

Linear scaling divide and conquer methods12–17 rely on an estimated ﬁnite range of di-

rect electron interaction, which can be motivated by the localized character of the Wan-

nier functions61–63. This allows a system to be partitioned into smaller overlapping regions

that are solved separately (apart from long-range electrostatic interactions), within pre-

determined local interaction zones, and then reassembled. Divide and conquer schemes are

naturally parallel and in spirit similar to our graph-based approach. However, their nu-

merical accuracy can be diﬃcult to control without careful prior testing and convergence

analysis6,64,65. An automatic, adjustable error control is particularly challenging in MD sim-

ulations of inhomogeneous materials, where reacting or ﬂoppy molecules and atoms can move

across pre-determined local interaction zones and where transitions between localized and

itinerant electronic states may occur. MD simulations of inhomogeneous molecular systems

with signiﬁcant changes in the electronic overlap are therefore of particular interest when

we evaluate our framework. Furthermore, the precision can be gauged very sensitively by

the accuracy and long-term stability of the total energy.

The data dependency graph Sτ (t) can be estimated from the numerically thresholded
density matrix in the previous MD time step, (cid:98)D(t − δt)(cid:99)τ , and new Hamiltonian matrix
elements, H(t), as the atoms move, for example, from

Sτ (t) ← (cid:98)((cid:98)D(t − δt)(cid:99)τ + H(t))2(cid:99).

(8)
In our MD simulation below we use the symbolic representation of Sτ (t) in Eq. (8), which is
given from the non-zero pattern of the thresholded density matrix (with τ = 10−4) combined
with the non-zero pattern of H(t), and instead of the matrix square we use paths of length
two, corresponding to the symbolic operation ( = 0). This approach that adapts Sτ (t) to
each new MD time step by including additional redundant edges works surprisingly well,
though Sτ (t) cannot increase by more than paths of length two between two MD steps.
Generalized estimates can also be designed for the iterative SCF optimization.

Figure 4 shows the ﬂuctuations of the total energy during a microcanonical MD sim-

ulation of liquid water that was performed using LATTE58 and the extended Lagrangian

formulation of Born-Oppenheimer MD50,66–69. The density matrix was calculated from a
partitioning over separate subgraphs of Sτ (t), with one water molecule per core. For the
Fermi-operator expansion (at zero temperature) we used the recursive SP2 algorithm35. In

7

each time step the complete SP2 sequence (the same for each subgraph expansion) for the

correct total occupation is pre-determined from the HOMO-LUMO gap that is estimated

from the previous time step as in Ref.41. In this way each expansion can be performed inde-

pendently, without exchange of information during or between the matrix multiplications as

otherwise would be required8,28. Communication is reduced to a minimum and no additional

adjustments of the electronic occupation, as in divide and conquer calculations14, is required.

The inset of Fig. (4) shows the number of water molecules of a single subgraph (core + halo)
along the trajectory of an individual molecule, which oscillates as Sτ (t) adaptively follows
the ﬂuctuations in the electronic overlap. Despite the large oscillations, including between

1 and 25 molecules, the total energy is both accurate and stable. The “exact” calculation
with fully converged density matrices (≥4 SCFs per step) using dense matrix algebra based
on full O(N 3) diagonalization, is virtually indistinguishable for the ﬁrst 0.5 ps (or 1,000 time
steps).

III. DISCUSSION

Linear scaling QMD simulations using divide and conquer or radial truncation approaches
often show systematic energy drifts70–72 that are signiﬁcantly higher than regular O(N 3)
methods9,42,43 and multiple orders of magnitude larger than the graph-based QMD simula-

tion in Fig. 4. Such problems may occur because of diﬃculties controlling the error in the

force evaluations6,73 as atoms move across the local zone boundaries and as the electronic

overlap ﬂuctuates, or because of incomplete SCF optimization causing a broken time-reversal

symmetry42,74. The problem is illustrated in Fig. 5, which shows a comparison between a

divide and conquer approach and our graph-based calculation of the density matrix for a

snapshot from a MD simulation of the water system in Fig. 4. Without the adaptivity of

the graph-based method, the divide and conquer approach needs a large cutoﬀ radius, Rcut,

to reach suﬃcient convergence in the calculation of the density matrix for the water system,

which leads to a signiﬁcant overhead. With the graph-based framework as demonstrated here

in combination with a modern formulation of Born-Oppenheimer MD42–50, these problems

can be avoided.

The oﬀ-the-shelf METIS graph partitioning scheme used for the macromolecular sys-

tem in Figs. 2 and 3 works very well and drastically reduces the overhead compared to

8

a straightforward implementation. However, by adjusting the graph partitioning to the

particular requirements of the electronic structure calculation as well as the computational

platform, further optimizations are possible75. We may also incorporate an on-the-ﬂy graph

partitioning that updates the subgraphs during a MD simulation as the structure changes.

IV. CONCLUSIONS

In this article we have shown how graph theory can be combined with quantum theory

to calculate the electronic structure of large complex systems with well-controlled accuracy.

The graph formalism is general and applicable to a broad range of electronic structure

methods and materials, for which sparse matrix representations can be used, including

QMD simulations, overcoming signiﬁcant gaps in linear scaling electronic structure theory.

ACKNOWLEDGMENTS

We acknowledge support from Oﬃce of Basic Energy Sciences (LANL2014E8AN) and

the Laboratory Directed Research and Development program of Los Alamos National Lab-

oratory (LANL). Generous support and discussions with T. Peery at the T-division In-

ternational Java Group are acknowledged. The research used resources provided by the

LANL Institutional Computing Program. LANL, an aﬃrmative action/equal opportunity

employer, is operated by Los Alamos National Security, LLC, for the National Nuclear

Security Administration of the U.S. DOE under Contract No. DE-AC52-06NA25396.

1 P. Hohenberg and W. Kohn, Phys. Rev., 136, B:864 (1964).

2 W. Kohn and L. J. Sham, Phys. Rev. B, 140, A1133 (1965).

3 R. G. Parr and W. Yang, Density-functional theory of atoms and molecules (Oxford University

Press, Oxford, 1989).

4 R. Dreizler and K. Gross, Density-functional theory (Springer Verlag, Berlin Heidelberg, 1990).

5 S. Goedecker, Rev. Mod. Phys., 71, 1085 (1999).

6 D. R. Bowler and T. Miyazaki, Rep. Prog. Phys., 75, 036503 (2012).

7 D. R. Bowler and T. Miyazaki, J. Phys.: Condens. Matter, 22, 074207 (2010).

9

8 J. VandeVondele, U. Borstnik, and J. Hutter, J. Chem. Theory Comput., 8, 3565 (2012).

9 D. Marx and J. Hutter, “Modern methods and algorithms of quantum chemistry,” (ed. J.

Grotendorst, John von Neumann Institute for Computing, J¨ulich, Germany, 2000) 2nd ed.

10 G. Chartrand, Introductory Graph Theory (Dover Publications, New York, 1985).

11 J. A. Bondy, Graph Theory (Springer-Verlag, London, 2008).

12 W. Yang, Phys. Rev. Lett., 66, 1438 (1991).

13 P. D. Walker and P. G. Mezey, J. Am. Chem. Soc., 115, 12423 (1993).

14 W. T. Yang and T. S. Lee, J. Chem. Phys., 103, 5674 (1995).

15 I. A. Abrikosov, A. M. N. Niklasson, S. I. Simak, B. Johansson, A. V. Ruban, and H. L. Skriver,

Phys. Rev. Lett., 76, 4203 (1996).

16 K. Kitaura, E. Ikeo, T. Nakano, and M. Uebayasi, Chem. Phys. Lett., 313, 701 (1999).

17 T. Ozaki, Phys. Rev. B, 74, 245101 (2006).

18 F. G. Gustavson, ACM Trans. Math. Soft., 4, 250 (1978).

19 S. Pissanetzky, Sparse Matrix Technology (Academic Press, London, 1984).

20 W. H. Press, S. A. Teukolsky, W. T. Vetterling, and B. P. Flannery, Numerical Recipies in

FORTRAN (Cambridge University Press, Port Chester, NY, 1992).

21 Y. Saad, Iterative methods for Sparse Linear Systems (PWS Publishing, Boston, 1996).

22 M. Challacombe, Comput. Phys. Commun., 128, 93 (2000).

23 E. H. Rubensson, E. Rudberg, and P. Salek, J. Comput. Chem., 28, 2531 (2007).

24 E. H. Rubensson, E. Rudberg, and P. Salek, J. Chem. Phys., 128, 74109 (2008).

25 A. Buluc and J. R. Gilbert, SIAM J. Sci. Comput., 34, 170 (2012).

26 U. Borstnik, J. VandeVondele, V. Weber, and J. Hutter, Parallel Computing, 40, 47 (2014).

27 N. Bock, M. Challacombe, and L. V. Kale, arXiv http://arxiv.org/abs/1403.7458v5 (2013).

28 V. Weber, T. Latino, A. Pozdeev, I. Feduova, and A. Curioni, J. Chem. Theory Comput., 11,

3145 (2015).

29 S. M. Mniszewski, M. J. Cawkwell, M. E. Wall, J. Mohd-Yusof, N. Bock, T. C. Germann, and

A. M. N. Niklasson, J. Chem. Theory Comput., 11, 4644 (2015).

30 Intel MKL, Intel Math Kernel Library, https://software.intel.com/en-us/intel-mkl (2015).

31 NVIDIA cuSPARSE, https://developer.nvidia.com/cusparse (2014).

32 R. McWeeny, Proc. R. Soc. London Ser. A-Math, 235, 496 (1956).

33 A. H. R. Palser and D. E. Manolopoulos, Phys. Rev. B, 58, 12704 (1998).

10

34 A. Holas, Chem. Phys. Lett., 340, 552 (2001).

35 A. M. N. Niklasson, Phys. Rev. B, 66, 155115 (2002).

36 A. M. N. Niklasson, Phys. Rev. B, 68, 233104 (2003).

37 W. Z. Liang, C. Saravanan, Y. Shao, R. Baer, A. T. Bell, and M. Head-Gordon, J. Chem.

Phys., 119, 4117 (2003).

38 E. Rudberg and E. H. Rubensson, J. Phys.: Condens. Matter, 23, 075502 (2011).

39 E. H. Rubensson, J. Chem. Theory and Comput., 7, 1233 (2011).

40 P. Suryanarayana, Chem. Phys. Lett., 555, 291 (2013).

41 E. H. Rubensson and A. M. N. Niklasson, SIAM J. Sci. Comput., 36, 148 (2014).

42 P. Pulay and G. Fogarasi, Chem. Phys. Lett., 386, 272 (2004).

43 J. Herbert and M. Head-Gordon, Phys. Chem. Chem. Phys., 7, 3269 (2005).

44 A. M. N. Niklasson, C. J. Tymczak, and M. Challacombe, Phys. Rev. Lett., 97, 123001 (2006).

45 T. D. K¨uhne, M. Krack, F. R. Mohamed, and M. Parrinello, Phys. Rev. Lett., 98, 066401

(2007).

46 G. Zheng, A. M. N. Niklasson, and M. Karplus, J. Chem. Phys., 135, 044122 (2011).

47 J. Hutter, WIREs Comput. Mol. Sci., 2, 604 (2012).

48 L. Lin, J. Lu, and S. Shao, Entropy, 16, 110 (2014).

49 M. Arita, D. R. Bowler, and T. Miyazaki, J. Chem. Theory Comput., 10, 5419 (2014).

50 A. M. N. Niklasson and M. Cawkwell, J. Chem. Phys., 141, 164123 (2014).

51 S. Goedecker and L. Colombo, Phys. Rev. Lett., 73, 122 (1994).

52 R. N. Silver and H. Roder, Int. J. Mod. Phys. C, 5, 735 (1994).

53 A. M. N. Niklasson and M. Challacombe, Phys. Rev. Lett., 92, 193001 (2004).

54 V. Weber, A. M. N. Niklasson, and M. Challacombe, Phys. Rev. Lett., 92, 193002 (2004).

55 M. Elstner, D. Poresag, G. Jungnickel, J. Elsner, M. Haugk, T. Frauenheim, S. Suhai, and

G. Seifert, Phys. Rev. B, 58, 7260 (1998).

56 M. W. Finnis, A. T. Paxton, M. Methfessel, and M. van Schilfgarde, Phys. Rev. Lett., 81, 5149

(1998).

57 T. Frauenheim, G. Seifert, M. E. aand Z. Hajnal, G. Jungnickel, D. Poresag, S. Suhai, and

R. Scholz, Phys. Stat. sol., 217, 41 (2000).

58 M. J. Cawkwell and A. M. N. Niklasson, J. Chem. Phys., 137, 134105 (2012).

59 G. Karypis, , and V. Kumar, SIAM J. Sci. Comput., 20, 359 (1999).

11

60 NVIDIA cuBLAS, https://developer.nvidia.com/cuBLAS (2014).

61 W. Kohn, Phys. Rev. Lett., 76, 3168 (1996).

62 W. Kohn, Phys. Rev. A, 133, A171 (1964).

63 N. F. Mott, Phil. Mag., 6, 278 (1961).

64 T. S. Lee, D. M. York, and W. Yang, J. Chem. Phys., 105, 2744 (1996).

65 D. M. York, T. S. Lee, and W. Yang, Phys. Rev. Lett., 80, 5011 (1998).

66 A. M. N. Niklasson, Phys. Rev. Lett., 100, 123004 (2008).

67 P. Steneteg, I. A. Abrikosov, V. Weber, and A. M. N. Niklasson, Phys. Rev. B, 82, 075110

(2010).

68 P. Souvatzis and A. M. N. Niklasson, J. Chem. Phys., 140, 044117 (2014).

69 B. Aradi, A. M. N. Niklasson, and T. Frauenheim, J. Chem. Theory Comput., 11, 3357 (2015).

70 F. Shimojo, R. K. Kalia, A. Nakano, and P. Vashista, Phys. Rev. B, 77, 085103 (2008).

71 E. Tsuchida, J. Phys.: Condens. Matter, 20, 294212 (2008).

72 F. Shimojo, S. Hattori, R. K. Kalia, M. Kusaneth, W. W. Mou, A. Nakano, K. Nomura,

S. Ohmura, P. Rajak, K. Shimamura, and P. Vashista, J. Chem. Phys., 140, 18529 (2014).

73 M. Kobayashi, T. Kunisada, T. Akama, D. Sakura, and H. Nakai, J. Chem. Phys., 134, 034105

(2011).

74 D. K. Remler and P. A. Madden, Mol. Phys., 70, 921 (1990).

75 H. Djidjev and et al., (2016), unpublished.

12

FIG. 1. The data dependency graph Sτ and the subgraphs (si
τ ), one for each core vertex (i or
k) including all directly connected halo vertices in Sτ . The full matrix polynomial Pτ (X) is given
by an assembly from P (x[si

τ ]) of the separate dense subgraph contractions x[si

τ or sk

τ ].

13

FIG. 2. The error in the calculated density matrix (DM) for polyalanine (2,593 atoms) in water

with a total of 19,945 atoms (inset), as measured by the Frobenius norm (normalized per atom)
for partitions with 512, 1024, and 2048 separate communities based on graphs, Sτ , from varying
numerical thresholds τ . The connected symbols (lower part) shows the error in band energy,

Eband = T r[HD], per atom.

14

1!10-81!10-71!10-61!10-51!10-4Numerical Threshold 1!10-151!10-121!10-91!10-61!10-31!100Error2048 (DM)1024 (DM)512 (DM)2048, (Eband)1024, (Eband)512, (Eband)FIG. 3. The time to calculate the density matrix using the SP2 expansion (with threshold τ = 10−5)

partitioned over diﬀerent sets of subgraphs for the solvated polyalanine system (19,945 atoms).

15

64128256512102420484096Number of communities0.51248163264128SP2 run time (s)1 CPU SpM Alg (MKL)1 CPU Graph Part.1 GPU Graph Part.16 GPU Graph Part.32 GPU Graph Part.FIG. 4. The total energy ﬂuctuations in a microcanonical Born-Oppenheimer MD (BOMD) sim-
ulation of liquid water (100 molecules, T ∼ 300 K, δt = 0.5 fs), using graph partitioning and

one density matrix (DM) construction per step vs. SCF optimized BOMD with diagonalization

(Diag.). The inset shows the number of water molecules associated with the subgraph of an indi-
vidual molecule. Energy drift is less than ∼ 0.2µeV/atom per ps.

16

0246810Time (ps)-60-40-200204060Energy Fluctuations (meV/atom)Partitioned subgraph O(N) BOMD, (1 DM/Step)Regular Diag. O(N3) BOMD, (Fully Converged)05000100001500020000MD step0510152025Connectivity/waterFIG. 5. The convergence of the density matrix error for a snapshot during a MD simulation of the
water system in Fig. 4 (100 molecules, T ∼ 300 K, δt = 0.5 fs) as a function of the computational
cost for various numerical thresholds (τ = 10−1, 10−2, . . . , 10−6) in the symbolic estimate of the

data-dependency graph in Eq. (8) for the graph-based method, and for diﬀerent sizes of the cutoﬀ

radius, Rcut, in a divide and conquer approach. To capture a hypothetical electronic overlap within
the red dashed border in the inset (associated with the data-dependency graph Sτ for the large red
molecule at the center), the cutoﬀ radius needs to be large, which leads to a signiﬁcant overhead for

the divide and conquer approach. The eﬃciency would be similar only for a homogeneous system.

The computational cost was estimated from the sum of the number arithmetic operations (a.o.)

required to calculate the density matrices from all the separate subgraph partitions or divide and

conquer regions – one for each water molecule.

17

0.00.51.01.5Computational Cost (~109a.o.)1!10-61!10-51!10-41!10-31!10-21!10-1Error (||Dapprox." Dexact||2)Divide and ConquerGraph Based, from D(t-#t), H(t)Liquid Water(H2O)100