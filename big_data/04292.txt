6
1
0
2

 
r
a

 

M
4
1

 
 
]

M
D
.
s
c
[
 
 

1
v
2
9
2
4
0

.

3
0
6
1
:
v
i
X
r
a

A LINEAR ALGORITHM FOR BRICK WANG TILING

ALEXANDRE DEROUET-JOURDAN, SHIZUO KAJI, AND YOSHIHIRO MIZOGUCHI

Abstract. In computer graphics, Wang tiles are used as a tool to generate non periodic textures and pat-
terns. We develop a framework and a method for the tiling problem which is suitable for applications.
In particular, we apply our methodology to a special kind of Wang tiles, called Brick Wang tiles, intro-
duced by Derouet-Jourdan et al. in 2015 to model wall patterns. We generalise their result by providing
a linear algorithm to decide and solve the tiling problem for arbitrary planar regions with holes.

1. Introduction

Wang tiles are a class of formal systems introduced by Hao Wang in 1961 [11]. A Wang tile can be
thought of as a square tile with a colour on each side. Once a set of such tiles is given, copies of Wang
tiles are placed side by side so that the colours of common edges match. Given a ﬁnite set of Wang
tiles, to decide whether a whole plane can be tiled with them is known as the “domino problem” and
was proved undecidable by R. Berger in 1966 [2]. There are also sets of Wang tiles which can tile
the plane but only aperiodically ([2, 7, 4, 6]). For a bounded planar region, the corresponding domino
problem is obviously decidable. However, the available decidability algorithms are not necessarily
eﬃcient.

The property that Wang tiles produce large scale aperiodic patterns from small input data has been
exploited in several applications in computer graphics such as procedural synthesis of textures, height
ﬁelds, and sampling points [3, 8, 10]. As a direct precedent of the current work, A. Derouet-Jourdan
et al. [5] introduced a class of Wang tiles in computer graphics to model wall patterns textures (see
Deﬁnition 9), which we call the Brick Wang tiles in this paper. Each tile represents how corners
of four bricks meet. It is assumed that the edges of the bricks are axis aligned and that each tile
is traversed with a straight line, either vertically or horizontally. For aesthetic reasons, crosses are
forbidden, where all four bricks are aligned and the corresponding tile is traversed by two straight
lines. In this model, the colour in the Wang tiling model is the position of the edge of the brick on
the side of the tile. It is proved in [5] that any rectangle region greater than the 2 × 2 square with any
boundary colour condition can be tiled. This result has been formally veriﬁed and implemented in [9]
using the Coq proof assistant [1].

In this paper, we consider the Brick Wang tiles in a generalised setting. In §2, we pin down our
framework of Wang tiling problem in terms of graph. With this general framework, we can work with
not only the plane or rectangle regions in the plane but also regions with holes and on surfaces. When
a set of Wang tiles satisfy a special condition called three-boundary condition, we prove a theorem

2010 Mathematics Subject Classiﬁcation. Primary 68R10; Secondary 68U05.
Key words and phrases. Wang tile, graphical model, satisﬁability problem .

1

ALEXANDRE DEROUET-JOURDAN, SHIZUO KAJI, AND YOSHIHIRO MIZOGUCHI

2
which enables us to reduce a tiling problem to its sub-problem. In §3, we focus on tiling problems
with the Brick Wang tiles introduced in [5]. We characterise the set of regions which can be tiled
with any given boundary constraints. In §4, we provide a linear time algorithm for the tiling problem,
which decides whether a given problem is solvable or not, and gives a solution when it is solvable. In
§5, we summarise our result and future work.

2. Problem setting

We begin with describing the Wang tiling problem in a general setting. Then, we consider a class
of Wang tiles having a special property (1) and discuss a strategy for a tiling algorithm (Theorem 7).

We ﬁrst deﬁne the object to be tiled as an enriched graph.

Deﬁnition 1. A board consists of the following data: an undirected graph G = (V, E) with at most
countable vertices, a distinguished vertex v0 ∈ V, and neighbour functions li : V \ {v0} → E for
1 ≤ i ≤ 4 satisfying

• deg(v) = 4 for all v ∈ V \ {v0}
• {li(v) | 1 ≤ i ≤ 4} is the set of edges adjacent to v.

We often identify a board with its underlying graph when there is no confusion. The distinguished
vertex v0 is called the wall. The set V \ {v0} is denoted by T and called the cells. The full subgraph
of G consisting of cells is denoted by G′. The set of edges adjacent to v0 is called the boundary and
denoted by B. At each cell v, four edges (l1(v), l2(v), l3(v), l4(v)) adjacent to it are called the legs of v.

Note that the role of neighbour functions is just to specify the ordering of the four edges adjacent

to each vertex.

Deﬁnition 2. A tiling problem (G, C, β, W) consists of

• a board G = (V, E)
• a set of colours C = {1, 2, . . . , m}
• a map β : B → C called the boundary constraints
• the set of tiles W ⊂ C4.

A valid tiling is a map τ : E → C such that

(1) (τ(l1(v)), τ(l2(v)), τ(l3(v)), τ(l4(v))) ∈ W for any v ∈ T , and
(2) β(b) = τ(b) for any b ∈ B.

Given a tiling problem, we say the problem is solvable if there exists a valid tiling.
Intuitively, a valid tiling is an assignment of a tile from the given set of Wang tiles to each cell so

that the colour of the four sides (the legs) match those of neighbour cells.

Remark 3. This formulation allows not only a subgraph of a grid graph on the plane but also a grid-like
graph on a surface. For example, a periodic tiling is a tiling of a grid graph on the torus.

If the graph G is not connected, we can consider one connected component at a time. Therefore,

we will assume the graph is always connected without any loss of generality.

Now, we settle some notions.

3
Deﬁnition 4. For a board G = (V, E) and a subset U ⊂ T of cells, the restriction G|U of G is obtained
by contracting V \ U to the wall v0: The vertex set is the union U ∪ {v0} and the edge set is

A LINEAR ALGORITHM FOR BRICK WANG TILING

E|U = {(u, v) | u, v ∈ U, (u, v) ∈ E} ∪ {(u, v0) | u ∈ U, v < U, (u, v) ∈ E}.

A path in G is an ordered sequence of cells (v1, v2, . . . , vl) where vi and vi+1 are connected by an
edge and vi , v j when i , j. A cycle in G is an ordered sequence of cells (v1, v2, . . . , vl) where vi and
vi+1 are connected by an edge and vi = v j iﬀ (i = j) ∨ (i = 1 ∧ j = l) ∨ (i = l ∧ j = 1). We say a leg of
a cell is free if it connects to another cell.
Example 5. Let N be a positive integer. Consider the board G = (V, E), where

• T = {(i, j) ∈ Z × Z | 1 ≤ i, j ≤ N}
• V = T ∪ {v0}
• B = {((i, j), v0) ∈ V × V | i = 1, N}
• E = {((i, j), (i′, j′)) ∈ V × V | |i − i′| + | j − j′| = 1 or j = 1 ∧ j′ = N ∧ i + i′ = N + 1} ∪ B.

This is a regular grid on the M¨obius strip with the boundary B. The neighbour functions are given in
an obvious manner. For 1 < M1 < M2 < N, we can “dig a hole” by setting U = T \ {(i, j) ∈ Z × Z |
M1 ≤ i, j ≤ M2} and take the restriction G|U. In practice, restrictions can be used to allow artists to
manually specify tile patterns for a particular region T \ U.

In many applications of Wang tiling in computer graphics, the set of Wang tiles often comes

equipped with a nice property.
Deﬁnition 6. A tile set W is said to satisfy the three-boundary condition if for any choice of colours
for three out of four places in w = (c1, c2, c3, c4), say c1, c2, c3, there exists c4 ∈ C such that w ∈ W.
That is, the following holds:
(1)
where πi is the i-th projection.

πi : W → C3 is surjective for all 1 ≤ i ≤ 4,

The following theorem provides a general strategy to give a valid tiling:

Theorem 7. Assume that W satisﬁes the three-boundary condition (1). A tiling problem (G, C, β, W)
is solvable for any boundary constraints β if #V = ∞ or there is a restriction G|U such that (G|U , C, β′, W)
is solvable with any boundary constraints β′.
Proof.
(Step 1) When #V = ∞, set ˜G be a normal spanning tree of G′. Otherwise, consider the restriction of
G to T \ U and construct a spanning tree ˜G of it with the wall as its root. Notice that this is
always possible since the graph is connected.

(Step 2) Pick a leaf of ˜G and choose an appropriate tile w ∈ W for it. This is possible because there is
at least one free leg. Remove the leaf from ˜G. Introduce the colour constraints to its legs in
G, which in turn induce boundary constraints on ˜G.

(Step 3) Iterate the previous step until ˜G becomes one point (the root) or has no leaf (when V is inﬁnite).
In the former case, we are left with G|U with a constrained boundary, which we can solve by
assumption. In the latter case, we are left with a tree consisting of only inﬁnite branches,
which we can solve sequentially from the root by the property (1).

4

ALEXANDRE DEROUET-JOURDAN, SHIZUO KAJI, AND YOSHIHIRO MIZOGUCHI

(cid:3)

Note that in the proof we gave an explicit algorithm to solve the tiling problem if an algorithm to

solve the sub-problem for G|U is available.

Example 8. Figure 1 shows an example, taken from [3], of a tile set in computer graphics with the
three-boundary condition. In practical applications, the colours are replaced by parts of an image to
generate textures. Essentially, each side of an edge is one half of an image cut on the diagonal. That
way, when tiles are placed adjacently, the transition from one tile to another in the picture is smooth.
When all colours are taken from pieces of a given image, and the Wang tiles stitch together the colours,
it produces arbitrary large textures with no visible pattern repetition from a small example. In [3], this
technique is applied to create large Poisson distribution of points by replacing the image parts with
carefully designed point distributions.

Figure 1. Example of a set of Wang tiles used in computer graphics [3].

3. Brick Wang tiles

From now on, we focus on a special set of tiles which we call the brick Wang tiles. We prove in a

constructive way that we can decide eﬃciently whether a given tiling problem is solvable or not.

Deﬁnition 9. We assume #C ≥ 3. The set of brick Wang tiles WB is deﬁned by

WB = {(c1, c2, c3, c4) ∈ C4 | (c1 = c3 ∧ c2 , c4) or (c1 , c3 ∧ c2 = c4)}.

It is easy to see that WB has the property (1).
Given a path or a cycle, we prepare some terminology.

• A corner cell in a path (or cycle) is a cell vi such that the two edges connected to vi−1 and vi+1

are consecutive; that is, they are of the form {lk(vi), lk′(vi)}, where k′ − k ≡ 1 mod 4.

• A corner cell whose boundary is coloured with a, b ∈ C is denoted by Ca,b. (We regard the

free leg opposite to a as “input” and the other as “output.”)

• A straight cell in a path (or cycle) is a cell which is not a corner.
• A straight cell whose boundary is coloured with the same colour is denoted by S .
• A straight cell with boundary coloured with two diﬀerent colours is denoted by S ′.

We say that a board is a planar grid when the underlying graph is a subgraph of the square grid

graph on the plane.

Lemma 10. A tiling problem (G, C, β, WB) for a planar grid board G = (V, E) is solvable with any
boundary constraints β when G′ is a cycle.

Proof. First, we assume there is no S ′ since it does not aﬀect the problem.

A LINEAR ALGORITHM FOR BRICK WANG TILING

5
• If there is a part of the form Ca,bS , then let Gc be the complement so that GcCa,bS = G′.
Colour the input leg of Ca,b by a, then we can choose any colour for the leg of S connected to
Gc. Hence, we can tile Gc just sequentially from the cell adjacent to Ca,b by the property (1).
• From the previous cases, we can now assume that there is no straight cell. If there is a part of
the form Ca,bCc,d with b , c, then let Gc be the complement so that GcCa,bCc,d = G′. Colour
the input leg of Ca,b by a, then we can choose any colour for the output leg of Cc,d. Hence, we
can tile Gc just sequentially from the cell adjacent to Ca,b by the property (1).

• Since G is a planar grid board, any cycle has a positive even number of corners. Now, the only

remaining case is when G′ is of the form

Ca1,a2Ca2,a3 · · · Cal,a1,

where l is even. Colour the input leg with a1, then we are forced to choose a1 at the output.

(cid:3)

Remark 11. We can drop the hypothesis that the board is planar grid. In this case, we need a ﬁner
condition; namely, if a cycle has a positive even number of corners, it is solvable with any boundary
constraints.

Combining Theorem 7 with Lemma 10, we obtain

Theorem 12. A tiling problem for a planar grid board G = (V, E) with WB is solvable with any
boundary constraints if #V = ∞ or G′ contains a cycle.

If G′ has no cycle, it is a tree. For a ﬁnite tree, whether the problem is solvable or not depends on
the boundary constraints. In fact, it is easy to see that there always exists boundary constraints β with
which there is no valid tiling. We will discuss an algorithm to decide solvability and give a solutions
in the next section.

4. The algorithm

Fix a tiling problem with a ﬁnite planar grid board G with the Brick Wang tiles WB and a number of
colours #C ≥ 3. Based on Theorem 12, we design an algorithm to decide solvability and to construct
a valid tiling of the problem. The outline goes as follows:

(1) Detect a cycle in G′ by performing a depth ﬁrst traversal of G′. If there is no cycle, use the

tree solver given in §4.2.

(2) Pick a cell which is adjacent to but not in the cycle. Construct a tiling in a depth-ﬁrst manner.
(3) Repeat Step 2 until there is no cell other than those in the cycle.
(4) Construct a tiling of the cycle by §4.3.

Since the degree of a cell is always four, then the complexity of the cycle extraction is linear in the
number of cells in G. Similarly, we will see that all other operations are performed in a linear time
with regards to the number of cells in the board.

The remaining task is now to solve a cycle and a tree-structured board in the case that the board
did not contain a cycle. To solve this last problem, we introduce the condition propagation that will
propagate how the border colouring put constraints on the inner legs.

ALEXANDRE DEROUET-JOURDAN, SHIZUO KAJI, AND YOSHIHIRO MIZOGUCHI

6
4.1. Condition propagation. Given a cell v in a tiling problem. A set of maps fi : C → {true, f alse}
is called conditions if fi(ci) = true (1 ≤ ∀i ≤ 4) implies (c1, c2, c3, c4) ∈ WB.

The possible forms of fi are:

• (c) It must match a given colour c. It is only true for the matching colour.
• (¬c) It must not match a given colour c. It is true for any colour diﬀerent than the given colour

and false for the given colour.

• (∗) It can match any colour. It is always true.

Given three out of four conditions on a cell, the last condition is canonically determined by choosing
the weakest one. We say that the condition is inferred on the output leg from conditions on the input
legs. The precise rule of this is described in Figure 2.

C

(a)

(b)

·

C if a = b

C if a , b

(¬a)

C

·

(b)

C if a = b

(∗) if a , b

(¬a)

C

(∗)

(¬b)

Figure 2. Propagation of conditions for cells in a tree. When some of the legs of the
cell are on the boundary, we consider them input legs with a condition (c) where c is
the colour of the leg. C denotes a given condition and C its negation, with (a) = (¬a),
(¬a) = (∗) and (∗) = (∗). When any of input conditions is (∗), then the output is (∗).

4.2. Case of a tree-structured board. Using the condition propagation, it is possible to decide
whether a tiling problem with a tree structured board is solvable. Consider the border colouring
of the board as conditions on the boundary legs. In a bottom-up manner starting from leaves, com-
pute the output condition of each cell using the bordering colouring. Then, propagate conditions up
to the root of the tree and check that the conditions are valid at the root. If not, the problem is not
solvable. If it is solvable, a valid tiling is given by tiling from the root to meet the conditions.

The algorithm is illustrated in Figure 3. Since each cell is visited at most four times, it has a linear

complexity with respect to the number of cells.

4.3. Case of a cycle. In the planar case, a cy-
cle contains a number of corners that is even and
greater or equal to 4. Consider one of these cor-
ners and denote it Cab. We know from Lemma 10
that a valid tiling exists, which means that a valid
colouring of the two remaining legs of Cab yields
a valid tiling of the cycle. With the brick Wang
tiles, there are two possibilities for the constraint
on the free legs of Cab, presented Figure 4.

a

a

b

(¬b)

b

(b)

(a)

(¬a)

Figure 4. The two possible cases of conditions on
the free legs of a corner in a cycle.

To solve the cycle, we consider the path obtained from the cycle by removing Cab and we colour
its two free legs with the conditions given by Cab. We have two possibilities for the colouring and we
know from Lemma 10 that at least one of them can be solved. Then, we test the tiling of the path for

A LINEAR ALGORITHM FOR BRICK WANG TILING

7

(2)

(2)

(2)

(∗)
(∗)

(1)

(2)

(1)

(1)

(1)

(1)

(1)

(0)

(2)

(0)

(1)

(∗)
(∗)

(1)

(1)

(¬1)
(¬1)

(0)

(1)

(1)

(1)

(0)

(0)

(0)

(1)

(2)

(¬1)
(¬1)

(0)

(0)

(1)

1

1

2

1

1

2

0

1

2

(c)

2

1

1

1

1

1

0

(f)

2

0
0

0
0

2
2

2
2

1

2

0

1

0

1

0

0

0

0

(1)

(1)

(2)

(2)

(0)

(2)

(2)

(2)

(0)

(1)

(1)

(1)

(1)

(2)

(0)

(1)

(0)

(0)

(0)

(1)

(a)

2

2

2

0
0

(1)

(2)

(1)

(1)

(1)

(1)

(1)

(0)

(2)

(0)

(1)

(∗)
(∗)

(1)

(1)

(¬1)
(¬1)

(0)

(2)

(2)

(2)

(1)

(2)

(1)

(1)

(1)

(1)

(1)

(0)

(2)

(0)

(1)

(1)

(1)

(0)

(1)

(1)

(1)

(0)

(0)

(0)

(2)

(1)

(¬1)
(¬1)

(0)

(0)

(1)

(b)

2

1

1

1

2

0

(1)

2

0

1

2

0
0

0
0

2
2

(0)

1

1

2

1

1

(1)

(1)

(1)

(0)

(0)

(0)

(1)

(1)

(1)

(0)

(0)

(0)

1

(1)

(2)

(¬1)
(¬1)

(0)

(0)

(1)

(2)

(1)

(¬1)
(¬1)

(0)

(0)

(1)

(d)

(e)

Figure 3. Illustration of the tree solver. First, (a) we pick input legs on the leaves of the
tree and an output leg on the root of the tree (here it is the top cell). Then, we propagate
the conditions to the nodes in the tree (b) and to the root (c). If the conditions on the
root are compatible, we propagate the solution back from the root (d) to the nodes (e)
and the leaves (f).

both possibilities and pick one that is valid. The process is illustrated Figure 5. Like in the previous
case, since each cell is visited a bounded number of times, solving a cycle can be done in a linear time
with respect to the number of cells in the cycle.

5. Conclusion and Future work

In this paper, we have proposed a graph theoretical approach to the Wang tiling problem. We
have introduced a property of Wang tile sets which is possessed by Wang tiles sets appearing in
applications. For the class of Wang tile sets with the property, we have devised a general strategy to

8

ALEXANDRE DEROUET-JOURDAN, SHIZUO KAJI, AND YOSHIHIRO MIZOGUCHI

1

2

1

0

1

2

1

0

0

2

2

2

2

(0)

(0)

0

2

(¬2)
(¬2)

(¬2)
(¬2)

(¬2)
(¬2)

(0)

(0)

2

0

1

0

0

0

1

0

0

0

1

0

0

1

0

0

0

2

2

2

(0)

(0)

(¬2)
(¬2)

(¬2)
(¬2)

0

2

1

1

1

2

1

1

2

(a)

(0)

(0)

(0)

(2)

2

2

(¬1)
(¬1)

0

(0)

(0)

1

(d)

0

1

0

0

1

0

1

2

1

0

0

2

2

2

2

0

(¬2)

(0)

2

0

2

1

1

1

2

(b)

2
(¬0)

2
(¬0)
(¬0)

1
(¬0)
(¬0)

2
(¬0)

(2)
(2)

(2)
(2)

0

(¬0)

2

0

2

(2)
(2)

(2)
(2)

(2)
(2)

(¬0)

2

1

2

1
(¬2)

2

(1)
(1)

0

(¬0)

1
(¬0)
(¬0)

1

0

(e)

0

1

0

0

0

1

0

0

0

1

0

0

1

0

2

0

(2)

(¬0)

2

0

1

1

0

1

1

0

2

2
2

2
2

2

2

1

1

1

2

1

1

1
1

1

1

2

1

0

1

2

1

0

0

2

1

1

0

2

1

1

2

2

2

2
2

2
2

2
2

2

0

1

0

0

0

1

0

0

2

(c)

1

1

2

1

1

(f)

Figure 5. Illustration of the cycle solver. (a) shows the input cycle with the boundary
coloring, in (b) and (c) a corner has been chosen and the two possible conditions on
its free legs are represented. The conditions are then propagated clockwise. In the
ﬁrst case (b), the conditions yield an invalid condition on the edge in red (d) whereas
the second case yields a valid conﬁguration (e) that generates a valid tiling of the
remaining path, represented in (f).

reduce a tiling problem to its sub-problem. Then, we used the general result to give a linear algorithm
for the tiling of planar regions with the brick Wang tiles. In future work, we would like to consider
tiling problems on quadrangle/hexagonal/triangle surface meshes, which would be useful for texturing
and point sampling on meshes. Also, we would like to discuss enumeration of all valid tilings for a
given problem.

Acknowledgements

This work was partially supported by the Core Research for Evolutional Science and Technology
(CREST) Program titled “Mathematics for Computer Graphics” of the Japan Science and Technol-
ogy Agency (JST). Shizuo Kaji is supported by KAKENHI Grant-in-Aid for Young Scientists (B)
26800043.

A LINEAR ALGORITHM FOR BRICK WANG TILING

9

References

[1] The Coq Proof Assistant, https://coq.inria.fr/.
[2] R. Berger. The undecidability of the domino problem. Memoirs of the American Mathematical Society, 66:72, 1966.
[3] M. F. Cohen, J. Shade, S. Hiller, and O. Deussen. Wang Tiles for Image and Texture Generation. ACM Transaction

on Graphics, 22(3):287–294, 2003.

[4] K. Culik. An aperiodic set of 13 Wang tiles. Discrete Mathematics, 160(1-3):245–251, 1996.
[5] A. Derouet-Jourdan, Y. Mizoguchi, and M. Salvati. Wang Tiles Modeling of Wall Patterns. In Symposium on Math-
ematical Progress in Expressive Image Synthesis (MEIS2015), volume 64 of MI Lecture Note Series, pages 61–70.
Kyushu University, 2015.

[6] E. Jeandel and M. Rao. An aperiodic set of 11 Wang tiles. http://arxiv.org/abs/1506.06492, 2015.
[7] J. Kari. A small aperiodic set of Wang tiles. Discrete Mathematics, 160(1-3):259–264, 1996.
[8] J. Kopf, D. Cohen, O. Deussen, and D. Lischinski. Recursive Wang Tiles for Real-Time Blue Noise. ACM Transac-

tion on Graphics, 25(3):509–518, 2006.

[9] T. Matsushima, Y. Mizoguchi, and A. Derouet-Jourdan. Veriﬁcation of a brick Wang tiling algorithm. To appear at

SCSS2016, 2016.

[10] J. Stam. Aperiodic texture mapping. Technical Report R046, European Research Consortium for Informatics and

Mathematics (ERCIM), 1997.

[11] H. Wang. Proving theorems by pattern recognition−II. Bell System Technical Journal, 40(1):1–41, 1961.

OLM Digital Inc. / JST CREST
E-mail address: alexandre.derouet-jourdan@olm.co.jp

Yamaguchi University / JST CREST
E-mail address: skaji@yamaguchi-u.ac.jp

Kyushu University / JST CREST
E-mail address: ym@imi.kyushu-u.ac.jp

