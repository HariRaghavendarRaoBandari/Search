Obstacle avoidance via B-spline parameterizations of ﬂat

trajectories

Florin Stoican†, Vlad-Mihai Ivănuşcă†, Ionela Prodan‡

6
1
0
2

 
r
a

 

M
5
1

 
 
]

Y
S
.
s
c
[
 
 

1
v
1
1
9
4
0

.

3
0
6
1
:
v
i
X
r
a

Abstract— This paper considers the collision avoid-
ance problem in a multi-agent multi-obstacle frame-
work. The originality in solving this intensively stud-
ied problem resides in the proposed geometrical view
combined with diﬀerential ﬂatness for trajectory gen-
eration and B-splines for the ﬂat output parametriza-
tion. Using some important properties of these theo-
retical tools we show that the constraints can be val-
idated at all times. Exact and sub-optimal construc-
tions of the collision avoidance optimization problem
are provided. The results are validated through ex-
tensive simulations over standard autonomous aerial
vehicle dynamics.

Index Terms— Obstacle avoidance, Flat trajectory,
B-spline basis, MIP (Mixed-Integer Programming),
UAV (Unmanned Aerial Vehicle).

I. Introduction

One of the main issues in multi-obstacle, multi-agent
environments is the collision avoidance assessment. Usu-
ally the avoidance constraints have to be considered
both between an agent and ﬁxed obstacles and between
any two agents. The problem is intensively studied, yet
actual, in the literature but is usually tilted towards
heuristic approaches or online validations. The ﬁrst usu-
ally lacks stability and performances guarantees and the
later is easily boggled into numerical issues [1], [2].

An alternative approach is to solve oﬄine the diﬃcult
trajectory generation part of the overall problem, online
only a straightforward trajectory tracking is employed.
This reduces signiﬁcantly the online computations and
allows stability and performance analysis. The caveat
is that the trajectory to be computed has to respect
the dynamics of the agent and to validate the collision
avoidance constraints at all times [3], [4].

An interesting implementation is represented by ﬂat
trajectory design which guarantees that the correspond-
ing system dynamics are respected (with the caveat that
state and input constraints are not easily accounted for
[5], [6]). This construction shifts the state and input
constraints into constraints over the ﬂat output. To
handle this, usually, the ﬂat output is project over some
basis functions which means that only the coeﬃcients

Control

of
and

†

Politehnica University
Automation

of
Bucharest,
vlad_mihai.ivanusca@aut.pub.ro

Bucharest, Department
Systems
Engineering,
florin.stoican@acse.pub.ro,
‡, Univ. Grenoble Alpes, Laboratory of Conception and Inte-
gration of Systems (LCIS EA 3747), F-26902, Valence, France,
ionela.prodan@lcis.grenoble-inp.fr

Romania

of the projections need to be found. In this sense, B-
spline functions represent an ideal choice since they have
enough ﬂexibility [7] and nice theoretical properties (of
which we will make extensive use throughout the paper).
The present work builds on results sketched in [8]
and further advances the topic in several directions.
Foremost, we provide exact and sub-optimal formula-
tions of the collision avoidance problems between an
agent and the obstacles and between any tho agents. In
both cases we make use of the geometrical properties of
the B-spline functions which allow to bound locally the
trajectories obtained through them. Hence, the collision
problems become separation problems between sets of
consecutive points. In the exact case, these constraints
lead to nonlinear formulation where both the control
points and the separation hyperplanes are variables. A
simpliﬁed (and hence sub-optimal approach) is to select
the separation hyperplanes from the support hyperplanes
of the obstacles therefore reducing the problem to a
mixed integer formulation.

Both methods make use of a multi-obstacole frame-
work and are tested and compared over extensive sim-
ulations. The rest of the paper is organized as follows:
Section II tackles ﬂat output and B-spline characteriza-
tions, Section III discusses ﬂat trajectory generation and
Section IV presents the main results of the paper which
are then illustrated in Section V. Section VI draws the
conclusions.

Notation

sum of

The Minkowski

two sets, A and B is
denoted as A ⊕ B = {x : x = a + b, a ∈ A, b ∈ B}.
Convex Hull{p1 . . . pn} denotes the convex hull of set
generated by the collection of points p1 . . . pn.

II. Preliminaries

The problem of designing reference trajectories in a
multi-agent multi-obstacle environment is in general a
diﬃcult one. A popular approach is to parametrize them
through ﬂatness constructions [9], [10], [5]. In this section
we will describe some of the basics of ﬂat trajectory and
their parametrization via B-spline basis functions.

A. Flat trajectories

A nonlinear time invariant system:
˙x(t) = f(x(t), u(t)),

(1)

control points (7) and the B-spline functions (6a)–(6b)

z(t) =

where P =(cid:2)p0 . . . pn

nX
(cid:3) and Bd(t) =(cid:2)B0,d(t) . . . Bn,d(t)(cid:3)T .

Bi,d(t)pi = PBd(t)

(8)

i=0

interesting properties

This construction yields several
[15]:
P1) z(t) is C∞ in any t /∈ T and C d−1 in any t ∈ T;
P2) at a time instant τi < t < τi+1, z(t) depends
only on the B-splines Bi−d+1,d(t) . . . Bi,d(t); con-
sequently, the B-spline curve z(t) lies within the
union of all convex hulls formed by all d successive
control points;

P3) the ‘r’ order derivatives of B-spline basis func-
tions can be expressed as linear combinations of
B-splines of lower order (B(r)
d (t) = MrBd−r(t)
with matrices Mr of appropriate dimensions and
content);
P4) taking the ﬁrst and last d knot elements equal
(τ0 = ··· = τd−1 and τn+1 = . . . τn+d) leads to
a clamped B-spline curve where the ﬁrst and last
control points coincide with the curve’s end points.

Illustrative example

Let us consider for exempliﬁcation the B-spline basis
functions deﬁned by parameters n = 5 and d = 4 with the
knot vector of length m = n+d = 9 and with components
equally sampled between 0 and 1. Using these elements
we construct the B-spline curve (8) which we depict in
Fig. 1. Note that the convex-hulls determined by all d = 4

where x(t) ∈ Rn is the state vector and u(t) ∈ Rm is the
input vector is called diﬀerentially ﬂat if there exists the
ﬂat output z(t) ∈ Rm:

z(t) = γ(x(t), u(t), ˙u(t),··· , u(q)(t))

(2)
such that the states and inputs can be algebraically
expressed in terms of z(t) and a ﬁnite number of its
higher-order derivatives:

x(t) = Θ(z(t), ˙z(t),··· , z(q)(t)),
u(t) = Φ(z(t), ˙z(t),··· , z(q)(t)).

(3)

Remark 1. For any system admitting a ﬂat description,
the number of ﬂat outputs equals the number of inputs
[10]. In the case of linear systems [11] the ﬂat diﬀeren-
tiability (existence and constructive forms) is implied by
(cid:3)
the controllability property.
Within the multi-agent framework, the most impor-
tant aspect of construction (2)–(3) is that it reduces the
problem of trajectory generation to ﬁnding an adequate
ﬂat output (2). This means choosing z(t) such that, via
mappings Θ(·), Φ(·), various constraints on state and in-
puts (3) are veriﬁed. Since the ﬂat output may be diﬃcult
to compute under these restrictions, we parametrize z(t)
using a set of smooth basis functions Λi(t):

z(t) =

αiΛi(t), αi ∈ R.

(4)

i=1

Parameter N depends on the number of constraints
imposed onto the dynamics [12].

There are multiple choices for the basis functions Λi(t).
Among these, B-spline basis functions are well-suited to
ﬂatness parametrization due to their ease of enforcing
continuity and because their degree depends only up to
which derivative is needed to ensure continuity [7], [5].

B. B-splines

A B-spline of order d is characterized by a knot-vector

T = {τ0, τ1 . . . τm} ,

(5)
of non-decreasing time instants (τ0 ≤ τ1 ≤ ··· ≤ τm)
which parametrizes the associated basis functions Bi,d(t):

[13], [14]

NX

(1, for τi ≤ t < τi+1

Bi,1(t) =

Bi,d(t) =

0 otherwise
t − τi

τi+d−1 − τi

Bi,d−1(t) + τi+d − t
τi+d − τi+1

,

Fig. 1: B-spline curve (solid red) and its control polygone
(dashed blue).

(6a)

for d > 1 and i = 0, 1 . . . n = m − d.

Considering a collection of control points

(7)
we deﬁne a B-spline curve as a linear combination of the

P = {p0, p1 . . . pn} ,

Bi+1,d−1(t)
(6b)

z(t) ⊂ [

consecutive control points (Property II-B) contain the
curve:

Convex Hull{pi−3, pi−2, pi−1, pi}, ∀t ∈ [0, 1].

i=3...5

In particular, the patterned shape depicted in the ﬁgure
denotes region Convex Hull{p2, p3, p4, p5} which contains
the curve z(t) for any t ∈ [τ2, τ3].

p0p1p2p3p4p5p6ConvHull{p0,p1,p2,p3}III. Flat trajectory generation

Let us consider a collection of N + 1 way-points and

the time stamps associated to them1:

W = {ws} and TW = {ts},

(9)
for any s = 0 . . . N. The goal
is to construct a ﬂat
trajectory which passes through each way-point ws at the
time instant ts (or through a predeﬁned neighborhood of
it [8]), i.e., to ﬁnd a ﬂat output z(t) such that

x(ts) = Θ(z(ts), . . . z(r)(ts)) = ws, ∀s = 0 . . . N.

(10)
Remark 2. Note that here we assume that the way-points
are deﬁned over the entire state. Arguably there might be
situations where only a subspace of the state is of interest
(cid:7)
(e.g., only the position components of the state).
Making use of the B-spline framework we provide a
vector of control points (7) and its associated knot-vector
(5) such that (10) is veriﬁed (parameter d is chosen such
that continuity constraints are respected):

˜Θ(Bd(ts), P) = ws, ∀s = 0 . . . N,

(11)
where ˜Θ(Bd(t), P) = Θ(PBd(t) . . . PMrBd−r(t)) is con-
structed along Property II-B.

Let us assume that the knot-vector is ﬁxed (τ0 = t0,
τn+d = tN and the intermediary points τ1 . . . τn+d−1 are
equally distributed along these extremes). Then, we can
write an optimization problem with control points pi
as decision variables whose goal is to minimize a cost
Ξ(x(t), u(t)) along the time interval [t0, tN]:
||˜Ξ(Bd(t), P)||Qdt
s.t. constraints (11) are veriﬁed
with Q a positive symmetric matrix. The cost

P = arg min
P

Z tN

(12)

t0

˜Ξ(Bd(t), P) = Ξ(˜Θ(Bd(t), P), ˜Φ(Bd(t), P))

can impose any penalization we deem necessary (length
of the trajectory, input variation, input magnitude, etc).
In general, such a problem is nonlinear (due to mappings
˜Θ(·) and ˜Φ(·)) and hence diﬃcult to solve. A nonlinear
MPC iterative approach has been extensively studied [5].
With these tools at hand we can propose various
methods for collision avoidance in a multi-agent multi-
obstacle environment.

IV. Main idea

Let us consider a collection of polyhedral obstacles

O = {O1 . . . ONo}

(13)
and assume that the k-th agent follows a trajectory rk(t)
during the interval [t0, tN], generated as in (10) through a

collection of control points2 Pk = {pk
knot vector Tk = {τ k
j }.

j} and the associated
Consequently, the collision avoidance conditions men-

tioned earlier can be formulated as follows:

(i) collision avoidance between the k-th agent and l-th

obstacle:

(14)
(ii) collision avoidance between the k1-th and k2-th

rk(t) /∈ Ol,∀t ∈ [t0, tN],

agents (for any k1 6= k2):

rk1(t) 6= rk2(t),∀t ∈ [t0, tN].

(15)

A. The exact case

The distinctive feature of conditions (14)–(15) is that
they require a continuous time interval ([t0, tN]) valida-
tion (i.e., imposing constraints at discrete time instants
tk along the interval is not deemed suﬃcient). Conse-
quently, we make use of property Property II-B which
allows to bound the continuous B-spline parametrized
curve by its control points. Coupling this with the sep-
arating hyperplane theorem (a well-known construction
[16] which states that for any two disjoint convex objects
there exists a separating hyperplane) several results are
attainable.

First, we provide a slight reformulation of Proposition

1 from [17].
Proposition 1. The k-th agent is guaranteed to avoid
il ∈ Rn s.t.
obstacles (13), i.e., to verify (14), if there ∃ck
(16)
x,

(cid:0)ck

(cid:0)ck

j ≤ min
pk

(cid:1)>

(cid:1)>

max

j∈{i−d+1...i}

il

x∈ ˜Θ−1(Ol)

il

i−d+1 . . . pk

for i = d − 1 . . . n and ∀Ol ∈ O.
(cid:3)
Proof. Condition (16) states that there exists a hyper-
plane deﬁned by its normal ck
il which separates the
points {pk
i } from the obstacle ˜Θ−1(Ol). Since,
according to Property II-B, the curve (10) is contained
in ∪i=d...n Convex Hull{pk
i } it follows that (16)
is a suﬃcient condition to verify (14).
Remark 3. In Proposition 1 note the use of mapping
˜Θ−1(·). This appears because the obstacle avoidance con-
straint is the state-space whereas (16) is in the control
(cid:7)
point space.
A similar reasoning is employed for the inter-agent

i−d+1 . . . pk

collision condition (15).
Proposition 2. The pair (k1, k2) of agents, with k1 6=
k2, is guaranteed to avoid collision, i.e., to validate (15),
if there ∃ck1k2

(cid:17)>
i1i2 ∈ Rn s.t.:

(cid:16)

max

j∈{i1−d+1...i1}

ck1k2
i1i2

j ≤ min
pk1
j∈{i2−d+1...i2}

ck1k2
i1i2

(cid:16)

(cid:17)>

pk2
j ,
(17)

1In particular we may consider just two way-points: the start and

end points of the trajectory.

2For convenience we keep a common degree ‘d’ and number of
control points ‘n’. This is a reasonable assumption as long as the
agents have a common dynamic and follow similar restrictions.

for all possible pairs (i1, i2) which validate

i2+1] 6= ∅}.

i1+1] ∩ [τ k2

{(i1, i2) : [τ k1

i2 , τ k2

i1 , τ k1

(18)
(cid:3)
Proof. Recall that (as per Property II-B) a region
Convex Hull{pi−d+1 . . . pi} contains the B-spline curve in
the time interval [τi, τi+1]. Applying this to the agents k1
and k2 means that all regions corresponding to indices
(18) should not intersect as they contain overlapping
time instants. The separation is enforced by (17) which
is a suﬃcient condition for (15).
Remark 4. Eq. (18) can be avoided altogether if the B-
spline parametrizations share the same knot vector (i.e.,
Tk1 = Tk2). In such a case, variable ck1k2
i1i2 becomes ck1k2
and condition (17) is simpliﬁed to

i

(cid:16)

(cid:17)>

j ≤
pk1

min

j∈{i−d+1...i}

ck1k2
i

(cid:16)

(cid:17)>

max

ck1k2
i

j∈{i−d+1...i}
for all i ∈ {d − 1 . . . n}.
B. The sub-optimal case

pk2
j ,
(19)
(cid:7)

Verifying (16) (or (17)) is diﬃcult in practice due to
the presence of bi-linear terms (e.g., in Proposition 1
both cil and pk
j are variables). Hereafter we propose a
simpler (and hence sub-optimal) implementation.
The main idea is that instead of letting the separating
hyperplane from Proposition 1 or 2 be itself a variable,
we choose from within a predeﬁned pool of hyperplanes.
A natural choice is to select from the support hyper-
planes of the obstacles. By deﬁnition, such a hyperplane
contains on one side the obstacle and hence, it remains
only to check whether the control points lie on the
opposite side. The selection of the active hyperplane is
done through decision variables (i.e., binary variables)
which leads to a mixed-integer pseudo-linear formulation.
To generate the collection of hyperplanes, we consider
the polyhedral sets bounding3 ˜Θ−1(Ol) and take the
support hyperplanes which characterize them:
mx = km},∀m = 1 . . . M.

(20)
Each of these hyperplanes partitions the space in two
“half-spaces”:

Hm = {x : h>

mx ≤ km},
m = {x :
h>
H+
m = {x : −h>
mx ≤ −km}.
−
H

(21)
(22)
Taking into account all possible combinations of half-
spaces leads to a hyperplane arrangement which divides
the space into a collection of disjoint cells which are
completely characterized by sign tuples [18]:

σ∈ΣA(σ) = [
H = [

σ∈Σ

!

  M[
m=1Hσ(m)

m

(23)

3We assume that ˜Θ−1(Ol) is a polyhedral set as well. In general
this might not hold, but in that case a polyhedral approximation
can be obtained.

where Σ ⊂ {−, +}M denotes the collection of all feasible
(corresponding to non-empty regions A(σ)) sign tuples.
Each of these tuples can be allocated to either
1) the admissible domain Rn \ O:

(24)

2) or the interdicted domain O:

Σ◦ = {σ : A(σ) ∩ O = ∅},
Σ• = {σ : A(σ) ∩ O 6= ∅},

(25)
where Σ•∩Σ◦ = ∅ and Σ•∪Σ◦ = Σ. With these elements
we can provide the following corollaries.
Corollary 1. For an obstacle A(σ•) with σ• ∈ Σ•, a
suﬃcient condition to guarantee4 (14) is:

−σ•(m)h>

mpk

j ≤ −σ•(m)km + T αk
im,
∀m = 1 . . . M, j = i − d + 1 . . . i

MX

m=1

im ≤ M − 1
αk

(26a)

(26b)

for i ∈ {d − 1 . . . n}.
(cid:3)
im = 0’
Proof. Taking in (26a) he binary variable ‘αk
i } of
means that the i-th region Convex Hull{pk
the k-th agent sits on the opposite side of the obstacle
A(σ•) with respect to the the m-th hyperplane. The
converse, taking ‘αk
jm = 1’ means that inequality (26a)
is discarded since the right hand term is suﬃciently large
to ignore the values on the left side (assuming that ‘T’
was taken as a suﬃciently large positive constant).

i−d+1 . . . pk

Condition (26b) forces that for any consecutive d + 1
points at least one of the inequalities (26a) is enforced
since at least one of the variables αk

im has to be zero.

Furthermore, we relax Proposition 2 (in addition to the
simpliﬁcation proposed in Remark 4) into the following
corollary.
Corollary 2. The pair (k1, k2) of agents, with k1 6= k2,
is guaranteed to avoid collision, i.e., to validate (15), if:
j∈{i−d...i} h>
max
(27)
MX

j∈{i−d+1...i} h>

j + T βk1k2
im ,

j ≤

mpk1

mpk2

min

im ≤ M − 1
βk1k2

(28)

i-th

for i ∈ {d − 1 . . . n}.
(cid:3)
Proof. The binary variables βk1k2
denote whether
regions Convex Hull{pk1
the
and
Convex Hull{pk2
i } are separated through the
m-th hyperplane (whenever βk1k2
im = 0 the inequality
(27) is enforced and otherwise is discarded). Eq. (28)
assures that at least one of the hyperplanes is active.

i }
i−d+1 . . . pk1

i−d+1 . . . pk2

im

m=1

Several remarks are in order.

4We make the simplifying assumption that to each obstacle Ol

corresponds a single sign tuple.

 [

!
i}
i−d+1 . . . pl

Remark 5. Corollary 2 considers a simultaneous com-
putation of trajectories. An alternative is to compute them
iteratively such that from the point of view of the current
agent the obstacles to be avoided at t ∈ [τi, τi+1] become:

O ← O ∪

Convex Hull{pl

(29)

l<k

the obstacles

the i-th regions
where besides
Convex Hull{pl
i} of the previous agents (with
index l < k and whose trajectories are hence already
(cid:7)
computed) are also considered as obstacles.

i−d+1 . . . pl

(13),

Remark 6. An agent may have a safety region around
it (i.e., because the agent cannot be reduced to a point
or due to the presence of disturbances in the dynamics).
Whatever the reason, and the modality to obtain it,
a safety region Sk can be attached to the k-th agent.
Consequently, the collision avoidance constraints (14)–
(15) become:

{rk(t)} ⊕ Sk /∈ Ol,∀t ∈ [t0, tN],

(30)

and

{rk1(t)} ⊕ Sk1 6= {rk2(t)} ⊕ Sk2 ,∀t ∈ [t0, tN].

(31)
The previous results can be easily adapted to constraints
(30)–(31) by enlarging the obstacles (rk(t) /∈ Ol⊕{−Sk})
and by requiring a larger inter-distance between agents
respectively (rk1(t) − rk2(t) /∈ {−Sk1} ⊕ Sk2).
(cid:7)
Remark 7. Lastly, it is worth mentioning that in all
previous propositions and corollaries there is no guarantee
of feasibility for the optimization problems. The solution
is to incrementally increase the number of variables (i.e.,
the control points) until a feasible solution is reached. (cid:7)

V. Illustrative example for an UAV system

We revisit the test case from [8]. A 2D 3-DOF model
(32) of an airplane in which the autopilot forces coordi-
nated turns (zero side-slip) at a ﬁxed altitude:

˙x(t) = Va(t) cos Ψ(t),
˙y(t) = Va(t) sin Ψ(t),
˙Ψ(t) = g tan Φ(t)

Va(t)

(32)

The state variables are represented by the position
(x(t), y(t)) and the heading (yaw) angle Ψ(t) ∈ [0, 2π]
rad. The input signals are the airspeed velocity Va(t) and
the bank (roll) angle Φ(t), respectively.

the state, z(t) =(cid:2)z1(t)

z2(t)(cid:3)> =(cid:2)x(t)

We take as ﬂat output the position components of

y(t)(cid:3)> which

permits to compute the remaining variables:

(cid:19)

,

q

(cid:18) ˙z2(t)
 1

˙z1(t)
˙z2
1(t) + ˙z2

Ψ(t) = arctan

Va(t) =

Φ(t) = arctan

!

(33a)

(33b)

.

(33c)

2(t),
¨z2(t) ˙z1(t) − ˙z2(t)¨z1(t)

p ˙z2

1(t) + ˙z2

2(t)

g

Note that in the heading component of the state appear
1st order and in the roll angle input appear 2nd order
derivatives of the ﬂat outputs. Hence,
if we wish to
have smooth state and input (their derivatives to be
continuous) it follows that the B-spline parametrization
has to have at least degree d = 4.

Further, we consider way-points which ﬁx only the
position components of the state and time-stamps at
which the trajectory has to pass through them. Thus we
manage to skirt some of the thornier numerical aspects:
the dependence between the B-spline basis functions
and the position components is linear (˜Θ(Bd(t), P) =
PBd(t)), and hence the cost and constraints will be easily
written.

We take as cost to be minimized the length of the
curve since we would like to have the shortest path which
respects the constraints, i.e., ˜Ξ(Bd(t), P) = ||z0(t)||. This
translates into the integral cost:

||z0(t)||dt =

||PM1Bd−1(t)||dt

tNZ
=X

t0

i,j

tNZ
 tNZ

t0

t0

([PM1]i)T

Bi,d−1(t)Bj,d−1(t)dt

(34)
where matrix M1 links Bd−1(t) and ˙Bd(t) as in property
Property II-B and [·]i extracts the i-th column from the
argument. Since the inner integrals can be computed
numerically, we have now a quadratic formulation of the
cost and we can use it for the various constructions from
Section III, see also [5] for a similar treatment of cost
computations.

For illustration purposes we consider 9 hyperplanes:

 [PM1]j





−0.5931
0.8051
0.9834
0.1814
−0.0044
1.0000
−0.1323
0.9912
−0.7011 −0.7131
0.8152 −0.5792
0.4352
0.9003
1.0000 −0.0075
−0.5961 −0.8029



4.2239
0.1719
0.9975
0.2728
3.6785
0.0317
1.6598
4.5790
1.0280



H =

,

h =

which lead to a hyperplane arrangement (23) where the

*

25

20

30

10

0.0985

15
6.231
16.877
0.6412
33.469

n
tM I
‘M I
tN L
‘N L
TABLE I: Evolution of trajectories characteristics for
degree d = 4 in the non-linear and mixed-integer for-
mulations.

17.106
16.307
1.055
202.076

15.034
16.202
0.6321
31.159

21.522
16.536

37.426
203.51

*
*

interdicted tuples (25)

Σ• = {(+ + + − − + + + −),

(+ − + − + + + + +), (+ − + + + − − + +)}

correspond to three obstacles. Further, we take three
way-points (initial, intermediary and ﬁnal) though which
the trajectory has to pass at predeﬁned times:

(cid:26)(cid:20) −9

(cid:21)

−0.5

W =

(cid:20) 0

(cid:21)

(cid:21)(cid:27)

(cid:20)6

,

1.5

,

0

, TW = {0, 5, 10}.

We compute a ﬂat trajectory (parametrized by n = 12
and d = 6) which passes through the given way-points,
minimizes the total path-length and respects one of the
following scenarios: i) without any collision avoidance
restriction; ii) with collision avoidance as in Proposi-
tion 1; iii) with collision avoidance as in Corollary 1. The
obstacles, their support hyperplanes and the resulting
trajectories are depicted in Fig. 2a.

x = 11}.

0.2913(cid:3)>

1 = {(cid:2)−0.1273

Scenarios ii) and iii) both accomplish the task of avoid-
ing the obstacles with comparable computation times
and path lengths. Figures 2b and 2c show details of the
collision avoidance. In both cases the 1st and 3rd con-
vex regions are considered (Convex Hull{p0 . . . p5} and
Convex Hull{p2 . . . p7}) together with their separating
hyperplanes. In Fig. 2b these hyperplanes are the 1st and
respectively 3rd support hyperplane whereas in Fig. 2c
the separating hyperplanes are the result of the optimiza-
3 = {(cid:2)−0.05490.8461(cid:3)>
tion problem and are H
x =
11}, H
As mentioned earlier, the result of the optimization
problem (computation time, total length of the trajec-
tory) depends heavily on the number of control points
n + 1 and degree d. We illustrate these evolutions in
Table I. Several remarks are in order. First, it seems
that after an initial decrease in the path length the future
reductions are negligible and at a signiﬁcant computation
time for the mixed-integer method. Next, and somewhat
surprising, is that the non-linear method is extremely
sensitive to parameter variations (number of control
points, degree, positioning and number of the way-points,
etc) such that the results obtained are not trustworthy.
The one advantage of the latter over the former is that
it may provide a feasible solution for small values of n.
The collision avoidance between two agents is similar
and not depicted here. All the numerical simulations have

0

0

been done using Yalmip [19] and MPT Toolboxes [20] in
Matlab 2013a. The nonlinear solver used was the IPOPT
solver [21].

VI. Conclusions

This paper considers collision avoidance in a multi-
agent multi-obstacle framework. Using diﬀerential ﬂat-
ness for trajectory generation and B-splines for the ﬂat
output parametrization we show that the restriction
can be validated at all times. Exact and sub-optimal
constructions are provided. Future work may consist in
analysis of the feasibility of the problem, relaxation of
way-point restrictions (similar with work done in [8]),
etc.

Acknowledgments

This work was supported by a grant of the Romanian
National Authority for Scientiﬁc Research and Innova-
tion, CNCS – UEFISCDI, project number PN-II-RU-TE-
2014-4-2713.

References

[1] M. Burger and K. Pettersen, “Smooth transitions between
trajectory tracking and path following for single vehicles and
formations,” in Estimation and Control of Networked Systems,
2010, pp. 115–120.

[2] A. Aguiar and J. Hespanha, “Trajectory-tracking and path-
following of underactuated autonomous vehicles with para-
metric modeling uncertainty,” IEEE Transactions on Auto-
matic Control, vol. 52, no. 8, pp. 1362–1379, 2007.

[3] D. Mellinger, N. Michael, and V. Kumar, “Trajectory gen-
eration and control for precise aggressive maneuvers with
quadrotors,” The International Journal of Robotics Research,
pp. 027–36, 2012.

[4] I. Prodan, S. Bencatel, R.and Olaru, J. Sousa, C. Stoica, and
S.-I. Niculescu, “Receding horizon ﬂight control for trajectory
tracking of autonomous aerial vehicles,” Control Engineering
Practice, vol. 21, no. 10, pp. 1334–1349, 2013.

[5] J. De Doná, F. Suryawan, M. Seron, and J. Lévine, “A ﬂatness-
based iterative method for reference trajectory generation in
constrained nmpc,” in Nonlinear Model Predictive Control.
Springer, 2009, pp. 325–333.

[6] F. Suryawan, J. De Dona, and M. Seron, “Methods for tra-
jectory generation in a magnetic-levitation system under con-
straints,” in 18th Mediterranean Conference on Control and
Automation, 2010, pp. 945–950.

[7] F. Suryawan, “Constrained trajectory generation and fault
tolerant control based on diﬀerential ﬂatness and b-splines,”
Ph.D. dissertation, School of Electrical Engineering and Com-
puter Science, The University of Newcastle, Australia, 2012.
[8] F. Stoican, I. Prodan, , and D. Popescu, “Flat trajectory
generation for way-points relaxations and obstacle avoidance,”
2015, submitted for publication at MED 2015.

[9] M. Fliess, J. Lévine, P. Martin, and P. Rouchon, “Flatness
and defect of non-linear systems: introductory theory and
examples,” International journal of control, vol. 61, no. 6, pp.
1327–1361, 1995.

[10] J. Lévine, Analysis and control of nonlinear systems: A

ﬂatness-based approach. Springer Verlag, 2009.

[11] H. Sira-Ramírez and S. Agrawal, Diﬀerential Flatness. Mar-

[13] W. J. Gordon and R. F. Riesenfeld, “B-spline curves and
surfaces,” Computer Aided Geometric Design, vol. 167, p. 95,
1974.

[14] N. M. Patrikalakis and T. Maekawa, Shape interrogation for
computer aided design and manufacturing. Springer Science
& Business, 2009.

[12] J. Wilkinson, The algebraic eigenvalue problem. Oxford Univ.

cel Dekker, New York, 2004.

Press, 1965, vol. 155.

(a) various collision avoidance methods

(b) detail of the nonlinear case

(c) detail of the mixed-integer case

Fig. 2: Flat trajectories in a multi-obstacle environment.

[15] L. Piegl and W. Tiller, Curve and Surface Basics. Springer,

[16] M. Sion et al., “On general minimax theorems,” Paciﬁc J.

1995.

Math, vol. 8, no. 1, pp. 171–176, 1958.

[17] F. Stoican, I. Prodan, and D. Popescu, “Flat trajectory gen-
eration for way-points relaxations and obstacle avoidance,”
in Control and Automation (MED), 2015 23th Mediterranean
Conference on.

IEEE, 2015, pp. 695–700.

[18] J. Ferrez, K. Fukuda, and T. M. Liebling, “Cuts, zonotopes
and arrangements,” The sharpest Cut. SIAM Series on Opti-
mization, 2001.

[19] J. Löfberg, “Yalmip : A toolbox for modeling and optimization
in MATLAB,” in Proceedings of the CACSD Conference,
Taipei, Taiwan, 2004. [Online]. Available: http://users.isy.liu.
se/johanl/yalmip

[20] M. Kvasnica, P. Grieder, and M. Baotić, “Multi-Parametric
Toolbox (MPT),” 2004. [Online]. Available: http://control.ee.
ethz.ch/~mpt/

[21] A. Wachter and L. T. Biegler, “On the implementation of a
primal-dual interior point ﬁlter line search algorithm for large-
scale nonlinear programming,” Mathematical Programming,
vol. 106, no. 1, pp. 25–57, 2006.

−10−9−8−7−6−5−4−3−2−101234567−3−2−10123A(+++−−+++−)A(+−+−+++++)A(+−+++−−++)way-pointsnocollisionavoidancenonlinearcollisionavoidancemixed-integercollisionavoidance−10−8−6−4−20246−2−1.5−1−0.500.511.522.53p0p1p2p3p4p5p6p7H1H3ConvHull{p0...p5}ConvHull{p2...p7}−10−8−6−4−20246−2−1.5−1−0.500.511.522.53p0p1p2p3p4p5p6p7H01H03ConvHull{p0...p5}ConvHull{p2...p7}