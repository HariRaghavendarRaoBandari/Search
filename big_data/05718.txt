6
1
0
2

 
r
a

M
 
7
1

 
 
]

.

A
N
h
t
a
m

[
 
 

1
v
8
1
7
5
0

.

3
0
6
1
:
v
i
X
r
a

Lagrangian Particle Method for Compressible Fluid

Dynamics

Hsin-Chiang Chena, Roman Samulyak1a,b, Wei Lia

aDepartment of Applied Mathematics and Statistics, Stony Brook University, Stony

bComputational Science Center, Brookhaven National Laboratory, Upton, NY 11973

Brook, NY 11794

Abstract

A new Lagrangian particle method for solving Euler equations for com-
pressible inviscid ﬂuid or gas ﬂows is proposed. Similar to smoothed particle
hydrodynamics (SPH), the method represents ﬂuid cells with Lagrangian
particles and is suitable for the simulation of complex free surface / multi-
phase ﬂows. The main contributions of our method, which is diﬀerent from
SPH in all other aspects, are (a) signiﬁcant improvement of approximation
of diﬀerential operators based on a polynomial ﬁt via weighted least squares
approximation and the convergence of prescribed order, (b) an upwinding
second-order particle-based algorithm with limiter, providing accuracy and
long term stability, (c) elimination of the dependence on artiﬁcial parame-
ters such as the smoothening length in SPH, causing diﬃculties in the case
of large density changes, and (d) accurate resolution of states at free inter-
faces. Numerical veriﬁcation test demonstrating the convergence order are
presented as well as examples of complex free surface ﬂows.

Keywords: Lagrangian ﬂuid mechanics, particle method, generalized ﬁnite
diﬀerences
2000 MSC: 65M06, 70F99, 76T10

1. Introduction and Motivation

High resolution Lagrangian methods are essential for achieving predic-
tive simulations of a wide spectrum of complex free surface / multiphase

1Corresponding author, roman.samulyak@stonybrook.edu

Preprint submitted to Journal of Computational Physics

March 21, 2016

problems. Most widely used approaches for the simulation of multiphase
problems are based on Eulerian meshes enhanced with special algorithms for
resolving interfaces such as the volume-of-ﬂuid [3], the level set method [4],
arbitrary Lagrangian - Eulerian methods [5], or the method of front tracking
[6] which is a hybrid method involving a moving Lagrangian mesh over a
ﬁxed Eulerian mesh. In addition, they often use various adaptive features
such as adaptive mesh reﬁnement. These and ﬁnite element methods, most
common for engineering problems with irregular geometries, require complex
computationally intensive methods for the generation of high quality meshes.
Theoretically, the traditional Lagrangian formulation of ﬂuid dynamics
[2] is the basis for the most natural and accurate method for the simulation
of complex free surface and multiphase systems, but it suﬀers from the mesh
distortion problem in unsteady, turbulent ﬂows. As a result, the Lagrangian
methods are widely used only in 1D for all problems except the dynamics of
solids that is characterized by small deformations. The overwhelming ma-
jority of solid dynamics codes use ﬁnite element-based Lagrangian methods,
the fact that speaks for advantages of Lagrangian approaches within their
applicability range.

A way to extend the Lagrangian method to 3D was proposed in smooth
particle hydrodynamics (SPH). SPH [7, 8] is a Lagrangian particle method
in computational ﬂuid dynamics in which deforming Lagrangian cells are
replaced with particles. SPH eliminates the main mesh tangling diﬃculty
of the original Lagrangian method while retaining many of its advantages.
Due to its Lagrangian nature, SPH is strictly mass-conservative and capable
of robustly handling interfaces of arbitrary complexity in the simulation of
free surface and multiphase ﬂows. The representation of matter by parti-
cles provides adaptivity to density changes. Not only does this improve the
traditional adaptive mesh reﬁnement of structural meshes, that introduces
sharp boundaries between mesh patches of diﬀerent resolution, but also it
enables simulations of large ranges of spatial scales (for instance expansion
into vacuum and matter islands separated by large vacuum domains).

However the major drawback of SPH is a very poor accuracy of discrete
diﬀerential operators. It is widely accepted [10, 11], including original SPH
developers [8], that the traditional SPH discretization has zero-order con-
vergence for widely used kernels. The SPH discretization of derivatives is
convergent to the order consistent with the interpolating polynomial for the
kernel function only if particles are located on a rectangular mesh (which
is not the case for unsteady ﬂows). In addition, it depends on artiﬁcial pa-

2

rameters, in particular on the smoothening radius, causing major diﬃculties
in the case of large density changes. The reason why SPH produces sta-
ble and reasonable results for certain problems, despite using inaccurate and
non-convergent discretization of diﬀerential operators, is its connection to
the Lagrangian / Hamiltonian dynamics of particles [13]. In particular, the
traditional discrete SPH equations for the compressible Euler equations are
not accurate, but they accurately represent equations of the Lagrangian dy-
namics of particles interacting via isentropic potentials. The Lagrangian and
Hamiltonian properties are also responsible for the long term stability of the
traditional SPH. But the Hamiltonian dynamics of particles only approx-
imately represent the dynamics of continuum hydrodynamic systems, and
the isentropic interaction energy places additional restrictions.

A number of ’modern’ or ’corrected’ SPH methods have been developed
in recent years (see [10] and reviews [8, 11]). They include the moving-
least-squares SPH, ’Godunov’-SPH, P-SPH, PHANTOM etc. But they all
improve certain features of SPH at the expense of other properties such as
conservation, long-time stability, or prohibitively large number of neighbors
that causes other problems. They all still have zero-convergence order, except
for the 1st order convergent, moving-least-squates SPH [10], that suﬀers from
long-time stability and other issues. A new class of convergent, mesh-free
hydrodynamic simulation methods was developed in [11].

We have proposed a new Lagrangian particle method for solving com-
pressible Euler equations that eliminates major deﬁciencies of SPH: the de-
pendence on a parameter called smoothening length, the presence of large
linear errors in SPH diﬀerential operators, and ensures long term stability via
upwinding discretization methods. Signiﬁcantly diﬀerent from SPH in most
of approximations, our method is also easily generalizable to coupled system
of hyperbolic and elliptic or parabolic PDE’s for other physics processes.

In the Lagrangian particle method, approximations of spatial derivatives
are obtained by employing a local polynomial ﬁt known also as the gener-
alized ﬁnite diﬀerence (GFD) method [16]. The main idea is to ﬁnd closest
neighbors of each particle and approximate the spatial derivative of a certain
physical quantity the particle location as a linear combination of this quantity
at neighboring particles. The optimal coeﬃcients in this linear combination
are calculated by solving a least squares problem. Second order accurate
spatial discretization is used in the current algorithm, but the GFD method
makes it possible to use higher order discretizations with increased particle
neighborhoods. Our algorithms uses much smaller number of neighbor parti-

3

cles compared to the Godunov-SPH or other recent SPH modiﬁcations that
may require hundreds of particles [11]. An application example of the GFD
method to the advection-diﬀusion equation is given in [12].

The conservative Lagrangian formulation of Euler equations is trans-
formed into a quasi-linear form, and an upwinding scheme is employed for
the numerical integration. Multiple spatial dimensions are resolved using a
Strang splitting method for Euler equations. Research on algorithms for el-
liptic problems involving geometrically complex boundaries and interfaces is
in progress. Together with hyperbolic solvers, they form the basis for sim-
ulations of complex multiphysics and multiphase systems. The Lagrangian
particle method has been implemented in all dimensions, but algorithms for
a parallel code for solving three-dimensional Euler equations will be reported
in a forthcoming paper. The main goal of the present work is to introduce
main ideas of the Lagrangian particles dynamics and to present veriﬁcation
tests.

The paper is organized as follows. Section 2 contains the main governing
equations. Numerical discretization and main algorithms of the Lagrangian
particle dynamics are presented in Section 3. Section 4 presents veriﬁcation
tests and accuracy studies. We conclude this work by a summary of our
results and perspectives for the future work.

2. Governing Equations

Consider the one-dimensional Lagrangian formulation of the Euler equa-

tions, written in the conservative form [1, 2]

(cid:105)

(cid:48)
t +

U

(cid:104)
 , F (U

F (U

(cid:48)

(cid:48)

 V

u
E

(cid:48)

U

=

)

= 0,

x

) = V0

 −u

P
P u

 ,

(1)

(2)

where V is the speciﬁc volume, u is the velocity, E is the speciﬁc total energy,
and P is the pressure.
Let’s assume that the equation of state (EOS) is in the form e = f (P, V ),
where e is the speciﬁc internal energy, e = E − u2/2. Equations (1) and (2)
can be written using U = [V u P ]T as the state vector as follows

Ut + A(U )Ux = 0,

(3)

4

 V

u
P

U =

where

 0 −1 0
 , A(U ) = V0
(cid:19)(cid:30) ∂e
(cid:18)

0
1
0 K 0

0

K =

P +

∂e
∂V

.

∂P

For example, using the polytropic gas EOS

 ,

(4)

(5)

(6)

(7)

where γ is the ratio of speciﬁc heats, we obtain

e =

P V
γ − 1

,

 0 −1

0
1
0
0
0 ( c
V )2 0

 ,

A(U ) = V0

√

where c =
γP V is the speed of sound. Note that the transformation is
exact (i.e. not a result of linerization). If the matrix A is diagonalized as
A = RΛR−1, equations (3) and (4) become

where

R−1 =

 1

0
0 − 1
√
2
√
1
0
K

2

K

Ut + RΛR−1Ux = 0,
R−1Ut + ΛR−1Ux = 0,

 1

− 1
− 1

1
K

2K

 , R =
 0 √

K

2K



−√

K

Λ = V0

1

0 −√
√
1
K
0 −K −K

K

 ,

(8)

(9)

Based on the governing equations (8) and (9), we have developed stable,
particle-based, upwinding numerical schemes for the system of Euler’s equa-
tions. Details are described in the next section.

5

3. Numerical Discretization and Main Algorithms

3.1. Discrete Lagrangian Equtions

To solve numerically the hyperbolic system of PDE’s (8) and (9), the
medium (compressible ﬂuid or gas) is discretized by a distribution of particles.
Each particle represents a Lagrangian ﬂuid cell of equal mass, and stores
states of the continuum medium such as density (that is proportional to the
number density of Lagrangian particles), pressure, internal energy, velocity,
as well as material properties and pointers to data structures containing
material models, such as the EOS.

To construct a Lagrangian upwinding scheme, we represent the system

(8)-(9) in the following component-wise form

1
Vt +
K
ut − 1
2K
ut − 1
2K

√
− 1
2
K
√
1
2
K

(cid:20)
(cid:20) 1

K

Pt = 0,
Pt = −V0
√

Pt = V0

√

K

ux − 1
2K

√
− 1
2
K
ux − 1
2K

√
2
K

(cid:21)

Px

.

Px

(cid:21)

,

(10)

(11)

(12)

As K > 0 for a thermodynamically consistent EOS, equation (11) describes
waves propagating from left to right, and equation (12) describes waves prop-
agating from right to left. For an upwinding scheme, the spatial derivatives
ux and Px will be computed on stencils within the corresponding physical
domains of dependence. Adding the subscripts l and r to the spatial deriva-
tives in equations (11) and (12), respectively, to indicate that these terms, in
the discrete form, will be computed using one-sided derivatives, and solving
for the temporal derivatives, we obtain

Vt =

2

ut =
Pt = −V0K
2

V0
2
V0

(Pxr − Pxl) ,

√
(uxr + uxl) − V0
√
2
K
(uxr − uxl) − V0
(Pxr + Pxl) ,
√
2
K
V0

K

(uxr + uxl) +

2

(Pxr − Pxl) .

(13)

(14)

(15)

An important component of a particle-based numerical scheme is the cal-
culation of diﬀerential operators based on states at the location of particles.

6

In Section 3.3, we describe in detail a method for both numerical diﬀerenti-
ation and interpolation based on local polynomial ﬁtting. In this section, we
simply assume that we can compute numerical approximations of diﬀerential
operators with a desired degree of accuracy on particle-based stencils located
in the physical domains of dependance.

The ﬁrst-order (O(∆t, ∆x) upwinding discretization of the system (13-
14) is obtained by the 1st order discretization of spatial derivatives based
on the local polynomial ﬁtting, and the 1st order discretization of temporal
derivatives of the state (V, u or P ) at the location of particle j,

staten+1

j − staten
∆t

j

.

After the updates of states of each Lagrangian particle, particles are advanced
by a mixture of the forward Euler scheme and backward Euler scheme:

xn+1 − xn

∆t

=

1
2

(cid:0)un + un+1(cid:1)

(16)

The ﬁrst order scheme is stable, provided that the standard CFL condition
is satisﬁed: dt <= l/c, where l is the smallest interparticle distance, but
diﬀusive. To reduce the amount of numerical diﬀusion of the 1st order scheme
and obtain a higher order approximation on space and time, we propose a
modiﬁed Beam-Warming scheme for the Lagrangian particle system. For the
same reason as in the original work on the Beam-Warming method [14], an
additional term is added to equation (3):

Ut + A(U )Ux − ∆t
2
⇒ Ut = −RΛR−1Ux +
⇒ R−1Ut = −ΛR−1Ux +

A2(U )Uxx = 0
∆t
RΛ2R−1Uxx
2
∆t
Λ2R−1Uxx.
2

(17)

7

Equations (11) and (12) then become
√

√
− 1
2
K

ut − 1
2K

Pt = −V0

K

Pxl

(cid:20)
(cid:20)
(cid:20) 1
(cid:20) 1

√
2
K
√
2

uxl − 1
2K
uxxl − 1
2K

√
− 1
2
K
√
− 1
2
K
uxr − 1
2K
uxxr − 1
2K

Pxr

K

(cid:21)

(cid:21)

(cid:21)

(cid:21)

Pxxl

,

(18)

Pxxr

.

(19)

√
1
2
K

ut − 1
2K

+

∆t
V 2
0 K
2
√

Pt = V0

K

+

∆t
2

V 2
0 K

Solving equations (10), (18) and (19) yields

Vt =

+

√
(uxr + uxl) − V0
2
K

(Pxr − Pxl) ,

K (uxxr − uxxl) − V 2

0 (Pxxr + Pxxl)

(cid:105)

,

(Pxr + Pxl) ,

ut =

2
∆t
4

(uxr − uxl) − V0
2
0 K (uxxr + uxxl) − V 2
V 2
√
Pt = −V0K
K
2

(uxr + uxl) +

V0

+

2

0

√

K (Pxxr − Pxxl)

(Pxr − Pxl) ,

V0
2
∆t
√
4
V0

√

K

V 2
0

(cid:104)
(cid:104)
(cid:104)−V 2

(20)

,

(21)

(cid:105)

(cid:105)

+

∆t
4

3

2 (uxxr − uxxl) + V 2

0 K

0 K (Pxxr + Pxxl)

.

(22)

By discretizing spatial derivatives using the second order local polynomial
ﬁtting, as described in Section 3.3, we obtaine numerical scheme that is
second order in both time and space, O(∆t2, ∆x2, ∆t∆x), and conditionally
stable. The CFL condition is simlar to the one of the grid-based Beam-
Warming scheme: in 1D, dt <= 2l/max(c, u). Note that time steps can be
twice larger compared to the 1st order scheme.

3.2. Time Integration and Directional Splitting

In this section, we focus on details of multidimensional schemes. We
present explicit formulas for equations in the three-dimensional space. The
system in the two-dimensional space is obtained by obvious reductions.

8

In the three-dimensional space, the conservative form of the Lagrangian

formulation of the Euler equations is:

(cid:104)

(cid:48)
t +

U

(cid:48)

F1(U

)

(cid:48)

)

(cid:48)

)

+

x

+

y

(cid:105)

(cid:104)

(cid:105)

F3(U

F2(U

(cid:105)
(cid:104)
=(cid:2) V u v w E (cid:3)T ,
 , F2(U
 , F3(U



) = V0

(cid:48)

U

(cid:48)

−v
0
P
0
P v

where

(cid:48)

F1(U

) = V0



−u
P
0
0
P u

= 0,

(23)

z



−w
0
0
P
P w

 .

(cid:48)

) = V0

(24)
Assuming that the EOS is of the form e = f (P, V ) and using U = [V u v w
P ]T as the state vector, we can rewrite the equations in the following form

where



A2 = V0

 ,



U =

V
u
v
w
P

Ut + A1Ux + A2Uy + A3Uz = 0,

0 −1 0 0 0
0 0 1
0
0
0 0 0
0
0 0 0
0 K 0 0 0

0
0
0

 , A1 = V0

 , A3 = V0



0 0 −1 0 0
0 0
0 0
0 1
0 0
0 0
0 0
0 0 K 0 0

0
0
0

0 0 0 −1 0
0
0 0 0
0
0 0 0
0 0 0
1
0 0 0 K 0

0
0
0

(25)

(26)

 ,

where K is deﬁned in equation (5). We solve the system of hyperbolic PDEs
(25 - 26) by using the directional splitting method by Strang [15]. Speciﬁcally,
instead of solving equation (25), one solves separately the following three
system of PDEs:

Ut + 3A1Ux = 0,
Ut + 3A2Uy = 0,
Ut + 3A3Uz = 0,

9

(27)
(28)
(29)

which is equivalent to solving

U1t + 3AU1x = 0,
U2t + 3AU2y = 0,
U3t + 3AU3z = 0,

u
P

U1 =

where

 V
order 

 , U2 =


(0)

v
P

 V


(30)−−→

V
u
v
w
p

 , U3 =


( ∆t
6 )

w
P

 V


(31)−−→

(30)
(31)
(32)

 . (33)

0

0
1
0 K 0

 0 −1 0



V
u
v
w
p

( 4∆t
6 )

 , A = V0





( 2∆t
6 )

V
u
v
w
p

(∆t)

V
u
v
w
p

(32)−−→

Each of the three system of equations (30) - (32) is solved by the techniques
introduced in section 3.1, and the solutions are combined in the following

( 5∆t
6 )



V
u
v
w
p

V
u
v
w
p



(cid:18)
(cid:18)
(cid:18)

(31)−−→

(30)−−→

(34)

where ∆t denotes one discrete time step satisfying the CFL condition. The
Strang splitting method maintains the second order of accuracy if the accu-
racy of each step is not lower than second, making it unnecessary for the 1st
order numerical scheme. To implement the modiﬁed Beam-Warming scheme
within the Strang splitting steps (30) - (32), we solve the following equations

(cid:19)
(cid:19)
(cid:19)

U1t + 3

U2t + 3

U3t + 3

AU1x − ∆t
2
AU2y − ∆t
2
AU3z − ∆t
2

A2U1xx

A2U2yy

A2U3zz

= 0,

= 0,

= 0.

(35)

(36)

(37)

10

The solutions to equations (35) - (37) are then combined by equation (34)
to obtain the complete second order solution to equation (25).

3.3. Local Polynomial Fitting

The local polynomial ﬁtting on arbitrary sets of points has long been
used to obtain approximation of functions and their derivatives. Details of
the method and its accurracy is discussed in [16, 18, 19]. Generally, νth order
derivative can be approximated with (n − ν + 1)th order of accuracy using
nth order polynomial. For simplicity, a 2D example is discussed here. In the
vicinity of a point 0, the function value in the location of a point i can be
expressed by the Taylor series as

(cid:19)

(cid:12)(cid:12)(cid:12)(cid:12)0

(cid:12)(cid:12)(cid:12)(cid:12)0

(cid:18)

(cid:12)(cid:12)(cid:12)(cid:12)0

(cid:12)(cid:12)(cid:12)(cid:12)0

(cid:12)(cid:12)(cid:12)(cid:12)0

Ui = U0+hi

∂U
∂x

+ki

∂U
∂y

+

1
2

h2
i

∂2U
∂x2

+ k2
i

∂2U
∂y2

+ 2hiki

∂2U
∂x∂y

+. . . ,

(38)
where Ui and U0 are the corresponding function values in the location of
points i and 0, hi = xi − x0, ki = yi − y0, and the derivatives are calculated
in the location of the point 0. A polynomial can be used to approximate the
original function and we employ a second order polynomial in this example:

˜U = U0 + hiθ1 + kiθ2 +

1
2

h2
i θ3 +

1
2

k2
i θ4 + hikiθ5.

(39)

∂y , ∂2U
Here the variables θ1, θ2, θ3, θ4 and θ5 are the estimates for ∂U
∂x2 ,
∂2U
∂y2 , and ∂2U
∂x∂y , respectively. In order to compute values of these variables,
we perform a local polynomial ﬁtting using m >= 5 points in the vicinity of
center point 0. The following linear system Ax = b

∂x , ∂U

h1 k1

h2 k2
...
...
hn kn





θ1
θ2
θ3
θ4
θ5

 =

 U1 − U0

U2 − U0

Un − U0

...

 ,

1

1

1

2

2h2
2h2
...
2h2

1

n

1

1

2k2
2k2
...
2k2

1 h1k1
2 h2k2
...
n hnkn

1

(40)

is usually overdetermined. As a proper selection of a neighborhood is im-
portant for accuracy and stability, neighbor search algorithms used in our
upwind solvers are described in the next subsection.

An optimal solution to (40) is a solution x that minimizes the L2 norm

of the residual, i.e.,

min(cid:107)Ax − b(cid:107)2,

11

(41)

and the QR decomposition with column pivoting is employed to obtain x.
Suppose

A = Q

P T , m ≥ n,

(42)

(cid:20)R

(cid:21)

0

where Q is an orthonomal matrix, R is an upper triangle matrix, and P is a
permutation matrix, chosen (in general) so that

|r11| ≥ |r22| ≥ ··· ≥ |rnn|.

(43)

Moreover, for each k,

|rkk| ≥ (cid:107)Rk:j,j(cid:107)2

(44)
for j = k + 1,··· , n. One can numerically determine an index k, such that
the leading submatrix R11 in the ﬁrst k rows and columns is well conditioned
and R22 is negligible:

(cid:20)R11 R12

(cid:21)

0 R22

(cid:20)R11 R12

(cid:21)

0

0

(cid:39)

R =

where c1 is the ﬁrst k elements of c = QT b. This can also be written as

where

A+ = P

is the pseudoinverse of matrix A.

x = A+b,

(cid:20)R−1

11
0

(cid:21)

0
0

QT

12

Then k is the eﬀective rank of A. Discussion about the numerical rank de-
termination can be found in [20]. A simple way to determine numerical rank
is to set a tolerance  and ﬁnd the ﬁrst k such that

(46)
If there is such k, then the eﬀective numerical rank is k − 1. The choice of 
is 10−3 in many of the test problems discussed in later sections. The solution
for linear system (40) can be obtained as

Rkk < R11.

(cid:21)

(cid:20) R−1

11 c1
0

x = P

(45)

(47)

(48)

(49)

3.4. The neighbor Search Algorithm and Dynamic Stencil Selection

In a simulation involving N Lagrangian particles, a new stencil of neigh-
bors - those particles used for solving equation (40) - is to be selected at the
begining of each time step for all the N particles. As a result, it is critical
that an eﬃcient neighbor search algorithm is employed. The neighbor search
method is described in the next subsection. While the neighbor search is
to obtain a group of particles lying within some pre-speciﬁed distance away
from the particle of interest, it is not necessary that all these neighbors are
used in numerical stencils. The selection of stencil points from neighbors to
ensure the accuracy and stability is discussed in Subsection 3.4.2.

3.4.1. Neighbor Search Algorithms

One of the main advantagees of the Lagrangian particle method compared
to grid-based methods is its ability to simulate large and extremely non-
uniform domains. By a non-uniform domain we mean a domain in which only
a small fraction of the total volume occupied by matter, found typically in
astrophysics and high energy density physics, and other applications dealing
with dispersed fragments of matter. For these applications, we use 2k-tree
neighbor search algorithms [21]. The 2k-tree is a tree data structure in a k-
dimensional space in which each node has at most 2k dependents. Quadtree
and octree are the standard terms in 2D and 3D spaces, respectively. The tree
construction can be performed with O(N log N ) operation. In this process,
the choice of the tree depth is essential and the optimal empirical number is
four or ﬁve. After the construction step, the search of a tree for obtaining
the neighborhood of a particle can be performed with O(log N ) operation.

However the 2k-tree method is not universally optimal for all types of
problems.
If the computational domain is almost uniformly ﬁlled with a
weakly compressible matter in which inter-particle distances change insignif-
icantly during the simulation allowing the use of the same neighbor search
radius for all particles, the search of neighbors can be performed in constant
time. In this case, we use the bucket search algorithm [9]. The entire compu-
tational domain is divided into square (cubic) cells of the side length equal
to the search radius r. For each particle inside a cell, only the neighboring
cells need to be considered in the search process. Clearly, the method is not
optimal if the location of matter in the space is very sparse, and is not appli-
cable if diﬀerent search radii must be used for diﬀerent particles. The 2k-tree
neighbor search algorithm is more universal and applicable to a wide range

13

of problems. In a forthcoming paper, we will describe an optimal parallel
octree neighbor search algorithm for a 3D Lagrangian particle code.

3.4.2. Dynamic stencil selection

After the neighbor search step, each particle obtains a list of neighbors
which lie within the range of a pre-speciﬁed search radius. To enforce up-
winding, however, only one-sided information should be used when solving
equation (40). For the calculation of one-sided derivatives, each particle will,
in general, have four one-sided neighborhoods in two-dimensions, and six
neighborhoods in three-dimensions.

Without loss of generality, the process of the dynamic stencil selection
will be discussed using an example of computing uxr. After gathering one-
sided neighbors, two main issues must be resolved for accurate evaluation of
spatial derivatives. The ﬁrst one is related to the shape of the neighborhood.
The list of one-sided neighbors is sorted by their distance from the center
particle in ascending order. Suppose we obtain the following sorted list of
neighbors of the particle 0 for computing uxr:

{p1u, p2u, p3l, p4u, p5u, p6u, p7l, p8u, p9l} .

Here the subscripts u and l indicate the upper and lower half-planes in the
y-direction: yi >= y0 and yi < y0, respectively. If a simple distance-based
algorithm picks up six neighbors, then the corresponding stencil is composed
of

{p1u, p2u, p3l, p4u, p5u, p6u} ,

thus producing a highly unbalanced stencil in terms of the shape. Therefore,
besides sorting neighbors in ascending order of the distance from the center
particle, the order is rearranged such that neighbors from the upper half and
lower half occur interchangeably in the list

{p1u, p3l, p2u, p7l, p4u, p9l, p5u, p6u, p8u}

The six-particle stencil now becomes:

{p1u, p3l, p2u, p7l, p4u, p9d}

This approach yields more balanced-in-shape stencils, and typically results
in more accurate spatial derivatives.

14

The second issue is the optimization of the number of neighbors for solv-
ing equation (40). In the case of second order local polynomial ﬁtting, for
example, ﬁve neighbors are required to solve equation (40). However, as
equation (46) suggests, the eﬀective rank of the matrix A in equation (40)
may be less than ﬁve if

Rkk < R11, k = 2, 3, 4, 5.

(50)

To avoid rank deﬁciency, a dynamic process for selecting neighbors into the
stencil is designed. First, select the tolerance parameter  as in equation (46).
For the case of second order local polynomial ﬁtting, one starts with ﬁve or
six neighbors in the stencil. Based on this stencil, the QR decomposition
with column pivoting is performed. Then determine the eﬀective rank by
equation (46). If the eﬀective rank is no less than ﬁve, the stencil is complete.
Otherwise, the next neighbor in the neighbor list is added to the stencil. The
process continues until the eﬀective rank is regained. For instance, in some
cases one may need to use seven neighbors to gain an eﬀective rank of ﬁve.
Our algorithms uses much smaller number of neighbor particles compared to
the modiﬁed versions of SPH such as Godunov-SPH, P-SPH, PHANTOM
etc. that may require hundreds of particles [11].

In certain cases, the neighbor list may not contain suﬃcient number of
particles needed by a stencil.
In such a case, one may consider lowering
the order of local polynomial ﬁtting for this particle in the given direction.
Lowering to ﬁrst order local polynomial ﬁtting requires only an eﬀective rank
of two for the two-dimensional case.

3.5. Limiters

The second order Lagrangian particle algorithm based on the modiﬁed
Beam-Warming scheme is dispersive. To eliminate the resulting oscillations,
a new type of limiter based on divided diﬀerence was developed and coupled
with the numerical integration. The application of the algorithm with the
limiter is demonstrated in section 4.

In the ﬂux-limiter method [] TODO, the magnitude of the correction
depends on the smoothness of data (represented by Φ), and can be written
as

F (U ; j) = FL(U ; j) + Φ(U ; j)[FH(U ; j) − FL(U ; j)]

(51)

15

In order to measure the smoothness of data, we can use the ratio of consec-
utive gradients:

θj =

Uj − Uj−1
Uj+1 − Uj

(cid:18) Uj − Uj−1

Uj+1 − Uj

1
2

θj =

Uj+1 − Uj
Uj − Uj−1

+

(cid:19)

(52)

(53)

Or we can use the average of the ratio of consecutive gradients from both
directions:

Equation (53) has the advantage that it is symmetric. If θj is near 1 the data
is presumably smooth. If θj is far from 1 there may be discontinuity near
data Uj. Let Φ(U ; j) ≡ φj to be a function of θj:

Van Leer [? ] proposed a smooth limiter function

φj = φ(θj)

φ(θ) =

|θ| + θ
1 + |θ|

(54)

(55)

We let φ(θ) = 0 for θ < 0 or when θ is arbitrarily large. Nore that θ < 0 in
the case when Uj+1−Uj and Uj−Uj−1 are in opposite signs in both equations
(52) and (53)). θ is arbitrarily large when Uj+1 − Uj = 0 in equation (52)
and when Uj+1 − Uj = 0 or Uj − Uj−1 = 0 in equation (53).

Without loss of generality, we demonstrate the idea using the ﬂux for
volume. Remind that in the proposed Lagrangian particle method the volume
ﬂux is deﬁned as (equation (??))

(cid:104)

Vt =

+

V0
2
∆t
4

√

V 2
0

√
(uxr + uxl) − V0
2
K

(Pxr − Pxl)

K (uxxr − uxxl) − V 2

(cid:0)uxr(1) + uxl(1)

(cid:1) − V0

√
2

K

FL(V ) =

V0
2

0 (Pxxr + Pxxl)

(cid:105)
(cid:0)Pxr(1) − Pxl(1)

(cid:1)

Let the lower order ﬂux (ﬁrst order ﬂux) of volume be deﬁned as

(56)

(57)

where the subscript (1) denotes the spatial derivatives obtained by ﬁrst order
polynomial ﬁtting. Then deﬁne the higher order ﬂux (second order ﬂux) of

16

volume be deﬁned as

FH(V ) =

+

V0
2
∆t
4

(cid:0)uxr(2) + uxl(2)
(cid:104)

(cid:1) − V0
K(cid:0)uxxr(2) − uxxl(2)

√
2

√

K

V 2
0

(cid:1)

(cid:0)Pxr(2) − Pxl(2)
(cid:1) − V 2

(cid:0)Pxxr(2) + Pxxl(2)

0

(cid:1)(cid:105)

(58)

where the subscript (2) denotes the spatial derivatives obtained by second
order polynomial ﬁtting.

In order to make the measure of the smoothness of data (θ) generalizable
to higher dimensions and applicable to the Lagrangian particle mehtod, we
propose using the one-sided spatial derivatives calculated by methods intro-
duced in section 3.3. Depneding on the type of data we have, θ of a particle
j is calculated as:

θj(u) =

θj(P ) =

uxl(1)
uxr(1)
Pxl(1)
Pxr(1)

(59)

(60)

where u is the velocity in the x, y, or z-direction and P is the pressure.
Alternatively, we can also use

(cid:18) uxl(1)
(cid:18) Pxl(1)

uxr(1)

Pxr(1)

θj(u) =

θj(P ) =

1
2
1
2

(cid:19)
(cid:19)

+

+

uxr(1)
uxl(1)
Pxr(1)
Pxl(1)

(61)

(62)

Note that equations (61) and (62) are better over (59) and (60) since they
are symmetric. We choose

θj = min(θj(u), θj(P ))

(63)

and calculate φj by (55). Note that we set φj = 0 when θj < 0 or θj is
arbitrarily large. Substituting the calculated φj, the lower and higher ﬂux in
(57) and (58) into (51), we obtain the volume ﬂux of particle j as:

Fj(V ) = FL(V ; j) + φj[FH(V ; j) − FL(V ; j)]

Then time integration gives the volume at next time step as:

V n+1 = V n + ∆tFj(V )

17

(64)

(65)

Similarly to [22], we use the divided diﬀerences to detect the region that
contains discontinuities. However, while the method of divided diﬀerences is
used in [22] for choosing one of diﬀerent stencils, it is employed in our work
for switching between high order and low order discretization schemes.

The proposed limiter works as a switch between higher and lower order

schemes to avoid the oscillatory behavior.

3.6. Modelling of Free Surfaces using Ghost Particles

An important feature of the Lagrangian particle method is its ability to
robustly handle free surface ﬂows with geometrically complex interfaces. The
method is also generalizable to multiphase problems. Here by free surface
ﬂows we mean ﬂows of ﬂuid or gas in vacuum, and by multiphase problem
we mean the interface dynamics between two immiscible ﬂuids or gases. In
this section, we describe an algorithm for physically consistent solutions at
free ﬂuid or gas interfaces.

The ﬂuid / vacuum interface is modeled in our method by using ghost
particles in the vacuum region. A geometric algorithm places patches of
ghost particles outside the ﬂuid boundary, ensures their proper distance to
the interface, and eliminates those particles that were placed too closely or
inside the ﬂuid. Then the ghost particles are assigned physics states. The
only functionality of ghost particles is to serve as neighbors of ﬂuid particles
when calculating spatial derivatives. Hence, only two states are relevant:
pressure and velocity. As ghost particles represent vacuum, their pressure
state is assigned to zero. A weighted 0th order local polynomial ﬁtting is
used to assign velocity states to ghost particles. This involves computing the
weighted average of velocities of the ﬂuid particles that are in a neighborhood
of the ghost particle. Let’s assume that the weighting function of the particle
0 in a three-dimensional space is w(hj, kj, gj), where hj = xj−x0, kj = yj−y0,
gj = zj − z0, and j is the index of neighbor particles. The velocity u0 of
particle 0 satisﬁes

N(cid:88)

j=1

min
u0

which leads to the solution

[(u0 − uj)w(hj, kj, gj)]2 ,

u0 =

(cid:80)N
(cid:80)N

j=1 ujw2
j
j=1 w2
j

18

(66)

(67)

This simple algorithm adequately handles the ﬂuid / vacuum interface, but
a Riemann solver-based algorithm will be used for interfaces in multiphase
problems.

4. Numerical Results

In this section, we present results of one- and two-dimensional simulation
that serve as veriﬁcation tests for the Lagrangian particle method, including
the free surface algorithm.

4.1. 1D Gaussian Pressure Wave Propagation with Periodic Boundaries

We study the propagation of a pressure wave in gas with the constant

initial density ρ = 0.01 and the initial Gaussian pressure distribution

p = 5 + 2e−100x2

(68)
in the domain −1.5 ≤ x ≤ 1.5 with periodic boundaries on both ends. The
polytropic gas EOS is used with γ = 5/3. The goal of the simulation is to
demonstrate the accuracy of the proposed algorithm in resolving nonlinear
waves with the formation of shocks. The benchmark data is obtained using
a highly reﬁned, grid-based MUSCL scheme. The results, shown in Figure
1, are labeled as 1st for the ﬁrst order local polynomial ﬁtting, B.W. for the
Beam-Warming scheme with second order local polynomial ﬁtting, and B.W.
lim. for the Beam-Warming scheme with the second order local polynomial
ﬁtting with limiter, respectively. As expected, ﬁrst order scheme is diﬀusive,
while the Beam-Warming scheme is dispersive near discontinuities. However,
results demonstrates that the proposed limiter method eﬀectively reduces
dispersions near sharp edges, resulting in maintaining globally the second
order of convergence.

We have also veriﬁed that the Lagrangian particle methods accurately
resolves waves in stiﬀ materials. We use the same initial pressure as before,
but replace the polytropic EOS with the stiﬀened polytropic EOS

E =

(P + γP∞) V

γ − 1

(69)

with γ = 6 and P∞ = 7000. The convergence results can be found in Tables
1 and 2. In both cases, the second order convergence is obtained.

19

Figure 1: Gaussian pressure wave propagation with periodic boundaries at time 0.03
(top) and 0.04 (bottom). Coarse-resolution simulations results were used to illustrate the
behavior qualitatively.

20

Number of particles Relative L2-norm error Rate of Convergence
240
480
960
1920
3840
7680

0.051
0.018
0.0049
0.0012
0.00029
0.000068

NA
2.88
3.60
4.02
4.23
4.24

Table 1: Convergence for the polytropic gas EOS case with γ = 5
ρ0 = 1
V0

= 0.01

3 and initial density

Number of particles Relative L2-norm error Rate of convergence
240
480
960
1920
3840
7680

0.069
0.021
0.0056
0.0014
0.00035
0.000093

NA
3.23
3.84
3.97
4.0
3.8

Table 2: Convergence for the stiﬀened polytropic gas EOS case with γ = 6, P∞ = 7000,
and initial density ρ0 = 1
V0

= 1

21

Figure 2: 2D Gaussian pressure wave propagation in disk with free surface. Pressure
distribution (bar) at initial time (left), 10 (middle), and 60 (right).

4.2. 2D Gaussian Pressure Wave Propagation with Free Surface

To test the proposed algorithm for two-dimensional problems involving
free surfaces, a circular disk of particles with stiﬀened polytropic gas EOS
(with γ = 6, P∞ = 7000, and ρ = 1) and a Gaussian pressure proﬁle was
initialized. The results are presented in two dimensions in Figure 2. Note
that the latest-time plot in Figure 2 represents the state when the pressure
waves have been reﬂected from the oscillatory free surface for more than ten
times. To verify the accuracy, the analogous one-dimensional problem with
cylindrical coordinates under the Eulerian formulation was solved using a
reﬁned MUSCL scheme with the method of front tracking for the free surface
implemented in the FronTier code [6]. The location and shape of the pressure
wave and the interface as well as the oscillatory motion of the free surface
are in good agreement with the FronTier simulation. The veriﬁcation test
and the fact that the pressure wave maintains good symmetry after many
reﬂections from the free surface demonstrate that the method for modeling
vacuum introduced in section 3.6 works well with the proposed algorithm.

4.3. 2D Shock Tube Problem
4.4. Gresho Vortex

The Gresho problem is a steady-state rotating vortex roblem that has an
exact analytic solution in the case of Euler equations [23]. Gresho vortex is
a, inviscid gas vortex with such a radial distribution of the angular velocity
uφ and pressure, that the centripital force is compensated by the gradient of

22

pressure:

(uφ(r), p(r)) =



(cid:0)5r, 5 + 25
2 r2(cid:1) ,
(cid:0)2 − 5r, 9 − 4 ln 0.2 + 25

(0, 3 + 4 ln 2) ,

2 r2 − 20r + 4 ln r(cid:1) , 0.3 ≤ r ≤ 0.4,

0 ≤ r ≤ 0.2,
0.4 ≤ r.

(70)
This problem, known to be notoriously diﬃcult for SPH, tests the accu-
racy of numerical scheme and its ability to preserve the symetry and angular
momentum. The empirical is order of accuracy of second-order grid-based
schemes for this problem, reported in literature, is approximately 1.4. Figure
3 shows the analytic solution and numerical simulation results of the vortex
after one full rotation obtained with the Lagrangian particle method. The
convergence is of second order at the initial stages of rotation, and it degrades
to the ﬁrst order in the later stages of rotation due to particle redistribution.
For comparison, in Figure 4 we show simulations performed using grid-based
schemes at the same numeircal resolution.

4.5. 2D Collision Between Two Circular Disks

In previous test problems, particles are initialized using regular distribu-
tions, such as the hexagonal packing, and slightly move with the ﬂow. Never-
theless, the magnitude of the particle movement is quite restricted in previous
tests, usually less than ﬁve percent of the initial inter-particle-spacing. In
this section, a geometrically complex two-dimensional problem with large
particle movement and object shape distortion is presented.

The setup of the problem is as follows. Two ﬂuid disks have initially
uniform density ρ = 1 and zero pressure, and material properties described
by the stiﬀened polytropic EOS with γ = 6 and P∞ = 7000. The two disks
move toward each other with the relative longitudinal velocity of 20, but
along lines that do not connect their centers. The time sequence shows the
distortion of disks after the collision. While no benchmark data exists for
such a problem, we believe that the results are reasonable from physics point
of view as they agree with theoretical estimates of achievable pressure peaks.
They demonstrate the ability of the proposed method to handle geometrically
complex interfaces.

4.6. Gas expansion into Vacuum
5. Conclusions and Future Work

A Lagrangian particle method has been proposed for the simulation of
Euler equations describing compressible inviscid ﬂuids or gases. By repre-

23

(a) Pressure, t=0

(b) Pressure, t=1

(c) Velocity, t=0

(d) Velocity, t=1

Figure 3: Exact solution (left column) and LP simulation (right column) of the Gresho
vortex. Top row images depict pressure and bottom row images depict density.

24

(a) MUSCL, pressure

(b) MUSCL, velocity

(c) LF, pressure

(d) LF, velocity

Figure 4: Simulations of the Gresho vortex using MUSC scheme (top row images) and
Lax Friedrichs scheme (bottom row images). Left column of images depict pressure and
right column of images depict density.

25

Figure 5: 2D simulation of collision of two disks. Velocity distribution (10 m/s) at initial
time (left), 21 (middle), and 54 (right).

senting Lagrangian ﬂuid cells with particles, similarly to smoothed particle
hydrodynamics, the method eliminates the mesh distortion problem of the
original Lagrangian method and is suitable for the simulation of complex
free surface ﬂows. The main contributions of our method, which is diﬀerent
from SPH in all other aspects, are (a) signiﬁcant improvement of approxima-
tion of diﬀerential operators based on polynomial ﬁts and the corresponding
weighted least squares problems and convergence of prescribed order, (b) an
upwinding second-order particle-based algorithm with limiter, providing ac-
curacy and long term stability, (c) elimination of the dependence on artiﬁcial
parameters such as the smoothening length in SPH, causing diﬃculties es-
pecially in the case of large density changes, and (d) accurate resolution of
states at free interfaces. Numerical veriﬁcation tests demonstrate the sec-
ond convergence order of the method and its ability to resolve complex free
surface ﬂows.

The Lagrangian particle method has numerous advantages compared to
grid-based methods for the simulation of complex systems. It eliminates the
need for complex and costly algorithms for the generation and adaptation
of meshes, provides continuos adaptivity to density changes, and is suitable
for extremely non-uniform domains typical for astrophysics or high energy
density applications. The algorithmic complexity of key particle methods in-
signiﬁcantly increases with the increase of spatial dimensions, making a 3D
code similar to a 1D code. In addition, particle algorithms are independent
of the geometric complexity of domains. In contrast, there is a huge increase
in algorithmic complexity of a 3D mesh generation and dynamic adapta-
tion compared to 1D as well as the increase associated with the geometric
complexity of domains.

26

The future development of the space-time discretization methods will
explore new high resolution WENO-type solvers based on irregularly placed
particle nodes and symplectic integrators. Our Lagrangian particle method
is also generalizable to coupled multiphysics systems, including the dynamics
of plasmas, incompressible ﬂuids, and fracture of solids.

Acknowledgement. This research has been partially supported by the
DOE Muon Accelerator Program. This manuscript has been authored in part
by Brookhaven Science Associates, LLC, under Contract No. de-sc0012704
with the US Department of Energy. The United States Government re-
tains, and the publisher, by accepting the article for publication, acknowl-
edges, a world-wide license to publish or reproduce the published form of
this manuscript, or allow others to do so, for the United States Government
purpose.

References

[1] R.D. Richtmyer, K.W. Morton, Finite diference methods for initial value

problems, Interscience, New York - London - Sydney, 1967.

[2] H. Lamb, Hydrodynamics, Cambridge Univ. Press,

[3] Hirt, C.W., Nichols, B.D. (1981), ”Volume of ﬂuid (VOF) method for

the dynamics of free boundaries”, J. Comput. Phys., 39 (1): 201225

[4] S. Osher, R. Fedkiw, Level Set Methods and Dynamic Implicit Surfaces,

2002, Springer-Verlag.

[5] C.W. Hirt, A.A. Amsden, J.L. Cook, An arbitrary Lagrangian-Eulerian
computing method for a;; ﬂow speeds, J. Comput. Phys, 135 (1997),
203-216.

[6] B. Fix, J. Glimm, X. Li, Y. Li, X. Liu, R. Samulyak, and Z. Xu. A
TSTT integrated Frontier Code and its applications in computational
ﬂuid physics. Journal of Physics: Conf. Series, 16:471–475, 2005.

[7] J. J. Monaghan, Smoothed Particle Hydrodynamics, In: Annual review

of astronomy and astrophysics. Vol. 30, p. 543-574. 1992.

[8] J. J. Monaghan, Smoothed particle hydrodynamics, Rep. Prog. Phys.,

68 (2005), 1703 – 1759.

27

[9] J. J. Monaghan, J. C. Lattanzio. A Reﬁned Particle Method for Astro-
physical Problems, Astronomy and Astrophysics, vol. 149, no. 1, Aug.
1985, p. 135-143.

[10] G. A. Dilts, Moving-least-squares particle hydrodynamics I. Consistency
and stability. Int. J. Num. Methods in Engineering, 44 (1999), 1115 –
1155.

[11] P. F. Hopkins, GIZMO: a new class of accurate, mesh-free hydrodynamic

simulation methods, Mon. Not, R. Astron. Soc., 2014.

[12] F. Urena, J. J. Benito, L. Gavete, Application of the generalized ﬁnite
diﬀerence method to solve the advection-diﬀusion equation, J. Comp.
Appl. Math., 235 (2011), 1849 - 1855.

[13] D. Price, Smoothed particle hydrodynamics and magnetohydrodynam-

ics, arxiv.org:1012.1885v1

[14] J.L. Steger, R.F. Warming, Flux vector splitting of the inviscid gas dy-
namic equations with application to ﬁnite-diﬀerence methods, J. Com-
put. Phys., 40 (1981), 263 - 293.

[15] G. Strang, On the construction and comparison of diﬀerence schemes,

SIAM J. Numerical Analysis, 5 (1968), 506-517.

[16] J.J. Benito, F. Urena, L. Gavete, Inﬂuence of several factors in the
generalized ﬁnite diﬀerence method, Applied Math. Modeling, 25 (2001),
1039-1053.

[17] R. Courant, K.O. Friedrichs, Supersonic ﬂow and shock waves, Springer,

1999.

[18] Jianqing Fan, Theo Gasser, Irene Gijbels, Michael Brockmann, and
Joachim Engel. Local polynomial ﬁtting: A standard for nonparametric
regression, 1993.

[19] X. Jiao and H. Zha. Consistent computation of ﬁrst- and second-order
diﬀerential quantities for surface meshes. ACM Solid and Physical Mod-
eling Symposium, 2008. (Available at arxiv.org/abs/0803.2331)

[20] G. GOLUB and C. F. VAN LOAN. Matrix Computations. Johns Hop-

kins University Press, Baltimore, MD, 1996.

28

[21] H. Samet, The design and analysis of spatial data structures, Adison-

Wesley Publishing Company, 1990.

[22] Chi-Wang Shu, Essentially Non-Oscillatory and Weighted Essen-
tially Non-Oscillatory Schemes for Hyperbolic Conservation Laws,
NASA/CR-97-206253, ICASE Report No. 97-65, Nov. 1997

[23] R. Liska, B. Wendroﬀ, Comparison of several diﬀerence schemes on 1D
and 2D test problems for the Euler equations, SIAM J. Sci. Comput.,
25 (2003), 9951017.

29

