Motion Planning for Fluid Manipulation using Simpliﬁed Dynamics

video: https://www.dropbox.com/sh/b4wd95uob8tfc6q/AACTGK-CAaXTjj8rHgdIiI8Ga?dl=0

Zherong Pan1 and Dinesh Manocha2

6
1
0
2

 
r
a

M
8

 

 
 
]

O
R
.
s
c
[
 
 

1
v
7
4
3
2
0

.

3
0
6
1
:
v
i
X
r
a

Abstract— We present an optimization-based motion plan-
ning algorithm to compute a smooth, collision-free trajectory
for a manipulator used to transfer a liquid from a source
to a target container. We take into account ﬂuid dynamics
constraints as part of trajectory computation. In order to avoid
the high complexity of exact ﬂuid simulation, we introduce a
simpliﬁed dynamics model based on physically inspired approx-
imations and system identiﬁcation. Our optimization approach
can incorporate various other constraints such as collision
avoidance with the obstacles, kinematic and dynamics con-
straints of the manipulator, and ﬂuid dynamics characteristics.
We demonstrate the performance of our planner on different
benchmarks corresponding to various obstacles and container
shapes. Furthermore, we also evaluate its accuracy by validating
the motion plan using an accurate but computationally costly
Navier-Stokes ﬂuid simulation.

I. INTRODUCTION

Motion planning is a core problem in robotics and has
been studied for many decades. It
is typically used to
compute a collision-free path for moving an object from an
initial position to a goal position or for assembly tasks. Some
of the earlier applications of motion planning were restricted
to the handling of rigid or articulated models. Recently,
there has been interest in manipulating highly deformable
objects such as cloth [19], ropes [12], or human tissues [7],
which can have higher physical-simulation complexity. In
this paper, we deal with planning for ﬂuid manipulation tasks
performed using a robot, including liquid transfer where the
main goal is to transfer a liquid from one container to the
other. This problem is important in industrial applications,
where the robots are used to transfer dangerous ﬂuids or
chemicals, as part of handling materials, cleaning tasks, or
using lubricants. Other applications arise in domestic and
service tasks, where robots may be used to reﬁll a cup of
coffee or to pour liquids from a bottle to a glass. Humans
tend to be quite good at learning ﬂuid manipulation tasks
quickly and can easily exploit the physical properties of the
ﬂuid. However, it is non-trivial for the robot to perform such
tasks due to the intrinsic challenges of modeling the ﬂuid
dynamics.

There are many issues that arise in designing such motion
planning algorithms. The ﬁrst issue arises due to the ﬂexibil-
ity of ﬂuid body. Fluid body can undergo complex topology
changes and large deformations as shown in Figure 2. As
a result, we need to use appropriate data structures that
can provide ﬂexibility, e.g., using a large set of particles.
Unfortunately, these representations, usually parametrize the

1,2Zherong and Dinesh are with Department of Computer Science, the

University of North Carolina, {zherong,dm}@cs.unc.edu

(b)

(a)

(d)

(c)

Fig. 1. We highlight some of the challenging environments used to evaluate
the perofrmance of our motion planner. (a): Guided by a simpliﬁed dynamics
model, our planner can predict the liquid outﬂow curve. This enables us
to successfully transfer liquid even when the source container is far away
from the target container, as shown in (b). (c): Our optimization based
motion planner can compute collision-free paths, while performing ﬂuid
manipulation and transfer tasks, e.g. a high block is an obstacle between
the source and the target container, as shown in (d).

ﬂuid body using tens of thousands of variables. It is difﬁcult
for any existing motion planning algorithm to take into
account deforming obstacles speciﬁed using so many degrees
of freedom. Moreover, ﬂuid body dynamics is governed by
the Navier-Stokes equation, which is a nonlinear PDE. In
order to model accurate ﬂuid manipulation for planning, this
PDE has to be used to specify appropriate constraints, and
solved during each step of the planning to compute a valid
conﬁguration. However, exact solvers for the Navier-Stokes
equation can be expansive [24].

(a)

(b)

Fig. 2.
An illustration of the simpliﬁed ﬂuid body representation. (a):
Conventionally, a large set of parameters are needed to represent ﬂuid
bodies, e.g., by a set of particles. We assume that each ﬂuid particle’s
streamline is divided into three stages: During the source stage (red) liquid
particle lies within the container. During the free ﬂying stage (green), liquid
particle leaves the container and follows a quadratic curve C. Finally, the
target stage (blue) begins when the particle falls into T. (b): Our simpliﬁed
dynamics model parametrizes ﬂuid body using only two global descriptors:
the volume of ﬂuid in the source container vol (blue region), and the mean
outﬂowing velocity magnitude vout.

Main Results: In this paper, we introduce a simpliﬁed
ﬂuid dynamics model, which can be speciﬁed by relatively
few parameters that involve only global descriptors: the total
volume of the ﬂuid in the container, and the outﬂowing ve-
locity magnitude. In this parameter space, we use physically
inspired approximations and system identiﬁcation techniques
to derive the governing equations for the global descriptors.
As illustrated in Figure 2, this approximation is based on the
observation that, due to the smoothness requirements placed
on the trajectories, the liquid outﬂow from the container has
strong regularity and it approximately follows a quadratic
curve. This quadratic curve can be parametrized only by
the velocity magnitude and direction, in the container’s local
coordinates.

We combine this simpliﬁed dynamics model with an
optimization-based planner that can compute collision-free
and smooth trajectories, and also satisfy the ﬂuid dynamics
constraints. Our planner based on the simpliﬁed dynamics
model can achieve more than two orders of magnitude
speedup compared with one that uses an accurate solver.
It can also be easily integrated into current optimization-
based planning approaches [26], [13], [28]. In Figure 1,
we demonstrate the performance of our method based on
using different benchmarks with different shape of obstacles
between the source and target containers. Our simpliﬁed
model can reduced the planning time from hours to minutes.
The rest of the paper is organized as follows. After
reviewing some related works in Section II, we give an
overview of our planning algorithm in Section III. We then
present the simpliﬁed dynamics model in Section IV. Finally,
we evaluate the accuracy of our simpliﬁed model and validate
our motion plan by comparing with results from accurate
Navier-Stoke’s-based simulation in Section V.

II. RELATED WORKS

In this section, we give a brief overview of prior works
on motion planning, ﬂuid dynamics, and planning with ﬂuid

constraints.

A. GENERAL MOTION PLANNING

Robotic motion planning can always be formulated as a
trajectory search problem under various constraints. Early
works of motion planning [17] focus solely on feasibility
under simple collision-free constraints. Many extensions
have been proposed in [32], [29], [5] to handle other types
of constraints. Some of the widely used algorithms for
motion planning are sampling-based algorithms, but it is
hard to integrate some kinds of constraint forms into those
methods. Recent works focus more on computing locally
optimal motion plans, see e.g. [26], [13], [25]. Based on
general-purpose numerical optimization methods, these plan-
ners have the advantage in that they can naturally account
for various additional requirements, such as smoothness,
collision-avoidance, etc. This property makes them espe-
cially attractive for object manipulation tasks,
including
ﬂuid manipulation. Speciﬁcally, our planning framework uses
the optimization approach described in [28], which is an
optimization algorithm that can exactly satisfy the collision
constraints.

B. FLUID DYNAMICS AND PLANNING

In order for a robot to interact with dynamics environ-
mental objects such as ﬂuids, it is important to estimate and
predict their dynamics states. A well-established way for
such estimation is based on computational ﬂuid dynamics
(CFD) [2]. CFD simulators can be categorized by the differ-
ent ways used to represent the ﬂuid body: meshless methods
[34], [3] represent ﬂuids using a set of particles; grid based
methods [11], [23] represent it as material ﬂowing through
static spatial cells; FEM methods [8] instead use spatial cells
that move with ﬂuid bodies. To represent a small block of
water, e.g. a cup of coffee in a mug, all these methods tend
to use tens of thousands of parameters, taking hours for
even one pass of forward simulation on a desktop PC. This
makes it almost impractical to perform a numerical search for
a solution in such high dimensional spaces. Indeed, earlier
works like [20] take days to control a short ﬂuid simulation
corresponding to an animation sequence.

C. PLANNING WITH FLUID CONSTRAINTS

There are some prior works on motion planning for ﬂuid
manipulation. We classify these works into three categories:
methods using demonstration and machine learning [16],
[18], [1], [33], methods based on full-featured dynamics
model, (i.e. CFD simulator) [15], [24], and methods using
simpliﬁed dynamics model [14], [31]. Machine learning
based methods work around the problem of high dimension-
ality by generalizing from a set of already optimized, learned,
or captured “example” trajectories. However, obtaining such
example trajectories for ﬂuid manipulation is usually non-
trivial. Moreover, these methods have difﬁculties generaliz-
ing to new scenarios, as new datasets are needed. In order
to handle new scenarios automatically, some methods use an
accurate full-featured CFD simulator. [15] uses evolutionary

VolVoutQuadratic    Curveoptimization and [24] uses an EM-like optimization algo-
rithm, ﬁrst assuming ﬁxed ﬂuid particle streamlines within
each iteration and then correcting those streamlines using an
additional forward CFD simulation. Both these methods have
low performance since they require multiple passes of costly
ﬂuid simulations. In view of this high complexity, [14], [31]
use a reduced or simpliﬁed dynamics ﬂuid model to achieve
higher planning performance.

III. OVERVIEW

In this section, we formulate our problem, introduce the

notation, and give an overview of our approach.

A. PROBLEM DEFINITION

In order to deal with a coupled planning problem that
handles the constraints of the robot and the ﬂuid body, we

consists of all the variables characterizing the position as well
as the velocity of the ﬂuid body. We formulate the motion
planning problem as an optimization over the space of valid

use the notion of an augmented parameter space: C×L.
Here C is the robot’s kinematic conﬁguration space: Each
point q∈C consists of all the joint variables characterizing
the position of each rigid link. L is the set of parameters
representing a ﬂuid’s dynamics state: each point p ∈ L
trajectories<Q(t),P(t)>. HereQ(t),P(t) are robot and
ﬂuid trajectories respectively, functions mapping t∈[0, τ] to
C,L (τ is the duration of the trajectory). Both these trajectory
size ∆t= τ~(N− 1).
N(cid:6)T
1 ,, qT
are the set of discrete trajectory samples where qi =
Q((i− 1)∆t), pi = P((i− 1)∆t). In order to model the
samples pi,i+1 are related by additional governing PDEs and

functions are discretized using ﬁnite difference with timestep

dynamics of environmental objects, consecutive trajectory

N(cid:6)T
1 ,, pT

Q=qT

P=pT

spatial/temporal boundary conditions, e.g. the Navier-Stokes
equation is used in [24]. We can encode this relationship as
a function:

,

pi+1= f(pi, qi+1),

(1)

where f takes the dynamics state pi at last timestep and the

boundary condition qi+1 at current timestep and integrates
state at the current timestep pi+1 as illustrated in Figure 3.

the governing PDE over time ∆t to compute the dynamics

Other planning problems with dynamics environmental ob-
jects can also ﬁt in such a framework, but we use a different
function f to represent the physics constraints. A common
assumption taken by previous works [9], [18] is that the
magnitude of end-effector velocity is much smaller than
the characteristic rate of energy dissipation due to fric-
tion or damping, so that dependencies between consecutive
timesteps can be ignored. And we can use a simpliﬁed

relationship pi+1= f(qi+1). Since most ﬂuid materials have

a low energy dissipation rate (i.e. small viscosity), we can’t
use this assumption in our formulation.

as:

argminV
s.t.

Cobj(Q, P)+ Creg(Q)
Ccoll(Q)≥ 0 Crobot(Q)=~≥ 0
Cpde(Q, P)= 0.

Fig. 3.
An illustration of augmented parameter space of our ﬂuid
model and the governing PDE that highlights the relationship between the
parameters of consecutive timesteps.

B. COMPLEXITY OF FLUID MANIPULATION

L is usually of a much higher dimension thanC. If we use
and 3 for velocity) toL. As a result, time integration of the

a particle based representation as illustrated in Figure 2, each
particle introduces an additional 6 dimensions (3 for position

governing PDE over a small timestep ∆t can take minutes,
and updating the whole P will therefore take hours on a
desktop computer. Furthermore, an optimization algorithm
needs to perform multiple updates of P. In order to overcome
this complexity, we use a simpliﬁed dynamics model for ﬂuid
manipulation.

C. OPTIMIZATION PIPELINE

Given the speciﬁcation of the parameters and the (discrete)
trajectory space, [28] plans the motion of the robot using

numerical spacetime optimization over the vector space <
Q, P> under various non-linear constraints. It can be posed

We brieﬂy review the terms used in our planning algorithm.

where no collision occurs between the robot and obstacles).
To satisfy this requirement, we perform discrete collision
checking between all pairs of objects and robot links at
each timestep i to ﬁnd a set of Ki
invalid penetrations

Ccoll requires each qi to lie in Cf ree (the subspace of C
{aj(qi), bj(qi), nj, dj j ∈ 1,, Ki}, where aj(qi), bj(qi)
by setting Ccoll =< nj, aj(qi)− bj(qi)>−dj. In order to

are a pair of points in contact, nj is the contact normal and
dj is the penetration depth. These constraints are imposed

reduce the problem size, we only retain the deepest pair of
penetrations for each pair of colliding objects. Crobot is the
set of inherent constraints in the robot, like the kinematic
and dynamics constraints. In this work, we only consider the
joint limits and the maximum velocity constraints. Finally,
Cpde corresponds to the constraints that
the relationship
in Equation 1 is satisﬁed exactly. Creg corresponds to the
smoothness characteristics of the trajectory space. We use
the formulation in [13], [25] and use a Laplacian penalty
term in the joint space:

Creg= 1

Σiqi−1− 2qi+ qi+12.

2

f(pi,qi+1)t=iƊtt=(i+1)ƊtFinally, Cobj encodes the high level goals of transferring
liquid from a source to a target container. We give its
deﬁnition in the next section. With a smooth and differen-
tiable Cobj, Cpde, this optimization can be performed using
local linearization. However, this may not be the case with
ﬂuids, where f and Cpde are usually non-smooth even for
our simpliﬁed model. Therefore, we follow the approach in
[24] and decouple the planning problem: ﬁrst ﬁxing P and
updating Q by solving the subproblem:

Cobj(Q)+ Creg(Q)
Ccoll(Q)≥ 0 Crobot(Q)=~≥ 0.

argminV
s.t.

We then update P by applying Equation 1 repeatedly.

In order to solve this sub-problem numerically, we use the
sequential quadratic programming (SQP) with a trust region
algorithm in the outer loop. The trust region is adjusted
using the Levenberg-Marquardt algorithm according to [21].
Special care is needed in the inner loop. Since conﬂicting
constraints may be returned by collision checking, directly
linearizing each collision constraint Ccoll will sometimes
result in an infeasible QP problem. Therefore, we impose
Ccoll as a soft penalty:

collP = ηΣiti
collP = µCcoll− s2

t≥ 0
2− λT(Ccoll− s)

s.t.

C 1

t≥−Ccoll
s≥ 0,

s.t.

C 2

(2)

where the ﬁrst formulation is the L1-penalty used in [28]
and the second formulation is the Augmented Lagrangian-
penalty. Either formulation requires additional parameters η
or µ, λ to be adjusted according to [22]. The ﬁnal optimiza-
tion pipeline is summarized in Algorithm 1. Contrasted to
[24] where P is updated in the outer loop (before Line 4),
we can update P more frequently in the inner loop (Line 6),
due to the lower computational overhead of the simpliﬁed
dynamics model.

IV. SIMPLIFIED DYNAMICS MODEL

The goal of liquid transfer is to move liquid material
from a source container S to a target container T. In this
work, we make several assumptions: the source container
is assumed to be an axial symmetric rigid body, the target
container T is ﬁxed and the source container S is attached
to the end-effector of a robot arm. In this section, we derive
the formulation of our simpliﬁed governing PDE f and
the objective function Cobj. Plugging these deﬁnitions into
Algorithm 1 corresponds to the overall planning algorithm.
A spectrum of governing PDEs have been developed to
model the motion of a ﬂuid body, working under various
assumptions and data-structures, see e.g. [2]. The choice
of appropriate governing PDE is critical to the success of
a liquid transfer planner. The most general governing PDE
for the ﬂuid body is the Navier-Stokes equation. Although
a direct discretization of this equation is also possible, it
introduces a large number of parameters to represent the
dynamics state of ﬂuid body. In view of this, previous work
[24] assumes the streamline of each ﬂuid particle doesn’t
change within the inner loop of Algorithm 1. As a result, a

while true do

1

Add constraints for t, s (Equation 2)

Do collision checking to ﬁnd Ccoll

Local quadratic expansion of objective

Compute Pk by applying Equation 1

collP(η, µ, λ)≈

Algorithm 1 Spacetime Optimization Algorithm
Input: Robot/Environment, Cpde, Cobj
Input: Initial k, η, µ, λ, Q0, P0
Output: Locally optimal Q, P

1: while k= 1, do
Set Qk= Qk−1
▷ Update P from Q
▷ Deﬁne the QP problem objective at Qk
Cobj+ Creg+ C∗
2 QT HQ+ bT Q+ c
Apply trust region by setting H= H+ kI
▷ Deﬁne the QP problem constraints at Qk
▷ Robot kinematic, dynamics constraints
Solve semi-deﬁnite QP for Q∗
ifQ∗− Qk0<  then
Set Qk= Q∗
▷ Update collision penalty stiffness
collP = C 1
if C∗
collP = C 2
if C∗
ifQk− Qk−10<  then
▷ Update trust region

2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30:
31:
32:
33:
34: end while

collP then
Update µ, λ ([22])

Local linear expansion of Crobot

end if
end while

Break

end if

Break

end if

collP then

Update η ([22])

end if

Update k ([21])

forward simulation in the outer loop is needed to correct the
streamline. This method simpliﬁes the optimization problem
but the repeated costly forward simulations in the outer loop
considerably slow down the overall performance. With these
limitations, most planning algorithms instead use a simpliﬁed
or reduced ﬂuid models, e.g., the pendulum model [31].
Although this is easy to implement, cheap to compute and
accurate when S is undergoing only a slight perturbation, this
method cannot account for signiﬁcant container movements,
e.g. when pouring the liquid from S to T.

In this paper, we present a simpliﬁed dynamics model
designed exclusively for the liquid transfer tasks. Our design
guideline is to reduce the number of parameters as much
as possible, while at the same time to retain the ability of
predicting the locus of ﬂuid particles that leave the container
S. In addition, we want to account for variations in the
environment, such as different container shapes and different

liquid materials.

As illustrated in Figure 2, we ﬁrst simplify the problem
by dividing the streamline of each ﬂuid particle into three
stages: during the source stage a ﬂuid particle lies within
the bounding volume of S; it then leaves S and follows a
quadratic curve C, which is the free ﬂying stage; ﬁnally the
target stage begins when it falls into the bounding volume
of T. In this work, we ignore the dynamics of the third
stage, assuming no spilling after the particle falls into T. As
a result, the objective of our planner is to ensure that the
quadratic curves C passes through the center of opening of
T. Since C is a quadratic curve, it is characterized by the
outﬂowing velocity of the ﬂuid and global orientation of S
at each timestep i.

(a)

(b)

A. THE DYNAMICS MODEL

We ﬁrst formulate our parameter set. The dimension of

L is reduced drastically to only two in our model. The
components of p∈L are:

p= vol(m3)
vout(m~s)  ,

where vol is the remaining volume of liquid left in the
container’s bounding volume and vout is the magnitude of
the velocity that represents the mean outﬂow. In order to

formulate the timestepping equation of f(pi, qi+1), we use
forward Euler integration voli+1= voli− Ai+1vout
i+1 ∆t, where
Ai+1(m2) is the outﬂow cross-section area. For a given
function A(θ, vol) is precomputed for each given source
the table, we sample θ at an interval of 1○, then run a
entry (A, θ, vol) at each water level. Partial derivatives of

source container S, we assume A is a function of the leaning
angle θ and volume vol, as illustrated in Figure 9. This

container S and stored as a lookup table. To populate

watershed algorithm [27] at each θ, while adding an table

this function are approximated using ﬁnite differences. An
example is given in Figure 4. Note that the leaning angle θ
is a function of q, which is not a part of p.

Finally in order to determine the magnitude of the mean
outﬂowing velocity vout, we combine two physically inspired
approximations. The ﬁrst approximation is based on the
Bernoulli equation [6]. This equation states that if the ﬂuid
body is steady, inviscid and incompressible, then over each
particle streamline, we have:

p+ gh+ voutvout

= constant,

2

(c)

(d)

Fig. 4.



watershed algorithm is used to extract the interior of S (blue) and to populate

(a): Illustration of function A(θ, vol). (b): Illustration of function
∆h(θ, vol). (c,d): More examples for containers of different shapes. A
the lookup table of A(θ, vol) (colormap). The same procedure is used to
precompute ∆h(θ, vol) on the axial symmetric cross section.
sin(θ− π~2)gl,
that vout should be related to sin(θ− π~2). Unfortunately,

velocity with magnitude proportional to
where l is the length of the wall. This approximation tells us


voutág(θ, vol)= a

we don’t know exactly what the best relationship model
between vout and these two terms is. So that we use system
identiﬁcation to combine their contributions, by making the
assumption that:


1+ b
3+
dsin(max(θ− π~2, 0))+ esin(max(θ− π~2, 0))2+
f sin(max(θ− π~2, 0))3,

2+ c



2g∆h

2g∆h

2g∆h

(3)

where the coefﬁcients a, b, c, d, e, f are found by solving the
linear regression:

argmina,b,c,d,e,f

1
T

vout
i+1− g(θi+1, voli)2,

TQ
i=1

(4)

using a set of training data acquired from CFD simulation.
One issue with this setting of coefﬁcients is that vout can be
negative, although this never happens in our experiments. In
summary, our governing PDE f is posed as:

= voli− A(θi+1, voli)vout
i+1 ∆t
g(θi+1, voli)

 .

f(pi+1, qi)= voli+1
i+1

vout

(5)

where p is the pressure, g is the gravity and h is the position
of the point on the streamline along gravity’s direction.
Although the assumptions made by the Bernoulli equation
are not satisﬁed exactly, we can still apply it to the two
endpoints of the dashed streamline shown in Figure 5. The

result implies that vout is related to √2g∆h. Here ∆h is
A(θ, vol), using lookup table. For a 3D source container S,
ics. According to Figure 5, when θ> π~2, a single particle

∆h is computed for its axial symmetric cross section. The
second approximation is based on simple rigid body dynam-

a function of θ and vol computed in the same way as

moving along the wall of the source container S will gain

This simpliﬁed model works well if the source container S
is moving slowly and smoothly, which is consistent with the
goal of the smoothness objective Creg. See Section V for
more discussion.

B. LIQUID TRANSFER OBJECTIVE FUNCTION

Given the governing PDE from Section IV-A, we can now
formulate our objective function Cobj. In principle, Cobj
requires the free-ﬂying stage curve C to pass through the
center of the opening of the target container, denoted as OT .

Avol(cid:31)volƊh(cid:31)Avout(m~s) √

2gh(m~s) θ(rad) ∆h(m) g(θ, vol)(m~s)

(a)

(b)

(c)

(d)

√
2gh, θ, ∆h, g(θ, vol) over

√

For two simulated testing trajectories and two container shapes,

Fig. 7.
we plot changes of the ﬁve variables vout,
time. Both testing and training trajectories are generated by simulating the
liquid while turning the container according to a random, monotonically
increasing θ curve shown in orange. The green curve is the groundtruth
vout, the outﬂowing velocity magnitude; the gray curve is the groundtruth
∆h, and the yellow curve is the prediction of vout made by the Bernoulli
equation
2g∆h; Finally, the blue curve is the predicted vout generated

using our simpliﬁed dynamics model g(θ, vol). The error between vout
and g(θ, vol) is small over the effective range where vout> 0.
vout(m~s) vol(m3) θ(rad) ∆h(m)

Predicted liquid trajectory P computed using Equation 5, for the
Fig. 8.
two container shapes. Over time, the leaning angle θ increases monotoni-
cally (orange) while the total volume decreases accordingly (yellow). Note
that the change of vout (green) closely resembles the groundtruth data
(Figure 7 green): for the cylindrical container, vout is always increasing
while for the oval-shaped container, vout ﬁrst increases and then decreases.

the simulator is represented by a set of particles as shown
in Figure 2. For each mesh of container S and each ﬂuid
material setting, we need to solve for a separate set of
coefﬁcients a, b, c, d, e, f. In order to compute the training
data, we ran 127 3D ﬂuid simulations of pouring liquid out of

a container by leaning it from θ= 0○ to θ∈[90○, 150○] using
samples, each of which is a tuple< vout, θ, ∆h>. To extract

a random ˙θ. This results in approximately 20000 training

these samples, for the set of particles in every timestep of
the simulation, We extract their 2D axial symmetric cross-
section. In this cross section, we compute vout by averaging
the magnitude of velocity of all particles that
leave the
container S at current timestep. These particles should be
inside the bounding volume of S in the previous timestep,
but outside it in the current timestep. We also compute the
characteristic height ∆h, which is found by ﬁtting a cubic
curve to the free surface and evaluate it at the step boundary.
A snapshot of the training data is illustrated in Figure 6.

After solving for the coefﬁcients, we want to evaluate
the accuracy of our simpliﬁed model. We plot the change
of several related variables with respect to physical time
in Figure 7. We note from the Figure 7 (c,d) that, for the

oval-shaped container, the Bernoulli approximation√2g∆h

can already achieve acceptable accuracy. However, for the

(a)

(b)

Fig. 5.
The two physically inspired approximations. (a): The Bernoulli
equation is used between two end points of the dashed streamline. (b): A
single ﬂuid particle sliding down the wall of the container.

Fig. 6. A snapshot of the cross section of ﬂuid simulation, the extracted
quadratic curves (red) for particles leaving S at current timestep. Their
tangents are averaged to compute vout, and the cubic curve ﬁtted to the
free surface (blue). This is used to compute ∆h by evaluating the free
surface position at boundary of S.

We assume that the mean ﬂow follows a quadratic curve,
parametrized by:

C(t)= g

t2+ V out

i

t+ Ei,

2

i

i

2

(7)

(6)

t2+ V out

A(θi, voli) g

t+ Ei− OT2,

they are at the same altitude. Therefore, our objective func-
tion can be deﬁned as:

and we penaltize the distance between C(t) and OT when
Cobj=Q
where t is computed by solving< g, C(t)− OT>= 0, which
Ei is the centroid of cross section area A(θi, voli). More
trajectory A(θ, vol) is zero in every timestep. As a result, we
add a guiding term:θN− θf inal2 to enforce a ﬁxed ﬁnal
leaning angle. We use θf inal= 90○ in all the experiments.

details of their derivation are given in Appendix VII. Note
that this term is weighted by the cross section area, so that it
only takes effect when the outﬂow ﬂux is nonzero. However,
this objective alone is not sufﬁcient because in our initial

is the time when the curve reaches the same altitude as OT;
i maps vout
in local frame of S to the global frame and
V out

i

V. EXPERIMENTS AND RESULTS

In this section, we give details of our implementation and
highlight the performance of our planner. We also evaluate
the accuracy and efﬁcacy of our simpliﬁed model.

In order to ﬁnd the unknown coefﬁcients involved in our
simpliﬁed model, we need to solve the linear regression
Equation 4 from a set of training data. The dataset is acquired
from full-featured exact ﬂuid simulations. Our simulator is
implemented as a low order discretization of the Naiver-
Stokes equation proposed in [34], [4]. The ﬂuid body in

Ɗh(cid:30)-π/2Ɗh00.511.522.53010020030040050060070080090000.511.522.53010020030040050060070080090000.511.522.5010020030040050060000.511.522.5010020030040050060000.511.522.533.54010020030040050060070080090000.511.522.50100200300400500600BENCHMARK

Figure 1 (a)
Figure 1 (a)
Figure 1 (c)
Figure 1 (c)

VISCOSITY

µ= 0.01
µ= 0.001
µ= 0.01
µ= 0.001

TIME

PLANNING

TIME

VALIDATION

QUALITY

5min
5min
7min
7min

TABLE I

2.1h
2.5h
1.9h
2.2h

95.7%
89.5%
93.2%
87.1%

FROM LEFT TO RIGHT: BENCHMARK ENVIRONMENT, VISCOSITY OF
FLUID, TIME SPENT RUNNING ALGORITHM 1, TIME SPENT RUNNING

FORWARD CFD SIMULATION FOR VALIDATION AND QUALITY OF

PLANNED TRAJECTORY. THE QUALITY IS MEASURED BY THE FRACTION

OF PARTICLES THAT FALL INSIDE T.

cylindrical container, Bernoulli approximation leads to large

error when θ≥ π~2. In these cases, sin(max(θ− π~2)) is

a better approximation to vout. By combining the six terms
in Equation 3, we can achieve much better agreement with
the groundtruth vout. And by plugging the function g into
Equation 5, we can even predicate the entire liquid trajectory,
i.e. predicating P given Q. Two of such predicted trajectories
are illustrated in Figure 8. Our model is ﬂexible enough to
account for different container shapes. Note that Bernoulli
approximation can result in some false predictions when

∆h= 0 (and thus A= 0), e.g. the yellow dots in the early

timesteps of Figure 7, this will not cause any problems since
our objective function in Equation 7 does not take into effect
such degenerate cases.

To evaluate the motion planning pipeline, we plug the
functions f and Cobj into Algorithm 1. This algorithm is
implemented on ROS [30] platform. In order to implement
the trust region SQP optimizer, we use the OOQP lib [10]
to solve each QP subproblem. For collision constraints,
collP , we use C 2
although [28] used C 1
collP in all our ex-
periments because C 2
collP introduces half the number of
constraints in the QP problem. These constraints correspond
to the box constraints that the OOQP algorithm can handle
efﬁciently. Our simulated robot is a 9-DOF low cost Cla-
mArm. All the experiments are setup on a single desktop
computer with i7-4790 8-core CPU 3.6GHz and 8GB of
memory. We evaluated the system on two liquid transfer tasks
with different sets of obstacles in the environment. For each
benchmark, we use two sets of ﬂuid materials that differ only

in their viscosity (µ= 0.01, 0.1), so that two trained models
We sample each trajectory with 100 nodes (N= 100).

are needed for each material and each source container S.

Several timesteps are illustrated in Figure 1, to validate
the quality of these trajectories. We replace the simpliﬁed
dynamics model with a full-featured CFD simulator and
our quality measure is the fraction of ﬂuid particles that
fall inside the target container T. These quality measures
and time cost of planning are summarized in Table I. Each
execution of Line 6 in Algorithm 1 takes less than 5 seconds,
while a full-featured CFD simulation in [24] takes more than
2 hours. Thus we achieve at least two orders of magnitude
speedup using our simpliﬁed dynamics model, as opposed to
an exact ﬂuid simulator and achieve comparable accuracy.

VI. CONCLUSION, LIMITATIONS, FUTURE WORK
In this paper, we present an optimization based motion
planning algorithm for liquid transfer. Our formulation uses
an optimization-based planner and uses a simpliﬁed dynam-
ics model to for the ﬂuid constraint. The iterative procedure
allows us to handle the non-smooth governing equation f,
while the simpliﬁed dynamics model can be used to replace
full-featured CFD simulation. This avoids introducing a large
set of parameters to represent the ﬂuid model, and thereby
leading to a large speedup. We have evaluated the accuracy
of our simpliﬁed model as well as the planning algorithm by
comparing them with ﬂuid simulation groundtruth data. The
result shows that our model is able to predict the mainﬂow
location when moving and leaning source container at mild
speed.

The limitations of current work are due to various as-
sumptions, such as the symmetry of the source container
and the ﬁxed position of target container. More importantly,
our simpliﬁed parameter set and the dynamics model
is
restricted to the particular task of liquid transfer at mild
speed. For example, when the end-effector is moving too
fast, the predicated curve C can be far from the groundtruth
and the planned trajectory P may not be physically correct.
In terms of future works, we would like to introduce addi-
tional constraints on the spacetime optimization formulation,
such that our simpliﬁed model’s prediction error is below
some threshold. Another possible extension is to use more
accurate, but still reduced parameter set and dynamics model,
e.g. using convolutional neural network.

and vout

i

VII. APPENDIX: THE CONTAINER GEOMETRY
To characterize the quadratic curve C, we need the
centroid Ei of cross section area Ai. Also, we need the
relationship between V out
. Since we assume the
source container S to be axial symmetric, its orientation
can be characterized by two parameters θ, φ as illustrated
in Figure 9. Given these parameters we have:

Ei = ïïï cosφ −sinφ 0
ïï ei
2)]
sin[max(θ, π
= ïïï cosφ −sinφ 0
ïï ,
ïïï vout
ïï
2)]
i cos[max(θ, π
of S, which is again assumed to be a function e(θ, vol)
precomputed in the same way as A(θ, vol). The max
model. When the leaning angle is less then 90○, we assume

is critical to the accuracy of our dynamics

in the local coordinates

is the centroid of Ai

operator in V out

where ei

sinφ

cosφ

sinφ

cosφ

0
1

0
1

V out
i

i

vout

i

0

0

0

0

i

0

the outﬂow direction to be horizontal, see bottom Figure 9.

REFERENCES

[1] S. Alatartsev, A. Belov, M. Nykolaichuk, and F. Ortmeier, “Robot
Trajectory Optimization for the Relaxed End-Effector Path,” in Pro-
ceedings of
the 11th International Conference on Informatics in
Control, Automation and Robotics (ICINCO), 2014.

[2] J. D. Anderson and J. Wendt, Computational ﬂuid dynamics. Springer,

1995, vol. 206.

[17] S. M. Lavalle, “Rapidly-exploring random trees: A new tool for path

planning,” 1998.

[18] A. X. Lee, S. H. Huang, D. Hadﬁeld-Menell, E. Tzeng, and P. Abbeel,
“Unifying scene registration and trajectory optimization for learn-
ing from demonstrations with application to manipulation of de-
formable objects,” in Intelligent Robots and Systems (IROS 2014),
2014 IEEE/RSJ International Conference on.
IEEE, 2014, pp. 4402–
4407.

[19] Y. Li, D. Xu, Y. Yue, Y. Wang, S.-F. Chang, E. Grinspun, and P. K.
Allen, “Regrasping and unfolding of garments using predictive thin
shell modeling,” in Robotics and Automation (ICRA), 2015 IEEE
International Conference on.

IEEE, 2015, pp. 1382–1388.

[20] A. McNamara, A. Treuille, Z. Popovi´c, and J. Stam, “Fluid control
using the adjoint method,” in ACM Transactions On Graphics (TOG),
vol. 23, no. 3. ACM, 2004, pp. 449–456.

[21] H. B. Nielsen, “Damping parameter in marquardt’s method,” Informat-
ics and Mathematical Modelling, Technical University of Denmark,
DTU, Tech. Rep., 1999.

[22] J. Nocedal and S. Wright, Numerical optimization. Springer Science

& Business Media, 2006.

[23] S. Osher and R. Fedkiw, Level set methods and dynamic implicit

surfaces. Springer Science & Business Media, 2006, vol. 153.

[24] Z. Pan, C. Park, and D. Manocha, “Robot motion planning for pouring
liquids,” in Proceedings of International Conference on Automated
Planning and Scheduling, 2016.

[25] C. Park, J. Pan, and D. Manocha, “ITOMP: Incremental trajectory
optimization for real-time replanning in dynamic environments,” in
Proceedings of International Conference on Automated Planning and
Scheduling, 2012.

[26] N. Ratliff, M. Zucker, J. A. D. Bagnell, and S. Srinivasa, “CHOMP:
Gradient optimization techniques for efﬁcient motion planning,” in
Proceedings of International Conference on Robotics and Automation,
2009, pp. 489–494.

[27] J. B. Roerdink and A. Meijster, “The watershed transform: Deﬁnitions,

algorithms and parallelization strategies,” 2000.

[28] J. Schulman, Y. Duan, J. Ho, A. Lee, I. Awwal, H. Bradlow, J. Pan,
S. Patil, K. Goldberg, and P. Abbeel, “Motion planning with sequential
convex optimization and convex collision checking,” The International
Journal of Robotics Research, vol. 33, no. 9, pp. 1251–1270, 2014.

[29] M. Stilman, “Task constrained motion planning in robot joint space,” in
IEEE/RSJ International Conference on Intelligent Robots and Systems,
2007, pp. 3074–3081.

[30] I. A. Sucan

and S. Chitta,

“Moveit!” Online Available:

http://moveit.ros.org, 2013.

[31] M. Tzamtzi and F. Koumboulis, “Robustness of a robot control scheme
for liquid transfer,” in Novel Algorithms and Techniques In Telecom-
munications, Automation and Industrial Electronics. Springer, 2008,
pp. 156–161.

[32] D. Wilkie, J. P. van den Berg, and D. Manocha, “Generalized velocity
obstacles,” in Proceedings of IEEE/RSJ International Conference on
Intelligent Robots and Systems, 2009, pp. 5573–5578.

[33] A. Yamaguchi, C. G. Atkeson, and T. Ogasawara, “Pouring skills
with planning and learning modeled from human demonstrations,”
International Journal of Humanoid Robotics, vol. 12, no. 03, p.
1550030, 2015.

[34] Y. Zhu and R. Bridson, “Animating sand as a ﬂuid,” ACM Transactions

on Graphics (TOG), vol. 24, no. 3, pp. 965–972, 2005.

Fig. 9. Left: An illustration of the orientation related parameter for source
container S. The cross section area A is the shaded region with centroid e.
The outﬂowing velocity has magnitude vout. Right: The outﬂow direction

is horizontal when θ< 90○. Otherwise, it is along the tangent direction.

[3] A. Barreiro, A. Crespo, J. Dom´ınguez, and M. G´omez-Gesteira,
“Smoothed particle hydrodynamics for coastal engineering problems,”
Computers & Structures, vol. 120, pp. 96–106, 2013.

[4] C. Batty, F. Bertails, and R. Bridson, “A fast variational framework
for accurate solid-ﬂuid coupling,” in ACM SIGGRAPH, vol. 26, no. 3.
ACM, 2007, p. 100.

[5] D. Berenson, S. S. Srinivasa, D. Ferguson, A. Collet, and J. J. Kuffner,
“Manipulation planning with workspace goal regions,” in Proceedings
of IEEE International Conference on Robotics and Automation, 2009,
pp. 618–624.

[6] D. Bernoulli, “1738 hydrodynamica,” Argentorati (Strassburg), Ger-

many: Johann Reinhold Dulsecker.

[8] P. Clausen, M. Wicke,

[7] N. Chentanez, R. Alterovitz, D. Ritchie, L. Cho, K. K. Hauser,
K. Goldberg, J. R. Shewchuk, and J. F. Obrien, “Interactive simulation
of surgical needle insertion and steering,” in ACM SIGGRAPH, 2009.
J. R. Shewchuk, and J. F. O’Brien,
“Simulating liquids and solid-liquid interactions with lagrangian
meshes,” ACM Transactions on Graphics, vol. 32, no. 2, pp. 17:1–15,
Apr. 2013, presented at SIGGRAPH 2013.
[Online]. Available:
http://graphics.berkeley.edu/papers/Clausen-SLS-2013-04/

[9] B. Frank, C. Stachniss, R. Schmedding, M. Teschner, and W. Burgard,
“Learning object deformation models for robot motion planning,”
Robotics and Autonomous Systems, vol. 62, no. 8, pp. 1153–1174,
2014.

[10] E. M. Gertz and S. J. Wright, “Object-oriented software for quadratic
programming,” ACM Transactions on Mathematical Software (TOMS),
vol. 29, no. 1, pp. 58–81, 2003.

[11] F. H. Harlow, J. E. Welch, et al., “Numerical calculation of time-
dependent viscous incompressible ﬂow of ﬂuid with free surface,”
Physics of ﬂuids, vol. 8, no. 12, p. 2182, 1965.

[12] S. H. Huang, J. Pan, G. Mulcaire, and P. Abbeel, “Leveraging appear-
ance priors in non-rigid registration, with application to manipulation
of deformable objects,” in Intelligent Robots and Systems (IROS), 2015
IEEE/RSJ International Conference on.
IEEE, 2015, pp. 878–885.
[13] M. Kalakrishnan, S. Chitta, E. Theodorou, P. Pastor, and S. Schaal,
“STOMP: Stochastic trajectory optimization for motion planning,”
in Proceedings of IEEE International Conference on Robotics and
Automation, 2011, pp. 4569–4574.

[14] L. Kunze, M. E. Dolha, E. Guzman, and M. Beetz, “Simulation-based
temporal projection of everyday robot object manipulation,” in The
10th International Conference on Autonomous Agents and Multiagent
Systems-Volume 1.
International Foundation for Autonomous Agents
and Multiagent Systems, 2011, pp. 107–114.

[15] Y. Kuriyama, K. Yano, and M. Hamaguchi, “Trajectory planning
for meal assist robot considering spilling avoidance,” in Control
Applications, 2008. CCA 2008. IEEE International Conference on.
IEEE, 2008, pp. 1220–1225.

[16] J. D. Langsfeld, K. N. Kaipa, R. J. Gentili, J. A. Reggia, and
S. K. Gupta, “Incorporating failure-to-success transitions in imitation
learning for a dynamic pouring task,” 2014.

AevoutXYZϑφvoutvout