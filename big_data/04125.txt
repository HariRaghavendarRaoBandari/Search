6
1
0
2

 
r
a

 

M
4
1

 
 
]

Y
S
.
s
c
[
 
 

1
v
5
2
1
4
0

.

3
0
6
1
:
v
i
X
r
a

Event-triggered leader-following tracking control for

multivariable multi-agent systems ⋆

Yi Cheng a and V. Ugrinovskii a

aSchool of Engineering and Information Technology, University of New South Wales at the Australian Defence Force

Academy, Canberra, ACT 2600, Australia.

Abstract

The paper considers event-triggered leader-follower tracking control for multi-agent systems with general linear dynamics.
For both undirected and directed follower graphs, we propose event triggering rules which guarantee bounded tracking errors.
With these rules, we also prove that the systems do not exhibit Zeno behavior, and the bounds on the tracking errors can be
tuned to a desired small value. We also show that the combinational state required for the proposed event triggering conditions
can be continuously generated from discrete communications between the neighboring agents occurring at event times. The
eﬃcacy of the proposed methods is discussed using a simulation example.

Key words: Event-triggered control, leader-follower tracking, consensus control, multi-agent systems.

1 Introduction

Cooperative control of multi-agent systems has received
increasing attention in the past decade, see [1] and
references therein. However, many control techniques
developed so far rely on continuous communication
between agents and their neighbors. This
limits
practicality of these techniques.

To address this concern, several approaches have been
proposed in recent years. One approach is to apply
sampled control [2]. However in sampled data control
schemes control action updates continue periodically
with the same frequency even after the system has
reached the control goal with suﬃcient accuracy and no
longer requires intervention from the controller. Eﬀorts
to overcome this shortcoming have led to the idea of
triggered control. Self-triggered control strategies [3,4,9]
employ a triggering mechanism to proactively predict
the next time for updating the control input ahead of
time, using the current measurements. On the other
hand, event-triggered controllers [5,6,7,8,9,10] trigger
control input updates by reacting to excessive deviations

⋆ This work was supported by the Australian Research
Council under the Discovery Projects funding scheme
(project DP120102152). Accepted for publication in
Automatica on March 14, 2016.

Email addresses: y.cheng@adfa.edu.au (Yi Cheng),

v.ugrinovskii@gmail.com (V. Ugrinovskii).

of the decision variable from an acceptable value, i.e.,
when a continuously monitored triggering condition is
violated. This latter approach is the main focus in this
paper.

The development of event-triggered controllers remains
challenging, because the agents
in a multi-agent
system do not have access to the complete system
state information required to make decisions about
control input updates. To prove the concept of event-
triggering, the early work was still assuming continuous
communication between the neighboring agents [7,9].
To circumvent this limitation, several approaches have
been proposed, e.g., see [11,12,13,14,15,16,17]. For
instance, diﬀerent from [7,9] where state-dependent
event triggering conditions were used, [11] proposed an
event-triggered control strategy using a time-dependent
triggering function which did not require neighbors’
information. In [12], a state-dependent event triggering
condition was employed, complemented by an iterative
algorithm to estimate the next triggering time, so that
continuous communications between neighboring agents
were no longer needed. In [13], sampled-data event
detection has been used. It must be noted that these
results as well as many other results in this area were
developed for multi-agent systems with single or double
integrator dynamics. Most recently, similar results have
been developed for multi-agent systems with general
dynamics [14,15] and nonlinear dynamics [16,17].

Preprint submitted to Automatica

Accepted for publication in Automatica on March 14, 2016.

the

is one of

All the papers mentioned above considered the event-
triggered control problem for leaderless systems. The
leader-following control
important
problems in cooperative control of multi-agent systems
[18,19,20,1], and the interest in event-based solutions
to this problem is growing [21,22,23,24]. General
multidimensional leader following problems still remain
technically challenging, and the development is often
restricted to the study of single or double integrator
dynamics [21,22,23,24]. Zeno behavior presents another
challenge, and is not always excluded [21,22]. Excluding
Zeno behavior is an important requirement on control
protocols since excessively frequent communications
reduce the advantages of using the event-triggered
control.

In this paper, we also consider the event-triggered leader-
following control problem for multi-agent systems.
Unlike [21,22,23,24], the class of systems considered
allows for general
linear dynamics. Also, the leader
can be marginally stable or even unstable. For both
undirected and directed system interconnections, we
propose suﬃcient conditions for the design of controllers
which guarantee that the leader tracking errors are
contained within certain bounds; these bounds can
be optimized by tuning the parameters of the design
procedure. We also show that with the proposed event-
triggered control protocols, the system does not exhibit
Zeno behavior. These results are the main contribution
of the paper.

Its another contribution is the event-triggered control
protocols that do not require the neighboring agents to
communicate continuously. Instead, the combinational
state to be used in the event triggering condition
is generated continuously within the controllers, by
integrating the information obtained from the neighbors
during their communication events. The idea is inspired
by [12], however, the procedure in [12] developed for
single integrator systems cannot be applied to multi-
agent systems with general linear dynamics considered
here, since in our case dynamics of the measurement
error depend explicitly on the combinational state. Also
diﬀerent from [12], the proposed algorithm involves one-
way communications between the neighboring agents.
The combinational state is computed continuously
by each agent and is broadcast to its neighbors
only at the time when the communication event is
triggered at this node and only in one direction. The
neighbors then use this information for their own
computation, and do not send additional requests to
measure the combinational state. This is an important
advantage of our protocol compared with event-
triggered control strategies proposed in [12,21,23,24,30].
In these references, when an event is triggered at
one agent, it must request its neighbors for additional
information to update the control signals. Owing to this,
our scheme is applicable to systems with a directed graph
which only involves one way communications.

2

In comparison with the recent work on event-triggered
control for general
linear systems [14,30,15,25], the
main distinction of our method is computing the
state directly using the neighbors’
combinational
information. This allowed us
to avoid additional
sampling when checking event triggering conditions,
cf.
[14,30]. In contrast in [15], to avoid continuous
transmission of information, each agent was equipped
with models of itself and its neighbors. In [25], estimators
were embedded into each node to enable the agents
to estimate their neighbors’ states. Both approaches
make the controller rather complex, compared with
our controller which does not require additional models
or estimators. The leader-follower context and the
treatment of both directed and undirected versions of
the problem are other distinctions.

The paper is organized as follows. Section 2 includes the
problem formulation and preliminaries. The main results
are given in Sections 3 and 4. In Section 3 we consider
the case when the system of followers is connected over a
directed graph. Although these results are applicable to
systems connected over an undirected graph as well, the
symmetry of the graph Laplacian makes it possible to
derive an alternative control design scheme in Section 4.
In Section 5, the generation of the combinational state
is discussed. Section 6 provides an illustrative example.
The conclusions are given in Section 7.

Throughout the paper, ℜn and ℜn×m are a real
Euclidean n-dimensional vector space and a space of real
n × m matrices. ⊗ denotes the Kronnecker product of
two matrices. λmax(·) and λmin(·) will denote the largest
and the smallest eigenvalues of a real symmetric matrix.
For q ∈ ℜn, diag{q} denotes the diagonal matrix with
the entries of q as its diagonal elements. IN is the N × N
identity matrix. When the dimension is clear from the
context, the subscript N will be suppressed.

2 Problem formulation and preliminaries

2.1 Communication graph

Consider a communication graph ¯G = ( ¯V, ¯E, ¯A), where
¯V = {0, . . . , N} is a ﬁnite nonempty node set, ¯E ⊆
¯V × ¯V is an edge set of pairs of nodes, and ¯A is an
adjacency matrix. Without loss of generality, node 0 will
be assigned to represent the leader, while the nodes from
the set V = {1, . . . , N} will represent the followers.
The (in general, directed) subgraph G = (V,E,A)
obtained from ¯G by removing the leader node and the
corresponding edges describes communications between
the followers; the edge set E ⊆ V × V represents the
communication links between them, with the ordered
pair (j, i) ∈ E indicating that node i obtains information
from node j; in this case j is the neighbor of i. The
set of neighbors of node i in the graph G is denoted as

Ni = {j|(j, i) ∈ E}. Following the standard convention,
we assume that G does not have self-loops or repeated
edges. The adjacency matrix A = [aij ] ∈ ℜN ×N of G is
deﬁned as aij = 1 if (j, i) ∈ E, and aij = 0 otherwise.
Let di = PN
j=1 aij be the in-degree of node i ∈ V and
D = diag{d1, . . . , dN} ∈ ℜN ×N . Then L = D − A is the
Laplacian matrix of the graph G, it is symmetric when
G is undirected.
We assume throughout the paper that the leader is
observed by a subset of followers. If the leader is observed
by follower i, then the directed edge (0, i) is included in
¯E and is assigned with the weighting gi = 1, otherwise
we let gi = 0. We refer to node i with gi 6= 0 as a pinned
node. Let G = diag{g1, . . . , gN} ∈ ℜN ×N . The system is
assumed to have at least one follower which can observe
the leader, hence G 6= 0.
In addition, we assume the graph G contains a spanning
tree rooted at a pinned node ir, i.e., gir > 0. Then,
−(L + G) is a Metzler matrix. According to [28], the
matrix −(L + G) is Hurwitz stable 1 , which implies that
−(L + G) is diagonally stable [29]. That is, there exists a
positive deﬁnite diagonal matrix Θ = diag{ϑ1, . . . , ϑN}
such that H = Θ−1(L + G) + (L + G)′Θ−1 > 0. We will
also use the following notation: α = 1
2 λmin(H), ϑmin =
), P = Θ−1(L + G)(L + G)′Θ−1
min
and F = (L + G)′(L + G).
2.2 Problem formulation

(ϑi), ϑ = min

(ϑ−1

i

i

i

Consider a multi-agent system consisting of a leader
agent and N follower agents. Dynamics of the ith
follower are described by the equation

0, ti

1, . . ., based on samples zi(ti

denoted by ti
k) of its
combinational state. The value of the combinational
state is held constant between updates, thus giving rise
to the measurement signal ˆzi(t) = zi(ti
k+1).
Based on this model, consider the following control law

t ∈ [ti

k, ti

k),

ui(t) = −K ˆzi(t),

t ∈ [ti

k, ti

k+1),

(4)

where K ∈ ℜp×n is a feedback gain matrix to be deﬁned
later. The problem in this paper is to ﬁnd a control law
(4) and an event triggering strategy which achieve the
following leader-following property

lim sup

t→∞ PN

i=1kx0(t) − xi(t)k2 ≤ ∆,

(5)

where ∆ is a given positive constant. Furthermore, the
closed loop dynamics of the followers must not exhibit
Zeno behavior with the proposed event triggering rule.

Deﬁnition 1 We say that the leader-follower system
(1), (2) with a control law (4) does not exhibit Zeno
behavior if over any ﬁnite time period there are only
a ﬁnite number of communication events between the
follower systems, i.e., for every agent i the sequence of
event times ti

k has the property inf k(ti

k) > 0.

k+1 − ti

3 Event-triggered

leader-following

control

under a directed graph G

In this section, we propose an event triggering rule and a
leader-following tracking control for multi-agent systems
where the followers are connected over a directed
graph. Our result will involve certain symmetric positive
deﬁnite matrices R, Q, and Y related through the
following Riccati inequality

˙xi = Axi + Bui,

(1)

Y A + A′Y − 2ϑminY BR−1B′Y + Q ≤ 0,

(6)

where xi ∈ ℜn is the state, ui ∈ ℜp is the control input.
Also, the dynamics of the leader agent are given by

˙x0 = Ax0.

(2)

Note that the matrix A is not assumed to be Hurwitz,
it can be marginally stable or even unstable.

We wish to ﬁnd a distributed event-triggered control law
for each follower to be able to track the leader. For each
agent i, introduce a combinational state zi(t),

zi(t) = Xj∈Ni(cid:0)xj(t) − xi(t)(cid:1) + gi(cid:0)x0(t) − xi(t)(cid:1).

(3)

We seek to develop a control scheme where agent i
updates its control input at event times, which are

1 These properties of the matrix L + G can be guaranteed
under weaker assumptions on the graph G [28].

3

α α2 > 0, where α1 = λmin(Q)

and constants ω > 0 and µi > 0 chosen so that
ρi = α1 − µi − ω
λmax(Y ) and
α2 = λmax(P )λ2
ρi and
select νi > 0, σi ∈ (0, ρmin) and γ > 0. Introduce the
combinational state measurement error for agent i

max(Y BR−1B ′Y )
ϑλmin(Y )

. Let ρmin = min

i

si(t) = ˆzi(t) − zi(t).

(7)

Theorem 1 Given R = R′ > 0, Q = Q′ > 0, suppose
there exists Y = Y ′ > 0 such that (6) holds. Then under
the control law (4) with K = − 1
α R−1B′Y , the system
(1), (2) achieves the leader-follower tracking property
, if the
of the form (5) with ∆ =
communication events are triggered at

ϑλmin(Y )λmin(F )ρmin

N γ

ti

k = infnt > ti

k−1 :

ksik2 ≥ αω(µiϑ−1
i z′

iY zi + νie−σit + γ)o.

(8)

In addition, the system does not exhibit Zeno behavior.

Remark 1 The Riccati
inequality (6) is similar to
the Riccati inequality employed in [15]. However, [15]
considers an undirected topology, and the design uses
the second smallest eigenvalue of L. In contrast, (6) uses
ϑmin associated with the directed graph G. Also, the
inequality (6) is equivalent to the following LMI in Y −1,
which can be solved using the existing LMI solvers,

" AY −1 + Y −1A′ − 2ϑminBR−1B Y −1

Y −1

−Q−1# ≤ 0.

Remark 2 We note that the event triggering condition
(8) involves monitoring of the combinational state zi(t),
hence the means for generating zi(t) continuously are
needed to implement it. A computational algorithm will
be introduced later to generate the combinational state
using event-triggered communications.

Proof of Theorem 1: We ﬁrst prove that kzi(t)k are
bounded. This fact will then be used to prove that under
the proposed control law the system does not exhibit
Zeno behavior. Also, the property (5) will be proved after
Zeno behavior is excluded.

Deﬁne the tracking error εi(t) = x0(t) − xi(t) at node i.
It follows from (7) and (4) that

˙εi(t) =Aεi(t) + BKzi(t) + BKsi(t).

(10)

dV (ε)

Let the Lyapunov function candidate for the system
comprised of the systems (10) be V (ε) = z′(Θ−1 ⊗ Y )z,
where z = ((L + G) ⊗ In)ε, and ε = [ε′
N ]′. Then
= 2z′(cid:0)(Θ−1(L + G) ⊗ Y BK)z

+ (Θ−1 ⊗ Y A)z + (Θ−1(L + G) ⊗ Y BK)s(cid:1).

α R−1B′Y , the following inequality holds

1 . . . ε′

(11)

dt

Since K = − 1
2z′((Θ−1(L + G)) ⊗ (Y BK))z
Y BR−1B′Y )(cid:17)z
= −z′(cid:16)H ⊗ (
≤ −2αz′(cid:16)IN ⊗ (
Y BR−1B′Y )(cid:17)z.

1
α

1
α

Using (6), it follows from (11) and (12) that

dV (ε)

dt ≤ − z′(cid:0)Θ−1 ⊗ Q(cid:1)z +

+

1
αω

s′s

ω
α

z′(cid:0)P ⊗ (Y BR−1B′Y )2(cid:1)z.

Since the triggering condition (8) enforces the property

(12)

(13)

on every interval [ti

k, ti

k+1), then it follows from (13) that

dV (ε)
dt ≤ −

N

Xi=1

ρiϑ−1

i z′

iY zi +

νie−σit + N γ

N

Xi=1

≤ −ρminV (ε) +

νie−σit + N γ.

(15)

Thus, we have

(9)

N

Xi=1

N

V (ε) ≤ e−ρmint(cid:16)V (ε(0)) −

νi

ρmin − σi −

Xi=1
ρmin − σi

νi

νi

ρmin − σi

+

N γ
ρmin

+

N γ
ρmin

N γ

ρmin(cid:17)

(16)

= κ,

(17)

N

+

Xi=1
≤ V (ε(0)) +

e−σit

N

Xi=1

κ ≥ V (ε) = z′(Θ−1 ⊗ Y )z ≥ ϑλmin(Y )

where the constant κ depends on the initial conditions.
It then follows from (17) that for all t ≥ 0
Xi=1
This implies that for all i, kzi(t)k is bounded,
kzi(t)k ≤pκ(ϑλmin(Y ))−1 = ¯κ.

kzik2. (18)

(19)

N

Next, we prove that the system does not exhibit Zeno
behavior. Suppose t1, t2 are two adjacent zero points
of si(t) on the interval [ti
k+1.
Then ksi(t)k > 0 for all t ∈ (t1, t2) ⊆ (ti
k+1), and the
following inequality holds on the interval (t1, t2)

k ≤ t1 < t2 < ti

k+1), ti

k, ti

k, ti

d
dtksik =

d
dt

(s′

isi)1/2 =

s′
i ˙si

ksik ≤ ksikk ˙sik
ksik

= k ˙sik. (20)

Furthermore, note that on the interval [t1, t2)

˙si(t) = − ˙zi(t),

si(t+

1 ) 2 = 0.

(21)

It follows from (2) that ∀t ∈ [t1, t2)

k ˙si(t)k =(cid:13)(cid:13) Xj∈Ni(cid:0) ˙xj(t) − ˙xi(t)(cid:1) + gi(cid:0) ˙x0(t) − ˙xi(t)(cid:1)(cid:13)(cid:13)
=(cid:13)(cid:13)(cid:13)
k)(cid:17)(cid:13)(cid:13)(cid:13)
Azi(t) + BK(cid:16) Xj∈Ni(cid:0)zi(ti
k) − ˆzj(t)(cid:1) + gizi(ti
≤ kAkksi(t)k + M i
k,

(22)

(αω)−1ksik2 ≤ µiϑ−1
i z′

iY zi + νie−σit + γ

(14)

2 As usual, s(a+) , limt↓a s(t), s(b−) , limt↑b s(t).

4

where M i

k = max
k,ti

t∈[ti

k+1)kAzi(ti

k) + BK(cid:16) Pj∈Ni(cid:0)zi(ti

k) −
k)(cid:17)k. Hence, using (20) and (22) we obtain
k) − 1)
(ekAk(t−t1) − 1) ≤
(23)

M i
k
kAk

(ekAk(ti

k+1−ti

ˆzj(t)(cid:1) + gizi(ti
M i
k
ksik ≤
kAk

k, ti

for all t ∈ (t1, t2). Since si(t+
1 ) = 0, (23) holds for all
t ∈ [t1, t2) ⊆ [ti
k+1). The expression on the right hand
side of (23) is independent of t; hence the above reasoning
applies to all such intervals [t1, t2). Hence, (23) holds for
all t ∈ [ti
k+1). Thus, from the deﬁnition of the event
time ti

k+1 in (8) and (23) we obtain

k, ti

√αωγ ≤ ksi((ti

k+1)−)k ≤

M i
k
kAk

(ekAk(ti

According to (19), for any k, M i

follows from (24) that

gi)kBKk(cid:1)¯κ = ηi¯κ ≤ ¯η¯κ, where ¯η = max
ln(cid:16)1 + kAk√αωγ

ti
k+1 − ti

1
kAk

k ≥

¯η¯κ

k+1−ti

k) − 1). (24)
k ≤ (cid:0)kAk + (2di +

ηi. Hence, it

i

(25)

(cid:17).

Thus, the inter-event intervals are bounded from below
uniformly in k, that is, Zeno behavior does not occur.

Since Zeno behavior has been ruled out, it follows from
(16) and the rightmost inequality in (18) that for all i,

lim sup

t→∞ PN

i=1kzi(t)k2 ≤ N γ(ϑλmin(Y )ρmin)−1.

(26)

Since z = ((L + G) ⊗ In)ε, this further implies
t→∞ PN

i=1kεi(t)k2 ≤

ϑλmin(Y )λmin(F )ρmin

lim sup

N γ

I.e., (5) holds. This concludes the proof.

.

(27)

✷

According to (25) and (27), the parameter γ not only
helps to exclude Zeno behavior, but also determines the
upper bound of the tracking errors. We now show that
after a suﬃciently large time, the lower bound on the
inter-event intervals becomes independent of γ. More
precisely, the following statement holds.

Corollary 1 For any δ > 0, there exists a suﬃciently
large tδ such that with the control law and event triggering
condition proposed in Theorem 1,

inf
k : ti
k>tδ

k+1 − ti
(ti
k)
ln(cid:16)1 + kAkpαωϑλmin(Y )ρmin

¯η(1 + δ)√N

1
kAk

≥

(cid:17) = π.

(28)

5

Proof: According to (26), for any δ > 0, there exists
, ̟1 for
all i and t > tδ. Therefore, for a suﬃciently large k,
M i
follows from (24).

tδ such that kzi(t)k < (1 + δ)q
k ≤ (cid:0)kAk + (2di + gi)kBKk(cid:1)̟1 ≤ ¯η̟1. Then (28)

ϑλmin(Y )ρmin

N γ

✷

Remark 3 From (27), the upper bound on the tracking
error depends on the parameter γ and the size of the
network N . Therefore, the tracking performance can be
guaranteed even for larger systems, if γ is suﬃciently
small. On the other hand, the lower bound on the inter-
event times in (25) reduces if γ is reduced. This means
that a higher tracking precision can be achieved by
reducing γ, but the communications may become more
frequent. However, Corollary 1 shows that when γ is
reduced, the frequency of communication events may
increase only on an initial interval [0, tδ], and after time
tδ the minimum inter-event time π is independent of γ.

Remark 4 Selecting the parameters for the event-
triggering condition (8) involves the following steps: (a)
choose matrices Q > 0 and R > 0 and solve the Riccati
inequality (6), or equivalently the LMI (9), to obtain the
matrix Y , then compute α1 and α2; (b) choose µi > 0
and ω > 0 to compute ρi > 0; (c) choose σi ∈ (0, ρmin);
(d) based on the desired upper bound ∆, select γ, see
(27); (e) Lastly, choose νi. Note that the term νie−σit
in (8) governs the triggering threshold during the initial
stage of the tracking process. Thus it determines the
frequency of communication events during this stage.
The value of νi depends on the selected σi. If σi is large,
then typically a relatively large νi must be chosen to
ensure the communication events occur less frequently.

4 Event-triggered

leader-following

control

under an undirected graph G

Although the problem for an undirected G can be
regarded as a special case of the problem in Section 3,
an independent derivation is of interest, which uses the
symmetry of the matrix L + G. Accordingly, a diﬀerent
event triggering condition is proposed for this case.

Theorem 2 Let R = R′ > 0, Q = Q′ > 0 be given
matrices. Suppose there exists a matrix Y = Y ′ > 0, Y ∈
ℜn×n, solving the following Riccati inequality
Y A + A′Y − 2λY BR−1B′Y + Q ≤ 0,

(29)

where λ = λmin(λi) and λi are the eigenvalues of
L + G. Then under the control
law (4) with K =
−R−1B′Y the system (1), (2) achieves the leader-
follower tracking property of the form (5) with ∆ =
N γ(ρλmin(Y )λmin(F ))−1, if the communication events

are triggered at

µiz′

iQzi + νie−σit + γ

ti

2̟2

k−1 : kzikksik ≥

o;
k = infnt > ti
here ̟2 = λmax(L + G)λmax(Y BR−1B′Y ), µi, νi, σi
and γ are positive constants chosen so that 0 < µi < 1,
νi > 0, γ > 0 and σi ∈ (0, ρ), where ρ = (1 −
µi. In addition
µmax)λmin(Q)/λmax(Y ), µmax = max
under this control law, Zeno behavior is ruled out:

(30)

i

inf
k

(ti
k+1 − ti

k) ≥

1
kAk

ln(cid:16)1 + kAkγ
2̟2 ¯η2(cid:17);

(31)

here  =ph/λmin(Y ), h is deﬁned in (34) below.

Remark 5 The Riccati inequality (29) in this theorem
is similar to the Riccati inequality employed in [15].
However, our condition (29) depends on the smallest
eigenvalue λ of the matrix L + G. In contrast, in [15]
the second smallest eigenvalue of the graph Laplacian
matrix is required to build the consensus algorithm.
When the graph topology is completely known at each
node, λ can be readily computed. But even when the
graph G is not known at each node, λ can be estimated
in a decentralized manner [26]. Errors between the true
eigenvalue λ and its estimate ˆλ can be accommodated
by replacing (29) with a slightly more conservative
condition. Suppose |λ − ˆλ| < ̺1, then the following
Riccati inequality can be used in lieu of (29):

Y A + A′Y − 2(ˆλ − ̺1)Y BR−1B′Y + Q ≤ 0.

Proof of Theorem 2: The proof is similar to the proof
of Theorem 1 except for the procedure of obtaining an
upper bound of zi(t). Therefore, we only outline the
proof of boundedness of zi(t). The closed loop system
consisting of error dynamics (10) is represented as

˙ε = (IN ⊗ A + (L + G) ⊗ BK)ε + (IN ⊗ BK)s, (32)
N ]′.
where as before ε = [ε′

N ]′ and s = [s′

1 . . . ε′

1 . . . s′

It follows from [20] that all the eigenvalues of matrix
L + G ar positive. Let T ∈ ℜN ×N be an orthogonal
matrix such that T −1(L+G)T = Λ = diag{λ1, . . . , λN}.
N ]′. Using
Also, let ζ = (T −1 ⊗ In)ε, ζ = [ζ′
this coordinate transformation, the system (32) can be
represented in terms of ζ and s, as

1 . . . ζ′

˙ζ =(cid:0)IN ⊗ A + Λ ⊗ (BK)(cid:1)ζ + (T −1 ⊗ (BK))s.
Consider the following Lyapunov function candidate for
the system (33), V (ζ) = ζ′(Λ2 ⊗ Y )ζ. Using (29), the

(33)

6

N

k, ti

k+1),

1, . . . , z′

coordinate transformation ζ = (T −1⊗ In)ε, the identity
N ]′, and condition
z = (cid:0)(L + G) ⊗ In(cid:1)ε, z = [z′
(30) we can show that on every interval [ti
V (ζ) ≤e−ρt(cid:16)V (ζ(0)) −
Xi=1
ρ − σi
νi
Xi=1

ρ − σi −

≤V (ζ(0)) +

ρ (cid:17)

ρ − σi

Xi=1

N γ
ρ

N γ
ρ

e−σit

= h.

(34)

N γ

νi

νi

+

+

+

N

N

V (ζ) can be expressed in terms of ε using the inverse
transformation ζ = (T −1⊗ In)ε and z = ((L + G)⊗ In)ε
(35)

V (ζ) = ε′((L + G)2 ⊗ Y )ε = z′(IN ⊗ Y )z.
It then follows from (35) that λmin(Y )PN

i=1 kzi(t)k2 ≤
V (ζ). The rest of the proof of this theorem is similar to
the proof of Theorem 1 and is omitted for brevity.
✷

Remark 6 It can be shown that the observation made
in Remark 3 applies in this case as well. The parameters
in the event triggering conditions (30) can be selected
following a process similar to that outlined in Remark 4.

5 Generation of the combinational state

To implement the event triggering conditions (8) and
(30) in Theorems 1 and 2, the combinational state
zi(t) must be known at all times. We now describe
how node i can generate zi(t) continuously using only
discrete communications from its neighbors at event
times. This eliminates the need for agent i to monitor
and communicate with its neighbors continuously.

According to (1), for t ∈ [ti
k+1), the dynamics of xi(t)
and xj (t), j ∈ Ni, on this interval can be expressed as

k, ti

xi(t) = eA(t−ti

eA(t−τ )BKzi(ti

k)dτ,

(36)

xj(t) = eA(t−ti

ti
k
ˆtj

k)xi(ti

k)xj (ti

k) −Z t
k) −Z
m<tZ min(t,tj

tj
m

ti
k
m+1)

eA(t−τ )BKzj(tj

l )dτ

eA(t−τ )BKzj(tj

m)dτ,

(37)

− Xm : ti
ˆtj =( tj

k<tj
l+1, if j has at least one event on [ti
t,

otherwise,

k, t),

where tj
k, t)). Equation (37)
accounts for the fact that agent j may experience several

l+1 = min(tj

m ∈ [ti

m : tj

k+1). When [ti

events at times tj
m, m = l+1, . . ., within the time interval
[ti
k, ti
k, t) contains no event triggered by
agent j, the last term in (37) vanishes. Similarly, the
dynamics of the tracking error εi(t) can be expressed as

εi(t) = eA(t−ti

k)εi(ti

k) +Z t

ti
k

eA(t−τ )BKzi(ti

k)dτ.

(38)

Using the notation Φ(t, t′) = R t′

follows from (3), (36), (37) and (38) that

t eA(t′−τ )BKdτ ,

it

zi(t) = eA(t−ti

k)zi(ti

+ Xj∈Ni Xm : ti
+ Xj∈Ni

Φ(ti

m<t

k<tj
k, ˆtj)(zi(ti

k, t)zi(ti
k)

k) + giΦ(ti
Φ(tj

m, min(t, tj

m+1))(zi(ti

k) − zj(tj

m))

k) − zj(tj

l )).

(39)

k, ti

m), ti

k < tj

k) and zj(tj

m < t. It has zi(ti

According to (39), to generate zi(t), agent i must know
zi(ti
k) in hand
and thus it must only receive zj(tj
m) when an event is
triggered at node j during [ti
k+1). To ensure this, we
propose an algorithm to allow every agent to compute
its combinational state and broadcast it to its neighbors
at time instants determined by its triggering condition.
This algorithm has a noteworthy feature that follows
from (39) in that only one-way communications occur
between the neighboring agents at the triggering time,
even when the graph G is undirected.
Before presenting the algorithm formally, let us illustrate
using (39) with an example involving three agents, A1,
A2 and A3; see Fig. 1 and 2. E.g., consider the timeline
in Fig. 1(b). According to the timeline of A2, an event
has been triggered for A2 at time t2
k. Until it receives
communications from the neighbors, A2 computes z2(t)
p−1) and z3(t3
using (39) with the information z1(t1
q−1)
received from A1 and A3 prior time t2
k. This information
is used in the third line of (39). Note that ˆt1 = ˆt3 = t
until A2 receives the ﬁrst message; the terms in the
second line are zero until then. At time t1
p, an event
occurs at node 1, and A2 receives the value of A1’s
combinational state, z1(t1
p). From this time on, it starts
using Φ(t1
p)) in (39), until the next
message arrives, this time from A3. Overall during the
k+1), A2 receives z1(t1
k, t2
interval [t2
p+1) from
A1 and z3(t3
q) from A3, which it uses in (39) to compute
z2(t). When G is directed, A2 computes z2(t) in the same
manner, but it only receives z1(t1
p+1) from
A1, as shown in Fig. 2(b).

k) − z1(t1

p) and z1(t1

p) and z1(t1

p, t)(z2(t2

A1

A2

t2
k

A3

1

2

3

(a)

t1
p

z1(t1
p)

t1
p+1

z1(t1

p+1)

z2(t2
k)

t3
q

t1
p

t1
p+1

t2
k+1

z2(t2

k+1)

z3(t3
q)

t3
q

(b)

Fig. 1. Communication between followers in an undirected
network: (a) The graph; (b) Communication events.

A1

A2

A3

1

2

3

(a)

t1
p
z1(t1
p)

t2
k
z2(t2
k)

t1
p

t1
p+1

z1(t1

p+1)

t2
k+1

t1
p+1

z2(t2

k+1)

z3(t3
q)

t3
q

(b)

Fig. 2. Communication between followers in a directed
network: (a) The graph; (b) Communication events.

the local event time record ti
measurement error si(t) = 0.

k = 0, and the local

(b) Receive xj(0) from all neighbors j ∈ Ni;
(c) Send xi(0) to agents r such that i ∈ Nr;
(d) Compute zi(0) using the received xj (0), j ∈ Ni;
(e) Receive zj(0), j ∈ Ni, and send zi(0) to agents r
Do While (8) (if G is directed) or (30) (if G is
undirected) is not satisﬁed:
(a) Compute zi(t) with the latest received ˆzj(t), j ∈

such that i ∈ Nr.

Ni, using (39), then update si(t) using (7);

Else

(a) Advance the event counter k = k + 1, and set

ti
k = t, si(t) = 0;

(b) Set zi(ti

k) = zi(t) and send zi(ti

k) to agents r such

that i ∈ Nr;

(c) Update the control signal ui = −Kzi(ti
k).

End

As one can see, the algorithm uses only one-directional
communications between agents at event times: the
information is received from j ∈ Ni when an event occurs
at node j and is sent to r, i ∈ Nr when an event occurs
at node i, e.g., see Figs. 1(b) and 2(b).

We conclude this section by summarizing the algorithm
for generating the combinational state zi(t) at each node.

Initialization.

(a) Synchronize local clocks to set t =
0 at each node, also set the event counter k = 0,

6 Example

Consider a system consisting of
twenty identical
pendulums. Each pendulum is subject to an input as
shown in Fig. 3. The dynamic of the i-th pendulum is

7

l

α0

Leader

α1

u1 →

α20

u20 →

Fig. 3. The system consisting of twenty pendulums and the
leader pendulum.

1

2

0

20

8

12

15

19

(a) Undirected follower graph

1

2

0

20

8

12

15

19

(b) Directed follower graph

Fig. 4. Communication graphs for the example.

governed by the following linearized equation

ml2 ¨αi = − mglαi − ui,

i = 1, . . . , 20,

(40)

where l is the length of the pendulum, g = 9.8 m/s2 is the
gravitational acceleration constant, m is the mass of each
pendulum and ui is the control torque (realized using a
DC motor). In addition, consider the leader pendulum
which is identical to those given and whose dynamic is
described by the linearized equation

ml2 ¨α0 = −mglα0.

(41)

Choosing the state vectors as xi = (αi, ˙αi), i = 0, . . . , 20,
equations (40) and (41) can be written in the form of

(1), (2), where A =" 0

−g/l 0#, B ="

1

0

−1/(ml2)#. In this

example, we let m = 1 kg, l = 1 m.

Both undirected and directed follower graphs G are
considered in the example, shown in Fig. 4(a) and 4(b),
respectively. According to Fig. 4, in both cases agents
1, 8, 12 and 15 measure the leader’s state, however in
the graph in Fig. 4(b) follower i is restricted to receiving
information from follower i−1 only, whereas in Fig. 4(a),
it can receive information from both i − 1 and i + 1.
We implemented four simulations to compare the results
proposed in this paper and also to compare them with
the results in [30]. The directed graph in Fig. 4(b) was
employed to illustrate Theorem 1 in Simulation 1. In
Simulation 2, we implemented the controller designed
using Theorem 2 with the undirected graph in Fig. 4(a).
We applied Theorem 1 using the same undirected graph
in Fig. 4(a) in Simulation 3. In Simulation 4, we applied
the event-based control strategy proposed in Theorem

8

3 [30], also using the directed graph in Fig. 4(b).
Out of the results in [30], we chose Theorem 3 for
comparison, because it has a way to avoid continuous
communications between the followers; this allows for a
fair comparison with our methods.

In the ﬁrst three simulations, we aimed to restrict the
predicted upper bound on the tracking error to ∆ ≤
0.05. In the design, we chose the same Q matrix and
adjusted R to obtain the same control gains in the three
simulations. The parameters of the triggering conditions
(8) and (30) and the design parameters were set as shown
in Table 1. In Simulation 4, using the same matrix Q,
we computed the control gain K = [2.63, 7.24] and also
chose the parameters required by Theorem 3 of [30] as
follows: h = 5, β1 = 0.1, β2 = 0.15, γ = 0.2 and τ = 0
(see [30] for the deﬁnition of these parameters). In all
simulations we endeavoured to achieve the least number
of communications events.

The simulation results achieved in Simulations 1-3 are
shown in Table 1. In the table, J[18,20] denotes the
maximum actual tracking errorPN
i=1 kεi(t)k2 observed
over the time interval t ∈ [18, 20], t[0,20], t[0,10], t[10,20]
and E[0,20], E[0,10], E[10,20] represent the minimum inter-
event intervals and the total number of events occurred
in the system on the time intervals [0, 20], [0, 10], [10, 20],
respectively. The corresponding results of Simulation 4
are J[18,20] = 1.8778 × 10−6, t[0,20] = 21.1 ms, t[0,10] =
21.1 ms, t[10,20] = 101.5 ms, E[0,20] = 2857, E[0,10] =
1767 and E[10,20] = 1090. The tracking errors are
shown in Fig. 5, which illustrates that all four event-
triggered tracking control laws enable all the followers
to synchronize to the leader.

The ﬁrst comparison was made between the techniques
developed in this paper for systems connected over
directed and undirected graphs; these techniques were
applied in Simulations 1 and 2, respectively. Although
the minimum inter-event intervals in Simulation 2 were
observed to be smaller than those in Simulation 1,
on average the events were triggered less frequently
in Simulation 2. This demonstrates that connecting
the followers into an undirected network and using
the design scheme based on Theorem 2 may lead to
some advantages in terms of usage of communication
resources.

Next, we compared Simulations 2 and 3 using the
same undirected follower graph in Fig. 4(a) based on
Theorems 1 and 2 developed in the paper. Compared
with Simulation 2, more communication events and
smaller minimum inter-event intervals were observed in
Simulation 3. One possible explanation to this is because
the method based on Theorem 2 takes an advantage
of the symmetry property of the matrix L + G of the
undirected follower graph in the derivation.

Finally, we compared Simulations 1 and 4 where we

Table 1
The design parameters and simulation results.

Simulation 1

Simulation 2

Simulation 3

(Theorem 1

(Theorem 2

(Theorem 1

and Fig. 4(b))


10.59 0.42



0.42 1.05

and Fig. 4(a))


10.59 0.42



0.42 1.05

and Fig. 4(a))


10.59 0.42



0.42 1.05

1.1394

0.1

1.5405

[5.23 13.08]

[5.23 13.08]

[5.23 13.08]

0.0877

0.001

0.1

0.5025

2.5

−

−

0.1

0.7198

2

0.0649

0.001

0.1

0.3007

1.2

2.9769 × 10−5 7.9990 × 10−6 3.1507 × 10−6

0.0462

0.0462

0.0462

Q

R

K

α

ω

µi

σi

νi

γ

∆

J[18,20] 3.4524 × 10−7 3.5259 × 10−6 1.5518 × 10−6
t[0,20]

5.9 ms

6.2 ms

1.9 ms

t[0,10]

t[10,20]

E[0,20]

E[0,10]

E[10,20]

6.2 ms

30.7 ms

2240

1285

955

5.9 ms

24.9 ms

2091

1217

874

1.9 ms

26.0 ms

2979

1993

986

used the same directed follower graph in Fig. 4(b)
for both designs. Although compared with the method
of Theorem 3 of [30], our method produced smaller
minimum time intervals between the events, the total
number of events occurred during the simulation using
our method was also smaller. We remind that we
endeavoured to select the simulation parameters and
the controller gains for this simulation to reduce the
total number of events. We also tried to compare
the performance of the two methods by tuning the
controller of [30] to almost the same gain as in Simulation
1, but the results in Simulation 4 were even worse,
producing a much greater number of communication
events (E[0,20] = 5553, E[0,10] = 3100 and E[10,20] =
2453).

7 Conclusions

The paper has studied the event-triggered leader-
follower
tracking control problem for multi-agent
systems. We have presented suﬃcient conditions to
guarantee that the proposed event-triggered control
scheme leads to bounded tracking errors. Furthermore,
our results show that by adjusting the parameters
of the triggering condition, the upper bound on the
tracking errors guaranteed by these conditions can be

9

s
r
o
r
r
e

 

i

g
n
k
c
a
r
T

s
r
o
r
r
e

 

i

g
n
k
c
a
r
T

s
r
o
r
r
e

 

i

g
n
k
c
a
r
T

s
r
o
r
r
e

 

i

g
n
k
c
a
r
T

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

0

5

10

Time (s)

15

20

(a) Simulation 1

5

10

Time (s)

15

20

(b) Simulation 2

5

10

Time (s)

15

20

(c) Simulation 3

5

10

Time (s)

15

20

(d) Simulation 4

Fig. 5. Tracking errors kεik.

tuned to a desired small value, at the expense of more
frequent communications during an initial stage of the
tracking process. Such conditions have been derived for
both undirected and directed follower graphs. Also, we
showed that the proposed event triggering conditions
do not lead to Zeno behavior even if a tight accuracy
requirement on the tracking errors is imposed. In fact,
with the proposed triggering rules, such tight accuracy
requirements do not impact the inter-event intervals
after a suﬃciently large time. We also presented a
computational algorithm which allows the nodes to
continuously generate the combinational state at every
node which is needed to implement these event triggering
schemes. Thus, continuous monitoring the neighboring
states is avoided. The eﬃcacy of the proposed algorithm
has been demonstrated using a simulation example.
Future work will include the study of robustness of the
proposed control scheme.

8 Acknowledgements

The authors thank the Associate Editor and the
Reviewers for their helpful and constructive comments.

References

[1] W. Ren and R. W. Beard, Distributed consensus in multi-

vehicle cooperative control. London: Springer-Verlag, 2008.

[2] G. Xie, H. Liu, L. Wang, and Y. Jia, “Consensus in networked
multi-agent systems via sampled control: ﬁxed topology case,”
Proc. ACC, 2009, pp.3902–3907.

[3] M. Mazo Jr., A. Anta, and P. Tabuada, “An ISS self-triggered
implementation of linear controller,” Automatica, 46, 1310–
1314, 2010.

[4] W. P. M. H. Heemels, K. H. Johansson, and P. Tabuada, “An
introduction to event-triggered and self-triggered control,”
Proc. 51st IEEE CDC, 2012, pp.3270–3285.

[5] P. Tabuada,

of
stabilizing control tasks,” IEEE Trans. Autom. Contr., 52,
1680–1685, 2007.

“Event-triggered real-time

scheduling

[6] J. Lunze and D. Lehmann, “A state-feedback approach to

event-based control,” Automatica, 46, 211–215, 2010.

[7] D. V. Dimarogonas and K. H. Johansson,“Event-triggered
control for multi-agent systems”, Proc. 48th IEEE CDC - 28th
CCC, 2009, pp.7131–7136.

[8] X. Wang and M. Lemmon, “Event-triggering in distributed
networked control systems,” IEEE Trans. Autom. Contr., 56,
586–601, 2011.

[9] D. V. Dimarogonas, E. Frazzoli, and K.H. Johansson,
“Distributed event-triggered control for multi-agent systems,”
IEEE Trans. Autom. Contr., 57, 1291–1297, 2012.

[10] W.P.M.H. Heemels and M.C.F. Donkers, “Model-based
systems,”

control

linear

periodic
Automatica, 49, 698–711, 2013.

event-triggered

for

[11] G.

S.

Seyboth, D. V. Dimarogonas,

and K. H.
Johansson, “Event-based broadcasting for multi-agent average
consensus,” Automatica,49, 245–252, 2013.

[12] Y. Fan, G. Feng, Y. Wang, and C. Song, “Distributed event-
triggered control for multi-agent systems with combinational
measurements,” Automatica, 49, 671–675, 2013.

[13] X. Meng and T. Chen, “Event based agreement protocols for

multi-agent networks,” Automatica, 49, 2125–2132, 2013.

[14] W. Zhu, Z. P. Jiang, and G. Feng, “Event-based consensus of
multi-agent systems with general linear models,” Automatica,
50, 552–558, 2014.

[15] E. Garcia, Y. Cao, and D. W. Casbeer, “Decentralized
linear dynamics,”

event-triggered consensus with general
Automatica, 50, 2633–2640, 2014.

[16] D. Liuzza, D. V. Dimarogonas, M. di Bernardo, and K. H.
Johansson, “Distributed model-based event-triggered control
for synchronization of multi-agent systems,” Proc. IFAC Conf.
Nonlinear Contr. Syst, 2013, pp. 329-334.

[17] A. Adaldo, F. Alderisio, D. Liuzza, G. Shi, D. V.
Dimarogonas, M. di Bernardo and K. H. Johansson, “Event-
triggered pinning control of complex networks with switching
topologies,” Proc. 53rd IEEE CDC, 2014, pp. 2783–2788.

[18] A. Jadbabaie, J. Lin, and S. A. Morse, “Coordination of
groups of mobile autonomous agents using nearest neighbor
rules,” IEEE Trans. Automat. Contr., 48, 988–1001, 2003.

[19] W. Ren and E. Atkins,

“Distributed multi-vehicle
coordinated control via local information exchange,” Int. J.
Robust and Nonlinear Contr., 17, 1002–1033, 2007.

[20] Y. G. Hong, J. P. Hu, and L. X. Gao, “Tracking control
for multi-agent consensus with an active leader and variable
topology,” Automatica, 42, 1177–1182, 2006.

[21] J. Hu, G. Chen, and H. Li, “Distributed event-triggered
tracking control of leader-follower multi-agent systems with
communication delays,” Kybernetika, 47, 630–643, 2011.

[22] Y. Zhang and Y. Hong, “Distributed event-triggered tracking
control of multi-agent systems with active leader,” Proc.
10th World Congress on Intelligent Control and Automation,
Beijing, China, 2012, pp. 1453–1458.

[23] H. Li, X. Liao, T. Huang, and W. Zhu, “Event-triggering
sampling based leader-following consensus in second-order
multi-agent systems,” IEEE Trans. Autom. Contr., 60, 1998–
2003, 2015.

[24] J. Hu, J. Geng and H. Zhu, “An observer-based consensus
tracking control and application to event-triggered tracking”,
Communications
in Nonlinear Science and Numerical
Simulation, 20, 559–570, 2015.

[25] T. Liu, M. Cao, C. De Persis, and J. M. Hendrickx,
“Distributed event-triggered control for synchronization of
dynamical networks with estimators”, Proc. IFAC Workshop
on Distributed Estimation and Control in Networked Systems,
Koblenz, Germany, September 2013, pp. 116–121.

[26] M. Franceschelli, A. Gasparri, A. Giua, and C. Seatzu,
“Decentralized estimation of Laplacian eigenvalues in multi-
agent systems,” Automatica, 49, 1031–1036, 2013.

[27] H. W. Zhang, Frank L. Lewis, and Z. H. Qu, “Lyapunov,
adaptive, and optimal design techniques for cooperative
systems on directed communication graphs,” IEEE Trans.
Industrial Electronics, 59, 3026–3041, 2012.

[28] J. Hu and Y. Hong, “Leader-following coordination of multi-
agent systems with coupling time delays,” Physica A, 374,
853–863, 2007.

[29] E. Kaszkurewicz and A. Bhaya, Matrix Diagonal in Systems

and Computation, Birkh¨auser Boston, 2000.

[30] W. Zhu and Z.P. Jiang, “Event-based leader-following
consensus of multi-agent systems with input time delay,” IEEE
Trans. Automat. Contr., 60, 1362–1367, 2015.

10

