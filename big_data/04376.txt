6
1
0
2

 
r
a

 

M
4
1

 
 
]
S
D
.
s
c
[
 
 

1
v
6
7
3
4
0

.

3
0
6
1
:
v
i
X
r
a

A Fast Parameterized Algorithm for Co-Path Set

Blair D. Sullivan and Andrew van der Poel

Department of Computer Science

North Carolina State University, Raleigh, NC 27695

{blair_sullivan,ajvande4}@ncsu.edu

Abstract. The k-Co-Path Set problem asks, given a graph G and
a positive integer k, whether one can delete k edges from G so that
the remainder is a collection of disjoint paths. We give a linear-time
fpt algorithm with complexity O∗(1.838k) for deciding k-Co-Path Set,
signiﬁcantly improving the previously best known O∗(2.17k) of Feng,
Zhou, and Wang (2015). We also describe a new O∗(4tw(G)) algorithm
for Co-Path Set using the Cut&Count framework. In general graphs,
we combine this with a branching algorithm which reﬁnes a 6k-kernel
into reduced instances, which we prove have bounded treewidth.

Keywords: co-path set, parameterized complexity, treewidth, fpt

1

Introduction

We study parameterized versions of Co-Path Set [3], an NP-complete problem
asking for the minimum number of edges whose deletion from a graph results in a
collection of disjoint paths (a co-path set). Speciﬁcally, we are concerned with k-
Co-Path Set, which uses the natural parameter of the number of edges deleted.

k-Co-Path Set
Input: A graph G = (V, E) and a non-negative integer k.
Parameter: k
Problem: Does there exist F ⊆ E of size exactly k such that
G[E \ F ] is a set of disjoint paths?

These problems are naturally motivated by a special case of ﬁnding radiation
hybrid mappings in genetics. These mappings are constructed to determine the
ordering of genetic markers on DNA fragment data (created by breaking chro-
mosomes with gamma radiation) [4, 11, 13]. Co-Path Set is equivalent to the
setting where each fragment contains exactly two markers, giving a graph where
edges in the co-path set obstruct a linear ordering.

Throughout this paper, we will use the notation O∗(f (k)) for O(f (k)nO(1))
when denoting the complexity of fpt (ﬁxed parameter tractable) algorithms;
linear-fpt algorithms guarantee an upper bound of O(f (k)n).

Recent algorithmic results include a (10/7)-approximation algorithm for Co-
Path Set [2], and two randomized algorithms deciding k-Co-Path Set [6, 7].

2

Fig. 1. Three co-path sets (dashed edges), including one of minimum size (rightmost).
The faster parameterized algorithm [7] has time complexity O∗(2.17k). However,
as written, both parameterized results [6,7] contain a ﬂaw in their analysis which
invalidates their probability of a correct solution in the given time1. We note that
if their approach could be corrected, we could integrate it with our O∗(4tw(G)) al-
gorithm (Section 3), improving our bound in Theorem 1 to O∗(1.588k). The best
known bound prior to [6] is an O∗(2.45k) algorithm [14]. In this paper, we prove:

Theorem 1. k-Co-Path Set is decidable in O∗(1.838k) linear-fpt time.

After essential deﬁnitions and notation in Section 2, we start in Section 3
by giving a new O∗(4tw(G)) algorithm tw-copath for solving Co-Path Set pa-
rameterized by treewidth using the Cut&Count framework [5]. Finally, Section
4 describes a linear-fpt algorithm copath, which solves k-Co-Path Set on gen-
eral graphs in O∗(1.838k) by applying tw-copath to a set of “reduced instances”
generated via kernelization and a branching procedure2 deg-branch.

2 Preliminaries

We write G(V, E) for the graph with vertex set V and edge set E. Unless oth-
erwise noted, we assume |V | = n. The degree of a vertex v is denoted deg(v).
Given a graph G(V, E) and F ⊆ E, we write G[F ] for the graph G(V, F ). In
Co-Path Set problems, we want to ﬁnd F so that G[E \ F ] is a collection of
disjoint paths (connected graphs with maximum degree 2 and n − 1 edges); we
will refer to such F as co-path sets (see Figure 1).

Our ﬁrst algorithm for solving Co-Path Set uses dynamic programming
over a tree decomposition, and its running time depends on the related measure
of treewidth, which we denote tw(G) (both introduced by Robertson & Sey-
mour [12] and heavily employed in parameterized complexity). To simplify the
dynamic programming, we will use nice tree decompositions [9], a more restric-
tive variant where each node of T has one of ﬁve speciﬁc types: leaf, introduce

1 Step 2.11 in both versions of Algorithm R-MCP checks if a candidate co-path set F
has size ≤ k1 (as they are sweeping over all possible sizes of candidates and want to
restrict the size accordingly). If F is too large, the algorithm discards it and continues
to the next iteration. However, in order for their analysis to hold, the probability
that the candidate is contained in a co-path set must be ≥ (1/2.17)k1 (or (1/2.29)k1
in [6]) for every iteration. Candidates which are too large may have signiﬁcantly
smaller probability of containment, yet are counted in the exponent of the analysis.
2 The properties of our reduced instances guarantee we can ﬁnd a tree decomposition

in poly(k) time.

3

vertex, introduce edge, forget vertex, or join. This formulation includes the per-
haps unfamiliar “introduce edge” bags, which are labelled with an edge uv and
have one child (with an identical bag); we require each edge in E is introduced
exactly once. A tree decomposition can be transformed into a nice decompo-
sition of the same width in time linear in the size of the input graph [5]. We
use Iverson’s bracket notation in describing our dynamic programming: if p is a
predicate we let JpK be 1 if p is true and 0 otherwise. We also use the shorthand
f [x → y] to denote updating a function f so that f (x) = y and all other values
are unchanged.

When using fast subset convolution in join bags (Section 3), we write ZB

p for
the set of all vectors containing all elements of a set B, where each element is
assigned a value from Zp. Here, we ﬁrst deﬁne the Zp product, then state the
key complexity result we rely on. We use t(b) to represent the value assigned to
element b in vector t.

Deﬁnition 1 (Zp product). Let p ≥ 2 be an integer constant and let B be a
ﬁnite set. For t1, t2, t ∈ ZB
p we say that t1 + t2 = t if t1(b) + t2(b) = t(b) (in Zp)
for all b ∈ B. For functions f, g : ZB

p → Z2 deﬁne the Zp product, ∗p

x as

f (t1)g(t2).

(f ∗p

x g)(t) = Pt1+t2=t

Lemma 1 (Cygan et al. [5]). Let R = Z or R = Zq for some constant q. The
Z4 product of functions f, g : ZB

4 → R can be computed in time 4|B||B|O(1).

3 An O∗(4tw(G)) Algorithm via Cut&Count

We give an fpt algorithm for Co-Path Set parameterized by treewidth using
the Cut&Count framework, which enables ctwnO(1) one-sided Monte Carlo algo-
rithms for connectivity-type problems with constant probability of a false nega-
tive. Cut&Count has previously been used to improve the best-known bounds for
several well-studied problems, including Connected Vertex Cover, Hamil-
tonian Cycle, and Feedback Vertex Set [5]. We show:

Theorem 2. There exists a one-sided fpt Monte Carlo algorithm tw-copath
deciding Co-Path Set in a graph G in O∗(4tw(G)) with failure probability ≤ 1/2.

The Cut&Count technique has two main ingredients: an algebraic approach
to counting which uses arithmetic in Z2 alongside a guarantee that undesirable
objects are seen an even number of times (so a non-zero result implies a desired
solution has been seen), and the idea of deﬁning the problem’s connectivity re-
quirement through consistent cuts. In this context, a consistent cut is a partition-
ing (V1, V2) of the vertices of a graph into two sets such that no edge uv has u ∈ V1
and v ∈ V2 and all vertices of degree 0 are in V1 . Since each connected component
must lie completely on one side of any consistent cut, we see that a graph G has
exactly 2cc(G)−nI (G) such cuts, where cc(G) is the number of connected compo-
nents and nI (G) is the number of isolated vertices. In order to utilize parity with

4

the number of consistent cuts, we introduce markers, which create pairs of consis-
tent cuts for subgraphs that are not collections of disjoint paths. We further use
weights and the Isolation Lemma to bound the probability of a false negative aris-
ing from multiple valid markings of a solution. To count the size of the collection
of subgraphs with marked consistent cuts, tw-copath uses dynamic program-
ming over a nice tree decomposition. We use fast subset convolution [1] to reduce
the complexity required for handling join bags. In the remainder of this section,
we present the speciﬁcs for applying these techniques to solve Co-Path Set.

3.1 Cutting

We ﬁrst provide formal deﬁnitions of markers and marked consistent cuts, which
we use to ensure that sets of disjoint paths are counted exactly once in some
entry of our dynamic programming table.

Deﬁnition 2. A triple (V1, V2, M ) is a marked consistent cut of a graph G
if (V1, V2) is a consistent cut and M ⊆ E(G[V1]). We refer to the edges in M
as the markers. A marker set is proper if it contains at least one edge in each
non-isolate connected component.

Note that proper marker sets determine unique marked consistent cuts. We
refer to the complement of a co-path set (the edges in the disjoint paths) as a
cc-solution, and call it a marked-cc-solution when paired with a proper marker
set of size exactly equal to its number of non-isolate connected components.

We next describe our use of the Isolation Lemma, which guarantees we are

able to use parity to distinguish solutions. Let f (X) denote Px∈X f (x).

Isolation Lemma ([10]). Let F ⊆ 2U be a non-empty set family over universe
U . A function ω : U → Z is said to isolate F if there is a unique S ∈ F with
ω(S) = minF ∈F ω(F ). Assign weights ω : U → {1, 2, ..., N } uniformly at random.
Then the probability that ω isolates F is at least 1 − |U |/N .

Intuitively, if F is the set of solutions and |F| is even, then tw-copath would
return a false negative. The Isolation Lemma allows us to partition F based on
the weight of each solution, and guarantees at least one of the partition’s blocks
has odd size with constant probability. Therefore, let F be the family of marked-
cc-solutions and U contain two copies of every edge e ∈ E: one representing e as
a marker with weight ωM (e), and one as an edge in the cc-solution with weight
ωE(e). Then 2U denotes all pairs of edge subsets (potential marked-cc-solutions),
and we set N = 2|U | = 4E. The probability of ﬁnding an isolating ω is then 1/2,
which allows us to guarantee success with high probability in a poly-logarithmic
number of trials.

3.2 Counting

We now describe a dynamic programming (DP) algorithm over a nice tree de-
composition which counts mod 2 the size of the collection of subgraphs in each

bag’s subtree that have marked consistent cuts. We encode the option to include
or exclude each edge which is introduced during the bottom-up dynamic pro-
gramming from the co-path set, and enforce that entries in the DP table count
subgraphs of G with maximum degree 2 (required in any cc-solution).

5

Variable

Parameter

Maximum value

a
e
m
w

# of non-isolated vertices
# of edges
# of markers
weight of edges and markers

n
n2
n2
4n4

Table 1. Dynamic programming table parameters and upper bounds.

Additionally we distinguish between collections of subgraphs using several
parameters (see Table 1), as well as degree-functions, which keep track of the
degrees of the vertices contained in the current bag. A degree-function maps the
vertices of a bag to Σ = {0, 11, 12, 2}, according to their degree in a table entry’s
corresponding subgraphs – for vertices of degree 1, their value 1j denotes which
side of the partition (V1, V2) they are on. Ax(a, e, m, w, s) is the entry in the
table counting the number of subgraphs at bag x with a non-isolated vertices, e
edges, m markers, weight w, and degree-function s.

We now give our dynamic programming algorithm for counting the num-
ber of subgraphs in each table entry for all bags x ∈ T . In the following, we let
z1, z2 denote the children of a join node; otherwise, the unique child is denoted y.

Leaf : Ax(0, 0, 0, 0, ∅) = 1, Ax(a, e, m, w, s) = 0 for all other inputs.
Introduce vertex v: Ax(a, e, m, w, s) = Js(v) = 0KAy(a, e, m, w, s).
Introduce edge uv:

Jφ2(αu, αv)KAy(a′, e − 1, m, w′, s′)

Ax(a, e, m, w, s) = Ay(a, e, m, w, s) +Xαt∈subs(s(t))
+ Xαt∈subs(s(t))

t∈{u,v}

Jφ1(αu, αv)K(cid:16)Ay(a′, e − 1, m, w′, s′) + Ay(a′, e − 1, m − 1, w′′, s′)(cid:17),

t∈{u,v}

where φj(αu, αv) = (αu = 1j ∨ s(u) = 1j) ∧ (αv = 1j ∨ s(v) = 1j), a′ =
a − (|{11, 12} ∩ {s(u), s(v)}|), w′ = w − ωE(uv), w′′ = w − ωE(uv) − ωM (uv),
s′ = s[u → αu, v → αv], and the subs function returns all the states degree-
function s could yield in child y (summarized below).

s(v)

0 11

subs(s(v)) ∅

0

12

0

2

{11, 12}

We are not forced to use edge uv in a cc-solution, so we include Ay(a, e, m, w, s)
in our summation. We iterate over all possible subs values for each endpoint,

6

only considering counts in child y’s entries where u and v have the appropriate
subs values, preventing us from ever having a vertex with degree greater than
2. Note that we use the φj function to assure that if u or v is an isolate (as per
s) we do not use the introduced edge. We have a summation for both possible
j values in order to consider uv falling on either side of the cut. If we include
uv in a cc-solution, the formulation of a′ assures that each endpoint of degree 1
is now included in the count of non-isolates (i.e. when u and/or v had degree 0
in y). We utilize the marker weight of uv to distinguish when we choose it as a
marker (only if on V1 side of cut), and increment m accordingly. In either case,
we update w appropriately (with w′ if no marker, w′′ if marker introduced).

Forget vertex h: Ax(a, e, m, w, s) =Pα∈{0,11,12,2} Ay(a, e, m, w, s[h → α]).

As a forgotten vertex can have degree 0, 1 or 2 in a solution, we must consider
all possible values that s assigns to h in child bag y. Note that graphs in which h
is both not an isolate and not a member of a connected component that contains
a marker will cancel, as h can be on either side of the cut and the parameters
of the graph will be identical.
Join: We compute Ax from Az1 and Az2 with fast subset convolution, taking
care to only combine table entries whose degree-functions are compatible. Here
compatible means that for degree-functions s1 from Az1, s2 from Az2 , and s from
Ax, one of the following holds for every vertex v in x: (i) si(v) = 0 and sl(v) =
s(v), i 6= l or (ii) s1(v) = s2(v) = 1j and s(v) = 2.

In order to apply Lemma 1, we let B be the bag at x, and transform
the values the degree function s assigns the vertices to be values in Z4. Let
φ : {0, 11, 12, 2} → Z4 and ρ : {0, 11, 12, 2} → Z be deﬁned as in the table below,
extending to vectors by component-wise application.

0

0
0

11

12

1
1

3
1

2

2
2

φ
ρ

From this table it is easy to verify that φ(s1) + φ(s2) = φ(s) and ρ(s1) + ρ(s2) =
ρ(s) together imply that s1, s2 and s are compatible.

Assign t1 = φ(s1), t2 = φ(s2), and t = φ(s) in accordance with Lemma 1. Let

ρ(s) =Pv∈B ρ(s(v)); that is ρ(s) is the sum of the degrees of all the vertices in

the join node, as assigned by degree-function s. By deﬁning functions f and g
as follows:

f hd,a,e,m,wi(φ(s)) = Jρ(s) = dKAz1 (a, e, m, w, s),
ghd,a,e,m,wi(φ(s)) = Jρ(s) = dKAz2 (a, e, m, w, s),

and writing ri for the vector hdi, ai, ei, mi, wii, we can now compute

Ax(a, e, m, w, s) =

(f r1 ∗4

x gr2 )(φ(s))

r1+r2=hρ(s),a′,e,m,wi

X

7

where a′ = a + |s−1

1 {11, 12} ∩ s−1

2 {11, 12}|. We point out that

Xd1+d2=d Xa1+a2=a′

(f r1 ∗4

x gr2 )(φ(s)) = 1

if and only if both φ(s1) + φ(s2) = φ(s) and ρ(s1) + ρ(s2) = ρ(s), that is exactly
when s1, s2 and s are compatible.

We conclude this section by describing how we search the DP table for
marked-cc-solutions at the root node r, which considers all subgraphs. Since
a forest on n vertices and m edges has at most n − m connected components,
if a graph G = (V, E) has a co-path set F of size k, at least one marker set of
size (|V | − nI (G[E \ F ]) − (|E| − k) is proper. Therefore, if Ar(a, |E| − k, a −
|E| + k, w, ∅) = 1 for some a and w, we claim that a solution to k-Co-Path Set
exists. Recall that the parity of the number of subgraphs which correspond to a
table entry is the same as the parity of the number of cc-solutions, and thus if
the parity of a table entry is odd a cc-solution exists for that parameter set. We
know that we want to ﬁnd a cc-solution which has |E| − k edges (where k is the
parameter of the instance) and guarantee this by letting the number of markers
depend on how many non-isolate vertices exist in the subgraph. The speciﬁc val-
ues of a and w do not matter, which is why we consider all valid values of these
parameters. The correctness of tw-copath easily follows from the deﬁnition of
the dynamic programming.

By Lemma 1, the time complexity of tw-copath for a join node B is O∗(4|B|),
which is O∗(4tw). Note that for the other four types of bags, we only consider
one instance of s per table entry and thus the complexity for each is O∗(4tw).
Since the nice tree decomposition has size linear in n, the bottom-up dynamic
programming runs in total time O∗(4tw). This complexity bound combined with
the correctness of tw-copath discussed above proves Theorem 2.

4 Achieving O∗(1.838k) in General Graphs

In order to use tw-copath to solve k-CoPath Set in graphs with unbounded
treewidth, we combine kernelization and a branching procedure to generate a set
of reduced instances. Speciﬁcally, we begin by constructing a kernel of size at most
6k as described in [7], in which some number kf edges are deleted from G. In order
to guarantee bounded treewidth, we apply a branching technique to produce a
set of subgraphs of the kernel with maximum degree 6 (the reduced instances),
and prove that (1) at least one reduced instance is an equivalent instance; (2) we
can bound the number of reduced instances; and (3) each reduced instance has
bounded treewidth. Finally, we analyze the overall computational complexity of
this process.

4.1 Kernelization and Branching

We start by describing our branching procedure deg-branch (Algorithm 1),
which uses a degree-bounding technique similar to that of Zhang et al. [14].

8

The algorithm deg-branch takes an instance (G, k) of Co-Path Set and a non-
negative integer ℓ, and returns a set {(Gi, k − ℓ)} of reduced instances– where
each Gi is a subgraph of G with maximum degree at most 6 and exactly |E| − ℓ
edges, so that at least one (Gi, k − ℓ) is an equivalent instance.

Observe that if a co-path set S exists in a graph G then every vertex has
at most two incident edges not in S. For every vertex with degree greater than
6 we branch on all pairs of incident edges (calling each pair a candidate) which
could remain in G after removing a valid co-path set, creating a search tree
of subgraphs. Therefore, deg-branch returns those subgraphs where exactly ℓ
edges were removed during branching.

Algorithm 1: Generating reduced instances

Algorithm deg-branch(G, ℓ, k)

Let v be a vertex of max degree in G
if deg(v) ≥ 7 and ℓ ≥ deg(v) − 2 then

R = ∅
for e1, e2 ∈ Ev, e1 6= e2 do

// Ev = {uv ∈ E}

v = Ev \ {e1, e2}

E ′
R = R ∪ deg-branch(G \ E ′

v, ℓ − |E ′

v|, k)

end
return R

else if ℓ = 0 and ∆(G) ≤ 6 then return {(G, k − ℓ)}
else return ∅

// Discard G

The size of the output (and hence the running time) of deg-branch crucially not
only depends on the input parameter ℓ—in which case the usual bounded-search
tree arguments would suﬃce—but also on maximum degree of the provided
instance. The maximum degree is, of course, coupled to the parameter ℓ: the
algorithm discards branches in which the number of edits necessary to branch
on a vertex exceeds the number of allowed deletions. Still, it is far from obvious
how this additional degree of freedom inﬂuences the size of the search tree. In
the following, we prove that the search tree attains its maximum size if branches
occur on vertices of degree exactly seven, and hence we are able to bound the
number of reduced instances returned by deg-branch by O(1.838k).

Lemma 2. Let T be a tree rooted at r with two associated labelings λ : V (T ) →
Z+ and ∆ : V (T ) → Z+ which obeys the following constraints: (i) every node x ∈
T with λ(x) < ∆(x) − 2 or λ(x) = 0 is a leaf; (ii) a non-leaf node x has

∆(x) ≥ 7, exactly (cid:0)∆(x)

λ(x) − ∆(x) + 2. Then the number of leaves in T is O(1.838λ(r)).

2 (cid:1) children, and every such child y of x satisﬁes λ(y) =

The T in Lemma 2 corresponds to the search tree produced by deg-branch,
where λ represents the number of edges that may still be deleted from the in-
stance associated with the current tree node, and ∆ its maximum degree. The
constraints speciﬁed by the lemma are consistent with those in the algorithm.

Proof of Lemma 2. We ﬁrst observe that the number of leaves in a search tree
will be maximized when all the nodes at distance i from the root have the same

x/(D−2)

∆ value, say di. Consider such a tree T , and suppose it has height h. Then the

2(cid:1) ≤(cid:0)D
2(cid:1)

2(cid:1); we note that by assumption, di ≥ 7 for

i=0 (di − 2) and D ≤ min({di}),
. In the case of T , we can let x = λ(r) and D = 7, giving

total number of leaves in T isQh−1
i=0 (cid:0)di
all i. We prove in Lemma 3 that for any x ≥Ph−1
Qh−1
i=0 (cid:0)di
an upper bound of (cid:0)7
Lemma 3. Let x1, ..., xn ∈ Z+ such that xi ≥ 3 for all i. Let S =Pn

We now prove the technical lemma used in the proof of Lemma 2.

= 1.838λ(r) on the number of leaves.

If k ≥ S and 3 ≤ x ≤ min1≤i≤n xi, then

2(cid:1)λ(r)/5

i=1(xi − 2).

n

.

Yi=1(cid:18)xi
2(cid:1) > 0, it suﬃces to show

2(cid:19)k/(x−2)
2(cid:19) ≤(cid:18)x
2(cid:19) ≤(cid:18)x
Yi=1(cid:18)xi

n

2(cid:19)S/(x−2)

Proof. Since k ≥ S, and (cid:0)x

We can rewrite this as

9

.

(1)

n

Xi=1
(cid:18) 2
x2 − x(cid:19)

xi − 2

x − 2   n
Yi=1

x2
i − xi

2 ! =

n

Yi=1

x2
i − xi

x2 − x (cid:18) 2

It now suﬃces to show that each term of the product x2
most 1 for all 6 ≤ x ≤ xi.

≤ 1.

xi−x
x−2

x2 − x(cid:19)
x2−x (cid:16) 2
x2−x(cid:17)

i −xi

xi−x
x−2

is at

Claim. Let 3 ≤ x ≤ y. The function f (x, y) = y2−y
satisﬁes f (x, y) ≤
1. Further, for ﬁxed x, f (x, y) is monotonically decreasing as y tends to inﬁnity.

x2−x(cid:16) 2
x2−x(cid:17)

y−x
x−2

Proof of Claim. We will proceed by induction on y. In the ﬁrst base case, when
y = x, we must show f (x, x) ≤ 1 when x ≥ 3. In fact, f (x, x) = 1 for x > 2.
In the second base case, y = x + 1, and we need to show that f (x, x + 1) =

≤ f (x, x) = 1. Multiplying through by (x − 1)/(x + 1) and

1

2

x−2

x(x−1)(cid:17)

x−1(cid:17)(cid:16)
(cid:16) x+1
taking the natural log, it suﬃces to show that ln(cid:16) x−1

or

(x − 2)(ln(x − 1) − ln(x + 1)) ≥ ln(2) − ln(x(x − 1)).

x+1(cid:17) > (cid:16) 1

x−2(cid:17) ln(cid:16)

2

x(x−1)(cid:17),

(2)

One can easily check this holds for x = 3, 4. For x ≥ 5, we ﬁrst show the left-side
of (2) is at least −2:

(x − 2)(ln(x − 1) − ln(x + 1)) ≥ −2 ⇐⇒

2

x − 2

+ ln(x − 1) ≥ ln(x + 1).

We now change variables to y = x − 1, proving 2/(y − 1) + ln(y) ≥ ln(y + 2).
Rewriting ln(y + 2) as ln(y(1 + 2/y)) = ln(y) + ln(1 + 2/y), this holds if and
only if 2/(y − 1) ≥ ln(1 + 2/y). Since ln(1 + 2/y) ≤ 2/y, it suﬃces to show
2/(y − 1) ≥ 2/y, which clearly holds for y > 1, or x > 0. Turning now to the

10

right-side of (2), we show an upper bound of -2. Since the function is decreasing
in x, we need only evaluate at x = 5, where ln(2) − ln(20) ≅ −2.303 < −2,
ﬁnishing our base case.

For the inductive step, we assume f (x, k − 1) ≥ f (x, k) ∀ k ≥ x. Then

f (x, k) ≥ f (x, k + 1) if and only if:

k−x
x−2

k−x

x(cid:19)(cid:18) k − 1
(cid:18) k

x2 − x(cid:19)
x − 1(cid:19)(cid:18) 2
(k − 1)(cid:0)2/(x2 − x)(cid:1)
(cid:0)(x2 − x)/2(cid:1)

⇐⇒

⇐⇒

By the inductive hypothesis,

k+1−x

x−2

≥(cid:18) k + 1

x (cid:19)(cid:18) k

x − 1(cid:19)(cid:18) 2

x2 − x(cid:19)

k+1−x

x−2

x−2 > (k + 1)(cid:0)2/(x2 − x)(cid:1)

x−2 > (k + 1)/(k − 1).

1

(cid:18) k − 1

x (cid:19)(cid:18) k − 2

x − 1(cid:19)(cid:18)

k−1−x

x−2

2

x(x − 1)(cid:19)

>(cid:18) k

x(cid:19)(cid:18) k − 1

x − 1(cid:19)(cid:18)

k−x
x−2

.

2

x(x − 1)(cid:19)

Simplifying, this implies that (x(x − 1)/2)
(k + 1)/(k − 1) for all k ≥ 3, this proves the claim.

1

x−2 > k/(k − 2). Since k/(k − 2) >

Letting y = xi, we see that the terms of our product from (1) satisfy the

conditions of the claim, thus completing the proof of the Lemma.

4.2 Treewidth of Reduced Instances

Our algorithm deg-branch produces reduced instances with bounded degree; in
order to bound the treewidth, we make use of the following lemma, which is
implied by Lemma 1 in [8].

Lemma 4. For any ǫ > 0, ∃nǫ ∈ Z+ s.t. for every graph G with n > nǫ vertices,

tw(G) ≤ (1/6)n3 + (1/3)n4 + (13/30)n5 + (23/45)n6 + n≥7 + ǫn,

where ni is the number of vertices of degree i in G for any i ∈ {3, ..., 6} and n≥7
is the number of vertices of degree at least 7. Moreover, a tree decomposition of
the corresponding width can be constructed in polynomial time.

Corollary 1. Let (G, k) be an instance of k-Co-Path Set such that G has n
vertices and max degree at most six. The treewidth of G is bounded by k/3 +
0.00001n + c, for some constant c.

Proof. Set ǫ = 0.00001, and N = nǫ from Lemma 4. Let G′ be the graph
formed by adding N isolates to G. By Lemma 4, tw(G′) ≤ (1/6)n3 + (1/3)n4 +
(13/30)n5 + (23/45)n6 + n≥7 + ǫ(N + n), where ni is the number of vertices of
degree i in G (which is the same as in G′ since only isolates were added). Since G
has maximum degree at most six, this simpliﬁes to tw(G′) ≤ (1/6)n3 + (1/3)n4 +
(13/30)n5 + (23/45)n6 + ǫ(N + n). If (G, k) is a yes-instance of k-Co-Path Set,

then: n3 + 2n4 + 3n5 + 4n6 ≤ 2k (since after removing the k edges, every vertex
must have degree at most 2). Substitution yields:

11

tw(G′) ≤

(2k − 2n4 − 3n5 − 4n6)

+

n4
3

+

13n5
30

+

23n6
45

+ ǫ(n + N )

+ 0.00001(n + N )

−

2n5
30

−

6
7n6
45

+ 0.00001(n + N ).

≤

≤

k
3
k
3

Since N = nǫ is a constant, we have tw(G′) ≤ k/3 + 0.00001n + c. Since G ⊆ G′
and treewidth is monotonic under subgraph inclusion, this proves the claim.

We point out that when applying Corollary 1 to reduced instances, which
are subgraphs of a 6k-kernel, computing a tree decomposition is polynomial in
k. Further, we get the following bound on treewidth:

Corollary 2. If (G, k) is a reduced instance of k-Co-Path Set, tw(G) ≤
k(1/3 + 0.00006) + c for some constant c.

4.3 The Algorithm copath

This section describes how we combine the above techniques to prove Theorem 1.
We start by applying 6k-kernel [7] to ﬁnd G′, a kernel of size at most 6k; this
process deletes k − k′ edges. We then guess the number of edges k1 ∈ [0, k′]
to remove during branching, and use deg-branch to create a set of reduced
instances Qk1 , each of which have k′ − k1 edges. By considering all possible
values of k1, we are assured that if (G, k) is a yes-instance, some Qk1 contains a
yes-instance. Each reduced instance is then passed to tw-copath, which correctly
decides the problem with constant probability.

Algorithm 2: Deciding k-Co-Path Set

Algorithm copath (G,k)

(G′, k′) = 6k-kernel(G, k)
for k1 ← 0 to k′ do

Qk1 = deg-branch(G′, k1, k)
foreach (Gi, k2) ∈ Qk1 do

if tw-copath(Gi, k2) then return true

end

end
return false

Proof of Theorem 1. We now analyze the running time of copath. By Lemma 2,
the size of each Qk1 is O(1.838k1). By Theorem 2, tw-copath runs in time
O∗(1.588k2) for each reduced instance (Gi, k2) in Qk1. Each iteration of the outer
for loop can then be completed in O∗(1.838k11.588k2) time; since k1 + k2 = k′ ≤
k, we simplify to O∗(1.838k). Since this loop runs at most k+1 times, this is also a

12

bound on the overall computational complexity of copath. Additionally copath
is linear-fpt, as the kernelization of [7] is O(n), and the kernel has size O(k),
avoiding any additional poly(n) complexity from the tw-copath subroutine.

5 Conclusion

This paper gives an O∗(4tw) fpt algorithm for Co-Path Set. By coupling this
with kernelization and branching, we derive an O∗(1.838k) linear-fpt algorithm
for deciding k-Co-Path, signiﬁcantly improving the previous best-known result
of O∗(2.17k). One natural question is whether similar techniques extend to the
generalization of Co-Path Set to k-uniform hypergraphs (as treated in Zhang
et al. [14]). It is also open whether the dual parameterization asking for a co-path
set of size k resulting in ℓ disjoint paths is solvable in sub-exponential fpt time.

Acknowledgements

This work supported in part by the Gordon & Betty Moore Foundation under DDD
Investigator Award GBMF4560 and the DARPA GRAPHS program under SPAWAR
Grant N66001- 14-1-4063. Any opinions, ﬁndings, and conclusions or recommendations
expressed in this publication are those of the author(s) and do not necessarily reﬂect
the views of DARPA, SSC Paciﬁc, or the Moore Foundation.

References

1. A. Bj¨orklund, T. Husfeldt, P. Kaski, and M. Koivisto. Fourier meets M¨obius: fast

subset convolution. In Proceedings of STOC, pages 67–74, 2007.

2. Z. Chen, G. Lin, and L. Wang. An approximation algorithm for the minimum

co-path set problem. Algorithmica, 60(4):969–986, 2011.

3. Y. Cheng, Z. Cai, R. Goebel, G. Lin, and B. Zhu. The radiation hybrid map
construction problem: recognition, hardness, and approximation algorithms. Un-
published Manuscript, 2008.

4. D. Cox, M. Burmeister, E. Price, S. Kim, and R. Myers. Radiation hybrid mapping:
a somatic cell genetic method for constructing high-resolution maps of mammalian
chromosomes. Science, 250:245–50, 1990.

5. M. Cygan, J. Nederlof, M. Pilipczuk, M. Pilipczuk, J. van Rooij, and J. Woj-
taszczyk. Solving connectivity problems parameterized by treewidth in single ex-
ponential time. In FOCS, pages 150–159. IEEE, 2011.

6. Q. Feng, Q. Zhou, and S. Li. Randomized parameterized algorithms for co-path

set problem. In FAW, pages 82–93. Springer, 2014.

7. Q. Feng, Q. Zhou, and J. Wang. Kernelization and randomized parameterized

algorithms for co-path set problem. J. Comb. Optim., pages 1–12, 2015.

8. F. Fomin, S. Gaspers, S. Saurabh, and A. Stepanov. On two techniques of combin-

ing branching and treewidth. Algorithmica, 54(2):181–207, April 2009.

9. T. Kloks. Treewidth, Computations and Approximations, volume 842 of LNCS.

Springer, 1994.

10. K. Mulmuley, U. Vazirani, and V. Vazirani. Matching is as easy as matrix inversion.

In Proceedings of STOC, pages 345–354. ACM, 1987.

13

11. C. Richard III, D. Withers, T. Meeker, S. Maurer, G. Evans, R. Myers, and D. Cox.
A radiation hybrid map of the proximal long arm of human chromosome 11 con-
taining the multiple endocrine neoplasia type 1 (men-1) and bcl-1 disease loci. Am.
J. Hum. Genet., 49(6):1189–1196, 1991.

12. N. Robertson and P. Seymour. Graph minors. II. Algorithmic aspects of tree-width.

J. Algorithms, 7(3):309–322, 1986.

13. D. Slonim, L. Kruglyak, L. Stein, and E. Lander. Building human genome maps

with radiation hybrids. J. Comp. Biol., 4(4):487–504, 1997.

14. C. Zhang, H. Jiang, and B. Zhu. Radiation hybrid map construction problem
parameterized. In Combin. Opt. and App., volume 7402 of LNCS, pages 127–137.
Springer, 2012.

