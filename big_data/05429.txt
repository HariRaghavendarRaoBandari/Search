6
1
0
2

 
r
a

 

M
7
1
 
 
]

.

O
C
h
t
a
m

[
 
 

1
v
9
2
4
5
0

.

3
0
6
1
:
v
i
X
r
a

Client-Waiter games on complete and random graphs

Dean, Oren∗

Krivelevich, Michael§

March 18, 2016

Abstract

For a graph G, a monotone increasing graph property P and positive integer q, we deﬁne
the Client-Waiter game to be a two-player game which runs as follows. In each turn Waiter
is oﬀering Client a subset of at least one and at most q + 1 unclaimed edges of G from which
Client claims one, and the rest are claimed by Waiter. The game ends when all the edges
If Client’s graph has property P by the end of the game, then he wins
have been claimed.
the game, otherwise Waiter is the winner. In this paper we study several Client-Waiter games
on the edge set of the complete graph, and the H-game on the edge set of the random graph.
For the complete graph we consider games where Client tries to build a large star, a long path
and a large connected component. We obtain lower and upper bounds on the critical bias
for these games and compare them with the corresponding Waiter-Client games and with the
probabilistic intuition. For the H-game on the random graph we show that the known results
for the corresponding Maker-Breaker game are essentially the same for the Client-Waiter game,
and we extend those results for the biased games and for trees.

1

Introduction

Positional games are games of complete information with no random moves. The inception of the
study of positional games goes back to the seminal papers of Hales and Jewett [18], of Lehman [25],
and of Erd˝os and Selfridge [16]. It has developed since to be a recognized area of combinatorics,
and the last decade has seen a burst of papers and an increasing interest in this ﬁeld (see, for
example, the monograph of Beck [4] and the recent monograph [19]).

Several variants of positional games have been considered in the literature. In the classical Maker-
Breaker game the two players (’Maker’ and ’Breaker’) alternately claim elements from a set X
(the board). Maker wins the game if he fully claims some set from a predeﬁned family F ⊆ P(X),
which we call the winning sets, and Breaker wins otherwise.

Recently, some attention was turned to another type of game, namely the Waiter-Client game.
In this variant, initially deﬁned and studied by Beck (e.g. [3]) under the name “Picker-Chooser”,
in each turn Waiter is picking a subset of q + 1 free elements, where q is a ﬁxed positive integer
called the bias. Client then needs to choose one element from this subset which he claims, while

∗School of Mathematical Sciences, Raymond and Beverly Sackler Faculty of Exact Sciences, Tel Aviv University,

Tel Aviv, 6997801, Israel. Email: orendean@mail.tau.ac.il.

§School of Mathematical Sciences, Raymond and Beverly Sackler Faculty of Exact Sciences, Tel Aviv University,
Tel Aviv, 6997801, Israel. Email: krivelev@post.tau.ac.il. Research supported in part by USA-Israel BSF Grant
2014361 and by grant 912/12 from the Israel Science Foundation.

1

Waiter claims the remaining q elements. If there are less than q + 1 remaining elements then in
the last turn Waiter will claim all of them. Waiter’s goal is to force Client to fully claim a winning
set while Client tries to avoid it. It can be easily shown that this game is bias monotone, i.e. for
two positive integers q1 < q2, a winning strategy for Waiter when playing with bias q2 implies a
winning strategy when playing with bias q1. We can therefore deﬁne the critical bias, qc, to be the
unique integer for which Waiter has a winning strategy if and only if q ≤ qc.
The Client-Waiter game runs much the same as the Waiter-Client with two diﬀerences. The
ﬁrst is that Client now tries to claim a winning set and Waiter tries to prevent it. The second is
that we introduce a special monotonicity rule which states that Waiter may oﬀer any number of
elements between 1 and q + 1 in a turn. Client still claims one element in each turn (including the
last one). The motivation for this rule is the fact that without it the game is not bias monotone.
(Consider for example a game with n pairwise disjoint winning sets of size 2. In this game Waiter
wins whenever q + 1 is even and loses otherwise.) The critical bias, qc, in this game can thus be
deﬁned to be the unique integer for which Client has a winning strategy if and only if q ≤ qc.
We denote by W C(X,F, q) and CW (X,F, q) the Waiter-Client and Client-Waiter games, with
board X, winning sets F and bias q. Usually when considering a Waiter-Client or a Client-Waiter
game we are interested in ﬁnding, or at least bounding, the critical bias. Another question we might
ask is what is the probability threshold for the property “Waiter wins W C(Xp,Fp, q)” or “Client
wins CW (Xp,Fp, q)”, where Xp is a random subset of X generated by removing each element from
X randomly and independently with probability 1− p and Fp is the subfamily of F which includes
only the sets of F which are subsets of Xp.
Besides the interest in those games for their own right it was observed that in many cases they
exhibit a strong probabilistic intuition. That is, the outcome of many Waiter-Client and Client-
Waiter games is roughly the same as what we would expect it to be when both players just play
randomly (although a random strategy for a single player is usually far from being optimal). See
for example [3, 4, 10, 14, 8, 9, 20, 21].

In this paper we look into Client-Waiter games played on the edge set of a graph G, where G is
either Kn — the complete graph on n vertices, or Gn,p — the random graph generated by taking
every edge of Kn to be in the graph randomly and independently with probability p. The Gn,p
model is the most commonly studied probability distribution on graphs (see [12], [23], and the most
recent [17]).
For an inﬁnite series of events {An}n≥1 we say that An happens with high probability (w.h.p.) if
Pr[An] = 1. Let P be a monotone increasing graph property. We say that Gn,p goes through
lim
n→∞
a phase transition around p∗ with relation to P if w.h.p. Gn,p /∈ P whenever p ≪ p∗, while w.h.p.
Gn,p ∈ P when p ≫ p∗.
For games on Kn we bound the critical bias for a few games where Client tries to achieve some
monotone graph theoretic property. The interpretation of the probabilistic intuition in this case is
that the critical bias should be qc ≈ 1/p∗, where p∗ is the value around which Gn,p goes through a
phase transition with relation to this property.
For a ﬁxed graph H we deﬁne the H-game, denoted CW (G, H, q), to be the Client-Waiter game
on the edge-set of G with bias q, where Client’s goal is to build in his graph a copy of H. We
investigate the H-game on the edges of Gn,p and ﬁnd the value of p∗ for the property “Client wins
CW (Gn,p, H, q)”.

Not many biased Client-Waiter games on graphs have been studied to date. Bednarska-Bzd¸ega,
Hefetz and  Luczak ([10]) showed that in a Client-Waiter game on the edges of Kn with bias q =

2

(1+o(1))n/ ln n Waiter can isolate a vertex in Client’s graph, while if the bias is q = (1−o(1))n/ ln n
then Client can guarantee his graph will be k-vertex connected, or alternatively he can guarantee
his graph is Hamiltonian. This ﬁts very well with the probabilistic intuition as Gn,p goes through
a phase transition with relation to the properties of being k-vertex connected and Hamiltonian
around p∗ = ln n/n (see, for example, Chapters 4.2 and 6.2 of [17]). Recently Hefetz, Krivelevich
and Tan ([21]) analysed the non-planarity, Kt-minor and non-k-colorability Client-Waiter games.
They showed that these games also exhibit some probabilistic intuition (though not as strong as in
the former games).

We start by considering the maximum-degree game, i.e. the game in which Client tries to claim
a star of maximum possible size. For integers n, q let S(n, q) denote the size (no. of edges) of a
largest star graph Client can build when playing a Client-Waiter game with bias q on E(Kn).

Proposition 1.1. For any positive integers n, k, if q ≥ ⌈n/k⌉ − 2 then S(n, q) ≤ 2k, while for
k ≥ 2, if q <

n − 1
k − 1 − 1 then S(n, q) ≥ k.

Notice that the claim in the above proposition is not asymptotic, and k can be ﬁxed or it can be a
function of n.

In the large component game Client tries to build in his graph a connected component as large
as possible, while in the path game he tries to build a path as long as possible. Let C(n, q),P(n, q)
denote the size of a largest component, and the length of a longest path (no. of edges), respectively,
that Client can build in the Client-Waiter game on the edges of Kn with bias q.

Theorem 1.2.

(i) For every n and for every k > 0, if q ≥ 6n2k/(2k−1) then C(n, q) < 3k.
(ii) For every ǫ > 0 and n large enough, if q ≥ 1.6n then C(n, q) < (ln n)log2 3+ǫ.
(iii) For every 0 < ǫ < 1 and n large enough, if q ≤ (1 − ǫ)
Theorem 1.3.

n
2

then C(n, q) ≥ e−5/2ǫ+3/2n.

(i) For every n and for every k > 0, if q ≥ 3n2k/(2k−1) then P(n, q) < 2k.
(ii) If q ≥ n and n is large enough then P(n, q) < 3 ln ln n.
(iii) For every ǫ > 0 small enough there is n0 such that for every n > n0, if q ≤ (1 − ǫ)

P(n, q) ≥ e−12/ǫn.

n
2

then

(iv) For every ǫ > 0 small enough there is n0 such that for every n > n0, if q ≤ ǫn then P(n, q) ≥

(1 − 4ǫ ln(1/ǫ))n.

We did not ﬁnd a matching lower bound for Theorems 1.2(i) and 1.3(i). We conjecture the following.

Conjecture 1.4. For every positive integer k and every constant C > 0, Client wins CW (Kn, Pk, Cn),
provided n is large enough.

Bednarska-Bzd¸ega proved in [7] several criteria for Waiter’s win in biased Client-Waiter games and
as an application showed the following bounds on the critical bias in the Client-Waiter H-game.

3

Theorem 1.5 (6.1 in [7]). Let H be a graph with at least two edges. For every 0 < ǫ < 1 and
If q ≥ n1/m′(H)+ǫ then Waiter wins CW (Kn, H, q) while if
n large enough the following holds.
q ≤ n1/m′′(H)−ǫ Client wins CW (Kn, H, q), where

m′(H) =

m′′(H) =

max

H ′⊆H:vH′ ≥1

max

H ′⊆H:vH′ ≥3

eH ′ − 1
vH ′

eH ′ + 1
vH ′ − 2

,

.

Here we give an improvement of the lower bound using the hypergraph containers result of Saxton
and Thomason ([29]). The idea for this proof was suggested to us by Bednarska-Bzd¸ega.

Proposition 1.6. For every graph H there is c > 0 such that Client wins CW (Kn, H, q) whenever
q ≤ cn1/m2(H)/ ln n.
In our treatment of the Client-Waiter games on the random graph we are very much inﬂuenced
by the proofs of Nenadov, Steger and Stojakovi´c ([28]) for the unbiased Maker-Breaker H-game
played on random graphs. We show that the results in [28] are also true in the Client-Waiter game.
Moreover, we extend these results for any ﬁxed bias and show that the case of H = K3, which was
an exception in the unbiased game, is no longer such when q ≥ 2.
The density of a graph G is deﬁned to be d(G) = eG/vG, and its 2-density to be d2(G) = (eG −
d(G′), and its maximum
1)/(vG − 2) or 0 if vG ≤ 2. The maximum density of G is m(G) = max
d2(H ′). We say that a graph G is balanced (resp. 2-balanced) if
2-density is m2(G) = max
G′⊆H
d(G) = m(G) (resp. d2(G) = m2(G)). If for any proper subgraph G′ ⊂ G we have d(G′) < m(G)
(resp. d2(G′) < m2(G)) then G is strictly balanced (strictly 2-balanced).
Theorem 1.7. Let H be a graph which is not a forest. If either q ≥ 2 or there exists H ′ ⊆ H such
that d2(H ′) = m2(H), H ′ is strictly 2-balanced and it is not a triangle, then there exist constants
c, C > 0 which depend only on H and q such that in the Client-Waiter game CW (Gn,p, H, q)

G′⊆H

lim
n→∞

Pr[Client wins] =(1,

0,

p ≥ Cn−1/m2(H),
p ≤ cn−1/m2(H).

Note: the same is true for the corresponding Maker-Breaker game.

For the case H = K3 and q = 1, which is missing in the above theorem, we have the following
theorem, whose proof is much the same as Theorem 1.3 of [26] for the corresponding Maker-Breaker
game and is therefore not included here.

Theorem 1.8. For every p = p(n),

lim
n→∞

Pr[Client wins CW (Gn,p, K3, 1)] = lim
n→∞

Pr[Gn,p contains K5 − e].

Lastly, we prove that for trees Client can win even when p ≪ n−1.
Proposition 1.9. For every positive integers k, q w.h.p. Client has a strategy to win CW (Gn,p, Tk,k, q),
where Tk,k is the complete k-ary tree of height k, and p = n−1−(k(q+1))−2(k+1)

.

Note: the same is true for the corresponding Maker-Breaker game.

4

1.1 Related results

In a groundbreaking paper ([15]), Erd˝os and R´enyi showed that the random graph Gn,p goes through
a phase transition around p = 1/n, from typically having only connected components of size at most
logarithmic in n to having a linear sized (‘giant’) component. Later Ajtai, Koml´os and Szemer´edi
([1]) proved that in the supercritical regime p = (1 + ǫ)/n, Gn,p will typically contain not only a
giant component, but a linearly-long path (see also [24] for a simple proof). Theorems 1.2(ii)+(iii)
and 1.3(ii)+(iii) show that a similar transition takes place in the Client-Waiter game when q is
between n/2 and 1.6n for components and between n/2 and n for paths. Moreover, when q = n
Waiter can even limit Client’s longest path to be of order ln ln n which indicates some weakness of
Client in comparison to the probabilistic intuition. A similar Client’s weakness can be observed in
Theorem 1.3(i) where we would expect Client to be able to achieve a path of length 2k while we
prove that he cannot hope to get more than 2k.

In [9] Bednarska-Bzd¸ega, Hefetz, and  Luczak showed that for any tree Tk on k vertices the critical
bias for W C(Kn, Tk, q) is Θ(nk/(k−1)) and that the critical bias for W C(Kn, Kk, q) is Θ(n2/(k−1))
and conjectured that for any graph H the critical bias for W C(Kn, H, q) is Θ(n1/m(H)). Notice
that this is in compliance with the random intuition as the probability threshold for Gn,p to contain
a copy of H is n−1/m(H). On the other hand, in the Client-Waiter game with bias of order nk/(k−1)
Client will not be able to build a star graph with three vertices (by Proposition 1.1) and he will
not be able to build a path of length 3 log2 k (by Theorem 1.3(i)). This shows that in these games
Client is also weak compared to Waiter in the corresponding Waiter-Client game. It is plausible
that the upper bound in Theorem 1.5 can be improved to Θ(n1/m(H)) as well.

We mention here three results of similar games for the Maker-Breaker variation, though their
bounds are not comparable to ours. The ﬁrst is by Beck ([2]), it states that Maker can build a
cycle of length at least (1− e−1/200ǫ)n when playing on Kn against Breaker with a bias of ǫn (while
on the other hand Breaker can isolate at least ǫ
The second is due to Bednarska-Bzd¸ega and  Luczak ([6]), who showed in particular that when
q = (1 + ǫ)n then Breaker can prevent a component of size larger than 1/ǫ, while if q = (1 − ǫ)n
then Maker can build a component of size at least ǫn.
Yet in another paper of Bednarska-Bzd¸ega and  Luczak ([5]), they proved that the critical bias for
the Maker-Breaker H-game is Θ(n1/m2(H)).

2 e−1/ǫn vertices in Maker’s graph).

1.2 Preliminaries

For the sake of simplicity and clarity of presentation, we do not make a particular eﬀort to optimize
the constants obtained in some of our proofs. Our graph-theoretic notation is standard and follows
those in [30]. In particular, we use the following.

For a graph G, let V (G) and E(G) denote its sets of vertices and edges, respectively, and let
vG = |V (G)| and eG = |E(G)|. For two sets A, B ⊆ V (G), let EG(A) denote the set of edges of
G with both endpoints in A and let eG(A) = |EG(A)|. Let EG(A, B) denote the set of edges of
G with one endpoint in A and the other endpoint in B (formally, EG(A, B) = {e ∈ E(A ∪ B) :
e ∩ A 6= ∅, e ∩ B 6= ∅}), and let eG(A, B) = |EG(A, B)|. Notice that if A ⊆ B then EG(A, B) =
EG(A)+EG(A, B\A). For a set S ⊆ V (G), let G[S] denote the subgraph of G induced by the set S,
and NG(S) = {v ∈ V (G)\S : ∃u ∈ S such that (uv) ∈ E(G)} denotes the external neighbourhood

5

of S in G. For a vertex u ∈ V (G) we abbreviate NG({u}) under NG(u) and let dG(u) = |NG(u)|
denote the degree of u in G. Often, when there is no risk of confusion, we omit the subscript G
from the notation above. The maximum degree of a graph G is ∆(G) := max{dG(u) : u ∈ V (G)}
and the minimum degree of a graph G is δ(G) := min{dG(u) : u ∈ V (G)}.
For a family F of subsets of X, we deﬁne the transversal family of F to be F ∗ = {A ⊆ X : A∩ B 6=
∅ for every B ∈ F}.
Assume that some Client-Waiter game, played on the edge set graph G = (V, E), is in progress. At
any given moment during this game, let EC, EW , EF denote the set of edges that were claimed by
Client, resp. Waiter, resp. unclaimed (free) up to that moment. We denote their respective sizes
by eC = |EC|, eW = |EW|, eF = |EF|. If A, B ⊆ V are two sets then EC(A) is the set of Client’s
edges inside A, EC(A, B) is the set of Client’s edges with one end in A and the other in B, and
eC(A) = |EC(A)| and eC (A, B) = |EC(A, B)|. Similarly we deﬁne EW (A), eW (A), EF (A), etc.
The rest of this paper is organized as follows: in Section 2 we quote two useful criteria for Client’s
win in Client-Waiter and Waiter-Client games, and we state and prove a result of our own which
In Section 3 we discuss games on the complete graphs and prove
is of independent interest.
Proposition 1.1, Theorems 1.2 and 1.3, and Proposition 1.6.
In Section 4 we discuss games on
Gn,p and give the proofs of Theorem 1.7 and Proposition 1.9. Section 5 is devoted to concluding
remarks.

2 Game-Theoretic Tools

In this section we present several general criteria for the existence of a winning strategy for Client
in a Client-Waiter or Waiter-Client game.

Theorem 2.1 (implicit in [4]). Let q be a positive integer, let X be a ﬁnite set, let F be a family
of subsets of X. If

(q + 1)−|A| < 1

XA∈F

then Client has a winning strategy in the W C(X,F, q) game.
Theorem 2.1 gives a criterion for Client to avoid the family F, which can sometimes be helpful
in showing that his claimed subset has some desirable property (see for example the proofs of
Theorems 1.2(iii) and 1.3(iii) in Section 3.2.4). However, recall that in the Client-Waiter game we
introduced a monotonicity rule which allows Waiter to oﬀer less than q + 1 elements in a turn. This
diﬀerence between the games prevents us from using Theorem 2.1. The next theorem provides a
workaround.

Theorem 2.2. Let q be a positive integer, let X be a ﬁnite set, let F be a family of subsets of X
and let Φ(F) = PA∈F (q + 1)−|A|. Then, playing a Client-Waiter game on X with bias q, Client
has a strategy to claim a set XC ⊆ X of size |XC| ≥ ⌊|X|/(q + 1)⌋ which fully contains at most
2Φ(F) sets of F.
Proof. Denote by Wi the set of elements oﬀered by Waiter at the i-th turn, and let αi = |Wi|/(q + 1).
Suppose Client plays the following random strategy: he picks an element from Wi uniformly at
random, and then with probability αi puts it in XC.
If element x ∈ X is oﬀered in the i-th turn, then Pr[x ∈ XC] = αi/|Wi| = 1/(q + 1). Fix some

6

A ∈ F. If, in some turn, Waiter oﬀered at least two elements of A, then surely Client will not fully
claim A. Since any element must be oﬀered at some point we get that Pr[A ⊆ XC] ≤ (q + 1)−|A|,
and thus E(|{A ∈ F : A ⊆ XC}|) ≤ Φ(F). It follows by Markov’s inequality that

Pr[|{A ∈ F : A ⊆ XC}| > 2Φ] < 1/2.

Let m denote the total number of turns played in the game. Note that |XC| = Pm
Z1, . . . , Zm are independent Bernoulli random variables with Pr[Zi = 1] = αi. Hence
Pr[|XC| ≥ ⌊|X|/(q + 1)⌋] ≥ Pr[Bin(|X|, 1/(q + 1)) ≥ ⌊|X|/(q + 1)⌋] ≥ 1/2,

i=1 Zi where

(1)

(2)

where the ﬁrst inequality holds by Theorem 5 from [22]. Combining (1) and (2) we conclude that
with positive probability both |XC| ≥ ⌊|X|/(q + 1)⌋ and |{A ∈ F : A ⊆ XC}| ≤ 2Φ, and therefore
there is a strategy for Client which will ensure a subset with these properties.

For a set X and a family of subsets F we deﬁned F ∗ to be the transversal family of F. If Client
wins the CW (X,F ∗, q) game, then he has claimed at least one element from every set of F. The
next theorem is therefore very useful in those situations where we want to show that Client can
prevent Waiter from fully claiming a set of F.
Theorem 2.3 (implicit in Theorem 3.2 of [20]). Let q be a positive integer, let X be a ﬁnite set
and let F be a family of subsets of X. If
XA∈F

e−|A|/(q+1) < 1,

then Client has a winning strategy for the CW (X,F ∗, q) game.

3 Games on Kn

3.1 Star game

Proof of Proposition 1.1. First notice that the lower bound is trivial since if q +1 < (n−1)/(k−
1) then at the end of the game eC > n(k − 1)/2 which means that the average degree in Client’s
graph will be higher than k − 1. We turn to the upper bound.
Consider the following strategy for Waiter. In the ﬁrst turn Waiter chooses some vertex v0 and
oﬀers q + 1 edges incident to that vertex. Suppose Client picks (v0, v1). In the second turn Waiter
will oﬀer some q + 1 arbitrary edges incident to v1. In general, if on the i-th turn Client chose the
edge (vi−1, vi), and there are free edges incident to vi, then in the next turn Waiter will oﬀer an
arbitrary subset of those edges of size q + 1, or all of them if there are less then q + 1. If there
are no free edges incident to vi then Waiter will choose some other vertex with free edges incident
to it, and oﬀer a subset of size q + 1 (or all) of those edges. Consider some vertex v. According
to the above strategy, we can pair Client’s edges which are incident to v (with exception, perhaps,
of the last edge) such that each pair was claimed in consecutive turns, and when Client claimed
the later of the two Waiter claimed q edges incident to v (again with exception of the last edge).
This observation leads to the upper bound on Client’s maximum degree: ∆C ≤ 2⌈(n − 1)/(q + 2)⌉.
Assuming q ≥ ⌈n/k⌉ − 2 we get

∆C ≤ 2(cid:24) n − 1

q + 2(cid:25) ≤ 2(cid:24) k(n − 1)

n

(cid:25) = 2k.

7

3.2 Large component and long path games

3.2.1 Waiter’s strategies

We start by presenting Waiter’s strategies in these games. These strategies will be promptly anal-
ysed to get the upper bounds of Theorems 1.2 and 1.3.

Strategy SC for Waiter in the Component game
Let n, q be integers with q + 1 ≥ n− 1. We describe strategy SC for Waiter in a Client-Waiter game
on E(Kn) with bias q. Waiter will maintain 3 subsets X, Y, U ⊆ V . Initiate X = Y = ∅; U = V .
We describe the strategy in 3 stages.

Stage I
In the i-th turn Waiter picks a maximal set of vertices Ti ⊆ U such that eF (Ti, U ) ≤ q + 1. Denote
ti = |Ti|, to be used later in the proof.
Waiter will oﬀer all edges EF (Ti, U ). Suppose Client picks an edge (x, y) with x ∈ Ti, then we add
x to X and y to Y , and remove Ti ∪ {y} from U .
We enumerate the vertices in X = {x1, x2, ...}, Y = {y1, y2, ...} by the order of their addition. It is
not hard to verify the following properties right after the i-th turn:

1. Client’s graph is a perfect matching between X and Y . In particular |X| = |Y | = i.
2. For any 1 ≤ j ≤ i, xj has only free edges to (some or all) yk with k < j.

This stage ends when U = ∅. We denote by s the number of turns played in the ﬁrst stage.

Stage II
This stage will last for at most s turns. In the i-th turn Waiter will oﬀer all free edges between
yi and all isolated vertices in Client’s graph. By the end of this stage Client’s graph is made of s
components, each of size at most 3. We claim that between any pair of components there are at
most 3 free edges, and those are all the remaining free edges in the game.
Indeed, let Ci, Cj be two components. We may assume that Ci = {xi, yi, zi}, Cj = {xj, yj, zj}
where (yi, zi) and (yj, zj) are the edges claimed in this stage, and that i < j. By property (2)
of the previous stage, xi does not have a free edge to any vertex in Cj and (xj, zi) is not avail-
able as well. By Waiter’s play on this stage the edge (yi, zj) is not free and the edge (zi, zj )
was oﬀered sometime during the previous stage, so the free edges between Ci and Cj satisfy
EF (Ci, Cj) ⊆ {(yi, yj), (yi, xj), (zi, yj)}.

Stage III
In the last stage Waiter creates an auxiliary board of Ks and identiﬁes each vertex of this board
with one of Client’s components of the original game. Given Waiter’s strategy for the Client-Waiter
game on E(Ks) with a bias of ⌊q/3⌋, he can use this strategy to play in the original game by oﬀering
all edges between two components each time this strategy requires him to oﬀer the edge between
the corresponding vertices on the auxiliary board, and if Client chooses some edge which connects
two of his components on the original board then Waiter will translate it to the appropriate edge

8

between the corresponding vertices in the auxiliary board. This gives us the recursion

C(n, q) ≤ 3 · C(s,⌊q/3⌋).

(3)

Strategy SP for Waiter in the Path game
We keep all the notations of the previous strategy. This strategy is very similar, we note only the
diﬀerences. Waiter plays in 2 stages.

Stage I
In the i-th turn Waiter will pick a maximal set of vertices Ti ⊆ U such that eF (Ti, V ) ≤ q + 1.
Denote: ti = |Ti|.
Waiter will oﬀer all edges EF (Ti, V ). Suppose Client picks an edge (x, y) with x ∈ Ti, then we add
x to X and y to Y , and remove Ti ∪ {y} from U .
We will have the following properties after the ith turn:

1. Client’s graph is a union of at most i disjoint stars with all the center vertices in Y and the

leaves in X.

2. All the free edges are in Y ∪ U .

This stage will end when U = ∅. By the end of this stage the vertices in Y are centers of disjoint
stars in Client’s graph, and the edges inside Y are all the remaining free edges in the game. We
denote s = |Y |. Clearly, s is at most the number of turns played at the ﬁrst stage.

Stage II
As in the last stage of strategy SC Waiter translates the game to an auxiliary game on E(Ks), but
this time with the same bias q. This leads to the following recursion

P(n, q) ≤ P(s, q) + 2.

(4)

Strategies SC and SP will be used twice each in the proofs of (i) and (ii) of Theorem 1.2 and
Theorem 1.3, respectively. The diﬀerence between proving (i) and (ii) will be in the degree of
precision required in the analysis of the strategies.

3.2.2

k-sized component and k-path

Proof of Theorem 1.2(i). When q ≥ n2/2, Client’s graph will be a single edge, so the theorem
is true for k = 1. We assume q < n2/2 and proceed by induction on k.
Let n be arbitrary and set q = 6n2k/(2k−1). Waiter will play strategy SC. Recall that for each
1 ≤ i ≤ s, ti is the size of a largest subset Ti ⊂ U such that Waiter can oﬀer all edges EF (Ti, U ).
Certainly ti ≥ ⌊q/n⌋ for any i. So the number s of turns at the ﬁrst stage is at most

n2
q − n

s ≤(cid:24) n
=⇒j q

⌊q/n⌋(cid:25) ≤
+ 1 ≤
3k ≥ 6s2k−1/(2k−1−1).

n2

q − q/6

+ 1 =

1
5 ·

n2
q/6

+ 1 <

17
60 ·

n2
q/6

<

1

6(cid:17)(2k−1−1)/(2k−1)
3(cid:16) q

9

We can therefore use the induction hypothesis with recursion (3) and get that

C(n, q) ≤ 3 · C(s,⌊q/3⌋) < 3k.

Proof of Theorem 1.3(i). The proof is very similar to the above proof of Theorem 1.2(i). One
easily checks that the claim is true for k = 1. In the induction step we take q = 3n2k/(2k −1), and
get

⌊q/n⌋(cid:25) ≤

s ≤(cid:24) n
=⇒ q ≥ 3s2k−1/(2k−1−1),

n2
q − n

+ 1 ≤

n2

q − q/3

+ 1 =

1
2 ·

n2
q/3

+ 1 <

2
3 ·

n2
q/3

=

2

3(cid:17)(2k−1−1)/(2k−1)
3(cid:16) q

which together with recursion (4) implies

P(n, q) ≤ P(s, q) + 2 < 2k.

3.2.3 Polylogarithmic component and polylogarithmic path

In order to get the second part of Theorem 1.2 we need a ﬁner analysis of Waiter’s strategy. This
is done in the next two lemmas.

ln(q/n)(cid:19)γ

in Client’s

Lemma 3.1. For any γ > log2 3 Waiter can prevent a component of size 2(cid:18) ln n
graph when playing a Client-Waiter game on E(Kn) with bias q ≥ ⌈61/(2−31/γ )⌉n.
Remark: notice that when q = 6n2k/(2k −1), then for large n, k this lemma roughly gives us
C(n, q) < 2 · 3k which is only slightly worse than the statement in Theorem 1.2(i).
Proof. Fix γ > log2 3 and set q = cn with c = ⌈61/(2−31/γ )⌉. Notice that c ≥ 7. The claim is true
for n ≤ 2c + 1 since then if q = cn then q ≥ (cid:0)n
2(cid:1). We proceed by induction on n. Waiter will play
strategy SC. In each turn i at the ﬁrst stage we have ti ≥ ⌊q/n⌋, therefore the ﬁrst stage lasts for
at most
⌊q/n⌋(cid:25) ≤

s ≤(cid:24) n

n2 + q
q − n

turns, which is also an upper bound on the number of components in Client’s graph at the end of
the second stage. We have

q/n − 1

+ 1 <

n

n2 + q

⌊q/3⌋

(q/3 − 1)(q − n)
s ≥
≥(cid:16) q
n(cid:17)2

(1/3 − 1/q)(1 − 1/c)
≥(cid:16) q
n(cid:17)2
·
100(cid:19) ·
3 ≥ 0.18 ·(cid:16) q
6
n(cid:17)2
7 ·
(we used the assumptions that 100 < 2c(c + 1) ≤ q ≤ n2/2). We get that
n(cid:17)31/γ

⌊q/3⌋
s ≥ 0.18 ·(cid:16) q
n(cid:17)2

n(cid:17)31/γ
·(cid:16) q

·(cid:18)1
3 −

>(cid:16) q

1 + q/n2

c2−31/γ

≥

1

2

,

(5)

6

10

.

Using recursion (3) and our induction hypothesis we derive

C(n, q) ≤ 3 · C(s,⌊q/3⌋) < 6(cid:18)

ln n

ln(⌊q/3⌋/s)(cid:19)γ

< 6(cid:18)

ln n

31/γ ln(q/n)(cid:19)γ

≤ 2(cid:18) ln n

ln(q/n)(cid:19)γ

.

Lemma 3.2. There is n0 such that for all integers n > n0 and q ≥ 1.6n, C(n, q) ≤ 3C(n1, q1) with
q1 = ⌊q/3⌋ and

q1
n1 ≥ 1.001

q
n

.

Proof. In order to prove this lemma we need to get a better bound on s than that we used in
Lemma 3.1. Denote by sk the number of moves in the ﬁrst stage for which ti = k. For simplicity
and clarity of the calculations we make the following sub-optimal assumptions.

• While n ≥ |U| > q/2 we assume ti = 1. During this time U gets decreased by at least 2

vertices a turn, which gives s1 ≤ (n − q/2)/2.

• For every k ≥ 2, while q/k ≥ |U| > q/(k + 1) we assume ti = k. During this time U gets

decreased by k vertices a turn, which gives sk ≤ (q/k − q/(k + 1))/k = q/k2(k + 1).

This leads to the following bound on s:

∞

∞

n − q/2

+

q

2

s ≤

sk ≤

Xk=1

Xk=2
Notice that the necessity to achieve the last inequality is the reason for the constant 1.6 in our
upper bound. Set n1 = s, q1 = ⌊q/3⌋. Then
q
3 − 1 ≥

qn1
0.999n − 1 > 1.001

k2(k + 1) ≤

q1 ≥

< 0.999

n1,

q
n

6

n
2 −

q
4

q(π2 − 9)

+

n
3

.

where the last inequality is for large enough n. By our recursion:

C(n, q) ≤ 3 · C(n1, q1).

Proof of Theorem 1.2(ii). Let n be an integer. Due to the monotonicity of the game it is
enough to prove the Theorem for q = 1.6n. Let γ = log2 3 + ǫ/2 and let c = c(γ) be such that
Waiter can prevent a component of size 2(ln n/ ln c)γ when playing with bias cn (which we get from
Lemma 3.1). Set m = ln c/ ln 1.001. Let n1, q1 be the integers guaranteed by Lemma 3.2. We can
recurrently use this lemma to get a sequence {(ni, qi)}ℓ
; with ℓ the
ﬁrst such that qℓ ≥ cnℓ. Notice that necessarily ℓ ≤ m and that since for any i, qi = ⌊qi−1/3⌋,

qi
ni ≥ 1.001

i=1 of pairs with

qi−1
ni−1

nℓ−1 >

qℓ−1
c ≥

q

c · 4ℓ =

1.6n

c · 4ℓ ,

and so if n > n04ℓc/1.6, where n0 is from Lemma 3.2, then our use of the lemma was valid. Finally
we get from Lemma 3.1

ln c (cid:19)γ
C(n, q) ≤ 3 · C(n1, q1) ≤ . . . ≤ 3ℓ · C(nℓ, qℓ) < 2 · 3m(cid:18)ln nℓ

≤ (ln n)log2 3+ǫ,

for n large enough.

11

Proposition 3.3. For all integers n, q = cn with c ≥ 2 , P(n, q) < 2 log2 log2c/3 q + 1.
Proof. Fix c. The claim is true for every 1 ≤ n ≤ 2c + 1 since then q ≥ (cid:0)n

induction on n. Playing strategy SP we have that in every turn at the ﬁrst stage

2(cid:1). We proceed by

ti ≥j q
nk .

In each turn Client chooses an edge (xi, yi) with xi ∈ Ti and yi ∈ V . We consider three cases:

• If yi ∈ V \U then yi ∈ Y and the edge (xi, yi) is just an additional edge to an existing star in

Client’s graph.

• If yi ∈ Ti then yi has no more free edges and Waiter can ignore the edge (xi, yi) in the next

stage of his strategy.

• If yi ∈ U\Ti then Client has just created a new star and U got decreased by ti + 1 vertices.

Therefore, by the end of the ﬁrst stage Client’s graph is a union of at most

s ≤(cid:24)

n

⌊q/n⌋ + 1(cid:25) ≤

q
c2 + 1 ≤

3q
2c2

disjoint stars (we used in the last inequality that n > 2c =⇒ q > 2c2).
Hence q ≥

2c2
3 · s, and we get from our recursion and the induction hypothesis that
P(n, q) ≤ 2 + P(s, q) < 3 + 2 log2 log(2c/3)2 q = 2 log2 log2c/3 q + 1.

Proof of Theorem 1.3(ii). Let n be an integer. Due to monotonicity of the game we may
assume q = n. When Waiter plays strategy SP Client’s graph after the ﬁrst stage contains at most
s ≤ n/2 disjoint stars, hence q ≥ 2s and by the recursion and Proposition 3.3

P(n, q) ≤ 2 + P(s, q) < 3 + 2 log2 log4/3 q ≤ 3 ln ln n,

for n large enough.

3.2.4 Client’s side: linear-sized component and linear-sized path

Proof of Theorem 1.2(iii). Set δ =

, θ = e−2.5/δ−1 and let

ǫ
1 − ǫ

F := {E(H) : H ⊆ Kn, vH ≤ θn, eH ≥ (1 + δ)vH}.

Then

Φ(F) :=

=

⌊θn⌋

i(cid:19)(cid:18) (cid:0)i
2(cid:1)
Xi=4 (cid:18)n
(1 + δ)i(cid:19)(q + 1)−(1+δ)i <
n(cid:19)δ#i
Xi=4 "e2+δ(cid:18) i
Xi=4 (cid:16)e2+δθδ(cid:17)i

≤

⌊θn⌋

⌊θn⌋

⌊θn⌋

Xi=4 " en
Xi=4

∞

<

e−i/2 <

1
2

.

i (cid:18) (1 − ǫ)ei

2

(cid:19)1+δ(cid:18) (1 − ǫ)n

2

(cid:19)−(1+δ)#i

12

By Theorem 2.2 Client has a strategy such that by the end of the game his graph contains a

edges such that every connected component U with
subgraph GC , with e(GC ) =
size at most θn has less than (1 + δ)|U| edges in GC. Suppose that all the components in GC are
of size less than θn. Then

n(n − 1)
2(q + 1) ≥

n
1 − ǫ

|E(GC )| = XU ∈comp(GC )

eGC (U ) < (1 + δ) XU ∈comp(GC )

|U| ≤ (1 + δ)n =

n
1 − ǫ

,

which is a contradiction. Therefore Client has a connected component of size at least θn.

Proof of Theorem 1.3(iii).

Lemma 3.4. Let ǫ, γ > 0 and δ1 > δ2 > 0 be constants. Let G be a graph on n vertices with the
following properties:

1. G has eG ≥ (1 + ǫ)n edges,
2. every set S of size |S| ≤ δ1n spans e(S) < (1 + ǫ)|S| edges,
3. every set S of size |S| ≤ δ2n spans e(S) < (1 + ǫ/2)|S| edges,
4. for every set S of size |S| ≤ γn, we have e(S, V \S) <

ǫδ2
2

n edges.

Then G contains a path of length at least γn.

Proof. By the ﬁrst property G must contain some connected component C with e(C) ≥ (1 + ǫ)|C|.
By the second property |C| > δ1n. Consider the DFS algorithm as deﬁned, for example, in [24].
As a quick reminder: we take an arbitrary ordering of the vertices of G and run a DFS exploration
on G by maintaining three sets of vertices: S — the vertices we have ﬁnished exploring, U — a
LIFO stack with the vertices we are currently exploring, and T — the unvisited vertices. Consider
an execution of the DFS algorithm on C, starting with S = U = ∅ and T = C, and completing
when S = C and U = T = ∅ . We will use the following properties of this algorithm:

• at any given moment there are no edges of G between S and T , and
• at any given moment U spans a path in C.

Set t0 = 0 and tf = ⌈|C|/(δ2n)⌉. For any 1 ≤ i ≤ tf − 1 let ti be the moment in which |S| = δ2ni
and let Si, 1 ≤ i ≤ tf , be the vertices which were added to S between time ti−1 and ti. Since
|Si| ≤ δ2n for all i, we get from the third property that

X1≤i<j≤tf

e(Si, Sj) = e(C) −

tf

Xi=1

e(Si) ≥ (1 + ǫ)|C| − (1 + ǫ/2)

Thus there is 1 ≤ i0 ≤ tf − 1 such that Pi0<j≤tf

e(Si0, Sj) ≥

all these edges are between Si0 and U , we get from property 4 that at that moment U spans a path
of length at least γn.

tf

Xi=1
ǫ|C|
2(tf − 1) ≥

|Si| =

ǫ
2|C|.

ǫδ2n

2

. Since at time ti0

13

We now return to the proof of Theorem 1.3(iii). Since the game is bias monotone, we may assume
q =

. Set δ1 = e−3/ǫ−1, δ2 = δ2

1, and γ = (ǫδ2)2. Deﬁne

n

> (1 − ǫ)

n
2

2(1 + ǫ)

F1 := {E(H) : H ⊆ Kn, vH ≤ δ1n, eH ≥ (1 + ǫ)vH},
F2 := {E(H) : H ⊆ Kn, vH ≤ δ2n, eH ≥ (1 + ǫ/2)vH},
F3 := {E(H) : H ⊆ Kn, H = (S ∪ (V \S), E),|S| ≤ γn, eH ≥ ǫδ2

2 n}.

We calculate

i (cid:18) ei

2(1 + ǫ)(cid:19)1+ǫ(cid:18)

n

2(1 + ǫ)(cid:19)−(1+ǫ)#i

=

e−i < 0.1;

δ1n

δ1n

∞

∞

=

δ2n

δ2n

δ1n

≤

Φ(F2) =

Φ(F1) =

Xi=4" en
i(cid:19)(cid:18) (cid:0)i
2(cid:1)
Xi=4(cid:18)n
(1 + ǫ)i(cid:19)(q + 1)−(1+ǫ)i <
n(cid:19)ǫ(cid:21)i
Xi=4(cid:20)e2+ǫ(cid:18) i
1(cid:1)i
Xi=4
Xi=4(cid:0)e2+ǫδǫ
i(cid:19)(cid:18) (cid:0)i
2(cid:1)
Xi=4(cid:18)n
(1 + ǫ/2)i(cid:19)(q + 1)−(1+ǫ/2)i <
n(cid:19)ǫ/2#i
Xi=4"(cid:18) 1 + ǫ
1 + ǫ/2(cid:19)1+ǫ/2
≤
Xi=4
γn(cid:19)(cid:18)γ(1 − γ)n2
Φ(F3) =(cid:18) n
≤"(cid:18) e

2 n (cid:19)(q + 1)−
4(1 + ǫ)ǫδ2#ǫδ2n/2

e2+ǫ/2(cid:18) i

2 n ≤(cid:18) e

2(cid:19)2ǫδ2

e−i < 0.1;

= o(1),

ǫ2δ2

ǫδ2

=

=

ǫδ2

∞

δ2n

ei

Xi=4" en
i (cid:18)
Xi=4"e2+ǫ(cid:18) i

2(1 + ǫ/2)(cid:19)1+ǫ/2(cid:18)
n(cid:19)ǫ/2#i

≤

δ2n

∞

2 (cid:17)i
Xi=4(cid:16)e2+ǫδǫ/2

n

2(1 + ǫ)(cid:19)−(1+ǫ/2)#i

γ(cid:19)γn(cid:18) 2γ(1 − γ)n

ǫδ2

(cid:19)ǫδ2n/2(cid:18)

n

2(1 + ǫ)(cid:19)−ǫδ2n/2

where the last equality is for ǫ small enough. We get that for n large enough

Φ(F1 ∪ F2 ∪ F3) ≤ Φ(F1) + Φ(F2) + Φ(F3) < 1/2,

and by Theorem 2.2 Client has a strategy to claim a subgraph GC which has all the properties of
Lemma 3.4 and therefore contains a path of length at least γn.

Proof of Theorem 1.3(iv). We will use the following lemma.

Lemma 3.5 (Lemma 4.4 in [11]). Let G be a graph on n vertices. Suppose that for every two
disjoint sets A, B ⊂ V (G) such that |A|,|B| ≥ k, there is at least one edge between A and B. Then
G contains a path of length n − 2k + 1.
Let q + 1 = ǫn, and let δ > 0 to be determined. Deﬁne

F := {EKn(A, B) : A ∩ B = ∅,|A| = |B| = δn}.

If Client wins the CW (Kn,F ∗, q) game then he has an edge between any two disjoint subsets of
size δn, and by Lemma 3.5 he has a path of length (1− 2δ)n. So it is enough to verify the condition

14

of Theorem 2.3:

δn(cid:19)2
e−|A|/(q+1) ≤(cid:18) n

e−δ2n2/(q+1) ≤(cid:20)(cid:16) e
δ(cid:17)2

e−δ/ǫ(cid:21)δn

.

XA∈F

The last expression will be asymptotically small when

δ
ǫ

> 2(1 + ln(1/δ)),

and this is true for δ = 2ǫ ln(1/ǫ) and ǫ small enough.

3.3 The H-game

Proof of Proposition 1.6. The idea of the proof (suggested by Bednarska-Bzd¸ega) is to use the
following theorem of hypergraph containers.

Theorem 3.6 (implicit in Theorem 2.3 in [29]). Let H be a graph with at least three vertices. Then
there are n0, δ > 0 such that for every n ≥ n0 there is a collection C of subgraphs of Kn such that

1. Every H-fee subgraph of Kn is contained in some C ∈ C.
2. For every C ∈ C, eC ≤ (1 − δ)(cid:0)n
2(cid:1).
3. |C| ≤ nn0n2−1/m2 (H)

.

The lower bound for the CW (Kn, H, q) game is an easy application of the above theorem and of
the criterion for Client’s win in Theorem 2.3. Let C be the family of containers for the graph H.
It is enough to show that Client can claim at least one edge in every complement graph of C ∈ C.
Since the number of edges in any such complement is at least δ(cid:0)n
2(cid:1), recalling the bound on |C| we
can verify the condition of Theorem 2.3.

e−|A|/(q+1) ≤ nn0n2−1/m2(H)

e−δ(n

2)/(q+1) = o(1),

XA∈F

provided q ≤ cn1/m2(H)/ ln n for some c = c(H) > 0.

4 The H-Game on Gn,p

We note two well known facts about random graphs which will be used in this section without
reference.

• When n−k/(k−1) ≪ p ≪ n−(k+1)/k w.h.p. Gn,p is a forest with copies of all trees with at most

k vertices, and no tree with more than k vertices.

• Let α, c be positive constants. If p ≤ cn−1/α then for any ﬁxed graph G with m(G) > α
w.h.p. G * Gn,p. Put another way, for c, α and p as above and any ﬁxed k > 0, w.h.p. any
subgraph G of Gn,p on at most k vertices has density m(G) ≤ α.

15

4.1 Client’s side

The proof of Maker’s side (the 1-statement) in [28] relayed on hypergraph containers as an auxiliary
tool. That method would have worked here as well. However, we give an alternative proof using
another tool — a variant of the famous K LR conjecture which was proved in ([13]). We start with
a few deﬁnitions.
Deﬁnition 4.1. A bipartite graph between sets U and V is (ǫ, d)-lower-regular if, for every U ′ ⊆ U
and V ′ ⊆ V with |U ′| ≥ ǫ|U| and |V ′| ≥ ǫ|V |, the density d(U ′, V ′) of edges between U ′ and V ′
satisﬁes d(U ′, V ′) ≥ d.
Given a graph H with vertex set [k] , we denote by G(H, n, d, ǫ) the collection of all graphs G with
vertex set V1 ∪ . . . ∪ Vk, where V1, . . . , Vk are pairwise disjoint sets of size n each, whose edge sets
consists of eH diﬀerent (ǫ, d)-lower-regular bipartite graphs, one graph between Vi and Vj for each
ij ∈ E(H).
For an arbitrary graph G and p ∈ [0, 1], we denote by Gp the random subgraph of G, where each
edge of G is included with probability p independently of all other edges.

Theorem 4.2 (implied by Theorem 2.1 in [13]). Let H be an arbitrary graph. For every d > 0, there
exist ǫ, C > 0 such that if p ≥ Cn−1/m2(H), then the following holds. For every G ∈ G(H, n, d, ǫ),
w.h.p. the random graph Gp has the following property: Every subgraph G′ of Gp in G(H, n, dp, ǫ)
contains a copy of H.

We are ready to prove Client’s side in Theorem 1.7.

Proof of the 1-statement of Theorem 1.7. Choose d such that d < 1/(q + 1) and

d

1/2 − d

(1 + ln 2 − ln d) <

1

q + 1

(this is possible since the LHS goes to 0 when d goes to 0), and let ǫ = ǫ(H, d) be that of Theorem 4.2.
Let k = |V (H)|. At the beginning of the game Client will ﬁx an equipartition of the vertices of Gn,p
to k parts V1, . . . , Vk. He will then follow a strategy which guarantees that by the end of the game
his graph, GC , when restricted to any pair of parts, is (ǫ, dp)-lower-regular. To see that this means
that w.h.p. he will claim a copy of H, take G in Theorem 4.2 to be the complete k-partite graph
on V1, . . . , Vk. Clearly G ∈ G(H, n/k, d, ǫ) and GC ∩ G ∈ G(H, n/k, dp, ǫ), and we can consider Gp
as G ∩ Gn,p. It remains to show that Client indeed has such a strategy. To this end we will use
Theorem 2.3, and deﬁne

F := {F ⊆ EGn,p(U1, U2) : U1 ∩ U2 = ∅,|U1| = |U2| = ǫn/k,|F| ≥ eGn,p(U1, U2) − dpǫ2n2/k2}.

Clearly, if Client wins the CW (Gn,p,F ∗, q) game then he has achieved his goal. It remains to verify
the condition of Theorem 2.3. Indeed, since w.h.p. the number of edges between any two disjoint
subsets of size ǫn/k will satisfy

1

2 pǫ2n2/k2 ≤ eGn,p(U1, U2) ≤ 2pǫ2n2/k2,

16

we get

Φ(F) ≤(cid:18) n
≤(cid:18) ek
≤ C n
by our assumption on d.

2ǫn/k(cid:19)(cid:18)2ǫn/k
2ǫ(cid:19)2ǫn/k
ǫ,k exp(cid:18) pǫ2n2

k2

ǫn/k(cid:19)(cid:18)2pǫ2n2/k2
dpǫ2n2/k2(cid:19)e−(
d (cid:19)dpǫ2n2/k2
22ǫn/k(cid:18) 2e

e−(

1
2 −d)pǫ2n2/(q+1)k2

1
2 −d)pǫ2n2/(q+1)k2

(d(1 + ln 2 − ln d) − (1/2 − d)/(q + 1))(cid:19) → 0,

4.2 Waiter’s side

We start with the case of a graph H for which there exists H ′ ⊆ H such that d2(H ′) = m2(H), H ′ is
strictly 2-balanced and it is not a tree or a triangle. Due to the monotonicity of the Client-Waiter
game, it is enough to consider the unbiased (q = 1) case. Moreover, it is enough to show that
Waiter can prevent Client from claiming a copy of H ′, and so we may assume that H ′ = H. Our
proof follows very closely that of Theorem 2 in [28]. We start with a general suﬃcient condition
for Waiter’s win.

Proposition 4.3. Let H be a strictly 2-balanced graph which is neither a tree nor a triangle. If
G is a graph such that m(G) ≤ m2(H), then Waiter has a winning strategy for the CW (G, H, 1)
game.

Proof. The arboricity of a graph G is deﬁned by

ar(G) = max
G′⊆G

e(G′)
v(G′) − 1

.

The Nash-Williams arboricity theorem ([27]) states that any graph G can be decomposed into
⌈ar(G)⌉ edge-disjoint forests.
Lemma 4.4. Let G, H be graphs such that

then Waiter has a winning strategy for the CW (G, H, 1) game.

(cid:24) ar(G)

2 (cid:25) < ar(H),

Proof. Set k =(cid:24) ar(G)

2 (cid:25), and partition E(G) into 2k edge-disjoint forests. Divide these forests to

pairs. By Theorem 2 in [14] Waiter can force Client’s graph to be a forest when playing on the
edges of a union of two edge-disjoint forests. Thus, when playing on G Waiter has a strategy to
force Client’s graph to be a union of k edge disjoint forests. For any subset S ⊆ V (G), the number
of Client’s edges spanned by S will be at most k(|S| − 1), which means that Client’s graph has
arboricity at most k, hence it cannot contain H.

Lemma 4.5. Let G, H be graphs such that

then Waiter has a winning strategy for the CW (G, H, 1) game.

(cid:24) m(G)

2 (cid:25) < m(H),

17

Proof. We ﬁrst orient the edges of G in the following manner. Set k = ⌈m(G)⌉. Construct a
bipartite graph between E(G) and k copies of V (G) and connect each edge to all the copies of the
vertices which are incident to it. The graph satisﬁes Hall’s condition with respect to E(G), hence
we have a matching which covers E(G). For any v ∈ V orient the edges of v such that v is the
source of e if and only if e is connected to a copy of v in this matching. Since there are k copies
of v, its out-degree will be at most k. Now Waiter can then play on each vertex at a time, oﬀering
only pairs of edges for which the current vertex is a source. The maximum out-degree in Client’s

graph will then be at most (cid:24) m(G)

and it certainly does not contain H.

2 (cid:25), which means that its maximal density is lower than m(H),

To prove the proposition we consider several cases of maximal 2-density of H and use the two
lemmas to show that in any case Waiter has a winning strategy. Since this is practically the same
as in Theorem 18 in [28] we omit the details. The inquisitive reader can ﬁnd them in Appendix A.

Consider the game CW (G, H, 1) on the edges of some arbitrary graph G. Certainly, any edge in G
which does not take part in any copy of H is irrelevant to the outcome of the game. Moreover, if
some copy of H in G has two edges neither of which takes part in another copy of H, then Waiter
can oﬀer these two edges in a single turn, thus preventing Client from claiming this copy of H while
not risking any other copy. This leads to the following deﬁnition.
Deﬁnition 4.6. A H-core of G is a maximal subgraph G′ ⊆ G such that
• every edge of G′ is contained in at least one copy of H in G′, and
• every H-copy on G′ has at most one edge which does not take part in another H-copy.

The exact construction and a proof that the H-core is unique can be found in [28]. By the discussion
above Waiter wins the CW (G, H, 1) game if and only if he wins CW (G′, H, 1) where G′ is the H-
core of G. Furthermore, it is enough to show that Waiter has a winning strategy for bi-connected
(2-connected) components of G′, since these do not share edges (and in particular they do not share
H-copies).

Lemma 4.7 (Lemma 23 in [28]). Let H be a strictly 2-balanced graph which is not a tree or a
triangle. Then there exist constants c > 0 and L > 0 such that w.h.p. every bi-connected component
of the H-core of Gn,p has size at most L, provided that p ≤ cn−1/m2(H).
We can now ﬁnish the proof of the 0-statement of Theorem 1.7 for H 6= K3. Set G = Gn,p with
p = cn−1/m2(H). By the above lemma all the bi-connected components of the H-core of G will be
of size at most L. By a well known property of Gn,p (as was mentioned in the beginning of this
section), w.h.p. all the bi-connected components will be with maximal density at most m2(H) and
by Proposition 4.3 Waiter has a winning strategy while playing on each bi-connected component,
and thus when playing on all of the H-core, and indeed on all of G.

Next we turn to the case where H = K3 and q ≥ 2. The Client’s side was covered in the proof of
the 1-statement, it remains to show the following:

18

Proposition 4.8. There is some constant c > 0 such that w.h.p. Waiter wins the CW (Gn,p, K3, 2)
game when p = cn−1/2.

Proof. We will prove two lemmas — the ﬁrst will show that Client can only win on graphs with
maximum density higher than 2, and the second will show that when p = cn−1/2, if Client wins on
Gn,p then w.h.p. he wins on some subgraph of bounded order.
Lemma 4.9. Let G be a graph with m(G) ≤ 2, then Waiter has a winning strategy in the
CW (G, K3, 2) game.

Proof. Suppose to the contrary that G is a minimal graph such that m(G) ≤ 2 and Client wins
the game on G. By Theorem 1.3 in [8] Waiter can force Client’s graph to be acyclic when playing
on K6 with bias 2. We may therefore assume that vG > 6. Let A ⊂ V (G) be a proper subset,
and deﬁne H = G[A] and ˆH = G[V \A]. We must have that e(A, V \A) ≥ 4, otherwise Waiter can
play on H and then on ˆH (winning on both by the minimality of G), and then oﬀer all the edges
E(A, V \A) and Client will not claim a triangle. In particular δ(G) ≥ 4. But since m(G) ≤ 2, it
must be that m(G) = 2 and G is 4-regular. This leads to

e(A, V \A) = 4vH − 2eH ≥ 4 =⇒ eH ≤ 2(vH − 1).

(*)

Let v0 be an arbitrary vertex, and let N (v0) = {v1, v2, v3, v4}. Denote H = G[{v0} ∪ N (v0)] and
ˆH = G[V \({v0} ∪ N (v0))]. We claim that G[N (v0)] must be a connected graph, for otherwise we
can partition N (v0) to two parts, A, B, each with size at most 3, and E(A, B) = ∅. Waiter can
then play his winning strategy on G\{v0}, then oﬀer E(v0, A), and on the last turn he will oﬀer
E(v0, B). It is easy to see that in this case Client will not claim a triangle. From this reasoning
together with (*) we deduce that eH ∈ {7, 8}. We now consider several cases. In each case we
show that Waiter, after playing his winning strategies on H and on ˆH, has a strategy to oﬀer the
remaining free edges such that Client will not claim a triangle.

1. Suppose eH = 8 and G[N (v0)] is isomorphic to C4 (G[N (v0)] ∼= C4). Then every vertex in H
has at most one edge connecting it to ˆH. Suppose there is u ∈ ˆH such that e(u, H) = 4. Then
G[H ∪{u}] has 12 edges which violates (*). This means that Waiter (after having played and
won on H and ˆH) can just oﬀer in each turn all the free edges incident to some vertex in ˆH.
Client will not claim a triangle since he will not have a vertex with degree higher than one in
the cut between H and ˆH.

2. Suppose eH = 8 and G[N (v0)] ∼= K3 + e. Then there is only one vertex in H with degree
2, let it be v1. Waiter will oﬀers all free edges incident to v1, and then the remaining (two)
edges. Since the two vertices in H which are connected to v1 have degree 4 in H, Client will
not be able to claim a triangle.

3. Suppose eH = 7 and G[N (v0)] ∼= P4. Suppose the path is {v1, v2, v3, v4}. As in case 1, there

is no u ∈ ˆH such that e(u, H) = 4. We have 3 sub-cases.
(a) There is u ∈ ˆH such that u is connected to v1, v2, v3. Then the graph G[{v0, v1, v2, v3, u}]
is isomorphic to H of case 1. The case where u is connected to v2, v3, v4 is treated
similarly.

(b) There is u ∈ ˆH such that u is connected to v1, v3, v4. Waiter will oﬀer (u, v3), (u, v4) and
the other free edge incident to v4, and in the next turn he can safely oﬀer the remaining
free edges. The case where u is connected to v1, v2, v4 is treated similarly.

19

(c) We can assume that for any vertex u ∈ ˆH, e(u, H) ≤ 2.

If there is u ∈ ˆH which is
connected to both v1, v2 then Waiter will oﬀer these edges and the other free edge of v1,
otherwise he will oﬀer just the free edge of v1. In the next turn he will do the same for
v4, and in the last turn he can just oﬀer the remaining (if any) free edges.

4. Suppose eH = 7 and G[N (v0)] ∼= S3. Let v1 be the centre vertex. In the last three turns

Waiter can oﬀer in each turn the two free edges of vi for i = 2, 3, 4.

We have shown that in every case Waiter has a winning strategy, hence there is no such G.

Continuing with the proof of the proposition, the next deﬁnition and the lemma that follows are
inﬂuenced by the ideas of Nenadov, Steger and Stojakovi´c in [28], but we need to make some
necessary changes, since (as mentioned there) their proof will not go through for H = K3 as that
would be a contradiction to the result of [26].
Let G be a graph. An edge in G is free if it does not take part in any triangle, it is open if it
takes part in precisely one triangle, and it is half-open if it takes part in precisely two triangles.
Otherwise, it is closed.
Deﬁnition 4.10. A K3-core of G is a maximal subgraph G′ ⊆ G such that

• there are no free edges in G′,
• every triangle in G′ has at most one open edge, and
• every half-open edge is in at least one triangle which has no open edges.

Consider the following process for generating a K3-core of graph G. We set T to be the set of all

triangles of G, and deﬁne the subgraph GT := St∈T t. Iteratively we remove from T all triangles

with more than one open edge in GT , and all pair of triangles which share a half-open edge and
both of them have an open edge in GT , updating GT after each step. When the process ends GT
is a K3-core of G.
Claim 4.11. Let G be a graph, and let G be the family of bi-connected (2-connected) components of
a K3-core of G. Suppose that for any G′ ∈ G, Waiter has a winning strategy in the CW (G′, K3, 2)
game. Then Waiter has a winning strategy in the CW (G, K3, 2) game.

Proof. Since the bi-connected components are pairwise edge-disjoint, a winning strategy for each
separate component yields a winning strategy for the K3-core. After winning on the K3-core Waiter
will consider the removed triangles in the K3-core generating process described above, but in reverse
order. Each time he will add a triangle which has more than one open edge he will oﬀer Client
two of those open edges, and each time he adds a pair of triangles which share an half-open edge
he will oﬀer this edge and another open edge from each of those triangles. Finally, when there are
no more triangles to add he can just play arbitrarily. It is not hard to verify that this is a winning
strategy for Waiter.

The next Lemma is rather technical. Its proof can be found in the Appendix.

Lemma 4.12. There are constants c, L > 0 such that w.h.p. every bi-connected component of the
K3-core of Gn,p is of size at most L, when p ≤ cn−1/2.

20

We can now ﬁnish the proof of the proposition. From Lemma 4.12 we get that when p = cn−1/2
then w.h.p. Client wins if and only if he wins on some subgraph of Gn,p of order at most L. On
the other hand, w.h.p. every subgraph of order L will be with maximum density at most 2, which
by Lemma 4.9 will be Waiter’s game.

Lastly, we consider the Client-Waiter H-game, where H is a tree. Theorem 1.7 might lead us to
think that the threshold for this game should be Θ(n−1), but in fact we will show that it is much
lower. We start with a simple threshold for stars.

Claim 4.13. Let Sk be the star with k edges. Then n−2k/(2k−1) is a threshold function for Client’s
win in CW (Gn,p, Sk, 1).

Proof. When p ≫ n−2k/(2k−1), there will be w.h.p. a vertex v in Gn,p with degree 2k − 1. Client’s
strategy will be to take an edge at v every time such an edge is oﬀered to him, thus getting Sk with
v at the centre.
On the other hand, assume p ≪ n−2k/(2k−1). Then w.h.p. every component of Gn,p is a tree with
at most 2k − 2 edges. If Waiter will play every turn on a single component then there will not be
a component in Client’s graph with more than k − 1 edges, and in particular Client will not claim
a copy of Sk.

On the other hand, the next claim shows that Waiter has a winning strategy in CW (Gn,p, Pk+1, 1)
provided p ≪ n−2k/2/(2k/2−1). Thus trees of the same order might have diﬀerent thresholds.

Claim 4.14. Let Pk+1 be the path with k edges. Then Waiter wins CW (Tn, Pk+1, 1), where Tn is
any tree of order n < 2k/2.

Proof. Observe that Tn contains at most (cid:0)n
deﬁned by its two end points. The claim now follows from the next Waiter’s winning criterion by
Bednarska-Bzd¸ega.
Lemma 4.15 (Corollary 1.4 in [7]). For a set X and a family of subsets F, if

2(cid:1) copies of Pk+1. Indeed, each path in Tn is uniquely

then Waiter wins the CW (X,F, 1) game.

2−|A| <

1
2

,

XA∈F

Though we cannot expect to ﬁnd a single threshold probability for all trees of size k which depends
only on k, we can still show that at any rate these probabilities must be much smaller than inverse
linear.

Proof of Proposition 1.9. We may and will assume k ≥ 3. Set m = (k(q +1))2 and let T = Tm,k
be the complete m-ary tree of height k. For an internal vertex x ∈ V (T ) let Ax be the set of edges
from x towards the leaves of T , and let F be the following family of edges,

F = {F ⊆ Ax : |F| = m − k + 1, for some internal vertex x}.

21

i=0 mi(cid:0) m

e−|A|/(q+1) ≤(cid:18) m

Since F is (m − k + 1)-uniform, and |F| =Pk−1
k − 1(cid:19) ·
m − 1 ·(cid:18) em2
≤
k − 1(cid:19)k−1
≤(cid:18) em2

XA∈F

m

mk

k−1(cid:1) we get that
m − 1 · e−(m−k+1)/(q+1)
k − 1(cid:19)k−1

e−(m−k+1)/(q+1)

e−(m−k)/(q+1).

The last expression will be smaller than 1 when

(k − 1)(q + 1)(1 + 2 ln m − ln(k − 1)) < m − k.

Using our choice for m and rearranging we get that the above condition will be true when k ≥ 3
and q ≥ 1, thus by Theorem 2.3 Client has a strategy such that by the end of the game he claimed
at least k out-edges of any internal vertex in T , which means that he claimed a copy of Tk,k.
Since vT = (mk+1 − 1)/(m − 1), for p = n−(mk+1+1)/mk+1 ≫ n−vT /(vT −1) w.h.p. Gn,p will contain T
and thus CW (Gn,p, Tk,k, q) will be Client’s win.

5 Final words

We have investigated several Client-Waiter games played on the edges of the complete graph. We
have found that the critical bias for the maximum-degree-k game is asymptotically between n/k
and 2n/k (Proposition 1.1). A natural question is whether either of the bounds can be improved.

Question 5.1. Can we improve either bounds of Proposition 1.1?

In the giant component game we discussed a phase transition taking place between n/2 and 1.6n
(Theorem 1.2), where Client’s achievement in this game drops from a linear-sized component to at
most logarithmic. A more dramatic drop was observed in the path game: from linear length when
q < n/2 to at most ln ln n when q > n (Theorem 1.3). For both games, but particularly in the giant
component game, it is interesting to know if the phase transition can be more accurately located.
In [8] Bednarska-Bzd¸ega et al. showed that in the Waiter-Client large component game the phase
transition happens around q = n (which is in accordance with the probabilistic intuition), so it is
natural to expect that at least the 1.6n upper bound of the phase transition in the Client-Waiter
large component game could be brought closer to n, especially since we feel that Client is somewhat
weaker in most games in comparison to Waiter in the corresponding Waiter-Client game.

Question 5.2. Can we narrow the phase transitions described in Theorem 1.2(ii)+(iii) and The-
orem 1.3(ii)+(iii)?

We have seen an improvement on the lower bound of the H-game played on the edge set of the
complete graph (i.e. Proposition 1.6). Both the probability intuition and comparison to partial
results for the Waiter-Client game ([9]) lead us to wonder whether the critical bias should be no
higher than O(n1/m(H)). An intermediate challenge could be the following.

Question 5.3. Is it true that for any integer k ≥ 3 there is c > 0 such that Waiter wins
CW (Kn, Kk, q) when q ≥ cn2/(k−1)?

22

We have also studied the Client-Waiter H-game played on the edges of the random graph. We
have seen that essentially there is little diﬀerence between this game and the corresponding Maker-
Breaker game, and we extended the result of Nenadov, Steger and Stojakovi´c ([28]) to include the
biased version of the game, and the case of H = K3 with bias at least 2. We also showed that when
H is a tree the picture is more complex and highly depends on the exact structure of the tree, but
nevertheless there is always some ǫ > 0 for which Client wins the game w.h.p. when p = n−1−ǫ.

Acknowledgment. The authors would like to thank Ma lgorzata Bednarska-Bzd¸ega for suggesting
the use of containers for the proof of Proposition 1.6. They are also thankful to Dan Hefetz for
reviewing a preliminary draft of this paper and his many helpful remarks.

References

[1] M. Ajtai, J. Koml´os, and E. Szemer´edi, The longest path in a random graph, Combina-

torica 1, (1981), pp. 1–12.

[2] J. Beck, Deterministic Graph Games and a Probabilistic Intuition, Combinatorics, Geometry

and Probability: A tribute to Paul Erd˝os, (1997), pp. 81–94.

[3] J. Beck, Positional games and the second moment method, Combinatorica 22, (2002), pp. 169–

216.

[4] J. Beck, Combinatorial games: Tic-tac-toe theory, Encyclopedia of Mathematics and

its Applications 114, Cambridge University Press, Cambridge, 2008.

[5] M. Bednarska and T.  Luczak, Biased positional games for which random strategies are

nearly optimal, Combinatorica 20, (2000), pp. 477–488.

[6] M. Bednarska and T.  Luczak, Biased positional games and the phase transition, Random

Structures and Algorithms 18, (2001), pp. 141–152.

[7] M. Bednarska-Bzde¸ga, On weight function methods in Chooser-Picker games, Theoretical

Computer Science 475, (2013), pp. 21–33.

[8] M. Bednarska-Bzde¸ga, D. Hefetz, M. Krivelevich, and T.  Luczak, Manipulative
waiters with probabilistic intuition, Combinatorics, Probability and Computing, (to appear).

[9] M. Bednarska-Bzde¸ga, D. Hefetz, and T.  Luczak, Picker-Chooser ﬁxed graph games,

Journal of Combinatorial Theory, Series B, (to appear).

[10] M. Bednarska-Bzde¸ga, D. Hefetz, and T.  Luczak, On biased Chooser-Picker and

Picker-Chooser games, (unpublished).

[11] I. Ben-Eliezer, M. Krivelevich, and B. Sudakov, The size Ramsey number of a directed

path, Journal of Combinatorial Theory, Series B, (2012), pp. 743–755.

[12] B. Bollob´as, Random Graphs, Cambridge University Press, 2001.

[13] D. Conlon, W. T. Gowers, W. Samotij, and M. Schacht, On the K LR conjecture in

random graphs, Israel Journal of Mathematics 203, (2014), pp. 535–580.

23

[14] A. Csernenszky, C. I. M´andity, and A. Pluh´ar, On Chooser-Picker positional games,

Discrete Mathematics 309, (2009), pp. 5141–5146.

[15] P. Erd˝os and A. R´enyi, On the evolution of random graphs, Publications of the Mathemat-

ical Institute of the Hungarian Academy of Sciences 5, (1960), pp. 17–61.

[16] P. Erd˝os and J. L. Selfridge, On a combinatorial game, Journal of Combinatorial Theory

Series A 14, (1973), pp. 298–301.

[17] A. Frieze and M. Karo´nski, Introduction to Random Graphs, Cambridge University

Press, 2015.

[18] A. W. Hales and R. I. Jewett, Regularity and positional games, Transactions of the

American Mathematical Society 106, (1963), pp. 222–229.

[19] D. Hefetz, M. Krivelevich, M. Stojakovi´c, and T. Szab´o, Positional Games,

Birkha¨user, 2014.

[20] D. Hefetz, M. Krivelevich, and W. E. Tan, Waiter-Client and Client-Waiter Hamil-

tonicity games on random graphs, submitted.

[21] D. Hefetz, M. Krivelevich, and W. E. Tan, Waiter-Client and Client-Waiter planarity,

colorability and minor games, Discrete Mathematics 339, (2016), pp. 1525–1536.

[22] W. Hoeffding, On the distribution of the number of successes in independent trials, The

Annals of Mathematical Statistics 27, (1956), pp. 713–721.

[23] S. Janson, T.  Luczak, and A. Ruci´nski, Random Graphs, Wiley, 2000.

[24] M. Krivelevich and B. Sudakov, The phase transition in random graphs - a simple proof,

Random Structures and Algorithms 43, (2013), pp. 131–138.

[25] A. Lehman, A solution of the Shannon switching game, Journal of the Society for Industrial

and Applied Mathematics 12, (1964), pp. 687–725.

[26] T. M¨uller and M. Stojakovi´c, A threshold for the Maker-Breaker clique game, Random

Structures and Algorithms 45, (2014), pp. 318–341.

[27] C. S. J. A. Nash-Williams, Decomposition of Finite Graphs Into Forests, Journal of London

Mathematical Society 39, (1964), p. 12.

[28] R. Nenadov, A. Steger, and M. Stojakovi´c, On the threshold for the Maker-Breaker

H-game, Random Structures and Algorithms, (to appear).

[29] D. Saxton and A. Thomason, Hypergraph containers, Inventiones mathematicae 201,

(2015), pp. 925–992.

[30] D. B. West, Introduction to Graph Theory, Prentice Hall, 2001.

24

Appendix A Two missing proofs from Section 4

The end of the proof of Proposition 4.3. Set k = ⌊m2(H)⌋ and x = m2(H)− k. We consider
two cases.

a) 0 ≤ x < 1/2. Let v be a vertex with dH(v) = δ(H). Since H is strictly 2-balanced we have

m2(H\{v}) =

eH − 1 − δ(H)

vH − 3

<

eH − 1
vH − 2

= m2(H),

which leads to δ(H) > m2(H), and so δ(H) ≥ k + 1. Suppose G is a minimal graph which
If v is a vertex with dG(v) ≤ 2(δ(H) − 1), then Waiter can
contradicts the proposition.
play his winning strategy on G\{v} (which exists by the minimality of G) and in the last
δ(H) − 1 turns oﬀer the edges of v. We have found a winning strategy for Waiter on G,
and that is a contradiction. Assume then that δ(G) ≥ 2δ(H) − 1 ≥ 2k + 1. But then
m(G) ≥ k + 1/2 > m2(H) and we have reached a contradiction again.

b) x ≥ 1/2. We consider further subcases.
i. If k ≥ 3, then, using that eH ≤(cid:0)vH
(cid:24) m(G)

2 (cid:1) < 3
2 (cid:25) ≤(cid:24) k + 1

4 v2

H − vH (since vH ≥ 4), we get that
2 (cid:25) ≤ k − 1 < m(H),

and by Lemma 4.5 Waiter has a winning strategy.
vH −2 , and we get

H/4, then eH
vH

+ 1/2 > eH −1

ii. If eH < v2

(cid:24) m(G)

2 (cid:25) ≤(cid:24) m2(H)

2

(cid:25) ≤(cid:24) k + 1

2 (cid:25) ≤ k ≤ m2(H) − 1/2 < m(H),

iii. Suppose that eH ≥ ⌈v2

and again by Lemma 4.5 Waiter has a winning strategy.
H/4⌉ and k < 3 and vH ≥ 5. Then
H /4⌉ − 1
vH − 2 ≥ 2.

vH − 2 ≥ ⌈v2
eH − 1

m2(H) =

For any subgraph G′ ⊆ G, we have eG′/(vG′ − 1) = eG′/vG′ + eG′/(vG′ (vG′ − 1)) ≤
eG′/vG′ + 1/2, which together with m2(H) < 3 leads to

ar(G) ≤ m(G) + 1/2 ≤ m2(H) + 1/2 < 4.

On the other hand, using m2(H) ≥ 2.5 and vH ≥ 5, we derive
m2(H)(vH − 2) + 1

eH

vH − 1

≥ 2.

ar(H) ≥

=

vH − 1

We got that ⌈ar(G)/2⌉ < ar(H) and by Lemma 4.4 Waiter wins.

iv. The remaining case is vH = 4. In this case H = C4 or H = K4, as those are the only
strictly 2-balanced graphs on 4 vertices. The latter can be proved by an adaptation of
Lemma 2.1 in [26], while in the former we have ar(C4) = 4/3, and ar(G) ≤ m(G)+1/2 ≤
m2(C4) + 1/2 ≤ 2, and again Waiter wins by Lemma 4.4.

25

Proof of Lemma 4.12. We call a triangle T unproblematic if at least two of its edges are open
or one of its edges is open and it shares a half-open edge with triangle T1 which has at least one
open edge. Otherwise we call T problematic. Let G′ be a bi-connected component of the K3-core
of G = Gn,p. We describe a process to construct G′ from the empty graph by repeatedly attaching
triangles.

1: Let T0 be a triangle in G′
2: k ← 0; ˆG ← T0
3: while ˆG 6= G′ do
k ← k + 1
if ˆG contains a triangle which is unproblematic in ˆG then

4:

5:

let ℓ < k be the smallest index such that Tℓ is an unproblematic triangle in ˆG
if there is a triangle T ⊂ G′ such that T contains one of Tℓ’s open edges then
else

Tk = T

let e ∈ Tℓ be a half-open edge of Tℓ
if there is a triangle T ⊂ G′, T /∈ ˆG and T contains e then
else

Tk = T

let T ′ ⊂ ˆG be the other triangle which contains e
let Tk ⊂ G′ such that Tk contains one of T ′’s open edges

end if

end if

else

let Tk be a triangle in G′ that is not contained in ˆG and intersects ˆG in at least one edge

6:

7:
8:

9:

10:

11:

12:

13:

14:

15:

16:

17:

18:
19:

20:

end if
ˆG ← ˆG ∪ Tk

21:
22: end while

We need to show that w.h.p. the highest value of k is bounded by some constant. For i ≥ 1, let
Ti be the triangle added to ˆG at the i-th step, and let ˆGi be the graph ˆG just after adding Ti.
If Ti intersected ˆGi−1 in exactly one edge we call Ti regular, while if it intersected ˆGi−1 in three
vertices we call it degenerate. Denote by reg(i) and deg(i) the number of regular, resp. degenerate,
triangles in ˆGi. Furthermore, for 1 ≤ i ≤ ℓ we say that Ti is fully-open at time ℓ if Ti has a vertex
which is not touched by any other triangle of ˆGℓ (notice that Ti is necessarily regular in this case).
Denote by f (ℓ) the number of fully-open triangles at time ℓ.
Claim A.1. For every ℓ ≥ 1, assuming the process does not stop before the ℓ-th step, we have

f (ℓ) ≥

1
2 · reg(ℓ) − 3 · deg(ℓ).

Proof. Denote the right hand side of the above by ϕ(ℓ) := reg(ℓ)/2− 3deg(ℓ). We will use induction
to show that the following stronger statement holds for any ℓ ≥ 1
if Tℓ is regular
if Tℓ is degenerate.

f (ℓ) ≥(ϕ(ℓ),

ϕ(ℓ) + 1,

26

This is true for ℓ = 1 since T1 must be regular and f (1) = 1 > 1/2. At ℓ = 2 triangle T0 still has
two open edges, hence T2 is regular as well and f (2) = 2 > 1. Suppose now that we are at the ℓ-th
step, ℓ ≥ 3. If Tℓ is degenerate, then since Tℓ shares an edge with at most two fully-open triangles
we have f (ℓ) ≥ f (ℓ− 1)− 2 ≥ reg(ℓ− 1)/2− 3deg(ℓ− 1)− 2 = reg(ℓ)/2− 3(deg(ℓ)− 1)− 2 = ϕ(ℓ) + 1.
Otherwise, assume that Tℓ is regular. Consider two cases

• If Tℓ does not connect to a fully-open triangle then since Tℓ is regular and fully-open, f (ℓ) =

f (ℓ − 1) + 1 ≥ ϕ(ℓ − 1) + 1 = ϕ(ℓ) + 1/2.

• If Tℓ does connect to a fully-open triangle then f (ℓ) = f (ℓ − 1). If Tℓ−1 was degenerate then
f (ℓ − 1) ≥ ϕ(ℓ − 1) + 1 = ϕ(ℓ) + 1/2. Assume then that Tℓ−1 is regular and connected to
T ′. If T ′ was not fully open then f (ℓ) = f (ℓ − 2) + 1 ≥ ϕ(ℓ − 2) + 1 ≥ (reg(ℓ) − 2)/2 −
3deg(ℓ) + 1 = ϕ(ℓ). Assume then that T ′ was fully open.
If Tℓ−2 was degenerate then
f (ℓ) = f (ℓ − 2) ≥ ϕ(ℓ − 2) + 1 = ϕ(ℓ). Assume that Tℓ−2 was regular and connected to T ′′.
Again if T ′′ was not fully open we are done, otherwise T ′′ is fully open and Tℓ−2 is connected
to one of its open edges, e. At time ℓ − 1, T ′′ is still problematic since it has an open edge
and e is half-open and Tℓ−2 is fully open. Then by our algorithm, and since T ′ is fully open,
it must be that T ′ = Tℓ−2. But then at time ℓ, T ′′ is still problematic and therefore Tℓ must
connect to Tℓ−2. But Tℓ−2 is no longer fully open, which is a contradiction.

Returning to the proof of the lemma, suppose we are in the i-th step of the process described above.
We ﬁrst bound the probabilities of ﬁnding certain triangles. If there is an unproblematic triangle and
we are about to add a regular triangle, then there are at most four edges to which we may connect,
and at most n possibilities for the extra vertex. Thus we bound, Prreg,unprob. ≤ 4np2 ≤ 4c2 < 1/2,
if we choose c < 1/√8. A degenerate triangle just adds at least one new edge to the graph, which
at the i-th step has at most 3i vertices. Thus Pdeg(i) ≤ (cid:0)3i
3(cid:1)p ≤ (3i)3cn−1/2. Set L = 42 and

ℓ0 = 4 log2 n. Let X be the random variable of the number of sequences, when running this process
on Gn,p, that contain at least 7 degenerate triangles in the ﬁrst ℓ0 steps. After the L-th step, and
as long as we have less then 7 degenerate triangles, we must have unproblematic triangles. Because
for any ℓ > L, by Claim A.1 f (ℓ) ≥ (ℓ− 6)/2− 18 > 0. So the probability for a regular triangle after
the L-th step and before the 7-th degenerate triangle is at most 1/2. Denote by ℓ′ the moment in
which the 7-th degenerate triangle appears, then we have

E[X] ≤(cid:18)n

3(cid:19) X8≤ℓ′≤ℓ0(cid:18)ℓ′ − 1

6 (cid:19)(27ℓ3

0cn−1/2)7 · 2−(ℓ′−L−6) = o(1).

Now denote by Y the random variable of the number of sequences that last more than ℓ0 steps and
contain less than 7 degenerate triangles in the ﬁrst ℓ0 steps. We get

E[Y ] ≤(cid:18)n

3(cid:19) 6
Xk=0(cid:18)ℓ0

k(cid:19)(27ℓ3

0cn−1/2)k · 2−(ℓ0−L−k) = o(1),

by our choice of ℓ0. So w.h.p. X = Y = 0, which means that all the processes last for less than ℓ0
steps and contain at most 6 degenerate triangles. Denote by ℓe the length of such process. Then it
must be that f (ℓe) = 0, or we would still have fully-open triangles at step ℓe. Thus by Claim A.1

0 = f (ℓe) ≥ reg(ℓe)/2 − 3deg(ℓe) ≥ (ℓe − 6)/2 − 18 =⇒ ℓe ≤ 42.

27

