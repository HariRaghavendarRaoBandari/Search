6
1
0
2

 
r
a

M
 
4

 
 
]

.

C
O
h
t
a
m

[
 
 

1
v
0
5
6
1
0

.

3
0
6
1
:
v
i
X
r
a

Learning Topology of the Power Distribution Grid

with and without Missing Data

*Electrical & Computer Engineering, University of Texas at Austin, †Los Alamos National Laboratory, USA

Deepjyoti Deka*, Scott Backhaus†, and Michael Chertkov†

Email: deepjyotideka@utexas.edu, backhaus@lanl.gov, chertkov@lanl.gov

1

Abstract—Distribution grids refer to the part of the power grid
that delivers electricity from substations to the loads. Structurally
a distribution grid is operated in one of several radial/tree-like
topologies that are derived from an original loopy grid graph
by opening switches on some lines. Due to limited presence
of real-time switch monitoring devices, the operating structure
needs to be estimated indirectly. This paper presents a new
learning algorithm that uses only nodal voltage measurements
to determine the operational radial structure. The algorithm
is based on the key result stating that the correct operating
structure is the optimal solution of the minimum-weight spanning
tree problem over the original loopy graph where weights on
all permissible edges/lines (open or closed) is the variance of
nodal voltage difference at the edge ends. Compared to existing
work, this spanning tree based approach has signiﬁcantly lower
complexity as it does not require information on line parameters.
Further, a modiﬁed learning algorithm is developed for cases
when the input voltage measurements are limited to only a subset
of the total grid nodes. Performance of the algorithms (with and
without missing data) is demonstrated by experiments on test
cases.

Index Terms—Power Distribution Networks, Power Flows,
Spanning Tree, Graphical Models, Load estimation, Voltage
measurements, Missing data, Computational Complexity

I. INTRODUCTION

Distribution grids constitute the low voltage segment of
the power system delivering electricity from substations to
end-users. Both structurally and operationally the distribution
grids are distinct from the transmission (high voltage) portion
of the power system. A typical distribution grid is operated
as a collection of disjoint tree graphs, each growing from
substations at the root to customers. However, the complete
layout of the distribution system is loopy to allow multiple
alternatives for the trees to energize operationally. Switching
from one layout to another, implemented through switch on/off
devices placed on many segments of the distribution grid [1],
can take place rather often, in some cases few times an hour.
(See Fig. 1 for the illustration.) More frequent reconﬁguration
of the distribution is also promoted by recent in-mass inte-
gration of smart meters, PMUs [2] and smart devices, such as
deferrable loads and energy storage devices. Mixed operational
responsibilities in monitoring and operations, as well as the
growing role of the new smart devices and controls, make
fast and reliable estimation of the operational conﬁguration of
the distribution grid an important practical task, complicated
by the lack of real-time, line-based measurements. In such a
scenario, to estimate the distribution grid operational topology
one ought to rely only on nodal measurements of voltage and

end-user consumption. Notice, that brute force (combinatorial)
check of topologies for the nodal measurement consistency is
prohibitively expensive with the complexity growing exponen-
tially with the number of loops in the grid layout.

In this work we focus on beating the naive exponential
complexity of the operational topology learning task by explor-
ing power ﬂow speciﬁc correlations between available nodal
measurements. In particular, we develop a spanning tree algo-
rithm that reconstructs the radial operational topology from
the original loopy layout by using functions of nodal voltage
magnitudes as edge weights. Computational complexity of this
algorithm is order O(nlogn) in the size of the loopy graph’s
edge set. Moreover, the algorithm is generalized to the case
when some nodes are hidden.

A. Prior Work

Several approaches in the past have been made to learn
the topology of power grids under different operating condi-
tions and available measurements. [3] uses a Markov random
ﬁeld model for bus phase angles to build a dependency
graph to identify faults in the grids. [4] presents a topology
identiﬁcation algorithm for distribution grids that uses the
signs of elements in the inverse covariance matrix of voltage
measurements. [5] compares available time-series observations
from smart meters with a database of permissible signatures
to identify topology changes. This is similar to envelope
comparison schemes used in parameter estimation [6], [7].
For available line ﬂow measurements, topology estimation
using maximum likelihood tests was analyzed in [8]. In our
own prior work [1], [9], we analyzed an iterative greedy
structure learning algorithm using trends in second order
moments of voltages. [9] also presented the ﬁrst attempt at
topology learning from incomplete voltage data where nodes
with missing voltages are separated by greater than two hops.
The aforementioned approaches are speciﬁc to power grid
graphs and typically not linked to research in probabilistic
Graphical Models (GM) [10] used to study statistics of im-
ages, languages, social networks, and communication schemes.
Learning generic (loopy) structures from pair-wise correlations
in a GM is a difﬁcult task, normally based on the maxi-
mal likelihood [10] with regularization for sparsity [11] and
greedy schemes utilizing conditional mutual information [12],
[13]. However, the GM-based learning simpliﬁes dramatically
when used, following the famous Chow-Liu approach [14],
to reconstruct the spanning tree maximizing edge-factorized

2

mutual information. [15] generalizes this technique to learn
tree structured GMs with latent variables (missing data) using
information distances as edge weights.

B. Contribution of This Work

Following [1], [9], we consider linear lossless AC power
ﬂow models (also called, following [16], [17] Lin-Dist-Flow)
and assume that ﬂuctuations of consumption at the nodes are
uncorrelated. In this setting, our main result states that recon-
struction of the operating grid topology is equivalent to solving
the minimum weight spanning tree problem deﬁned over the
loopy graph of the grid layout where edge weights are given by
variances in voltage magnitude differences across the edges.
We use this result to formulate the operating topology as a
spanning tree reconstruction problem that needs only empirical
voltage magnitude measurements as input. As spanning trees
can be efﬁciently reconstructed, our learning algorithm has
much lower average and worst-case computational complexity
compared to existing techniques [4], [9]. While our algorithm
does not require knowing line impedances, these can be used
to estimate additionally statics of power consumption. Further,
we extend the topology learning algorithm to the case with
missing voltage data. The extension works provided nodes
with missing data are separated by at least two hops from
each other and covariances of nodal power consumption are
available. Compared to our prior work [9] on learning with
missing data, the spanning tree approach has lower complexity.
It also allows extension to cases with lesser restrictions on
missing data. Our algorithm shows some commonality with
the GM based spanning-tree learning of [15]. However the
key difference is that our approach relies principally on the
Kirchoff’s laws of physical network ﬂows contrary to the
measure of conditional independence utilized in [14], [15].
Thus, voltage magnitude based edge weights used in our work
are not restricted to satisfy graph additivity unlike information
distances in GM. Further, in the case with missing data, we
use power ﬂow relations between nodal voltages and injections
that, to the best of our knowledge, do not have an analog in
GM learning literature. We highlight the performance of our
algorithm through experiments on test distribution grids for
both cases, with or without missing data.

The rest of the manuscript is organized as follows. Section II
introduces notations, nomenclature and power ﬂow relations in
the distribution grids. Section III describes important features
of the nodal voltage magnitudes. This Section also contains
the proof of our main – spanning tree learning/reconstruction
– theorem. Algorithm reconstructing operational spanning tree
in the case of complete visibility (voltage magnitudes are
observed at all nodes) is discussed in Section IV. Modiﬁcation
of the algorithm which allows for some missing data (at the
nodes separated by at least two hopes) is described in Section
V. This Section also contains a brief discussion of some other
extensions/applications of our approach. Simulation results of
our learning algorithm on a test radial network are presented
in Section VI. Finally, Section VII contains conclusions and
discussion of future work.

Fig. 1.
A distribution grid with 4 substations (large red nodes). The
operational radial trees are formed by solid lines (black). Dotted grey lines
represent open switches. Non-substation nodes within each tree are marked
with the same color.

II. DISTRIBUTION GRID: STRUCTURE AND POWER FLOWS
Radial Structure: The original distribution grid is denoted
by the graph G = (V, E), where V is the set of buses/nodes of
the graph and E is the set of all undirected lines/edges (open
or operational). We denote nodes by alphabets (a, b,...) and
the edge connecting nodes a and b by (ab). The operational
grid has a ‘radial’ structure as shown in Fig. 1. In general, the
operational grid is a collection of K disjoint trees, ∪i=1,··· ,KTi
where each tree’s root node has degree one (connected by one
edge) and represents a substation. In this paper, we will mainly
focus on grids where the operational structure consists of only
one tree T with nodes VT and operational edge set ET ⊂ E.
Generalization to the case with multiple disjoint trees will be
discussed along side major results.
Power Flow (PF) Models: Let zab = rab + ixab denote the
complex impedances of a line (ab) (i2 = −1). Here rab and
xab are line resistance and reactance respectively. Kirchhoff’s
laws express the complex valued power injection at a node a
in tree T as

a − vavb exp(iθa − iθb)
v2

(1)

Pa = pa + iqa = ∑

b:(ab)∈ET

z∗
ab

where the real valued scalars, va, θa, pa and qa denote the
voltage magnitude, voltage phase, active and reactive power
injection respectively at node a. Va(= va exp(iθa)) and Pa
denote the nodal complex voltage and injection respectively.
One node (substation/root node in our case) is considered as
reference and the voltage magnitude and phase at every non-
substation node are measured relative to the reference values.
As the complex power injection at the reference bus is given
by negation of the sum of injections at other buses, without
a loss of generality the analysis can be limited to a reduced
system, where one ignores reference substation bus voltages
and power injections. Under realistic assumption that losses of
both active and reactive power in lines of a distribution system
are small, Eq. (1) can be linearized as follows.

Linear Coupled (LC) model [1], [9]: In this model,
phase difference between neighboring nodes and magnitude
deviations (va−1 = εa) from the reference voltage are assumed

3

Due to the radial topology of T, the inverse of the reduced
weighted graph Laplacian matrix H1/r has the following struc-
ture (see Section 4 in [1] for details).
∑
(cd)∈Pa

H−1
1/r(a,b) =

(cid:84) Pb

rcd

(5)

T

T

Thus, the (a,b)th entry in H−1
1/r is given by the sum of line
resistances of edges that are included in the path to the root
from either node as shown in Fig. 2. For nodes a and its parent
b in tree T (see Fig. 2), it follows from Eq. (5) that

(cid:40)

rab
0

H−1
1/r(a,c)− H−1

1/r(b,c) =

if node c ∈ Da
otherwise,

T

(6)

We use Eqs. (5) and (6) to prove our results on voltage
magnitude relations. The results hold under the following
assumptions.

Assumption 1: Power Injection at different nodes are not
correlated, while active and reactive injections at the same
node are positively correlated. Mathematically, ∀a,b non-
substation nodes

Ωqp(a,a) > 0, Ωp(a,b) = Ωq(a,b) = Ωqp(a,b) = 0

Note that this is a valid assumption for many distribution grids
due to independence between different nodal load ﬂuctuations
and alignment/correlations between same node’s active and
reactive power usage.

Under Assumption 1, we state the following result without

proof. (See [9] for details.)
Theorem 1.
of node b on tree T then Ωε(a,a) > Ωε(b,b).

[9, Theorem 1] If node a (cid:54)= b is a descendant

Next, we deﬁne the term φab = E[(εa − µεa)− (εb − µεb)]2,
which is the variance of the difference in voltage magnitudes
between nodes a and b.

φab = Ωε(a,a)− 2Ωε(a,b) + Ωε(b,b)

(7)

(cid:16)

(H−1

1/r(b,d))2Ωp(d,d)

1/r(a,d)− H−1
(cid:17)

where Ωε is given by Eq. (4). Expressing Eq. (7) in terms of
the four matrices that constitute Ωε and then using Eq. (5)
leads to the following expansion of φab over power injections.
φab = ∑
d∈T
(cid:16)
1/x(a,d)− H−1
+ (H−1
1/x(a,d)− H−1
H−1
The next result identiﬁes trends in φab along the radial grid.
Note that the ﬁrst two cases in Lemma 1 are proven in [9].
The additional ﬁnal case is opposite of the ﬁrst case and helps
develop our new learning scheme presented later in this paper.
Lemma 1. For three nodes a (cid:54)= b (cid:54)= c in grid tree T, φab < φac
holds for the following cases:

1/x(b,d))2Ωq(d,d) + 2
1/x(b,d)

1/r(a,d)− H−1
H−1

Ωpq(d,d)

(8)

(cid:17)

1/r(b,d)

1) Node a is a descendant of node b and node b is a

descendant of node c (see Fig. 3(a)).

2) Nodes a and c are descendants of node b and the path

from a to c passes through node b (see Fig. 3(b)).

The Figure shows distribution grid tree with substation/root node
Fig. 2.
colored in red. Here, nodes a and c are descendants of node a. Dotted lines
represent the paths from nodes a and d to the root node. The paths’ common
edges give H−1

1/r(a,d) = rbe + re0.

to be small. The PF Eqs. (1) are linearized jointly over both
voltage magnitude and phase to give:
1/xq θ = H−1

1/x p− H−1
1/rq

1/r p + H−1

ε = H−1

(2)

Here, p,q,ε and θ are the vectors of real power, reactive power,
voltage magnitude deviation and phase angle respectively at
the non-substation nodes of the reduced system. H1/r and H1/x
denote the reduced weighted Laplacian matrices for T where
reciprocal of resistances and reactances are used respectively
as edge weights. The reduced Laplacian matrices are of
full rank and constructed by removing the row and column
corresponding to the reference bus from the true Laplacian
matrix.

[1] shows that the LC-PF model is equivalent to the LinDis-
tFlow model [16]–[18], if deviations in voltage magnitude are
assumed to be small and thus ignored. (Notice, that if line
resistances are equated to zero, the LC-PF model reduces to
the DC PF model [19] used for transmission grids.) We can
express means (µθ,µε) and covariance matrices (Ωε,Ωθ,Ωθε)
of voltage magnitude deviations and phase angles in terms of
corresponding statistics of power injections using Eq. (2) as
shown below. Other quantities can be similarly determined.

µθ = H−1
Ωε = H−1
+ H−1

1/xµp − H−1
1/rΩpH−1
1/xΩqpH−1

1/r

1/rµq, µε = H−1
1/xΩqH−1
1/r + H−1

1/rµp + H−1
1/xµq
1/rΩpqH−1
1/x + H−1

1/x

(3)

(4)

In the next Section, we derive key results for functions of
nodal voltages in a radial distribution grid that will subse-
quently be used in the topology learning algorithm.

III. PROPERTIES OF VOLTAGE MAGNITUDES IN RADIAL

GRIDS

Consider grid tree T with operational edge set ET. Let Pa
T
denote the set of edges in the unique path from node a to the
root node (reference bus) in tree T. A node b is termed as a
descendant of node a if Pb
T includes some edge (ac) connected
to node a. We use Da
T to denote the set of descendants of a.
By deﬁnition, a ∈ Da
T. If b is an immediate descendant of a
((ab) ∈ ET), we term a as parent and b as its child. These
deﬁnitions are illustrated in Fig 2.

𝑎 𝑏 𝑐 𝑑 (𝑎𝑏) 𝑒 (𝑏𝑒) (𝑒0) (𝑑𝑏) 0 𝐷𝑎𝑇𝑘 4

(a)

(b)

(c)

Fig. 3. Distribution grid tree with substation/root node represented by large
red node. (a) Node a is a descendant of node b, node b is a descendant of
node c. (b) Node a and c are descendants of node b along disjoint sub-trees.
(a) Node c is a descendant of node b, node b is a descendant of node a.

3) Nodes c is a descendant of node b and node b is a

descendant of node a (see Fig. 3(c)).

T − Pa

T − Pa

T ⊆ Pc

T, where Pa

Proof: We give the proof for Case 3 depicted in Fig. 3(c).
In this case, Pb
T is the set of edges
in the unique path from node a to the root node of T. Further,
T ⊆ Da
the sets of descendants of a,b and c satisfy Dc
T.
From Fig. 3(c), it is clear that any node d belongs to either
Dc
T, Da
T, using
Eq. (5), we have,

T ⊆ Db
T. When d ∈ Dc

T or VT − Da

T − Db

T − Dc

T, Db

T

T

T

T

<

(9)

(11)

(10)

⇒ H−1

For node d ∈ Db

1/r(a,d) = ∑
re f < ∑
re f
T−Pa
(e f )∈Pc
T−Pa
(e f )∈Pb
1/r(a,d) < H−1
1/r(c,d)− H−1
1/r(a,d)
T, one derives
1/r(a,d) = ∑
∑
re f
re f
(e f )∈Pb
T−Pa
(e f )∈Pc
T∩Pd
T−Pa
1/r(c,d)− H−1
1/r(a,d) < H−1
1/r(a,d)

1/r(b,d)− H−1
H−1
1/r(b,d)− H−1
T − Dc
H−1
1/r(b,d)− H−1
⇒ H−1
1/r(b,d)− H−1
T − Db
For d ∈ Da
H−1
1/r(b,d)− H−1
1/r(a,d) = ∑
∑
re f =
re f
T∩Pd
T∩Pd
(e f )∈Pb
T−Pa
(e f )∈Pc
T−Pa
1/r(c,d)− H−1
1/r(a,d) = H−1
1/r(b,d)− H−1
1/r(a,d)
(14)
1/r(a,d) = H−1
T,H−1
1/r(c,d)−
Finally for d ∈ T − Da
1/r(a,d) = 0. Such inequalities also hold for H−1
H−1
1/x matrix.
Using the inequalities in Eqs. (10, 12,14) for H−1
1/r and H−1
1/x
with Eq. (8) results in φab < φac for Case 3. The proofs for
the other cases (1 and 2) can be done in a similar way and
they are thus skipped.

1/r(b,d)− H−1

T, one derives

⇒ H−1

(13)

(12)

T

T

Further, the following results hold for operational edges in

T.
Lemma 2. Let (ab) and (bc) be operational edges in T

1) If node a is the parent of node b (see Fig. 3(c)) then

φab = ∑
r2
abΩp(d,d) + x2
d∈Db

T

abΩq(d,d) + 2rabxabΩpq(d,d)

2) If node b is the parent of node c and child of node a

(rab + rbc)2Ωp(d,d) + (xab + xbc)2Ωq(d,d)

T

(see Fig. 3(c)), then
φac = ∑
d∈Dc
+ 2(rab + rbc)(xab + xbc)Ωpq(d,d)
+∑
d∈Db
> φab + φbc

abΩp(d,d) + x2
r2
T−Dc

T

abΩq(d,d) + 2rabxabΩpq(d,d)

(15)

(16)

3) If node b is the parent of both nodes a and c (see

Fig. 3(b)), then
φac = ∑
r2
abΩp(d,d) + x2
d∈Da
+∑
r2
bcΩp(d,d) + x2
d∈Dc
= φab + φbc

T

T

abΩq(d,d) + 2rabxabΩpq(d,d)

bcΩq(d,d) + 2rbcxbcΩpq(d,d)

Proof:

1) We use Eq. (6) in Eq. (8) as (ab) is an edge.
2) We follow the proof in Lemma 1. The result holds as the
left sides of Eqs. (9),(11),(13) here are given by (rab +
rbc), rab and 0 respectively. The inequality in (15) is
derived by applying Statement 1 for edges (ab) and (bc)
and noting that (y1 + y2)∗ (y3 + y4) > y1y3 + y2y4 holds
for positive reals y1,y2,y3,y4.

3) We use the same technique as above. Here Dc

T and Da
T
are disjoint. Using this fact along with Eq. (6) for edges
(ab) and (bc) results in the equality (16).

It is worth mentioning that all three statements in Lemma 2
involve line impedances corresponding to edges (ab) and (bc)
only. In the following sections, we use these results to design
our topology learning algorithm.

IV. STRUCTURE LEARNING WITH FULL OBSERVATION
Our main result for topology learning using voltage magni-

tude measurements is formulated using Lemma 1.
Theorem 2. Let the weight of each permissible edge (ab) ∈
E of the original loopy graph be φab = E[(εa − µεa)− (εb −
µεb)]2. Then operational edge set ET in radial grid T forms
the minimum weight spanning tree of the original graph.

Proof: From Lemma 1, it is clear that for each node a, the
minimum value of φab along any path in T (towards or away
from the root node) is attained at its immediate neighbor b
on that path, connected by edge (ab) ∈ ET. The minimum
spanning tree for the original loopy graph with φ’s as edge
weights is thus given by the operational edges in the radial
tree.

Note that if node a is taken as the substation/root node (εa =
0), the weight of any edge (ab) is given by φab = Ωε(b,b).
As mentioned in Section II, the substation has one child. In
the spanning tree construction, the root is thus connected to
the node with lowest variance of voltage magnitude. This is
in agreement with Theorem 1.

𝑐 𝑏 𝐷𝑎𝑇𝑘 𝐷𝑏𝑇𝑘 𝐷𝑐𝑇𝑘 𝑎 𝑐 𝑏 𝐷𝑏𝑇𝑘 𝐷𝑐𝑇𝑘 𝑎 𝐷𝑎𝑇𝑘 𝑐 𝑏 𝐷𝑏𝑇𝑘 𝐷𝑐𝑇𝑘 𝑎 𝐷𝑎𝑇𝑘 Algorithm 1: The input consists of voltage magnitude read-
ings for all non-substation buses in the system. An observer
computes φab for all permissible edges (ab) ∈ E (including
those with the root node) and identiﬁes edges in the minimum
spanning tree as the set of operational edges ET. The root node
is restricted to have a single edge. Note that Algorithm 1 does
not need any information on line parameters (resistances and
reactances) or on statistics of active and reactive nodal power
consumption. If impedances of lines in E and phase angle
measurements at all nodes are known, Eqs. (2), (3) and (4)
can be used to estimate means and covariances of each node’s
power injection.

Algorithm 1 Minimum Weight Spanning Tree based Topology
Learning
Input: m voltage magnitude deviations ε for all nodes, set of
all edges T.
Output: Operational Edge set ET.
1: ∀(ab)inE, compute φab = E[(εa − µεa)− (εb − µεb)]2
2: Find minimum weight spanning tree from E with φab as
3: ET ← edges in spanning tree

edge weights. Limit degree of substation to 1.

Algorithm Complexity: Using Kruskal’s Algorithm [20],
[21], the minimum spanning tree from E edges can be com-
puted in O(|E|log|E|) operations. This is a great improvement
over previous iterative or matrix inversion based techniques
which scaled as O(N3), where N = |VT| is the number of
nodes in the grid. If E is not known or corresponds to the
complete graph, Algorithm 1’s complexity is O(N2 logN), i.e.
it still compares favorably with the prior scheme.

Extension to Multiple Trees: If multiple trees exist in the
grid, voltage magnitudes at nodes a and b belonging to disjoint
trees will be independent. Thus, φab = Ωε(a,a)+Ωε(b,b). This
result can be used to separate nodes into disjoint groups before
running Algorithm 1 to generate the operational tree in each
group.

In the next Section, we extend our spanning tree based
algorithm to consider cases where information is missing at
some fraction of nodes.

V. STRUCTURE LEARNING WITH MISSING DATA

In a realistic power grid, communication packet drops or
random noise events may erase voltage magnitude measure-
ments for node set M in T. Following [9], we consider
arbitrary placement of unobserved nodes with the following
restriction.

Assumption 2: Missing nodes are separated by greater than

two hops in the grid tree T.

Note that under assumption 1, an observable node cannot
be connected to two or more unobserved nodes. (We plan
to analyze extensions beyond Assumption 2 in future work.)
Additionally, we assume that the adversary estimates or has
access to historical information for the values of Ωp, Ωq and
Ωpq covariance matrices for all nodes and impedances of all
possible lines in E.

5

(a)

(b)

(c)

(a)Distribution grid tree T with unobserved leaf node l non-
Fig. 4.
leaf unobserved node b. Node a is b’s parent while nodes c1,c2,c3,c4 are
its children. The spanning tree TM of observed nodes exists in either (b)
Conﬁguration A or (c) Conﬁguration B as per Theorem 3

To reconstruct operational topology in the presence of miss-
ing data, we ﬁrst construct the minimum weight observable
spanning tree TM using φab = E[(εa − µεa)− (εb − µεb)]2 as
edge weights between observable nodes. We then analyze
edges in tree TM and detect unobserved node locations.
Consider the situation shown in Fig. 4(a) where information
from the leaf node l is missing. By Assumption 2, information
from its parent (q) and grandparent (w) are observed in TM.
Note that φqw satisﬁes Statement 1 in Lemma 2. If all other
descendants of q are known, statement 1 of the Lemma can
be used to identify the existence of unobserved node l.

T−{b} φad ∈ C and argmind∈VT−Db

We now discuss the identiﬁcation of a non-leaf node with
missing information. Assume that information is missing at
the node b in Fig. 4(a). b’s parent a and children node set
C = {c1,c2,c3,c4} comprise its one-hop neighborhood, and
are observable under Assumption 2. Using Cases 1 and 3 in
φcid =
Lemma 1, argmind∈Db
a∀ci ∈ C. Thus, descendants of b are connected to the rest
of TM through edges between its one-hop neighbors (set C
and a). The following theorem gives the edge conﬁgurations
possible in TM for a and nodes in C.
Theorem 3. Let argminci∈C φbci = c∗. No edge (cic j) between
children nodes ci,c j (cid:54)= c∗ exists in TM. All nodes in set C1 =
{ci ∈ C,φaci < φc∗ci} are connected to node a, while all nodes
in C2 = C− C1 are connected to c∗.

T

Proof: Consider any node pair ci,c j (cid:54)= c∗ in C. Using
Eq. (16) in Lemma 2 and deﬁnition of c∗, φcic j = φbci +φbc j <
φbci + φbc∗ = φcic∗. Thus, any possible edge between children
nodes must include node c∗. The edges for each node in sets
C1 and C2 follow immediately by comparing weights with c∗
and a.
Theorem 3 does not specify if edge (ac∗) exists in TM. In
fact node c∗ will be connected to a node c† ∈ C1 instead of
a if φac† < φc∗c† < φac∗ holds. There are thus two permissible
conﬁgurations A and B (see Figs. 4(b), 4(c)) in TM for con-
nections between one hop neighbors of non-leaf unobservable
node b. Note that one of sets C1 or C2 may be empty as well.
Any two nodes in C are children of node b and thus satisfy
Statement 3 in Lemma 2. Observe that for both conﬁgurations
A and B, this result holds for c∗ and any of its children in TM

𝑎 𝑐1 𝑏 𝑐3 𝑐2 𝑐4 𝑙 𝑞 𝑤 𝑎 𝑐1 c∗= 𝑐3 𝑐2 𝑐4 𝑞 𝑤 𝑎 𝑐1 c∗= 𝑐3 𝑐 2 𝑐4 𝑞 𝑤 6

that belong to C. The result also holds for c∗ and its parent in
conﬁguration B. On the other hand, any node in C and a are
actually separated by node b and thus it satisﬁes Statement 2
in Lemma 2. This result thus holds for node a and any of its
children from C. Statements 2 and 3 in Lemma 2 can hence
be used to identify unobservable node b in Algorithm 2.
Algorithm 2: Assume that information is missing at the set
M, thus leaving only VT − M observable. Covariance matrices
for power injection at all nodes of the observed set are assumed
known to the observer along with impedances of all lines in E.
Algorithm 2, ﬁrst, constructs spanning tree TM for observed
nodes using edge weights for all node combinations given
by φ. Observed nodes in TM are then arranged in reverse
topological order (decreasing depth from root node). This is
done as unobserved node locations are iteratively searched
from leaf sites inward towards the root (see Step 5). For each
leaf b with parent a, Steps 7 to 12 checks if edge (ab) ∈ ET
with or without some unobserved leaf node h connected to
b. For undecided nodes in C, the Algorithm ﬁrst checks for
conﬁguration A or B described in the preceding discussion.
Step 15 determines if nodes in C and a are separated by a
unobserved node h using Statement 2 in Lemma 2. If such a
node doesn’t exist, Step 18 search for a unobserved node that is
parent of both nodes in C and node a using using Statement 3
in Lemma 2. Nodes a and set C are removed from the observed
tree TM in each iteration and discovered edges are added to
ET. Further, injection covariances at the recently identiﬁed
descendants are added for use in later checks involving results
from Lemma 2. Note that only in the ﬁnal case (Step 18), the
unobserved node h is not removed from set M as its parent
node has not been determined yet. This process is iterated by
picking a new node a with all children as leaf nodes until no
nodes with missing information remain to be discovered.
Complexity: Computing the spanning tree for observed
nodes has complexity O((N − |M|)2 log(N − |M|)). Sorting
observed nodes in topological order is done in linear time
(O(N − |M|)) [21]. Finally, checking (Steps 5, 7, 12, 15)
for all iterations has complexity O((N − |M|)|M|) as total
observed nodes and edges number O((N−|M|)) and searching
over unobserved nodes takes at most |M| steps. The overall
complexity of Algorithm 2 is thus O((N − |M|)2 log(N −
|M|) + (N −|M|)|M|) which is O(N2 logN) in the worst case.
Note that this is also the worst-case complexity of Algorithm
1.

Relation to Learning Probabilistic Graphical Model: It is
worth noting that in the tree-structured GM learning [15], edge
(ac∗) always exists due to the graph-additivity of edge weights
and conﬁguration B in Fig. 4(c) is not realized. The inequality
in Eq. (15) of Lemma 2 shows that φ may be strictly increasing
with the number of graph hops and thus it does not satisfy
graph additivity in general. Non-additivity of edge weights
makes our topology learning approach a generalization of the
additive model in [15] .

Extensions: We brieﬂy mention two extensions of Algo-
rithm 2, planning to analyze these in details in the future.
First, Algorithm 2 can be used for structure learning when
injection covariances at unobserved nodes are not known.
Here each unobserved node must have at least two children for

Fig. 5.
Layouts of the grids tested. The red circle represents substation
(marked as S). The blue circles represent numbered load nodes. Black lines
represent operational edges. The additional open lines are represented by
dotted green lines.

unique identiﬁcation. Second, Algorithm 2 will be extended to
operate when unobserved nodes are separated by 2 hops. In
this case, permissible conﬁgurations in addition to A and B
(see Fig. 4) need to be checked. A modiﬁcation of Statement
2 in Lemma 2 will be used to detect unobserved nodes. In the
following Section, we discuss the performance of our designed
algorithms through experiments on test networks.

VI. EXPERIMENTS

Here we demonstrate performance of Algorithm 1 in de-
termining the operational edge set ET of the radial grid T.
We consider a radial network [22], [23] with 29 load nodes
and one substation as shown in Fig. 5. In each of our simula-
tion runs, we ﬁrst collect complex power injection samples
at
the non-substation nodes from a multivariate Gaussian
distribution that is uncorrelated between different nodes as
per Assumption 1. We use LC-PF model to generate nodal
voltage magnitude measurements. Finally, we introduce 30
additional edges (at random) forming the loopy edge set E. The
additional edges are given random impedances comparable
to those of operational lines. We, ﬁrst, test performance of
the Algorithm 1 for the case where locations of edges in
the set E and voltage magnitude measurements at all non-
substation nodes are available. We show results for topology
learning for this case in Fig. 6(a). Note that the estimation
is extremely accurate and average errors expressed relative
to the size of the operational edge set) decay to zero at
the sample sizes less than 50. We also estimate covariance
matrices of complex nodal power injections using the just
reconstructed radial operating topology and plot results in
Fig. 6(b). For covariance estimation, line impedances of the
set E and samples of phase angle measurements are used along
with voltage magnitude samples as input. The relative errors
in this case decay exponentially with increase in the number
of the measurement samples.

Next, we present simulations for Algorithm 2 where the
operational grid structure is reconstructed in the presence of
unobserved nodes. We consider three cases with information at
the nodes 4, 6 and 8 missing. The location of the unobserved
nodes are selected at random in accordance with Assumption

S12345678910111213141516171819202122232425262728297

Algorithm 2 Minimum Weight Spanning Tree based Topology learning with Missing Data
Input: Injection covariances Ωp,Ωq,Ωpq of all nodes, Missing nodes Set M, m voltage deviation observations ε for nodes in
VT − M, set of all edges T with line impedances.
Output: Operational Edge set ET.
1: ∀ observable nodes a,b, compute φab = E[(εa − µεa)− (εb − µεb)]2
2: Find minimum weight spanning tree TM with φab as edge weights. Limit degree of substation to 1.
3: Sort nodes in TM in reserve topological order.
4: while |M| > 0 do
Select node a whose children set C in TM consists only of leaf nodes
5:
for all b ∈ C do
6:
7:
8:
9:
10:
11:

ET ← ET ∪{(ab), (bh)}, M ← M−{h}, C ← C−{b}, Add injection covariance of b and h to a. Remove node

ET ← ET ∪{(ab)}, C ← C−{b}, Add injection covariance of b to a. Remove node b from TM.

end if
if ∃h ∈ M s..t. φab satisfy Statement 1 in Lemma 2 with Db

if φab satisfy Statement 1 in Lemma 2 with Db

T = {b,h} then

T = {b} then

b from TM.
end if

end for
if |C| > 0 then

nodes in C from TM.

else

12:
13:
14:
15:
16:

17:
18:
19:

in C from TM.
end if

20:
end if
21:
22: end while

if ∃b ∈ C,h ∈ M s..t. φab satisfy Statement 2 in Lemma 2 with Db

T = {b} and Dh

T = {h}∪ C then

ET ← ET ∪{(ah)}∪{(ch)∀c ∈ C}, M ← M−{h}, C ← /0, Add injection covariances ∀c ∈ C and h to a. Remove

Pick b ∈ C. Find h ∈ M s..t. φab satisfy Statement 3 in Lemma 2 with h as parent and Db
T = {a}.
ET ← ET ∪{(ah)}∪{(ch)∀c ∈ C}, C ← /0, Add injection covariances of a and ∀c ∈ C to h. Remove a and nodes

T = {b} , Da

2. Voltage magnitudes at the unobserved nodes are removed
from the input data. Covariance of power injections at all the
load nodes and impedances of all the lines within the loopy
edge set E are provided as input to the observer. The average
number of errors shown in Fig. 7(a) decreases steadily with
increase in the number of samples. This tendency is seen
clearly for all the cases of the unobserved node sets. Further,
the average errors increase with increase in the number of
unobserved nodes for a ﬁxed number of measurement samples.
The average errors produced by Algorithm 2 are signiﬁcantly
lower in comparison with the respective algorithm from [9],
however (and as expected) the Algorithm is signiﬁcantly less
accurately than Algorithm 1 where all nodes are observed.

VII. CONCLUSIONS

Identifying the operational edges in the distribution grids
is critical for real-time control and reliable management of
different grid operations. In this paper, we study the problem
of learning the radial operating structure from a dense loopy
grid graph. Under an LC (linear coupled) power ﬂow model,
we show that if edge weights between load nodes are deﬁned
as the variance of the difference of their voltage magnitudes,
the minimum weight spanning tree optimization over the
loopy physical
layout outputs operational radial structure.
Using this spanning tree property, we design a fast structure
learning algorithm that uses only nodal voltage magnitude

measurements for the input. We then extend the spanning
tree based framework to learn the operational structure when
available voltage measurements are limited to a subset of the
grid nodes. For unobserved nodes separated by greater than
three hops, the learning algorithm is able to identify locations
of the missing measurements by verifying properties of our
voltage magnitude based edge weights. In this case, statistics
of nodal injections and line impedances are used as a part of
the input. We demonstrate good performance of the learning
algorithm through experiments on distribution grid test cases.
Finally, we discuss how voltage magnitude based edge weights
in our algorithm generalizes edge metrics used in learning
schemes of probabilistic GMs. In future we plan to generalize
our approach reducing restrictions, e.g. allowing unobserved
nodes to be separated by less than two hops and utilizing less
information about nodal consumption.

REFERENCES

[1] D. Deka, S. Backhaus, and M. Chertkov, “Structure learning and
statistical estimation in distribution networks - part i,” arXiv preprint
arXiv:1501.04131, 2015.

[2] A. Phadke, “Synchronized phasor measurements in power systems,”

Computer, 1993.

[3] M. He and J. Zhang, “A dependency graph approach for fault detection
and localization towards secure smart grid,” Smart Grid, IEEE Transac-
tions on, vol. 2, no. 2, pp. 342–351, 2011.

[4] S. Bolognani, N. Bof, D. Michelotti, R. Muraro, and L. Schenato, “Iden-
tiﬁcation of power distribution network topology via voltage correlation

analysis,” in Decision and Control (CDC), 2013 IEEE 52nd Annual
Conference on.

IEEE, 2013, pp. 1659–1664.

[5] G. Cavraro, R. Arghandeh, A. von Meier, and K. Poolla, “Data-driven
approach for distribution network topology detection,” arXiv preprint
arXiv:1504.00724, 2015.

[6] J. Peppanen, J. Grimaldo, M. J. Reno, S. Grijalva, and R. G. Harley, “In-
creasing distribution system model accuracy with extensive deployment
of smart meters,” in PES General Meeting— Conference & Exposition,
2014 IEEE.

IEEE, 2014, pp. 1–5.

[7] J. Peppanen, M. J. Reno, M. Thakkar, S. Grijalva, and R. G. Harley,
“Leveraging ami data for distribution system model calibration and
situational awareness,” 2015.

[8] R. Sevlian and R. Rajagopal, “Feeder topology identiﬁcation,” arXiv

preprint arXiv:1503.07224, 2015.

[9] D. Deka, S. Backhaus, and M. Chertkov, “Structure learning and
statistical estimation in distribution networks - part ii,” arXiv preprint
arXiv:1502.07820, 2015.
[10] M. J. Wainwright and M. I. Jordan, “Graphical models, exponential fam-
ilies, and variational inference,” Foundations and Trends R(cid:13) in Machine
Learning, vol. 1, no. 1-2, pp. 1–305, 2008.

[11] P. Ravikumar, M. J. Wainwright, J. D. Lafferty et al., “High-dimensional
ising model selection using 1-regularized logistic regression,” The An-
nals of Statistics, vol. 38, no. 3, pp. 1287–1319, 2010.

[12] A. Anandkumar, V. Tan, and A. S. Willsky, “High-dimensional graphical
model selection: tractable graph families and necessary conditions,” in
Advances in Neural Information Processing Systems, 2011, pp. 1863–
1871.

[13] P. Netrapalli, S. Banerjee, S. Sanghavi, and S. Shakkottai, “Greedy
learning of markov network structure,” in Communication, Control, and
Computing (Allerton), 2010 48th Annual Allerton Conference on. IEEE,
2010, pp. 1295–1302.

[14] C. Chow and C. Liu, “Approximating discrete probability distributions
with dependence trees,” Information Theory, IEEE Transactions on,
vol. 14, no. 3, pp. 462–467, 1968.

[15] M. J. Choi, V. Y. Tan, A. Anandkumar, and A. S. Willsky, “Learning la-
tent tree graphical models,” The Journal of Machine Learning Research,
vol. 12, pp. 1771–1812, 2011.

[16] M. Baran and F. Wu, “Optimal sizing of capacitors placed on a radial
distribution system,” Power Delivery, IEEE Transactions on, vol. 4,
no. 1, pp. 735–743, Jan 1989.

[17] ——, “Optimal capacitor placement on radial distribution systems,”
Power Delivery, IEEE Transactions on, vol. 4, no. 1, pp. 725–734, Jan
1989.

[18] ——, “Network reconﬁguration in distribution systems for loss reduction
and load balancing,” Power Delivery, IEEE Transactions on, vol. 4, no. 2,
pp. 1401–1407, Apr 1989.

[19] A. Abur and A. G. Exposito, Power system state estimation: theory and

implementation. CRC Press, 2004.

[20] J. B. Kruskal, “On the shortest spanning subtree of a graph and the
traveling salesman problem,” Proceedings of the American Mathematical
society, vol. 7, no. 1, pp. 48–50, 1956.

[21] T. H. Cormen, C. E. Leiserson, R. L. Rivest, and C. Stein, Introduction

to Algorithms. The MIT Press, 2001.

[22] U. Eminoglu and M. H. Hocaoglu, “A new power ﬂow method for radial
distribution systems including voltage dependent load models,” Electric
Power Systems Research, vol. 76, no. 13, pp. 106 – 114, 2005.

[23] [Online]. Available: http://www.dejazzer.com/reds.html

8

(a)

(b)

Fig. 6. Average fractional errors vs number of samples used in Algorithm 1
for (a) Learning operational edges (c) Estimating nodal injection covariances.

(a)

Fig. 7. Average fractional errors in learning operational edges vs number of
samples used in Algorithm 2 with missing data. Information is missing at the
nodes 4,6 and 8.

2040608010012014016018020000.511.522.533.5x 10−4number of measurement samplesAverage relative error in learning operational edges204060801001201401601802000.050.10.150.20.250.3number of measurement smaplesAverage relative error in estimating nodal injection covariances20040060080010001200140016001800200000.050.10.150.20.250.30.350.40.45number of measurement samplesAverage relative error in  learning operational edges   4 missing nodes6 missing nodes8 missing nodes