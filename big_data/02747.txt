6
1
0
2

 
r
a

M
 
9

 
 
]

.

C
O
h
t
a
m

[
 
 

1
v
7
4
7
2
0

.

3
0
6
1
:
v
i
X
r
a

Hamiltonian-Based Algorithm for Optimal Control

M.T. Halea, Y. Wardia, H. Jaleelb, M. Egerstedta

aSchool of Electrical and Computer Engineering, Georgia Institute of Technology, Atlanta,

Email: {mhale30,ywardi,magnus}@ ece.gatech.edu.

GA 30332, USA

bDepartment of Electrical Engineering, University of Engineering and Technology, Lahore,

Pakistan

Email: hassanjaleel@uet.edu.pk.

Abstract

This paper proposes an algorithmic technique for a class of optimal control
problems where it is easy to compute a pointwise minimizer of the Hamiltonian
associated with every applied control. The algorithm operates in the space of
relaxed controls and projects the ﬁnal result into the space of ordinary con-
trols. It is based on the descent direction from a given relaxed control towards
a pointwise minimizer of the Hamiltonian. This direction comprises a form
of gradient projection and for some systems, is argued to have computational
advantages over direct gradient directions. The algorithm is shown to be ap-
plicable to a class of hybrid optimal control problems. The theoretical results,
concerning convergence of the algorithm, are corroborated by simulation ex-
amples on switched-mode hybrid systems as well as on a problem of balancing
transmission- and motion energy in a mobile robotic system.

Keywords: Optimal control, relaxed controls, optimization algorithms,
switched-mode systems.

1. Introduction

Consider dynamical systems described by the diﬀerential equation

˙x = f (x, u),

(1)
where x(t) ∈ Rn is its state variable and u(t) ∈ U ⊂ Rk is the input control.
The set U ⊂ Rk is assumed to be compact. Suppose that the initial time is
t0 = 0, and the initial state x0 := x(0) ∈ Rn and the ﬁnal time tf > 0 are given
and ﬁxed. A control {u(t), t ∈ [0, tf ]} is said to be ordinary if the function
u : [0, tf ] → Rk is Lebesgue measurable, and we call a control admissible if it
is ordinary and u(t) ∈ U for every t ∈ [0, tf ]. Let L : Rn × U → R be an

$Research supported in part by the NSF under Grant CNS-1239225.

Preprint submitted to Elsevier

March 10, 2016

absolutely-integrable cost function, and let

(cid:90) tf

L(cid:0)x(t), u(t)(cid:1)dt

J :=

(2)

0

be its related performance functional. The optimal control problem that we
consider is to minimize J over the space of admissible controls.

The following assumption will be made throughout the paper:

Assumption 1.1. (1). The function f (x, u) is twice-continuously diﬀeren-
tiable in x ∈ Rn for every u ∈ U ; the functions f (x, u), ∂f
∂x2 (x, u)
are locally-Lipschitz continuous in (x, u) ∈ Rn × U ; and there exists K > 0
such that, for every x ∈ Rn and for every u ∈ U , ||f (x, u)|| ≤ K(||x|| + 1).
(2). The function L(x, u) is continuously diﬀerentiable in x ∈ Rn for every
u ∈ U ; and the functions L(x, u) and ∂L
∂x (x, u) are locally-Lipschitz continuous
in (x, u) ∈ Rn × U .

∂x (x, u), and ∂2f

Observe that part (1) of the assumption guarantees the existence of a unique
absolutely-continuous solution of Equation (1) in its integral form for every
admissible control and x0 ∈ Rn, while part (2) implies that the Lebesgue integral
in Equation (2) is well deﬁned.

This paper has been motivated by two kinds of problems: one concerns
switched-mode hybrid systems, and the other concerns optimal balancing of the
energy required for transmission and motion in mobile robotic networks. We
propose an algorithm deﬁned in the setting of relaxed controls, and analyze its
convergence using Polak’s framework of optimality functions. The theoretical
results are ﬁrst derived in the abstract framework of Eqs. (1) and (2), and then
applied to problems in the two aforementioned areas of interest.

A standard basic requirement of algorithms for nonlinear-programming (ﬁnite-

dimensional optimization) problems, and especially gradient-descent methods, is
that every accumulation point of an iterate-sequence they compute must satisfy
an optimality condition for a local minimum, such as the Kuhn-Tucker condi-
tion (e.g., [1]). Thus, if a bounded sequence of iteration points is computed
then it has at least one accumulation point which, therefore, must satisfy that
condition. However, in inﬁnite-dimensional optimization this requirement can
be vacuous since bounded sequences need not have accumulation points. This
issue is not only theoretical but also has practical implications. An inﬁnite-
dimensional problem may not have a solution or a local minimum on a closed
and bounded set, and even if a local minimum exists, it is not guaranteed that it
can be approximated by the solution points of the problem’s ﬁnite-dimensional
discretizations at any level of precision. To get around these issues, E. Polak
developed a comprehensive framework for design and analysis of algorithms for
inﬁnite-dimensional optimization that gives the user considerable discretion in
choosing the discretization levels in an adaptive fashion [1]. A survey of the
framework will be carried out in the next section, and we mention that re-
cently it has been used in the context of switched-mode hybrid systems in Refs.
[2, 3, 4, 5, 6, 7, 8, 9].

2

A relaxed control is a mapping µ(t) from the time interval [0, tf ] into the
space of probability measures on the set U [10, 11]. Relaxed controls provide a
useful framework for optimal control problems for the following reasons. First,
the space of relaxed controls is convex even though the input-constraint set
U may not be convex. Second, the space of relaxed controls is compact in a
suitable topology, namely the weak-star topology, and hence it contains solutions
to optimal control problems lacking solutions in a functional space of admissible
controls like L1(U ) (a more detailed survey of these points is provided in Section
2). However, a relaxed control is a more abstract object than an ordinary
control, which can make it problematic for an algorithm to handle an iterative
sequence of relaxed controls. This point will be discussed in the sequel.

This paper combines the frameworks of optimality functions and relaxed
controls to deﬁne a new algorithm for the optimal control problem. Its main
innovation is in the choice of the search direction from a given relaxed control,
which is based on a pointwise minimizer of the Hamiltonian (deﬁned below) at
each time t ∈ [0, tf ].1 Its step size is determined by the Armijo procedure [12, 1].
To our knowledge it is the ﬁrst such general algorithm which is deﬁned entirely
in the space of relaxed controls without projecting the results of each iteration
into the space of ordinary controls. The following results will be established.

• The aforementioned search direction yields descent of the cost functional
(2) even though it is not deﬁned in explicit gradient terms. It is a form
of gradient projection. For a class of problems (including autonomous
switched-mode systems) its computation is straightforward and simpler
than that of direct gradients.

• The algorithm is stable in the sense that it yields descent in the perfor-
mance integral regardless of the initial guess, Furthermore, the simulation
results presented in Section 4 indicate its rapid descent at the early stages
of its runs. By this we do not claim a high rate of asymptotic convergence
since it is a ﬁrst-order algorithm, but rather that most of its descent is
obtained in few early iterations requiring meagre computing (CPU) times.
• The combination of concepts and techniques from the settings of opti-
mality functions and relaxed controls yields an analysis framework that
is based on simple arguments. This point will become evident from the
simplicity and brevity of the forthcoming proofs.

Whereas the area of numerical techniques for optimal control has had a
long history (e.g., [1] and references therein), recently there has been a con-

1The computation of the minimizer of the Hamiltonian does not require the solving of
a two-point boundary value problem, but rather is based on sequential integrations of the
state equation forwards and the costate (adjoint) equation backwards. The structure of the
problem, and especially the absence of constraints on the ﬁnal state, make this possible under
Assumption 1.1. Final-state constraints can be handled by the application of penalty functions
thereby transforming the problem into one without ﬁnal-state constraints, as a forthcoming
example will illustrate.

3

siderable interest in optimal control problems deﬁned on switched-mode hybrid
systems. In this context the problem was formulated in [13, 14], and variants
of the Maximum Principle were derived for it in [14, 15, 16, 17, 18, 19, 20, 21].
New and emerging algorithmic approaches include ﬁrst- and second-order tech-
niques [22, 23, 16, 8, 3, 7], zoning algorithms based on the geometric prop-
erties of the underlying systems [26, 27, 28, 19], projection-based algorithms
[2, 4, 24, 25, 7, 5], methods based on dynamic programming and convex op-
timization [29], and algorithms based on needle variations [30, 8, 9, 6, 21].
Concerning the relaxed hybrid problem, Ref. [31] developed generalized-linear
programming techniques and convex-programming algorithms, [18] derived op-
timality conditions (both necessary and suﬃcient) for a class of hybrid optimal
control problems, and [32] applied to them the MATLAB fmincon nonlinear
programming solver. Comprehensive recent surveys can be found in [33, 34].

The forthcoming algorithm will be presented and analyzed in the abstract
problem formulation of Eqs. (1) and (2) and their extensions to the relaxed-
control setting. However, for implementation, we restrict the class of problems
in the following two ways: 1). The pointwise minimizer of the Hamiltonian
can be computed or adequately estimated by a simple formula. 2). For every
x ∈ Rn, the dynamic response function f (x, u) in Eq. (1) is aﬃne in u, and the
cost function L(x, u) in Eq. (2) is convex in u. Many problems of theoretical
and practical interest in optimal control satisfy these restrictions. These include
problems deﬁned on autonomous switched-mode systems and other hybrid sys-
tems, which will be shown to admit eﬃcient implementations of the algorithm.
Other kinds of hybrid systems are not yet included, and these will be mentioned
in the sequel as a subject of current research.

The rest of the paper is organized as follows. Section 2 presents brief sur-
veys of the frameworks of relaxed controls and optimality functions. Section 3
describes the algorithm and derives related theoretical results, while Section 4
presents simulation results. Finally, Section 5 concludes the paper and points
out directions for future research.
Notation : The term control refers to the function {u : [0, tf ] → U} and
is denoted by the boldface symbol u to distinguish it from a point in the set
U which is denoted by the lower-case u or u(t). Similarly, boldface notation
refers to a function of t ∈ [0, tf ] as in x := {x : [0, tf ] → Rn} for the state
trajectory, p := {p : [0, tf ] → Rn} for the costate (adjoint) trajectory, µ for a
relaxed control deﬁned as a function from t ∈ [0, tf ] into the space of probability
measures on U , etc.

2. Review of Established Results

This section recounts the basic framework of relaxed controls and some fun-

damental notions of algorithms’ convergence in inﬁnite-dimensional spaces.

2.1. Relaxed Control

Comprehensive presentations of the theory of relaxed controls and their role
in optimal control can be found in [10, 11, 35, 36, 37]; also see [38] for a re-

4

the function(cid:82)

In the following paragraphs we summarize its main points that
cent survey.
are relevant to our discussion. Let M denote the space of Borel probability
measures on the set U , and denote by µ a particular point in M . A relaxed
control associated with the system (1) is a mapping µ : [0, tf ] → M which is
measurable in the following sense: For every continuous function φ : U → R,
U φ(u)dµ(t) is Lebesgue measurable in t. We denote the space of
relaxed controls by M, and in accordance with previous notation we denote a
relaxed control {µ(t) : t ∈ [0, tf ]} by µ.
Recall that an ordinary control u is admissible if the function u : [0, tf ] → U
is (Lebesgue) measurable. Note that the space of ordinary controls is embedded
in the space of relaxed controls by associating with u(t) the Dirac probability
measure at u(t) ∀t ∈ [0, tf ]. In this case we say, with a slight abuse of notation,
that µ is an ordinary control, and indicate this by the notation µ ∼ u. Further-
more, the space of ordinary controls is dense in the space of relaxed controls in
the weak-star topology, namely in the following sense: For every relaxed con-
trol µ there exists a sequence {uk}∞
k=1 of ordinary controls such that, for every

function ψ ∈ L1(cid:0)[0, tf ]; C(U )(cid:1),2

(cid:90) tf

(cid:90) tf

(cid:90)

lim
k→∞

ψ(t, uk(t))dt =

ψ(t, u)dµ(t)dt.

0

0

U

Furthermore, the space of relaxed controls is compact in the weak-star topology.
An extension of the system deﬁned by Equations (1) and (2) to the setting

of relaxed controls is provided by the state equation

with the same boundary condition x0 = x(0) as for (1), and the related cost
functional deﬁned as

0

U

The relaxed optimal control problem is to minimize J(µ) over µ ∈ M.

˙x(t) = (cid:80)m
µi(t) ≥ 0 and (cid:80)m

There are two noteworthy special cases. First, if µ ∼ u, then Equations (3)
and (4) are reduced to Equations (1) and (2), respectively. Second, in the case
where U := {u1, . . . , um} is a ﬁnite set, (3) and (4) have the following respective
i=1 µi(t)L(x(t), ui)dt, with
forms:
i=1 µi(t) = 1 ∀t ∈ [0, tf ], and this corresponds to the case of
autonomous switched-mode systems. The space of relaxed controls generally is
convex even though the set U need not be convex.

i=1 µi(t)f (x(t), ui) and J = (cid:82) tf

(cid:80)m

0

Essential parts of the theory of optimal control, including the Maximum
Principle [39], apply to the relaxed-control problem (see also [35, 10, 11, 36, 37]).

2L1(cid:0)[0, tf ]; C(U )(cid:1) is the space of functions ψ : [0, tf ] × U → R that are measurable and

absolutely integrable in t on [0, tf ] for every u ∈ U , and continuous on U for every t ∈ [0, tf ].

5

(cid:90)

f(cid:0)x(t), u(cid:1)dµ(t)

˙x(t) =

U

(cid:90)

(cid:90) tf

J(µ) =

L(cid:0)x(t), u(cid:1)dµ(t)dt.

(3)

(4)

Thus, deﬁning the adjoint (costate) variable p(t) ∈ Rn by the equation

(cid:90)

(cid:16) ∂f

(cid:0)x(t), u(cid:1)(cid:62)

∂x

U

˙p(t) = −

p(t) +

dµ(t)

(5)

∂L
∂x

(cid:0)x(t), u(cid:1)(cid:62)(cid:17)
H(cid:0)x(t), µ(t), p(t)(cid:1)

with the boundary condition p(tf ) = 0, the Hamiltonian has the form

(cid:90)

=

(cid:16)

p(t)(cid:62)f(cid:0)x(t), u(cid:1) + L(cid:0)x(t), u(cid:1)(cid:17)

dµ(t),

(6)

U

and the Maximum Principle states that if µ ∈ M is a minimum for the relaxed
optimal control problem then µ(t) minimizes the Hamiltonian at almost every
time-point t ∈ [0, tf ].3

2.2. Inﬁnite-dimensional Optimization

It is a common practice to characterize convergence of algorithms for inﬁnite-
dimensional optimization problems in terms of optimality functions [1]. Consider
the abstract optimization problem of minimizing a function φ : Γ → R where
Γ is a topological space, and consider an optimality condition (necessary or
suﬃcient) associated with this optimization problem. An optimality function is
a function θ : Γ → R− having the property that θ(v) = 0 if and only if v satisﬁes
the optimality condition. The optimality-function concept is useful if |θ(v)| is
a meaningful heuristic measure of the extent to which v ∈ Γ fails to satisfy the
optimality condition. For example, if φ is a continuously Frechet-diﬀerentiable
functional deﬁned on a Hilbert space H, then an optimality condition is dφ
dv (v) =
0 ( dφ
dv meaning the Frechet derivative), and a meaningful associated optimality
function is θ(v) := −|| dφ

dv (v)||, where the indicated norm is in H.

Reference [1] devised a framework for analysis of algorithms in this abstract
setting, where convergence is deﬁned as follows: If an algorithm computes a
sequence vk, k = 1, 2, . . ., of points in Γ then

lim
k→∞ θ(vk) = 0.
In this abstract setting such a sequence {vk}∞
k=1 need not have an accumulation
point even if it is a bounded sequence in a metric space (unless it is isomor-
phic to a Euclidean space), and therefore a characterization of an algorithm’s
convergence in terms of such accumulation points could be vacuous. The use
of optimality functions via Equation (7) serves to resolve this conceptual issue.
Note that it is a form of weak convergence.

(7)

3Note that the integrand of (6) is the usual Hamiltonian H(x, u, p) := p(cid:62)f (x, u) + L(x, u),
while the term in the Left-hand Side of (6), namely H(x, µ, p), refers to the relaxed Hamilto-
nian. These two notations are distinguished by their second variable, u vs. µ, which suﬃces
to render the usage of the functional term H(x, ·, p) unambiguous in the sequel.

6

Consider an algorithm that computes from a given v ∈ Γ the next iteration
point, denoted by vnext, and suppose that its repetitive application computes a
k=1 ⊂ Γ, where vk+1 = vk,next. The algorithm
sequence of iteration points {vk}∞
is said to have the property of suﬃcient descent with respect to θ(·) if the
following two conditions hold: (i) φ(vnext) − φ(v) ≤ 0 for every v ∈ Γ, and (ii)
for every η > 0 there exists δ > 0 such that for every v ∈ Γ, if θ(v) < −η
then φ(vnext) − φ(v) < −δ. For such an algorithm, the following result is a
straightforward corollary of Theorem 1.2.8 in [1] and hence its proof is omitted.

Proposition 2.1. Suppose that |φ(v)| is bounded over Γ. If an algorithm is of
2
suﬃcient descent then it is convergent in the sense of (7).

Refs. [2, 3, 4, 5, 6, 7, 8, 9] used the framework of optimality functions and suﬃ-
cient descent to deﬁne and analyze their respective algorithms for the switched-
mode optimal control problem, where Γ is the space of admissible controls u,
and θ(u) typically is related to the magnitude of the steepest feasible descent-
direction vector. In contrast, the optimality function deﬁned in this paper is
based on the Hamiltonian rather than the steepest descent or any explicit form
of a derivative.
Consider the relaxed control problem deﬁned by Equations (3) and (4).
Given a relaxed control µ ∈ M, let x and p be the associated state trajec-
tory and costate trajectory as deﬁned by (3) and (5), respectively. We use the
following optimality function, θ(µ):4

(cid:90) tf

0

(cid:0)H(x, ν, p) − H(x, µ, p)(cid:1)dt,

θ(µ) = min
ν∈M

(8)

(9)

where the Hamiltonians in the integrand of (8) were deﬁned in (6). Recall that
x and p in (8) are associated with µ and hence are independent of ν; therefore,
the compactness of the space of relaxed controls implies that the minimum (not
only inf) in (8) exists. Let µ(cid:63) ∈ M denote an argmin, then (8) becomes

(cid:90) tf

(cid:0)H(x, µ(cid:63), p) − H(x, µ, p)(cid:1)dt.

θ(µ) =

0

We observe that this optimality function satisﬁes the aforementioned properties
with respect to the Maximum Principle: Obviously θ(µ) ≤ 0 for every µ ∈ M;
θ(µ) = 0 if and only if µ minimizes the Hamiltonian at almost every t ∈ [0, tf ]
and hence satisﬁes the Maximum Principle; and |θ(µ)| arguably indicates the
extent to which the Maximum Principle is not satisﬁed at µ.

3. Hamiltonian-based Algorithm

The analysis in this section is carried out under Assumption 1.1.

4In this and later equations we drop the explicit notational dependence of various integrand-

terms on t when no confusion arises.

7

Given a relaxed control µ ∈ M, let x and p denote the related state trajec-
tory and costate trajectory deﬁned by (3) and (5), respectively. For these state

and costate, and for every t ∈ [0, tf ], consider the Hamiltonian H(x(t),·, p(t)(cid:1),

deﬁned by (6), as a function of its second variable. Fix another relaxed control
ν ∈ M. Now for every λ ∈ [0, 1], λν + (1 − λ)µ is also a relaxed control, and
t ∈ [0, tf ]} denote the state
we denote it by µλ. Furthermore, let {xλ(t) :
trajectory associated with µλ as deﬁned by (3), namely,

and deﬁne ˜J(λ) := J(µλ), where J is deﬁned by (4), namely

(cid:90)
(cid:90)

U

U

(cid:90)
(cid:90)

U

U

f(cid:0)xλ(t), u(cid:1)dν(t)
f(cid:0)xλ(t), u(cid:1)dµ(t),
L(cid:0)xλ(t), u(cid:1)dν(t)
(cid:17)
L(cid:0)xλ(t), u(cid:1)dµ(t)

˙xλ(t ) = λ
+(1 − λ)

(cid:90) tf

(cid:16)

˜J(λ) =

λ

0

+ (1 − λ)

(10)

dt.

(11)

The algorithm described in this section is based on moving from µ ∈ M in
the direction of ν by choosing a step size λ ∈ [0, 1], and therefore, we next
characterize those ν ∈ M that provide a direction of descent.
Proposition 3.1. The one-sided derivative d ˜J
form,

dλ+ (0) exists and has the following

(cid:0)H(x, ν, p) − H(x, µ, p)(cid:1)dt,

(12)

(cid:90) tf

0

d ˜J
dλ+ (0) =

where all the terms in the integrand in the Right-Hand Side (RHS) of (12) are
functions of time.

Proof. Consider the Right-Hand Sides (RHS) of Equations (10) and (11) as
functions of x = xλ(t) and λ ∈ [0, 1], for given relaxed controls µ and ν. By
Assumption 1.1 these functions are twice-continuously diﬀerentiable (C 2) in x,
and by (10) and (11) they are linear in λ and hence C 2 as well. Therefore,
standard variational techniques show that the function ˜J(λ) is diﬀerentiable on
λ ∈ [0, 1] and its derivative has the following form,

pλ(t)(cid:62)(cid:90)
(cid:90) tf
(cid:16)
(cid:90)
L(cid:0)xλ(t), u(cid:1)(cid:0)dν(t) − dµ(t)(cid:1)(cid:17)

f(cid:0)xλ(t), u(cid:1)(cid:0)dν(t) − dµ(t)(cid:1)

U

0

d ˜J
dλ

(λ) =

+

dt,

(13)

U

where pλ(t) is the costate associated with this derivative. Furthermore, by (10),
it is seen that pλ is given by Equation (5) with µλ instead of µ.

8

Next, for λ = 0, we have that µ0 = µ, x0 = x, and p0 = p, and therefore,

with λ = 0 in (13) we obtain,

p(t)(cid:62)(cid:90)
(cid:90) tf
(cid:16)
(cid:90)
L(cid:0)x(t), u(cid:1)(cid:0)dν(t) − dµ(t)(cid:1)(cid:17)

f(cid:0)x(t), u(cid:1)(cid:0)dν(t) − dµ(t)(cid:1)

U

0

d ˜J
dλ+ (0) =

+

dt.

(14)

U

By Equation (6) the RHS of (14) is identical to the RHS of (12).

2
Equation (12) implies that ν is a descent direction from µ if the RHS of (12)
is negative. This is the case if ν(t) is a pointwise minimizer of the Hamiltonian
over M at each time t ∈ [0, tf ], unless H(x(t), ν(t), p(t)) = H(x(t), µ(t), p(t))
for almost every t ∈ [0, tf ]. In this case, let us use the notation µ = ν for a
pointwise minimizer of the Hamiltonian. The following result implies that the
pointwise search for such a minimizer can be conﬁned to U and need not be
extended to M , the space of Borel probability measures on U .
Proposition 3.2. Fix x ∈ Rn and p ∈ Rn. Let u(cid:63) ∈ argmin{(H(x, u, p) : u ∈
U}. Then, for every probability measure ν ∈ M ,

H(x, u(cid:63), p) ≤ H(x, ν, p).

(15)

Note that the Left-hand side (LHS) of (15) is the usual Hamiltonian while its
RHS is the relaxed Hamiltonian deﬁned by (6).
u ∈ U , we have, for every ν ∈ M ,

Proof. By (6) and the fact that u(cid:63) minimizes the ordinary Hamiltonian over

(cid:90)

(cid:90)

≥

H(x, ν, p) =

H(x, u, p)dν

U

H(x, u(cid:63), p)dν = H(x, u(cid:63), p).

(16)

U

2
We point out that the point u(cid:63) in the statement of Proposition 3.2 is the
pointwise minimizer of the Hamiltonian over U , for given x ∈ Rn and p ∈ Rn.
Such a minimizer exists and the minimum is ﬁnite since, by assumption the set
U is compact, and by Assumption 1.1 the function H(x, u, p) is continuous in
u ∈ U .

Let µ be a relaxed control, and let x and p be the associated state trajectory
and costate trajectory as deﬁned by Equations (3) and (5), respectively. For
every t ∈ [0, tf ], let u(cid:63)(t) ∈ argmin{H(x(t), u, p(t)) : u ∈ U}. It does not mean
that the function {u(cid:63)(t), t ∈ [0, tf ]}, is an admissible control since it might not
be Lebesgue measurable. On the other hand, we have seen that there exists a
relaxed control µ(cid:63) that minimizes the RHS of (8) over ν ∈ M, and hence µ(cid:63)(t)
on U ) for almost every t ∈ [0, tf ].

minimizes H(cid:0)x(t), ν, p(t)(cid:1) over ν ∈ M (the space of Borel probability measures

Ideally we would like to choose such µ(cid:63) as the descent direction of the
algorithm from µ, but its computation may be fraught with diﬃculties for the

9

following two reasons: (i) for a given t, µ(cid:63)(t) may not be a Dirac measure at
a point in U , and (ii) The pointwise minimizer µ(cid:63)(t) has to be computed for
every t in the inﬁnite set [0, tf ]. Therefore we choose as descent direction a
relaxed control ν ∈ M having the following two properties: (i) ν ∼ v where
v is a piecewise-constant ordinary control, and (ii) ν ∈ M “almost” minimizes
the Hamiltonian in the following sense: For a given a constant η ∈ (0, 1) which
we ﬁx throughout the algorithm (below),

(cid:90) tf

(cid:0)H(x, ν, p) − H(x, µ, p)(cid:1)dt ≤ ηθ(µ);

(17)

0

x, ν, p, and µ are all functions of time. We label such ν an η-minimizer of
the Hamiltonian. It will be seen that it is always possible to choose a relaxed
control ν with these two properties as long as θ(µ) < 0. With this direction
of descent, the algorithm uses the Armijo step size [12, 1]. It has the following
form.

Given constants α ∈ (0, 1), β ∈ (0, 1), and η ∈ (0, 1).

Algorithm 3.3. Given µ ∈ M, compute µnext ∈ M by the following steps.

Step 0: If θ(µ) = 0, set µnext = µ, then exit.

Step 1: Compute the state and costate trajectories, x and p, associated with µ,
by using Equations (3) and (5), respectively.
Step 2: Compute a relaxed control ν ∈ M which is an η-minimizer of the
Hamiltonian, namely it satisﬁes Equation (17).
Step 3: Compute the integer (cid:96)µ deﬁned as follows,

(cid:96)µ = min(cid:8)(cid:96) = 0, 1, . . . , :
J(µ + β(cid:96)(ν − µ)) − J(µ) ≤ αβ(cid:96)ηθ(µ)(cid:9).

Deﬁne λµ := β(cid:96)µ.
Step 4: Set

µnext = µ + λµ(ν − µ).

(18)

(19)

A few remarks are due.
1). The algorithm is meant to be run iteratively and compute a sequence

{µk}k≥1 such that µk+1 = µk,next, as long as it does not exit in Step 0.

2). The algorithm does not attempt to solve a two-point boundary value
problem. In Step 1 it ﬁrst integrates the diﬀerential equation (3) forward from
the initial condition x0, and then the diﬀerential equation (5) backwards from
the speciﬁed terminal condition p(tf ) = 0. We do not specify the particular
numerical integration technique that should be used, but say more about it in
the sequel.

3). We do not specify the choice of ν in Step 2 but rather leave it to the user’s
discretion. However, we point out that such an η-minimizer of the Hamiltonian
always exists in the form of ν ∼ v for a piecewise-constant ordinary control
v, unless θ(µ) = 0. The reason is that the space of ordinary controls is dense

in the space of relaxed controls in the weak star topology on L1(cid:0)[0, tf ]; C(U )(cid:1),

10

and the space of piecewise-constant ordinary controls is dense in the space of
ordinary controls in the L1 norm and hence in the weak-star topology.
measures, meaning that for every continuous function g : U → R,

4). In Step 4, µnext(t) is a convex combination of µ and ν in the sense of

(cid:90)

U

g(u)(cid:0)(1 − λµ)dµ(t) + λµdν(t)(cid:1).

g(u)dµnext(t) =

(cid:90)

U

(cid:90)

In the event that µ ∼ u and ν ∼ v, this means that

g(u)dµnext(t) = (1 − λµ)g(u(t)) + λµg(v(t)),

U

which does not necessarily imply that µnext

∼ u + λµ(v − u).

5). The Armijo step size, computed in Step 3, is commonly used in nonlin-
ear programming as well as in inﬁnite-dimensional optimization. Reference [1]
contains analyses of several algorithms using it and practical guidelines for its
implementation.

6). It will be proven that the integer (cid:96)µ deﬁned in Step 3 is ﬁnite as long
as θ(µ) < 0, hence the algorithm cannot jam at a point (relaxed control) that
does not satisfy the Maximum Principle, namely the condition θ(µ) = 0.

We point out that the idea of a descent direction comprised of a pointwise
minimizer of the Hamiltonian has its origin in [40]. The algorithm proposed in
that reference is deﬁned in the setting of ordinary controls, its descent direction
is all the way to a minimizer of the Hamiltonian at a subset of the time-horizon
[0, tf ], and its main convergence result is stated in terms of accumulation points
of computed iterate-sequences. The algorithm in this paper is quite diﬀerent
in that it is deﬁned in the setting of relaxed controls, it moves part of the way
towards a minimizer of the Hamiltonian throughout the entire time horizon,
and its analysis is carried out in the context of optimality functions.

We next establish convergence of Algorithm 3.3.

Proposition 3.4. Suppose that Assumption 1.1 is satisﬁed. Let {µk}∞
k=1 be
a sequence of relaxed controls computed by Algorithm 3.3, such that for every
k = 1, 2, . . ., µk+1 = µk,next. Then,

lim
k→∞ θ(µk) = 0.

(20)

The proof is based on the following lemma, variants of which have been proved
in [1] (e.g., Theorem 1.3.7). We supply the proof in order to complete the
presentation.
Lemma 3.5. Let g(λ) : R → R be a twice-continuously diﬀerentiable (C 2)
function. Suppose that g(cid:48)(0) ≤ 0, and there exists K > 0 such that |g(cid:48)(cid:48)(λ)| ≤ K
for every λ ∈ R. Fix α ∈ (0, 1), and deﬁne γ := 2(1 − α)/K. Then for every
positive λ ≤ γ|g(cid:48)(0)|,

g(λ) − g(0) ≤ αλg(cid:48)(0).

(21)

11

Proof. Recall (see [1], Eq. (18b), p.660) the following exact second-order ex-
pansion of C 2 functions,

g(λ) = g(0) + λg(cid:48)(0) + λ2

(1 − s)g(cid:48)(cid:48)(sλ)ds.
Using this and the assumption that |g(cid:48)(cid:48)(·)| ≤ K, we obtain that

0

(22)

(cid:90) 1

g(λ) − g(0) − αλg(cid:48)(0)

(cid:90) 1
= λ(cid:0)(1 − α)g(cid:48)(0) + λK/2(cid:1).

= (1 − α)λg(cid:48)(0) + λ2
≤ (1 − α)λg(cid:48)(0) + λ2K/2

0

(1 − s)g(cid:48)(cid:48)(sλ)ds

(23)
For every positive λ ≤ γ|g(cid:48)(0)|, (1 − α)g(cid:48)(0) + λK/2 ≤ 0, and hence, and by
2
(23), Equation (21) follows.
Proof of Proposition 3.4. Let µ ∈ M and ν ∈ M be any two relaxed controls,
and for λ ∈ [0, 1], consider ˜J(λ) as deﬁned by Equation (11). We next show that
˜J is a twice-continuously diﬀerentiable function of λ, and there exists K > 0
such that, for all µ ∈ M, ν ∈ M, and λ ∈ [0, 1],

(cid:12)(cid:12)(cid:12) d2 ˜J

dλ2 (λ)

(cid:12)(cid:12)(cid:12) ≤ K.

(24)

This follows from variational arguments developed and summarized in [1] as
follows. First, consider two ordinary controls, u and w, and deﬁne uλ :=
λw + (1− λ)u for every λ ∈ [0, 1]. Denote by xλ the state trajectory associated
with uλ as deﬁned by (1), and let ˜J(λ) := J(uλ) be the cost functional, deﬁned
by (2), as a function of λ. By Assumption 1.1, an application of Corollary 5.6.9
and Proposition 5.6.10 in [1] to variations in λ yields that ˜J(λ) is continuously
diﬀerentiable in λ, and the term | d ˜J
dλ (λ)| is bounded from above over all ordinary
admissible controls u, w, and λ ∈ [0, 1]. A second application of these arguments
to the derivative d ˜J
dλ , supported by the C 2 assumption (Assumption 1.1), yields
that ˜J(λ) is twice continuously diﬀerentiable and its second derivative also is
bounded from above over all ordinary admissible controls u, w, and λ ∈ [0, 1].
By the Lebesgue Dominated Convergence Theorem, the same result holds
true when u and w are replaced by two respective relaxed controls, µ and ν,
and the state equation and cost function are deﬁned by Equations (3) and (4),
respectively. This shows that ˜J is C 2 in λ, and there exists K > 0, independent
of µ ∈ M, ν ∈ M, and λ ∈ [0, 1], such that Equation (24) is satisﬁed.
Let us apply this result to µ and ν where µ ∈ M is a given relaxed control
and ν is deﬁned in Step 2 of Algorithm 3.3. Recall the constant α ∈ (0, 1) that
is used by the algorithm, and deﬁne γ := 2(1 − α)/K. By Lemma 3.5, for every
positive λ < γ| d ˜J

dλ+ (0)|,

˜J(λ) − ˜J(0) ≤ αλ

d ˜J
dλ+ (0).

12

(25)

Recall that ˜J(λ) := J(µλ), and therefore, according to the notation in the RHS
of (18), J(µ+β(cid:96)(µ(cid:63)−µ))−J(µ) = ˜J(β(cid:96))− ˜J(0); consequently, if β(cid:96) < γ| d ˜J
dλ+ (0)|,
then (25) is satisﬁed with λ = β(cid:96), namely,

J(µ + β(cid:96)(µ(cid:63) − µ)) − J(µ) ≤ αβ(cid:96) d ˜J

dλ+ (0).

(26)

By Proposition 3.1 (Equation (12)) and the choice of ν in Step 2 (Equation
(17)), the RHS of (26) implies that

J(µ + β(cid:96)(µ(cid:63) − µ)) − J(µ) ≤ αβ(cid:96)ηθ(µ)
dλ+ (0)|. But (12), (17), and the fact that d ˜J

(27)

dλ+ (0) ≤ 0 imply
as long as β(cid:96) < γ| d ˜J
dλ+ (0)| ≥ ηγ|θ(µ)|; consequently (27) is
that | d ˜J
satisﬁed as long as β(cid:96) < ηγ|θ(µ)|. Therefore, and by Equation (18), the step
size λµ deﬁned in Step 3 satisﬁes the inequality

dλ+ (0)| ≥ η|θ(µ)| and hence γ| d ˜J

λµ := β(cid:96)µ ≥ βηγ|θ(µ)|.

Next, Equations (18) and (19) imply that

J(µnext) − J(µ) ≤ αλµηθ(µ),

and hence, and by (28) and the fact that θ(µ) ≤ 0, we have that

J(µnext) − J(µ) ≤ −αβγη2θ(µ)2.

(28)

(29)

(30)

But γ is independent of µ or ν, and hence Equation (30) implies that the
algorithm is of a suﬃcient descent.
Finally, the set U is compact by assumption, and therefore standard appli-
cations of the Bellman-Gronwall inequality and Equation (4) yield that |J(µ)|
is upper-bounded over all µ ∈ M. Consequently Proposition 2.1 implies the
2
validity of Equation (20).
A note on implementation. Implementations of Algorithm 3.3 generally re-
quire numerical integration methods for computing (or approximating) x and
p in Step 1, and a computation of ν in Step 2 that is based on the pointwise
minimization of the Hamiltonian at a ﬁnite number of points in the time-horizon
[0, tf ]. Both require ﬁnite grids on the time horizon, which may be diﬀerent and
can vary from one iteration to the next. The choice of the grid sizes generally
comprises a balance between precision and computing times. A rule-of-thumb
proposed in [1] is to adjust the grid adaptively by tightening it whenever it
is sensed that a local optimum is approached. This adaptive-precision tech-
nique underscores Polak’s algorithmic framework of consistent approximation for
inﬁnite-dimensional optimization while guaranteeing convergence in the sense of
Eq. (20).

In this paper we are not concerned with the formal rules for adjusting the
grids (and hence precision levels). Instead, we run the algorithm several times

13

per problem, each with a ﬁxed grid, to see how far it can minimize the cost
functional. The goal of this experiment is to test the tradeoﬀ between precision
and computing times. The results, presented in the next section, indicate rapid
descent from the initial guess regardless of how far it is from the optimum. In
fact, the key argument in the proof of convergence is the suﬃcient descent prop-
erty of the algorithm, captured in Equation (30), which implies large descents
until an iteration-sequence approaches a local minimum. This suggests that
the main utility of the algorithm is not in the asymptotic convergence close to
a minimum (where higher-order methods can be advantageous), but rather in
its approach to such points. For a detailed discussion of this point and some
comparative results please see Section 4.

Another point related to implementation concerns the algorithm’s having to
compute relaxed controls, which are more complicated objects than ordinary
controls. To address this concern we next examine a class of systems where the
state equation f (x, u) is aﬃne in u and the cost function L(x, u) is convex in u.

Consider the case where

(cid:16)

f (x, u) = φf (x) + Ψf (x)u,

(31)
where the functions φf : Rn → Rn and Ψf : Rn → Rn×k (the latter being
the space of n × k matrices) satisfy Assumption 1.1. By the linearity of the
integration operator and the fact that µ(t) is a probability measure, Equation
(3) assumes the form

(cid:90)
ﬁcation of the control. Deﬁning ¯u(t) :=(cid:82)
(cid:90) tf

meaning that, for the purpose of computing the state trajectory, the convexi-
ﬁcation of the vector ﬁeld inherent in (3) yields the same results as a convexi-
U udµ(t), the state equation becomes
˙x = f (x, ¯u), and we can view ¯u as a control function from [0, tf ] into conv(U ).
Likewise, if L(x, u) = φL(x) + ψL(x)u with φL : Rn → R and ψL : Rn → R1×k,
then (4) becomes

,

(32)

˙x(t) = f

x(t),

udµ(t)

(cid:17)

U

J(µ) =

L(x, ¯u)dt.

0

In this case the relaxed optimal control problem is cast as an ordinary optimal
control problem with the input constraints ¯u(t) ∈ conv(U ). Moreover, if Algo-
rithm 3.3 starts at an ordinary control on conv(U ) then it could compute only
such ordinary controls. The reason is that ν in Step 2 can always be an ordinary
control (as earlier said), and the convexiﬁcation of measures in Eq. (19) can
be carried out by the convexiﬁcation of ordinary controls. Therefore, if in Eq.
(19), µ ∼ u and ν ∼ v for ordinary admissible controls (on conv(U )), then (19)
yields

µnext

∼ u + λµ(v − u),

which is an ordinary admissible control on conv(U ). This is the case of au-
tonomous switched-mode systems, as will be demonstrated in Section 4.

14

(33)

(34)

Consider next the case where f (x, u) is aﬃne in u as in Equation (31), and
L(x, u) is convex in u for every x ∈ Rn. Then Equation (32) is true but (33)
and hence (34) are not true. Therefore, supposing that µ ∼ u and ν ∼ v for
ordinary controls (on conv(U )), Equation (19) yields that µnext is a relaxed
control but not an ordinary control on conv(U ). However, the convexity of
L(x, u) in u in conjunction with (32) imply that, for every λ ∈ [0, 1]

J(cid:0)u + λ(v − u)(cid:1) ≤ J(u) + λµ

= J(µ) + λµ

(cid:0)J(v) − J(u)(cid:1)
(cid:0)J(ν) − J(µ)(cid:1).

In this setting, Algorithm 3.3 uses the convexiﬁed cost in Step 3 (Eq. (18)), but
by (35), we would get a lower value by convexifying the control. Consequently,
the inequality in (18) would imply a similar an inequality with the convexi-
ﬁed control, as in Eq. (36), below. Modifying Algorithm 3.3 accordingly, the
following algorithm results.

Given constants α ∈ (0, 1), β ∈ (0, 1), and η ∈ (0, 1).

Algorithm 3.6. Given µ ∼ u such that u is an admissible control on conv(U ),
compute µnext ∈ M by the following steps.

Step 0: If θ(µ) = 0, set µnext = µ, then exit.

Step 1: Compute the state and costate trajectories, x and p, associated with µ,
by using Equations (3) and (5), respectively.
Step 2: Compute an η-minimizer of the Hamiltonian, ν ∼ v, such that v is an
ordinary control on conv(U ).
Step 3: Compute the integer (cid:96)µ deﬁned as follows,

(cid:96)µ = min(cid:8)(cid:96) = 0, 1, . . . , :
J(u + β(cid:96)(v − u)) − J(u) ≤ αβ(cid:96)ηθ(µ)(cid:9).

(35)

(36)

(37)

Deﬁne λµ := β(cid:96)µ.
Step 4: Set

µnext

∼ u + λµ(v − u).

Note that, by (34) and (37), an iterative application of Algorithm 3.6 would
compute only ordinary controls that are admissible on conv(U ). Furthermore,
as discussed earlier, by Equation (35), if the Armijo test in Equation (18) were
to be satisﬁed for a given (cid:96) then it would be satisﬁed in (36) as well and result
in a lower descent in J(µnext) − J(µ). Since this descent in (18) yields the key
condition of uniform descent for Algorithm 3.3, it also holds for Algorithm 3.6
thereby guaranteeing its convergence via a verbatim application of Proposition
3.4.

4. Simulation Results

This section reports on applications of Algorithm 3.3 and Algorithm 3.6 to
three problems: an autonomous switched-mode problem, a controlled switched-
mode problem, and a problem of balancing motion energy with transmission

15

energy in a mobile network.5 In the ﬁrst problem the state equation and the
cost function are aﬃne in u and hence Algorithm 3.3 is identical to Algorithm
3.6; in the second problem the cost function is not aﬃne in u and hence we use
Algorithm 3.6; and in the third problem the state equation is aﬃne in u and the
cost function in convex in u and hence we can use Algorithm 3.6. The ﬁrst two
problems were considered in [7], and we use its reported results as benchmarks
for our algorithms. The third problem was addressed in [41], but we choose here
an initial guess that is farther from the optimum. As stated earlier the eﬃciency
of the algorithm depends on the ease with which the pointwise minimizer of the
Hamiltonian can be computed, and for all three problems it will be shown to be
computable via a simple formula. Since the resulting function u(cid:63) is an ordinary
control, we use ν ∼ u in Step 2.

4.1. Double Tank System

Consider a ﬂuid-storage tank with a constant horizontal cross section, where
ﬂuid enters from the top and discharged through a hole at the bottom. Let
v(t) denote the ﬂuid inﬂow rate from the top, and let x(t) be the ﬂuid level
in the tank. According to Toricelli’s law, the state equation of the system is

˙x(t) = v(t) −(cid:112)x(t). The system considered in this subsection is comprised

of two such tanks, one on top of the other, where the ﬂuid input to the upper
tank is from a valve-controlled hose at the top, and the input to the lower
tank consists of the outﬂow process from the upper tank. Denoting by u(t) the
inﬂow rate to the upper tank, and by x(t) := (x1(t), x2(t))(cid:62) the ﬂuid levels in
the upper tank and lower tank, respectively, the state equation of the system is

(cid:18) u − √
x1 − √

√

x1

x2

(cid:19)

˙x =

;

(38)

we assume the initial condition x(0) = (2.0, 2.0)(cid:62). The control input u(t) is
assumed to be constrained to the two-point set U := {1.0, 2.0}, and hence the
system can be viewed as an autonomous switched-mode system whose modes
correspond to the two possible values of u. The considered problem is to have
the ﬂuid level at the lower tank track the value of 3.0, and accordingly we choose
the cost functional J to be

(cid:90) tf

J = 2

(x2 − 3)2 dt.

(39)

As in [7], the ﬁnal time is tf = 10.0.

0

By (38), f (x, u) is aﬃne in u, and by (39), L(x, u) does not depend on u
and hence can be considered aﬃne. Therefore Algorithm 3.6 can be run as
a special case of Algorithm 3.3, where conv(U ) = [1, 2]. Moreover, with the
costate p := (p1, p2)(cid:62) ∈ R2, the Hamiltonian has the form

√

x1 − √

x2) + 2(x2 − 3)2,

H(x, u, p) = p1u − p1

x1 + p2(

√

5The code was written in MATLAB and executed on a laptop computer with an Intel i7

quad-core processor, clock frequency of 2.1 GHz, and 8GB of RAM.

16

Figure 1: Two-tank system: J(µk) vs. k = 1, . . . , 100; ∆t = 0.01

whose pointwise minimizer is

u(cid:63) =

.

(cid:26) 1,

2,

if p1 ≥ 0,
if p1 < 0;

if p1 = 0 then u(cid:63) can be any point in the interval [1, 2].

We ran Algorithm 3.6 starting from the initial control u1(t) = 1 ∀t ∈ [0, tf ],
having the cost J(u1) = 50.5457. All numerical integrations were performed
by the forward Euler method with ∆t = 0.01, and we approximate u(cid:63) by its
zero-order hold with the sample values u(cid:63)(i∆t), i = 0, 1, . . . ,. We benchmark
the results against the reported run of the algorithm in [7] which, starting
from the same initial control, obtained the ﬁnal cost of 4.829; we reached a
similar ﬁnal cost. In fact, 100 iterations of our algorithm reduced the cost from
J(µ1) = 50.5457 to J(µ100) = 4.7440 in 2.6700 seconds of CPU time.

Figure 1 depicts the graph of J(µk) vs. the iteration count k = 1, . . . , 100.
The graph indicates a rapid reduction in the cost from its initial value until
it stabilizes after about 18 iterations. The L-shaped graph is not atypical in
applications of descent algorithms with Armijo step sizes, whose strength lies in
its global stability and large strides towards local solution points at the initial
stages of its runs. As a matter of fact, similar L shaped graphs were obtained
from all of the algorithm runs reported on in this section.

The ﬁnal relaxed control computed by Algorithm 3.6, µ100 :=∼ u100, was
projected onto the space of admissible (switched-mode) controls by Pulse-Width
Modulation (PWM) with cycle time of 0.5 seconds. The resulting cost value is
J(uﬁn) = 4.7446, and the combined runs of the algorithm and the projection
took 2.6825 seconds of CPU time. We point out that the projection had to be
performed only once, after Algorithm 3.6 had completed its run.

17

0204060801001200102030405060Iteration countCostReturning to the run of Algorithm 3.6, the L-shaped graph in Figure 1
suggests that a reduction in CPU times can be attained, if necessary, by com-
puting fewer iterations. Moreover, further reduction can be obtained by tak-
ing larger integration steps without signiﬁcant changes in the ﬁnal cost. To
test this point we ran the algorithm from the same initial control for 50 iter-
ations with ∆t = 0.05, and it reduced the cost-value from J(µ1) = 50.5282
to J(µ50) = 4.8078 in 0.2939 seconds of CPU time; including the projection
onto the space of switched-mode controls it reached J(uﬁn) = 4.8139 in a total
time of 0.3043 seconds. With a larger integration step, ∆t = 0.1, the algorithm
yielded a cost-reduction from J(µ1) = 50.5069 to J(µ50) = 4.8816 in 0.1566
seconds of CPU time, and J(uﬁn) = 4.8915 in a total time of 0.1655 seconds.
These results are summarized in Table 1.

∆t; k

0.01; 100
0.05; 50
0.1; 50

J(µk)
4.7440
4.8078
4.8816

CPU
2.6700
0.2939
0.1566

J(uﬁn)
4.7446
4.8139
4.8915

CPU
2.6825
0.3043
0.1655

Table 1: Double-tank problem, J(µ1) = 50.546

The CPU times indicated in Table 1 are less than the run-time reported
in [7] for solving the same problem (32.38 seconds). However, these numbers
should not be considered as a sole basis for comparing the two techniques since
the respective algorithms were implemented on diﬀerent hardware and software
platforms.6 Furthermore, the algorithm in [7] has a broader scope than ours,
while our code is speciﬁc for the problem in question. The only conclusion we
draw from Table 1 is that Algorithm 3.6 may have merit and deserves further
investigation. We believe, however, that our choice of the descent direction,
namely the pointwise minimizer of the Hamiltonian, plays a role in the fast
run times as well as simplicity of the code as compared with explicit-gradient
techniques.

We close this discussion with a comment on convergence of the algorithm
in the control space. Algorithm 3.6 (as well as Algorithm 3.3) is deﬁned in the
space of relaxed controls where its convergence is established in the weak star
topology. Therefore, there is no reason to expect the sequence of computed
controls, {uk}, to converge in any (strong) functional norm such as L1. In fact,
the graphs of uk(t) for k = 1, 20, 100, are depicted in Figure 2, where no strong
convergence is discerned. However, the weak convergence proved in Section 3
suggests that the cost-sequence {J(uk)} would converge to the minimal cost,
and this indeed is evident from Figure 1. Furthermore, the associated sequence

6Ref. [7] refers to a software package for its algorithm, but we were unable to run it because
apparently it is linked to a proprietary code. Therefore we were unable to conduct a direct
comparison between the two algorithms.

18

Figure 2: Two-tank system: graph of u1(t) (dashed), u20(t) (dash-dotted), and u100(t) (solid)

of state trajectories are expected to converge in a strong sense (L∞ norm) to the
state trajectory of the optimal control, and this is indicated by Figure 3 depicting
the graphs of xk,2(t) (the ﬂuid levels at the lower tank) for k = 1, 20, 100.

4.2. Hybrid LQR

This problem was considered in [7] as well. Consider the switched-linear

system ˙x = Ax + bv, where x ∈ R3,

 1.0979 −0.0105

−0.0105
0.0167

1.0481
0.0825

A =

 ,

0.0167
0.0825
1.1540

b ∈ R3 is constrained to a ﬁnite set B ⊂ R3, and v ∈ R is a continuum-valued
input. We assume the initial condition to be x0 := x(0) = (0, 0, 0)(cid:62). The set B
consists of three points, namely B = {b1, b2, b3}, with b1 = (0.9801,−0.1987, 0)(cid:62),
b2 = (0.1743, 0.8601,−0.4794)(cid:62), and b3 = (0.0952, 0.4699, 0.8776)(cid:62). The continuum-
valued control v is constrained to |v| ≤ 20.0.
All three modes of the system are unstable since the eigenvalues of A are
in the right-half plane, and the problem is to switch among the vectors b ∈ B
and choose {v(t)} in a way that brings the state close to the target state xf :=
(1, 1, 1)(cid:62) in a given amount of time and in a way that minimizes the input
energy. The corresponding cost functional is

(cid:90) tf

J = 0.01

v2 dt + (cid:107)x(tf ) − xf(cid:107)2

(40)

with tf = 2.0, and the control variable is u = (b, v) ∈ B × [−20, 20]. Ref-
erence [7] solved this problem from the initial control of v1(t) = 0 and b =

0

19

024681011.21.41.61.82timeµFigure 3: Two-tank system: graph of x2,1(t) (dashed), x2,20(t) (dash-dotted), and x2,100(t)
(solid)

(0.9801,−0.1987, 0)(cid:62) for all t ∈ [t0, tf ], and attained the ﬁnal cost of 1.23· 10−3
in (reported) 9.827 seconds of CPU time.

2(cid:0)x(tf ) − (1, 1, 1)(cid:62)(cid:1) due to the cost on the ﬁnal state.7 The Hamiltonian at a

Since f (x, u) is not aﬃne in u (due to the term bv) Algorithm 3.6 may not be
applicable and hence we used Algorithm 3.3. We chose the same initial guess u1
as in [7] and ran the algorithm for 20 iterations. The results indicate a similar
L-shaped graph of J(µk) to the one shown in Figure 1, and attained a cost-
value reduction from J(u1) = 3.000 to J(µ20) = 2.768 · 10−3 in 0.761 seconds
of CPU time. All integrations were performed by the forward Euler method
with ∆t = 0.01, and the boundary condition of Equation (5) was p(tf ) =
control u = (b, v) has the form H(x, u, p) = p(cid:62)(Ax + bv) + 0.01v2, and hence
its minimizer over U , u(cid:63) = (b(cid:63), v(cid:63)), is computable as follows: For every bi ∈
B, i = 1, 2, 3, deﬁne vi according to the following three contingencies: (i) if
|p(cid:62)bi/0.02| ≤ 20, then vi = −p(cid:62)bi/0.02; (ii) if p(cid:62)bi/0.02 > 20, then vi =
−20; and (iii) if p(cid:62)bi/0.02 < −20, then vi = 20. It is readily seen that u(cid:63) =

argmin(cid:0)H(x, (bi, vi), p) : i = 1, 2, 3(cid:1) is a minimizer of the Hamiltonian.8
A typical relaxed control can be represented as µ(t) ∼ (cid:80)3
with αi(t) ∈ [0, 1], i = 1, 2, 3; (cid:80)3

i=1 αi(t)bivi(t),
i=1 αi(t) = 1; and |vi(t)| ≤ 20.0, i = 1, 2, 3
It can be seen, after some

(this is an embedded control as deﬁned in [18]).

7The cost functional in (40) is not quite in the form of (2) due to the addition of the
ﬁnal-state cost term φ(x(tf )) := ||x(tf ) − xf||2. However, using the standard transformation
of a Bolza optimal control problem (as in (40)) to a Lagrange problem (as in (2)) and applying
the algorithm to the latter, requires only one change, namely setting the boundary condition
of the costate to p(tf ) = ∇φ(xf ); all else remains the same.

8By Proposition 3.2, a pointwise minimizer of the Hamiltonian always can be found in U

and does not have to be in M .

20

024681011.522.533.54timex2i=1 γi(t)¯bi(t)(cid:1)w(t), with

algebra, that this can be represented as µ(t) ∼ (cid:0)(cid:80)3
γi(t) ∈ [0, 1], i = 1, 2, 3; (cid:80)3

i=1 γi(t) = 1; ¯bi(t) ∈ {bi,−bi}, i = 1, 2, 3; and
|w(t)| ≤ 20.0. Deﬁne ¯wi(t) as ¯wi(t) = w if bi(t) = bi, and ¯wi(t) = −w if bi(t) =
−bi. The projection µ(t) onto the space of ordinary controls was done by PWM
as described in the previous subsection, with u having the successive values
(b1, ¯w1(t)), (b2, ¯w2(t)), (b3, ¯w3(t)) in each cycle according to the coeﬃcients
γi(t), i = 1, 2, 3. The cycle time was 12∆t. Twenty iterations of Algorithm
3.3 followed by the projection of µ20 onto the space of switched-mode controls
required a total CPU time of 0.803 seconds and yielded a ﬁnal cost of J(uﬁn) =
2.956 · 10−3; the results are summarized in Table 2.

∆t; k
0.01; 20

J(µk)

2.768 · 10−3

CPU
0.761

J(uﬁn)

2.956 · 10−3

CPU
0.803

Table 2: Hybrid-LQR problem, J(µ1) = 3.00

Now consider the problem of minimizing the cost functional 0.01(cid:82) tf

0 v2dt
subject to the constraint x(tf ) = xf := (1.0, 1.0, 1.0)(cid:62). The deﬁnition of J in
Eq. (40) appears to address this problem with the penalty function ||x(tf ) −
xf||2. As a matter of fact, the ﬁnal state x(tf ) obtained form the run of the
algorithm is x(tf ) = (0.9994, 0.9991, 0.9998)(cid:62), and after projecting the relaxed
control u20 onto the space of ordinary controls, the corresponding ﬁnal state is
(0.9965, 1.0020, 0.9875)(cid:62).

While Algorithm 3.3 could be applied to the current problem, its scope does
not include some embedded optimal control problems, comprising a class or
relaxed-control problems deﬁned in [18]. However, we believe that a possible
extension of Algorithm 3.6 can close this gap, and is currently under investiga-
tion.

4.3. Balancing Mobility with Transmission Energy in Mobile Sensor Networks

In Reference [41] we considered a path-planning problem for mobile communication-

relay networks, whose objective is to optimize a weighted sum of transmission
energy and fuel consumption. We used there Algorithm 3.6 to solve it. Next
we present simulation results for the same problem, but with a diﬀerent initial
control, u1, chosen farther from the optimum in order to highlight the drastic
cost-reduction of the algorithm’s run at its initial phases.

Consider a scenario where a given number (N ) of mobile sensors (agents)
are placed in a terrain, and at time t = 0 they are tasked with forming a point-
to-point relay network for communications between a stationary object and a
stationary controller. Upon issuance of the command the agents start moving
while transmitting. Given the ﬁnal time tf , the problem is to compute the
agents’ paths in a way that minimizes a weighted sum of their fuel consumption
and transmission energy over the time-interval t ∈ [0, tf ]. Of course the optimal
paths depend on the positions of the object and controller, as well as on the
initial positions of the agents.

21

(cid:90) tf

N +1(cid:88)

J =

(cid:90) tf

N(cid:88)

A detailed description of the problem and justiﬁcation of the assumptions
made can be found in [41]. As in [41], we assume that the agents’ positions xi,
i = 1, . . . , N , are conﬁned to a line-segment [0, d] for a given d > 0. Denote
by x = (x1, . . . , xN )(cid:62) ∈ RN the vector of the agents’ positions, and by u :=
(u1, . . . , uN )(cid:62) ∈ RN , the vector of their corresponding velocities. Viewing x as
the state of the system and u as its control input, the state equation is

˙x = u.

(41)

The power required to transmit a signal over a z-long channel can be considered
as proportional to z2 (see [41]), and the fuel rate required to move an agent is
proportional to the speed of motion. Consequently, and deﬁning x0 := 0 and
xN +1 := d, the considered cost-performance functional is

(xi − xi−1)2dt + C

|ui|dt

(42)

i=1

0

i=1

0

for a given C > 0. The optimal control problem is to minimize J for a given
initial condition x(0), subject to the pointwise input constraints |ui| ≤ ¯u for a
given ¯u > 0.
By Equations (41)-(42) it can be seen that the costate p := (p1, . . . , pN )(cid:62) is

deﬁned by the equation

˙pi = 2(xi−1 + xi+1 − 2xi),

(43)

i = 1, . . . , N , with the boundary condition pi(tf ) = 0. Therefore, given a control
u ∈ RN and its associated state x ∈ RN and costate p = (p1, . . . , pN )(cid:62) ∈ RN ,
i=1 piui + J with J deﬁned in (42),

the Hamiltonian has the form H(x, u, p) =(cid:80)N
(cid:26) −sgn(pi)¯u,

and its minimizer, u(cid:63) = (u(cid:63)

1, . . . , u(cid:63)

N )(cid:62), is computable as follows,

(44)

u(cid:63)
i =

0,

if |pi| > C
if |pi| ≤ C

(e.g., [41]).

In our simulation experiments we considered an example with N = 6 (six
agents), d = 20 (hence the agents move in the interval [0, 20]), tf = 20, C =
7, ¯u = 1, and the initial state is x(0) = (1, 2, 7, 9, 12, 19)(cid:62). The numerical
integrations were performed by the forward Euler method with the step size
∆t = 0.01. The algorithm started with the following initial control, u1 :=
(u1,1, . . . , u1,6)(cid:62): u1(t) = 1.0; u2(t) = sin(πt/4); u3(t) = 3u2(t); u4(t) = 2u3(t);
u5(t) = 2u4(t); and u6(t) = u5(t)−4.3, with the initial cost of J(u1) = 81, 883.4.
A 200-iteration run took 11.3647 seconds of CPU time and yielded the ﬁnal
cost of J(u200) = 1, 253.4 (extensive simulations in [41] suggested that this is
about the global minimum). The graph of J(uk) vs. k has a similar L shape
to Figure 1, and it took only 4 iterations (9 iterations, resp.) to achieve 98%
(99%, resp.) of the total cost reduction to J(u5) = 2, 701.6 (J(u10) = 2, 037.6,
resp). To reduce the CPU times we can take fewer iterations. For example, 20

22

iterations take 0.8653 seconds of CPU times to obtain J(u20) = 1, 455.5, and
100 iterations took 5.2379 seconds to yield J(u100) = 1, 256.7. Further speedup
can be achieved by increasing the integration step size: with ∆t = 0.1, 100 iter-
ations took 0.5645 seconds of CPU time to obtain J(u100) = 1, 260.4. Note that
this is quite close to the aforementioned apparent minimum of 1,253.4. These
results are summarized in Table 3.

∆t
0.01
0.01
0.01
0.1

k
200
100
20
100

J(µk)
1,253.4
1,256.7
1,455.5
1,260.4

CPU

11.3647
5.2379
0.8653
0.5645

Table 3: Path planning for power-aware mobile networks, J(u1) = 81, 883.4

5. Conclusions

This paper presents an iterative algorithm for solving a class of optimal con-
trol problems. The algorithm operates in the space of relaxed controls and the
obtained result is projected onto the space of ordinary controls. The computa-
tion of the descent direction is based on pointwise minimization of the Hamil-
tonian at each iteration instead of explicit gradient calculations. Simulation
examples indicate fast convergence for a number of test problems.

References

[1] E. Polak. Optimization Algorithms and Consistent Approximations.

Springer-Verlag, New York, New York, 1997.

[2] T. Caldwell and T. Murphy. An Adjoint Method for Second-Order Switch-
ing Time Optimization. Proc. 49th CDC, Atlanta, Georgia, December 15-
17, 2010.

[3] T. Caldwell and T. D. Murphey. Switching mode generation and optimal
estimation with application to skid-steering, Automatica, vol. 47, no. 1, pp.
5064, 2011.

[4] T. Caldwell and T. D. Murphey. Single integration optimization of linear
time-varying switched systems. IEEE Transactions on Automatic Control,
vol. 57, no. 6, pp. 15921597, 2012.

[5] T. Caldwell and T. Murphey. Projection-Based Iterative Mode Schedul-
ing for Switched Systems, Nonlinear Analysis: Hybrid Systems, to appear,
2016.

23

[6] H. Gonzalez, R. Vasudevan, M. Kamgarpour, S.S. Sastry, R. Bajcsy, and C.
Tomlin. A Numerical Method for the Optimal Control of Switched Systems.
Proc. 49th CDC, Atlanta, Georgia, pp. 7519-7526, December 15-17, 2010.

[7] R. Vasudevan, H. Gonzalez, R. Bajcsy, and S.S. Sastry. Consistent Approx-
imations for the Optimal Control of Constrained Switched Systems - Part
1: A Conceptual Algorithm, and Part 2: An Implementable Algorithm.
SIAM Journal on Control and Optimization, Vol. 51, pp. 4663-4483 (Part
1) and pp. 4484-4503 (Part 2), 2013.

[8] M. Egerstedt, Y. Wardi, and H. Axelsson. Transition-Time Optimization
for Switched Systems. IEEE Transactions on Automatic Control, Vol. AC-
51, No. 1, pp. 110-115, 2006.

[9] H. Axelsson, Y. Wardi, M. Egerstedt, and E. Verriest. A Gradient De-
scent Approach to Optimal Mode Scheduling in Hybrid Dynamical Sys-
tems. Journal of Optimization Theory and Applications, Vol. 136, pp. 167-
186, 2008.

[10] E.J. McShane. Ralexed Controls and Variational Problems. SIAM Journal

on Control, Vol. 5, pp. 438-485, 1967.

[11] J. Warga, Optimal Control of Diﬀerential and Functional Equations, Aca-

demic Press, 1972.

[12] L. Armijo. Minimization of Functions Having Lipschitz Continuous First-
Partial Derivatives. Paciﬁc Journal of Mathematics, Vol. 16, pp. 1-3, 1966.

[13] M.S. Branicky, V.S. Borkar, and S.K. Mitter. A Uniﬁed Framework for
Hybrid Control: Model and Optimal Control Theory. IEEE Transactions
on Automatic Control, Vol. 43, pp. 31-45, 1998.

[14] B. Piccoli. Hybrid Systems and Optimal Control. Proc. IEEE Conference

on Decision and Control, Tampa, Florida, pp. 13-18, 1998.

[15] H.J. Sussmann. A Maximum Principle for Hybrid Optimal Control Prob-
lems. Proceedings of the 38th IEEE Conference on Decision and Control,
pp. 425-430, Phoenix, AZ, Dec. 1999.

[16] M.S. Shaikh and P. Caines. On Trajectory Optimization for Hybrid Sys-
tems: Theory and Algorithms for Fixed Schedules. IEEE Conference on
Decision and Control, Las Vegas, NV, Dec. 2002.

[17] M. Garavello and B. Piccoli. Hybrid Necessary Principle. SIAM J. Control

and Optimization, Vol. 43, pp. 1867-1887, 2005.

[18] S.C. Bengea and R. A. DeCarlo. Optimal control of switching systems.

Automatica, Vol. 41, pp. 11-27, 2005.

24

[19] M.S. Shaikh and P.E. Caines. On the Hybrid Optimal Control Problem:
Theory and Algorithms. IEEE Trans. Automatic Control, Vol. 52, pp. 1587-
1603, 2007.

[20] F. Taringoo and P.E. Caines. On the optimal control of hybrid systems on
Lie groups and the exponential gradient HMP algorithm. In Proc. 52nd
IEEE Conf. on Decision and Control, Florence, Italy, December 10-13,
2013.

[21] F. Taringoo and P.E. Caines. On the Optimal Control of Impulsive Hybrid
Systems on Riemannian Manifolds. SIAM Journal on Control and Opti-
mization, Vol. 51, Issue 4, pp. 3127 - 3153, 2013.

[22] X. Xu and P. Antsaklis. Optimal Control of Switched Autonomous Systems.

IEEE Conference on Decision and Control, Las Vegas, NV, Dec. 2002.

[23] X. Xu and P.J. Antsaklis. Optimal Control of Switched Systems via Non-
linear Optimization Based on Direct Diﬀerentiations of Value Functions.
International Journal of Control, Vol. 75, pp. 1406-1426, 2002.

[24] T. M. Caldwell and T. D. Murphey. Projection-based Switched System Op-
timization. Proc. American Control Conference, Montreal, Canada, June
2012.

[25] T. M. Caldwell and T. D. Murphey. Projection-Based Switched System
Optimization: Absolute Continuity of the Line Search. Proc. 51st CDC,
Maui, Hawaii, December 10-13, 3012.

[26] M.S. Shaikh and P.E. Caines. On the Optimal Control of Hybrid Systems:
Optimization of Trajectories, Switching Times and Location Schedules. In
Proceedings of the 6th International Workshop on Hybrid Systems: Com-
putation and Control, pp. 466-481, Prague, The Czech Republic, 2003.

[27] P. Caines and M.S. Shaikh. Optimality Zone Algorithms for Hybrid Systems
Computation and Control: Exponential to Linear Complexity. Proc. 13th
Mediterranean Conference on Control and Automation, Limassol, Cyprus,
pp. 1292-1297, June 27-29, 2005.

[28] M.S. Shaikh and P.E. Caines. Optimality Zone Algorithms for Hybrid Sys-
tems Computation and Control: From Exponential to Linear Complexity.
Proc. IEEE Conference on Decision and Control/European Control Con-
ference, pp. 1403-1408, Seville, Spain, December 2005.

[29] S. Hedlund and A. Rantzer. Optimal control for hybrid systems. Proc. 38th

CDC, Phoenix, Arizona, December 7-10, 1999.

[30] S.A. Attia, M. Alamir, and C. Canudas de Wit. Sub Optimal Control of
Switched Nonlinear Systems Under Location and Switching Constraints.
Proc. 16th IFAC World Congress, Prague, the Czech Republic, July 3-8,
2005.

25

[31] X. Ge, W. Kohn, A. Nerode, and J.B. Remmel. Hybrid systems: Chattering
approximation to relaxed controls. Hybrid Systems III: Lecture Notes in
Computer Science, R. Alur, T. Henzinger, E. Sontag, eds., Springer Verlag,
Vol. 1066, pp. 76-100, 1996.

[32] R.T. Meyer, M. Zefran, and R.A. Decarlo. Comparison of the Embedding
Method to Multi-Parametric Programming, Mixed-Integer Programming,
Gradient Descent, and Hybrid Minimum Principle Based Methods. IEEE
Transactions on Control Systems Technology, Vol. 22, no. 5, pp. 1784-1800,
2014.

[33] F. Zhu and P.J. Antsaklis. Optimal Control of Switched Hybrid Systems:
A Brief Survey. Technical Report of the ISIS Group at the University of
Notre Dame. ISIS-2011-003, July 2011.

[34] H. Lin and P. J. Antsaklis. Hybrid Dynamical Systems: An Introduction to
Control and Veriﬁcation. Foundations and Trends in Systems and Control,
Vol. 1, no. 1, pp. 1-172, March 2014.

[35] L. C. Young. Lectures on the calculus of variations and optimal control
theory. Foreword by Wendell H. Fleming. W. B. Saunders Co., Philadelphia,
1969.

[36] R. Gamkrelidze. Principle of Optimal Control Theory. Plenum, New York,

1978.

[37] L.D. Berkovitz and N.G. Medhin. Nonlinear Optimal Control Theory,

Chapman & Hall, CRC Press, Boca Raton, Florida, 2013.

[38] H. Lou. Analysis of the Optimal Relaxed Control to an Optimal Control
Problem. Applied Mathematics and Optimization, Vol. 59, pp. 75-97, 2009.

[39] R. Vinter. Optimal Control, Birkhauser, Boston, Massachusetts, 2000.

[40] D.Q. Mayne and E. Polak. First-order Strong Variation Algorithms for
Optimal Control. J. Optimization Theory and Applications, Vol. 16, pp.
277-301, 1975.

[41] H. Jaleel, Y. Wardi, and M. Egerstedt. Minimizing Mobility and Commu-
nication Energy in Robotic Networks: an Optimal Control Approach. Proc.
2014 American Control Conference, Portland, Oregon, June 4-6, 2014.

26

