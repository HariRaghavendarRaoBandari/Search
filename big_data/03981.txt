6
1
0
2

 
r
a

 

M
3
1

 
 
]

.

O
C
h
t
a
m

[
 
 

1
v
1
8
9
3
0

.

3
0
6
1
:
v
i
X
r
a

Symmetry in Sphere-based Assembly Conﬁguration

Spaces

Meera Sitharam1, Andrew Vince2, Menghan Wang1, and Mikl´os B´ona2

1Department of Computer and Information Science and Technology,

University of Florida

2Department of Mathematics, University of Florida

March 15, 2016

Abstract

Many remarkably robust, rapid and spontaneous self-assembly phenomena occurring
in nature can be modeled geometrically, starting from a collection of rigid bunches of
spheres. This paper highlights the role of symmetry in sphere-based assembly processes.
Since spheres within bunches could be identical and bunches could be identical as well,
the underlying symmetry groups could be of large order that grows with the number
of participating spheres and bunches. Thus, understanding symmetries and associated
isomorphism classes of microstates that correspond to various types of macrostates can
signiﬁcantly increase eﬃciency and accuracy, i.e., reduce the notorious complexity of
computing entropy and free energy, as well as paths and kinetics, in high dimensional
conﬁguration spaces. In addition, a precise understanding of symmetries is crucial for
giving provable guarantees of algorithmic accuracy and eﬃciency as well as accuracy
vs. eﬃciency trade-oﬀs in such computations. In particular, this may aid in predicting
crucial assembly-driving interactions.

This is a primarily expository paper that develops a novel, original framework for
dealing with symmetries in conﬁguration spaces of assembling spheres, with the fol-
lowing goals. (1) We give new, formal deﬁnitions of various concepts relevant to the
sphere-based assembly setting that occur in previous work, and in turn, formal deﬁni-
tions of their relevant symmetry groups leading to the main theorem concerning their
symmetries. These previously developed concepts include, for example, (a) assembly
conﬁguration spaces, (b) stratiﬁcation of assembly conﬁguration space into conﬁgura-
tional regions deﬁned by active constraint graphs, (c) paths through the conﬁgurational
regions, and (d) coarse assembly pathways. (2) We then demonstrate the new symmetry
concepts to compute sizes and numbers of orbits in two example settings appearing in
previous work. (3) Finally, we give formal statements of a variety of open problems and
challenges using the new conceptual deﬁnitions.

1 Motivation

Supramolecular assembly is prevalent in nature, health-care and engineering, but poorly
understood. The assembly starts with identical copies of structures drawn from a small
number of types. Modeling these starting structures as rigid-bunches-of-spheres is well-suited
to assembly processes driven by so-called short-range or hard sphere interaction potentials.
More formally, an input to a computational model of an assembly process is an assembly

system consisting of the following.

1

• A collection of k rigid molecular components belonging to a few types; a rigid component
is speciﬁed as the set of positions of the centers of their constituent atoms, in a local
coordinate system. In many cases, an atom could be the representation for the average
position of a collection of atoms in an amino acid residue. Note that an assembly
conﬁguration is given by the positions and orientations of the entire set of k rigid
molecular components in an assembly system, relative to one ﬁxed component. Since
each rigid molecular component has six degrees of freedom, a conﬁguration is a point
in 6(k − 1) dimensional Euclidean space.

• The pairwise component of the potential energy function of the assembly system, spec-
iﬁed as a sum of potential energy terms between pairs of constituent atoms i and j in
two diﬀerent rigid components of the assembly system. The weak interaction between
the rigid molecular components is captured by this potential energy function. The
pairwise potential energy terms are, in turn, speciﬁed using pairwise potential energy
functions similar to so-called Lennard-Jones potentials and Morse potentials [22]. The
potential energy is a function of the distance di,j between i and j.

• A non-pairwise component of the potential energy function in the form of global potential
energy terms that capture the tethers between the rigid components within a monomer,
as well as other global potential energy terms that implicitly represent the solvent (water
or lipid bilayer membrane) eﬀect [47, 48, 36]. These are independent of particular pairs
of atoms.

It is important to note that all the above potential energy terms are functions of the assembly
conﬁguration.

The formal conceptual framework we develop here is inspired by the following types of

prediction questions.

• Input: the 3D descriptions of the rigid molecular components and their interactions
(Section 2 describes how they are formally speciﬁed). Output: prediction of the ﬁnal
assembly structures and their likelihood.

• Input: as in the previous item, plus a 3D conﬁguration of ﬁnal assembled structure.
Output: prediction of those interactions that are crucial for the assembly process to
terminate in the given input assembly conﬁguration.

• Input: as in the previous item. Output: prediction of minimal alterations of the build-
ing blocks or interactions that would signiﬁcantly increase likelihood of the assembly
process terminating in the given input assembly conﬁguration.

• Input: as in the previous item, additionally more than one choice of ﬁnal assembly con-
ﬁguration. Output: prediction of key events such as speciﬁc intermediate subassembly
conﬁguration choices during assembly that determine which one of the ﬁnal assembly
conﬁguration is more likely to result.

Experimentally in vitro or vivo, these types of predictions about supramolecular assem-
bly processes are diﬃcult because of the remarkable rapidity, spontaneity and robustness of
assembly processes. The prediction tasks highlight combinatorial explosion and thus insuﬃ-
ciency of experimentation (trying various possibilities) and guesswork, even with the help of
known data on similar assemblies and biological knowledge about evolutionarily conserved
structures. In addition, many of the current experimental methods are labor and resource-
intensive, making blind alleys expensive in time and eﬀort.

On the other hand, computer simulations guided by theoretical ﬁrst principles and stan-
dard paradigms such as Monte Carlo(MC) or Molecular Dynamics(MD) are limited due to
the reasons detailed in the next subsections.

2

1.1 Assembly Conﬁgurational Volume

Stability and binding aﬃnity of subassemblies depend on free energy whose landscape in
the case of assembly is heavily inﬂuenced by conﬁgurational entropy (volume measure of
microstates corresponding to a macrostate; see [39]); this depends on accurate computation of
conﬁgurational volumes by sampling, attempted by a long and distinguished series of methods
[39, 3, 28, 29, 27, 43, 26, 63, 44]. Assembly conﬁguration spaces are high dimensional, and the
number of required samples is typically exponential in the dimension. Sampling on a high-
dimensional ambient space grid typically means computing a large proportion of samples that
lie outside any region of interest which is eﬀectively of lower dimension, and these samples
must be discarded. Not only are the relevant regions in the case of short-ranged potentials
of eﬀectively lower dimension, they are also geometrically/topologically complex, hence grid-
based sampling in Cartesian space, as well as nonergodic methods like MC or MD, have
to generate impractically dense sampling to accurately reﬂect the volume/measure ratios
of these important, relatively low volume regions having complex geometry and topology.
These methods do not exploit the abundance of symmetries of the landscape. They are used
both for assembly processes, whose feasible regions are deﬁned by one-sided pairwise distance
equalities and inequalities between atom-centers, and folding processes, where the feasible
regions are deﬁned by pairwise distance equalities. The diﬀerence of complexity between the
two is a litmus test for the limitations that are addressed by the Cayley conﬁguration space
approach taken by EASAL described in Section 1.5.

Conventional methods to compute the energy landscape of small clusters are based on
searching for local minima [74, 21, 22]. Point group symmetrisation schemes [54, 77, 53] and
local rigidiﬁcation schemes [45, 62] have been exploited in global optimisation algorithms to
gain computational eﬃciency.

Because of the complexity of the problem of dealing with the short range of interaction
of hard spheres leading to narrow regions of lower potential energy, separated by vast ﬂat
parts, conventional local-minima based methods for energy landscape computation [74] are
limited. These methods have the additional disadvantage of small perturbations to energy
values requiring complete recomputation and also they do not deal well with the very ﬂat
landscape that is the signature of short-range potentials.

An alternative approach for short-range potentials is to consider the “sticky sphere limit”
based on taking the limit as the range of interaction goes to zero [6, 70, 51]. In this limit, the
energy landscape reduces to a collection of manifolds of diﬀerent dimensions, glued together
at their boundaries (formally, a Thom-Whitney stratiﬁcation of real semi-algebraic sets), as
described in theoretical models proposed independently and separately by Holmes-Cerfon et
al. [33] in 2013 and by the ﬁrst author’s research group [55, 56] in 2011.

The background provided in the remainder of this section recalls previously developed
concepts for describing assembly conﬁguration spaces. This motivates the conceptual frame-
work for symmetry in assembly under short-ranged potentials given in Section 2.

1.2 Kinetics, Topology and Geometric complexity

Kinetics and transition rates between subassemblies also require an explicit understanding
of the geometry, topology and multiple paths in the assembly conﬁguration space. For
cluster assemblies from spheres, there are a number of methods [4, 76, 8, 17, 42, 35, 34] to
compute the entire conﬁguration space of small molecules such as cyclo-octane [49, 37, 58].
Some methods from robotics and computational geometry [63], such as the probabilistic
roadmap [2], eﬀectively give bounds to approximate free energy without relying on MC or
MD sampling. Starting from MC and MD samples, recent heuristic methods infer topology
[23, 72, 46, 59], and use topology to guide dimensionality reduction [79]. Yet, most prevailing
methods are unable to extract the topology in a suﬃciently eﬃcient and accurate manner
as to be able to feasibly compute volume or path integrals (required for entropy or kinetics

3

computations) even for small assemblies. Moreover even those prevailing methods that exploit
symmetry in the conﬁguration space to compute free energy and kinetics do not employ a
formal and precise group-theoretic framework.

1.3 Recursive decomposition, Assembly trees, Combinatorial en-

tropy

For larger, microscale assemblies, a direct study of the free energy and conﬁgurational entropy
is computationally emphatically intractable. At these coarser scales, the primitives are stable
subassemblies and transition rates (obtained from the computational tasks of the previous
two subsections). Still, the combinatorial entropy of multiple pathways makes it diﬃcult to
isolate crucial combinations of assembly-driving interface interactions.

This issue has been addressed by the ﬁrst author’s previous work on recursive decom-
positions [30, 31, 32] of larger assemblies into smaller subassemblies. This work introduces
structures called assembly trees and the notion of combinatorial entropy, applied to model
viral capsid assembly in [67].

While trees of various types have been used to model various processes related to assembly
[18, 75], to the best of our knowledge, the assembly trees from [67] have a formal structure
that is distinct from other tree representations of assembly pathways. In particular, non-root
nodes of the assembly tree contain subassemblies, rather than conﬁgurations of the entire
assembly system; and any pair of nodes that are incomparable (neither ancestor or child in
the tree) are disjoint subassemblies, i.e, they do not contain any common rigid components;
moreover, only rigid subassembly conﬁgurations are represented. In addition, the authors
have taken the ﬁrst steps towards precisely formalizing the eﬀect of symmetries on a highly
simpliﬁed version of assembly trees; speciﬁcally their orbits under the action of a ﬁxed group
of symmetries – called assembly pathways [13]. These concepts will be discussed in detail in
Sections 2 and 3.

1.4 Symmetry in Chemistry

Since spheres within rigid bunches of an assembly system could be identical and bunches could
be identical as well, the underlying symmetry groups could be of large order, that grows with
the number of participating spheres and bunches. Therefore, all of the tasks in the previous
three subsections can be signiﬁcantly simpliﬁed by taking advantage of natural symmetries
of the conﬁguration space that arise due to identical assembling units, their symmetries,
and symmetries of the ﬁnal assembled structure. However, none of the prevailing methods
discussed above computationally incorporates these symmetries. Group theory has been
used to study the symmetry of molecules and molecular orbits
[16, 20, 14, 41] for a long
time. The well-known P´olya enumeration theorem [57], which provides a method to ﬁnd the
number of orbits of a group action, is motivated by the problem of enumerating permutational
isomers of a given molecular skeleton. Group theory is widely used in crystallography to
describe crystallographic symmetry and classify crystal structures [1, 25]. Other applications
include using the molecule symmetry group in studying molecular spectroscopy [15] and
using generating functions in understanding nuclear spin statistics of nonrigid molecules [5].
However, most of these works only involve symmetry of individual structures. The literature
is sparse in the context of symmetry in assembly systems or in conﬁguration spaces.

1.5 EASAL: Eﬃcient Atlasing and Search of Assembly Landscapes

A recent method of the ﬁrst author, EASAL (eﬃcient atlasing and search of assembly land-
scapes) [55, 56], formally addresses the issues highlighted in the ﬁrst two subsections above:
computation of conﬁgurational entropy and kinetics, via geometrization, stratiﬁcation and

4

convexiﬁcation using Cayley parameterization of assembly conﬁguration spaces. Geometriza-
tion and Stratiﬁcation were also used later in [33] independently (as mentioned at the end
of Section 1.1): the geometrization is achieved in [33] via a somewhat diﬀerent process
consistent with smooth potential energy functions, while the stratiﬁcation is the standard
Thom-Whitney stratiﬁcation of semialgebraic sets as laid out in [55, 56].

On the other hand, Cayley convexiﬁcation based on [68] is a unique feature of EASAL
not present in [33], that makes it tractable to sample and compute entropy integrals over
higher dimensional constant-potential-energy regions of the assembly conﬁguration space. In
addition Cayley convexiﬁcation helps formalize and precisely explain the intuitively clear
observation that assembly conﬁguration spaces are signiﬁcantly simpler geometrically and
topologically than folding conﬁguration spaces. The diﬀerence in complexity is especially
stark when there are cycles of pairwise constraints between atom centers.

We describe the Geometrization and Stratiﬁcation aspects of EASAL’s approach below.
Stratiﬁcation is explained in further detail in Section 2 and Cayley parameters for conﬁgu-
ration spaces and convexiﬁcation based on [68] are explained in Section 4.

1.5.1 Geometrization

The assembly conﬁguration space is represented as a semi-algebraic set satisfying geometric
constraints speciﬁed as distance inequalities between atom-centers. The short-range or hard
sphere potential interaction is typically discretized to take diﬀerent constant values on three
intervals for the distance value di,j: (0, ri,j), (ri,j, ri,j + δi,j), and (ri,j + δi,j,∞). Typically,
ri,j, the so-called Van der Waal or steric radius, speciﬁes ”forbidden” regions around atoms
i and j. And ri,j + δi,j is a distance where the attractive (electrostatic or other weak) forces
between the two atoms is no longer strong (typically these forces decay as the reciprocal of
some power of the distance di,j between atom centers). Intuitively, the interval (0, ri,j) is
where the repulsive force highly dominates, and (ri,j, ri,j + δi,j) is where the attractive force
and repulsive forces are balanced, and (ri,j + δi,j,∞) is where neither force is strong. Over
these 3 intervals respectively, the potential assumes a very high value, a very low value, and a
medium value mi,j. All of these bounds for the intervals for di,j, as well as the values for the
potential on these intervals, are speciﬁed as part of the input to the assembly model. These
constants are speciﬁed for each pair of atoms i and j, i.e., the subscripts are necessary. The
interval with the low value is called the well. The Hard-Sphere potentials are deﬁned solely
by the Van der Waal’s forbidden distance constraint, δi,j = 0.

The information in the potential energy landscape can thus be geometrized, i.e., repre-
sented using assembly constraints, in the form of distance intervals. These constraints deﬁne
feasible conﬁgurations. The set of feasible conﬁgurations is called the assembly conﬁguration
space. The active constraint regions of the conﬁguration space are regions where at least
one of the short-ranged inter-atom distances lies in the potential energy well, i.e, the interval
(ri,j, ri,j + δi,j).

1.5.2 Stratiﬁcation

The above geometrization of an assembly conﬁguration space makes it natural to stratify
an assembly conﬁguration space into atlas of active constraint regions, More details are
provided in Section 2 – see also Figure 7. The active constraint regions of the conﬁgu-
ration space are regions where at least one of the inter-atom distances lies in the poten-
tial energy well. The active constraint regions are stratiﬁed by dimension into a topo-
logical Thom-Whitney complex, with the boundary region being one dimension smaller.
The active constraint regions can be modeled as so-called convexiﬁable Cayley conﬁgura-
tion spaces [68], a combinatorially deﬁnable concept by ﬁrst labeling each region by its
unique active constraint graph (see Section 2). A demo movie of EASAL is available at:
http://www.cise.ufl.edu/research/SurfLab/EASALvideo.mpg. Standard algorithms can

5

be employed for a fast computation of paths from one conﬁguration to another in the atlas.
However, the computation of entropy integrals over these paths poses several challenges.

1.6 Organization and Contribution

This is a primarily expository paper that develops a novel, original framework for dealing
with symmetries in conﬁguration spaces of assembling spheres under short ranged potentials.
It is motivated by a longer-term goal to exploit natural symmetries using assembly trees
and other concepts described in the previous sections, that have appeared in various avatars
in the community, including our work on EASAL. Such an understanding of symmetries is
essential for signiﬁcantly reducing the complexity of the computation of conﬁgurational and
combinatorial entropy as well as kinetics, since spheres within rigid bunches of an assembly
system could be identical and bunches could be identical as well, giving underlying symmetry
groups of large order, that grows with the number of participating spheres and bunches.

To this end, we develop a formal conceptual framework for assembly under short-ranged
potentials, as assembly of rigid bunches of spheres. As diﬀerent deﬁnitions of assembly
macrostates are appropriate in diﬀerent contexts, for example, depending on whether diﬀer-
ent copies of identical atoms or molecules are considered interchangeable or not, we carefully
deﬁne and diﬀerentiate between congruence and isomorphism of conﬁgurations. We then
show how symmetries of assembly conﬁguration spaces arise due to: multiple copies of iden-
tical building blocks (in particular when these building blocks are rigid bunches of spheres),
internal symmetries of building blocks, and the symmetries of the ﬁnal assembled structure.
The organization of this paper is as following. In Section 2, we deﬁne the new conceptual
framework for symmetry in assembly under short-ranged potentials (or assembly of rigid
bunches of spheres) leading to the main Theorem 4. An application of some of these results
on symmetry can be found in [56]. In Section 3, we illustrate one aspect of our approach [13]
for computing combinatorial entropy using generating functions for counting the number and
size of simpliﬁed assembly pathways (orbits of a symmetry group action on assembly trees).
Note that while this simple example has a ﬁxed group size, the method demonstrated applies
also when the underlying symmetry group grows with the size of the system. In Section 4,
open questions and directions are given.

2 Framework for Symmetry in Assembly

In this section, we deﬁne natural groups of symmetries acting on various previously deﬁned
objects related to symmetry that are described in the Introduction and later in this section.
The four new groups we deﬁned are the weak automorphism group, the strict congruence
group, the strict order preserving isomorphism group and the strict permuted congruence
group of an assembly conﬁguration. We consider the action of these groups on various objects
deﬁned in previous literature on assembly and sketched in the introduction [55, 56, 66], such
as assembly conﬁguration space, active constraint regions, active constraint graphs, assembly
paths and trees. These resulting symmetry classes will be used to formalize the main new
Theorem 4 and two applications in Example 1 and Section 3, as well as open problems in
the last section of this paper.
Let X be a set under the action of a group G, and x be any element of X. The orbit
of x under G is the set G(x) = {φ(x) : φ ∈ G}. An element g of G ﬁxes x if g(x) = x.
The stabilizer subgroup stabG(x) of x in G is the group of all elements in G that ﬁx x, i.e.
stabG(x) = {φ ∈ G|φ(x) = x}.

The following theorem from standard group theory can be used to determine the number of
orbits and the size of orbits for various objects deﬁned in this section. An explicit application
of this theorem is shown in the next section.
Theorem 1. Let X be a set under the action of a group G. For all x ∈ X, the equalities

6

|G(x)| = |G|/|stabG(x)|

(Orbit-Stabilizer theorem)

and

(cid:88)

φ∈G

|X φ|

|X/G| =

1
|G|

(Burnside’s lemma)

hold, where |X/G| is the number of orbits of X, X φ is the set {x ∈ X : φ(x) = (x)}.

Diﬀerent deﬁnitions of macrostates are appropriate in diﬀerent contexts, for example,
depending on whether diﬀerent copies of identical atoms or molecules are considered inter-
changeable or not. For this reason we carefully deﬁne and diﬀerentiate between congruence
and isomorphism of conﬁgurations.

In order to give a physically meaningful formalization of an assembly system under short-
ranged potentials, we deﬁne the notion of a bunch, i.e., a rigid conﬁguration of spheres of
varying colors and radii.

2.1 A Bunch and its symmetries
Let SE(3) denote the group of orientation preserving isometries of R3.
A bunch is a tuple (P ;C, r, δ) where P = (p1, p2, . . . , pn) is an ordered set of points in R3,
and C, r, δ are functions deﬁning colored spheres centered at the points in P . Speciﬁcally,
C : P → C where C is a ﬁnite set of “colors”, and r, δ : P → R+ such that the spheres are
nonintersecting, i.e. (cid:107)pi − pj(cid:107)2 ≥ r(pi) + r(pj) for any i (cid:54)= j. The map δ is interpreted as
the width of the annulus speciﬁed by the potential energy well and is used in the deﬁnition
of an active constraint graph of an assembly conﬁguration later in this section. For a bunch
B, P (B) is used to denote the point set B; similarly we have C(B), r(B) and δ(B).
Two bunches B = (P ;C, r, δ) and B(cid:48) = (P (cid:48);C(cid:48), r(cid:48), δ(cid:48)) are isomorphic if there is an element
φ of SE(3) and a permutation π ∈ Sn, such that φ(pi) = p(cid:48)
π(i) for all i, where n = |P|, and φ
preserves the color, radius and annulus of points. In this case with a slight abuse of notation,
we write B(cid:48) ∈ φ(B), where φ(B) denotes the set of bunches that are isomorphic to B under
φ and some permutation in Sn. See Figure 1 for an example.
Two bunches B = (P ;C, r, δ) and B(cid:48) = (P (cid:48);C(cid:48), r(cid:48), δ(cid:48)) are strictly isomorphic, if there
is a permutation π ∈ Sn such that B and B(cid:48) are isomorphic under π and the identity
element in SE(3). The weak automorphism group of B, denoted Waut(B), is the group of
all permutations π ∈ Sn that take B to a strictly isomorphic B(cid:48).

Figure 1: Two isomorphic bunches of 5 spheres

Two bunches B = (P ;C, r, δ) and B(cid:48) = (P (cid:48);C(cid:48), r(cid:48), δ(cid:48)) are order preserving isomorphic
or congruent, if there is a φ ∈ SE(3) such that B and B(cid:48) are isomorphic under φ and the
identity permutation. In this case with a slight abuse of notation, we write B(cid:48) = φ(B).

We have the following observation that describes strict isomorphism using the notion of

congruence.

7

B1B213243535241Observation 2. Two congruent bunches B and B(cid:48) are strictly isomorphic, if and only if
˜P = ˜P (cid:48) where ˜P and ˜P (cid:48) denote the unordered point sets of B and B(cid:48) respectively, and for all
p ∈ P (cid:48), C(cid:48)(p) = C(p), r(cid:48)(p) = r(p), δ(cid:48)(p) = δ(p).

2.2 An assembly conﬁguration space and its symmetries
An assembly conﬁguration is an ordered set B = (B1, B2 . . . Bk) where Bi = (Pi;Ci, ri, δi) is
a bunch for all i, such that for all i, j and all x ∈ Pi, y ∈ Pj, x (cid:54)= y, we have

(cid:107)x − y(cid:107)2 ≥ ri(x) + rj(y)

(1)

Two assembly conﬁgurations B = (B1, . . . , Bk) and B(cid:48) = (B(cid:48)

k) are conﬁgurations
of the same assembly system (see Section 1) if Bi is congruent to B(cid:48)
σ(i) for some permutation
σ ∈ Sk, for all i. Notice that the congruence between bunches could be diﬀerent for each i.
The set of all assembly conﬁgurations of an assembly system is called an assembly conﬁgu-
ration space. The assembly conﬁguration space containing the assembly conﬁguration B is
denoted A(B), or simply A when the context is clear.

1, . . . , B(cid:48)

1, . . . , π(cid:48)

1, . . . , πkπ(cid:48)
k).

1, . . . , B(cid:48)

k) = (σσ(cid:48), π1π(cid:48)

In the following discussion, we always restrict our universe to assembly conﬁgurations in
Two assembly conﬁgurations B = (B1, . . . , Bk) and B(cid:48) = (B(cid:48)

the same assembly conﬁguration space.
k) are isomorphic if
there is an element φ of SE(3) (isomorphism between bunches) and a permutation σ ∈ Sk,
σ(i) is isomorphic to Bi under φ and a permutation πi ∈ Sni, where
such that for all i, B(cid:48)
ni = |Pi|.
Two assembly conﬁgurations B and B(cid:48) are strictly isomorphic, if there is a permutation
σ ∈ Sk, such that for all i, B(cid:48)
σ(i) is isomorphic to Bi under the identity element in SE(3) and a
permutation πi ∈ Sni, where ni = |Pi|. Thus a strict isomorphism is a tuple of permutations
(σ, π1, . . . , πk), where σ ∈ Sk and πi ∈ Sni. The weak automorphism group of B, denoted
Waut(B), is the group of all such tuples (σ, π1, . . . , πk) that take B to a strictly isomorphic
B(cid:48), with the group operation (σ, π1, . . . , πk)(σ(cid:48), π(cid:48)
Note that all assembly conﬁgurations in the same assembly conﬁguration space A have
the same weak automorphism group. Thus we deﬁne the weak automorphism group of an
assembly conﬁguration space A, denoted WautA, to be the weak automorphism group of any
assembly conﬁguration B in A.
Two assembly conﬁgurations B and B(cid:48) are congruent if there is an isomorphism φ ∈ SE(3)
that preserves both the order of the bunches and the order of points within each bunch, i.e.
i is congruent to Bi under φ. Two assembly conﬁgurations B and B(cid:48) are strictly
for all i, B(cid:48)
congruent if they are both congruent and strictly isomorphic. In general, we think of two
strict congruent assembly conﬁgurations as the same. The strict congruence group of an
assembly conﬁguration B is the stabilizer of the set strictly congruent assembly conﬁgurations
of B under WautA. It is the stabilizer subgroup stabWautAB of the assembly conﬁguration B
under WautA.
Two assembly conﬁgurations B and B(cid:48) are order preserving isomorphic if there is an
isomorphism φ ∈ SE(3) that preserves the order of the bunches, i.e. for all i, B(cid:48)
i is congruent
to φ(Bi). Two assembly conﬁgurations B and B(cid:48) are strictly order preserving isomorphic if
they are both order preserving isomorphic and strictly isomorphic. The strict order preserving
isomorphism group of an assembly conﬁguration B is the stabilizer of the set of strictly order
preserving isomorphic conﬁgurations of B under WautA.
Two assembly conﬁgurations B and B(cid:48) are permuted-congruent if there is an isomorphism
that preserves the order of points within each bunch, i.e. there is an element φ of SE(3) and
a permutation σ ∈ Sk, such that for all i, B(cid:48)
σ(i) is congruent to Bi under φ. Two assembly
conﬁgurations B and B(cid:48) are strictly permuted-congruent if they are both permuted-congruent
and strictly isomorphic. The strict permuted congruence group of an assembly conﬁguration
B is the stabilizer of the set of permuted-congruent conﬁgurations of B under WautA.

8

As an example, refer to Figure 2. The assembly conﬁguration B1 consists of 3 congru-
ent bunches. The assembly conﬁguration B2 is obtained from B1 with a strict congruence
(σ, π1, π2, π3) induced by a rotation in SE(3), where σ = (1 3), and πi = id for all i. The as-
sembly conﬁguration B3 is obtained from B1 with a strict permuted congruence (σ, π1, π2, π3),
where σ is a cyclic permutation of the 3 bunches, and πi = id for all i. On the other hand, B4
is obtained from B1 with a strict isomorphism (σ, π1, π2, π3), where σ is a cyclic permutation
of the 3 bunches, π1 = (1 2) and π2 = π3 = id.

Figure 2: The assembly conﬁguration B1 consists of 3 isomorphic bunches. B2 is obtained
from B1 with a strict congruence, B3 is obtained from B1 with a strict permuted congruence,
and B4 is obtained from B1 with a strict isomorphism that is neither a strict congruence, nor
a strict permuted congruence, nor a strict order preserving isomorphism.

Figure 3 shows another example of four assembly conﬁgurations each containing two
bunches. The strict congruence group stabWautAB of the assembly conﬁguration B1 is of
size 2 and contains those tuples (σ, π1, π2), where π1 ∈ {id, (2 4)}, σ = id, π2 = id. The weak
automorphism group WautA of the assembly system is of size 4 and contains those tuples
(σ, π1, π2), where π1 ∈ {id, (2 4), (3 1), (2 4)(3 1)}, σ = id, π2 = id. All four strictly isomor-
phic assembly conﬁgurations are obtained by applying WautA to the assembly conﬁguration
B1. Notice that B2 and B1 (B4 and B3) are strictly congruent, while B3 and B1 are strictly
order preserving isomorphic. The orbit of B1 under WautA is of size 2 and consists of B1 and
B3.

Figure 3: Four assembly conﬁgurations obtained by applying WautA on the assembly conﬁg-
uration B1. B2 is obtained from B1 with a congruence, while B3 is obtained from B1 with a
strict order preserving isomorphism.

We have the following observations for alternative characterizations of strict congruence,
strict order preserving isomorphism and strict permuted congruence of assembly conﬁgura-
tions.
Observation 3. Given two assembly conﬁgurations B = (B1, . . . , Bk) and B(cid:48) = (B(cid:48)
in the same assembly conﬁguration space,

1, . . . , B(cid:48)
k)

1. B and B(cid:48) are strictly congruent if and only if they are congruent, and

9

B1132412B2134212B3312412B431421212121212(*) B and B(cid:48) have the same unordered partition of the unordered point set into bunches,
k}, where ˜Pi is the unordered point set of the bunch

i.e. { ˜P1, . . . , ˜Pk} = { ˜P (cid:48)
Bi, and each point has same color, radius and annulus in B and B(cid:48).

1, . . . , ˜P (cid:48)

2. B and B(cid:48) are strictly order preserving isomorphic if and only if they are order preserving

isomorphic and satisfy the condition (*).

3. B and B(cid:48) are strictly permuted congruent if and only if they are permuted congruent

and satisfy the condition (*).

2.3 Symmetries in active constraint graph and active constraint re-

gion

An active constraint graph G(B) of an assembly conﬁguration B = (B1, . . . , Bk) is a graph
(V, E), where the vertex set V has one vertex for each point p ∈ P1 ∪ . . . ∪ Pk, labeled by a
tuple (i, l), representing that the point p appears as the ith point pi in the lth bunch Bl of
B, and a vertex pair {x, y} ∈ E if x and y lie in distinct bunches of B and
r(x) + r(y) ≤ (cid:107)x − y(cid:107)2 ≤ (r(x) + δ(x)) + (r(y) + δ(y)).

ﬁguration space A acts on G(B) by taking the tuple (i, l) to (πl(i), σ(l)).
WautA such that {x, y} ∈ E(G1) ⇐⇒ {ψ(x), ψ(y)} ∈ E(G2). In this case we say G1
or ψ(G1) = G2.

An element (σ, π1, . . . , πk) of the weak automorphism group WautA of B’s assembly con-
Two active constraint graphs G1, G2 are isomorphic if there is a ψ = (σ, π1, . . . , πk) ∈
∼=ψ G2
The automorphism group of an active constraint graph G is the group of elements ψ ∈

WautA such that ψ(G) = G, i.e. it is the stabilizer subgroup stabWautA G.

For example, Figure 4 shows all the non-isomorphic active constraint graphs with 12
edges of an assembly system consisting of 6 bunches, where all bunches are identical singleton
spheres.

Figure 4: All non-isomorphic active constraint graphs with 12 edges of an assembly system
of 6 bunches that are identical singleton spheres. The label on top is automatically generated
by EASAL and speciﬁes the orbit number of the shown active constraint graph.
Note: It is clear that stabWautAB ⊆ stabWautA G(B). Moreover, there are assembly conﬁgu-
rations B such that stabWautAB (cid:40) stabWautA G(B), i.e. the strict congruence group of B does
not have all the automorphisms of the corresponding active constraint graph. Refer to the
assembly conﬁguration B and its active constraint graph G in Figure 5, where each bunch
is a singleton sphere. The permutation σ = (1 2 3) ∈ WautA is contained in stabWautA (G).
However, it is not contained in the strict congruence group stabWautAB of the assembly
conﬁguration.
The full graph G∗ of an active constraint graph G is obtained by adding edges to G to
make the set of vertices in each bunch into a clique.
An active constraint region RG of the assembly conﬁguration space A contains all assembly
conﬁgurations B with the active constraint graph G(B) = G. The action of elements of WautA
on an active constraint region, and the stabilizer of an active constraint region in WautA are
well-deﬁned by the action of WautA on assembly conﬁgurations.

10

012345e12g0012345e12g1012345e12g2012345e12g3012345e12g4Figure 5: An assembly conﬁguration whose automorphism group is strictly contained in that
of the corresponding active constraint graph. Here the bunches are singleton spheres and
bunches of the same color have the same C, r and δ.

The following theorem gives containment and equality relations between stabilizer sub-
groups of an active constraint graph, an active constraint region and individual conﬁgurations
in the active constraint region.
Theorem 4. For an active constraint graph G = G(B) of an assembly conﬁguration space
A, it holds that

stabWautAB ⊆ stabWautA G = stabWautA RG

In addition, there exist active constraint graphs G of assembly conﬁguration spaces A where
the above containment is strict, i.e.

for all B such that G = G(B),

stabWautAB (cid:40) stabWautA G = stabWautA RG

Proof. (1) It is straightforward to see that stabWautAB ⊆ stabWautA G(B). We give an example
to show the existence of G where stabWautAB (cid:40) stabWautA G for any assembly conﬁguration
B of G. Refer to the assembly conﬁguration in Figure 6, where each bunch is a singleton
sphere. The permutation σ = (1 2 3) is contained in the automorphism group stabWautA G of
the active constraint graph G. However, it is not contained in the strict congruence group
of any corresponding assembly conﬁguration, as the position of the sphere 6 is asymmetric
with respect to 1, 2, 3 in any assembly conﬁguration of G. Thus stabWautAB (cid:40) stabWautA G
for any assembly conﬁguration B of G..

Figure 6: Any assembly conﬁguration corresponding to the active constraint graph G has
its strict congruence group strictly contained in stabWautA G. Here the bunches are singleton
spheres and bunches of the same color have the same C, r and δ.

(2) stabWautA G = stabWautA RG: from the deﬁnition of permutations in the weak automor-
phism group of the assembly conﬁguration space, it follows that stabWautA G ⊆ stabWautA RG.
To show stabWautA RG ⊆ stabWautA ), consider any element ψ ∈ stabWautA RG. For any as-
sembly conﬁguration B ∈ RG, if a pair of spheres (x, y) are “touching” (i.e. they yield an edge
in the corresponding active constraint graph), it must be the case that (ψ(x), ψ(y)) are also
“touching” in ψ(B), since G(B) = G(ψ(B)) = G. Similarly, ψ must mapping “non-touching”
pairs to “non-touching” pairs. Therefore ψ ∈ stabWautA G.

11

465213123456514261234563Remark 1. We expect the strict order preserving isomorphism group and the strict permuted
congruence group of an assembly conﬁguration B to lie between the strict congruence group
stabWautAB and the automorphism group stabWautA G of its active constraint graph. However,
the containment relationship between these two groups is not clear.

2.4 Symmetries in stratiﬁcation, assembly path and pathway
A stratiﬁcation S(A) of the assembly conﬁguration space A is a partition of the space into
strata Xi of A that form a ﬁltration ∅ ⊂ X0 ⊂ X1 ⊂ . . . ⊂ Xm = A, m = 6(n − 1). Each Xi
is a union of active constraint regions RG, where the corresponding active constraint graph
G has m − i independent edges, i.e. m − i inequality constraints are active. Each active
constraint graph G is itself part of at least one, and possibly many, hence l-indexed, nested
chains of the form ∅ ⊂ Gl
: ∅ ⊂
⊆ Xj
RGl
is closed and j dimensional. See Figure 7 for an example of assembly conﬁguration space
stratiﬁcation.

These induce corresponding reverse nested chains of active constraint regions RGl

m−i = G ⊂ . . . ⊂ Gl
m.

1 ⊂ . . . ⊂ Gl
= RG ⊂ . . . RGl

0

. Note that here for all l, j, RGl

⊂ . . . ⊂ RGl

⊂ RGl

m−1

m

0 ⊂ Gl

m−i

j

m−j

Given two active constraint graphs Gi and Gj, RGi (resp. Gi) is a parent of RGj (resp.
Gj) (resp. RGj is a child of RGi) if Gi (cid:40) Gj and there does not exists an active constraint
graph Gm such that Gi (cid:40) Gm (cid:40) Gj. The parent-child relation provides a Hasse diagram of
active constraint regions in the stratiﬁcation of A.

Figure 7: A fundamental region of the stratiﬁcation for the assembly conﬁguration space
of the assembly conﬁgurations in Figure 4 of 6 bunches, with each bunch being a singleton
sphere and all bunches identical. So WautA is the complete symmetric group of permutations
of 6 elements, S6. Each node shown is an orbit representative of an active constraint region
corresponding to an active constraint graph. The grey part is those active constraint graphs
(orbit representatives) whose corresponding constraint regions are empty. The example active
constraint graph representatives on the right have arrows pointing to their regions in the
stratiﬁcation. The labels in the circles are unimportant: they are automatically generated
and specify an orbit of an active constraint graph (example shown on right).

An assembly path from G1 to Gm in the stratiﬁcation is a sequence G1 (cid:40) G2 (cid:40) G3 (cid:40)
. . . (cid:40) Gm where Gi+1 is a child of Gi for all 1 ≤ i ≤ m. A coarse assembly path from
G1 to Gm in the stratiﬁcation is a sequence G1 (cid:40) G2 (cid:40) G3 (cid:40) . . . (cid:40) Gm where G∗
i+1 has
exactly one new rigid component S not in G∗
i , with S containing a set of two or more rigid
components S1 . . . Sm of Gi. In addition, for all proper subsets Q (cid:40) {S1 . . . Sm} with |Q| ≥ 2,

12

the subgraphs of G∗
i+1 induced by Q are not rigid. (The rigid components of a graph are the
maximal rigid subgraphs. Two rigid components cannot intersect on more than two vertices.
We refer the reader to combinatorial rigidity concepts in [24].)

For example, In Figure 7, the sequence of active constraint graphs on the right form an

An assembly forest corresponding to a coarse assembly path from G1 to Gm is the unique
1. The internal nodes are the
i+1 in the path. The children of S are the set
i . The roots of the forest are
m. An assembly tree is an assembly forest with only one root. See

assembly path.
forest where the leaves are the maximal rigid components of G∗
new rigid components S occurring in some G∗
of rigid components S1 . . . Sm contained in S that occur in G∗
the rigid components of G∗
Figure 9 in Section 3 for examples of assembly trees [66, 13, 12].
A full (coarse) assembly path is an (coarse) assembly path from G1 to Gm, where G1 is
the empty active constraint graph, and G∗
m is a rigid active constraint graph. A (coarse)
assembly path from primitives has the ﬁrst property of the full assembly path, i.e. G1 is the
empty active constraint graph, but not the last property, i.e. Gm can be any active constraint
graph. The full assembly tree and assembly tree from primitives are also deﬁned in this way.
A path between full active constraint graphs G and H where G (cid:42) H and H (cid:42) G is a
sequence G = Gi, Gi+1, Gi+2, . . . , Gi+m = H, where any pair Gi+k and Gi+k+1 are on some
assembly path, and Gi+k (cid:40) Gi+k+1 if k is even, Gi+k (cid:41) Gi+k+1 if k is odd.
The fundamental domain of the stratiﬁcation S(A) is the minimal sub stratiﬁcation ˜S(A)
π∈WautA π( ˜S(A)) = S(A), where π acts on ˜S(A) via its action on the active con-
straint regions (resp. active constraint graphs) of ˜S(A). In other words the active constraint
regions (resp. active constraint graphs) in ˜S(A) are orbit representatives of active constraint
regions (resp. active constraint graphs) under WautA.

such that(cid:83)

An assembly pathway is an orbit of an assembly tree under WautA. The deﬁnition extends

to full, and coarse assembly trees.

2.5 Example illustrating above symmetries

Some of the symmetry concepts deﬁned here were used in [56] to eﬃciently compute path
and higher dimensional region intervals in sphere-based assembly conﬁguration spaces more
eﬃciently reproducing and extending the results in [33]. We give a brief description here in
the form of an example:

Figure 8: The neighbors of one active constraint graph in the Hasse diagram of the stratiﬁ-
cation for the assembly system in Figure 4

Example 1. As an example, Figure 7 shows the Hasse diagram of the fundamental region
of a stratiﬁcation of an assembly system of 6 bunches that are identical singleton spheres

13

e11g3e12g1e12g2e12g3e10g10e10g8e10g6e10g7e10g4e10g2e10g3e10g1012345012345012345012345012345012345...considered ﬁrst in [33]. Figure 8 shows an (orbit representative of an) active constraint graph
of the system together with its parents and children in the Hasse diagram.

In addition, orbit representatives of paths help in improving eﬃciency of path integrals.
in Figure 7, any path that goes down from the top of the diagram to the bottom is the orbit
representative of an assembly path. In Figure 8, the sequence e10q6 (cid:40) e11g3 (cid:40) e12g2 is the
orbit representative of an assembly path but not a coarse assembly path, as none of e11g3’s
rigid components contains two or more rigid components of e10g6. On the other hand, the
sequence e10q6 (cid:40) e12g2 is the orbit representative of a coarse assembly path.

3 Enumerating Simple Assembly Pathways

In this section, we consider the action of the strict congruence group of a single ﬁnal conﬁg-
uration on its assembly trees, and use generating functions to count the number and sizes of
simpliﬁed assembly pathways [13]. Note that our approach could potentially be applied for
all other groups deﬁned in Section 2, the largest of which is the weak automorphism group
of the ﬁnal conﬁguration, which would be the same as the weak automorphism group of the
assembly conﬁguration space.

A simple assembly is modeled by a rooted tree, the leaves are abstract representation
of individual bunches, the root representing the ﬁnal assembled conﬁguration. The internal
vertices represent intermediate stages of assembly, simpliﬁed to be subsets instead of sub-
graphs of the root. This simpliﬁcation results in a loss of information about the assembly
conﬁguration space and active constraint graphs of the intermediate stages of assembly. To
compensate, the group is taken to be the automorphism group G of the graph of the assem-
bled structure at the root instead of the weak automorphism group WautA of the assembly
conﬁguration space.

The deﬁnitions of assembly tree and pathway are simpliﬁed as follows. Given a ﬁnite
group G acting on a ﬁnite set X, we will deﬁne a simpliﬁed assembly pathway for the pair
(G, X). First, a simpliﬁed assembly tree is a rooted tree for which each internal vertex has at
least two children and whose leaves are bijectively labeled with elements of a set X. There is
an induced labeling on all the vertices of a simpliﬁed assembly tree by labeling a vertex v by
the set of labels on the leaves that are descendents of v. We identify each vertex of a simpliﬁed
assembly tree with its label. Two simpliﬁed assembly trees are considered identical if there is
a root preserving, adjacency preserving, and label preserving bijection between their vertex
sets. The 26 simpliﬁed assembly trees with four leaves, labeled in the set X = {1, 2, 3, 4} are
shown in Figure 9.
For a simpliﬁed assembly tree τ , the action of G on X induces a natural action of G on the
power set of X and thereby on the set of vertices of τ . Let TX denote the set of all simpliﬁed
assembly trees for X. If g ∈ G, then deﬁne the tree g(τ ) as the unique simpliﬁed assembly
tree whose set of vertex labels (including the labels of internal vertices) is {g(v) : v ∈ τ}.
Thus we have an induced action of G on TX . Each orbit of this action of G on TX consists
of a set of simpliﬁed assembly trees called a simpliﬁed assembly pathway for (G, X).
Example 2 (Klein 4-group acting on T4). Consider the Klein 4-group G = Z2⊕Z2 acting on
the set X = {1, 2, 3, 4}. Writing G as a group of permutations in cycle notation, this action
is

G = {(1)(2)(3)(4), (1 2)(3 4), (1 3)(2 4), (1 4)(2 3)}.

For this example there are exactly 11 simpliﬁed assembly pathways, which are indicated in
Figure 9 by boxes around the orbits. There are four simpliﬁed assembly pathways of size
one, i.e., with one simpliﬁed assembly tree in the orbit, three simpliﬁed assembly pathways
of size two, and four simpliﬁed assembly pathways of size four.

For any subgroup H of G, let tX (H) denote the number of trees in TX that are ﬁxed by
every element of H. Furthermore, let t(H) := tX (H) denote the number of trees in TX that

14

Figure 9: Klein 4-group acting on T4.

are ﬁxed by every element of H but by no other elements of G. In other words,

tX (H) = |{τ ∈ TX | stabG(τ ) = H}|.

(2)

The ﬁrst theorem below reduces the enumeration of simpliﬁed assembly pathways to the
calculation of t(H) for subgroups H of G. The index of a subgroup H in G, i.e. the number
of left (equivalently, right), cosets of H in G is denoted by (G : H). By Lagrange’s Theorem,
this index equals |G|/|H|. The second theorem below reduces the calculation of t(H) to the
calculation of t(H). The desired quantities tX (H) are computed from the numbers tX (H)
using M¨obius inversion on the lattice of subgroups of G.
Theorem 5. The number of trees in any simpliﬁed assembly pathway for (G, X) divides |G|.
If m divides |G|, then the number N (m) of simpliﬁed assembly pathways of cardinality m is

N (m) =

1
m

t(H).

(cid:88)

H≤G : (G:H)=m

15

2131424224134231344313424321G343214141323223143241212131F221432431432132414231432144EDCBA3214214314324132324131Theorem 6. Let G be a group acting on a set X. If H is a subgroup of G, then

(cid:88)

H≤K≤G

tX (H) =

µ(H, K) tX (K),

where µ is the M¨obius function for the lattice of subgroups of G.
Example 3 (Klein 4-group acting on T4 - continued). Theorem 5, applied to our previous
example of Z2 ⊕ Z2 acting simply on {1, 2, 3, 4}, states that the size of a simpliﬁed assembly
pathway must be 1, 2 or 4, since it must be a divisor of 4 = |Z2 ⊕ Z2|. To ﬁnd the number
of pathways of each size, note that G has three subgroups of order 2, namely

K1 = { (1)(2)(3)(4), (1 2)(3 4)},
K2 = { (1)(2)(3)(4), (1 3)(2 4)},
K3 = { (1)(2)(3)(4), (1 4)(2 3)},

and that

t(G) = 4,
t(K1) = t(K2) = t(K3) = 2,
t(K0) = 16,

where K0 denotes the trivial subgroup of order 1. The simpliﬁed assembly trees in TX that
are ﬁxed by all elements of G are shown in Figure 9, A, B, C, D. For i = 1, 2, 3, those
simpliﬁed assembly trees in TX that are ﬁxed by all elements of Ki and by no other elements
of G are are shown in Figure 9, E, F, G, respectively. The remaining 16 simpliﬁed assembly
trees in Figure 9 are ﬁxed by no elements of G except the identity. Therefore, according to
Theorem 5, the number of pathways of size 1, 2 and 4 are, respectively,

(cid:0) t(K1) + t(K2) + t(K3)(cid:1) =

1
2

t(G) = 4,

1
2

(2 + 2 + 2) = 3,

1
4

t(K0) = 4.

The problem of enumerating simpliﬁed assembly pathways is reduced, using Theorems 5
and 6, to calculating the number t(G) of simpliﬁed assembly trees ﬁxed by a given group G.
This is done using permutation group theory and generating functions. It will be assumed,
as is the case in many of the biological appllications, that G acts freely on X, i.e., if g(x) = x
for some x ∈ X, then g must be the identity. In this case
|X| := |Xn| = n · |G|,

where n is the number of G-orbits in its action on X. Denote by tn(G) the number of trees
in Tn := TXn that are ﬁxed by G. We deﬁne the exponential generating function

fG(x) :=

for the sequence {tn(G)}.

(cid:88)

n≥1

tn(G)

xn
n!

If G is the trivial group of order one, then let us denote this generating function simply
by f (x). This is the generating function for the total number of rooted, labeled trees with n
leaves in which every non-leaf vertex has at least two children. For H ≤ G, let

(cid:98)fH (x) =

1

(G : H)

fH ((G : H)x) .

16

Theorem 7. The generating function fG(x) satisﬁes the following functional equations:

and for |G| > 1,

1 + 2fG(x) = exp

1 − x + 2f (x) = exp (f (x)),

(cid:88)

H≤G

 .

(cid:98)fH (x)

Althogh proofs are omitted in this survey, the rather involved proof of Theorem 7 relies
on, in addition to generating function techniques, a characterization of block systems arising
from a group acting on a set and a recursive procedure for constructing all trees in TX that
are ﬁxed by G. (See [13, Theorems 9 and 14].)

Remark 2. Finding the generating function fG(x) depends on ﬁrst ﬁnding the generating
functions fH (x) for proper subgroups H of G. In that sense, the procedure for ﬁnding fG(x)
is recursive, proceeding up the lattice of subgroups of G, starting from the trivial subgroup.

It is also worth mentioning that subgroups that are conjugate in G have the same gener-

ating function.
Example 4 (Klein 4-group acting on T4 - continued). Consider G = Z2 ⊕ Z2 acting on Xn.
Recall that |Xn| = 4n, the integer n being the number of G-orbits. Recall that the subgroups
of G are K0, K1, K2, K3, G, where K0 is the trivial group and
K1 = { (1)(2)(3)(4), (1 2)(3 4)},
K2 = { (1)(2)(3)(4), (1 3)(2 4)},
K3 = { (1)(2)(3)(4), (1 4)(2 3)}.

The functional equations in the statement of Theorem 7 are

1 − x + 2f (x) = exp (f (x))

1 + 2fKi(x) = exp

1 + 2fG(x) = exp

(cid:18) 1
(cid:18) 1

2

(cid:19)

f (2x) + fKi(x)

for i = 1, 2, 3, and

f (4x) +

1
2

fK1 (2x) +

1
2

fK2(2x) +

1
2

4

fK3(2x) + fG(x)

.

(cid:19)

Using these equations and MAPLE software, the coeﬃcients of the respective generating
functions provide the following ﬁrst few values for the number of ﬁxed simpliﬁed assembly
trees. For the ﬁrst entry t1(G) = 4 for the group G, the four ﬁxed trees are shown in Figure 9
A, B, C, D. For trees with eight leaves there are t2(G) = 104 simpliﬁed assembly trees ﬁxed
by G = Z2 ⊕ Z2, and so on.

tn(K0)
tn(Ki)
tn(G)

:

:

:

1, 1, 4, 26, 236, 2752

1, 6, 72, 1312, 32128, 989696

4, 104, 4896, 341120, 31945728, 3790876672.

Example 5 (The icosahedral group acting on a viral capsid). A symmetry of a polyhedron
is a transformation in SE(3) that keeps the polyhedron, as a whole, ﬁxed, and a direct
symmetry is similarly deﬁned. The icosahedral group is the group of direct symmetries of the
icosahedron. It is a group of order 60 denoted G60.

A viral capsid assembly conﬁguration is modeled by a polyhedron P with icosahedral
symmetry. Its set X of facets represent the protein monomers. The icosahedral group acts
on P and hence on the set X. It follows from the so-called quasi-equivalence theory of the
capsid structure that G60 acts freely on X. We have |X| := |Xn| = 60n, where n is the

17

number of orbits in the action of the icosahedral group on X. Not every n is possible for a
viral capsid; n must be a T -number, that is, a number of form h2 + hk + k2, where h and k
are nonnegative integers.

Note. An icosahedral viral capsid assemly conﬁguration has a corresponding icosahedral
active constraint graph. And the group G60, viewed as a subgroup of the symmetric group
S60 is the automorphism group of this active constraint graph. As mentioned in the beginning
of this section, we are interested in the orbits of simpliﬁed assembly trees under the action
of this automorphism group. However, we continue to use the more intuitive view of G60 as
a geometric group.

Before the number of simpliﬁed assembly trees can be enumerated, basic information about
the icosahedral group is needed. The group G60 consists of:

• the identity,
• 15 rotations of order 2 about axes that pass through the midpoints of pairs of diamet-

rically opposite edges of P ,

• 20 rotations of order 3 about axes that pass through the centers of diametrically opposite

triangular faces, and

• 24 rotations of order 5 about axes that pass through diametrically opposite vertices.

There are 59 subgroups of G60 that play a crucial role in the theory. Besides the two

trivial subgroups, they are the following:

• 15 subgroups of order 2, each generated by one of the rotations of order 2,
• 10 subgroups of order 3, each generated by one of the rotations of order 3,
• 5 subgroups of order 4, each generated by rotations of order 2 about perpendicular

axes,

• 6 subgroups of order 5, each generated by one of the rotations of order 5,
• 10 subgroups of order 6, each generated by a rotation of order 3 about an axis L and

a rotation of order 2 that reverses L,

• 6 subgroups of order 10, each generated by a rotation of order 5 about an axis L and

a rotation of order 2 that reverses L,

• 5 subgroups of order 12, each the symmetry group of a regular tetrahedron inscribed

in P .

From the above geometric description of the subgroups, it follows that all subgroups of a
given order are conjugate in the group G60. Representatives of the conjugacy classes of the
subgroups of the icosahedral group are denoted by G0, G2, G3, G5, G6, G10, G12, G60, where
the subscript is the order of the group. The set of subgroups of G60 forms a lattice, ordered
by inclusion. A partial Hasse diagram for this lattice L is shown in Figure 10. The number
on the edge joining Gi (below) and Gj (above) indicate the number of distinct subgroups of
order i contained in each subgroup of order j. The number in parentheses on the edge joining
Gi (below) and Gj (above) indicate the number of distinct subgroups of order j containing
each subgroup of order i. The M¨obius function of L is shown in Table 1. The entry in the
table corresponding to the row labeled Gi and column Gj is µ(Gi, Gj).
Consider the case |X| = 60, i.e., for the T = 1 capsid. Using Theorem 7 and MAPLE soft-
ware, the generating functions fGi(x) were computed, and hence their coeﬃcients t60/i(Gi)

18

Figure 10: Partial Hasse diagram for the lattice of subgroups of the icosahedral group.

Table 1: The values of the M¨obius function of the subgroup lattice of G60.

which count simpliﬁed assembly trees that are ﬁxed by any copy of Gi were also computed.
Note that, since |X| = 60, the number of orbits of Gi in its action on X is 60/i. Substituting
these values into Theorem 6 and using the M¨obius Table 1 yields the numerical values for
t60/i(Gi), the number of simpliﬁed assembly trees over X with |X| = 60 that are ﬁxed by
Gi but by no other elements of G60. In other words, these are the numbers of trees whose
stabilizer in G60 is exactly Gi. Substituting these numbers t into Theorem 5, we arrive at
the number of simpliﬁed assembly pathways of each possible size:

204
∼ 168 × 108
∼ 223 × 109
∼ 613 × 1017
∼ 102 × 1017
∼ 334 × 1028
∼ 504 × 1031
∼ 835 × 1051
∼ 320 × 1099

simpliﬁed assembly pathways of size 1
simpliﬁed assembly pathways of size 5
simpliﬁed assembly pathways of size 6
simpliﬁed assembly pathways of size 10
simpliﬁed assembly pathways of size 12
simpliﬁed assembly pathways of size 15
simpliﬁed assembly pathways of size 20
simpliﬁed assembly pathways of size 30
simpliﬁed assembly pathways of size 60

19

3456(1)(1)(2)(2)(1)(1)(2)GGGGGGG32G121051(10)(15)(6)11604611053000000000001012000000000000000003GGGGGGGGGGGGG6G10G451260123456101260GGG011111111000000000−1−1−102260453000000−10000000−1−1−1−1−1−1−1−1−14 Open Questions

4.1 Enumeration problems in (non-simpliﬁed) assembly framework

We are interested in the following enumeration problems related to the action of WautA for
the framework in Section 2:

1. How to compute the size of orbits/stabilizers and the number of orbits under WautA
for assembly conﬁgurations, active constraint graphs, active constraint regions, (coarse)
assembly paths and assembly trees/forests?

2. How to compute the number of coarse assembly paths that correspond to a particular

assembly tree/forest?

3. Given two active constraint graphs G and H, where G and H are incomparable, i.e.

G (cid:42) H and H (cid:42) G, how to compute the number of paths between them?

4. Given two active constraint graphs G1 and Gm, where G1 (cid:40) Gm, how to compute the

number of (coarse) assembly paths from G1 to Gm?

5. What are the orbits of the (coarse) assembly paths in (4) under the action of stabWautA (Gm)?

6. What are the orbits of the (coarse) assembly paths in (4) under the action of the group
H, where H = WautA if stabWautA (G1) = WautA (i.e. G1 is the empty active constraint
graph), or H = stabWautA (G1) ∩ stabWautA (Gm) otherwise?

4.2 Symmetries within an active constraint region via Cayley con-

ﬁgurations

So far, we have discussed the orbit of an active constraint region and active constraint graph,
and pointed out that it is suﬃcient to deal with a single orbit representative provided we
are able to compute the multiplying factors associated with the size of the orbit, stabilizer,
number of orbits etc.

In fact, a single active constraint region could be decomposed into the union of nontrivial
subregions that form the orbit of a fundamental region, leading to enormous eﬃciencies in
sampling, computation of volumes that are currently hoplessly intractable in high dimensional
conﬁguration spaces as discussed in the Introduction.

In fact since the fundamental region itself could have subregions with varying orders
of stabilizers, we could decompose into more than one orbit representative, with diﬀerent
stabilizers. In any case, sampling or computing the volume of an active constraint region is
simpliﬁed by sampling these fundamental subregions and computing the size of their orbits.
One way to obtain such a decomposition of an active constraint region RG is via the
locally complete Cayley (assembly) conﬁgurations δF corresponding to the active constraint
graph G. Convex Cayley conﬁguration spaces highlight the key diﬀerence between assembly
and other constraint systems e.g., folding. This diﬀerence is captured in the combinatorial
structure of active constraint graphs. A Cayley parameter for an active constraint region
RG is a non-edge of its active constraint graph G. For speciﬁc sets of non-edges F , the
set of vectors λF of attainable lengths of F - (in 3D realizations of a linkage (G, δ) with
underlying graph G and edge lengths δ) - is always convex for any given lengths δ (that
is, for all the 3D realizations of the bar-joint constraint system or linkage (G, δ)). This set
is called the (3-dimensional) Cayley conﬁguration space of the linkage (G, δ) on the Cayley
parameters F , denoted ΦF (G, δ) and can be viewed as a “projection” of the space of pairwise
distance vectors of realizations of (G, δ) on the Cayley parameters F . Such graphs G are said
to have convexiﬁable Cayley conﬁguration spaces with parameters F (short: convexiﬁable).

20

Convexity permits the use of convex programming techniques for improving eﬃciency of
sampling, search, volume computations etc. for the conﬁguration space.

The concept is best explained using key theorems of the ﬁrst author in [68, 69] discussed

in Section 4.

We assume knowledge of common graph operations such as k-sums and resulting partial
k-trees, a minor-closed class (partial 2-trees are series-parallel graphs with a forbidden minor
K4).

Theorem 8. [68] A graph H has a convexiﬁable Cayley conﬁguration space with parameters
F if and only if for each f ∈ F all the minimal 2-sum components of H ∪ F that contain both
endpoints of f are partial 2-trees. The Cayley conﬁguration space ΦF (H, δ) of a bar-joint
system or linkage (H, δ) is a convex polytope. When H ∪ F is a 2-tree, the bounding hyper-
planes of this polytope are triangle inequalities relating the lengths of edges of the triangles
in H ∪ F .

Note: A major advantage of the convex Cayley method is that sampling the conﬁguration
space can be eﬀected by standard methods of convex programming. Another advantage is
that the method is completely unaﬀected when δ are intervals rather than exact values [68].
A diﬀerent characterization of inherent Cayley convexity for a graph G on a set F of non-
edges as in the above section has been proven also for higher dimensions d [68], [19], showing
equivalence to a minor-closed property of d-ﬂattenability introduced in [7] and also for other,
non-euclidean distances (norms) in [69]. Any realization of H in a normed space can be
ﬂattened into d-dimensional normed space (in the same norm) maintaining the same edge
distances.

Theorem 9. [69] A graph H is d-ﬂattenable if and only if for every partition of H into
G ∪ F , G has a convex Cayley conﬁguration space on F in d-dimensions.

4.2.1 Fundamental regions of Active constraint regions

After G has been completed with the convexifying Cayley parameters F , the locally rigid
graph G∪ F typically loses symmetries present in G, i.e, the automorphism group is smaller.
However, F can be replaced by any set of edges π(F ) for π ∈ stabWautA (G). Each locally
complete Cayley conﬁguration in the active constraint region G is of the form δF (lengths
of edges in F , where G ∪ F is rigid). Each cartesian (assembly) conﬁguration within an
active constraint region with graph G corresponds bijectively to a globally complete Cayley
conﬁguration (δF , δH ) where G∪ F is rigid and G∪ F ∪ H is globally rigid (or even G∪ F ∪ H
is complete graph).

Thus when sampling the Cayley conﬁguration space on F , one can ﬁnd the boundaries
of the fundamental regions corresponding to the corresponding cartesian assembly conﬁgura-
tions as follows. For a Cayley conﬁguration δF , all its generically ﬁnitely many real/cartesian
conﬁgurations can be obtained as various corresponding values of δH , which include the values
of δπ(F ). The boundary of a fundamental region occurs during sampling when we encounter a
cartesian (assembly) conﬁguration c where the lengths of π(F ) correspond to already sampled
lengths of F .

Note that there could be a diﬀerent decomposition into fundamental regions, correspond-
ing to each cartesian conﬁguration (type) corresponding to the Cayley conﬁguration. For
example, for a diﬀerent conﬁguration c(cid:48) from the conﬁguration c above, the lengths of π(F )
may not correspond to already sampled lengths of F . Or, there could be another element
σ ∈ stabWautA (G), with σ (cid:54)= π where the lengths of σ(F ) in c(cid:48) could correspond to already
sampled lengths of F . In this manner, one can, in principle, algorithmically bound fundamen-
tal regions Ri
G of the active constraint region RG, by inspecting the assembly conﬁgurations

21

corresponding to the Cayley conﬁguration space on F , such that the active constraint region
RG is the union of the orbits of the regions Ri

G (under the action of stabWautA(G)).

Eﬃciently ﬁnding these fundamental regions as well as the number and sizes of their orbits
is an open question, whose answer would enormously reduce the complexity of conﬁgurational
entropy computations for assembly.

4.3 g-unﬁxable unlabeled trees

Call a tree g-unﬁxable if there is no leaf-labeling so that the resulting labeled tree is ﬁxed
by the permutation g, and let us say that a tree is G-unﬁxable if it is g-unﬁxable for every
nontrivial element of the group G. A study of unlabeled trees that are g-unﬁxable may lead
to relevant related results. These properties are interesting for at least two reasons. First,
they clarify the minimum quantiﬁable information in a labeled tree that is necessary to decide
if it is ﬁxed by a group element g: if the underlying unlabeled tree is g-unﬁxable, then the
information in the labeling is unnecessary to make this decision. This may lead to eﬃcient
algorithms that use properties of the automorphism group of the tree to help in deciding
whether a given labeled tree is ﬁxed by the given group.

4.4 Depth of an assembly pathway

A result of [12] tells us that the orbit size of an assembly pathway is at least the depth
of the pathway. The number of assembly pathways and orbit sizes of assembly trees that
constitute a pathway, must be taken into consideration in deﬁning any probability space over
pathways. If the dynamics of transitioning between states along a pathway and thereby the
density of states inﬂuencing the conﬁgurational integral computation [78] and other such
factors nullify the vast diﬀerences in symmetry-induced numeracy factors between pathways,
then that argument is yet to be made. The local rules theories using simple geometric
rules, ODEs and other ﬁrst principles physics based simulations of assembly of viral capsids
[65, 9, 10, 11, 64, 61, 80, 50, 60, 38, 40] have been used to obtain the assembly kinetics
including rates and concentrations of intermediates, and implicitly provide a probability
distribution over pathways. A cautionary note in [52] uses an ODE based model of reaction
kinetics to question simplistic models of assembly pathways. However, the model does not
contradict the simple and transparent thesis that when symmetric structures form from
identical units, the simple numeracy of orbit sizes of assembly trees must be taken into
consideration in any theory predicting of likely assembly pathways. This paper shows the
rich intricacy of possible symmetries at play. We in fact conjecture that this symmetry
factor increases with the depth of the pathway. Proving this conjecture would strengthen the
motivation for studying the symmetry factor.

4.5 Other questions
Theorems 5 and 6 as well as our successful computation eﬀort in the special case of |X| = 60
and T = 1 can serve as a motivation to revisit the following questions, ﬁrst raised in [12].

1. Given two symmetry invariant properties, how to compute the ratio of the number of
pathways that satisfy both of these properties to the number of symmetry classes that
satisfy only one of these properties?

2. What can we say about larger (icosahedrally) symmetric polyhedral graphs (larger T
numbers of viral capsids, for example), fullerenes and fulleroids and polyhedra with
diﬀerent symmetry groups? In such cases, the computations of Section 3 can also
be phrased as algorithmic questions, where asymptotic complexity of the algorithm is
expressed in terms of the number of facets of the polyhedron (or the T number).

22

3. To fully extend the techniques in Section 3 to the framework of Section 2, each sub-
assembly must be a rigid subgraph of the graph at the root. Some assembly trees fail
to satisfy the rigidity condition and can never occur (probability 0). Such assembly
trees are geometrically invalid. In addition, a valid assembly tree can be assigned a
non-zero probability according to how diﬃcult it is to ﬁnd a solution to the constraints
on each subassembly. Computing this probability - called the geometric stability factor
- is necessary to make the required predictions.

Dropping the rigidity requirement, but maintaining the subgraph (connectivity) re-
quirement, in [73], two of the authors study the number of assembly trees of graphs
on labeled vertices. In that model, each graph has a trivial automorphism group, but
the enumeration of assembly trees still leads to the use of a recent and very powerful
technique from the theory of D-ﬁnite power series in several variables.

Incorporating a nontrivial automorphism group of the graph could help understand
the role of capsid symmetry in the RNA assembly model of [71], which purports that
RNA viruses assemble by attaching to the internal (symmetry breaking) genome strand
since that would avoid having to deal with the prohibitive number of possible assembly
pathways. It should be noted that in our precise and formal theory of assembly trees
and their orbits (our pathways), assembly has an underlying partial order of stable
intermediates, that are inﬂuenced by the connectivity and rigidity, they are subgraphs
of the underlying polyhedral graph given by active constraints. The informal deﬁnition
of pathway in [71] is a linear order (in our language, an assembly tree that is a path)
given by a hamiltonian circuit in the viral polyhedral (dual) graph. We are not aware of
a clariﬁcation of why the interactions of a given monomer in the sequence to multiple
other monomers besides the previous one in the sequence would be insigniﬁcant.
If
not, the assembly tree would indeed be a partial order as in our case, and the tree
would have a minimum fan-in required for rigidity, reducing the number of assembly
trees signiﬁcantly and reducing the number of their symmetry classes or orbits further,
whereby this number alone is not a signiﬁcant reason to adopt a alternate model of
assembly (such as RNA strand attachment) that cuts down the possible pathways.

As future work, we also aim to apply the symmetry framework developed in this paper

to explain more experimental and theoretical results from previous literature.

5 Conclusions

In this paper, we developed a novel framework for symmetry in assembly under short range
potentials and considered the symmetry groups of various objects studied in previous liter-
ature on assembly, including assembly conﬁguration spaces, active constraint graphs, active
constraint regions, assembly trees and pathways. The new Theorem 4 which formalizes the
containment relations between stabilizer subgroups of active constraint graph and correspond-
ing assembly conﬁgurations. We then demonstrated the new symmetry concepts to compute
the sizes and numbers of orbits in two example settings appearing in previous work. The
methods can improve eﬃciency for large systems with multiple identical bunches and spheres
that have large order symmetry groups. The new symmetry framework helps formalize a
number of questions for future work.

6 Acknowledgment

We thank Rahul Prabhu for his feedback and assistance in paper preparation.

23

References

[1] Simon L Altmann. Induced representations in crystals and molecules. Academic Press,

1977.

[2] Nancy M Amato and Guang Song. Using motion planning to study protein folding

pathways. Journal of Computational Biology, 9(2):149–168, 2002.

[3] Ioan Andricioaei and Martin Karplus. On the calculation of entropy from covariance
matrices of the atomic ﬂuctuations. The Journal of Chemical Physics, 115(14):6289,
2001.

[4] Natalie Arkus, Vinothan N Manoharan, and Michael P Brenner. Minimal energy clusters
of hard spheres with short range attractions. Physical review letters, 103(11):118303,
2009.

[5] K Balasubramanian. Generating functions for the nuclear spin statistics of nonrigid

molecules. The Journal of Chemical Physics, 75(9):4572–4585, 1981.

[6] R. Baxter. Percus-Yevick equation for hard spheres with surface adhesion. J. Chem.

Phys., 49, 1968.

[7] Maria Belk (Sloughter) and Robert Connelly. Realizability of graphs. Discrete Compu-

tational Geometry, 37(2):125–137, 2007.

[8] Daniel J Beltran-Villegas and Michael A Bevan. Free energy landscapes for colloidal

crystal assembly. Soft Matter, 7(7):3280–3285, 2011.

[9] B. Berger, P. Shor, J. King, D. Muir, R. Schwartz, and L. Tucker-Kellogg. Local rule-

based theory of virus shell assembly. Proc. Natl. Acad. Sci. USA, 91:7732–7736, 1994.

[10] B Berger and PW Shor. On the mathematics of virus shell assembly. 1994.

[11] Bonnie Berger and Peter W Shor. Local rules switching mechanism for viral shell ge-

ometry. In Proc. 14th Biennial Conference on Phage/Virus Assembly, 1995.

[12] Mikl´os B´ona and Meera Sitharam. The inﬂuence of symmetry on the probability of as-
sembly pathways for icosahedral viral shells. Computational and Mathematical Methods
in Medicine, 9(3-4):295–302, 2008.

[13] Mikl´os B´ona, Meera Sitharam, and Andrew Vince. Enumeration of viral capsid assembly
pathways: Tree orbits under permutation group action. Bulletin of mathematical biology,
73(4):726–753, 2011.

[14] Danail Bonchev and DH Rouvray. Chemical group theory: techniques and applications,

volume 4. Taylor & Francis, 1995.

[15] Philip R Bunker and Per Jensen. Molecular symmetry and spectroscopy. NRC Research

Press, 1998.

[16] Philip R Bunker and Per Jensen. Fundamentals of molecular symmetry. CRC Press,

2004.

[17] Florent Calvo, Jonathan PK Doye, and David J Wales. Energy landscapes of colloidal
clusters: Thermodynamics and rearrangement mechanisms. Nanoscale, 4(4):1085–1100,
2012.

[18] Zita Carvalho-Santos, Pedro Machado, Pedro Branco, Filipe Tavares-Cadete, Ana
Rodrigues-Martins, Jos´e B Pereira-Leal, and M´onica Bettencourt-Dias. Stepwise evolu-
tion of the centriole-assembly pathway. Journal of cell science, 123(9):1414–1426, 2010.

24

[19] Jialong Cheng. Towards Combinatorial Characterizations and Algorithms for Bar-And-
Joint Independence and Rigidity in 3D and Higher Dimensions. PhD thesis, University
of Florida, 2013.

[20] F Albert Cotton. Chemical applications of group theory. John Wiley & Sons, 2008.

[21] Jonathan PK Doye, Mark A Miller, and David J Wales. The double-funnel energy
landscape of the 38-atom lennard-jones cluster. The Journal of chemical physics,
110(14):6896–6906, 1999.

[22] Jonathan PK Doye and David J Wales. Structural consequences of the range of the
interatomic potential a menagerie of clusters. Journal of the Chemical Society, Faraday
Transactions, 93(24):4233–4243, 1997.

[23] David Gfeller, David Morton De Lachapelle, Paolo De Los Rios, Guido Caldarelli, and
Francesco Rao. Uncovering the topology of conﬁguration space networks. Physical
Review E - Statistical, Nonlinear and Soft Matter Physics, 76(2 Pt 2):026113, 2007.

[24] Jack E. Graver, Brigitte Servatius, and Herman Servatius. Combinatorial Rigidity. Grad-

uate Studies in Math., AMS, 1993.

[25] Theo Hahn, Uri Shmueli, Arthur James Cochran Wilson, and Edward Prince. Interna-

tional tables for crystallography. D. Reidel Publishing Company, 2005.

[26] Martha S Head, James A Given, and Michael K Gilson. Mining minima: Direct compu-
tation of conformational free energy. The Journal of Physical Chemistry A, 101(8):1609–
1618, 1997.

[27] Ulf Hensen, Oliver F Lange, and Helmut Grubm¨uller. Estimating absolute conﬁgura-
tional entropies of macromolecules: The minimally coupled subspace approach. PLoS
ONE, 5(2):8, 2010.

[28] Vladimir Hnizdo, Eva Darian, Adam Fedorowicz, Eugene Demchuk, Shengqiao Li, and
Harshinder Singh. Nearest-neighbor nonparametric method for estimating the conﬁgu-
rational entropy of complex molecules. Journal of Computational Chemistry, 28(3):655–
668, 2007.

[29] Vladimir Hnizdo, Jun Tan, Benjamin J Killian, and Michael K Gilson. Eﬃcient calcu-
lation of conﬁgurational entropy from molecular simulations by combining the mutual-
information expansion and nearest-neighbor methods. Journal of Computational Chem-
istry, 29(10):1605–1614, 2008.

[30] C. M. Hoﬀmann, A. Lomonosov, and M. Sitharam. Planning geometric constraint de-
compositions via graph transformations. In AGTIVE ’99 (Graph Transformations with
Industrial Relevance), Springer lecture notes, LNCS 1779, eds Nagl, Schurr, Munch,
pages 309–324, 1999.

[31] C. M. Hoﬀmann, A. Lomonosov, and M. Sitharam. Decomposition of geometric con-
straints systems, part i: performance measures. Journal of Symbolic Computation, 31(4),
2001.

[32] C. M. Hoﬀmann, A. Lomonosov, and M. Sitharam. Decomposition of geometric con-
straints systems, part ii: new algorithms. Journal of Symbolic Computation, 31(4),
2001.

[33] Miranda Holmes-Cerfon, Steven J Gortler, and Michael P Brenner. A geometrical ap-
proach to computing free-energy landscapes from short-ranged potentials. Proceedings
of the National Academy of Sciences, 110(1):E5–E14, 2013.

25

[34] Robert S Hoy. Structure and dynamics of model colloidal clusters with short-range

attractions. Physical Review E, 91(1):012303, 2015.

[35] Robert S. Hoy, Jared Harwayne-Gidansky, and Corey S. O’Hern. Structure of ﬁnite
sphere packings via exact enumeration: Implications for colloidal crystal nucleation.
Physical Review E, 85(5):051403, May 2012.

[36] Wonpil Im, Michael Feig, and Charles L Brooks. An implicit membrane generalized
Born theory for the study of structure, stability, and interactions of membrane proteins.
Biophysical Journal, 85(5):2900–2918, 2003.

[37] L´eonard Jaillet, Francesc J Corcho, Juan-Jes´us P´erez, and Juan Cort´es. Randomized
tree construction algorithm to explore energy landscapes. Journal of computational
chemistry, 32(16):3464–3474, 2011.

[38] J E Johnson and J A Speir. Quasi-equivalent viruses: a paradigm for protein assemblies.

J. Mol. Biol., 269:665–675, 1997.

[39] M. Karplus and J.N. Kushick. Method for estimating the conﬁgurational entropy of

macromolecules. Macromolecules, 14(2):325–332, 1981.

[40] Thomas Keef, Cristian Micheletti, and Reidun Twarock. Master equation approach to

the assembly of viral capsids. Journal of theoretical biology, 242(3):713–721, 2006.

[41] Adalbert Kerber, Reinhard Laue, Markus Meringer, Christoph R¨ucker, and Emma Schy-
manski. Mathematical Chemistry and Chemoinformatics: Structure Generation, Eluci-
dation and Quantitative Structure-Property Relationships. Walter de Gruyter, 2013.

[42] Siddique J Khan, O L Weaver, C M Sorensen, and A Chakrabarti. Nucleation in short-
the ACS

range attractive colloids: ordering and symmetry of clusters. Langmuir :
journal of surfaces and colloids, 28(46):16015–21, November 2012.

[43] Benjamin J Killian, Joslyn Yundenfreund Kravitz, and Michael K Gilson. Extraction
of conﬁgurational entropy from molecular simulations via an expansion approximation.
The Journal of chemical physics, 127(2):024107, 2007.

[44] Bracken M King, Nathaniel W Silver, and Bruce Tidor. Eﬃcient calculation of molecular
conﬁgurational entropies using an information theoretic approximation. The Journal of
Physical Chemistry B, 116(9):2891–2904, 2012.

[45] Halim Kusumaatmaja, Chris S Whittleston, and David J Wales. A local rigid body
framework for global optimization of biomolecules. Journal of Chemical Theory and
Computation, 8(12):5159–5165, 2012.

[46] Zaizhi Lai, Jiguo Su, Weizu Chen, and Cunxin Wang. Uncovering the properties of
energy-weighted conformation space networks with a hydrophobic-hydrophilic model.
International Journal of Molecular Sciences, 10(4):1808–1823, 2009.

[47] T Lazaridis and M Karplus. Eﬀective energy function for proteins in solution. Proteins,

35(2):133–152, 1999.

[48] Themis Lazaridis. Eﬀective energy function for proteins in lipid membranes. Proteins,

52(2):176–192, 2003.

[49] Shawn Martin, Aidan Thompson, Evangelos A Coutsias, and Jean-Paul Watson. Topol-
ogy of cyclo-octane energy landscape. The journal of chemical physics, 132(23):234115,
2010.

26

[50] C J Marzec and L A Day. Pattern formation in icosahedral virus capsids: the papova

viruses and nudaurelia capensis β virus. Biophys, 65:2559–2577, 1993.

[51] M. Miller and D. Frenkel. Competition of percolation and phase separation in a ﬂuid of

adhesive hard spheres. Phys. Rev. Lett., 90(13), 2003.

[52] Navodit Misra, Daniel Lees, Tiequan Zhang, and Russell Schwartz. Pathway complexity
of model virus capsid assembly systems. Computational and Mathematical Methods in
Medicine, 9(3-4):277–293, 2008.

[53] John WR Morgan and David J Wales. Energy landscapes of planar colloidal clusters.

Nanoscale, 6(18):10717–10726, 2014.

[54] Mark T Oakley, Roy L Johnston, and David J Wales. Symmetrisation schemes for global
optimisation of atomic clusters. Physical Chemistry Chemical Physics, 15(11):3965–3976,
2013.

[55] A. Ozkan and M.Sitharam. Easal: Eﬃcient atlasing and search of assembly landscapes.

In Proceedings of BiCoB Symposium, 2011.

[56] A. Ozkan, J. Pence, J. Peters, and M. Sitharam. Easal: Theory and algorithms for
journal article, in preparation,

eﬃcient atlasing and search of assembly landscapes.
2010.

[57] George P´olya and Ronald C Read. Combinatorial enumeration of groups, graphs, and

chemical compounds. Springer-Verlag New York, Inc., 1987.

[58] Josep M Porta, Llu´ıs Ros, Federico Thomas, Francesc Corcho, Josep Cant´o, and
Juan Jes´us P´erez. Complete maps of molecular-loop conformational spaces. Journal
of computational chemistry, 28(13):2170–89, October 2007.

[59] Diego Prada-Gracia, Jes´us G´omez-Gardenes, Pablo Echenique, Fernando Falo, et al.
Exploring the free energy landscape: From dynamics to networks and back. PLoS
Comput Biol, 5(6):e1000415, 06 2009.

[60] D Rapaport, J Johnson, and J Skolnick. Supramolecular self-assembly: molecular dy-

namics modeling of polyhedral shell formation. Comp Physics Comm, 1998.

[61] V S Reddy, H A Giesing, R T Morton, A Kumar, C B Post, C L Brooks, and J E Johnson.
Energetics of quasiequivalence: computational analysis of protein-protein interactions in
icosahedral viruses. Biophys, 74:546–558, 1998.

[62] Victor R¨uhle, Halim Kusumaatmaja, Dwaipayan Chakrabarti, and David J Wales. Ex-
ploring energy landscapes: Metrics, pathways, and normal-mode analysis for rigid-body
molecules. Journal of Chemical Theory and Computation, 9(9):4026–4034, 2013.

[63] Gregory S. and Chirikjian. Chapter four - modeling loop entropy. In Michael L. Johnson
and Ludwig Brand, editors, Computer Methods, Part C, volume 487 of Methods in
Enzymology, pages 99 – 132. Academic Press, 2011.

[64] R Schwartz, PE Prevelige, and B Berger. Local rules modeling of nucleation-limited

virus capsid assembly. Technical report, MIT-LCS-TM-584, 1998.

[65] R Schwartz, PW Shor, PE Prevelige, and B Berger. Local rules simulation of the kinetics

of virus capsid self-assembly. Biophysical journal, 75:2626–2636, 1998.

[66] M. Sitharam and M. Agbandje-McKenna. Modeling virus assembly using geometric
constraints and tensegrity: avoiding dynamics. 13(6):1232–1265, 2006. Journal of Com-
putational Biology.

27

[67] M. Sitharam and M. Agbandje-McKenna. Modeling virus assembly using geomet-
ric constraints and tensegrity:avoiding dynamics. Journal of Computational Biology,
13(6):1232–1265, 2006.

[68] M. Sitharam and H.Gao. Characterizing graphs with convex cayley conﬁguration spaces.

Discrete and Computational Geometry, 2010.

[69] Meera Sitharam and Joel Willoughby. On ﬂattenability of graphs. In Francisco Botana
and Pedro Quaresma, editors, Automated Deduction in Geometry, volume 9201 of Lec-
ture Notes in Computer Science, pages 129–148. Springer International Publishing, 2015.

[70] G. Stell. Sticky spheres and related systems. J. Stat. Phys., 63, 1991.

[71] Peter G Stockley, Reidun Twarock, Saskia E Bakker, Amy M Barker, Alexander Boro-
davka, Eric Dykeman, Robert J Ford, Arwen R Pearson, Simon EV Phillips, Neil A
Ranson, et al. Packaging signals in single-stranded rna viruses: nature’s alternative to
a purely electrostatic assembly mechanism. Journal of biological physics, 39(2):277–287,
2013.

[72] G Varadhan, Y J Kim, S Krishnan, and D Manocha. Topology preserving approximation

of free conﬁguration space. Robotics, (May):3041–3048, 2006.

[73] Andrew Vince and Mikl´os B´ona. The number of ways to assemble a graph. The Electronic

Journal of Combinatorics, 19(4):P54, 2012.

[74] D. J. Wales. Energy landscapes: Applications to clusters, biomolecules and glasses.

Cambridge University Press, 2003.

[75] David J Wales. Energy landscapes: calculating pathways and rates.

International

Reviews in Physical Chemistry, 25(1-2):237–282, 2006.

[76] David J Wales. Energy landscapes of clusters bound by short-ranged potentials.

ChemPhysChem, 11(12):2491–2494, 2010.

[77] David J Wales. Surveying a complex potential energy landscape: Overcoming broken

ergodicity using basin-sampling. Chemical Physics Letters, 584:1–9, 2013.

[78] DJ Wales. Perspective: Insight into reaction coordinates and dynamics from the poten-

tial energy landscape. The Journal of chemical physics, 142(13):130901, 2015.

[79] Yuan Yao, Jian Sun, Xuhui Huang, Gregory R Bowman, Gurjeet Singh, Michael Lesnick,
Leonidas J Guibas, Vijay S Pande, and Gunnar Carlsson. Topological methods for
exploring low-density states in biomolecular folding pathways. The Journal of chemical
physics, 130(14):144115, 2009.

[80] A Zlotnick. To build a virus capsid: an equilibrium model of the self assembly of

polyhedral protein complexes. J. Mol. Biol., 241:59–67, 1994.

28

