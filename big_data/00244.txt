Caching Incentive Design in Wireless D2D
Networks: A Stackelberg Game Approach

Zhuoqun Chen, Yangyang Liu, Bo Zhou and Meixia Tao

Dept. of Electronic Engineering, Shanghai Jiao Tong University, Shanghai, China

Email: {billchen, bingpumpkn, b.zhou, mxtao}@sjtu.edu.cn

6
1
0
2

 
r
a

M
1

 

 
 
]
T
I
.
s
c
[
 
 

1
v
4
4
2
0
0

.

3
0
6
1
:
v
i
X
r
a

Abstract—Caching in wireless device-to-device (D2D) networks
can be utilized to ofﬂoad data trafﬁc during peak times. However,
the design of incentive mechanisms is challenging due to the
heterogeneous preference and selﬁsh nature of user terminals
(UTs). In this paper, we propose an incentive mechanism in which
the base station (BS) rewards those UTs that share contents with
others using D2D communication. We study the cost minimization
problem for the BS and the utility maximization problem for
each UT. In particular, the BS determines the rewarding policy
to minimize his total cost, while each UT aims to maximize
his utility by choosing his caching policy. We formulate the
conﬂict among UTs and the tension between the BS and the
UTs as a Stackelberg game. We show the existence of the
equilibrium and propose an iterative gradient algorithm (IGA)
to obtain the Stackelberg Equilibrium. Extensive simulations
are carried out to evaluate the performance of the proposed
caching scheme and comparisons are drawn with several baseline
caching schemes with no incentives. Numerical results show that
the caching scheme under our incentive mechanism outperforms
other schemes in terms of the BS serving cost and the utilities
of the UTs.

I. INTRODUCTION

The mobile data trafﬁc is growing dramatically in recent
years [1]. To deal with this exponential growth of trafﬁc,
content caching is introduced because of the relatively low
storage cost of wireless devices [2]. Helper stations or user
terminals (UTs) decide what contents to cache and proactively
fetch them via backhaul during off-peak times, and transmit
the content to requesters during peak times. In this way,
caching ofﬂoads the network trafﬁc during peak times and
reduces UTs’ average delay cost.

Device-to-device (D2D) communication [3] can be utilized
to enhance the beneﬁts of caching. D2D communication
enables a UT to communicate directly with other UTs in
his vicinity. When a UT’s content request cannot be satisﬁed
by his local cache, any of his neighbors who cache that
content can become the content server and transmit the content
using D2D communication. This technique improves spectrum
utilization, increases network throughput, and reduces average
access delay for UTs [4]. However, in reality, UTs are selﬁsh
and only care about their own preferences. Each UT intends to
cache his favorite contents and also hopes that his neighbors
could cache his other favorite contents as many as possible.

This work is supported by the National Natural Science Foundation of

China under grants 61571299 and 61329101.

Consider a simple example of D2D caching network with 4
UTs and 10 contents {1, · · · , 10}. Let the size of each content
and the size of each UT’s cache be 1. Assume that all UTs can
communicate with each other. Also assume that the content
preference ranking of UT 1 and UT 2 are (1, 2, 3, · · · , 10),
(10, 9, 8, · · · , 1), respectively. Naturally, UT 1 would cache
content 1 and wishes his three neighbors to cache contents 2,
3 and 4, whereas UT 2 would cache content 10 and hopes that
his neighbors would cache contents 9, 8 and 7. The difference
in preference causes conﬂict of caching interest among UTs,
which cannot be reconciled without intervention.

On the other hand, the base station (BS) aims to minimize
the trafﬁc load of serving the UTs, thus reducing the backhaul
load and the transmission cost. This goal is equivalent to
maximizing the chances of D2D communications among UTs.
The nature of selﬁshness of UTs however, becomes the major
obstacle for the BS to achieve this goal. Consider a D2D
network with selﬁsh UTs. Each UT cares merely about his
own preference and only caches the contents he likes most.
This may cause duplicate caching and underutilization of the
storage space for all UTs. Consequently, the BS is overloaded
by UTs’ requests and the UTs suffer from larger delays.
Therefore, it is essential for the BS to introduce incentive
mechanisms into the network to motivate UTs to cache in
a way to promote D2D communication.

The interaction between the BS and the UTs, two rational
entities with conﬂicting objectives, is often characterized using
game theory. Game theory is the study of mathematical
models of conﬂict and cooperation between intelligent rational
decision-makers [5]. Speciﬁcally, the hierarchical relationship
between the BS and the UTs best suits the Stackelberg game
model. In this game, the BS is the leader and decides the
incentive mechanism, i.e. the rewarding policy. The UTs are
the followers and respond to the rewarding policy with their
caching decisions of what contents to cache.

Various works have modeled the interaction between the
BS and end-users by Stackelberg game models [6], [7].
However, limited work has addressed the circumstance where
the utility of end-users are coupled. In other words, conﬂicts
also exist among the followers [8]. In this paper, we model
the interactions among the UTs as a UT sub-game and analyze
the existence of the Nash Equilibrium of the sub-game.

The contributions of this paper are as follows:
• We propose an incentive mechanism for UTs to cache

in order to promote chances of D2D communication. We
model the interaction between the BS and the UTs as
a Stackelberg game, and the conﬂicts among UTs as a
sub-game of the Stackelberg game.

• We analyze our incentive mechanism in a special case of
two UTs and two contents to obtain some insights of the
effect of the rewarding policy of the BS on the caching
decisions of the UTs.

• We propose an iterative gradient algorithm (IGA) to
obtain the Stackelberg Equilibrium (SE). The optimal
rewarding policy of the BS and the corresponding caching
policies of all UTs are achieved at the SE.

• We verify the effectiveness of our proposed caching
scheme using the IGA algorithm by extensive simula-
tions. Numerical results show that our scheme outper-
forms other caching schemes with no incentives in terms
of BS serving cost and the utilities of UTs .

The rest of the paper is organized as follows. Section
II presents the system model. In Section III, we give the
formulation of Stackelberg game. Section IV presents a special
case with two UTs and two contents. We present the Iter-
ative Gradient Algorithm in Section V. Section VI provides
performance evaluation results, and we conclude the paper in
Section VII. The important notations used in this paper are
summarized in Table I.

II. SYSTEM MODEL

A. Network Model

We consider a single cell wireless D2D network consisting
of one BS and N UTs. Let N = {1, 2, · · · , N } denote the set
of UTs. Let Ni ⊆ N \ {i} denote the set of neighbors of UT
i. Each UT can communicate and share contents directly with
all his neighbors via D2D links. Denote N +
i = Ni ∪ {i}. We
denote di,j as the delay cost between UT i and UT j using
D2D communication. With abuse of notation, we set di,i = 0
for all i ∈ N .

B. Cache Model

Let M = {1, 2, · · · , M } denote the set of the contents in
the network. Each UT has a limited cache size, denoted as ci.
We represent the cache states of UTs by using an N × M ma-
trix X, where xm
indicates the proportion (between 0 and 1)
i
of content m that UT i caches. We assume that all the contents
are encoded by rateless MDS coding (e.g., using Raptor codes
[9]). With MDS coding, a content can be retrieved given that
the receiver has received more than a certain number of bits of
the content in any order. Therefore, a request of a UT can be
satisﬁed via multiple D2D communications between various
other UTs, as long as the total amount of the received bits
exceeds a proportion-threshold. Without loss of generality, we
assume that this proportion-threshold is 1 for any content to
be successfully retrieved.

We consider a heterogeneous request model, where the
preferences of the UTs are different and hence the popularity
of one content varies from one UT to another. Let pm
i denote
the probability of UT i requesting content m, where i ∈ N and

TABLE I: LIST OF IMPORTANT NOTATIONS

2

M = {1, 2, · · · , M }
N = {1, 2, · · · , N }

Ni ⊆ N \ {i}

ci
sm

i )m∈M ∈ [0, 1]1×M
xi = (xm
X = (xi)i∈N ∈ [0, 1]N ×M

di,j

di,0

(i)j

[i]j

pm
i

r

ws

wd

set of contents

set of UTs

set of neighbors of UT i

cache size of UT i
size of content m

xm
i

is the proportion of

content m that is cached by UT i.
delay cost of transmitting one bit

between UT i and UT j

delay cost of transmitting one bit

from BS to UT i

UT index with the ith lowest
delay cost to UT j, (1)j = j
ranking of di,j in (dl,j )
l∈N +
j

,

[j]j = 1

probability that UT i
requests content m

unit reward paid from BS to UT

for D2D service

unit serving cost of BS
for serving UTs’ requests

weight of delay cost

m=1 pm

m ∈ M. For each UT i, we require PM

i = 1. We also
assume that UTs and BS know the preferences of every UT
i )i∈N ,m∈M is a common knowledge within
perfectly, i.e. (pm
the network. Note that, the preference of each UT evolves
at a timescale much slower than the timescale of content
requesting, and it can be learned accurately by monitoring
his activity [2].
C. Service Model

Each UT can be a requester and a content provider. For
instance, we consider UT i requesting for content m. He
ﬁrst checks his own cache. If there exists a whole copy of
content m in his cache, the request is satisﬁed with no delay.
Otherwise, he asks for his neighbors who cache (a portion of)
content m and uses D2D service to retrieve the content.

i

To serve the request of UT i, we sort the D2D link delay
costs (di,j)j∈N +
in an increasing order. Let (i)j denote the
index of the UT with the ith lowest delay cost to UT j. Note
that (1)j = j. First, UT i checks his own cache and receives
the service if certain portions of the content are cached. If this
service is not enough to satisfy the request, the UT with the
second lowest delay cost serves UT i, i.e., the nearest UT of
UT i. This process continues until UT i has obtained as many
bits as the proportion-threshold for content m (including the
portion in his own cache).

If all other UTs’ D2D service is still not enough to recover
the requested content for UT i, the rest part of the content
is ﬁnally served by the BS. Let di,0 denote the delay cost
between UT i and the BS. We assume that di,0 ≫ di,j, for
any UT j, indicating that the delay cost of service from the
BS is much larger than that of any D2D service.

III. STACKELBERG GAME FORMULATION

A. Incentive Mechanism

We design an incentive mechanism under which the BS
rewards the UTs based on the amount of content they serve

their neighbor UTs. The mechanism can enhance the chances
of D2D transmission between UTs and hence release the
burden on BS. The UTs can beneﬁt from receiving rewards by
serving other UTs and enjoying smaller delay with more D2D
service. The BS can beneﬁt from reducing the workload and
thus lowering the operational cost. Note that the reward could
be of any form, such as monetary value or virtual credits, and
is paid to the UTs under speciﬁc protocols, all of which are
out of the scope of this paper.

Stackelberg game is an extension of non-cooperative game
with a bi-level hierarchy. Stackelberg game models a game
between two groups of players, namely leaders and follow-
ers. The leaders have the privilege of acting ﬁrst while the
followers act according to the leaders’ actions.

We formulate our problem into a single-leader multi-
follower Stackelberg game. The BS acts as the leader and the
UTs are the followers. The BS ﬁrst announces the unit reward
r of caching for the purpose of D2D. The UTs then determine
their caching strategies to maximize their utilities based on
the announced reward. The Stackelberg game consists of two
sub-problems: the UT sub-game and the BS optimization.

B. UT Sub-game

In the Stackelberg formulation, each UT ﬁnds his optimal
caching policy based on the unit reward announced by the BS,
as well as the caching policy of all other UTs. For the UT sub-
game, every UT intends to maximize his utility Ui which is
the difference of reward received from BS and his total delay
cost. The reward a UT receives from the BS is proportional
to the total amount of content he serves his neighbors. The
caching placement problem of UT i is given by

max

xi

Ui = Xm∈M Xj∈Ni

xm
i sm ≤ ci

pm
j rsmF m

i,j − wd Xm∈M

s.t. Xm∈M

xi ∈ [0, 1]1×M

i sm ¯Dm
pm

i

(1)

(2)

(3)

[i]j −1
k=1 xm

i,j = minnxm

i , maxn0, 1 −P

where F m
portion of content m that UT i serves UT j via D2D
communication, and wd is the weight of the delay cost. ¯Dm
i
is the average delay of UT i requesting content m. We adopt
the notations in [2] to deﬁne the UT’s delay cost. The average
delay of UT i requesting content m is given by

(k)joo is the

i

¯Dm,1
...

¯Dm,j

i

...

if

j−1

Xk=1

xm

(k)i

< 1,

¯Dm,|Ni|+1

i

if

if xm

(1)i

≥ 1
...

j

Xk=1

Ni

Xk=1

xm

(k)i

≥ 1

...

xm

(k)i

< 1

¯Dm

i =




3

i

where ¯Dm,j
denotes the average delay cost per bit for UT i to
download content m from his best j neighbors, and is given
by

¯Dm,j

i =

xm

(k)i

d(k)i,i + 1 −

j−1

Xk=1

xm

(k)i! d(j)i ,i.

j−1

Xk=1

(4)

Constraint (2) indicates that the amount of content in each
UT’s cache cannot exceed his cache size. Constraint (3)
requires that a UT cannot cache more than the size of a
content.

C. BS Optimization

In our Stackelberg game formulation, the BS makes the
ﬁrst move by determining the unit reward of caching for D2D
communications to minimize his total cost C. The total cost C
is made up of two parts: the reward cost and the serving cost.
The reward cost is the total amount of reward given to the
UTs and the serving cost is the cost of serving all remaining
requests of the UTs. We assume that the reward that UT i
receives for serving UT j is proportional to the amount of
content UT i actually serves. Hence, the BS’s total cost is
given by

C = Xm∈MXi∈N

pm

rF m
j,i

i sm" Xj∈Ni
+ wsdi,0 maxn0, 1 − Xj∈N +

i

xm

j o#,

(5)

where ws is the unit serving cost for BS. The serving cost of
BS to serve UT i is proportional to the delay cost between
UT i and the BS.

The BS tries to ﬁnd the optimal unit reward r∗ that
minimizes the cost C. Therefore, the optimal rewarding policy
for BS is

r∗ := arg min
r≥0

C

(6)

D. Nash Equilibrium of UT Subgame

We now show the existence of subgame perfect Nash

Equilibrium for the UT sub-game between N followers.

Proposition 1. There exists at least one Nash Equilibrium for
the UT sub-game.

Proof: The players’ strategy space is a closed bounded
convex set. Since ¯Dm
is a convex function of X [2], the utility
i
function of UT i is concave in xi. The utility function Ui
is also continuous in X. Therefore, the UT sub-game is a
concave game [10]. By Schauder ﬁxed-point theorem [11],
the existence of Nash Equilibrium in UT sub-game is proved.

E. Stackelberg Equilibrium

The purpose of the proposed game is to reach the Stack-
elberg Equilibrium (SE), from which neither the leader (BS)
nor the followers (UTs) have any incentive to deviate. The SE
for the proposed game is deﬁned as follows.

Deﬁnition 1. Let r∗ be a solution to the BS optimization and
i = xi(r∗) be a solution to the UT sub-game of the UT i
let x∗
given the BS reward r∗. Then, (r∗, X∗) is SE for the proposed
Stackelberg game if for any (r, X) in the feasible region, the
following conditions are satisﬁed:

C(r∗, X∗) ≤ C(r, X∗),
−i, r∗) ≥ Ui(xi, x∗

−i, r∗), ∀i ∈ N

Ui(x∗

i , x∗

(7)

(8)

IV. SPECIAL CASE WITH TWO UTS AND TWO CONTENTS
We now consider a special case of two UTs (N = 2) and
two contents (M = 2) to gain some insights into the impact of
reward value r towards UTs’ caching decisions in our model.
We assume that the two contents have the same size, i.e., s1 =
s2 = 1, and the cache size for each UT is 1, i.e., c1 = c2 = 1.
Here we only investigate the caching policies of UT 1 where
UT 2 has the same properties as UT 1.

First, we rewrite the utility function of UT 1 (UT 2 has the

same format),

2

2 r min{xm

1 , 1 − xm

2 }−

1 max{(1 − xm

1 ) d1,2, (1 − xm

1 − xm

2 ) d1,0 + xm

max

wdpm
s.t. x1

Xm=1(cid:2)pm

1 + x2

1 ≤ 1

(9)

2 d1,2}(cid:3)

(10)

Then, we have the following properties.

Theorem 1. For the case of N = 2, M = 2, s1 = s2 = 1
and c1 = c2 = 1, the optimal caching policy of UT 1 is as
follows.

• If 0 ≤ r <(cid:12)(cid:12)(cid:12)

p1
1−p2
p1
2−p2

1

2(cid:12)(cid:12)(cid:12)

UT 1 is to completely cache content m∗
by

wdd1,0, the optimal caching policy of
1, which is given

m∗

1 = arg max
k=1,2

pk
1.

(11)

• If r ≥(cid:12)(cid:12)(cid:12)

p1
1−p2
p1
2−p2

1

2(cid:12)(cid:12)(cid:12)

1 is to completely cache content m∗

wdd1,0, the optimal caching policy of UT
1, which is given by
pk
(12)
2.

1 = arg max
k=1,2

m∗

In both cases, UT 2 caches the content which is not cached

by UT 1.

Proof: By observing the objective function in (9), we only

need to consider have the following two cases.
2 ≤ 1 and x2

2 ≤ 1, the
optimization problem for UT 1 in (9) can be transformed into:

In the ﬁrst case, i.e., x1

1 + x2

1 + x1

2

max

(pm

2 r + wdpm

1 d1,0)xm

1 + (d1,0 − d1,2)wdpm

1 xm
2

Xm=1

− wdpm
s.t. 0 ≤ x1

1 d1,0
1 + x2

1 ≤ 1

We can see that, when r = 0, then the optimal solution for
1 ≤ 0, and
1) = (0, 1) otherwise. When r 6= 0, the optimal solution
1) > 0 and
1, x2

the above problem is (x1
(x1
1, x2
is (x1

1) = (1, 0) if (p1

1) = (1, 0) if p1

2)r + wdd1,0(p1

1 − p2

2 − p2

1 − p2

1, x2

4

1

(p1

1, x2

2(cid:12)(cid:12)(cid:12)

r −(cid:12)(cid:12)(cid:12)

2) ≥ 0, and (x1
2 − p2
p1
1−p2
p1
2−p2

1) = (0, 1) otherwise. That is, when
wdd10 > 0, the UT 1 would cache the content
2 ≤ 1
2 ≤ 1, we know that UT 2 would cache the content

according to UT 2’s preference. Moreover, since x1
and x2
which is different from UT 1.
In the second case, i.e., x1

1 + x2
optimization problem in (9) can be transformed into:

2 ≤ 1 and x2

2 ≥ 1, the

1 + x1

1 + x1

1 + x2

max wdp1

(p2

1d1,2x1
2r + wdp2
1 + x2

1 − p1
1d1,0)x2
1 ≤ 1

s.t. 0 ≤ x1

2rx1

1 − p1

2rx1
2 − wdp1
1 + (d1,0 − d1,2)wdp1

1d1,2 + p1
1x2

2r+
2 − wdp2
1
(15)

This objective function is a linear combination of x1
1 and
1. We can easily observe that, the maximum value in the
x2
second case is smaller than or equal to that in the ﬁrst case.

We complete the proof.

Remark 1. When r is small, that is, there is few incentive in
the wireless D2D caching network, then each UT only caches
the content according to his own interest. When r is very large,
that is, there are enough incentives, then each UT only caches
the content according to the interest of the other UT.

V. ITERATIVE GRADIENT ALGORITHM

In this section, we present an iterative gradient algorithm

(IGA) to obtain the SE for the D2D caching game.

Algorithm 1 Iterative Gradient Algorithm

for each UT i ∈ N and content m ∈ M do

−i)−Ui(X)
δ

i + gradm

i × γ, ∀i ∈ N , m ∈ M

m=1 xm

i sm > ci then

xi ← ωxi so that cache size constraint is satisﬁed

end if
Repeat steps from 3 to 9 until convergence

gradm

i = Ui(xi+δ, x

i ← xm

end for
Update X: xm

if ∃i such that PM

1: Initialize cache state X
2: function UT GAME(X, r)
3:
4:
5:
6:
7:
8:
9:
10:
11: end function
12:
13: function BS OPT(X, r)
14:
15:
16:
17:
18:

BS set r = 0
UT GAME(X, r)
Compute BS cost C(X, r)
r ← r + ∆r
Repeat steps from 15 to 17 until C starts to increase

w.r.t r

19: end function

The iterative gradient algorithm involves numerous rounds
of interactions between the BS and the UTs. The BS starts
by setting the unit reward to zero and starts the game. At
the followers’ side,
is to achieve the sub-game
Nash equilibrium. We use gradient projection method to reach
the equilibrium point, where γ is the step size. All UTs
simultaneously update their cache state. After each update of

the goal

(13)
(14)

cache state xi, we have to check whether xi still belongs to
the feasible domain. When all UTs’ utilities and cache states
converges, the UT sub-game obtains its equilibrium point.

The BS computes his total cost based on the cache state of
UTs. The BS then increases the unit reward r by a tiny amount
∆r and proceeds the above interactions iteratively. The BS
total cost C decreases with regard to r when r is small. The
decrease of BS total cost is due to the changing of caching
policy of UTs. The UTs are motivated by higher rewards to
cache more amount of contents to serve other UTs, and thus
reduce the serving cost of BS. This decreasing trend however,
cannot last for long since the beneﬁts BS can get from “better”
cache states is bounded. After a number of iterations, the rapid
increase of reward cost would ﬁnally outstrip the decrease of
serving cost. The BS has to ﬁnd the point where his total cost
C ceases to decrease, which is the SE of the proposed game.
Note that the UTs’ cache state can be initialized using
different approaches, such as initializing to zero or caching
the favorite contents. The choice of initialization method does
not affect the convergence in UT Sub-game. In addition, the
values of δ, γ and ∆r should be sufﬁciently small to guarantee
the convergence of the algorithm.

VI. PERFORMANCE EVALUATION

In this section, we present the numerical results to evaluate
the effectiveness of the proposed Stackelberg game model and
the algorithm.

A. Simulation Setup

For the numerical analysis, we consider a D2D caching
network with N = 8 UTs and M = 20 contents. Every UT
has the same cache size of ci = 2, and can communicate with
any UT in the network. The size of each content sm is equal,
and is normalized to one. We also set the weight parameters
wd = 0.5 and ws = 20.

We set the delay cost of each pair of UTs to be uniformly
picked within the range (0, 1) and the delay cost between UT
and the BS within the range of (1, 6). The symmetric delay
cost matrix D is given as follows, where the element Di,j is
the delay cost between UT i and UT j for j < N + 1, and
Di,N +1 is the delay cost between UT i and the BS.

D =





0

0.916
0.806
0.117
0.963
0.017
0.090
0.904
2.297

0

0.633
0.171
0.717
0.683
0.180
0.097
5.398

0

0.298
0.791
0.228
0.828
0.973
2.030

0

0.666
0.521
0.798
0.402
3.206

· · ·
· · ·

0

0.297
0.499
0.863
5.947

0

0.534
0.896
5.201

0

0.879
3.546

0

1.040





0

We use Zipf distribution [12] to model the request pattern of
a certain UT. The Zipf parameter α determines the skewness of
the popularity distribution. To characterize the heterogeneous
request pattern among UTs, we randomly permutate the re-
quest probability vector and assign it to different UTs.

5

B. Baselines and Performance Criteria

We compare the performance of the following caching

schemes:

1) Random Complete Caching (RCC): Each UT i ∈ N

randomly selects ci out of M contents to cache.

2) Greedy Caching (GC): Each UT i ∈ N caches his top

ci favorite contents.

3) Preference-Aware Caching (PAC): Each UT i allocates

i of his cache size for content k.
pk

4) Fair Caching (FC): Each UT caches the same proportion

of every content.

5) Stackelberg Caching (SC): The proposed caching

scheme using Stackelberg game model.

The performance criteria we consider are the BS’s serving

cost and UTs’ utilities, given by equation (4).

C. Numerical Results

1) Effect of Reward: We ﬁrst study the effects of the reward
on the BS and the UTs using the proposed iterative gradient
algorithm.

The evolution of the BS total cost and serving cost

is
shown in Figure 1(a). The total cost of BS consists of the
reward given to UTs and the cost of serving UTs’ requests.
For the BS serving cost, we observe that
it ﬁrst quickly
decreases as the unit reward increases. After a few iterations,
the decrease in serving cost becomes slower and it eventually
decreases to a constant. As the reward gets higher, the UTs are
more motivated to cache in favor of D2D, thus reducing the
serving cost from BS. However the margin gain is gradually
diminishing as long as most of the favorite contents of each
UT have already been cached within his neighborhood.

As for the BS total cost, the trend is similar to that of serving
cost when the reward is low. As unit reward r further increases,
the BS total cost increases approximately linearly. This is due
to the diminishing margin gain of BS serving cost and the
linear growth of BS reward cost.

The evolution of average UT utility is shown in Figure 1(b).
For completeness, we also depict the minimum and maximum
values of UT utility with error bars. At the start of the game,
the utilities of all UTs are negative since their utilities are
entirely delay cost. As the unit reward from the BS increases,
the utility of each UT increases and eventually becomes
positive.

2) Comparison of Caching Schemes: In Figure 2(a), we
compare the performance of the proposed Stackelberg Caching
scheme with the four baseline schemes in Section VI-B. We
see that
the BS serving cost under the proposed caching
scheme is the lowest among all caching schemes. In particular,
the BS serving cost of the proposed SC is lower than that
of PAC, GC, RCC, and FC by 12%, 37%, 68%, and 27%,
respectively.

For convenience of illustration, we deﬁne the UT cost as
the negative of UT utility and depict the UT costs of the
ﬁve schemes in Figure 2(b). We randomly select two UTs
and depict their costs as well as the average UT cost for all

t
s
o
C

90

89

88

87

86

85

84

83

82

81

80

BS Total Cost
BS Serving Cost

y
t
i
l
i
t

 

 

U
T
U
e
g
a
r
e
v
A

0

0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9

1

Unit Reward r

0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
-0.1
-0.2
-0.3
-0.4
-0.5

y
t
i
l
i
t

 

U
T
U
 
e
g
a
r
e
v
A

0

0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9

1

Unit Reward r

(a) BS total cost and serving cost.

(b) UT utilities.

Fig. 1: Effect of reward on BS cost and UT cost.

0.2
0.1
0
-0.1
-0.2
-0.3
-0.4
-0.5
-0.6
-0.7
-0.8

6

PAC
GC
RCC
FC
SC

0.4 0.5 0.6 0.7 0.8 0.9 1 1.1 1.2 1.3 1.4 1.5

Zipf Parameter α

Fig. 3: Effect of Zipf parameter on average UT utility.

strategies analytically for a special case. We compare the
performance of the caching scheme at SE with four baseline
caching schemes with no incentives. We show that the caching
scheme under the proposed incentive mechanism performs
better than other baseline schemes in terms of lower BS
serving cost and higher average utility for UTs.

REFERENCES

[1] Cisco, “Cisco visual networking index: Global mobile data trafﬁc

forecast update, 2014-2019,” White Paper, February, 2015.

[2] K. Shanmugam, N. Golrezaei, A. Dimakis, A. Molisch, and G. Caire,
“Femtocaching: Wireless content delivery through distributed caching
helpers,” IEEE Trans. Inf. Theory, vol. 59, no. 12, Dec 2013.

[3] L. Song, D. Niyato, Z. Han, and E. Hossain, Wireless Device-to-Device

Communications and Networks. Cambridge University Press, 2015.

[4] A. F. Molisch, G. Caire, D. Ott, J. R. Foerster, D. Bethanabhotla,
and M. Ji, “Caching eliminates the wireless bottleneck in video aware
wireless networks,” Advances in Electrical Engineering, 2014.

[5] R. B. Myerson, “Game theory: analysis of conﬂict,” Harvard University,

1991.

[6] K. Poularakis, G. Iosiﬁdis, and L. Tassiulas, “A framework for mobile
data ofﬂoading to leased cache-endowed small cell networks,” in Proc.
IEEE MASS, 2014, pp. 327–335.

[7] W. Wu, J. Lui, and R. T. Ma, “A game theoretic analysis on incentive
mechanisms for wireless ad hoc vod systems,” in Proc. IEEE WiOpt,
2012, pp. 177–184.

[8] F. Alotaibi, S. Hosny, H. El Gamal, and A. Eryilmaz, “A game theoretic
approach to content trading in proactive wireless networks,” in Proc.
IEEE ISIT, June 2015, pp. 2216–2220.

[9] A. Shokrollahi, “Raptor codes,” IEEE Trans. Inf. Theory, vol. 52, no. 6,

pp. 2551–2567, 2006.

[10] J. B. Rosen, “Existence and uniqueness of equilibrium points for concave
n-person games,” Econometrica: Journal of the Econometric Society, pp.
520–534, 1965.

[11] K. Goebel and W. A. Kirk, Topics in metric ﬁxed point theory. Cam-

bridge University Press, 1990, vol. 28.

[12] L. Breslau, P. Cao, L. Fan, G. Phillips, and S. Shenker, “Web caching
and Zipf-like distributions: evidence and implications,” in Proc. IEEE
INFOCOM, March 1999.

i

 

t
s
o
C
g
n
v
r
e
S
S
B

 

300

250

200

150

100

50

0

PAC

GC

RCC

FC

SC

Caching Scheme

0.35

0.3

0.25

t
s
o
C
T
U

 

0.2

0.15

0.1

0.05

0

UT1
UT2
Average

PAC

GC

RCC

FC

SC

Caching Scheme

(a) Comparison on BS serving
cost.

(b) Comparison on UT cost.

Fig. 2: Comparison of different caching schemes.

schemes. We observe that on average, the UT cost under the
proposed caching scheme is lower than that of PAC, RCC and
FC, and does not possess much advantage over the Greedy
Caching. In particular, the average UT cost of SC is lower than
that of PAC, RCC, and FC by 9%, 60%, and 39%, respectively.
3) Effect of Zipf Parameter: We illustrate the effect of UTs’
preference on the average UT utility of the proposed scheme
and the aforementioned four baseline schemes, as illustrated
in Figure 3. We see that as α increases (from 0.4 to 1.5),
the average UT utilities of SC, PAC, GC increases. We can
observe that the average UT utility of our proposed scheme
is larger than that of any other baseline schemes for all α.
In addition, the gain of UT utility under Stackelberg Caching
over other schemes increases as α increases. This indicates
that the proposed caching scheme is more beneﬁcial to UTs
if UTs’ request pattern is more heterogeneous.

VII. CONCLUSION

In this paper, we address the cost minimization problem for
the BS by introducing an incentive mechanism to encourage
more content sharing among UTs. We formulate the conﬂict
among UTs, as well as the tension between BS and UTs
as a Stackelberg game. The BS determines the rewarding
policy to minimize his total cost. On the other hand, each UT
aims to maximize his utility by choosing his caching policy.
We show the existence of the equilibrium and propose an
iterative gradient algorithm (IGA) to obtain the Stackelberg
Equilibrium. We also study the impact of incentives on caching

