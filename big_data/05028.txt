6
1
0
2

 
r
a

 

M
6
1

 
 
]
h
p
-
h
t
a
m

[
 
 

1
v
8
2
0
5
0

.

3
0
6
1
:
v
i
X
r
a

MasterPVA: A MATHEMATICA-PACKAGE FOR THE MASTER

FORMULA IN POISSON VERTEX ALGEBRAS

MATTEO CASATI AND DANIELE VALERI

Abstract. We give an introduction to the Mathematica packages MasterPVA
and MasterPVAmulti used to compute λ-brackets in Poisson vertex algebras,
which play an important role in the theory of inﬁnite-dimensional Hamilton-
ian systems. As an application, we give an introduction to the Mathematica
package WAlg aimed to compute the λ-brackets among the generators of clas-
sical aﬃne W-algebras. The use of these packages is shown by providing some
explicit examples.

Contents

Introduction

0.
1. Poisson vertex algebras and Hamiltonian equations
2. Classical aﬃne W-algebras
3. Example of how to use MasterPVA
4. List of commands in MasterPVA
5. Example of how to use WAlg
6. List of commands in WAlg
References

1
3
6
10
16
17
26
27

0. Introduction

Poisson vertex algebras (PVA) arise as the quasi-classical limit of a family of
vertex algebras [DSK06] in the same way as Poisson algebras arise as the quasi-
classical limit of a family of associative algebras.

Note also that a PVA is a local counterpart of a Coisson (=chiral Poisson)
algebra deﬁned in [BD04]. Moreover, a PVA can be obtained as a formal Fourier
transform of a local Poisson bracket [BDSK09], which plays an important role
in the theory of inﬁnite-dimensional integrable Hamiltonian systems. In fact, as
demonstrated in [BDSK09], the language of λ-brackets [D’AK98, Kac98] in the
framework of Poisson vertex algebras is often more convenient and transparent
than the equivalent languages of local Poisson brackets, used in the book [FT86],
or of Hamiltonian operators, used in the book [Dor93] (and references therein).
Hence, the theory of PVA has been extensively used in order to get a better
understanding of generalized Drinfeld-Sokolov hierarchies for classical aﬃne W-
algebras [DSKV13, DSKV14, DSKVnew], Adler-Gelfand-Dickey hierarchies [DSKV15]
and, more generally, Lax type integrable Hamiltonian equations [DSKVold], and the
Lenard-Magri scheme of integrability [DSKT14, DSKT15]. Furthermore, the notion
of a PVA has been extended in [CasPhD, Cas15a] to deal with Hamiltonian opera-
tors, or, equivalently, local Poisson brackets, for multidimensional systems of PDEs
(namely, PDEs for functions depending on several spatial variables). The notion of

1

multidimensional PVA has been used for studying the theory of symmetries and de-
formations of the so-called Poisson brackets of hydrodynamic type [DN83], as well
as for the local nonlinear brackets associated with 2D Euler’s equation [Cas15b].

The most powerful tool in the PVA theory is the so-called Master Formula (1.8).
It allows to rephrase the relevant questions in the theory of inﬁnite-dimensional
Hamiltonian systems in terms of the λ-bracket language, thus providing a com-
pletely algebraic computational technique, which replaces all the manipulations
used in [FT86, Dor93] in the setting of the formal calculus of variations.

Note that, in the λ-bracket language the computations are not necessarily hard
to perform by hand, but their numbers increase dramatically with the growing
number of spatial dimensions.

The package MasterPVA and its generalization to the multidimensional case
MasterPVAmulti have been written to exploit a Computer Algebra System, like
Mathematica, to automatically compute the Master Formula for PVA. The choice
of Mathematica is motivated by the pre-existing package Lambda, by J. Ekstrand
[Eks11], aimed to compute operator product expansions in conformal ﬁeld the-
ory using the λ-bracket language within the framework of vertex algebras [Kac98,
DSK06].

These packages have been used in [CasPhD] – with some preliminary results pub-
lished in [Cas15a] – in order to compute up to second dispersive order the Casimir
functions, the symmetries and the compatible deformations of the bidimensional
Poisson brackets of hydrodynamic type. They have been proved eﬀective also when
working with scalar structures, whenever explicit computations are needed [CCS15].
Moreover, following the results on the structure theory of classical aﬃne W-
algebras in [DSKV16], we wrote a Mathematica package called WAlg, which com-
putes all λ-brackets between generators of the classical aﬃne W-algebras W(g, f ),
where g is a simple Lie algebra of type A, B, C, D and G, and f ∈ g is a nilpotent
element. Combining WAlg with the package MasterPVA we can compute all λ-
brackets in classical aﬃne W-algebras and the corresponding generalized Drinfeld-
Sokolov hierarchies.

The paper is organized as follows.
In Section 1 we review the deﬁnition of PVA following [BDSK09] and its multi-
dimensional generalization given in [Cas15a]. In particular we introduce the notion
of an algebra of diﬀerential functions and the Master Formula (1.8) used to perform
λ-brackets computations on it, and we show that a PVA is equivalent to the notion
of an Hamiltonian operator (diﬀerently from [Dor93] we call this Hamiltonian op-
erator a Poisson structure). We also recall the connection with inﬁnite-dimensional
Hamiltonian systems.
In Section 2 we review the deﬁnition of classical aﬃne W-algebras using the
language of PVA, following [DSKV13]. The main results are Theorems 2.4 and 2.5
which give an explicit description of, respectively, the diﬀerential algebra structure
and the Poisson structure of classical aﬃne W-algebras, see also [DSKV16].

In Section 3 we explain how to use the packages MasterPVA and MasterPVAmulti
by giving some explicit examples. We show the well-known compatibility between
GFZ and Virasoro-Magri PVA, we derive the Dubrovin-Novikov conditions for a
bidimensional Poisson structure of hydrodynamic type [DN83], and, ﬁnally, we re-
prove the Mokhov’s classiﬁcation for the N = 1 multidimensional structures of
hydrodynamic type [Mok88].

In Section 5 we explain how to use the package WAlg by giving some explicit
examples. First, we consider the case of a principal nilpotent element f in the Lie
algebra g = o7 and we show how to compute a basis {qj}j∈J of gf and the cor-
responding set of generators {w(qj)}j∈J of the classical aﬃne W-algebra W(g, f )

2

given by Theorem 2.4. Then, we consider the case of a minimal nilpotent element in
the Lie algebra sp4 and we show how to compute the λ-brackets among the genera-
tors of the corresponding classical aﬃne W-algebra using Theorem 2.5. Finally, we
compute explicitly all classical aﬃne W-algebras W(g, f ) corresponding to a simple
Lie algebra g of rank 2 and its principal nilpotent element f and we compare our
results with the ones in [DSKW10].

The complete list of commands provided by the packages MasterPVA and

MasterPVAmulti (respectively WAlg) is given in Section 4 (respectively Section 6).

Acquiring the packages. The packages have been developed with Mathematica 9.0
and can be downloaded from

http://www.theatron.it/daniele/MasterPVA_files.tar.gz

where it is also possible to ﬁnd the related libraries and the examples provided in
this paper.

Acknowledgments. We wish to thank Alberto De Sole, Boris Dubrovin and Victor
Kac for introducing us to the fascinating theory of integrable systems. Part of this
work was done during the visit of the authors to the Department of Mathematics
of the University of Rome La Sapienza in January and February 2016. We wish to
thank this institution for the kind hospitality. We also wish to thank theatrOn.it for
hosting the packages ﬁles. The second author is supported by an NSFC “Research
Fund for International Young Scientists” grant.

1. Poisson vertex algebras and Hamiltonian equations

In this section we review the connection between Poisson vertex algebras and

the theory of Hamiltonian equations as laid down in [BDSK09].
1.1. Poisson vertex algebras. Let V be a diﬀerential algebra, namely a unital
commutative associative algebra over a ﬁeld F of characteristic 0, with a derivation
∂ : V → V.
Deﬁnition 1.1. (a) A λ-bracket on V is an F-linear map V⊗V → F[λ]⊗V, denoted

by f ⊗ g → {fλg}, satisfying sesquilinearity (f, g ∈ V):

{∂fλg} = −λ{fλg},

{fλ∂g} = (λ + ∂){fλg} ,

(1.1)

and the left and right Leibniz rules (f, g, h ∈ V):
{fλgh} = {fλg}h + {fλh}g,
{f hλg} = {fλ+∂g}→h + {hλ+∂g}→f ,

where we use the following notation: if {fλg} =(cid:80)
(cid:80)
where, now, {f−λ−∂g} =(cid:80)

(b) We say that the λ-bracket is skew-symmetric if
{gλf} + {f−λ−∂g} = 0 ,

cn(λ + ∂)nh.

n∈Z+

n∈Z+

(1.2)
(1.3)
λncn, then {fλ+∂g}→h =

(1.4)
(−λ − ∂)ncn (if there is no arrow we move ∂
(c) A Poisson vertex algebra (PVA) is a diﬀerential algebra V endowed with a λ-
bracket which is skew-symmetric and satisﬁes the following Jacobi identity in
V[λ, µ] (f, g, h ∈ V):

to the left).

n∈Z+

{fλ{gµh}} − {{fλg}λ+µh} − {gµ{fλh}} = 0 .

(1.5)

3

Example 1.2. Let g be a Lie algebra over F with a symmetric invariant bilinear
form κ, and let s be an element of g. The aﬃne PVA associated to the triple
(g, κ, s), is the algebra of diﬀerential polynomials V = S(F[∂]g) (where F[∂]g is the
free F[∂]-module generated by g and S(R) denotes the symmetric algebra over the
F-vector space R) together with the λ-bracket given by

{aλb} = [a, b] + κ(s|[a, b]) + κ(a|b)λ

for a, b ∈ g ,

(1.6)

and extended to V by sesquilinearity and the left and right Leibniz rules.
1.2. Poisson vertex algebra structures on algebras of diﬀerential func-
tions. The basic examples of diﬀerential algebras are the algebras of diﬀerential
polynomials in the variables u1, . . . , u(cid:96):

R(cid:96) = F[u(n)

i

| i ∈ I = {1, . . . , (cid:96)}, n ∈ Z+] ,

, i ∈ I, n ∈ Z+. Note that we

where ∂ is the derivation deﬁned by ∂(u(n)
have in V the following commutation relations:

i

) = u(n+1)

i

(cid:34)

(cid:35)

∂

∂u(n)

, ∂

=

∂

∂u(n−1)

,

(1.7)

i
where the RHS is considered to be zero if n = 0.
algebra extension V of R(cid:96), endowed with commuting derivations

An algebra of diﬀerential functions in the variables u1, . . . , u(cid:96) is a diﬀerential

i

: V → V ,

i ∈ I , n ∈ Z+ ,

∂

∂u(n)

i

extending the usual partial derivatives on R(cid:96), such that only a ﬁnite number of
are non-zero for each f ∈ V, and such that the commutation relations (1.7)

∂f

∂u(n)
hold on V.

i

The variational derivative of f ∈ V with respect to ui is, by deﬁnition,

(cid:88)

n∈Z+

δf
δui

=

(−∂)n ∂f
∂u(n)

i

.

The following result explains how to extend an arbitrary λ-bracket on a set of
variables {ui}i∈I, with value in some algebra of diﬀerential functions V, to a PVA
structure on V.
Theorem 1.3 ([BDSK09, Theorem 1.15]). Let V be an algebra of diﬀerential func-
tions in the variables {ui}i∈I, and let Hij(λ) ∈ F[λ] ⊗ V, i, j ∈ I.
(a) The Master Formula

{fλg} =

∂g
∂u(n)

j

(λ + ∂)nHji(λ + ∂)(−λ − ∂)m ∂f
∂u(m)

i

(1.8)

(cid:88)

i,j∈I
m,n∈Z+

(b) The λ-bracket (1.8) on V satisﬁes the skew-symmetry condition (1.4) provided

deﬁnes a λ-bracket on V with given {uiλuj} = Hji(λ), i, j ∈ I.
that the same holds on generators (i, j ∈ I):

{uiλuj} + {uj−λ−∂ui} = 0 .

(1.9)
(c) Assuming that the skew-symmetry condition (1.9) holds, the λ-bracket (1.8)
satisﬁes the Jacobi identity (1.5), thus making V a PVA, provided that the
Jacobi identity holds on any triple of generators (i, j, k ∈ I):

{uiλ{uj µuk}} − {uj µ{uiλuk}} − {{uiλuj}λ+µuk} = 0 .

(1.10)

4

By Theorem 1.3(a),

if V is an algebra of diﬀerential functions in the vari-
ables {ui}i∈I, there is a bijective correspondence between (cid:96) × (cid:96)-matrices H(λ) =
(Hij(λ))i,j∈I ∈ Mat(cid:96)×(cid:96) V[λ] and the λ-brackets {· λ ·}H on V deﬁned by the Master
formula (1.8).
Deﬁnition 1.4. A Poisson structure on V is a matrix H ∈ Mat(cid:96)×(cid:96) V[λ] such that
the corresponding λ-bracket {· λ ·}H deﬁnes a PVA structure on V.
Example 1.5. Consider the aﬃne PVA deﬁned in Example 1.2. Let {ui}i∈I be
a basis of g. The corresponding Poisson structure H = (Hij(λ)) ∈ Mat(cid:96)×(cid:96) V[λ] to
the λ-bracket deﬁned in (1.6) is given by

Hij(λ) = {uj λui} = [uj, ui] + κ(s|[uj, ui]) + κ(ui|uj)λ .

1.3. Poisson structures and Hamiltonian equations. The relation between
PVAs and Hamiltonian equations associated to a Poisson structure is based on the
following simple observation.
Proposition 1.6. Let V be a PVA. The 0-th product on V induces a well deﬁned

Lie algebra bracket on the quotient space V(cid:14)
where (cid:82) : V → V(cid:14)
ﬁned Lie algebra action of V(cid:14)

product on V, commuting with ∂, given by

{(cid:82) f,(cid:82) g} =(cid:82) {fλg}|λ=0 ,
{(cid:82) f, g} = {fλg}|λ=0 .

∂V:

(1.11)
∂V is the canonical quotient map. Moreover, we have a well de-
∂V on V by derivations of the commutative associative

In the special case when V is an algebra of diﬀerential functions in (cid:96) variables
{ui}i∈I and the PVA λ-bracket on V is associated to the Poisson structure H ∈

Mat(cid:96)×(cid:96) V[λ], the Lie bracket (1.11) on V(cid:14)
(cid:90) δg
(cid:88)

∂V takes the form (cf. (1.8)):

{(cid:82) f,(cid:82) g} =

Hji(∂)

δf
δui

.

(1.12)

δuj

i,j∈I

is

du
dt

(cid:88)

equivalently,

∂V are called local functionals.

∂V, the corresponding Hamiltonian equation

Deﬁnition 1.7. Let V be an algebra of diﬀerential functions with a Poisson struc-
ture H.

(a) Elements of V(cid:14)
(b) Given a local functional(cid:82) h ∈ V(cid:14)
(cid:16)
= {(cid:82) h, u}H
(c) A local functional(cid:82) f ∈ V(cid:14)
dt = 0 mod ∂V in virtue of (1.13), or, equivalently, if (cid:82) h and (cid:82) f are in
Namely,(cid:82) f lies in the centralizer of(cid:82) h in the Lie algebra V(cid:14)
(d) Equation (1.13) is called integrable if there exists an inﬁnite sequence (cid:82) f0 =
(cid:82) h,(cid:82) f1,(cid:82) f2, . . . , of linearly independent integrals of motion in involution. The

∂V is called an integral of motion of equation (1.13)

{(cid:82) h,(cid:82) f}H = 0 .

∂V with Lie bracket

if df
involution:

, i ∈ I

(1.12).

δh
δuj

(cid:17)

.

dui
dt

=

Hij(∂)

j∈I

(1.13)

corresponding integrable hierarchy of Hamiltonian equations is

= {(cid:82) fn, u}H , n ∈ Z+ .

=(cid:80)

du
dtn
j∈I Hij(∂) δfn
δuj

, n ∈ Z+, i ∈ I)

5

(Equivalently, dui
dtn

(1.14)

1.4. Multidimensional Poisson Vertex Algebras. The deﬁnition of a PVA has
been extended in [Cas15a] in order to study Hamiltonian evolutionary PDEs with
several spatial dimensions.
A D-dimensional diﬀerential algebra is a unital commutative associative algebra
V over a ﬁeld F of characteristic 0, endowed with D commuting derivations ∂α :
V → V, α = 1 . . . , D.
Deﬁnition 1.8. (a) A D-dimensional λ-bracket on V is an F-linear map V ⊗V →
F[λ1, . . . , λD]⊗V, denoted by f⊗g → {fλg}, satisfying sesquilinearity (f, g ∈ V,
α = 1, . . . , D):

{∂αfλg} = −λα{fλg},

{fλ∂αg} = (λα + ∂α){fλg} ,

(1.15)

and the left and right Leibniz rules (1.2) and (1.3).

(b) We say that the λ-bracket is skew-symmetric if equation (1.4) is satisifed.
(c) A D-dimensional PVA is a D-dimensional diﬀerential algebra V endowed with
a λ-bracket which is skew-symmetric and satisﬁes the Jacobi identity (1.5) in
V[λ1, . . . , λD, µ1, . . . , µD].
The deﬁnition of an algebra of diﬀerential functions given in Section 1.2 can be
generalized to the D-dimensional case and the analogous result to Theorem 1.3 can
be obtained (see [Cas15a, Theorem 1]).

2. Classical affine W-algebras

In this section we recall the deﬁnition of classical aﬃne W-algebras W(g, f ) in the
language of Poisson vertex algebras, following [DSKV13] (which is a development
of [DS85]).

2.1. Setup and notation. Let g be a simple Lie algebra with a non-degenerate
symmetric invariant bilinear form (·|·), and let {f, 2x, e} ⊂ g be an sl2-triple in g.
We have the corresponding ad x-eigenspace decomposition

gk where gk =(cid:8)a ∈ g(cid:12)(cid:12) [x, a] = ka(cid:9) .

(cid:77)

Z

g =

k∈ 1

2

Clearly, f ∈ g−1, x ∈ g0 and e ∈ g1. We let d be the depth of the grading, i.e. the
maximal eigenvalue of ad x.

By representation theory of sl2, the Lie algebra g admits the direct sum decom-

positions

g = gf ⊕ [e, g] = ge ⊕ [f, g] .

(2.1)
They are dual to each other, in the sense that gf ⊥ [f, g] and [e, g] ⊥ ge. For
a ∈ g, we denote by a(cid:93) = πgf (a) ∈ gf its component in gf with respect to the ﬁrst
decomposition in (2.1). Note that, since [e, g] is orthogonal to ge, the spaces gf and
ge are non-degenerately paired by (·|·).
Next, we choose a basis of g as follows. Let {qj}j∈J f be a basis of gf consisting
of ad x-eigenvectors, and let {qj}j∈J f be the the dual basis of ge. For j ∈ J f , we
let δ(j) ∈ 1

Z be the ad x-eigenvalue of qj, so that

2

[x, qj] = −δ(j)qj ,

[x, qj] = δ(j)qj .

(2.2)

2

Z+ we also let J f−k = {i ∈ J f | δ(i) = k} ⊂ J f , so that {qj}j∈J f−k

For k ∈ 1
basis of gf−k, and {qj}j∈J f−k
we get a basis of g consisting of the following elements:

is a
k. By representation theory of sl2,

is the dual basis of ge

n = (ad f )nqj where n ∈ {0, . . . , 2δ(j)} ,
qj

j ∈ J f .

(2.3)

6

This basis consists of ad x-eigenvectors, and, for k ∈ 1
corresponding basis of gk ⊂ g is {qj
(j, n) ∈ J f × Z+

Z such that −d ≤ k ≤ d, the
n}(j,n)∈J−k, where J−k is the following index set
(2.4)

J−k =

(cid:111)

(cid:110)

2

.

The union of all these index sets is the index set for the basis of g:

(cid:12)(cid:12)(cid:12) δ(j) − |k| ∈ Z+, n = δ(j) − k
(cid:12)(cid:12)(cid:12) j ∈ J f , n ∈ {0, . . . , 2δ(j)}(cid:111)

.

(cid:110)

(cid:71)

h∈ 1

2

Z

J =

Jh =

(j, n)

By [DSKV16, Lemma 2.5], the corresponding basis of g dual to (2.3) is given by

((j, n) ∈ J):

(2.5)

(2.6)

(−1)n

(n!)2(cid:0)2δ(j)

n

(cid:1) (ad e)nqj .

qn
j =

Clearly, the bases (2.3) and (2.6) are compatible with the direct sum decomposi-
tions (2.1). In fact, we can write the corresponding projections πgf , π[e,g] = 1−πgf ,
πge, and π[f,g] = 1 − πge, in terms of these bases:

(cid:88)

(cid:88)

j∈J f

a(cid:93) = πgf (a) =

(a|qj)qj , π[e,g](a) =

j∈J f
(a|qj)qj , π[f,g](a) =

πge (a) =

2δ(j)(cid:88)

n=1

(cid:88)
2δ(j)(cid:88)

j∈J f

(cid:88)

j∈J f

n=1

(a|qn

j )qj
n .

(a|qj

n)qn
j ,

(2.7)

Note that when δ(j) = 0, then the sums over n in (2.7) become empty sums.
2.2. Construction of the classical aﬃne W-algebra. Recall from Example 1.2
that given an element s ∈ g, we have a PVA structure on the algebra of diﬀerential
polynomials V(g) = S(F[∂]g), with λ-bracket given on generators by

a, b ∈ g ,

{aλb}z = [a, b] + (a|b)λ + z(s|[a, b]),

We shall assume that s lies in gd. In this case the F[∂]-submodule F[∂]g≥ 1

(2.8)
and extended to V(g) by the sesquilinearity axioms and the Leibniz rules. Here z
is an element of the ﬁeld F.
⊂ V(g)
is a Lie conformal subalgebra (see [Kac98] for the deﬁnition) with the λ-bracket
{aλb}z = [a, b], a, b ∈ g≥ 1
(it is independent of z, since s commutes with g≥ 1
).
Consider the diﬀerential subalgebra V(g≤ 1
) of V(g), and denote by
ρ : V(g) (cid:16) V(g≤ 1
), the diﬀerential algebra homomorphism deﬁned on generators
by

) = S(F[∂]g≤ 1

2

2

2

2

2

2

(a) + (f|a),

a ∈ g ,

2

2

ρ(a) = π≤ 1

: g → g≤ 1

(2.9)
where π≤ 1
denotes the projection with kernel g≥1. Recall from
[DSKV13] that we have a representation of the Lie conformal algebra F[∂]g≥ 1
on the diﬀerential subalgebra V(g≤ 1
) ⊂ V(g) given by (a ∈ g≥ 1
λ g = ρ{aλg}z
a ρ

, g ∈ V(g≤ 1

(2.10)

)):

2

2

2

2

2

(note that the RHS is independent of z since, by assumption, s ∈ Z(g≥ 1
)).
The classical aﬃne W-algebra is, by deﬁnition, the diﬀerential algebra

2

W = W(g, f ) =(cid:8)g ∈ V(g≤ 1

)(cid:12)(cid:12) a ρ

2

λ g = 0 for all a ∈ g≥ 1

2

endowed with the following PVA λ-bracket
{gλh}z,ρ = ρ{gλh}z,

g, h ∈ W .

7

} ,

(2.11)

(2.12)

Remark 2.1. Thinking of z as a formal parameter, equation (2.12) gives a 1-
parameter family of PVA structures on W, or, equivalently, a bi-Poisson structure.
Indeed, we can write {gλh}z,ρ = {gλh}1,ρ + z{gλh}0,ρ, for every g, h ∈ W. The
λ-bracket {· λ ·}1,ρ does not depend on the choice of s ∈ gd, while {· λ ·}0,ρ does.

Generalizing the results in [DS85] it has been shown in [DSKV13], using the
Lenard-Magri scheme of integrability [Mag78], that it is possible to construct an in-
tegrable hierarchy of bi-Hamiltonian equations for W, known as generalized Drinfeld-
Sokolov hierarchy, under the assumption that f + s ∈ g is a semisimple element.
Recently, generalized Drinfeld-Sokolov hierarchies for any nilpotent element f ∈
glN and non-zero s ∈ gd have been constructed in [DSKVnew] using the theory of
Adler type pseudodiﬀerential operators [DSKVold].
2.3. Structure Theorem for classical aﬃne W-algebras. In the algebra of
diﬀerential polynomials V(g≤ 1
) we introduce the grading by conformal weight, de-
noted by ∆ ∈ 1
Z, deﬁned as follows. For a ∈ g such that [x, a] = δ(a)a, we let
∆(a) = 1− δ(a). For a monomial g = a(m1)
, product of derivatives of ad x
eigenvectors ai ∈ g≤ 1

, we deﬁne its conformal weight as

. . . a(ms)

2

1

s

2

2

∆(g) = ∆(a1) + ··· + ∆(as) + m1 + ··· + ms .

(2.13)

Thus we get the conformal weight space decomposition
){∆} .

) =

V(g≤ 1

V(g≤ 1

2

2

(cid:77)

2

∆∈ 1
Z+
){ 1
2} = g 1

2

2

, and V(g≤ 1

){0} = F, V(g≤ 1

For example V(g≤ 1
Theorem 2.2 ([DSKV13]). Consider the PVA W = W(g, f ) with the λ-bracket
{· λ ·}z,ρ deﬁned by equation (2.12).
(a) For every element q ∈ gf
(cid:88)
w ∈ W{∆} = W ∩ V(g≤ 1

1−∆ there exists a (not necessarily unique) element
){∆} of the form w = q + g, where

){1} = g0 ⊕ S2g 1

.

2

2

2

2

g =

b(m1)
1

. . . b(ms)

s

∈ V(g≤ 1

2

){∆} ,

is a sum of products of derivatives of ad x-eigenvectors bi ∈ g1−∆i ⊂ g≤ 1
that

2

∆1 + ··· + ∆s + m1 + ··· + ms = ∆ and s + m1 + ··· + ms > 1 .

(2.14)

, such

(b) Let {wj = qj + gj}j∈J f be any collection of elements in W as in part (a).
(Recall, from Section 2.1, that {qj}j∈J f is a basis of gf consisting of ad x-
eigenvectors.) Then the diﬀerential subalgebra W ⊂ V(g≤ 1
) is the algebra of
diﬀerential polynomials in the variables {wj}j∈J f . The algebra W is a graded
associative algebra, graded by the conformal weights deﬁned in (2.13): W =
F ⊕ W{1} ⊕ W{ 3
Recall the ﬁrst of the direct sum decompositions (2.1). By assumption, the
j = qj, j ∈ J f , form a basis of gf , and by construction the elements
elements q0
j , (j, n) ∈ J, with n ≥ 1, form a basis of [e, g] (here we are using the notation from
qn
Section 2.1). Since gf ⊂ g≤ 1
, we have the corresponding direct sum decomposition

2} ⊕ W{2} ⊕ W{ 5

2} ⊕ . . . .

2

2

= gf ⊕ [e, g≤− 1

2

g≤ 1

2

] .

(2.15)

) admits the following

It follows that the algebra of diﬀerential polynomials V(g≤ 1
decomposition in a direct sum of subspaces

2

) = V(gf ) ⊕(cid:10)[e, g≤− 1

](cid:11)

2

V(g≤ 1

2

) ,

(2.16)

V(g≤ 1

2

8

Theorem 2.2 implies the following result.

is the diﬀerential ideal of V(g≤ 1

where V(gf ) is the algebra of diﬀerential polynomials over gf , and(cid:10)[e, g≤− 1
w(q) ∈ W of the form w = q + r, where r ∈ (cid:10)[e, g≤− 1

Corollary 2.3 ([DSKV16]). For every q ∈ gf there exists a unique element w =
). Moreover, if
q ∈ g1−∆, then w(q) lies in W{∆} and r is of the form (2.14). Consequently, W
coincides with the algebra of diﬀerential polynomials in the variables wj = w(qj),
j ∈ J f .

](cid:11)

V(g≤ 1

2

)

) generated by [e, g≤− 1

V(g≤ 1

](cid:11)

].

2

2

2

2

2

As an immediate consequence of Theorem 2.2 and Corollary 2.3 we get the

following:
Theorem 2.4. The map πgf restricts to a diﬀerential algebra isomorphism

π := πgf|W : W ∼−→ V(gf ) ,

hence we have the inverse diﬀerential algebra isomorphism

which associates to every element q ∈ gf the (unique) element w(q) ∈ W of the

form w(q) = q + r, with r ∈(cid:10)[e, g≤− 1

](cid:11)

).

V(g≤ 1

2

2

w =: V(gf )

∼−→ W ,

2.4. Poisson structure of the classical aﬃne W-algebra. Let (cid:96) = dim gf . By
Corollary 2.3 the Poisson structure H = (Hij(λ))i,j∈J f ∈ Mat(cid:96)×(cid:96) W[λ] associated
to the classical aﬃne W-algebra W deﬁned by equations (2.11) and (2.12) is given
by (i, j ∈ J f )

Hji(λ) = {w(qi)λw(qj)}z,ρ .

(2.17)

For h, k ∈ 1

2

Z, we introduce the notation

h ≺ k if and only if h ≤ k − 1 .

Also, for t ≥ 1, we denote (cid:126)k = (k1, k2, . . . , kt) ∈ ( 1
Therefore, an element ((cid:126)j, (cid:126)n) ∈ J−(cid:126)k is an t-tuple with

2

(2.18)
Z)t, and J−(cid:126)k := J−k1 × . . . J−kt.

(j1, n1) ∈ J−k1, . . . , (jt, nt) ∈ J−kt .

(2.19)
The explicit expression of the Poisson structure H deﬁned by equation (2.17) can
be obtained by the following result.
Theorem 2.5 ([DSKV16, Theorem 5.3]). For a ∈ gf−h and b ∈ gf−k, we have

{w(a)λw(b)}z,ρ = w([a, b]) + (a|b)λ + z(s|[a, b])
−

(cid:0)w([b, qj1

(cid:88)

−h+1≤kt≺···≺k1≤k

((cid:126)j,(cid:126)n)∈J−(cid:126)k
|qj2

n2

](cid:93)) − (qn1+1
, qjt
nt

j1

](cid:93)) − (qnt−1+1

jt−1

, a](cid:93)) − (qnt+1

|a)λ + z(s|[qnt+1

jt

jt

](cid:93)) − (b|qj1

)(λ + ∂) + z(s|[b, qj1

n1

n1

n1

])(cid:1) . . .

])(cid:1)

)(λ + ∂) + z(s|[qn1+1

, qj2
n2

|qjt

nt

)(λ + ∂) + z(s|[qnt−1+1

jt−1

, qjt
nt

j1

, a])(cid:1) .

t=1

(cid:88)
∞(cid:88)
×(cid:0)w([qn1+1
··· ×(cid:0)w([qnt−1+1
×(cid:0)w([qnt+1

, qj2
n2

jt−1

j1

jt

])(cid:1)

(2.20)
Note that in each summand of (2.20) the z term can be non-zero at most in one
factor. In fact, z may occur in the ﬁrst factor only for k1 ≤ 0, in the second factor
only for k1 ≥ 1 and k2 ≤ −1, in the third factor only for k2 ≥ 1 and k3 ≤ −1, and
so on, and it may occur in the last factor only for kt ≥ 1. Since these conditions
are mutually exclusive, the expression in the RHS of (2.20) is linear in z.

9

Some special cases and applications of equation (2.20) are summarized in the

next result.

Proposition 2.6 ([DSKV16]). (a) If either a or b lies in gf

0, we have

{w(a)λw(b)}z,ρ = w([a, b]) + (a|b)λ + z(s|[a, b]) .
we have

(b) If a, b ∈ gf
− 1

2

{w(a)λw(b)}z,ρ = w([a, b]) + (∂ + 2λ)w([a, [e, b]](cid:93)) − (e|[a, b])λ2

w([a, qj

n](cid:93))w([qn+1

j

, b](cid:93)) + z(s|[a, b]) .

(2.21)

(2.22)

(cid:88)

+

(j,n)∈J− 1

2

(cid:80)

(c) Consider the element L0 = 1
2

j∈J f

L = w(f ) + L0 ∈ W{2} is a Virasoro element of W, and we have

0

w(qj)w(qj) ∈ W{2}. Then, the element

{LλL}z,ρ = (∂ + 2λ)L − (x|x)λ3 + 2z(s|f )λ .

(2.23)

For a ∈ gf

1−∆ we have
{Lλw(a)}z,ρ = (∂ + ∆λ)w(a) − (e|a)

(2.24)
In particular, for z = 0, all the generators w(a), a ∈ gf , of W are primary
elements for L, provided that (e|a) = 0. In other words, for z = 0, W is an
algebra of diﬀerential polynomials generated by L and (cid:96) − 1 primary elements
with respect to L. So, W is a PVA of CFT type (cf. [DSKW10]).

2

λ3 + z∆(s|a)λ .

Remark 2.7. Equations (2.21) and (2.22) and the deﬁnition of the Virasoro element
L in in Proposition 2.6(c) are compatible with the analogous in [DSKV14] where
the classical aﬃne W-algebra for minimal nilpotent elements has been explicitly
described.

3. Example of how to use MasterPVA

In this section we give some examples of how to use MasterPVA, both in its
one- and multi-dimensional versions. We show the compatibility between GFZ and
Virasoro-Magri PVA (case N = D = 1), we derive the Dubrovin-Novikov conditions
for a bidimensional Poisson structure of hydrodynamic type (case D = 1, N =
2) and we reprove the Mokhov’s classiﬁcation for the N = 1 multidimensional
structures of hydrodynamic type [Mok88].

The packages MasterPVA.m and MasterPVAmulti.m must be in a directory where
Mathematica can ﬁnd them. This can be achieved, for example, by using the
command SetDirectory. After this, we can load the packages. The two packages
cannot be loaded in the same session, because of the conﬂicting functions and
properties deﬁnition. However, MasterPVAmulti can eﬀectively deal with D = 1
PVA, despite using a heavier notation. This is the reason why we provide a package
speciﬁcally devoted to standard monodimensional PVAs, althought the same input
works with MasterPVAmulti.

10

3.1. GFZ and Virasoro-Magri Poisson vertex algebras. Let V be an algebra
of diﬀerential functions extending R1 = C[u, u(cid:48), u(cid:48)(cid:48), . . .]. We recall that the Gardner-
Faddeev-Zacharov (GFZ) PVA structure on V is deﬁned by

{uλu}1 = λ

while the Virasoro-Magri PVA with central charge c ∈ C is deﬁned by

{uλu}0 = (∂ + 2λ) u + cλ3 .

(3.1)

(3.2)

We will show the well-known fact that these two structures are compatible, namely
that the λ-bracket {· λ ·}z = {· λ ·}0 + z{· λ ·}1 deﬁnes a PVA structure on V for all
z ∈ C.

After loading the package, it is necessary to set the number of generators, the
name for the generators, for the independent variable with respect to which the
derivation ∂ acts, and for the formal indeterminate used in the deﬁnition of the
λ-brackets, say λ. The syntax for these commands is

The list of generators, written as functions of the independent variables, is called gen
throughout the program. The λ-brackets between the generators must be provided
in form of a N × N table, whose entries are polynomials in the previously declared
formal indeterminate. In this example N = 1 and we have H0 given by equation
(3.2) and H1 given by equation (3.1). We denote by H their linear combination.

The skewsymmetry and Jacobi identity on generators (see Theorem 1.3) can be
checked by using the functions PVASkew[] and JacobiCheck[]. Indeed the output
of PVASkew[] (respectively JacobiCheck[]) is the LHS of equation (1.9) (respec-
tively (1.10)). We get

thus showing that H0 and H1 deﬁne two compatible PVA structures on V.

Let us deﬁne h1 = 1

equation (1.13) corresponding to the Hamiltonian functional(cid:82) h1 and the Poisson
corresponding to the Hamiltonian functional(cid:82) h2 and the Poisson structure H1.

2 u2 ∈ V. It is well known that the corresponding Hamiltonian
structure H0 is the Korteweg-de Vries (KdV) equation. Moreover, let us also de-
2 uu(cid:48)(cid:48) ∈ V. The KdV equation is also the Hamiltonian equation
ﬁne h2 = 1

2 u3 + c

11

In fact, the KdV equation is a bi-Hamiltonian equation and its integrability can be
proved using the Lenard-Magri scheme of integrability [Mag78].

3.2. Poisson structures of hydrodynamic type. Let V be an algebra of diﬀer-
ential functions extending RN. A Poisson structure of hydrodynamic type [DN83]
on V is deﬁned by the following λ-bracket on generators (i, j, k = 1, . . . , N):

{uiλuj} = gjiλ + bk

jiu(cid:48)
k ,

(3.3)

∂bk
ji
∂u(n)

h

=

The geometric interpretation of the functions gij and bk

where repeated indices are summed according to Einstein’s rule and ∂gji
∂u(n)
0, for every h = 1, . . . , N and n ≥ 1.
ij is well known: the
λ-bracket deﬁned in (3.3) deﬁnes a PVA structure on V if and only gij are the
components of a ﬂat contravariant metric on a manifold with local coordinates
(u1, . . . , uN ) and bk
ij are the contravariant Christoﬀel symbols of the associated
Levi-Civita connection. Using MasterPVA we will derive the explicit form of these
properties in the case N = 2.

=

h

After loading the package, we initialize the package settings.

We deﬁne the matrices gij and bk

ij and use them to write the λ-bracket (3.3).

By equating to zero the coeﬃcient of λ and the constant term (in λ) in the equations
given by PVASkew[P] we get the conditions that gij and bk
ij should satisfy in order
to get a skewsymmetric λ-bracket.

12

These conditions can be summarized by the equations

gij = gji ,

bk
ij + bk

ji =

∂gij
∂uk

.

(3.4)

We redeﬁne the functions gij and bk
the validity of equations (3.4).

ij and the Poisson structure H in order to ensure

The further properties that must be satisﬁed to grant the Jacobi identity can be
found using JacobiCheck[P]. Notice that, when the result of JacobiCheck[] is
not identically vanishing, the output uses internal variables whose name starts with
MasterPVA‘Private‘: to make the output clearer it is advisable to replace them
with the “external” names, as it is demonstrated in the following picture. However,
reading the conditions for the Jacobi identity is usually much more cumbersome
than inspecting the ones for the skewsymmetry.

Nevertheless, we can check that the vanishing of the coeﬃcient of λ2 in the Jacobi
identity is equivalent to the torsion–free condition for the Levi–Civita connection:

giaba

kj − gjaba

ki = 0 .

(3.5)

13

3.3. Multidimensional scalar PVAs of hydrodynamic type. Finally, we show
how MasterPVAmulti deals with multidimensional PVA deﬁned in Section 1.4. We
use it to reprove a theorem by Mokhov about the classiﬁcation of multidimensional
Poisson structures of hydrodynamic type [Mok88], for the case N = 1, D = 3. We
recall that a multidimensional scalar λ-bracket of hydrodynamic type has form

{uλu} =

(aαλα + bαuα) ,

(3.6)

D(cid:88)

α=1

where we set uα = ∂αu and aα and bα are such that ∂aα
∂∂n
β = 1, . . . , D and n ≥ 1.

β u = ∂bα

∂∂n

β u = 0, for every

Mokhov’s theorem states that the λ-bracket (3.6) deﬁnes a PVA structure if and

only if it is of the form

(cid:18)

D(cid:88)

α=1

{uλu} =

(cid:19)

∂g
∂u

cα

2gλα + uα

,

(3.7)

for some cα ∈ C and a function g such that
n ≥ 1.

∂g
∂∂n

β u = 0, for every β = 1, . . . , D and

We show this result for the case D = 3. We start by loading the package and
initializing the variables (we remind that in MasterPVAmulti the number D must
always be speciﬁed).

Then we deﬁne the λ-bracket as in equation (3.6) assuming N = 1 and D = 3.
The formal parameter, for which we chose the symbol λ in the initialization, is
{λ1, λ2, λ3}.

14

We use PVASkew[P] to ﬁnd the conditions that the functions aα and bα should
satisfy in order to have a skewsymmetric λ-bracket. We get

2bα =

∂aα
∂u

.

(3.8)

Hence, we deﬁne a new λ-bracket, called Hskew, where the functions aα and bα
satisfy equation (3.8). Note that Hskew only depends on the functions aα now.

We use JacobiCheck[Pskew] to write the conditions that must be satisﬁed by the
functions aα in order to get the validity of (1.10). We denote the LHS of (1.10)
by JacobiCond. In particular, by equating to zero the coeﬃcient of λαµβ we get a
system of ODEs for the functions aα.

15

A solution to this system is given by

aα = cαg

for some function g and cα ∈ C .

(3.9)

Then, we can substitute equation (3.9) in JacobiCond.

Hence, Jacobi identity (1.10) holds, thus showing that (3.8) and (3.9) are the suf-
ﬁcient and necessary conditions for the λ-bracket (3.6) to deﬁne a PVA structure,
as Mokhov’s theorem states.

4. List of commands in MasterPVA

In this section we list the commands provided by MasterPVA and MasterPVAmulti.

Most of the commands are the same for both the versions of the package, and the
syntax working for the D = 1 case works the same also when using the multidimen-
sional package; on the other hand, it must be modiﬁed accordingly when working
with a D > 1 λ bracket.

SetN[n_Integer] declares the number N of the generators for the PVA. Its

default value is 1.

GetN[] gives the number N of the generators.
SetD[d_Integer] declares the number D of the derivations (namely, of the inde-

pendent variables) for the PVA. Its defaut value is 1. Available only in MasterPVAmulti.

GetD[] gives the number D of the derivations. Available only in MasterPVAmulti.
SetMaxO[n_Integer] declares the order of the derivatives of the generators up
to which the code computes the λ brackets by the Master Formula. Default is 5,
quite high for most of the applications.

GetMaxO[] gives the maximum order of the derivatives of the generators taken

by the program.

SetGenName[newname] declares the name for the generators. Default is u. They

will have the form u(x) if N = 1 or u1(x), . . . , uN (x) for N > 1.

GetGenName[] gives the name used for the generators.

16

SetVarName[newname] declares the name for the independent variable(s). De-

fault is x.

GetVarName[] gives the name used for the independent variable(s).
gen is the list of generators for the PVA.
var is the list of the independent variables. Available only in MasterPVAmulti.
SetFormalParameter[newname] declares the name for the parameter to be used
(and recognized by the software) in the deﬁnition of the bracket between generators.
Default is β; notice that for D > 1 the parameter will be a list (β1, . . . , βD).

GetFormalParameter[] gives the name of the parameter used in the deﬁnition

of the λ bracket.

LambdaB[f,g,P,λ] computes the λ bracket between the two diﬀerential polyno-
mials f and g, with P the matrix of the brackets between the generators. The result
will be a polynomial in the formal indeterminate λ (or (λ1, . . . , λD) for D > 1).
The Master Formula will take into account the derivatives of the generators up to
order n=GetMaxO[].

PVASkew[P] computes the condition of skewsymmetry for a λ bracket (namely

the LHS of (1.9)) and gives the result in a matrix form.

PrintPVASkew[P] computes the condition of skewsymmetry and gives the result

as a table with each equation of the system.

JacobiCheck[P] computes the LHS of the Jacobi identity (1.10), and gives the
result as a N × N × N array. The entries are given as formal polynomials in the
(internal) indeterminates λ and µ. It is often convenient to clean up the result using
the command %%//.{MasterPVA‘Private‘λ ->λ, MasterPVA‘Private‘µ ->µ}.
PrintJacobiCheck[P] computes the LHS of Jacobi identity (1.10) and gives the

result as a table of expressions that must vanish.

EvVField[X_List,f] applies the evolutionary vector ﬁeld of characteristic X i,

i = 1, . . . , N to the diﬀerential polynomial f.

Integr[f,param_List] transforms a polynomial in the indeterminates param=
{λ, µ, . . . , ψ, ω} in a polynomial in {λ, . . . , ψ} substituting ω with −λ − µ − ··· −
ψ − ∂, where ∂ acts on the coeﬃcients. For D > 1 case, each of the param-
eter must be replaced by a list of D entries. This auxiliary function is conve-
nient in the study of the skewsymmetry, since {ui−λ−∂uj} can be obtained by
Integr[LambdaB[gen[[i]],gen[[j]],P,µ],{λ,µ}] or for the study of the PVA
cohomology (see [DSK13]).

5. Example of how to use WAlg

In this section we show how to use the package WAlg. Its main function is to
compute the λ-brackets between the generators of the classical aﬃne W-algebra
W(g, f ) deﬁned in Section 2.2, where g is a simple Lie algebra of type A, B, C, D
and G, and f ∈ g is a nilpotent element. Thus, we can use this result to compute the
λ-brackets between arbitrary elements of the classical W-algebra using the package
MasterPVA. Finally, we provide a few details about the “oﬄine” generation of the
table of indices used in the implementation of formula (2.20).

In order to perform computations with WAlg we need to realize the simple Lie
algebras of type A, B, C, D and G as subalgebras of glN.
(We emphasize that
we can do the same for simple Lie algebras of type E and F . Unfortunately the
dimension of such a representation can be big, as for the case of E8, where the
minimal N = 248.)

17

Given an element A = (Aij)N

i,j=1 ∈ glN, we denote by Aat = ((Aat)ij)N

i,j=1 its
transpose with respect to the antidiagonal, namely (Aat)ij = AN +1−j,N +1−i. Then,
we realize the classical Lie algebras as in [DS85]:
(A) Type An: g = sln = {A ∈ gln+1 | Tr(A) = 0}.

(B) Type Bn: let S =(cid:80)2n+1
let S = (cid:80)2n
(D) Type Dn: let S =(cid:80)n

−SAatS}.
(C) Type Cn:
−SAatS}.
gl2n | A = −SAatS}.

k=1 (−1)k+1Ekk, then g = o2n+1 = {A ∈ gl2n+1 | A =
k=1(−1)k+1Ekk, then g = sp2n = {A ∈ gl2n | A =
k=1(−1)k+1(Ekk +E2n+1−k,2n+1−k), then g = o2n = {A ∈

In the sequel, given a matrix A ∈ glN, we denote by σ(A) = −SAatS, where S can
be any of the matrix appearing in the deﬁnition of the classical Lie algebras of type
B, C and D. Clearly, A + σ(A) belongs to the corresponding classical Lie algebra,
since σ2 = 1glN .

We realize G2 as a subalgebra of D4 as follows. Note that the group of automor-
phisms of the Dynkin diagram of D4 is isomorphic to S3, the group of permutations
on three elements. Then, we can consider the induced action by Lie algebra auto-
morphisms of this group on o8. Then, it is easy to check that:
(G) Type G2: g = {A ∈ o8 | τ (A) = A , for every τ ∈ S3}.
In particular, we used the following choice of Chevalley generators for g:

(E35 + E46) ,
e1 = E23 + E67 ,
h1 = E22 − E33 + E55 − E66 , h2 = E11 − E22 + 2E33 − 2E66 + E77 − E88 ,
f2 = E21 + E43 + E65 + E87 + 2 (E53 + E64) .
f1 = E32 + E76 ,

e2 = E12 + E34 + E56 + E78 +

1
2

After the choice of the simple Lie algebra g we need to choose a nilpotent element
f ∈ g. Since the construction of classical aﬃne W-algebras does not depend on the
nilpotent element itself, but only on its nilpotent orbit (see [DSKV13]), we assume
that the nilpotent element is given in input as a strictly lower triangular matrix.
In fact, when giving in input a nilpotent element we can use the classiﬁcation
of nilpotent orbits given in [CMG93]. Then the program computes an sl2-triple
{f, h = 2x, e} ⊂ g such that x is a diagonal matrix and e is strictly upper triangular.
Finally, we always assume that the nondegenerate symmetric invariant bilinear
form on g is a multiple of the trace form on matrices (a, b ∈ g):

(a|b) = c Tr(ab) ,

c ∈ C∗ .

5.1. General instruction about the algebraic setup. The package ﬁle WAlg.m
and the default library listK_6.txt must be in a folder where Mathematica can
ﬁnd them. To select the working folder of Mathematica, where it will look for
them and the potential output ﬁles will be saved, one may use the command
SetDirectory["path"]. An alternative method to load the package, diﬀerent from
the one shown in Section 3, is using the command Needs[].
Let us show how to use WAlg to get the explcit set of generators of the classical
aﬃne W-algebra W(o7, f ), where f is the principal nilpotent element [DS85]. We
load the package and use the command InitializeWAlg[]. Recall that o7 is a
classical Lie algebra of type B3.

18

The dimension of the matrix representing f is obtained with the command GetDim[].
We deﬁne the principal nilpotent f, and we can also check that it belongs to o7. The
command ComputeWAlg[] takes the nilpotent element f as argument and computes
a basis of gf given by ad x-eigenvectors. The warning notice is not a problem.

The basis computed for gf can be recovered with the command GetWBasis[], We
denote it as listq. The corresponding dual basis (with respect to the trace form)
of ge can be computed using the command GetWbasisDual[]. We denote it by
listQ. Finally, we can also use the command GetWEigen[] to recover all the ad x-
eigenvalues (with multiplicities) and put them in a list which we call listδ.

The command w[] works as follows:

it takes in input an element of o7, then
it applies πgf and the map w deﬁned in Theorem 2.4 to this element. The result
is a linear combination of the generators of the classical aﬃne W-algebra. Hence,
by Corollary 2.3, w[listq[[i]]] gives the i-th generator of the classical aﬃne W-
algebra. (Note that, by an abuse of notation, these generators are denoted by qi
in Mathematica, the same letter used to denote the corresponding element of gf to
which they are attached through the map w. In fact, the notation w(qi) is used in
Corollary 2.3.)

In the following example, we apply the command w[] to an random element of o7.
We construct it as follows: ﬁrst we deﬁne a random element A ∈ gl7. Then, using

19

the function Sigma[] (which, given A as input gives σ(A) = −SAatS as result) we
get the element A+σ(A) ∈ o7 (we can also check it with the commad CheckAlg[]).

The command w[] gives the corresponding linear combination of the generators of
the classical aﬃne W-algebra, see Theorem 2.4.

Note that, apart from computing explicitly the generators of the classical aﬃne
W-algebra, the command w[] is heavily used to implement equation (2.20).

5.2. Computation of λ-brackets among generators. One of the most useful
features of WAlg is the implementation of formula (2.20) for the computation of the
Poisson structure H, deﬁned by equation (2.17), associated to the classical aﬃne
W-algebra. After we compute H, we can use the package MasterPVA to compute
the λ-brackets between any elements of the classical aﬃne W-algebra.

Let us how how to proceed in the concrete example of the Lie algebra sp4 and its
minimal nilpotent element f [DSKV14]. Recall that sp4 is a classical Lie algebra
of type C2.

20

The number of generators of W(sp4, f ) is the same as the dimension of gf , which
in this case is 6. The command SetS[] allows us to set the element in s ∈ gd,
recall that d is the maximal eigenvalue of ad x, which is used in formula (2.20). If
this command is left without argument it automatically choose a generic s. Note
that in this example gd = Ce, so the choice is unique up to a constant. Finally, the
command GenerateH[] gives the Poisson structure H associated to the classical
aﬃne W-algebra by equation (2.17) implementing the formula (2.20). The optional
parameter in the command is the formal parameter used in the deﬁnition of the
λ-bracket, whose default value is β.

The next step is to allow the package MasterPVA to use the output of GenerateH[].
In order to do that, we need to set the number of variables, use qi as the name of
the generators, use y as independent variable, and use β as the formal parameter.

Now the commands of MasterPVA can be used. For example, we can check that H
is indeed a Poisson structure.

We use our program to check identity (2.23). The Virasoro element L deﬁned in
Proposition 2.6(c) is computed with the command GetVirasoro[], whose argument
is the nilpotent element f.

21

Finally, we can use our program to compute the ﬁrst few equations of the corre-
sponding generalized Drinfeld-Sokolov hierarchies. We deﬁne g0 and g1 according
to [DSKV14, Section 6.2] and we compute the Hamiltonian equation (1.13). We
get

and

22

The above equations agree with equations (6.19) and (6.20) in [DSKV14]. After a
Dirac reduction (since the generators w(a), where a ∈ gf
0, do not evolve in time),
we get simpler equations

23

The above results agree with equations (6.21) and (6.22) in [DSKV14]. The latter is
a higher symmetry of the Yajima-Oikawa equation [YO76] (see also [DSKV14-Err]).

5.3. Classical aﬃne W-algebras associated to simple Lie algebras of rank
two and principal nilpotent element. In this section we provide explicit for-
mulas for the λ-brackets among generators for classical aﬃne W-algebras W(g, f ),
where g = A2, B2 and G2 and f is a principal nilpotent. In this case, dim gf =
rank g = 2. Hence, by Theorem 2.4, as a diﬀerential algebra we have that W(g, f ) =
| n ∈ Z+], where w1 = w(q1), w2 = w(q2) and {q1, q2} is a basis of gf
C[w(n)
as in Section 2.1.

, w(n)

1

2

5.3.1. g = sl3. The computations can be found in the ﬁle A_2_principal.nb. The
result is

{w1λw1}z = (2λ + ∂)w1 − 2cλ3 ,
{w1λw2}z = (3λ + ∂)w2 + 3czλ ,
1 − 1
{w2λw2}z = (2λ + ∂)
w2
16

(cid:18) 1

(cid:19)

w(cid:48)(cid:48)

1

− (2λ + ∂)3 5
243

w1 +

λ3 .

c
6

3c
Note that after rescaling c (cid:55)→ − C
(5.1) agrees with the results in [DSKW10] (only the PVA structure corresponding
to z = 0 is considered there).

√−6Cw2, equation

2 and setting L = w1, W = 8

(5.1)

5.3.2. g = o5. The computations can be found in the ﬁle B_2_principal.nb. The
result is

{w1λw1}z = (2λ + ∂)w1 − 10cλ3 ,
(cid:18) 2232
{w1λw2}z = (4λ + ∂)w2 + 8czλ ,
(cid:19)
{w2λw2}z = (2λ + ∂)

54c2 w3

1 +

7
52c

(cid:18)

− 1
225

w(cid:48)(cid:48)
2 +

+ (2λ + ∂)5 7

1

3
2352 w(4)
2352 w1 − 2c

5

+ (2λ + ∂)3

(cid:18)

λ7 + z

(2λ + ∂)

w1w(cid:48)(cid:48)

1

(cid:19)

w1w2 − 1

(w(cid:48)

2253c
− 72
1 − 3
w2
2253c
225
2 · 7
52 w1 − 223c

5

1)2 − 29
2 · 53c
(cid:19)
2252 w(cid:48)(cid:48)
7

w2 +

1

λ3

.

√

(5.2)

10 and setting L = w1, W = −40C

Note that after rescaling c (cid:55)→ − C
2w2, equation
∼= sp4, the corresponding classi-
(5.2) agrees with the results in [DSKW10]. Since o5
cal aﬃne W-algebras are isomorphic. In fact we can perform the same computations
starting from the Lie algebra sp4, which can be found in the ﬁle C_2_principal.nb,
and check that we get the same expression for the λ-brackets given by equation (5.2)
2.
after rescaling c by a factor 1

5.3.3. g = G2. The computations can be found in the ﬁle G_2_principal.nb. The
result is
{w1λw1}z = (2λ + ∂)w1 − 28cλ3 ,
{w1λw2}z = (6λ + ∂)w1 + 144czλ ,
{w2λw2}z =

(cid:32) 1(cid:88)

(2λ + ∂)2i+1Q2i+1 − 624c
7

(2λ + ∂)2i+1P2i+1 − 3c
7

4(cid:88)

λ11 + z

(cid:33)

λ5

,

i=0

i=0

24

where

5

1w(cid:48)(cid:48)

1

2 − 3 · 769
1w(cid:48)
w(cid:48)
2 · 75c3 w3
w1w(cid:48)(cid:48)
5
w(cid:48)(cid:48)
1 w(4)

237c

2

1

+

P1 =

2372c

1)2 +

1 )2 +

1w2 − 3 · 61

2574c3 w2
1 +

1 − 11 · 13
3352
1(w(cid:48)
2 · 73c2 w2
76c4 w5
3223 · 97
3 · 29
3211 · 19
2674c2 w1(w(cid:48)(cid:48)
1)2w(cid:48)(cid:48)
2874c2 (w(cid:48)
w2w(cid:48)(cid:48)
1 )2 +
1 +
2372c
1 − 32 · 607
3 · 9551
3 · 347
1 − 32
1w(cid:48)(cid:48)(cid:48)
2774c2 w1w(cid:48)
(w(cid:48)(cid:48)(cid:48)
1w(4)
2874c2 w2
+
2873c
2872c
1 − 3 · 5 · 6 · 7
325
2 − 325
− 1
w(cid:48)
21072 w(8)
w1w(6)
1w(5)
w(4)
1 +
2873c
247
5 · 31
P3 = − 3 · 11 · 479
3 · 5 · 11 · 19
2874c2 w1(w(cid:48)
1)2 +
2874c3 w4
1 +
2372c
− 3311 · 49
1 − 3 · 52112
2 − 3 · 5 · 11
1 )2 − 5
w(cid:48)
1w(cid:48)(cid:48)(cid:48)
w(cid:48)(cid:48)
(w(cid:48)(cid:48)
237
1)2 − 3311 · 43
w2 − 3311
1 − 13
(w(cid:48)
w3
2973c
247
2873c
3 · 5 · 11
3311
2872 w(cid:48)(cid:48)
21072 w1 ,
1 ,
3 · 5 · 31
3229
72 w(cid:48)(cid:48)
1 ,
1 +

2873c
3 · 5 · 11 · 139
P7 = − 3211 · 31
Q1 = − 223 · 11 · 13

72 w1 .

w1w2 +

2874c2

Q3 =

2873c

2973c

w2

1 +

2873c

2773c

P5 =

P9 =

w2

73c

,

1

1w(cid:48)(cid:48)
w2

1

3 · 11 · 23 · 89
2774c2
3 · 5 · 11
2872 w(6)
3411
2972 w(4)

1 +

1

1

,

1 +

,

w1w(4)
w1w(cid:48)(cid:48)

5.4. Generation of the indices. For a ∈ gf−l and b ∈ gf−m, formula (2.20) involves
a long summation over the indices ((cid:126)j, (cid:126)n) ∈ J−(cid:126)k, where (cid:126)k = (k1, . . . , kt), −l + 1 ≤
k1 ≺ ··· ≺ kt ≤ m. For each t ≥ 1, the list of the indices k1, . . . , kt is ﬁnite, and
moreover given l and m the maximum value for t is the ﬁrst integer ¯t such that
¯t ≥ l + m.

The generation of the indices (cid:126)k is a long process, and it dramatically slows down
the execution time of the command GenerateH[]. To prevent this issue, a precom-
piled list of indices is distributed together with the package, in the ﬁle listK_6.txt.
It contains the default data for the computation of formula (2.20), and it works for
all classical aﬃne W-algebras with d ≤ 6 (this is suﬃcient, for example, to compute
the classical aﬃne W-algebras associated to all nilpotent orbits of o8). If one wants
to work with Lie algebras with d > 6, then it is necessary to generate a bigger table
of indices, that may be computed before starting the computation of the Poisson
structure H, and not necessarily in an interactive session. In case the user does
not notice that a bigger set of indices would be needed, the command GenerateH[]
will produce a long list of error messages.

The Mathematica kernel, without the user interface, can be usually run in a shell
with the command math. We load the package and generate the table of indices with
the command GenerateTableIndices[d]. The command can take up to several
hours to be completed, and generates a ﬁle listK_d.txt saved in the active folder.

25

To use a previously generated table of indices, the command LoadTableIndices[filename]
must be run before GenerateH[]. The ﬁle will be looked for in the active folder,
unless the full path is speciﬁed.

6. List of commands in WAlg

In this section we list the commands provided by WAlg. We discuss separately
the commands that constitute the main core of the program and the ones that can
have broader applications, for instance to prepare the input the program needs.

Please note that the symbols q, y, z, \[ScriptS] (i. e. s) and \[Beta] (i. e. β)
are used by the program, hence they should not be used as variable names in your
program.

6.1. Principal commands of the program.

InitializeWAlg[name_String,n_Integer] is the ﬁrst command that the pro-
gram must receive after loading the package.
It sets the simple Lie algebra g
underlying the classical aﬃne W-algebra. If, for instance, one would like to start
from A6, the command should be InitializeWAlg["A",6].

SetNil[a_List] sets the nilpotent element f ∈ g in order to construct W(g, f ).
GetNil[] gives the nilpotent element f used in the deﬁnition of the classical

aﬃne W-algebra.

GetDim[] gives the dimension of the matrices used for the explicit representation

of g.

SetS[s_List] sets the element s ∈ g used in the deﬁnition of the aﬃne PVA, as
in (2.8). If the command is given without argument, it authomatically chooses a
generic element of gd. Notice that the command must be called before computing
the λ-brackets between the generators of the classical aﬃne W-algebra.

GetS[] gives the element s used in (2.8) after it has been set.
ComputeWAlg[nil_List] computes a basis for gf made by ad x-eigenvectors,
where h = 2x is the diagonal element of the sl2-triple containing f = nil, as well
as the dual basis (with respect to the trace form) of ge and the corresponding
ad x-eigenvalues (with multipliciities).

All these outputs can be displayed by using the next three commands:
GetWBasis[] gives the list of elements of the aforementioned basis for gf ;
GetWBasisDual[] gives the list of elements of the dual basis of ge;

26

GetWEigen[] gives the list of ad x-eigenvalues.
GetX[] gives the element x = h/2, where h is the diagonal element of the sl2-
w[a_List] given an element a ∈ g, it applies the projection πgf to it and then

triple associated to f; it can be used only after executing the command ComputeWAlg[].

the map w deﬁned in Theorem 2.4.

GenerateH[par_] must be run after ComputeWAlg[] and SetS[]. It computes
the Poisson structure H deﬁned by equation (2.17) using Theorem 2.5. It uses par
as the formal indeterminate (the default is β).

LoadTableIndices[filename_String] chooses a ﬁle diﬀerent from the default
(listK_6.txt) as the source of the indices used in the formula (2.20). It is necessary
to use it (after generating the suitable ﬁle) when d > 6, see Section 5.4.

GenerateTableIndices[n_Integer] computes a custom list of indices going
up to n, and saves it in the ﬁle listK_n.txt for further usage. Notice that the
computation is extremely time-consuming.

GetVirasoro[nil_List] provides the Virasoro element of Proposition (2.6)(c)

with f = nil.

6.2. Other useful commands. Comm[a_,b_] computes the commutator between
the two matrices a and b.

Prod[a_,b_] computes the value of the symmetric invariant bilinear form Tr(ab).
Proj[a_List] applies the map πgf to an element of a ∈ g. It must be run after

ComputeWAlg.

M[i_Integer,j_Integer] gives the elementary matrix (of dimensions GetDim[])

with 1 in the position (i, j).

CheckAlg[a_List] checks whether the matrix a belongs to the Lie algebra de-

clared in InitializeWAlg[].

Sigma[a_List] computes σ(a) according to the deﬁnition given in Section 5.
SetDispPar[s_]] sets a dispersive parameter (default is 1, hence making it in-
visible) in formula (2.20), useful if we want to compute the dispersionless limit of
this formula.

GetDispPar[] gives the aforementioned dispersive parameter.

References

[BDSK09] Barakat A., De Sole A., Kac V., Poisson vertex algebras in the theory of Hamiltonian

equations, Jpn. J. Math. 4, (2009), no. 2, 141-252.

[BD04] Beilinson A., Drinfeld V.G., Chiral algebras, AMS Colloquium Publications, vol 51, Amer.

Math. Soc., Providence, RI, 2004.

[Cas15a] Casati M., On deformations of multidimensional Poisson brackets of hydrodynamic type,

Comm. Math. Phys. 335 (2015), no. 2, 851-894.

[Cas15b] Casati M., Dispersive deformations of the Hamiltonian structure of Euler’s equations,

arXiv: 1509.00254.

[CasPhD] Casati M., Multidimensional Poisson Vertex Algebras and Poisson cohomology of
Hamiltonian structures of hydrodynamic type, PhD Thesis, International School for Advanced
Studies, Trieste, 2015.

[CCS15] Carlet G., Casati M., Shadrin S., Poisson cohomology of scalar multidimensional

Dubrovin–Novikov brackets, arXiv: 1512.05744

[CMG93] Collingwood D.H., McGovern W.M., Nilpotent orbits in semisimple Lie algebra, Van

Nostrand Reinhold Mathematics Series, Van Nostrand Reinhold Co., New York, 1993.

[D’AK98] D’Andrea A., Kac V.G., Structure theory of ﬁnite conformal algebras, Selecta Math 4

[DSK06] De Sole A., Kac V.G., Finite vs aﬃne W -algebras, Japan. J. Math. 1 (2006), 137-261.
[DSK13] De Sole A., Kac V. G., The variational Poisson cohomology, Jpn. J. Math 8 (2013), no.

(1998), 377-418.

1, 1-145.

27

[DSKT14] De Sole A., Kac V.G., Turhan R., A new approach to the Lenard-Magri scheme of

integrability, Comm. Math. Phys. 330 (2014), 107-122.

systems of PDE, J. Math. Phys.

[DSKT15] De Sole A., Kac V.G., Turhan R., On integrability of some bi-Hamiltonian two ﬁeld
[DSKV13] De Sole A., Kac V. G., Valeri D., Classical W-algebras and generalized Drinfeld-
Sokolov bi-Hamiltonian systems within the theory of Poisson vertex algebras, Comm. Math.
Phys. 323 (2013), no. 2, 663-711.
[DSKV14] De Sole A., Kac V. G., Valeri D., Classical W-algebras and generalized Drinfeld-
Sokolov hierarchies for minimal and short nilpotents, Comm. Math. Phys. 331 (2014), no.
2, 623-676.
[DSKV14-Err] De Sole A., Kac V. G., Valeri D., Erratum to: Classical W-algebras and general-
ized Drinfeld-Sokolov hierarchies for minimal and short nilpotents, Comm. Math. Phys. 333
(2015), n.3, 1617-1619.
[DSKV15] De Sole A., Kac V. G., Valeri D., Adler-Gelfand-Dickey approach to classical W-
algebras within the theory of Poisson vertex algebras, Int. Math. Res. Not. 21 (2015), 11186-
11235.
[DSKV16] De Sole A., Kac V. G., Valeri D., Structure of classical (ﬁnite and aﬃne) W-algebras,

to appear in JEMS (2016), arXiv:1404.0715.

PDE, preprint arXiv:1508.02549.

[DSKVold] De Sole A., Kac V. G., Valeri D., A new scheme of integrability for (bi)-Hamiltonian
[DSKVnew] De Sole A., Kac V. G., Valeri D., Classical aﬃne W-algebras for glN and as-
sociated integrable Hamiltonian hierarchies, to appear in Comm. Math. Phys., preprint
arXiv:1509.06878.

[DSKW10] De Sole A., Kac V. G., Wakimoto M., On classiﬁcation of Poisson vertex algebras,

Transform. Groups 15 (2010), no. 4, 883-907.

[Dor93] Dorfman I., Dirac structures and integrability of non-linear evolution equations, John

[DS85] Drinfeld V., Sokolov. V., Lie algebras and equations of KdV type, Soviet J. Math. 30

Wiley and sons, New York, 1993.

(1985), 1975-2036.

[Mok88] Mokhov, Oleg I., Poisson brackets of Dubrovin–Novikov type (DN-brackets),

Funct. Anal. Appl 22 (1988), no. 4, 336–338.

[YO76] Yajima N., Oikawa M., Formation and interaction of sonic-Langmuir solitons–inverse

scattering method, Progr. Theoret. Phys. 56 (1976), n.6, 1719-1739.

Università degli Studi di Milano Bicocca, Dipartimento di Matematica e Appli-

cazioni, 20126 Milano, Italy
Università degli Studi di Bergamo, DIGIP, 24044 Dalmine (BG), Italy

E-mail address: matteo.casati@sissa.it

Yau Mathematical Sciences Center, Tsinghua University, 100084 Beijing, China
E-mail address: daniele@math.tsinghua.edu.cn

28

[DN83] Dubrovin, B. A., Novikov, S. P., Hamiltonian formalism of one-dimensional systems of
the hydrodynamic type and the Bogolyubov-Whitham averaging method, Dokl. Akad. Nauk
SSSR 270 (1983), no. 4, 781–785.

[Eks11] Ekstrand, J., Lambda: a Mathematica package for operator product expansions in vertex

algebras, Comput. Phys. Commun. 182 (2011), no. 2, 409–418.

[FT86] Faddeev L.D., Takhtajan L.A., Hamiltonian approach in soliton theory, Nauka, 1986.
[Kac98] Kac V., Vertex algebras for beginners, University Lecture Series, AMS, Vol. 10, 1996 (2nd

[Mag78] Magri F., A simple model of the integrable Hamiltonian equation, J. Math. Phys. 19

Ed., AMS, 1998).

(1978), no. 5, 1156-1162.

