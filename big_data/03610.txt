A short proof that O2 is an MCFL

Mark-Jan Nederhof

School of Computer Science
University of St Andrews, UK

6
1
0
2

 
r
a

 

M
1
1

 
 
]
L
F
.
s
c
[
 
 

1
v
0
1
6
3
0

.

3
0
6
1
:
v
i
X
r
a

Abstract

We present a new proof that O2 is a mul-
tiple context-free language.
It contrasts
with a recent proof by Salvati (2015) in its
avoidance of concepts that seem speciﬁc
to two-dimensional geometry, such as the
complex exponential function. Our simple
proof creates realistic prospects of widen-
ing the results to higher dimensions. This
ﬁnding is of central importance to the rela-
tion between extreme free word order and
classes of grammars used to describe the
syntax of natural language.

1 Introduction

The alphabet of the MIX language has three sym-
bols, a, b and c. A string is in the language if and
only if the number of a’s, the number of b’s, and
the number of c’s are all the same. A different
way of deﬁning the MIX language is as permu-
tation closure of the regular language (abc)∗, as
noted by Bach (1981); see also Pullum (1983).

If a, b and c represent, say, a transitive verb and
its subject and its object, then a string in MIX rep-
resents a sentence with any number of triples of
these constituents, in a hypothetical language with
extreme free word order. This is admittedly rather
unlike any actual natural language. Joshi (1985)
argued that because of this, grammatical for-
malisms for describing natural languages should
not be capable of generating MIX. He also conjec-
tured that MIX was beyond the generative capac-
ity of one particular formalism, namely the tree
adjoining grammars. Several decades passed be-
fore Kanazawa and Salvati (2012) ﬁnally proved
this conjecture.

MIX has been studied in the context of
several other
Joshi et al. (1991)
showed that MIX is generated by a gener-

formalisms.

alization of tree adjoining grammars that de-
couples local domination for linear precedence.
Boullier (1999) showed that MIX is generated by
a range concatenation grammar. Negative re-
sults were addressed by Sorokin (2014) for well-
nested multiple context-free grammars, and by
Capelletti and Tamburini (2009) for a class of cat-
egorial grammars. The MIX language is also of
interest outside of computational linguistics, e.g.
in computational group theory (Gilman, 2005).

A considerable advance in the understanding
of the MIX language is due to Salvati (2015),
who showed that MIX is generated by a multiple
context-free grammar (MCFG). The main part of
the proof shows that the language O2 is generated
by a MCFG. This language has four symbols, a, a,
b and b. A string is in the language if and only if
the number of a’s equals the number of a’s, and the
number of b’s equals the number of b’s. MIX and
O2 are rationally equivalent, which means that if
one is generated by a multiple context-free gram-
mar, then so is the other.

The proof by Salvati (2015) is remarkable, in
that it is one of the few examples of geometry be-
ing used to prove a statement about formal lan-
guages. The proof has two related disadvantages
however. The ﬁrst is that a key element of the
proof, that of the complex exponential function, is
not immediately understood without background
in geometry. The second is that this also seems
to restrict the proof technique to two dimensions,
and there is no obvious avenue to generalize the
result to a variant of MIX with four or ﬁve sym-
bols. We hope to remedy this by an alternative,
self-contained proof that avoids the complex expo-
nential function. The core idea is a straightforward
normalization of paths in two dimensions, which
allow simple arguments to lead to a proof by con-
tradiction. We also sketch part of a possible proof
in three dimensions.

S(abababba)

(1)

R(ababab, ba)

(4)

R(ab, ab)

(2)

R(ab, ba)

(3)

R(a, a)

(6)

R(b, b)

(9)

R(a, a)

(7)

R(b, b)

(9)

Figure 1: Derivation in G. The numbers indicate
the rules that were used.

2 Initial problem

The MCFG G is deﬁned as:

S(xy) ← R(x, y)

R(xp, yq) ← R(x, y) R(p, q)
R(xp, qy) ← R(x, y) R(p, q)
R(xpy, q) ← R(x, y) R(p, q)
R(p, xqy) ← R(x, y) R(p, q)

R(a, a) ←
R(a, a) ←
R(b, b) ←
R(b, b) ←
R(ε, ε) ←

(1)
(2)
(3)
(4)
(5)
(6)
(7)
(8)
(9)
(10)

For the meaning of MCFGs in general,
Seki et al. (1991);
malism,
Kallmeyer (2010)
context-sensitive grammar formalisms.

see
for a closely related for-
see
for an overview of mildly

see Vijay-Shanker et al. (1987);

The reader unfamiliar with this literature is en-
couraged to interpret the rules of the grammar as
logical implications, with S and R representing
predicates. There is an implicit conjunction be-
tween the two occurrences of R in the right-hand
side of each of the rules (2) — (5). The symbols
x, y, p, q are string-valued variables, with implicit
universal quantiﬁcation that has scope over both
left-hand side and right-hand side of a rule. The
rules (6) — (10) act as axioms. The symbols a, a,
b, b are terminals, and ε denotes the empty string.
We can derive S(x) for certain strings x, and
R(x, y) for certain strings x and y. Figure 1
presents an example of a derivation. The language
generated by G is the set L of strings x such that
S(x) can be derived.

By induction on the depth of derivations, one
can show that if R(x, y), for strings x and y, then
xy ∈ O2. Thereby, if S(x) then x ∈ O2, which
means L ⊆ O2. The task ahead is to prove that if
xy ∈ O2, for some x and y, then R(x, y). From
this, L = O2 then follows.

Let |x| denote the length of string x. For an
inductive proof that xy ∈ O2 implies R(x, y),
the base cases are as follows.
If xy ∈ O2 and
|x| ≤ 1 and |y| ≤ 1, then trivially R(x, y) by
rules (6) — (10).

Furthermore, if we can prove that xy ∈ O2,
x 6= ε and y 6= ε together imply R(x, y), for
|xy| = m, some m, then we may also prove
that x′y′ ∈ O2 on its own implies R(x′, y′) for
|x′y′| = m. To see this, consider m > 0 and
z ∈ O2 with |z| = m, and write it as z = xy for
some x 6= ε and y 6= ε. If by assumption R(x, y),
then together with R(ε, ε) and rule (4) or (5) we
may derive R(xy, ε) or R(ε, xy), respectively. In
the light of this, the inductive step merely needs to
show that if for some x and y:

• xy ∈ O2, |x| ≥ 1, |y| ≥ 1 and |xy| > 2, and

• pq ∈ O2 and |pq| < |xy| imply R(p, q), for

all p and q,

then also R(x, y). One easy case is if x ∈ O2 (and
thereby y ∈ O2) because then we can write x =
x1x2 for some x1 6= ε and x2 6= ε. The induc-
tive hypothesis states that R(x1, x2) and R(ε, y),
which imply R(x, y) using rule (4).

A second easy case is if x or y has a proper pre-
ﬁx or proper sufﬁx that is in O2. For example,
assume there are z1 6= ε and z2 6= ε such that
x = z1z2 and z1 ∈ O2. Then we can use the
inductive hypothesis on R(z1, ε) and R(z2, y), to-
gether with rule (2).

At this time, the reader may wish to read Fig-
ure 1 from the root downward. First, abababba is
divided into a pair of strings, namely ababab and
ba. At each branching node in the derivation, a
pair of strings is divided into four strings, which
are grouped into two pairs of strings, using rules
(2) — (5), read from left to right. Rules (2) and
(3) divide each left-hand side argument into two
parts. Rule (4) divides the ﬁrst left-hand side ar-
gument into three parts, and rule (5) divides the
second left-hand side argument into three parts.

What remains to show is that if z1z2 ∈ O2, z1 /∈
O2 and |z1z2| > 2, and no proper preﬁx or proper
sufﬁx of z1 or of z2 is in O2, then there is at least

one rule that allows us to divide z1 and z2 into four
strings altogether, say x, y, p, q, of which at least
three are non-empty, such that xy ∈ O2. This
will then permit use of the inductive hypothesis on
R(x, y) and on R(p, q).

We can in fact restrict our attention to z ′

1z ′

1z ′

1z ′

1 and z ′

2 ∈
2| > 2, and no non-empty substring of
O2, |z ′
2 is in O2, which can be justiﬁed as
1 or of z ′
z ′
follows. Suppose we have z1 and z2 as in the
2 result
previous paragraph, and suppose z ′
from z1 and z2 by exhaustively removing all non-
empty substrings that are in O2; note that still
1 and z ′
|z ′
2
into x′, y′, p′, q′, of which at least three are non-
empty, such that x′y′ ∈ O2, then the same rule
can be used to divide z1 and z2 into x, y, p, q with
the required properties, which can be found from
x′, y′, p′, q′ simply by reintroducing the removed
substrings at corresponding positions.

2| > 2. If we can use a rule to divide z ′

3 Geometrical view

We may interpret a string x geometrically in two
dimensions, as a path consisting of a series of line
segments of length 1, starting in some point (i, j).
Every symbol in x, from beginning to end, rep-
resents the next line segment in that path; an oc-
currence of a represents a line segment from the
previous point (i, j) to the next point (i + 1, j), a
represents a line segment from (i, j) to (i − 1, j),
b represents a line segment from (i, j) to (i, j + 1),
and b represents a line segment from (i, j) to
(i, j − 1).
If x ∈ O2, then the path is closed,
that is, the starting point and the ending point are
the same.
If we have two strings x and y such
that xy ∈ O2 and x /∈ O2, then this translates to
two paths, connecting two distinct points, which
together form a closed path. This is illustrated in
Figure 2.

In the following, we assume a ﬁxed choice of
some x and y such that xy ∈ O2, |xy| > 2, and
no non-empty substring of x or of y is in O2. The
path of x starting in (0, 0) will be called A[0]. Let
(i, j) be the point where this path ends; i is the
number of occurrences of a in x minus the number
of occurrences of a in x; j is similarly determined.
The path of y, from (i, j) back to (0, 0), will be
called B[1]. We generalize this to paths called
A[k] and B[k], for integer k, which are the paths
of x and y, respectively, that start in (k · i, k · j).
Where the starting points are irrelevant, we talk
about paths A and B. We also refer to (k · i, k · j)

−2 −1 0
1

1

2

a

b

a
ba

bab

0

−1

−2

−3

Figure 2: Two strings x = ababab and y = ba to-
gether represent a closed path, consisting of a path
from (0, 0) to (−1, −1) and a path from (−1, −1)
to (0, 0).

as point P [k].

Let C be a path, which can be either A[k] or
B[k] for some k. We write Q ∈ C to denote that
Q is a point on C. Let Q = (i, j) ∈ C, not
necessarily with i and j being integers. We de-
ﬁne the path-distance dC (Q) of Q on C to be the
length of the path along line segments of C to get
from P [k] to Q.
In Figure 2, (0, −1) has path-
distance 3 on A[0], as the path on A[0] to reach
(0, −1) from P [0] = (0, 0) consists of the line
segments represented by the preﬁx aba of x. Sim-
ilarly, dA[0]((0.5, −1)) = 2.5.

Let C be a path as above and let points
Q1, Q2 ∈ C be such that dC(Q1) ≤ dC (Q2). We
deﬁne the subpath D = sub C (Q1, Q2) to be such
that Q ∈ D if and only if Q ∈ C and dC(Q1) ≤
Q ≤ dC(Q2), and dD(Q) = dC (Q) − dC (Q1)
for every Q ∈ D. For two points Q1 and Q2, the
line segment between Q1 and Q2 is denoted by
seg(Q1, Q2).

The task formulated at the end of Section 2 is
accomplished if we can show that at least one of
the following must hold:

• the angle in P [0] between the beginning of

A[0] and that of B[0] is 180◦ (Figure 3);

• there is a point Q /∈ {P [0], P [1]} such that

Q ∈ A[0] and Q ∈ B[1] (Figure 4);

• there is a point Q 6= P [1] such that Q ∈ A[0],
Q ∈ A[1] and dA[0](Q) > dA[1](Q) (Fig-
ure 5); or

• there is a point Q 6= P [0] such that Q ∈ B[0],
Q ∈ B[1] and dB[1](Q) > dB[0](Q) (analo-
gous to Figure 5).

We will do this through a contradiction that re-

sults if we assume:

P [−1]

180◦

a

4 Continuous view

ab

a
P [0]

b

a b

b

b
P [1]

a

a

Figure 3: With x = a b a b b and y = a a b, the
beginning of path A[0] and the beginning of (dot-
ted) path B[0] have an 180◦ angle in P [0], which
implies x and y start with complementing symbols
(here a and a; the other possibility is b and b). By
applying rule (2), two smaller closed paths result,
one of which consists of these two complementing
symbols.

P [1]

a
a b

a

b

a

a

ba

b
P [0]

Figure 4: The paths A[0] and B[1] of x = baaab
and y = a ab ba have point (1, 1) in common. Two
smaller closed paths result by applying rule (3).

a

a

b

ab
P [0]

b

a

Q
a
ba

a
a
P [1]

P [2]

Figure 5: With x = b b a a b a a b a and y = a a a,
the path A[0] and the (dotted) path A[1] have point
Q in common, with dA[0](Q) = 6 > dA[1](Q) =
1. By applying rule (4), two smaller closed paths
result, one of which is formed by preﬁx b of length
1 and sufﬁx ab a of length |x| − 6 = 3 of x.

(i) the angle in P [0] between the beginning of

A[0] and that of B[0] is not 180◦;

(ii) A[0] ∩ B[1] = {P [0], P [1]};

(iii) there is no Q ∈ (A[0] ∩ A[1]) \ {P [1]} such

that dA[0](Q) > dA[1](Q); and

(iv) there is no Q ∈ (B[0] ∩ B[1]) \ {P [0]} such

that dB[1](Q) > dB[0](Q).

In the below, we will refer to these assumptions as
the four constraints.

Whereas paths A and B were initially formed out
of line segments of length 1 between points (i, j)
with integers i and j, the proof becomes consider-
ably easier if we allow i and j to be real numbers.
The beneﬁt lies in being able to make changes to
the paths that preserve the four constraints, to ob-
tain a convenient normal form for A and B. If we
can prove a contradiction on the normal form, we
will have shown that no A and B can exist that
satisfy the four constraints.

We deﬁne, for each integer k, the line ℓ[k],
which is perpendicular to the line through P [k]
and P [k + 1], and lies exactly half-way between
P [k] and P [k + 1]. Much as before, we write
Q ∈ ℓ[k] to denote that Q is a point on line ℓ[k].
We will consistently draw points . . . , P [−1], P [0],
P [1], . . . in a straight line from left to right.

Let C be a path, which can be either A[k′]
or B[k′], some k′, and let Q ∈ C. We write
from right C(Q, ℓ[k]) to mean that path C is
strictly to the right of ℓ[k] just before reaching Q,
or formally, there is some δ > 0 such that each
Q′ ∈ C with dC (Q) − δ < dC(Q′) < dC (Q)
lies strictly to the right of ℓ[k]. The predicates
from left, to right, to left are similarly deﬁned.
Let Q1, Q2 ∈ C ∩ ℓ[k], some k, such that
dC(Q1) ≤ dC(Q2). We say that C has an excur-
sion from the right between Q1 and Q2 at ℓ[k] if
from right C(Q1, ℓ[k]) and to right C(Q2, ℓ[k]).
This is illustrated in Figure 6: the path is strictly
to the right of ℓ[k] just before reaching Q1. From
there on it may (but need not) cross over to the left
of ℓ[k]. Just after it reaches Q2, it must again be
strictly to the right of ℓ[k]. The deﬁnition of excur-
sion from the left is symmetric. Note that excur-
sions may be nested; in Figure 6, sub C(Q1, Q2)
has an excursion at ℓ[k] from the left below Q2.

In Figure 6, the pair of points Q1 and R1 will be
called a crossing of ℓ[k] from right to left, charac-
terized by Q1, R1 ∈ ℓ[k], from right C(Q1, ℓ[k]),
to left C(R1, ℓ[k]) and sub C(Q1, R1) being a line
segment. The pair of points R2 and Q2 is a cross-
ing of ℓ[k] from left to right, where the length of
seg(R2, Q2) happens to be 0. In much of the fol-
lowing we will simplify the discussion by assum-
ing crossings consist of single points, as in the case
of R2 = Q2. However, existence of crossings con-
sisting of line segments of non-zero length, as in
the case of Q1 and R1, would not invalidate any of
the arguments of the proof.

ℓ[k − 1]

ℓ[k]

ℓ[k + 1]

Q1

R1

R2=Q2

P [k]

P [k + 1]

P [k + 2]

Figure 6: Excursion from the right at ℓ[k].

ℓ[k − 1]

ℓ[k]

ℓ[k + 1]

Q′
1

Q′
2

P [k]

m

P [k + 1]

P [k + 2]

Figure 7: The excursion from Figure 6 truncated
in Q′

2 on line m.

1 and Q′

1, Q′

2 ∈ C ∩ m, where dC (Q′

Excursions are the core obstacle that needs to
be overcome for our proof. We can truncate an
excursion at ℓ[k] by ﬁnding a suitable line m that
is parallel to ℓ[k], some small distance away from
it, between ℓ[k] and P [k + 1] for excursions from
the right, and between ℓ[k] and P [k] for excur-
sions from the left. We further need to ﬁnd points
1) < dC (Q1) and
Q′
2). Because our coordinates no
dC (Q2) < dC (Q′
longer need to consist of integers, it is clear that
2 satisfying these requirements must
m, Q′
exist.
The

in
2) to become seg(Q′
1, Q′

changing
2), as il-
sub C(Q′
lustrated by Figure 7. Note that if C is say A[k′],
some k′, then changing the shape of C means
changing the shape of A[k′′] for any other k′′ as
well; the difference between A[k′] and A[k′′] is
only in the starting point P [k′] versus P [k′′].

1 and Q′

truncation

consists

1, Q′

1 and Q′

At this time, we must allow for the possibility
2 can
that for some excursions, no m, Q′
be found with which we can implement a trun-
cation, if we also need to preserve the four con-
straints and preserve absence of self-intersections.
There is a small number of possible causes. First,
suppose that C = A[k′] and B[k′ + 1] intersects
with seg(Q1, Q2). Then B[k′ + 1] may intersect
1 and
with seg (Q′

2) for any choice of m, Q′

1, Q′

ℓ[k]

Q1
R1

Q2

R2

(a)

ℓ[k]

ℓ[k]

P [k′]

Q1

Q

Q2

(b)

Q1

Q

Q′

Q2

(c)

Figure 8: (a) Regions (shaded) of an excursion at
ℓ[k]; due to additional crossings in R1 and R2,
three more excursions exist, each with a smaller
area. (b) & (c) If truncation would introduce self-
intersection,
then either the excursion is ﬁlled,
with some point P [k′] as in (b), or there is an ex-
cursion with smaller area, illustrated by shading in
(c).

2, and thereby no truncation is possible with-
Q′
out violating constraint (ii). Similarly, a trunca-
tion may be blocked if C = B[k′ + 1] and A[k′]
intersects with seg(Q1, Q2). Next, it could be
that C = A[k′], while dA[k′](Q1) > dA[k′+1](Q)
holds for some Q ∈ seg(Q1, Q2) ∩ A[k′ + 1], or
dA[k′−1](Q) > dA[k′](Q2) holds for some Q ∈
seg(Q1, Q2)∩A[k′−1], either of which potentially
blocks a truncation if constraint (iii) is to be pre-
served. Constraint (iv) has similar consequences.
Furthermore, if we need to preserve absence of
self-intersections, a truncation may be blocked if
dC(Q) < dC (Q1) or dC (Q2) < dC (Q) for some
Q ∈ seg(Q1, Q2) ∩ C.

5 Normal form

The regions of an excursion of C between Q1
and Q2 at ℓ[k] are those that are enclosed by
(subpaths of) sub C (Q1, Q2) and (subsegments of)
seg(Q1, Q2), as illustrated by Figure 8(a). The
area of the excursion is the surface area of all re-
gions together. We say an excursion is ﬁlled if
any of its regions contains at least one point P [k′],
some integer k′, otherwise it is said to be unﬁlled.
We say A and B are in normal form if no excur-
sion can be truncated without violating the four
constraints or introducing a self-intersection. Sup-
pose A and B are in normal form, while one or
more excursions remain. Let us ﬁrst consider the
unﬁlled excursions. Among them choose one that

has the smallest area. By assumption, one of the
four constraints must be violated or a new self-
intersection must be introduced,
if we were to
truncate that excursion. We will consider all rel-
evant cases.

Each case will assume an unﬁlled excursion
from the right (excursions from the left are sym-
metric) of a path C between Q1 and Q2 at ℓ[k].
We may assume that sub C(Q1, Q2) ∩ ℓ[k] =
{Q1, Q2}, as additional crossings of ℓ[k] would
mean that excursions exist with smaller areas
(cf. Figure 8(a)), contrary to the assumptions.
Now assume truncation is blocked due to Q ∈
seg(Q1, Q2) ∩ C such that dC (Q) < dC (Q1)
(the case dC (Q2) < dC (Q) is symmetric), as we
need to preserve absence of self-intersection. Sup-
pose Q is the only such point, so that C crosses
seg(Q1, Q2) from left to right once without ever
crossing it from right to left, until Q1 is reached.
Then C starts in the area of the excursion, or in
other words, the excursion is ﬁlled, contrary to the
assumptions (cf. Figure 8(b)). Now suppose there
are points Q′ and Q where C crosses seg(Q1, Q2)
from right to left and from left to right, respec-
tively and dC (Q′) < dC (Q) < dC(Q1). If there
are several choices, choose Q′ and Q such that
sub C(Q′, Q) ∩ ℓ[k] = {Q′, Q}. This means the
excursion between Q′ and Q has an area smaller
than the one between Q1 and Q2, contrary to the
assumptions (cf. Figure 8(c)).

Note that excursions with zero area,

that is,
those that intersect with ℓ[k] without crossing over
to the other side, can always be truncated. We
can therefore further ignore non-crossing intersec-
tions.

Now suppose a truncation would violate con-
straint (ii), where C = B[k′ + 1] and D = A[k′]
crosses seg(Q1, Q2). Then much as above, we
may distinguish two cases.
In the ﬁrst, D has
only one crossing of seg(Q1, Q2) in some point Q,
which means the excursion is ﬁlled with the start-
ing or ending point of D, as in Figure 9(a). In the
second, D has at least two consecutive crossings,
say in Q and Q′, from right to left and from left
to right, respectively, which means the excursion
between Q and Q′ has smaller area than the one
between Q1 and Q2, illustrated by shading in Fig-
ure 9(b). Both cases contradict the assumptions.
For C = A[k′] and D = B[k′ + 1], the reasoning
is symmetric.

Next, suppose a truncation would violate con-

ℓ[k]

ℓ[k]

P [k′]

C

D

Q1

Q

Q2

(a)

C

D

Q1

Q

Q′

Q2

(b)

Figure 9: Truncating the excursion would intro-
duce a violation of constraint (ii). The assump-
tions are contradicted in one of two ways.

straint (iii), where C = A[k′] and A[k′ − 1]
crosses seg(Q1, Q2) in Q, while dA[k′−1](Q) >
dA[k′](Q2). If the crossing in Q is from right to
left, and there is an immediately next crossing in
Q′ from left to right, then we have the same sit-
uation as in Figure 9(b), involving an excursion
with smaller area, contradicting the assumptions.
If the crossing in Q is the only one, and it is
from right to left, then we can use the fact that
subA[k′](Q1, Q2) ∩ subA[k′−1](Q, P [k′]) = ∅, as
we assume the four constraints as yet hold. This
means P [k′] must be contained in the area of the
excursion, as illustrated in Figure 10(a), contra-
dicting the assumption that the excursion is un-
If the crossing in Q is the only one, and
ﬁlled.
it is from left to right, then we can use the fact
that sub A[k′](Q1, Q2) ∩ sub A[k′−1](Q′
2, Q) = ∅,
for the unique Q′
2 ∈ A[k′ − 1] ∩ ℓ[k − 1] such
2) = dA[k′](Q2). This means the
that dA[k′−1](Q′
excursion contains Q′
2, which implies there is an-
other unﬁlled excursion between points R1, R2 ∈
A[k′] ∩ ℓ[k − 1] with smaller area, as shaded in
Figure 10(b), contrary to the assumptions.

Suppose a truncation would violate con-
straint (iii), where C = A[k′] and A[k′ + 1]
crosses seg(Q1, Q2) in Q, while dA[k′](Q1) >
dA[k′+1](Q). The reasoning is now largely sym-
metric to the above, with the direction of the cross-
ing reversed, except that the case analogous to Fig-
ure 10(b) is immediately excluded, as Q′
2 cannot
be both to the left and to the right of ℓ[k]. Con-
straint (iv) is symmetric to constraint (iii). All pos-
sible cases have been shown to lead to contradic-
tions, and therefore we conclude that there are no
unﬁlled excursions if A and B are in normal form.

ℓ[k]

A[k′]

Q1

ℓ[k−1]

ℓ[k]

A[k′]

Q1

R1

P [k′]

A[k′ − 1]
Q

A[k′ − 1]
Q

Q2

(a)

Q′
2

Q2

R2

(b)

Figure 10: Truncating the excursion would in-
troduce a violation of constraint
(iii), where
dA[k′−1](Q) > dA[k′](Q2). The assumptions are
contradicted in one of three ways, the ﬁrst as in
Figure 9(b), and the second and third as in (a) and
(b) above.

We now show that there cannot be any ﬁlled ex-
cursions either. For this, assume that A[k′] has a
ﬁlled excursion between Q1 and Q2 at ℓ[k] from
the right. This means A[k′ − 1] has an identically
shaped, ﬁlled excursion at ℓ[k − 1] from the right,
between corresponding points Q′
2. Let us
consider how path A[k′] proceeds after reaching
Q2. There are only three possibilities:

1 and Q′

• it ends in P [k + 1], with k′ = k, without

further crossings of ℓ[k] or ℓ[k + 1];

• it next crosses ℓ[k] leftward; or

• it next crosses ℓ[k + 1] in some point Q3.

The ﬁrst of these can be excluded, in the light
of dA[k′−1](Q) ≥ dA[k′](Q2) for each Q ∈
2, P [k′]). Due to constraint (iii)
sub A[k′−1](Q′
therefore, this subpath of A[k′ − 1] cannot inter-
sect with the excursion of A[k′] to reach P [k], and
therefore A[k′] cannot reach P [k + 1]. The second
possibility is also excluded, as this would imply
the existence of an unﬁlled excursion. For the re-
maining possibility, Q3 ∈ A[k′] ∩ ℓ[k + 1] may be
lower down than Q2 (in the now familiar view of
the points P [0], P [1], . . . being drawn from left to
right along a horizontal line), or it may be higher
up than Q1. These two cases are drawn in Fig-
ures 11 and 12. The choice of Q3 also determines
a corresponding Q′

3 ∈ A[k′ − 1] ∩ ℓ[k].

We now consider how A[k′] continues after
Q3 in the case of Figure 11.
If it next crosses
ℓ[k + 1] leftward, this would imply the existence

ℓ[k−1]

ℓ[k]

ℓ[k+1]

ℓ[k+2]

P [k−1]

Q′
1

P [k]

Q1

P [k+1]

P [k+2]

Q′
2

Q2
Q′
3

Q3
Q′
4

Q4

Figure 11: Continuing the (solid) path A[k′] after
a ﬁlled excursion, restricted by the (dashed) path
A[k′ − 1], in the light of constraint (iii).

ℓ[k−1]

ℓ[k]

ℓ[k+1]

ℓ[k+2]

Q′
4
Q3

Q4

P [k+1]

P [k+2]

P [k−1]

Q′
1

P [k]

Q′
2

Q′
3
Q1

Q2

Figure 12: As in Figure 11 but Q3 is chosen to be
higher up than Q1.

of an unﬁlled excursion. Further, dA[k′−1](Q) ≥
dA[k′](Q3) for each Q ∈ subA[k′−1](Q′
3, P [k′]).
Due to constraint (iii) therefore, this subpath of
A[k′ − 1] cannot intersect with sub A[k′](Q2, Q3),
above which lies P [k + 1]. Therefore, A[k′] must
cross ℓ[k + 2] in some Q4, which is lower down
than Q3. This continues ad inﬁnitum, and A[k′]
will never reach its supposed end point P [k′ + 1].
The reasoning for Figure 12 is similar.

Filled excursions from the left are symmetric,
but instead of investigating the path after Q2, we
must investigate the path before Q1. The case of B
is symmetric to that of A. We may now conclude
no ﬁlled excursions exist.

6 The ﬁnal contradiction

We have established that after A and B have been
brought into normal form, there can be no remain-
ing excursions. This means that A[0] crosses ℓ[0]
exactly once, in some point RA, and B[0] crosses
ℓ[−1] exactly once, in some point LB. Further, let
LA be the unique point where A[−1] crosses ℓ[−1]
and RB the unique point where B[1] crosses ℓ[0].
The region of the plane between ℓ[−1] and ℓ[0]
can now be partitioned into a ‘top’ region, a ‘bot-
tom’ region, and zero or more enclosed regions.
The ‘top’ region consists of those points that are

ℓ[−1]

ℓ[0]

P [−1]

LB

A[−1]

LA

A[0]

B[0]

RA

P [0]

P [1]

B[1]

RB

Figure 13: The region between ℓ[−1] and ℓ[0]
is divided by A[0] and B[0] into a ‘top’ region
(lightly shaded), a ‘bottom’ region (white), and
areas enclosed by intersections of A[0] and B[0]
(darkly shaded). Here A[−1] and B[1] are both in
the ‘bottom’ region.

reachable from any point between ℓ[−1] and ℓ[0]
arbitrarily far above any point of A[0] and B[0],
without intersecting with A[0], B[0], ℓ[−1] or ℓ[0].
This is the lightly shaded region in Figure 13. The
‘bottom’ region is similarly deﬁned, in terms of
reachability from any point between ℓ[−1] and ℓ[0]
arbitrarily far below any point of A[0] and B[0].
The zero or more enclosed regions stem from pos-
sible intersections of A[0] and B[0]; the two such
enclosed regions in Figure 13 are darkly shaded.
Note that the four constraints do not preclude in-
tersections of A[0] and B[0].

However, constraint (ii) implies that, between
ℓ[−1] and ℓ[0], A[0] and B[1] do not intersect
other than in P [0], and similarly, A[−1] and
B[0] do not intersect other than in P [0]. More-
over, for any Q ∈ sub A[−1](LA, P [0]) and any
Q′ ∈ sub A[0](P [0], RA) we have dA[−1](Q) ≥
dA[0](Q′). By constraint (iii) this means A[−1]
and A[0] do not intersect other than in P [0]. Sim-
ilarly, B[1] and B[0] do not intersect other than in
P [0].

it

The angles in P [0] between A[0], B[0], A[−1]
and B[1] are multiples of 90◦.
Because of
constraint (i), which excludes a 180◦ angle be-
tween A[0] and B[0],
follows that either
sub A[−1](LA, P [0]) and subB[1](RB, P [0]) both
lie entirely in the ‘top’ region, or both lie entirely
in the ‘bottom’ region. The latter case is illustrated
in Figure 13. In the former case, LA and RB are
above LB and RA, respectively, and in the latter
case LA and RB are below LB and RA. This is
impossible, as LA and RA should be at the same

height, these being corresponding points of A[−1]
and A[0], which have the same shape, and simi-
larly LB and RB should be at the same height.

This contradiction now leads back to the very
beginning of our proof, and implies that the four
constraints cannot all be true, and therefore that
at least one rule is always applicable to allow use
of the inductive hypothesis, and therefore that G
generates O2.

7 Conclusions and outlook

that O2 is
We have presented a new proof
generated by a MCFG. It has at
least super-
ﬁcial elements in common with the proof by
Salvati (2015). Both proofs use essentially the
same MCFG, both are geometric in nature, and
both involve a continuous view of paths next to
a discrete view. The major difference lies in the
approach to tackling the myriad ways in which
the paths can wind around each other and them-
selves. In the case of Salvati (2015), the key con-
cept is that of the complex exponential function,
which seems to restrict the proof technique to two-
dimensional geometry. In our case, the key con-
cepts are excursions and truncation thereof.

At this time, no proof is within reach that gen-
eralizes the result to O3. This will require at the
very least a suitable deﬁnition of ‘excursion’ in
three dimensions, which is likely to be more in-
volved than in the two-dimensional case. There
are good reasons to believe however that if such a
deﬁnition can be found, some key elements of the
existing proof may carry over. Instead of a binary
predicate R for our grammar G, the appropriate
grammar for O3 would have a ternary predicate.
Where our reasoning had two paths A and B, the
three dimensional case would involve three paths
A, B and C. In place of the reasoning illustrated in
Figure 13, where A and B lead away from P [0] to
P [−1] and P [1], to partition the plane into a ‘top’
region and a ‘bottom’ region, we would now have
A and B and C leading away from a central point,
and preﬁxes of these three paths would combine to
partition the three-dimensional space into a ‘top’
region and a ‘bottom’ region. Copies of A and
B and C leading towards the central point would
then all fall in the ‘top’ region or all in the ‘bot-
tom’ region, potentially leading to a contradiction.
Further details are beyond the scope of the present
paper.

Acknowledgements

This work came out of correspondence with Gior-
gio Satta. Gratefully acknowledged are also fruit-
ful discussions with Sylvain Salvati, Vinodh Ra-
jan, and Markus Pfeiffer.

References
[Bach1981] E. Bach. 1981. Discontinuous constituents
in generalized categorial grammars. In Proceedings
of the Eleventh Annual Meeting of the North Eastern
Linguistic Society, pages 1–12.

[Boullier1999] P. Boullier. 1999. Chinese numbers,
MIX, scrambling, and Range Concatenation Gram-
mars. In Ninth Conference of the European Chap-
ter of the Association for Computational Linguistics,
pages 53–60, Bergen, Norway, June.

[Seki et al.1991] H. Seki, T. Matsumura, M. Fujii, and
T. Kasami. 1991. On multiple context-free gram-
mars. Theoretical Computer Science, 88:191–229.

[Sorokin2014] A. Sorokin. 2014. Pumping lemma and
Ogden lemma for displacement context-free gram-
mars.
In Developments in Language Theory, 18th
International Conference, volume 8633 of Lecture
Notes in Computer Science, pages 154–165, Ekater-
inburg, Russia. Springer-Verlag.

[Vijay-Shanker et al.1987] K. Vijay-Shanker, D.J. Weir,
and A.K. Joshi. 1987. Characterizing structural
descriptions produced by various grammatical for-
malisms.
In 25th Annual Meeting of the Associa-
tion for Computational Linguistics, Proceedings of
the Conference, pages 104–111, Stanford, Califor-
nia, USA, July.

[Capelletti and Tamburini2009] M.

F. Tamburini.
categorial grammars.
Science, 41(2009):87–98.

and
2009. Parsing with polymorphic
Research in Computing

Capelletti

[Gilman2005] R.H. Gilman. 2005. Formal languages
and their application to combinatorial group theory.
Contemporary Mathematics, 378:1–36.

[Joshi et al.1991] A.K. Joshi, K. Vijay-Shanker, and
D. Weir. 1991. The convergence of mildly context-
sensitive grammar formalisms.
In P. Sells, S.M.
Shieber, and T. Wasow, editors, Foundational Issues
in Natural Language Processing, chapter 2, pages
31–81. MIT Press.

[Joshi1985] A.K. Joshi. 1985. Tree adjoining gram-
mars: How much context-sensitivity is required to
provide reasonable structural descriptions? In D.R.
Dowty, L. Karttunen, and A.M. Zwicky, editors,
Natural language parsing: Psychological, computa-
tional, and theoretical perspectives, pages 206–250.
Cambridge University Press.

[Kallmeyer2010] Laura Kallmeyer. 2010. Parsing Be-

yond Context-Free Grammars. Springer-Verlag.

[Kanazawa and Salvati2012] M. Kanazawa and S. Sal-
vati. 2012. MIX is not a tree-adjoining language. In
50th Annual Meeting of the Association for Compu-
tational Linguistics, Proceedings of the Conference,
pages 666–674, Jeju Island, Korea, July.

[Pullum1983] G.K. Pullum. 1983. Context-freeness
and the computer processing of human languages.
In 21st Annual Meeting of the Association for Com-
putational Linguistics, Proceedings of the Confer-
ence, pages 1–6, Cambridge, Massachusetts, July.

[Salvati2015] S. Salvati. 2015. MIX is a 2-MCFL and
the word problem in Z2 is captured by the IO and
the OI hierarchies. Journal of Computer and System
Sciences, 81:1252–1277.

