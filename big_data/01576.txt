6
1
0
2

 
r
a

M
 
4

 
 
]
t
a
l
-
p
e
h
[
 
 

1
v
6
7
5
1
0

.

3
0
6
1
:
v
i
X
r
a

Quark Contraction Tool - QCT

D. Djukanovica

aHelmholtz Institute Mainz, University of Mainz, D-55099 Mainz, Germany

Abstract

We present a Mathematica package for the calculation of Wick contractions
in quantum ﬁeld theories - QCT. Furthermore the package aims at automati-
cally generating code for the calculation of physical matrix elements, suitable
for numerical evaluation in a C++ program. To that end commonly used
algebraic manipulations for the calculation of matrix elements in lattice QCD
are implemented.

1. Introduction

Matrix elements in lattice QCD are typically expressed as expectation
values of time ordered products of quark operators, which can be computed
by means of Wick contractions [1]. The aim of this package is to simplify
and automate this straightforward but error prone task.
Currently only fermionic contractions are supported, i.e. the ﬁelds are as-
sumed to be Grassmann valued. The complexity of the calculation grows
as N!, where N is the number of creation or annihilation operators in the
matrix element, i.e. the total number of quark ﬁeld operators is 2N. The
contraction of 16 quark ﬁelds of identical type takes roughly 30 seconds1
generating 40320 terms.

2. Basic functionality

The package provides functions to perform Wick contractions and subse-
quently simplify the expressions, i.e. contract indices and rewrite the results
into QDP++ [2] mnemonics. For the Wick contractions the package expects
fermionic ﬁeld operators, where the ﬁelds have color and spin indices, and

1Timings refer to a system with an Intel Core i5 running @ 2.6 GHz.

1

depend on the position. The creation (annihilation) operators are denoted
by

Field{B}[<type>,<color index>,<spin index>, <position>]

The simplest contraction thus reads

µ (x) ¯f b
f a

ν (y) = Sab

µν(y, x)

(1)

where the fermion propagator S of particles of type f connects point y to x.
This contraction can be done within the package as

In[1]:=

WickContract[Field[f,a,mu,x]**FieldB[f,b,nu,y]]

Out[1]=

DE[{f, f}, {y, x}][CI[{a, b}], SI[{mu, nu}]]

where ∗∗ is the builtin NonCommutativeMultiply operator, and DE denotes
the propagator of a particle of type f with the color (spin) indices enclosed
in the function CI (SI). The package deﬁnes formating rules for certain
expressions, i.e. in Mathematica’s TraditionalForm or TeXForm the output
is specially typeset, e.g. the color indices appear in the exponent and the
spin indices are displayed as subscripts. The above expression in TeXForm
reads

In[2]:=

TeXForm[DE[{f, f}, {y, x}][CI[{a, b}], SI[{mu, nu}]]]

Out[2]=

S_{\mu \nu }^{f,ab}(y,x)

There is a convenience function ToQDP, which rewrites the expressions in a
format suitable for calculation within the QDP++ [2] package. For the above
term the conversion reads

In[3]:=

ToQDP[%%]

Out[3] =

/*
Result is of type SpinColorMatrix
{S^f1(x1,y1) -> quarkProp1}
*/
quarkProp1

2

where in the comment section a description of the QDP++ type that is
returned is given, together with a list of abbreviations for propagator objects.
The abbreviations are not canonical, i.e. diﬀerent expressions might give
diﬀerent abbreviations. Additionally one can provide a list of replacement
rules as a second argument, e.g.
special characters or sub-/superscripted
quantities where the CForm would generate undesired terms. Furthermore
the package provides the function QuarkContract, which performs a variety
of manipulations to arrive at simpler forms, e.g. index summations

In[4] :=

QuarkContract[WickContract[
Pol[SI[{nu, mu}]] ** Field[f, a, mu, x] ** FieldB[f, b, nu, y]
]]

Out[4] =

traceSpin[Pol . DE[{f, f}, {y, x}]][CI[{a, b}]]

or more complicated substitutions including color contractions

In[5] :=

QuarkContract[
Eps[a, b, c] Eps[a’, b’, c’] Op[CI[{a, a’}], SI[{mu, nu}]]*
Op’[CI[{b, b’}], SI[{mu, rho}]]
]

Out[5] =

quarkContract[{1, 3}, Op, Op’][CI[{c’, c}], SI[{nu, rho}]]

where the quarkContract[##] function is deﬁned within QDP++. Addi-
tionally we provide an Uncontract function, which will split contracted ex-
pressions into terms with open color and spin indices. Note that this function
will introduce a color and spin index irrespective of the operator at hand,
e.g. a color neutral object has superﬂuous color indices after the uncontract
operation. We deﬁne δ functions to be independent of their index type and
it suﬃces to write DD[a,b]= δab.

3. Example applications

Let us illustrate the capabilities of the package by means of two examples.

3

3.1. Λ Baryon

Suppose we are interested in the large time behavior of the matrix element

M = hOµOµ′iP µ′µ

(2)

e.g. the two point function of a Λ baryon. Let us write the interpolating
operator for the Λ baryon [3]

O = ǫabcΓA (cid:0)2sa(uT
O = ǫabc (cid:16)2(¯uT

a

˜ΓB ¯db)¯sc + (¯uT

a

˜ΓB ¯sb) ¯dc − ( ¯dT

a

b ΓBdc) + da(uT

b ΓBsc) − ua(dT

b ΓBsc)(cid:1) ,
˜ΓB ¯sb)¯uc(cid:17) ΓA,

(3)

(4)

where we used a vector notation, i.e. the operators have an open spin index.
These operators in QCT read

In[6] :=

OP =
Eps[a, b, c] ** (Gamma^A)[SI[{mu, alpha}]] ** (2 **
Field[s, a, alpha, x] ** Field[u, b, beta, x] **
(Gamma^B)[SI[{beta, gamma}]] ** Field[d, c, gamma, x] +
Field[d, a, alpha, x] ** Field[u, b, beta, x] **
(Gamma^B)[SI[{beta, gamma}]] ** Field[s, c, gamma, x] -
Field[u, a, alpha, x] ** Field[d, b, beta, x] **
(Gamma^B)[SI[{beta, gamma}]] ** Field[s, c, gamma, x])

In[7] :=

OPBar =
Eps[a’, b’, c’] ** (2 **
FieldB[u, a’, gamma’, y] ** (Gamma^BT)[SI[{beta’, gamma’}]] **
FieldB[d, b’, beta’, y] ** FieldB[s, c’, alpha’, y] +
FieldB[u, a’, gamma’, y] ** (Gamma^BT)[SI[{beta’, gamma’}]] **
FieldB[s, b’, beta’, y] ** FieldB[d, c’, alpha’, y] -
FieldB[d, a’, gamma’, y] ** (Gamma^BT)[SI[{beta’, gamma’}]] **
FieldB[s, b’, beta’, y] ** FieldB[u, c’, alpha’, y]) **
(Gamma^A)[SI[{alpha’, mu’}]]

Within QCT the two point function can be computed as

In[8] :=

Timing[Contracted =

4

WickContract[P[SI[{mu’, mu}]] ** OP ** OPBar];]

Out[8] =

{0.016128000000000142, Null}

where the result still has yet to be contracted spin and color indices. Note
that the computational time is negligible for a matrix element comprised of
6 quark operators. Simplifying the expressions further

In[9] :=

Result = QuarkContract[Contracted];
ToQDP[
Simplify[Result], {Gamma^B -> GammaB, Gamma^A ->
GammaA, Gamma^BT -> GammaBT}]

gives the result

Out[9] =
/*
Result is of type Scalar
{S^d(y,x) -> quarkProp1, S^s(y,x) -> quarkProp2,

S^u(y,x) -> quarkProp3}

*/
trace(quarkContract13(quarkProp1,GammaB*quarkProp2*GammaBT)*
transposeSpin(GammaA*P*GammaA*quarkProp3))
+
2*trace(quarkContract13(quarkProp3,GammaB*quarkProp1)*
transposeSpin(GammaA*P*GammaA*quarkProp2*GammaBT))
+
trace(quarkContract13(quarkProp3,GammaB*quarkProp2*GammaBT)*
transposeSpin(GammaA*P*GammaA*quarkProp1))
+
2*trace(quarkContract13(GammaB*quarkProp2,quarkProp1*GammaBT)*
transposeSpin(GammaA*P*GammaA*quarkProp3))
.
.
.

The QuarkContract function, as shown in the previous section, contracts
all open color and spin indices and identiﬁes special patterns, e.g. resulting
in QDP++ quarkContract[##], transposeSpin . . . function calls.

5

3.2. Sequential Source

Another illustrative example is a generic 3 point function

M = hOJ Oi

(5)

Let us assume the following operators, e.g. nucleon interpolating operators
and a ﬂavor preserving current, again adopting a vector notation,

O = ǫabcOAua (cid:0)ubΓBdc(cid:1) ,
O = −ǫa′b′c′ (cid:16) ¯d′
b(cid:17) ¯u′
J = ¯dJd.

˜ΓB ¯u′

a

˜OA,

(6)

(7)

(8)

c

In QCT the operators, amended with explicit spin and color indices, read

In[10] :=

OP = Eps[a, b, c] ** OA[SI[{mu, alpha}]] **
Field[u, a, alpha, y] ** Field[u, b, beta, y] **
GammaB[SI[{beta, gamma}]] ** Field[d, c, gamma, y]

In[11] :=

OPBar = -Eps[a’, b’, c’] ** FieldB[d, a’, alpha’, x] **
GammaBT[SI[{alpha’, beta’}]] ** FieldB[u, b’, beta’, x] **
FieldB[u, c’, nu’, x] ** OAT[SI[{nu’, mu’}]]

In[12] :=

Jc = FieldB[d, f, sigma, z] ** J[sigma, rho] **
Field[d, f, rho, z]

In[13] :=

MatrixElement =
OP ** Jc ** OPBar ** P[mu’, mu]

Now the matrix element can be parameterised as

M = Σ(cid:0)JSd(z, x)(cid:1)

(9)

where for the sake of readability we have omitted all volume sums and fourier
modes. The term Σ is called the sequential propagator. The corresponding

6

source can be constructed using QCT, where one starts from the Wick con-
tracted matrix element, projects out the part proportional to (JSd(z, x)) and
subsequently applies the Dirac equation to generate the sequential source -
for a discussion of the technique see e.g. [4].
First to get the matrix element we write

In[14] :=

MatrixElementContracted =
WickContract[MatrixElement] /. DE[__, {a_, a_}][__] -> 0

where the replacement gets rid of disconnected pieces, i.e. propagators with
identical start and end points. The package implements a projection operator
DEProject for propagators, i.e.

ν1,ν2 (x, z)Proja1,a2
Sf,b1,b2
M(Sf (x, z))Projf,a1,a2

f,µ1,µ2(x, z) = δa1b2δa2b1δµ1ν2δµ2ν1
µ1,µ2 (x, z) = Ma1,a2

µ1,µ2(x, z)

(10)

(11)

Thus the easiest way to project out the sequential propagator is to replace
the current with a δ-function and project out the propagator connecting the
source point x with the current insertion point z

In[15] :=

MatrixElementConnectedProj =
Expand[MatrixElementContracted] /.
J[sigma, rho] -> DD[rho, sigma];

In[16] :=

SeqProp =
Contract[Expand[
Uncontract[MatrixElementConnectedProj]
DEProject[{d, d}, {x, z}][CI[{a1, a2}], SI[{mu1, mu2}]]]];

The expression SeqProp is equivalent to Σa1a2
µ1µ2(x, z). Next to ﬁnd the source
that generates this propagator we multiply with the inverse Dirac propagator
from the right, i.e.

ηa1a3
µ1µ3(x, y) = Σa1a2

µ1µ2(x, z)S−1,a2a3

µ2µ3

(z, y)

(12)

In QCT this reads

7

In[17] :=

QuarkContract[
Uncontract[Contract[SeqProp]]*
DEInverse[{d, d}, {y, z}][CI[{a2, a3}], SI[{mu2, mu3}]]]

Out[17] =

(quarkContract[{1, 4}, OAT . P . OA . DE[{u, u}, {x, y}] .
Transpose[GammaBT], DE[{u, u}, {x, y}]] . GammaB)[CI[{a1, a3}],
SI[{mu1, mu3}]] +
(transposeSpin[quarkContract[{3, 4}, DE[{u, u}, {x, y}] .
Transpose[GammaBT], OAT . P . OA . DE[{u, u}, {x, y}]]] .
GammaB)[CI[{a1, a3}], SI[{mu1, mu3}]]

Note that to obtain the sequential source we applied the Dirac operator from
the right

Ψ(y)S−1(y, x) = η(x)

(13)

X

y

Usually lattice QCD codes implement a solver, where the solution from point
x to point y

S−1(x, y)Ψ(y) = η(x)

X

y

is calculated applying the Dirac oprator from the left.
Rewriting Eq.(13)

S−1(y, x)†Ψ(y)† = η(x)†

X

y

S−1(x, y)γ5Ψ(y)† = γ5η(x)†

X

y

(14)

(15)

(16)

one can however easily construct the sequential propagator using ordinary
solves.

4. Summary

The aim of the package is to simplify the straightforward but error prone
task of computing matrix elements in QCD. To that end we implemented rou-
tines that perform Wick contractions on quark operators, further simplify the

8

results and write out QDP++ expressions directly calculable within a C++
program. Since the results are automatically generated, in most cases, man-
ual ﬁne tuning will be necessary to obtain the most eﬃcient implementation
of the matrix element at hand. Nevertheless QCT is, at the very least, useful
to check the correctness of the implementation. The code is open source [5].

Acknowledgments

The author would like to thank T. Harris for useful comments on the

manuscript.

References

[1] G. C. Wick, Phys. Rev. 80 (1950) 268.

[2] R. G. Edwards et al. [SciDAC and LHPC and UKQCD Collabora-
tions], Nucl. Phys. Proc. Suppl. 140, 832 (2005) [hep-lat/0409003].

[3] C. Gattringer and C. B. Lang, Lect. Notes Phys. 788, 1 (2010).

[4] G. Martinelli and C. T. Sachrajda, Nucl. Phys. B 316 (1989) 355.

[5] Quark Contraction Tool, https://github.com/djukanovic/qct.git

9

