6
1
0
2

 
r
a

 

M
0
2
 
 
]

.

R
G
h
t
a
m

[
 
 

1
v
4
0
2
6
0

.

3
0
6
1
:
v
i
X
r
a

CONSTRUCTING EMBEDDINGS AND ISOMORPHISMS OF

FINITE ABSTRACT SEMIGROUPS

JAMES EAST1, ATTILA EGRI-NAGY2, ANDREW R. FRANCIS1, JAMES D. MITCHELL3

Abstract. We present a search algorithm for constructing embeddings and
deciding isomorphisms of semigroups, working with their multiplication tables.
The algorithm is used for enumerating diagram semigroups up to isomorphism
and for ﬁnding minimal degree representations.

1. Introduction

Semigroups are abstract algebraic structures with a single associative binary
operation, often called multiplication. Deciding whether or not a semigroup S
embeds into another semigroup T (T contains a copy of S), or whether they are
isomorphic (S and T are essentially the same) is a non-trivial task, even if they
are explicitly represented as multiplication tables. For instance, one reason they
are non-trivial is that algebraic structure isomorphism can be reduced to graph-
isomorphism [24].

Since the only requirement for semigroup multiplication is associativity, semi-
group elements come in a great variety: numbers, functions, matrices, relations,
diagrams, just to name a few. Embedding a given semigroup into a semigroup of
another kind is a way of constructing diﬀerent representations of the semigroup. A
basic result of semigroup theory is that any semigroup of order n can be embed-
ded into a transformation semigroup of degree n + 1 (the semigroup analogue of
Cayley’s Theorem for groups, e.g. [18], Chapter 1). In practice, we would like to
have a transformation representation of lower degree. Since transformation semi-
groups are ﬁnite state automata (without specifying initial and accepting states),
the embedding problem is equivalent to the question: What is the minimal number
of states needed for a computation? Current software packages for transformation
semigroups lack the functionality of reducing the degree. Here we give a customized
backtrack search algorithm that hugely improves the current computational capa-
bilities in semigroup theory, so we can answer some open problems with a little
computation.

Similarly, for the question What is computable with n states?, we need a practical
algorithm to ﬁnd isomorphic semigroups. Using the algorithm described here, we
extended results of [3, 28] and enumerated all 4-state ﬁnite computations up to
isomorphism [9]. The enumeration was also extended for more general diagram
semigroups [11].

2. Notation

Semigroups and Homomorphisms. A semigroup is simply a set S together with an
associative binary operation S × S → S. Given two semigroups (S, ·) and (T, ⋆),
a homomorphism is a function ϕ : S → T , such that ϕ(u · v) = ϕ(u) ⋆ ϕ(v) for all

1

2

J. EAST, A. EGRI-NAGY, A.R. FRANCIS, J. D. MITCHELL

u, v ∈ S. An embedding is an injective homomorphism, denoted by S ֒→ T . The
image of an embedding of S into T is an isomorphic copy of S inside T .

Multiplication Tables. Let S be a ﬁnite semigroup such that |S| = n. We ﬁx an
order on the semigroup elements s1, . . . , sn, so we can refer to the elements by their
indices. Then the multiplication table, or Cayley table of S is a matrix Sn×n with
entries from {1, . . . , n}, such that Si,j = k if sisj = sk, and we can simply write
ij = k. The ith row is Si,∗ and the jth column vector is S∗,j.

Transformation Semigroups. A transformation is a function f : X → X from
a set to itself.
If |X| = n ∈ N, then the set is denoted by positive integers
{1, . . . , n} and a transformation t is denoted by simply listing the images of the
points:
[t(1), t(2), . . . , t(n)]. A transformation semigroup (X, S) of degree n is a
collection S of transformations of an n-element set, closed under function compo-
sition. The semigroup of all transformations of n points is the full transformation
semigroup Tn. The group consisting of all permutations (bijective transformations)
of degree n is the symmetric group Sn. The cyclic (one-generated) group of order
n is denoted by Zn. The dihedral group, the symmetry group of a regular n-gon,
containing 2n elements, is denoted by Dn.

Transformations s, t ∈ Tn are conjugate if there exists a permutation g ∈ Sn such
that t = g−1sg. In other words, we get t if we relabel the points of s according to
the permutation g.

3. Algorithm for Embedding Multiplication Tables

Given semigroups S and T such that |S| ≤ |T |, we would like to know if we can
construct an embedding S ֒→ T , and if so, actually construct one. Let m = |S| and
n = |T |, so we need a map ϕ : {1, . . . , m} → {1, . . . , n} such that ϕ(i)ϕ(j) = ϕ(ij),
ϕ is a homomorphism, and ϕ(i) = ϕ(j) implies i = j, so ϕ is injective.

Example 3.1. For permutation group Z2 = {(), (1, 2)} and transformation semi-
group T2 = {[1, 1], [1, 2], [2, 1], [2, 2]}, the maps 1 7→ 2, 2 7→ 3 give an embedding
(encoding the elements by integers corresponding to their lexicographic ordering).
The isomorphic copy of the source semigroup is indicated by boldface inside the
target semigroup.

Z2
1
2

1 2
1 2
2 1

֒→

T2
1
2
3
4

1

4

1 2 3 4
1
4
1 2 3 4
1 3 2 4
1
4

4

1

For ﬁnding embeddings, the brute-force algorithm goes through all possible maps
by checking all possible assignments of the m elements of S to the n elements of
T . There are
(n−m)! such maps. By gradually exploiting more information about
ϕ, S and T we can construct increasingly more eﬃcient algorithms.

n!

If some elements violate the homomorphism property, then regardless where the
other elements are sent, we cannot have a homomorphism. In other words, a partial
non-solution cannot be extended to a solution. Therefore the classical backtrack
method [20] can be applied to this problem. For constructing the embedding ϕ :
S ֒→ T , let p be a partial solution represented by a sequence of integers, such that
the ith element is ϕ(i). So, p = (ϕ(1), ϕ(2), . . . , ϕ(l)) for some l ≤ |S|. Being

SEMIGROUP EMBEDDINGS AND ISOMORPHISMS

3

a homomorphism requires that if ij = k (in the multiplication table of S), then
ϕ(i)ϕ(j) = ϕ(k), (in the multiplication table of T ). However, k, ϕ(k) may not be in
the partial solution yet. If a product ij = k is not in the domain of the partial map
yet, i.e. k > l, then the product ϕ(i)ϕ(k), should also be undeﬁned, i.e. not being in
the sequence p. Now assume that p could be a homomorphism. Then we extend its
sequence by choosing a new ϕ(l + 1) from the remaining elements of T and check
whether the homomorphism property is true for products containing l + 1. We
also have to check for previous undeﬁned entries, since they may evaluate to l + 1
and thus become deﬁned. If the above conditions are true, then we can continue
extending p by l+2. If not, then according to backtrack, we choose another ϕ(l+1),
or if there is no such candidate, then going back to l and looking for alternative
ϕ(l), and so on.

We can further reduce the number of choices available for the search algorithm
by using precomputed information about the semigroup elements. This is done by
giving equivalence relations on S and T such that elements of a class in S may only
be mapped by an embedding to an element of a single class of T . In other words,
we classify elements of S and T by properties that are invariant under embeddings.
Therefore, when trying to extend a partial solution, we need to look for candidates
only in the corresponding class. We call this algorithm the partitioned backtrack
search.

For abstract semigroups, one such invariant is the semigroup generalization of

the order of the element.

Deﬁnition 3.2 (Index-period). For an element a of ﬁnite semigroup S, the index-
period is the pair (m, r) of the smallest values m ≥ 1, r ≥ 1 such that am+r = am.

Deﬁnition 3.3. Let S be a ﬁnite semigroup. Then the equivalence ∼=e is deﬁned
by

s ∼=e t ⇔ s and t have the same index-period values.

How might partitioning by ∼=e improve the search? In a two-fold way: we can

detect easily if embedding is not possible, and we can reduce the search space.

Prior to the search, we check whether for each A ∈ S(cid:30)∼=e

the corresponding class

B ∈ T(cid:30)∼=e
not fulﬁlled, then the embedding is not possible.

(with same index-period as A) satisﬁes |A| ≤ |B|. If these conditions are

Assuming that the conditions are satisﬁed, let’s denote the class in T(cid:30)∼=e

corre-

by ϕ(A). Then the size of the search space is given

sponding to the class A ∈ S(cid:30)∼=e
by

|ϕ(A)|!

(|ϕ(A)| − |A|)!

,

YA∈S(cid:30)∼=e

showing that the eﬃciency depends on the number of the classes and their cardi-
nalities.

(10−5)! = 30240. As-
Example 3.4. If |S| = 5 and |T | = 10 the search space size is
suming that we can partition S into ∼=e-classes of size 2, 3 and T into corresponding
classes of size 3, 5 (and a class of size 2 with index-period not appearing in S), then
the search space size is reduced to

3!

5!

(3−2)! ·

(5−3)! = 360.

10!

4

J. EAST, A. EGRI-NAGY, A.R. FRANCIS, J. D. MITCHELL

4. Deciding Isomorphism of Multiplication Tables

Isomorphism is a special case of an embedding, thus we can deﬁne more invariants
and a ﬁner partitioning of elements by using a stronger equivalence relation. These
invariant properties can be any statistics of a multiplication table that do not take
into account any information of the actual ordering of the elements in the table.
For instance, the number of elements in a table that have k occurrences in total
is a usable invariant, while the number of occurrences of the k-th element is not.
Therefore, frequency distributions are the prime candidates for invariant properties.
A frequency distribution takes a multiset and enumerates its distinct elements
paired with the number of occurrences of the elements. For instance, the frequency
distribution of a row vector [7, 2, 1, 2, 5, 5, 2, 7] is [[1, 1], [2, 3], [5, 2], [7, 2]], meaning
that 1 appears once, 2 appears three times and 5 and 7 twice. However, we can-
not retain the element information as it depends on the sorting of the semigroup
elements. We keep only the sorted frequency values [1, 2, 2, 3]. Sorting is crucial
here to decide whether two distributions are the same or not. For example, the
vector [2, 4, 2, 4] has the same frequency distribution as [1, 3, 3, 1] and [2, 2, 4, 4],
but [2, 4, 4, 4] has a diﬀerent one. We can also take the frequency distribution of
frequency values, since it is derived from data containing no information on the
ordering of the elements.

We can deﬁne invariant properties both on the element and on the table level.

In addition to the index-period values, the element level invariants are:

(1) frequency: the number of occurrences of the element in the table,
(2) diagonal frequency: the number of occurrences of the element in the

diagonal of the table,

(3) row frequencies: the number of occurrences of the element i in its row

Si,∗,

(4) column frequencies: the number of occurrences of the element i in its

column S∗,i.

We put these invariants together in a single aggregated data structure called ele-
ment proﬁle. With this, similar to ∼=e, we can deﬁne an equivalence relation for
constructing isomorphisms.

Deﬁnition 4.1. Let S be a ﬁnite semigroup. Then the equivalence ∼=i is deﬁned
by

s ∼=i t ⇔ s and t have the same element proﬁle.

The table level invariants can be used to decide the possibility of the isomor-

phism. They are:

(1) frequency distribution elements: the numbers of occurences of ele-

ments in the multiplication table,

(2) column and row frequencies: the frequency distribution of column and

row frequencies,

(3) diagonal frequencies: number of occurrences of diagonal elements,
(4) idempotent frequencies: frequency distributions can also be calculated

for the set of idempotents, giving a very strong semigroup invariant,

(5) element proﬁles: the set of element proﬁles and their frequency distribu-

tions,

SEMIGROUP EMBEDDINGS AND ISOMORPHISMS

5

PBn

Pn

Bn

PTn

Tn

In

I ∗
n Bn

Sn

T Ln

1n

Figure 1. Embeddings of same degree diagram semigroups.

How strong are these invariants? Some of them are sensitive enough to tell apart
groups, despite their very special nature (multiplication tables are Latin squares,
all principal ideals are the same, there is only one idempotent).

Example 4.2. Let S be the semigroup generated by transformations [2, 1, 1], [2, 3, 2],
and [3, 1, 3]. Using only index-period values to classify its 15 elements, the size of
the search space to ﬁnd isomorphisms to another representation of S is 2903040.
Classifying by element proﬁles deﬁned above reduces to search space size to 768.

5. Applications

5.1. Automorphism Groups of Semigroups. Backtrack search methods can
systematically produce all solutions. In case of isomorphism, the set of solutions
corresponds to the automorphism group of the semigroup. For veriﬁcation purposes,
we recomputed the results of [1] (not shown here), using our method on small
semigroups [6] . We also used this technique for ﬁnding isomorphism classes and
determining the automorphism groups of all transformation semigroups of degree
4 [9], see Table 1.

5.2. Diagram Semigroup embeddings. From the point of view of theoretical
computer science and automata theory, transformation semigroups are the most
important representations. However, they are just one special case of diagram
semigroups, where semigroup elements can be composed by adjoining diagrams.
Several of these are studied as diagram algebras and in representation theory: PBn
partitioned binary relations [23], Bn binary relations [26], PTn partial transforma-
tion semigroup [14], Pn (bi)partition monoid [17, 19, 22], Bn Brauer monoid [4],
Sn symmetric group [5, 7], Tn full transformation semigroup [14], In symmetric in-
verse monoid [21], I ∗
n dual symmetric inverse monoid [13], and T Ln Temperley-Lieb
monoid [16]. For the partial order of diagram semigroups of the same degree see
Figure 1.

Various diagram representations can be considered as diﬀerent computational
paradigms. The interesting question is how much ‘bigger’ a less capable compu-
tational device should be in order to realize a more powerful one. For instance,
to emulate computations of equivalence classes with transformations, for n = 1
we have to double the degree P1 ֒→ T2, and for n = 2 we need at least 5 states:

6

J. EAST, A. EGRI-NAGY, A.R. FRANCIS, J. D. MITCHELL

#conjugacy classes
131286736
748946
29138
1296
1144
969
717
296
182
58
48
47
44
29
28
22
12
8
8
8
8
6
6
4
4
4
2
2
2
1

automorphism group

(order,index)

1
Z2

Z2 × Z2

D4
S3

Z2 × Z2 × Z2

Z3
D6

Z2 × D4

Z2 × Z2 × S3

S3 × S3

S4

Z2 × S4

Z2 × Z2 × Z2 × Z2

D4 × S3

Z2 × S3 × S3

(Z2 × Z2 × Z2 × Z2) ⋊ Z2

S4 × S3

(S3 × S3) ⋊ Z2

D4 × S4

Z2 × S3 × S4

Z2 × ((S3 × S3) ⋊ Z2)

Z2 × Z2 × S4

((S3 × S3) ⋊ Z2) × S3

(Z3 × Z3) ⋊ Z2
Z2 × Z2 × D4

((S3 × S3) ⋊ Z2) × S4
Z2 × ((Z3 × Z3) ⋊ Z2)

Z2 × Z2 × Z2 × S3

Z2 × D4 × S3

(1,1)
(2,1)
(4,2)
(8,3)
(6,1)
(8,5)
(3,1)
(12,4)
(16,11)
(24,14)
(36,10)
(24,12)
(48,48)
(16,14)
(48,38)
(72,46)
(32,27)

(144,183)

(72,40)

(192,1472)
(288,1028)
(144,186)
(96,226)
(432,741)

(18,4)
(32,46)

(1728,47847)

(36,13)
(48,51)
(96,209)

Table 1. Automorphism groups of all the 132069775 nonempty
transformation semigroups of degree 4 up to conjugation. The last
column is the SmallGroup library identiﬁcation [2].

P2 ֒→ T5. Similar results include: B1 ∼= T1, B2 ֒→ T3, TL1 ∼= T1, TL2 ֒→ T2,
TL3 ֒→ T4, P1 ֒→ B2, B3 ֒→ B3, I ∗
2 ֒→ B3, T2 ֒→ B3 but T3 does not embed into
B6.

Deﬁnition 5.1. For a semigroup S the minimal D-diagram representation degree
is µD(S) = min{n | S ֒→ Dn} where D ∈ {PB, B, PT , T , S, I, I ∗, P, B, TL}.

Example 5.2. We can ﬁnd minimal degree diagram representations of a matrix
semigroup over Z by using its multiplication table. Let

S = (cid:26)(cid:18)0 0

0 0(cid:19) ,(cid:18)0 0

0 1(cid:19) ,(cid:18)1 0

1 0(cid:19)(cid:27) ,

0 1(cid:19) ,(cid:18)0 0

1 0(cid:19) ,(cid:18)0 1

and using the ordering of the element matrices

SEMIGROUP EMBEDDINGS AND ISOMORPHISMS

7

Tm

k

֒−→ Tn n = 1 n = 2 n = 3 n = 4 n = 5 n = 6

m = 1
m = 2
m = 3
m = 4
m = 5

1
0
0
0
0

2
1
0
0
0

3
3
1
0
0

5
12
4
1
0

7
35
17
2
1

11
110
64
6

Table 2. Number of embeddings of full transformation semi-
groups. Embedding the trivial monoid is equivalent to ﬁnding
idempotent elements (e2 = e) up to conjugation in the target semi-
group.

S 1
1
1
1
2
3
1
4
1
1
5

2 3
1 1
2 3
1 1
4 5
1 1

4 5
1 1
2 3
2 3
4 5
4 5

be its multiplication table. Then µT (S) = µP (S) = 3, so we can have transforma-
tion semigroup representation of S using 3 points, but in this particular case we
cannot reduce the degree by switching to the more general partition monoid repre-
sentation. Also, we need two more points to represent S as Brauer and Temperley-
Lieb monoid: µB(S) = µTL(S) = 5.

Beyond the question whether embedding is possible, we are also interested in the
number of diﬀerent embeddings, up to conjugation and up to automorphism. We

use the notation S
Table 2 summarizes k-embeddings for low degree transformation semigroups.

֒−→ T to indicate that there are k distinct copies of S inside T .

k

There are 282 non-empty transformation semigroups on 3 points up to conju-
gation. For degree 4, this number is 132069775 [9]. How many isomorphic copies
of the degree 3 transformation semigroups can we ﬁnd inside T4? Counting the
embeddings up to conjugation we ﬁnd only 2347 subsemigroups of T4 isomorphic
to some subsemigroup of T3; so most degree 4 transformation semigroups are ‘new’.
Calculating the same number for T5 yields 18236; a modest increase compared to
the still unknown, but expected-to-be gigantic, number of degree 5 transformation
semigroups.

5.3. Embeddings into 2-generated subsemigroups. Here we will answer a
couple of open questions stated in [8] using the embedding algorithm. There the
primary interest is in the embeddability into a 2-generated semigroup, denoted by

2-gen
֒−→ T . Being n-generated means that the semigroup can be generated by n

S

It is easy to prove that Bn

2-gen
elements.
֒−→ Bn+2, but there is no 2-generated
subsemigroup of Bn+1 where we can embed Bn. The same was conjectured for the
2-gen
partition monoid, but contrary to the expectation we found that P2
֒−→ P3, in 3
diﬀerent ways.

To obtain this result, we enumerated conjugacy class representatives of subsemi-
groups of the target semigroup that are 2-generated, then ﬁltered them for the

8

J. EAST, A. EGRI-NAGY, A.R. FRANCIS, J. D. MITCHELL

property of being at least as big as the source semigroup. Finally, we used our
embedding search to check each of the candidate 2-generated subsemigroups.

6. Conclusion

We presented customized backtrack search algorithms for constructing semi-
group embeddings and isomorphisms. In the SubSemi package [10] developed for
the Gap computer algebra system [15] we implemented the above algorithms. De-
spite being ineﬃcient for large semigroups due to the multiplication table represen-
tation, they proved to be immensely useful in practical computations. They have
been used extensively in several computational semigroup theory projects [9,11,12],
where they have provided a huge amount of interesting raw data for mathematical
research.

To our best knowledge, the SubSemi package is the ﬁrst software tool capable
of calculating general semigroup embeddings. For the isomorphism calculation,
we can compare our method to SmallestMultiplicationTable function in the
Semigroups package [25] (based on the SmallestImageSet function in Gap [15]
and depending on the GRAPE package [27]). This function calculates the smallest
multiplication table in lexicographic ordering for the semigroup (by calculating a
group action orbit of the symmetric group), which can be used for isomorphism
testing. Its complexity depends on the size of the semigroup since we have to act
on the table by the corresponding symmetric group, while our method does not
require group actions and it uses more information about the semigroup structure,
thus it is more scalable.
In practice, roughly speaking, with SubSemi we can
calculate embeddings and isomorphisms as long as the multiplication table of the
target semigroup ﬁts into the memory (e.g. embeddings into T6 with 66 = 46656
elements).

With these algorithmic advances, we can further advance our theoretical knowl-
edge of semigroups and ﬁnite state automata, which in turn will help us to design
more eﬃcient algorithms.

References

[1] J. Ara´ujo, P.V. B¨unau, J.D. Mitchell, and M. Neunh¨oﬀer. Computing automorphisms of

semigroups. Journal of Symbolic Computation, 45(3):373 – 392, 2010.

[2] Hans Ulrich Besche, Bettina Eick, E. A. O’Brien, and E. Zelmanov. A millennium project:
Constructing small groups. International Journal of Algebra and Computation, 12(5):623,
2002.

[3] G. Bijev and K. Todorov. On the representation of abstract semigroups by transformation

semigroups: Computer investigations. Semigroup Forum, 43(1):253–256, 1991.

[4] Richard Brauer. On algebras which are connected with the semisimple continuous groups.

Annals of Mathematics, 38(4):857–872, 1937.

[5] Peter J. Cameron. Permutation Groups. London Mathematical Society, 1999.
[6] Andreas Distler and James D. Mitchell. Smallsemi — a data library of semigroups of small

size, version 0.6.10, 2013. http://tinyurl.com/jdmitchell/smallsemi/.

[7] John D. Dixon and Brian Mortimer. Permutation Groups. Graduate Texts in Mathematics

163. Springer, 1996.

[8] James East. Partition monoids and embeddings in 2-generator regular *-semigroups. Period-

ica Mathematica Hungarica, 69(2):211–221, 2014.

[9] James East, Attila Egri-Nagy, and James D. Mitchell. On enumerating transformation

semigroups. arXiv:1403.0274 [math.GR], 2014.

[10] James East, Attila Egri-Nagy, and James D. Mitchell. SubSemi – software package for

enumerating subsemigroups, v0.77, 2016. github.com/gap-packages/subsemi.

SEMIGROUP EMBEDDINGS AND ISOMORPHISMS

9

[11] James East, Attila Egri-Nagy, Andrew R. Francis, and James D. Mitchell. Finite diagram

semigroups: Extending the computational horizon. arXiv:1502.07150 [math.GR], 2015.

[12] Attila Egri-Nagy. Computational enumeration of independent generating sets of ﬁnite sym-

metric groups. arXiv:1602.03957 [math.GR], 2016.

[13] D. G. Fitzgerald and Jonathan Leech. Dual symmetric inverse monoids and representation

theory. Journal of the Australian Mathematical Society (Series A), 64:345–367, 6 1998.

[14] Olexandr Ganyushkin and Volodymyr Mazorchuk. Classical Transformation Semigroups. Al-

gebra and Applications. Springer, 2009.

[15] The GAP Group. GAP – Groups, Algorithms, and Programming, Version 4.8.2, 2016.
[16] E. H. Lieb H. N. V. Temperley. Relations between the ’percolation’ and ’colouring’ problem
and other graph-theoretical problems associated with regular planar lattices: Some exact
results for the ’percolation’ problem. Proceedings of the Royal Society of London. Series A,
Mathematical and Physical Sciences, 322(1549):251–280, 1971.

[17] T. Halverson and A. Ram. Partition Algebras. European J. Combin., 26(6):869–921, 2005.
[18] John M. Howie. Fundamentals of Semigroup Theory, volume 12 of London Mathematical

Society Monographs New Series. Oxford University Press, 1995.

[19] V. F. R. Jones. The Potts model and the symmetric group. In Subfactors (Kyuzeso, 1993),

pages 259–267. World Sci. Publ., River Edge, NJ, 1994.

[20] D.E. Knuth. The Art of Computer Programming, volume 1-3. Addison-Wesley Longman

Publishing Co., Inc., Boston, MA, USA, 1998.

[21] M.V. Lawson. Inverse Semigroups: The Theory of Partial Symmetries. World Scientiﬁc,

1998.

[22] Paul Martin. Temperley-Lieb algebras for nonplanar statistical mechanics—the partition al-

gebra construction. J. Knot Theory Ramiﬁcations, 3(1):51–82, 1994.

[23] Paul Martin and Volodymyr Mazorchuk. Partitioned binary relations. Mathematica Scandi-

navica, 113(1):30–52, 2013.

[24] Gary L. Miller. Graph isomorphism, general remarks. Journal of Computer and System Sci-

ences, 18(2):128–142, April 1979.

[25] James Mitchell. Semigroups Version 2.7.2, 2016. http://www-groups.mcs.st-andrews.ac.uk/~jamesm/semigroups.php.
[26] R. J. Plemmons and M. T. West. On the semigroup of binary relations. Paciﬁc Journal of

Mathematics, 35(3):743–753, 1970.

[27] L.H. Soicher. Computing with graphs and groups. In L.W. Beineke and R.J. Wilson, editors,

Topics in Algebraic Graph Theory. Cambridge University Press, 2004.

[28] Carroll Wilde and Sharon Raney. Computation of the transformation semigroups on three

letters. Journal of the Australian Mathematical Society, 14:335–335, 11 1972.

1Centre for Research in Mathematics, Western Sydney University, Locked Bag 1797,

Penrith, NSW 2751, Australia

E-mail address: J.East@uws.edu.au, A.Francis@uws.edu.au

2Akita International University, Yuwa, Akita-city 010-1292, Japan
E-mail address: attila@egri-nagy.hu

3 Mathematical Institute, University of St Andrews, North Haugh, St Andrews,

Fife, KY16 9SS, Scotland

E-mail address: jdm3@st-and.ac.uk

