6
1
0
2

 
r
a

M
6

 

 
 
]
S
D
.
s
c
[
 
 

1
v
6
8
7
1
0

.

3
0
6
1
:
v
i
X
r
a

Complex-demand Scheduling Problem with Application in

Smart Grid

Majid Khonji

Areg Karapetyan

Khaled Elbassioni

Chi-Kin Chau∗

March 8, 2016

Abstract

We consider the problem of scheduling complex-valued demands over a discretized time horizon.
Given a set of users, each user is associated with a set of demands representing different user’s preferences.
A demand is represented by a complex number, a time interval, and a utility value obtained if the demand
is satisﬁed. At each time slot, the magnitude of the total selected demands should not exceed a given
capacity. This naturally captures the supply constraints in alternating current (AC) electric systems. In
this paper, we consider maximizing the aggregate user utility subject to power supply limits over a time
horizon. We present approximation algorithms characterized by the maximum angle φ between any two
complex-valued demands. More precisely, a PTAS is presented for the case φ ∈ [0, π
2 ], a bi-criteria FPTAS
for φ ∈ [0, π-ε] for any polynomially small ε, assuming the number of time slots in the discretized time
horizon is a constant. Furthermore, if the number of time slots is polynomial, we present a reduction to
the real-valued unsplittable ﬂow on a path problem with only a constant approximation ratio. Finally, we
2 cos φ
present a practical greedy algorithm for the single time slot case with an approximation ratio of 1
2 ,
while the running time is O(n log n), which can be implemented efﬁciently in practice.

Keywords: Algorithms, Scheduling, Smart Grid, Unsplittable Flow, Knapsack

1 Introduction

A key aspect of the emerging smart grid is to optimize power supply to match consumers’ demands. A
microgrid could run short of power supply due to emergency conditions, high purchase price in the bulk
market, or renwable ﬂuctuation over time. Thus consumers with deferrable loads such as dish washers and
electric vehicles can be scheduled efﬁciently to match the available supply. This in fact models the day-ahead
electric market at the distribution network whereby customers provide their deferrable demand preferences
along with the amount they are welling to pay, and the grid operator decides the best allocation.

Although resource allocation and scheduling mechanisms have been well-studied in many systems from
transportation to communication networks, the rise of the smart grid presents a new range of algorithmic
problems, which are a departure from these systems. One of the main differences is the presence of periodic
time-varying entities (e.g., current, power, voltage) in AC electric systems, which are often expressed in
terms of non-positive real, or even complex numbers. In power terminology [13], the real component of the
complex number is called the active power, the imaginary is known as reactive power, and the magnitude
as apparent power. For example, purely resistive appliances have positive active power and zero reactive
power. Appliances and instruments with capacitive or inductive components have non-zero reactive power,
depending on the phase lag with the input power. Machinery, such as in factories, has large inductors, and
hence has positive power demand. On the contrary, shunt-capacitor equipped electric vehicle charging stations
can generate reactive power.

∗M. Khonji, A. Karapetyan, K. Elbassioni, and C.-K. Chau are with Department of Electrical Engineering and Computer Science

at Masdar Institute of Science and Technology, UAE (e-mail: {mkhonji, akarapetyan, ckchau, kelbassioni}@masdar.ac.ae).

1

We consider a variable power generation capacity over a discrete time horizon. Every user of the smart
grid is associated with a set of demand preferences, wherein a demand is represented by a complex-valued
number, a time interval at which the demand should be supplied, and a utility value obtained if the demand is
satisﬁed. Some demands are inelastic (i.e., indivisible) that are either fully satisﬁed, or completely dropped.
At each time slot, the magnitude of the total satisﬁed demands among all different preferences should not
exceed the generation capacity of the power grid represented by the magnitude of the aggregate complex-
valued demand. This in fact captures the variation in supply constraints over time in alternating current (AC)
electric systems. This problem captures the demand-response management in power systems [25].

Conventionally, demands in AC systems are represented by complex numbers in the ﬁrst and fourth quad-
rants of the complex plane. We note that our problem is invariant, when the arguments of all demands are
shifted by the same angle. For convenience, we assume the demands are rotated such that one of the demands
is aligned along the positive real axis. In realistic setting of power systems, the active power demand is pos-
itive, but the power factor (i.e., the cosine of the demand’s argument) is bounded from below by a certain
threshold, which is equivalent to restricting the argument of complex-valued demands.
We present approximation algorithms characterized by the maximum angle φ between any two complex-
valued demands. More precisely, we present a PTAS for the case φ ∈ [0, π
2 ], a bi-criteria FPTAS for
φ ∈ [0, π-ε] for any polynomially small ε, assuming the number of time slots in the discretized time horizon
is constant. Furthermore, if the number of time slots is polynomial, we present a reduction to the unsplittable
ﬂow on a path problem that adds only a constant factor to the approximation ratio. We remark that the un-
splittable ﬂow problem considers only real-valued demands which is indeed simpler than our setting. Finally,
2 cos φ
we present a practical greedy algorithm for the single time slot case with an approximation ratio of 1
2 ,
and the running time is an order of O(n log n), which can be implemented in real world power systems.

The paper is structured as followed. In Sec. 2, we brieﬂy present the related works. In Sec. 3, we provide
the problem deﬁnitions and notations needed. Then we present algorithms for the case of a constant number
of time slots in Sec. 4, namely, a PTAS for φ ∈ [0, π
2 ] and an FPTAS for φ ∈ [0, π-ε]. In Sec. 5 we present
the reduction to the unsplittable ﬂow problem for the case of a polynomial number of time slots. Our greedy
algorithm is provided in Sec. 6, followed by the conclusion in Sec. 7.

2 Related work

2-approximation for the case where 0 ≤ φ ≤ π

2 < φ < π − ε, which closes the approximation gap. It is shown [19] that when φ ∈ ( π

Several recent studies consider resource allocation with inelastic demands. For a single time slot case, our
problem resembles the complex-demand knapsack problem (CKP) [27]. Let φ be the maximum angle be-
tween any complex valued demands. [27] obtained a 1
2 . [26]
(also [27]) proved that no fully polynomial-time approximation scheme (FPTAS) exists. Recently, [7, 8]
provided a polynomial-time approximation scheme (PTAS), and a bi-criteria FPTAS (allowing constraint vi-
2 , π],
olation) for π
there is no α-approximation to CKP for any α with polynomial number of bits. Additionally, when ε is ar-
bitrarily close to zero (i.e., φ → π) there is no (α, β)-approximation in general for any α, β with polynomial
number of bits. Therefore, the PTAS and the bi-criteria FPTAS [7] are the best approximation possible for
CKP. [12] extended CKP to handle a constant number of quadratic (and linear) constraints. [16] provided
a fast greedy algorithm for solving CKP with a constant approximation ratio that runs in O(n log n). A re-
cent work [18] extends the greedy algorithm to solve the optimal power ﬂow problem (OPF) with inelastic
demands, a generalization of CKP to a networked setting including voltage constraints.

When the demands are real-valued, our problem considering multiple time slots is related to the un-
splittable ﬂow problem on a path (UFP). In UFP, each demand is associated with a unique path from a
source to a sink. UFP is strongly NP-hard [10]. A Quasi-PTAS is obtained by Bansal et al. [2]. Anag-
nostopoulos et al. [1] obtained a 1/(2 + )-approximation (where  > 0 is a constant). This matched the
previously known approximation with the no bottleneck assumption (NBA) [9], i.e., the largest demand is at
most the smallest capacity. The UFP with bag constraints (BAG-UFP) is the generalization of UFP where
each users has a set of demands among which at most one is selected [5]. This problem is APX-hard even

2

in the case of unit demands and capacities [24]. Under the NBA assumption, Elbassioni et al. [11] obtained
a 1
17. Recently, Grandoni et al. ob-
65-approximation which was later improved by Chakrabarthi et al. [5] to 1
tained an O(log n/ log log n)−1-approximation without NBA. A constant factor approximation to BAG-UFP
remains an interesting open question.

When the number of time slots is constant, our problem generalizes CKP (see, [7]) to multiple time
slots, and also extends that of [12] by considering multiple demands per user, adding n extra constraints. We
also include elastic demands, i.e., demands that can be partially satisﬁed, along with inelastic demands in
the problem formulation. Furthermore, for the case of a polynomial number of time slots, our problem is a
generalization of the unsplittable ﬂow problem on paths to accommodate complex-valued demands. Finally,
we extend the greedy algorithm in [16] (for the single time slot case) to handle multiple demands per user
keeping the same approximation ratio and running time.

3 Problem Deﬁnitions and Notations

In this section we formally deﬁne the complex-demand scheduling problem. Throughout this paper, we
sometimes denote νR (cid:44) Re(ν) as the real part and νI (cid:44) Im(ν) as the imaginary part of a given complex
number ν. |ν| denotes the magnitude of ν. Unless we state otherwise, we denote µt (and sometimes µ(t)
whenever we use subscripts for other purposes) as the t-th component of the sequence µ.

3.1 Complex-demand Scheduling Problem
We consider a discrete time horizon denoted by T (cid:44) {1, ..., m}. At each time slot t ∈ T , the generation
capacity of the power grid is denoted by Ct ∈ R+. Denote N (cid:44) {1, ..., n} by the set of all users. Each user
k ∈ N declares a set of demand preferences indexed by the set Dk. Each demand j ∈ Dk is deﬁned over
a time interval Tj ⊆ T , that is, Tj = {t1, t1 + 1, ..., t2} where t1, t2 ∈ T and t1 ≤ t2. Demand j is also
k,j(t) ∈ C is a complex
associated with a set of complex numbers {sk,j(t)}t∈Tj where sk,j(t) (cid:44) sR
power demand at time t. A positive utility uk,j is associated with each user demand (k, j) if satisﬁed.

Some user demands are inelastic, denoted by I ⊆ N ×(cid:83)
of power, or switched off. The rest of demands, denoted by F ⊆ N ×(cid:83)

k Dk, which are required to be either fully
satisﬁed or fully dropped. An example is an appliance that should be either supplied with a ﬁxed amount
k Dk such that F ∩ I = ∅,
are elastic demands, which can be partially satisﬁed. The goal is to decide a solution of control variables
(xk,j)k∈N ,j∈Dk ∈ [0, 1]n that maximizes the total utility of satisﬁable users subject to the generation capacity
over time. We deﬁne the complex-demand scheduling problem over m discrete time slots (m-CSP) by the
following mixed integer programming problem.

k,j(t) + isI

(cid:88)
(cid:88)
(cid:88)

j∈Dk

j∈Dk:Tj(cid:51)t
xk,j ≤ 1,

k∈N

(cid:12)(cid:12)(cid:12)(cid:88)
(cid:88)

k∈N

(m-CSP) max

subject to

uk,jxk,j

sk,j(t) · xk,j

(cid:12)(cid:12)(cid:12) ≤ Ct,

for all t ∈ T

for all k ∈ N

(1)

(2)

(3)

j∈Dk
xk,j ∈ {0, 1} for all (k, j) ∈ I and xk,j ∈ [0, 1] for all (k, j) ∈ F,

(4)
where |µ| denotes the magnitude of µ ∈ C. Cons. (2) captures the capacity constraint, and Cons. (3) forces
at most one inelastic demand for every user to be selected. We consider the following assumptions that are
mainly needed in Sec. 4.2: for any user k,
(i) |Dk| = 1 if (k, j) ∈ F, j ∈ Dk; and
(ii) all demands sk,j(t), j ∈ Dk reside in one quadrant of the complex plane.

3

1-CSP (i.e., |T | = 1) is called the complex-demand knapsack, denoted by CKP. (We drop subscripts t
and j when |T | = 1 and |Dk| = 1 for all k ∈ N .) Evidently, m-CSP is NP-complete, because the knapsack
k,j(1) = 0, T = {1}, and |Dk| = 1. We will write m-CSP[φ1, φ2]
problem is a special case when we set all sI
for the restriction of problem m-CSP subject to φ1 ≤ maxk∈N arg(sk) ≤ φ2, where arg(sk) ≥ 0 for all
k ∈ N .

uk,jxk,j. We
denote an optimal solution to m-CSP by x∗ and OPT (cid:44) u(x∗). With a slight abuse of notations, for a given

j∈Dk

3.2 Approximation Algorithms

Given a solution x (cid:44) (xk,j)k∈N ,j∈Dk, we denote the total utility by u(x) (cid:44) (cid:80)
k∈N (cid:80)
subset S ⊆ N , we write u(S) (cid:44)(cid:80)
ˆx =(cid:0)(ˆxk,j)(k,j)∈I, (ˆxk,j)(k,j)∈F(cid:1) ∈ {0, 1}|I| × [0, 1]|F| satisfying Cons. (3)- (4), and
(cid:12)(cid:12)(cid:12)(cid:88)
(cid:88)

(cid:12)(cid:12)(cid:12) ≤ β · Ct

Deﬁnition 1. For α ∈ (0, 1] and β ≥ 1, we deﬁne a bi-criteria (α, β)-approximation to m-CSP as a solution

for all t ∈ T

sk,j(t)ˆxk,j

(cid:80)

k∈S

j∈Dk

uk,j.

(5)

such that u(ˆx) ≥ αOPT.
In the above deﬁnition, α characterizes the approximation ratio between an approximate solution and the
optimal solution, whereas β characterizes the violation bound of constraints. In particular, polynomial-time
approximation scheme (PTAS) is a (1 − , 1)- approximation algorithm for any  > 0. The running time of a
PTAS is polynomial in the input size for every ﬁxed , but the exponent of the polynomial might depend on
1/. An even stronger notion is a fully polynomial-time approximation scheme (FPTAS), which requires the
running time to be polynomial in both input size and 1/. In this paper, we are interested in bi-criteria FPTAS,
which is a (1, 1 + )-approximation algorithm for any  > 0, with the running time to be polynomial in the
input size and 1/. When β = 1, we sometimes call an (α, β)-approximation an α-approximation.

k∈N

j∈Dk:Tj(cid:51)t

4 m-CSP with a Constant Number of Time Slots
In this section we assume the number of time slots |T | is a constant. This assumption is practical in the
realistic setting, where users declare their demands on hourly basis one day ahead in the electric market. We
remark that the results in this section do not require Tj to be a continuous interval in T .

4.1 PTAS for m-CSP[0, π
2 ]
Deﬁne a convex relaxation of m-CSP (denoted by RLXCSP), such that Cons. (4) are replaced by xk,j ∈ [0, 1]
for all (k, j) ∈ I ∪ F. We deﬁne another convex relaxation that will be used in the PTAS denoted by
RLXCSP[S1, S0] which is equivalent to RLXCSP, subject to partial substitution such that xk,j = 1, for all
(k, j) ∈ S1 and xk,j = 0, for all (k, j) ∈ S0, where S1 ∩ S0 = ∅:

(cid:88)
(cid:88)
(cid:16)(cid:88)

k∈N

k∈Dk

(cid:88)

uk,jxk,j, s.t.

k,j(t) · xk,j
sI

k∈N

j∈Dk:t∈Tj

4

(RLXCSP[S1, S0])

(cid:88)

max

xk,j∈[0,1]

(cid:17)2

k,j(t) · xk,j
sR

+

(cid:16)(cid:88)
(cid:88)

k∈N

j∈Dk
xk,j = 1,
xk,j = 0

j∈Dk:t∈Tj
xk,j ≤ 1,

for all k ∈ N
for all (k, j) ∈ S1
for all (k, j) ∈ S0.

(cid:17)2 ≤ C2

t , ∀t

(6)

(7)

(8)

(9)
(10)

2 ) · OPT∗.

The above relaxation can be solved approximately in polynomial time using standard convex optimization
algorithms (see, e.g., [20]). In fact, such algorithms can ﬁnd a feasible solution xcx to the convex relaxation
such that u(xcx) ≥ OPT∗ − δ, in time polynomial in the input size (including the bit complexity) and log 1
δ ,
where OPT∗ is the optimal objective value of RLXCSP[S1, S0]. Notice that OPT∗ ≥ ¯u (cid:44) maxk,j uk,j, setting
δ to 

2 · ¯u assures that u(xcx) ≥ (1 − 
We provide a (1 − , 1)-approximation for m-CSP[0, π

2 ] in Algorithm 1, denoted by m-CSP-PTAS. The
idea of m-CSP-PTAS is based on that proposed in [12] with two extensions. First, we consider multiple
demands per user. This in fact adds n extra constraints to that in [12], and thus the rounding procedure
requires further analysis. The second extension is the addition of elastic demands F. We remark that [7]
considers multiple inelastic demands per user for the single time slot case (denoted by CKP); however, their
algorithm is based on a completely different geometric approach that is more complicated than that in [12].
Given a feasible solution x∗ to RLXCSP{S1, S0}, a restricted set of demands R ⊆ I ∪ F, and vectors
c1, c2 ∈ Rm

+ , we deﬁne the following relaxation, denoted by LP[c1, c2, x∗, R]:

(LP[c1, c2, x∗, R])

for all t ∈ T

for all t ∈ T

(11)

(12)

(13)

(14)

(15)

(cid:88)

(cid:88)
j∈Dk
k∈N
k,j(t) · xk,j ≤ c1
sR
t ,

uk,jxk,j

k,j(t) · xk,j ≤ c2
sI
t ,

s.t (cid:88)
(cid:88)
(cid:88)

k∈N

k∈N

max

xk,j∈[0,1]

(cid:88)
(cid:88)

j∈Dk:t∈Tj

j∈Dk:t∈Tj
xk,j ≤ 1,

j∈Dk
xk,j = x∗

k,j

for all k ∈ N

for all (k, j) ∈ R.

The algorithm proceeds as follows. We guess S1 ⊆ I to be the set of largest-utility 8m

inelastic demands
in the optimal solution; this deﬁnes an excluded set of demands S0 ⊆ I \ S1 whose utilities exceed one of the
utilities in S1 (Step 4). For each such S1 and S0, we solve the convex program RLXCSP[S1, S0] and obtain
a (1 − 
2 )-approximation xcx (note that the feasibility of the convex program is guaranteed by the conditions
in Step 3). The real and imaginary projections over all time slots of solution xcx, denoted by LR ∈ Rm
and LI ∈ Rm
+ , are used to deﬁne the linear program LP[LR, LI, xcx,F ∪ S1 ∪ S0] over the restricted set of
demands F ∪ S1∪ S0. We solve the linear program in Step 9, and then round down the solution corresponding
to demands (k, j) ∈ I in Step 10. Finally, we return a solution ˆx that attains maximum utility among all
obtained solutions.
Theorem 1. For any ﬁxed , Algorithm 1 obtains a (1 − , 1)-approximation in polynomial time.

+



We remark that the PTAS is the best approximation one can hope for, since it is shown in [26, 27] that it

is NP-Hard to obtain an FPTAS for the single time slot version (1-CSP[0, π

2 ]).

Proof. One can easily see that the running time of Algorithm 1 is polynomial in size of the input, for any
given . We now argue that the solution ˆx is (1 − )-approximation for m-CSP[0, π
2 ]. Let x∗ be the optimal
k,j = 1}. By the feasibility of
solution for m-CSP[0, π
x∗, in Step 5 the algorithm obtains

2 ] of utility OPT (cid:44) u(x∗). Deﬁne S∗ (cid:44) {(k, j) ∈ I | x∗

u(xcx) ≥ (1 − 

2 ) · OPT∗ ≥ (1 − 

2 ) · OPT,

(16)

where OPT∗ is the optimal value of CVXCSP[S1, S0] for some S1 equal to the highest 8m
S∗, and S0 ∩ S∗ = ∅. If |S∗| ≤ 8m

 , then obviously ˆx = xlp = xcx ≥ (1 − 

2 )OPT.

 utility demands in

5

rameter 

Algorithm 1 m-CSP-PTAS[{uk,j,{sk,j(t)}t∈Tj}k∈N ,j∈Dk , (Ct)t∈T , ]
Require: Users’ utilities and demands {uk,j,{sk,j(t)}t∈Tj}k∈N ,j∈Dk; capacity over time Ct; accuracy pa-
Ensure: (1 − , 1)-solution ˆx to m-CSP[0, π
2 ]
1: ˆx ← 0
2: for each set S1 ⊆ I such that |S1| ≤ 8m
3:

xk,j ≤ 1, for all k ∈ N then

sk,j(t)

if

 do

(cid:12)(cid:12)(cid:12) (cid:88)

(cid:12)(cid:12)(cid:12) ≤ Ct for all t ∈ T and (cid:88)
t ← (cid:88)
(cid:88)

(k,j)∈S1:t∈Tj
S0 ← {(k, j) ∈ I \ S1 | uk,j > min(k(cid:48),j(cid:48))∈S1 uk(cid:48),j(cid:48)}
xcx ← Solution of RLXCSP[S1, S0]
for all t ∈ T do
k,j(t) · xcx
sR

t ← (cid:88)

k,j; LI

j∈Dk

LR

k∈N

j∈Dk:t∈Tj

k∈N
end for
xlp ← Solution of LP[LR, LI, xcx,F ∪ S1 ∪ S0]
¯x ← {(¯xk,j)k∈N ,j∈Dk | ¯xk,j = (cid:98)xlp
if u(¯x) > u(ˆx) then

4:
5:
6:
7:

8:
9:

ˆx ← ¯x

end if

10:
11:
12:
13:
14:
15: end for
16: return ˆx

end if

(cid:88)

(cid:46) Obtain a (1 − 
k,j(t) · xcx
sI

k,j

2 )-approximation

j∈Dk:t∈Tj

k,j(cid:99) for (k, j) ∈ I, and ¯xk,j = xlp

k,j for (k, j) ∈ F}

(cid:46) Round the LP solution

Now suppose |S∗| > 8m

 . Observe that xcx is feasible for LP[LR, LI, xcx,F ∪ S1 ∪ S0] (Cons. (12)-(15)
are tight when xcx is substituted). Therefore the optimal solution xlp of LP[LR, LI, xcx,F ∪ S1 ∪ S0] satisﬁes
(17)
By Lemma 2 below, LP[LR, LI, xcx,F ∪ S1 ∪ S0] has a basic feasible solution (BFS) with at most 4m
uk(cid:48),j(cid:48)
.

fractional components, and for any fractional component (k, j), uk,j < min(k(cid:48),j(cid:48))∈S1 uk(cid:48),j(cid:48) ≤
Therefore, rounding down xlp in Step 10 obtains,
u(ˆx) ≥ u(xlp) − 4m

u(xlp) ≥ u(xcx).

(k(cid:48),j(cid:48))∈S1
|S1|

≥ (1 − 

(cid:80)

(cid:80)

uk,j

2 )u(xlp)

(k,j)∈S1
|S1|

where the last inequity follows by Eqns. (16)-(17). It remains to show that ˆx is feasible. Since ˆx is obtained
by rounding down xlp (Step. 10),

(cid:88)
(cid:88)

j∈Dk:t∈Tj

(cid:16)(cid:88)
≤(cid:16)(cid:88)

k∈N

k∈N
≤ (LR

j∈Dk:t∈Tj

t )2 + (LI

t)2 =

k,j(t) · ˆxk,j
sR

k,j(t) · xlp
sR

k,j

(cid:16)(cid:88)

≥ (1 − 

(cid:17)2

(cid:17)2

2 )2 · OPT ≥ (1 − ) · OPT,
(cid:16)(cid:88)
(cid:16)(cid:88)
(cid:17)2
(cid:88)

(cid:88)
(cid:88)
(cid:17)2

j∈Dk:t∈Tj

j∈Dk:t∈Tj

k∈N

k∈N

+

+

sR
k,j(t)xcx
k,j

+

k,j(t) · ˆxk,j
sI

(cid:17)2
k,j(t) · xlp
sI
(cid:88)

(cid:16)(cid:88)

k,j

k∈N

j∈Dk:t∈Tj

k∈N

j∈Dk:t∈Tj

(18)

(19)

(cid:17)2 ≤ C2

t ,

sI
k,j(t)xcx
k,j

where Eqn. (19) follows by the feasibility of xlp and xcx respectively. Hence, Cons. (2) are satisﬁed. Finally,
since some components of xlp in Step 10 are only rounded down, Cons. (3)-(4) are also satisﬁed.

6

Lemma 2 ( [21]). Let x be a basic feasible solution (BFS) for LP[c1, c2, x∗, R]. Then x has at most 4m
non-integral components.

Proof. Let h be the number of users k such that(cid:80)

xk,j = 1. By the properties of a BFS (see, e.g.,
[15, 23]), the number of strictly positive components in x is at most 2m + h. Furthermore, constraints (14)
impose that for each k ∈ N among those h users, there is a j ∈ Dk such that xk,j > 0. The remaining 2m
positive variables can belong to at most 2m of the constraints (14), implying that at least max{h − 2m, 0}
variables are set to 1. It follows that the total number variables taking non-integral values is at most 2m + h−
max{h − 2m, 0} ≤ 4m.

j∈Dk

4.2 Bi-criteria FPTAS for m-CSP[0, π-ε]
In the previous section, we have restricted our attention to the setting where all demands lie in the positive
quadrant of the complex plane (i.e., m-CSP[0, π
2 ]). In this section, we extend our study to the second quadrant
(m-CSP[0, π-ε]) for any arbitrary small constant ε > 0, that is, we assume arg(sk,j(t)) ≤ π − ε for all
k ∈ N , j ∈ Dk, t ∈ Tj. It is shown in [19] for the case |T | = 1 that m-CSP[0, π] is inapproximable and there
is no (α, 1)-approximation for m-CSP[0, π-ε]. Therefore, a bi-criteria (1, 1 + ) is the best approximation
one can hope for. Additionally, it is shown that if ε is arbitrarily close to zero, then there is no (α, β)-
approximation in general for any α, β with polynomial number of bits. Furthermore the running time should
depend on the maximum angle φ (cid:44) maxk∈N ,j∈Dk,t∈Tj arg(sk,j(t)). This algorithm is an extension of that
presented by [7] to multiple time slots and also incorporates elastic demands.
2 , 0} (see Fig. 1 for an illustration). We present a (1, 1 + )-
approximation for m-CSP[0, π-ε] in Algorithm 2, denoted by m-CSP-BIFPTAS, that is polynomial in both
 and n (i.e., FPTAS). We assume that tan θ is bounded by a polynomial in n; without this assumption, a
1
bi-criteria FPTAS is unlikely to exist (see [19]).

For convenience, we let θ = max{φ − π

Figure 1: We measure θ = φ − π
k,j(t) ≥ 0,∀j ∈ Dk, t ∈ Tj} and N− (cid:44) {k ∈ N | sR

2 from the imaginary axis.

Let N+ (cid:44) {k ∈ N | sR

basic idea of Algorithm m-CSP-BIFPTAS is to enumerate the guessed total projections on real and imaginary

k,j(t) < 0,∀j ∈ Dk, t ∈ Tj}
partition the set of users N by the assumption stated in Sec. 3. Consider any solution(cid:98)x to m-CSP[0, π-ε]. The
be the subsets of users with demands in the ﬁrst and second quadrants respectively. Note that N+ and N−
axes of all time slots for(cid:80)
(cid:80)
j∈Dk:t∈Tj(cid:98)xk,jsk,j(t) respectively. We
can use tan θ to upper bound the total projections for any feasible solution(cid:98)x as follows, for all t:
(cid:88)
k,j(t) ·(cid:98)xk,j ≤ Ct tan θ,

j∈Dk:t∈Tj(cid:98)xk,jsk,j(t) and(cid:80)
(cid:80)
(cid:88)
k,j(t) ·(cid:98)xk,j ≤ Ct,
(cid:88)
(cid:88)

(cid:88)
k,j(t) ·(cid:98)xk,j ≤ Ct(1 + tan θ).

(cid:88)

j∈Dk:t∈Tj

−sR

k∈N−

j∈Dk:t∈Tj

k∈N+

sI

k∈N−

k∈N

sR

k∈N+

j∈Dk:t∈Tj

(20)

(See Fig. 1 for a pictorial illustration.) We then solve two separate multi-dimensional knapsack problems
of dimension 2m (denoted by 2mDKP), to ﬁnd subsets of demands that satisfy the individual guessed total
projections. But since 2mDKP is generally NP-hard, we need to round-up the demands to get a problem that

7

Next, we describe the rounding in detail. First, we deﬁne Lt (cid:44)

rounded-up demands(cid:98)sk,j(t) are deﬁned by:

can be solved efﬁciently by dynamic programming. We show that the violation of the optimal solution to the
rounded problem w.r.t. to the original problem is small in .
n(tan θ+1) , for all t ∈ T such that the new
(cid:25)
(cid:25)

k,j(t) + i(cid:98)sI
3n(tan θ+1)2 , such that the values of any elastic xk,j, (k, j) ∈ F are selected from the

(cid:98)sk,j(t) =(cid:98)sR

· Lt + i
· Lt + i

We also deﬁne R (cid:44)

(cid:24) sI
(cid:24) sI

k,j(t) ≥ 0,

· Lt,
· Lt,

otherwise.

k,j (t)
Lt

k,j (t)
Lt

if sR

(21)

Ct

discrete set R of integer multiples of R deﬁned by

+ (and ζ− ∈ Rm
Let ξ+ ∈ Rm
absolute total projections of the rounded optimal solution.

+ (and ξ− ∈ Rm

+ ) be respectively the guessed real and imaginary

Then the possible values of ξ+, ξ−, ζ+ and ζ− in each component t are integer mutiples of (R · Lt):



k,j (t)
Lt

k,j (t)
Lt

(cid:25)
(cid:23)

k,j(t) (cid:44)

(cid:24) sR
(cid:22) sR


R (cid:44)(cid:8)0, 1R, 2R, ..., ((cid:100) 1
+ ), ζ+ ∈ Rm
(cid:26)
(cid:26)
(cid:26)

ξ+(t) ∈ A+(t) (cid:44)

0, (RLt), 2(RLt), . . . ,

ξ−(t) ∈ A− (cid:44)

0, (RLt), 2(RLt), . . . ,

R(cid:101) − 1)R, 1(cid:9) .
(cid:24) Ct(1 + tan θ)
(cid:24) Ct · tan θ
(cid:25)
(cid:25)
(cid:24) Ct

RLt

RLt

· (RLt)

(cid:25)
(cid:27)

(cid:27)

· (RLt)

,

(cid:27)

· (RLt)

,

ζ+(t), ζ−(t) ∈ B(t) (cid:44)

.

RLt

0, (RLt), 2(RLt), . . . ,

(22)
The next step is to solve the rounded instance exactly. Assume an arbitrary order on N = {1, ..., n}.
tained from a subset of users {1, 2, . . . , K} ⊆ N with demands {(cid:98)sk,j(t)}k∈{1,...,K},j∈Dk,t∈Tj that can ﬁt
We use recursion to deﬁne a table, with each entry U (k, c1, c2), c1, c2 ∈ Rm
+ , as the maximum utility ob-
t}t=1,...,m on the real axis and
exactly (i.e., satisﬁes the capacity constraints as equations) within capacities {c1
{c2
t}t=1,...,m on the imaginary axis. We denote by 2mDKP-EXACT[·] the algorithm for solving exactly the
rounded 2mDKP by dynamic programming. We provide the detailed description of 2mDKP-EXACT[·] in
Algorithm 3.
Theorem 3. Algorithm m-CSP-BIFPTAS is a (1, 1 + 4)-approximation for m-CSP[0, π-ε] and its running
time is polynomial in both n and 1
 .

Proof. First, the running time is proportional to the number of guesses, upper bounded by ( 1
For each guess, 2mDKP-EXACT constructs a table of size at most ( 1
tan θ is polynomial in n, the total running time is polynomial in n and 1
 .

 n(tan θ+1))O(1).
 n(tan θ + 1))O(1). Since we assumed

To show the approximation ratio of 1, we note m-CSP-BIFPTAS enumerates over all possible rounded
projections subject to the capacity constraints in m-CSP and that 2mDKP-EXACT returns the exact optimal
solution for each rounded problem. In particular, by Lemma 4 below one of the choices would be rounded
projection for the optimum solution x∗. It remains to show that the violation of the returned solution is small

in . This is given in Lemma 5 below, which shows that the solution(cid:98)x to the rounded problem violates the

capacity constraint by only a factor at most (1 + 4).

For any solution x ∈ [0, 1]n, let us write for brevity

P+,t(x) (cid:44) (cid:88)

(cid:88)

k,j(t), P−,t(x) (cid:44) (cid:88)

k∈N+

j∈Dk:t∈Tj

(cid:88)

j∈Dk:t∈Tj

−xk,jsR

k,j(t), and

xk,jsR

PI,t(x) (cid:44) (cid:88)

k∈N

(cid:88)

j∈Dk:t∈Tj

8

k∈N−
xk,jsI

k,j(t).

rameter 

2: for all sk,j(t), k ∈ N , j ∈ Dk, and t ∈ Tj do
3:
4: end for

Algorithm 2 m-CSP-BIFPTAS[{uk,j,{sk,j(t)}t∈Tj}k∈N ,j∈Dk , (Ct)t∈T , ]
Require: Users’ utilities and demands {uk,j,{sk,j(t)}t∈Tj}k∈N ,j∈Dk; capacity over time Ct; accuracy pa-
Ensure: (1, 1 + 4)-solution(cid:98)x to m-CSP[0, π-ε]
1: (cid:98)x ← 0
5: for all ξ+ ∈(cid:81)

Set(cid:98)sk,j(t) ←(cid:98)sR
t∈T A−(t), ζ+, ζ− ∈(cid:81)
if(cid:0)ξ+(t) − ξ−(t)(cid:1)2 +(cid:0)ζ+(t) + ζ−(t)(cid:1)2 ≤ (1 + 2)2C2
t∈T B(t) do
(cid:16){uk,j, ((cid:98)sk,j(t)/Lt)t}k∈N+,j∈Dk ,(cid:0)ξ+(t)/Lt
t,(cid:0)ζ+(t)/Lt
(cid:1)
(cid:1)
t for all t ∈ T then
(cid:16){uk,j, (−(cid:98)sk,j(t)/Lt)t}k∈N−,j∈Dk ,(cid:0)ξ−(t)/Lt
t,(cid:0)ζ−(t)/Lt
(cid:1)
if u(y+ + y−) > u((cid:98)x) then
(cid:98)x ← y+ + y−

k,j(t) + i(cid:98)sI
t∈T A+(t), ξ− ∈(cid:81)

y+ ← 2mDKP-EXACT
y− ← 2mDKP-EXACT

k,j(t) as deﬁned by (21)

(cid:17)
(cid:1)

6:

7:

8:

(cid:17)

t

t

end if

9:
10:
11:
12:
13: end for

end if

14: return(cid:98)x
Also write(cid:98)P+,t(x) (cid:44) (cid:88)

(cid:88)

j∈Dk:t∈Tj

k∈N+

xk,j(cid:98)sR
(cid:98)PI,t(x) (cid:44) (cid:88)

k,j(t),

(cid:98)P−,t(x) (cid:44) (cid:88)
(cid:88)
xk,j(cid:98)sI

k∈N−

k,j.

(cid:88)

j∈Dk:t∈Tj

−xk,j(cid:98)sR

k,j(t), and

k∈N

j∈Dk:t∈Tj

fact that (cid:96) ≤ τ(cid:100) (cid:96)

(cid:98)P+,t((cid:98)x) =

Consider the rounded solution(cid:98)x of some x such that(cid:98)xk,j ∈ R, and xk,j ≤ (cid:98)xk,j ≤ xk,j + R. By the
τ (cid:101) ≤ (cid:96) + τ for any (cid:96), τ such that τ > 0; and that each user k has at most one(cid:98)xk,j > 0 by
Algorithm 3 (and consequently one xk,j > 0, since(cid:98)xk,j ≥ xk,j) we have
(cid:88)
j:(cid:98)xk,j >0

(cid:88)
≤ (cid:88)
j:(cid:98)xk,j >0
≤ P+,t(t) + nCt(tan θ + 1)R + nL + nLtR ≤ P+,t(t) + nLt,

(cid:88)
j:(cid:98)xk,j >0

sR
k,j(t)R + nL + nLtR

k,j(t) + L) = P+,t(t) +

(cid:98)xk,j(cid:98)sR

(cid:98)xk,j(cid:98)sR

(xk,j + R)(sR

(cid:88)

j∈Dk:t∈Tj

k,j(t) =

k,j(t)

k∈N

k∈N

k∈N

k∈N

holds for (cid:98)P−,t and (cid:98)PI,t:

where the last inequality follows by Eqn. (21), and the deﬁnitions of R and Lt respectively. The same bound

max{(cid:98)P+,t((cid:98)x) − nLt, 0} ≤ P+,t(x) ≤ (cid:98)P+,t((cid:98)x), max{(cid:98)P−,t((cid:98)x) − nLt, 0} ≤ P−,t(x) ≤ (cid:98)P−,t((cid:98)x),

Lemma 4. For any feasible allocation x to m-CSP [0, π-ε], and the rounded(cid:98)x ∈ Rn such that xk,j ≤(cid:98)xk,j ≤

(23)

max{(cid:98)PI,t((cid:98)x) − nLt, 0} ≤ PI,t(x) ≤ (cid:98)PI,t((cid:98)x).
(cid:88)

(cid:12)(cid:12)(cid:12) ≤ (1 + 2)Ct

(cid:98)xk,j(cid:98)sk,j(t)

xk,j + R, we have

for all t ∈ T .

(cid:12)(cid:12)(cid:12)(cid:88)

k∈N

j∈Dk:t∈Tj

9

Algorithm 3 2mDKP-EXACT[{uk,j,{(cid:98)sk,j(t)}t∈Tj}k∈W,j∈Dk , (c1
Require: Utilities, and rounded demands of a restricted set of users W ⊆ N , {uk,j,{sk,j(t)}t∈Tj}k∈N ,j∈Dk;
Ensure: A utility-maximizing optimal solution y ∈ [0, 1]n subject to the capacity constraints deﬁned by

integer capacity vectors (c1

t )t∈T , (c2

t )t∈T , (c2

t )t∈T ]

t )t∈T

1: Create a table of size |W| ·(cid:81)

c1
t , c2
t

U (1, c1, c2) (cid:44) max

t(c1

t + 1), with each entry U (k, c1, c2) according to:

k,j(t) = c1

t , (cid:98)sI

t + 1) · (c2
{uk,j |(cid:98)sR
{(cid:98)xk,juk,j |(cid:98)xk,j(cid:98)sR
(cid:110)
uk,j + U(cid:0)k − 1, (c1
(cid:110)(cid:98)xk,juk,j + U(cid:0)k − 1, (c1

k,j(t) = c1

max

(1,j)∈(I∩W)

max

(cid:98)xk,j∈R
(1,j)∈(F∩W)
−∞

max

(k,j)∈(I∩W)

k,j(t) = c2

k,j(t) = c2

t , ∀t},
t , (cid:98)xk,j(cid:98)sI
t , ∀t},
t −(cid:98)sk,j(t))t
t −(cid:98)sk,j(t))t, (c2
t −(cid:98)xk,j(cid:98)sk,j(t))t, (c2

(cid:1)(cid:111)
t −(cid:98)xk,j(cid:98)sk,j(t))t

,

(cid:1)(cid:111)






U (k, c1, c2) (cid:44) max

max

(cid:98)xk,j∈R
(k,j)∈(F∩W)
U (k − 1, c1, c2)
2: Create a table of size |W| ·(cid:81)
U (k, c1, c2) (cid:44) −∞ for all c1, c2 (cid:54)∈ Rm
y(1, c1, c2) (cid:44) {(0, ...,(cid:98)xkj, ..., 0) |(cid:98)xk,juk,j = U (1, c1, c2)}
y(k, c1, c2) (cid:44) {y(k − 1, c1, c2) + (0, ...,(cid:98)xkj, ..., 0) |(cid:98)xk,juk,j = U (1, c1, c2) − u(cid:0)y(k − 1, c1, c2)(cid:1)}

t + 1), with each entry y(k, c1, c2) ∈ [0, 1]n according to:

y(k, c1, c2) (cid:44) 0 if U (k, c1, c2) = −∞

t + 1) · (c2

t(c1

+

,

3: return y(|W|, c1, c2).



(cid:17)2

(cid:16)(cid:98)P+,t((cid:98)x) − (cid:98)P−,t((cid:98)x)
(cid:17)2

=

+ (cid:98)P 2
I,t((cid:98)x)

k,j(t)

≤ (P+,t(x) + nLt)2 + (P−,t(x) + nLt)2 − 2P+,t(x)P−,t(x) + (PI,t(x) + nLt)2
= (P+,t(x) − P−,t(x))2 + P 2
I,t(x) + 2nLt(P+,t(x) + P−,t(x) + PI,t(x)) + 3n2L2
t

Proof. Using (23) and (20), for all t ∈ T ,

+

k∈N

k∈N

k,j(t)

(cid:17)2

j∈Dk:t∈Tj

(cid:16)(cid:88)

(cid:98)xk,j(cid:98)sR

(cid:16)(cid:88)
(cid:88)
(cid:88)
(cid:98)xk,j(cid:98)sI
+,t((cid:98)x) + (cid:98)P 2−,t((cid:98)x) − 2(cid:98)P+,t((cid:98)x)(cid:98)P−,t((cid:98)x) + (cid:98)P 2
= (cid:98)P 2
I,t((cid:98)x)
(cid:16)(cid:88)
(cid:88)
(cid:88)

(cid:88)
(cid:16)(cid:88)

(cid:16)(cid:88)

(cid:88)

j∈Dk:t∈Tj

j∈Dk:t∈Tj

j∈Dk:t∈Tj

(cid:17)2

xk,jsR

k,j(t)

k∈N

=

+

(cid:88)

k∈N
k,j(t)| +

xk,j|sR

+ 2nLt

k∈N

j∈Dk:t∈Tj

≤ C2
≤ C2

t + 4nLt(tan θ + 1)Ct + 3n2L2
t (1 + 4 + 32) ≤ C2
t (1 + 2)2.

(cid:17)2

xk,jsI

k,j(t)

(cid:17)

xk,jsI

k,j(t)

+ 3n2L2
t

j∈Dk:t∈Tj

k∈N
t + 4C2

t = C2

t + 32C2

t /(1 + tan θ)2

10

= (P+,t((cid:98)x) − P−,t((cid:98)x))2 + P 2
I,t((cid:98)x)

k,j(t)

t + (cid:98)P 2
I,t((cid:98)x)

(24)

(25)

(26)

, respectively, and ξ+, ξ−, ζ+, ζ−

j∈Dk:t∈Tj

j∈Dk:t∈Tj

k,j(t)

+

k∈N
= P 2

k∈N

j∈Dk:t∈Tj

(cid:16)(cid:88)

for all t ∈ T .

(cid:88)
(cid:17)2

I,t((cid:98)x) ≤ (cid:98)P 2

(cid:12)(cid:12)(cid:12)(cid:88)
(cid:98)xk,jsR

k∈N

Proof. As in the proof of Lemma 4, for all t ∈ T

Lemma 5. Let(cid:98)x be the allocation returned by m-CSP-FPTAS. Then
(cid:12)(cid:12)(cid:12) ≤ (1 + 4)Ct
(cid:98)xk,jsk,j(t)
(cid:17)2
(cid:16)(cid:88)
(cid:88)
(cid:88)
(cid:98)xk,jsI
+,t((cid:98)x) + P 2−,t((cid:98)x) − 2P+,t((cid:98)x)P−,t((cid:98)x) + P 2
I,t((cid:98)x).
(cid:98)P 2
+,t((cid:98)x) + (cid:98)P 2−,t((cid:98)x) + (cid:98)P 2

If both (cid:98)P+,t((cid:98)x) and (cid:98)P−,t((cid:98)x) are less than nLt, then the R.H.S. of (24) can be bounded by
+,t((cid:98)x) + (cid:98)P 2−,t((cid:98)x) − 2(cid:98)P+,t((cid:98)x)(cid:98)P−,t((cid:98)x) + 2n2L2
I,t((cid:98)x) + 2n2L2
+,t((cid:98)x) + (cid:98)P 2−,t((cid:98)x) − 2((cid:98)P+,t((cid:98)x) − nLt)((cid:98)P−,t((cid:98)x) − nLt) + (cid:98)P 2
(cid:98)P 2
I,t((cid:98)x)
I,t((cid:98)x) + 2nLt((cid:98)P+,t((cid:98)x) + (cid:98)P−,t((cid:98)x)) − 2n2L2
= ((cid:98)P+,t((cid:98)x) − (cid:98)P−,t((cid:98)x))2 + (cid:98)P 2
(cid:16){uk,j, ((cid:98)sk,j(t)/Lt)t}k∈N+,j∈Dk ,(cid:0)ξ+(t)/Lt
(cid:17)
t,(cid:0)ζ+(t)/Lt
(cid:1)
(cid:1)
(cid:16){uk,j, (−(cid:98)sk,j(t)/Lt)t}k∈N−,j∈Dk ,(cid:0)ξ−(t)/Lt
(cid:1)
(cid:1)
t,(cid:0)ζ−(t)/Lt
(cid:17)2
(cid:16)(cid:88)
(cid:16)(cid:88)
(cid:88)
(cid:98)xk,jsI
(cid:17)2
(cid:16)(cid:88)
≤(cid:16)(cid:88)
(cid:88)
(cid:98)xk,j(cid:98)sI
(cid:98)xk,j|(cid:98)sR
j∈Dk:t∈Tj
k,j(t)| + 2n2L2

Since ˆx = y+ + y− is obtained from feasible solutions y+ and y− to
2mDKP-EXACT

(cid:88)
(cid:98)xk,jsR
(cid:88)
(cid:98)xk,j(cid:98)sR
(cid:88)
(cid:88)

2mDKP-EXACT
satisfy the condition in Step 6, it follows from (24)-(26) that

= ((cid:98)P+,t((cid:98)x) − (cid:98)P−,t((cid:98)x))2 + (cid:98)P 2

Otherwise, we bound the R.H.S. of Eqn. (24) by

k∈N

j∈Dk:t∈Tj

k∈N

j∈Dk:t∈Tj

k∈N

j∈Dk:t∈Tj

(cid:17)

and

t

t

k,j(t)

+

k,j(t)

+

k∈N

k,j(t)

(cid:17)2

k,j(t)

(cid:17)2

t .

t

= (ξ+(t) − ξ−(t)2 + (ζ+(t) + ζ−(t)2 + 2nLt(ξ+(t) + ξ−(t) + 2n2L2

t

t .

(cid:17)

+ 2nLt

k∈N

j∈Dk:t∈Tj

(1 + 2)2C2

(1 + 2)2 + 4 + 22(cid:17)

t + 4n

≤(cid:16)
≤(cid:16)

Ct

n(tan θ + 1)

(1 + tan θ)Ct + 2n2

2C2
t

n2(tan θ + 1)2

t ≤ (1 + 4)2C2
C2
t .

2 ] with Polynomial number of Time Slots

5 m-CSP[0, π
In this section, we extend our results to polynomial number of time slots |T |. We assume in this section
that all demands lie in the ﬁrst quadrant of the complex plane (i.e., φ (cid:44) maxk arg(sk) ≤ π
2 ). We provide
a reduction to the unsplittable ﬂow problem on a path with bag constraints (BAG-UFP) for which recent
approximation algorithms are developed in the literature (see, e.g., [4, 11, 14]). We remake that BAG-UFP
considers only real-valued demand, wherein m-CSP demands are complex-valued. We will show that such
reduction will increase the approximation ratio of BAG-UFP by a constant factor of cos φ
2 is the
maximum argument of any demand. To this extent, we will restrict our setting by the following assumptions
to accommodate the setting of BAG-UFP:

2 , where φ ≤ π

11

(i) We assume demands are constant over time: sk,j(t) = sk,j(t(cid:48)) for any t, t(cid:48) ∈ Tj. To simplify notations,

we will write sk,j to denote the unique demand over all time steps Tj.

(ii) All demands are inelastic, i.e., F = ∅.
For convenience, we will call our problem m-CSP(cid:48) when restricted to the above assumptions. When all
demands in m-CSP(cid:48) are real-valued, the problem is called BAG-UFP. We denote m-CSP∗ (resp., BAG-UFP∗)
as the linear relaxation of m-CSP(cid:48) (resp., BAG-UFP), that is, xk,j ∈ [0, 1] for all k ∈ N , j ∈ Dk. Let OPT
∗
and OPT be the optimal objective value of m-CSP(cid:48) and BAG-UFP respectively. Also denote OPT∗ and OPT
by the optimal objective value of m-CSP∗ and BAG-UFP∗ respectively.
with bounded integrality gap to obtain approximate solutions to m-CSP(cid:48)[0, π
2 ].
Lemma 6. Given a solution ¯x ∈ {0, 1}n to BAG-UFP such that u(¯x) ≥ ψ· OPT
for m-CSP(cid:48)[0, π
Proof. The unsplittable ﬂow problem on a path with bag constraints (BAG-UFP) is deﬁned as followed:

We will show in Lemma 6 and Theorem 8 below that one can use the algorithms developed for BAG-UFP

, ψ ∈ [0, 1] then ¯x is feasible

2 ] and u(¯x) ≥ ψ cos φ

2 · OPT.

∗

(cid:88)

(cid:88)

(BAG-UFP)

s.t. (cid:88)
(cid:88)

k∈N

j∈Dk

max

xk,j∈{0,1}

(cid:88)

uk,jxk,j

k∈N

j∈Dk
|sk,j|xk,j ≤ Ct,

j∈Dk:t∈Tj
xk,j ≤ 1

for all k ∈ N .

for all t ∈ T

(27)

(28)

Cons. (27). Thus all demands in BAG-UFP are real valued. Let (x∗

We note that the absolute of the sum in Cons. (2) is replaced in BAG-UFP by the sum of the absolutes in
k)k∈N be an optimal solution for m-CSP∗.

According to the above inequality, we can construct a feasible solution (˜xk,j)k∈N ,j∈Dk to BAG-UFP∗ deﬁned
by ˜xk,j (cid:44) cos φ

k,j. By the feasibility of (˜xk,j)k∈N ,j∈Dk,

2 · x∗

Lemma 7 below implies

2 ·(cid:88)

cos φ

(cid:88)

k∈N

j∈Dk:t∈Tj

|sk,j|x∗

k∈N

j∈Dk:t∈Tj

(cid:88)

k,j ≤(cid:12)(cid:12)(cid:12)(cid:88)
2 ·(cid:88)
j∈Dk
k∈N
2 · OPT∗ ≥ ψ cos φ
2 · OPT.
(cid:88)

(cid:12)(cid:12)(cid:12) ≤ (cid:88)

(cid:88)

k∈Dk

j∈Dk:t∈Tj

uk,j ˜xk,j = cos φ

OPT

j∈Dk

∗ ≥ (cid:88)
(cid:12)(cid:12)(cid:12)(cid:88)

(cid:88)
k∈N
∗ ≥ ψ · cos φ
(cid:88)

k∈N

j∈Dk:t∈Tj

sk,j ¯xk,j

(cid:12)(cid:12)(cid:12) ≤ Ct

sk,jx∗

k,j

∀t ∈ T .

uk,jx∗

k,j = cos φ

2 · OPT∗.

Therefore, u(¯x) ≥ ψ · OPT

It remains to show that ¯x is feasible for m-CSP(cid:48), which follows readily from the triangular inequality:

|sk,j|¯xk,j ≤ Ct

∀t ∈ T .

Lemma 7 ( [16]). Given a set of vectors {di ∈ R2}n
angle between any pair of vectors {di ∈ R2}n

i=1, then
i=1 and 0 ≤ θ ≤ π
2 .

(cid:80)n
(cid:12)(cid:12)(cid:80)n
i=1 |di|
i=1 di

(cid:12)(cid:12) ≤ sec θ

2 , where θ is the maximum

For completeness, we provide the proof in the appendix.
We can apply Lemma 6 using the recent LP-based algorithm by Grandoni et al. [14] to obtain the following

result.

12

Theorem 8. There exists an (Ω(log n/ log log n), 1)-approximation for m-CSP(cid:48)[0, π
demands have the same utility, we obtain (Ω(1), 1)-approximation.

2 ]. Additionally, if all

Prior work has addressed an important restriction of UFP (also BAG-UFP) called the no bottle-neck
assumption (NBA), namely, maxk∈N , j∈Dk |sk,j| ≤ Cmin (cid:44) mint∈T Ct states that the largest demand is
at most the smallest capacity over all time slots. Deﬁne the bottle-neck time of demand (k, j) by bk,j (cid:44)
arg mint∈Tj Ct. Given a constant δ ∈ [0, 1], we call a demand (k, j) δ-small if |sk,j| ≤ δCbk,j , otherwise we
call it δ-large. We remark that the NBA assumption naturally holds in smart grids since individual demands
are typically much smaller than the generation capacity over all time slots. In the following, we show that
there exists an (Ω(1), 1)-approximation for m-CSP(cid:48)[0, π
2 ]. This is achieved by splitting demands to δ-small
and δ-large and solving each instance separately then taking the maximum utility solution. The next lemma
is an extension to an earlier work by Chakrabarti et al. [6] (to accommodate complex-valued demands) used
to derive a dynamic program that approximates δ-large demands.
Lemma 9. The number of δ-large demands that cross an edge in any feasible solution is at most 2(cid:98) 1
δ2 · sec φ
2(cid:99).
Proof. Given a feasible solution ˆx, let S (cid:44) {(k, j) ∈ I | ˆxk,j = 1, sk,j > δbk,j} be the set of indices of
δ-large demands. Consider any time slot t, let St (cid:44) {(k, j) ∈ S | t ∈ Tj} be the set of demands that cross
t ) contain demands with bottleneck
t (resp., SR
time t. Then we partition St to the sets SL
time slot on the left (resp., right) of t. We show that |SL
2(cid:99), and a similar argument shows the
δ2 · sec φ
same bound for |SR
t |.
t . Now let t(cid:48) ∈ B be the rightmost bottleneck in
B. Since t(cid:48) is the bottleneck of some δ-large demand (k, j), i.e., δCt(cid:48) < |sk,j|, and by the NBA assumption,
|sk,j| ≤ Cmin; it follows that Ct(cid:48) < Cmin
t pass
t are δ-large, |sk,j| > δbk,j ≥

. Because t(cid:48) is the rightmost time slot in B, all demands in SL

through t(cid:48), therefore |(cid:80)

sk,j| ≤ Ct(cid:48). Since all demands (k, j) ∈ SL

Let B be the set of bottleneck time slots for demands in SL

t , such that SL
t | ≤ (cid:98) 1

t and SR

(k,j)∈SL

δ

δCmin. Therefore, using Lemma 7

δCmin|SL

t | <

|sk,j| ≤ sec φ

2

2 · Ct(cid:48) < sec φ

2 · 1

δ Cmin.

t

(cid:88)

(k,j)∈SL
δ2 · sec φ
2(cid:99).

t

(cid:12)(cid:12)(cid:12) (cid:88)

(k,j)∈SL

t

(cid:12)(cid:12)(cid:12) ≤ sec φ

sk,j

t | ≤ (cid:98) 1

This obtains |SL
Theorem 10. Under the NBA assumption, there exists an (Ω(1), 1)-approximation for m-CSP(cid:48)[0, π
running time is O(n2).
Proof. We set δ = 1
9-approximation
2 )-approximation to m-CSP(cid:48). Large
algorithm that runs in O(n2). By Lemma 6, this algorithm is also ( 1
demands can be handled via a simple reduction to the weighted job interval selection problem proposed
by Elbassioni et al. [11] (i.e., restrict selected demands to be disjoint). By Lemma 9 we loose a factor of
2(cid:98)4 sec θ
2(cid:99), then we apply the 2-approximation by Bar-Noy et al. [3] which runs in O(n log n). Hence we
obtain a ( 1
9 cos θ

2. For small demands, Chakaravarthy et al. [4] present a primal-dual 1

2(cid:99))-approximation that runs in O(n2).

2 + 4(cid:98)4 sec θ

2 ]. The

9 cos θ

6 Practical Greedy Approximation for 1-CSP[0, π
2 ]

(cid:0) 1

2 , 1(cid:1)-approximation only in O(n log n) time, where n (cid:44)(cid:80)

In this section we give a practical greedy constant-factor approximation algorithm, presented in Algorithm 4,
2 ]) where |T | = 1. Despite the
and denoted by 1-CSP-GREEDY, for the single time slot case (1-CSP[0, π
theoretical value of the PTAS and FPTAS presented in [7] (that are generalized in Sec. 4), the running time is
quite large and hence impractical for real world applications. Algorithm 1-CSP, on the other hand, achieves
k∈N |Dk|. Note that such a simple greedy
2 cos φ
algorithm can be used to provide a fast heuristic for practical settings when considering multiple time slots.
For instance, in the setting where users arrive online, 1-CSP-GREEDY could be applied to each time slot,
after reducing the capacity by the magnitude of demands consumed in previous time slots.

13

Algorithm 4 1-CSP-GREEDY[{uk,j, sk,j}k∈N ,j∈Dk , C]
Require: Users’ utilities and demands {uk,j, sk,j}k∈N ,j∈Dk; capacity C
Ensure: ( 1
Initialization:

2 , 1)-solution ¯x to 1-CSP

2 cos φ

• Add a dummy demand with zero utility and zero demand to each set Dk, k ∈ N
• Sort users in each set Dk, k ∈ N by the magnitude of their demands in increasing order such that if
j ≤ j(cid:48), then |sk,j| ≤ |sk(cid:48),j(cid:48)| for all j(cid:48), j ∈ Dk
• For each k ∈ N deﬁne a new set Rk ⊆ Dk by successively testing the demands in Dk according to
Eqns. (37) and (38). Assume the ordering |sk,1| ≤ |sk,2| ≤ ... ≤ |sk,rk| in Rk, where rk = |Rk|
• E ← ∅, ˜x ← 0, ˜xk,1 ← 1 for all k ∈ N , τ ← 0, ˆx ← 0

|˜sk,j|) in a non-increasing order

(cid:12)(cid:12) ≤ C then

if (cid:12)(cid:12)τ + ˜sk,j

˜uk,j ← uk,j − uk,j−1, ˜sk,j ← sk,j − sk,j−1
E ← E ∪ {(k, j)}

1: for k ∈ N , j = 2, ..., rk do
2:
3:
4: end for
5: Sort items in E by their efﬁciency ( ˜uk,j
6: for (k, j) ∈ E (in the sorted order) do
7:
8:
9:
10:
11:
12:
13: end for
14: Set ˆxk(cid:48),j(cid:48) ← 1 for (k(cid:48), j(cid:48)) (cid:44) arg maxj∈Rk,k∈N{uk,j}
15: Set ¯x ← arg maxx∈{ˆx,˜x} u(x)
16: return ¯x

˜xk,j ← 1, ˜xk,j−1 ← 0, τ ← τ + ˜sk,j
˜xk,j ← arg max{0, C−|τ|
|˜sk,j| }
break

else if (k, j) ∈ F then

end if

Theorem 11. Algorithm 1-CSP-GREEDY is(cid:0) 1

2 , 1(cid:1)-approximation for 1-CSP[0, π

2 cos φ

2 ]. The running time
is O(n log n).
Proof. Consider the simpliﬁed version of m-CSP denoted by 1-CSP where |T | = 1. Recall the assumption
made in the Sec. 3 stating that for every user k, |Dk| = 1 if (k, j) ∈ F, j ∈ Dk. This assures that at most
one demand is selected from each user’s set Dk, k ∈ F. We add a dummy demand to each set Dk, for each
user k ∈ N with utility of 0 and demand of 0. This is to guarantee that a solution to 1-CSP problem contains
exactly one demand from each set Dk for every user k ∈ N . Note that this change does not affect the 1-CSP
problem. The following MIQCP problem is formulated.

(1-CSP) max

subject to

(cid:12)(cid:12)(cid:12)(cid:88)
(cid:88)

k∈N

(cid:88)

(cid:88)
(cid:88)

k∈N

j∈Dk
xk,j ≤ 1,

uk,jxk,j

j∈Dk
sk,j · xk,j

(cid:12)(cid:12)(cid:12) ≤ C

for all k ∈ N

(29)

(30)

(31)

j∈Dk
xk,j ∈ {0, 1} for all (k, j) ∈ I and xk,j ∈ [0, 1] for all (k, j) ∈ F .

Let S∗ ⊆ N be an optimal solution of 1-CSP, and the OPT (cid:44)(cid:80)

(32)
(k,j)∈S∗ uk,j · xk,j be the corresponding

total utility.

14

If a user’s complex-valued power demand is substituted in 1-CSP problem by its real-valued magnitude,
the inequality constraint (31) is transformed into an equality constraint and the binary decision variables xk,j
are relaxed such that they take non-negative real values (i.e., (xk,j)k∈N ,j∈Dk ∈ [0, 1]), the following linear
programming (LP) problem is obtained.

(cid:88)
(cid:88)

k∈N

(cid:88)
(cid:12)(cid:12)(cid:12)sk,j

j∈Dk

uk,jxk,j

(cid:12)(cid:12)(cid:12) · xk,j ≤ C

(RX1-CSP) max

subject to (cid:88)
(cid:88)

k∈N

j∈Dk
xk,j = 1,

for all k ∈ N

j∈Dk
xk,j ∈ [0, 1] for all (k, j) ∈ N .

(33)

(34)

(35)

(36)

We introduce the concepts of dominance and LP-dominance which were deﬁned previously in [22].

Deﬁnition 2. If two demands j and h belonging to the same set j, h ∈ Dk, k ∈ N satisfy

(37)
then demand h is dominated by j. Similarly, if some demands j, h and l in the same set j, h, l ∈ Dk, k ∈ N
with |sk,j| < |sk,h| < |sk,l| and uk,j < uk,h < uk,l satisfy

uk,j ≥ uk,h and |sk,j| ≤ |sk,h| ,

uk,l − uk,h
|sk,l| − |sk,h| ≥ uk,h − uk,j
|sk,h| − |sk,j| ,

(38)

then demand h is LP-dominated by demands j and l.

In chapter 11 of [17] the following proposition is stated.

Proposition 12. Given two demands j, h ∈ Dk, k ∈ N , if demand j is dominated by demand h then an
optimal solution to 1-CSP with xk,j = 0 exists. Similarly, if demand h is LP-dominated by demands j and l
such that j, h, l ∈ Dk, k ∈ N then an optimal solution to RX1-CSP with xk,h = 0 exists.

O((cid:80)

In [17], it was also proved that the LP optimal solution to RX1-CSP problem may be found readily
by adopting the correspondingly modiﬁed variant of 1-CSP-GREEDY algorithm. Considering Prop. 12 it is
possible to eliminate demands from sets Dk, k ∈ N which will never be included in the optimal solution
of 1-CSP. The greedy algorithm for RX1-CSP problem starts by sorting each set Dk, k ∈ N according
to increasing magnitude of demands and deﬁning a corresponding new set Rk ⊆ Dk comprised of only
dominated and LP-dominated demands determined according to Eqns. (37) and (38). Assume the order-
ing |sk,1| ≤ |sk,2| ≤ ... ≤ |sk,rk| in Rk, where rk = |Rk|. Observe that this reduction requires only
k∈N |Dk| log |Dk|) time due to sorting. Initially, 1-CSP-GREEDY selects customers with a smallest
demand from each sorted set Rk, k ∈ N and sets the corresponding decision variables to 1. Next, the greedy
algorithm constructs a new set E by combining all the sets Rk, k ∈ N and setting ˜uk,j = uk,j − uk,j−1 and
|˜sk,j| = |sk,j|−|sk,j−1| for j = 2, ..., rk. After sorting entries in E by their efﬁciency ˜uk,j
|˜sk,j| in non-increasing
order, the greedy execution continues by selecting items in the aforementioned sorted order considering the
k∈N |sk,1|. Observe that for 1-CSP and RX1-CSP problems the residual ca-
k∈N |sk,1| = 0 (sum of the magnitude of the demands of dummy items from each set
Rk, k ∈ N ). Each time an item (k, j) is selected from set E assign ˜xk,j ← 1, ˜xk,j−1 ← 0 and τ = τ + |˜sk,j|,
where the initial value of τ is 0. Assume at some iteration adding the next item (k(cid:48), j(cid:48)) to the current solution
vector ˜x causes capacity violation, that is

residual capacity ˜C = C −(cid:80)
pacity ˜C = C since(cid:80)

τ ≤ C and τ + |˜sk(cid:48),j(cid:48)| > C .

(39)

15

The greedy execution is stopped at this point and the remaining capacity C − τ is occupied by the corre-
sponding fractional part of the (k(cid:48), j(cid:48)) item’s power demand and the item’s (k(cid:48), j(cid:48) − 1) decision variable is set
as follows:

˜xk(cid:48),j(cid:48) =

C − τ
|˜sk(cid:48),j(cid:48)| and ˜xk(cid:48),j(cid:48)−1 = 1 − ˜xk(cid:48),j(cid:48) where k(cid:48) ∈ N , j(cid:48) ∈ Rk(cid:48).

optimal solution of RX1-CSP and by OPTL (cid:44)(cid:80)

ing at most two fractional variables that belong to adjacent users in the sorted set Rk(cid:48). Denote by S∗

In [17], it was shown that this greedy strategy produces an optimal solution to RX1-CSP problem contain-
L ⊆ N an
uk,jxk,j the corresponding total utility. Denote

k∈S∗

L,j∈Rk

by Es (cid:44) E \ {(k(cid:48), j(cid:48)), (k(cid:48), j(cid:48) − 1)}, let

ˆp (cid:44) (cid:88)

(k,j)∈Es

uk,j · ˜xk,j and umax (cid:44) arg max

j∈Rk,k∈N{uk,j} .

For the optimal solution to RX1-CSP problem we get

On the other hand, by Lemma 7 it follows that

OPTL = ˆp + ˜xk(cid:48),j(cid:48) · uk(cid:48),j(cid:48) + ˜xk(cid:48),j(cid:48)−1 · uk(cid:48),j(cid:48)−1 ≤ ˆp + uk(cid:48),j(cid:48) .

2 · (cid:88)

(k,j)∈S∗

cos φ

|sk,j| ≤(cid:12)(cid:12)(cid:12) (cid:88)

sk,j

(k,j)∈S∗

(cid:12)(cid:12)(cid:12) ≤ C ,

2 . Note that the subset S∗, which is an optimal solution to 1-CSP problem,
since φ is restricted to be at most π
2 for ∀(k, j) ∈ S∗
becomes a feasible solution to RX1-CSP if the relaxed decision variables are set xk,j = cos φ
and xk,j = 0 otherwise. We remark that an optimal solution of CSP can be easily created as to satisfy the
equality constraint (35) in RX1-CSP problem by making use of dummy users with utility of 0 and demand of
0 without altering the utility of the optimum solution. This implies that

OPTL ≥ cos φ

2 · u(S∗) = cos φ

2 · OPT .

(43)
Denote by Z ALG the utility of the output solution of 1-CSP-GREEDY when applied to 1-CSP problem.
To investigate the worst case approximation ratio of 1-CSP-GREEDY for 1-CSP problem we split the analy-
sis into two cases.
Case (1): Demand (k(cid:48), j(cid:48)) is divisible, i.e., (k(cid:48), j(cid:48)) ∈ F.

Observe that Z ALG ≥ ˆp + ˜xk(cid:48),j(cid:48) · uk(cid:48),j(cid:48) + ˜xk(cid:48),j(cid:48)−1 · uk(cid:48),j(cid:48)−1 since by the formulation of problem (k(cid:48), j(cid:48) − 1)

is a dummy demand and thus

OPTL ≤ Z ALG .

(40)

(41)

(42)

(44)

(45)

(46)

From Eqns. (43) and (44) it follows

Z ALG ≥ cos φ
Case (2): Demand (k(cid:48), j(cid:48)) is inelastic, i.e., (k(cid:48), j(cid:48)) ∈ I .

2 · OPT .

Considering Eqn. (41) observe that

OPTL ≤ ˆp + umax .

Evidently, Z ALG ≥ ˆp. This gives

(47)
From the formulation of algorithm 1-CSP-GREEDY, Z ALG ≥ umax , and hence by Eqns. (47) and (43) it

OPTL ≤ Z ALG + umax .

follows that

ZAlg ≥ 1
2

cos φ

2 · OPT .

16

(48)

Thus, we have shown for the aforementioned both cases that algorithm 1-CSP-GREEDY produces solu-
2 of the optimum solution to 1-CSP problem, where φ is the

maximum angle between any pair of demands. That is, 1-CSP-GREEDY is(cid:0) 1

2 , 1(cid:1)-approximation for

2 cos φ

tions that in the worst case are at least 1

2 cos φ

1-CSP problem.

7 Conclusion

This paper extends the previous results known for the single time slot case (CKP) to a more general scheduling
setting. When the number of time slots m is constant, both the previously known PTAS and FPTAS are
extended to handle multiple-time slots, multiple user preferences, and handle mixed elastic and inelastic
demands. For polynomial m, a reduction is presented from CSP[0, π
2 ] to the real-valued BAG-UFP, which
can be used to obtain algorithms for CSP[0, π
2 ] based on BAG-UFP algorithms that have bounded integrability
gap for their LP-relaxation. We further presented a practical greedy algorithm with an efﬁcient running time
that can be implement in real systems. As a future work, we shall improve the second case (polynomial
m) to a constant-factor approximation. Additionally, we may consider different objective functions such as
minimizing the maximum peak consumption at any time slot.

References

[1] Anagnostopoulos, A., Grandoni, F., Leonardi, S., Wiese, A.: A mazing 2+ ε approximation for unsplit-

table ﬂow on a path. In: Proceedings of SODA. pp. 26–41. SIAM (2014)

[2] Bansal, N., Chakrabarti, A., Epstein, A., Schieber, B.: A quasi-ptas for unsplittable ﬂow on line graphs.

In: Proceedings of STOC. pp. 721–729. STOC ’06, ACM (2006)

[3] Bar-Noy, A., Bar-Yehuda, R., Freund, A., Naor, J., Schieber, B.: A uniﬁed approach to approximating

resource allocation and scheduling. Journal of the ACM (JACM) (2001)

[4] Chakaravarthy, V.T., Choudhury, A.R., Gupta, S., Roy, S., Sabharwal, Y.: Improved algorithms for

resource allocation under varying capacity. In: Algorithms-ESA 2014 (2014)

[5] Chakaravarthy, V.T., Pandit, V., Sabharwal, Y., Seetharam, D.P.: Varying bandwidth resource allocation
problem with bag constraints. In: Parallel & Distributed Processing (IPDPS), 2010 IEEE International
Symposium on. pp. 1–10. IEEE (2010)

[6] Chakrabarti, A., Chekuri, C., Gupta, A., Kumar, A.: Approximation algorithms for the unsplittable ﬂow

problem. Algorithmica 47(1), 53–78 (2007)

[7] Chau, C.K., Elbassioni, K., Khonji, M.: Truthful mechanisms for combinatorial AC electric power

allocation. In: Proceedings of AAMAS (2014), http://arxiv.org/abs/1403.3907

[8] Chau, C.K., Elbassioni, K., Khonji, M.: Truthful mechanisms for combinatorial allocation of elec-
tric power in alternating current electric systems for smart grid. Tech. rep., Masdar Institute (2015),
http://arxiv.org/abs/1507.01762

[9] Chekuri, C., Mydlarz, M., Shepherd, F.B.: Multicommodity demand ﬂow in a tree and packing integer

programs. ACM Transactions on Algorithms (TALG) 3(3), 27 (2007)

[10] Darmann, A., Pferschy, U., Schauer, J.: Resource allocation with time intervals. Theoretical Computer

Science 411(49), 4217–4234 (2010)

17

[11] Elbassioni, K., Garg, N., Gupta, D., Kumar, A., Narula, V., Pal, A.: Approximation algorithms for the
unsplittable ﬂow problem on paths and trees. In: LIPIcs-Leibniz International Proceedings in Informat-
ics. vol. 18 (2012)

[12] Elbassioni, K.M., Nguyen, T.T.: Approximation schemes for multi-objective optimization with quadratic

constraints of ﬁxed cp-rank. In: Algorithmic Decision Theory (2015)

[13] Grainger, J., Stevenson, W.: Power System Analysis. McGraw-Hill (1994)

[14] Grandoni, F., Ingala, S., Uniyal, S.: Approximation and Online Algorithms: 13th International Work-
shop, WAOA 2015, Patras, Greece, September 17-18, 2015. Revised Selected Papers, chap. Improved
A, pp. 13–24. Springer International Publishing, Cham (2015)

[15] Gr¨otschel, M., Lov´asz, L., Schrijver, A.: Geometric Algorithms and Combinatorial Optimization.

Springer, New York (1988)

[16] Karapetyan, A., Khonji, M., Chau, C.K., Elbassioni, K., Zeineldin, H.: Efﬁcient algorithm for scalable

event-based demand response management in microgrids. Tech. rep., Masdar Institute (2015)

[17] Kellerer, H., Pferschy, U., Pisinger, D.: Knapsack Problems. Springer (2010)

[18] Khonji, M., Chau, C.K., Elbassioni, K.:

for demand response in radial distribution networks. Tech.
http://arxiv.org/abs/1507.01762

Optimal power ﬂow with inelastic demands
Institute (2016),

rep., Masdar

[19] Khonji, M., Chau, C.K., Elbassioni, K.M.: Inapproximability of power allocation with inelastic demands

in AC electric systems and networks. In: ICCCN. pp. 1–6 (2014)

[20] Nemirovski, A.S., Todd, M.J.: Interior-point methods for optimization. Acta Numerica 17(1), 191–234

(2008)

[21] Patt-Shamir, B., Rawitz, D.: Vector bin packing with multiple-choice. In: Proceedings of the 12th Scan-

dinavian conference on Algorithm Theory. SWAT’10 (2010)

[22] Prabhakant Sinha, A.A.Z.: The Multiple-Choice Knapsack Problem. Operations Research 27(3), 503–

515 (1979)

[23] Schrijver, A.: Theory of Linear and Integer Programming. Wiley, New York (1986)

[24] Spieksma, F.C.: On the approximability of an interval scheduling problem. Journal of Scheduling 2(5),

215–227 (1999)

[25] Su, C.L., Kirschen, D.: Quantifying the effect of demand response on electricity markets. Power Sys-

tems, IEEE Transactions on 24(3), 1199–1207 (Aug 2009)

[26] Woeginger, G.J.: When does a dynamic programming formulation guarantee the existence of a fully
polynomial time approximation scheme (fptas)? INFORMS Journal on Computing 12(1), 57–74 (2000)

[27] Yu, L., Chau, C.K.: Complex-demand Knapsack Problems and Incentives in AC Power Systems. In:

Proceedings of AAMAS. pp. 973–980. AAMAS ’13, Richland, SC (2013)

18

Appendix
Proof of Lemma 7
(cid:80)n
Lemma 7 ( [16]). Given a set of 2D vectors {di ∈ R2}n
(cid:12)(cid:12)(cid:12)(cid:12)(cid:80)n
i=1 |di|
i=1 di

i=1

(cid:12)(cid:12)(cid:12)(cid:12) ≤ sec θ

2 ,

where θ is the maximum angle between any pair of vectors and 0 ≤ θ ≤ π
2 .

Proof. If θ = 0 then the statement is trivial, therefore we assume otherwise. We prove ((cid:80)n
|(cid:80)n
i=1 |di|)2
i=1 di|2 ≤ 2

cos θ+1

by induction (notice that sec θ

cos θ+1). First, we expand the left-hand side by

2 =

(cid:113) 2
i=1 |di|2 + 2(cid:80)
(cid:80)n
i=1 |di|2 + 2(cid:80)
(cid:80)n
(cid:80)n
i=1 |di|2 + 2(cid:80)
i=1 |di|2 + 2(cid:80)
(cid:80)n

=

1≤i<j≤n |di| · |dj|

1≤i<j≤n |di| · |dj|(sin θi sin θj + cos θi cos θj)

1≤i<j≤n |di| · |dj|

,

1≤i<j≤n |di| · |dj| cos(θi − θj)
(cid:16)|d2|

|d1|2 + |d2|2 + 2|d1| · |d2|

|d1|2 + |d2|2 + 2|d1| · |d2| cos(θ)

= f

|d1|

(cid:17)

,

(49)

(50)

where θi is the angle that di makes with the x axis.

Consider the base case: n = 2. Eqn. (49) becomes

where f (x) (cid:44) 1+x2+2x

1+x2+2x cos θ . The ﬁrst derivative is given by

f(cid:48)(x) =

(1 + x2 + 2x cos θ)(2x + 2) − 1 + x2 + 2x)(2x + 2 cos θ)

(1 + x2 + 2x cos θ)2

f(cid:48)(x) is zero only when x = 1. Hence, f (1) is an extreminum point. We compare f (1) with f (x) at the
boundaries x ∈ {0,∞}:

Therefore, f (x) has a global maximum of

Next, we proceed to the inductive step. We assume
assume θ2 ≥ θ3 ≥ ··· ≥ θn ≥ θ1. Rewrite Eqn. (49) as

f (1) =

2

≥ f (0) = lim

x→∞ f (x) = 1

2

((cid:80)r

cos θ + 1
cos θ+1.

(cid:80)r−1
(cid:12)(cid:12)(cid:80)r−1
i=1 |di|
i=1 di

(cid:12)(cid:12) ≤(cid:113) 2
|di||dj| cos(θi − θj) + 2|dr|(cid:88)
(cid:88)
g(cid:48)(cid:48)(θr) = −2|dr| (cid:88)

|di| cos(θi − θr)

i=1 |di|)2

1≤i<r

r(cid:88)

i=1

|di|2 + 2

1≤i<j<r

Let g(θr) be the denominator of Eqn. (51). We take the second derivative of g(θr):

cos θ+1 where r ∈ {1, . . . , n}. W.l.o.g.,

|di| cos(θi − θr)

(51)

1≤i<r

19

Notice that cos(θi − θr) ≥ 0, therefore the second derivative is always negative. This indicates that all local
exterma in [0, θr−1] of g(θn) are local maxima. Hence, the minimum occurs at the boundaries:

g(θr) ∈ {g(0), g(θr−1)}

min

θr∈[0,θr−1]

If θr ∈ {0, θr} , then there must exist at least a pair of vectors in {di}r
i=1 with the same angle. Combining
these two vectors into one, we can obtain an instance with r − 1 vectors. Hence, by the inductive hypothesis,
the same bound holds up to r vectors.

20

