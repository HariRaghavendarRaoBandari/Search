6
1
0
2

 
r
a

 

M
6
1

 
 
]

V
C
.
s
c
[
 
 

1
v
0
3
9
4
0

.

3
0
6
1
:
v
i
X
r
a

Deep Fully-Connected Networks for Video

Compressive Sensing

Michael Iliadis∗

Northwestern University, EECS

miliad@u.northwestern.edu

Leonidas Spinoulas∗

Northwestern University, EECS

leonisp@u.northwestern.edu

Aggelos K. Katsaggelos

Northwestern University, EECS

aggk@eecs.northwestern.edu

Abstract

In this work we present a deep learning framework for video compressive sensing.
The proposed formulation enables recovery of video frames in a few seconds at
signiﬁcantly improved reconstruction quality compared to previous approaches.
Our investigation starts by learning a linear mapping between video sequences and
corresponding measured frames which turns out to provide promising results. We
then extend the linear formulation to deep fully-connected networks and explore
the performance gains using deeper architectures. Our analysis is always driven
by the applicability of the proposed framework on existing compressive video
architectures. Extensive simulations on several video sequences document the su-
periority of our approach both quantitatively and qualitatively. Finally, our analysis
offers insights into understanding how dataset sizes and number of layers affect
reconstruction performance while raising a few points for future investigation.

1

Introduction

Video compressive sensing (CS) refers to the problem of recovering an unknown spatio-temporal
volume from limited samples. It comes in two incarnations, namely, spatial CS and temporal CS.
Spatial video CS architectures stem from the well-known single-pixel-camera [7], which performs
spatial multiplexing per measurement, and enable video recovery by expediting the capturing process.
They either employ fast readout circuitry to capture information at video rates [4] or parallelize the
single-pixel architecture using multiple sensors, each one responsible for sampling a separate spatial
area of the scene [3, 37].
In this work, we focus on temporal CS where multiplexing occurs across the time dimension. Figure 1
depicts this process, where a spatio-temporal volume of size Wf × Hf × t = Nf is modulated by t
binary random masks during the exposure time of a single capture, giving rise to a coded frame of
size Wf × Hf = Mf .
We denote the vectorized versions of the unknown signal and the captured frame as x : Nf × 1 and
y : Mf × 1, respectively. Each vectorized sampling mask is expressed as φ1, . . . , φt giving rise to
the measurement model
(1)
where Φ = [diag(φ1), . . . , diag(φt)] : Mf × Nf and diag(·) creates a diagonal matrix from its
vector argument.

y = Φx,

∗Indicates equal contribution.

1

Figure 1: Temporal compressive sensing measurement model.

Various successful temporal CS architectures have been proposed. Their differences mainly involve
the implementation of the random masks on the optical path (i.e., the measurement matrix in Figure 1).
Digital micromirror devices (DMD), spatial light modulators (SLM) and liquid crystal on silicon
(LCoS) were used in [3, 37, 9, 21, 29] while translating printed masks were employed in [15, 23].
Moreover, a few architectures have eliminated additional optical elements by directly programming
the chip’s readout mode through hardware circuitry modiﬁcations [8, 26, 33].
Despite their reasonable performance, temporal CS architectures lack practicality. The main drawback
is that existing reconstruction algorithms (e.g., using sparsity models [3, 12], combining sparsity and
dictionary learning [22] or using Gaussian mixture models [41, 42]) are often too computationally
intensive, rendering the reconstruction process painfully slow. Even with parallel processing, recovery
times make video CS prohibitive for modern commercial camera architectures.
In this work, we address this problem by employing deep learning and show that video frames can
be recovered in a few seconds at signiﬁcantly improved reconstruction quality compared to existing
approaches.
Our contributions are summarized as follows:

1. We present a novel temporal video CS reconstruction approach, based on fully-connected
neural networks, which learns to map directly temporal CS measurements to video frames.
For such task to be practical, a measurement mask with a repeated pattern is proposed.

2. We show that a simple linear regression-based approach learns to reconstruct video frames
adequately at a minimal computational cost. Such reconstruction could be used as an initial
point to other video CS algorithms.

3. The learning parading is extended to deeper architectures exhibiting reconstruction quality

and computational cost improvements compared to previous methods.

2 Motivation and Related Work

Deep learning [18] is a burgeoning research ﬁeld which has demonstrated state-of-the-art performance
in a multitude of machine learning and computer vision tasks, such as image recognition [11] or
object detection [28].
In simple words, deep learning tries to mimic the human brain by training large multi-layer neural
networks with vast amounts of training samples, describing a given task. Such networks have proven
very successful in problems where analytical modeling is not easy or straightforward (e.g., a variety
of computer vision tasks [16, 20]).
The popularity of neural networks in recent years has led researchers to explore the capabilities of
deep architectures even in problems where analytical models often exist and are well understood
(e.g., restoration problems [2, 32, 39]). Even though performance improvement is not as pronounced
as in classiﬁcation problems, many proposed architectures have achieved state-of-the-art performance
in problems such as deconvolution, denoising, inpainting, and super-resolution.
More speciﬁcally, investigators have employed a variety of architectures: deep fully-connected
networks or multi-layer perceptrons (MLPs) [2, 32]; stacked denoising auto-encoders (SDAEs) [1,
5, 36, 39], which are MLPs whose layers are pre-trained to provide improved weight initializa-

2

∗(cid:31)=HfWf××tMeasurementmatrix (Φ)HfWf×Captured frame (y)dtSpatio-Temporalvolume (x)HfWf××tFigure 2: Average reconstruction performance of linear mapping for 14 videos (unrelated to the
training data), using measurement matrices Φp with varying percentages of nonzero elements.

tion; convolutional neural networks (CNNs) [6, 19, 30, 34, 37, 40] and recurrent neural networks
(RNNs) [13].
Based on such success in restoration problems, we wanted to explore the capabilities of deep
learning for the video CS problem. However, the majority of existing architectures involve outputs
whose dimensionality is smaller than the input (e.g., classiﬁcation) or have the same size (e.g.,
denoising/deblurring). Hence, devising an architecture that estimates Nf unknowns, given Mf inputs,
where Mf (cid:28) Nf is not necessarily straightforward.
Two recent studies, utilizing SDAEs [24] or CNNs [17], have been presented on spatial CS for still
images exhibiting promising performance. Our work constitutes the ﬁrst attempt to apply deep
learning on temporal video CS. Our approach differs from prior 2D image restoration architectures [2,
32] since we are recovering a 3D volume from 2D measurements.

3 Deep Networks for Compressed Video

3.1 Linear mapping

We started our investigation by posing the question: can training data be used to ﬁnd a linear mapping
W such that x = W y? Essentially, this question asks for the inverse of Φ in equation (1) which, of
course, does not exist. Clearly, such a matrix would be huge to store but, instead, one can apply the
same logic on video blocks [22].
We collect a set of training video blocks denoted by xi, i ∈ N of size wp × hp × t = Np. Therefore,
the measurement model per block is now yi = Φpxi with size Mp × 1, where Mp = wp × hp and
Φp refers to the corresponding measurement matrix per block.
Collecting a set of N video blocks, we obtain the matrix equation

(2)
where Y = [y1, . . . , yN ], X = [x1, . . . , xN ] and Φp is the same for all blocks. The linear mapping
X = WpY we are after can be calculated as
Wp (cid:107)X − WpY (cid:107)2
min

Y = ΦpX,

(3)

2 → Wp =(cid:0)XY T(cid:1)(cid:0)Y Y T(cid:1)−1

,

where Wp is of size Np × Mp.
Intuitively, such an approach would not necessarily be expected to even provide a solution due to
ill-posedness. However, it turns out that, if N is sufﬁciently large and the matrix Φp has at least one
nonzero in each row (i.e., sampling each spatial location at least once over time), the estimation of
xi’s by the yi’s provides surprisingly good performance.
Speciﬁcally, we obtain measurements from a test video sequence applying the same Φp per video
block and then reconstruct all blocks using the learnt Wp. Figure 2 depicts the average peak signal-
to-noise ratio (PSNR) and structural similarity metric (SSIM) [38] for the reconstruction of 14 video

3

0102030405060708090262728.76.8.78.74PSNRSSIMRealization 1Percentage of nonzeros0102030405060708090Realization 2Percentage of nonzeros262728.76.8.78.74PSNRSSIMFigure 3: Construction of the proposed full measurement matrix by repeating a three dimensional
random array (building block) in the horizontal and vertical directions.

sequences using 2 different realizations of the random binary matrix Φp for varying percentages of
nonzero elements. The empty bars for 10 − 20% and 10 − 30% of nonzeros in realizations 1 and 2,
respectively, refer to cases when there was no solution due to the lack of nonzeros at some spatial
location. In these experiments wp × hp × t was selected as 8 × 8 × 16 simulating the reconstruction
of 16 frames by a single captured frame and N = 106.

3.2 Measurement Matrix Construction

Based on the performance in Figure 2, investigating the extension of the linear mapping in (3) to
a nonlinear mapping using deep networks seemed increasingly promising. In order for such an
approach to be practical, though, reconstruction has to be performed on blocks and each block must
be sampled with the same measurement matrix Φp. Furthermore, such a measurement matrix should
be realizable in hardware. Hence we propose constructing a Φ which consists of repeated identical
building blocks of size ws × hs × t, as presented in Figure 3. Such a matrix can be straightforwardly
implemented on existing systems employing DMDs, SLMs or LCoS [3, 9, 21, 29, 37]. At the same
time, in systems utilizing translating masks [15, 23], a repeated mask can be printed and shifted
appropriately to produce the same effect.
In the remainder of this paper, we select a building block of size ws× hs× t = 4× 4× 16 as a random
binary matrix containing 50% of nonzero elements and set wp × hp × t = 8 × 8 × 16, such that
Np = 1024 and Mp = 64. Therefore, the compression ratio is 1/16. In addition, for the proposed
matrix Φ, each 4 × 4 × 16 block is the same allowing reconstruction for overlapping blocks of size
8 × 8 × 16 with spatial overlap of 4 × 4. Such overlap can usually aid at improving reconstruction
quality. The selection of 50% of nonzeros was just a random choice since the results of Figure 2 did
not suggest that a speciﬁc percentage is particularly beneﬁcial in terms of reconstruction quality.

3.3 Multi-layer Network Architecture

In this section, we extend the linear formulation to MLPs and investigate the performance in deeper
structures. We consider an MLP architecture to learn a nonlinear function f (·) that maps a measured
frame patch yi via several hidden layers to a video block xi, as illustrated in Figure 4.
Each hidden layer Lk, k = 1, . . . , K is deﬁned as

hk(y) = σ(bk + Wky),

(4)
where bk ∈ RNp is the bias vector and Wk is the output weight matrix, containing linear ﬁlters.
W1 ∈ RNp×Mp connects yi to the ﬁrst hidden layer, while for the remaining hidden layers, W2−K ∈
RNp×Np. The last hidden layer is connected to the output layer via bo ∈ RNp and Wo ∈ RNp×Np
without nonlinearity. The non-linear function σ(·) is the rectiﬁed linear unit (ReLU) [25] deﬁned as,
σ(y) = max(0, y).
The MLP architecture was chosen due to the following considerations; there is a need for at least
one fully-connected layer (the ﬁrst one) that would provide a 3D signal from the compressed 2D
measurements. Following that, one could argue that the subsequent layers could be 3D Convolutional
layers [35]. Although that would sound reasonable, in practice, the small size of blocks used in this
paper (8× 8× 16) do not allow for convolutions to be effective. Such small block sizes have provided
good reconstruction quality in dictionary learning approaches used for CS video reconstruction [22].

4

Full measurementmatrix (Φ)Building blockRepeat in bothdirectionsws×hs×tFigure 4: Illustration of the proposed deep learning architecture for video compressive sensing.

Thus, MLPs were considered more reasonable in our work and we found that when applied in
8× 8× 16 blocks they capture the motion and spatial details of videos adequately. Besides, increasing
the size of blocks would dramatically increase the network complexity in 3D volumes such as in
videos.
To train the proposed MLP, we learn all the weights and biases of the model. The set of parameters
is denoted as θ = {b1−K, bo, W1−K, Wo} and is updated by the backpropagation algorithm [31]
minimizing the quadratic error between the set of training mapped measurements f (yi; θ) and the
corresponding video blocks xi. The loss function is the mean squared error (MSE) which is given by

L(θ) =

1
N

N(cid:88)i=1

(cid:107)f (yi; θ) − xi(cid:107)2
2.

(5)

The MSE was used in this work since our goal is to optimize the PSNR which is directly related to
the MSE.

4 Experiments

We compare our proposed deep architecture with state-of-the-art approaches both quantitatively and
qualitatively. The proposed approaches are evaluated assuming noiseless measurements or under
the presence of measurement noise. Finally, we investigate the performance of our methods under
different network parameters (e.g., number of layers) and size of training samples. The metrics used
for evaluation were the PSNR and SSIM.

4.1 Training Data Collection

For deep neural networks, increasing the number of training samples is usually synonymous to
improved performance. We collected a diverse set of training samples using 400 high-deﬁnition
videos from Youtube, depicting natural scenes. The video sequences contain more than 105 frames
which were converted to grayscale. All videos are unrelated to the test set. We randomly extracted
10 million video blocks of size wp × hp × t while keeping the amount of blocks extracted per
video proportional to its duration. This data was used as output while the corresponding input was
obtained by multiplying each sample with the measurement matrix Φp (see subsection 3.2 for details).
Example frames from the video sequences used for training are shown in Figure 5.

Implementation Details

4.2
Our networks were trained for up to 4× 106 iterations using a mini-batch size of 200. We normalized
the input per-feature to zero mean and standard deviation one. The weights of each layer were
initialized to random values uniformly distributed in (−1/√s, 1/√s), where s is the size of the
previous layer [10]. We used Stochastic Gradient Descent (SGD) with a starting learning rate of 0.01,
which was divided by 10 after 3 × 106 iterations. The momentum was set to 0.9 and we further used

5

K hiddenlayersInputlayerOutputlayerPatch extractionNonlinear mappingof a patch to a blockReconstruction by averaging overlapping blocksMeasuredframeReconstructed video sequencewp×hpwp×hpwp×hp×twp×hp×tWkW1WoL1LKFigure 5: Example frames from the video sequences used for training.

(cid:96)2 norm gradient clipping to keep the gradients in a certain range. Gradient clipping is a widely used
technique in recurrent neural networks to avoid exploding gradients [27]. The threshold of gradient
clipping was set to 10.

4.3 Comparison with Previous Methods

We compare our method with the state-of-the-art video compressive sensing methods:

• GMM-TP, a Gaussian mixture model (GMM)-based algorithm [42].
• MMLE-GMM, a maximum marginal likelihood estimator (MMLE), that maximizes the
likelihood of the GMM of the underlying signals given only their linear compressive
measurements [41].

For temporal CS reconstruction, data driven models usually perform better than standard sparsity-
based schemes [41, 42]. Indeed, both GMM-TP and MMLE-GMM have demonstrated superior
performance compared to existing approaches in the literature such as Total-Variation (TV) or
dictionary learning [22, 41, 42], hence we did not include experiments with the latter methods.
In GMM-TP [42] we followed the settings proposed by the authors and used our training data
(randomly selecting 20, 000 samples) to train the underlying GMM parameters. We found that
our training data provided better performance compared to the data used by the authors. In our
experiments we denote this method by GMM-4 to denote reconstruction of overlapping blocks with
spatial overlap of 4 × 4 pixels, as discussed in subsection 3.2.
MMLE [41] is a self-training method but it is sensitive to initialization. A satisfactory performance is
obtained only when MMLE is combined with a good starting point. In [41], the GMM-TP [42] with
full overlapping patches (denoted in our experiments as GMM-1) was used to initialize the MMLE.
We denote the combined method as GMM-1+MMLE. For fairness, we also conducted experiments in
the case where our method is used as a starting point for the MMLE.
In our methods, a collection of overlapping patches of size wp × hp is extracted by each coded
measurement of size Wf × Hf and subsequently reconstructed into video blocks of size wp ×
hp × t. Overlapping areas of the recovered video blocks are then averaged to obtain the ﬁnal video
reconstruction results, as depicted in Figure 4. The step of the overlapping patches was set to 4 × 4
due to the special construction of the utilized measurement matrix, as discussed in subsection 3.2.
We consider six different architectures:

samples).

samples).

• W-10M, a simple linear mapping (equation (3)) trained on 10 × 106 samples.
• FC4-1M, a K = 4 MLP trained on 1 × 106 samples (randomly selected from our 10 × 106
• FC4-10M, a K = 4 MLP trained on 10 × 106 samples.
• FC7-1M, a K = 7 MLP trained on 1 × 106 samples (randomly selected from our 10 × 106
• FC7-10M, a K = 7 MLP trained on 10 × 106 samples.
• FC7-10M+MMLE, a K = 7 MLP trained on 10 × 106 samples which is used as an

initialization to the MMLE [41] method.

6

Figure 6: Qualitative reconstruction comparison of frames from two video sequences between our
methods and GMM-1 [41], GMM-1+MMLE [41].

Note that the subset of randomly selected 1 million samples used for training FC4-1M and FC7-1M
was the same.
Our test set consists of 14 video sequences. They involve a set of videos that were used for dictionary
training in [22], provided by the authors, as well as the “Basketball” video sequence used by [41].
All video sequences are unrelated to the training set (see subsection 4.1 for details). For fair
comparisons, the same measurement mask was used in all methods, according to subsection 3.2. All
code implementations are publicly available provided by the authors.

4.4 Reconstruction Results

Quantitative reconstruction results for all video sequences with all tested algorithms are illustrated in
Table 1 and average performance is summarized in Figure 7. The presented metrics refer to average
performance for the reconstruction of the ﬁrst 32 frames of each video sequence, using 2 consequtive
captured coded frames through the video CS measurement model of equation (1). In both, Table 1
and Figure 7, results are divided in two parts. The ﬁrst part lists reconstruction performance of
the tested approaches without the MMLE step, while the second compares the performance of the
best candidate proposed and previous methods with a subsequent MMLE step [41]. In Table 1 the
best performing algorithms are highlighted for each part while the bottom row presents average
reconstruction time requirements for the recovery of 16 video frames using 1 captured coded frame.

7

Horse video sequencePorsche video sequenceFrame 8Frame 24OriginalFC7-10MFC7-10M+MMLEFrame 8Frame 24PSNR: 32.66 SSIM: 0.8788PSNR: 32.42SSIM: 0.8755PSNR: 30.29SSIM: 0.9723PSNR: 31.32SSIM: 0.9733PSNR: 32.76SSIM: 0.8811PSNR: 32.58SSIM: 0.8764PSNR: 30.91SSIM: 0.9750PSNR: 31.47SSIM: 0.9732GMM-1GMM-1+MMLEPSNR: 30.18SSIM: 0.8038PSNR: 30.25SSIM: 0.8072PSNR: 27.66SSIM: 0.9526PSNR: 28.53SSIM: 0.9565PSNR: 31.35SSIM: 0.8399PSNR: 31.45SSIM: 0.8430PSNR: 28.16SSIM: 0.9602PSNR: 29.28SSIM: 0.9629Figure 7: Average PSNR and SSIM over all video sequences for several methods.

Table 1: Average performance for the reconstruction of the ﬁrst 32 frames for 14 video sequences
using several methods. Maximum values are highlighted for each side (left/right) of the table. The
time (at the bottom row) refers to the average time for reconstructing a sequence of 16 frames using a
single captured frame.

Video

Sequence
Electric

Ball
Horse

Bow &
Arrow
Bus

Dogs

City

Crew

Filament

Hammer

Football

Kayak

Porsche

Golf

Basketball

Metric W-10M FC7-10M GMM-4 [42] GMM-1 [41]

Reconstruction Method

PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
PSNR
SSIM
Time

40.97
0.9796
29.08
0.7869
35.59
0.9773
18.92
0.4583
35.64
0.9712
22.28
0.5127
29.74
0.8362
42.02
0.9945
31.11
0.9304
19.84
0.4793
26.49
0.7188
26.17
0.9310
26.77
0.9050
22.35
0.6412
∼ 1s

43.62
0.9882
31.65
0.8586
41.88
0.9885
20.10
0.5316
42.40
0.9889
23.29
0.6279
32.48
0.8771
51.43
0.9974
38.04
0.9666
21.58
0.5642
30.46
0.8128
29.52
0.9640
29.41
0.9401
25.15
0.7687
∼ 10s

40.16
0.9747
29.00
0.7747
39.27
0.9810
19.01
0.4640
38.03
0.9739
22.39
0.5196
29.68
0.8371
47.95
0.9963
34.45
0.9360
20.25
0.5009
27.41
0.7326
26.14
0.9270
28.30
0.9235
22.80
0.6640
∼ 100s

40.27
0.9754
29.20
0.7803
40.06
0.9838
19.20
0.4817
39.29
0.9796
22.55
0.5302
29.89
0.8450
49.33
0.9965
34.99
0.9423
20.46
0.5277
27.66
0.7458
26.37
0.9328
28.58
0.9319
23.00
0.6868
∼ 103s

FC7-10M
+MMLE
43.81
0.9885
31.58
0.8556
42.96
0.9902
20.22
0.5375
43.50
0.9929
23.16
0.6408
33.35
0.8943
55.03
0.9989
38.59
0.9696
21.85
0.5834
30.55
0.8142
30.15
0.9675
29.89
0.9507
25.53
0.7860

GMM-1

+MMLE [41]

41.18
0.9802
29.97
0.8016
41.77
0.9881
19.35
0.4815
42.39
0.9919
22.55
0.5579
30.42
0.8621
52.75
0.9988
36.68
0.9553
20.80
0.5378
28.74
0.7638
27.45
0.9491
29.14
0.9440
23.66
0.7156

∼ 103 − 104s ∼ 103 − 104s

Our FC7-10M and FC7-10M+MMLE yield the highest PSNR and SSIM values for all video se-
quences. Speciﬁcally, the average PSNR improvement of FC7-10M over the GMM-1 [41] is 2.15
dB. When these two methods are used to initialize the MMLE [41] algorithm, the average PSNR
gain of FC7-10M+MMLE over the GMM-1+MMLE [41] is 1.67 dB. Notice also that the FC7-10M
achieves 1.01 dB higher than the combined GMM-1+MMLE. The highest PSNR and SSIM values
are reported in the FC7-10M+MMLE method with 33.58 dB average PSNR over all test sequences.
However, the average reconstruction time for the reconstruction of 16 frames using this method is

8

W-10MFC4-1MFC4-10MFC7-1MFC7-10MGMM-4GMM-1FC7-10M+MMLEGMM-1+MMLEW-10MFC4-1MFC4-10MFC7-1MFC7-10MGMM-4GMM-1FC7-10M+MMLEGMM-1+MMLEAverage PSNRAverage SSIMReconstruction method253527293133.7.9.74.78.82.86Proposed methodsPrevious methodsFigure 8: Qualitative reconstruction performance of video frames between the proposed method
FC7-10M and the previous method GMM-4 [42]. The corresponding PSNR results for all video
frames are shown in Figure 9.

Figure 9: PSNR comparison for all the frames of 3 video sequences between the proposed method
FC7-10M and the previous method GGM-4 [42].

almost two hours while for the second best, the FC7-10M, is about 12 seconds, with average PSNR
32.93 dB. We conclude that, when time is critical, FC7-10M should be the preferred reconstruction
method.
Qualitative results of selected video frames are shown in Figure 6. The proposed MLP architectures,
including the linear regression model, favorably recover motion while the additional hidden layers
emphasize on improving the spatial resolution of the scene. One can clearly observe the sharper edges
and high frequency details produced by the FC7-10M and FC7-10M+MMLE methods compared to
previously proposed algorithms.
Due to the extremely long reconstruction times of previous methods, the results presented in Table 1
and Figure 7 refer to only the ﬁrst 32 frames of each video sequence, as mentioned above. Figure 9
compares the PSNR for all the frames of 3 video sequences using our FC7-10M algorithm and the
fastest previous method GMM-4 [42], while Figure 8 depicts representative snapshots for some of
them. The varying PSNR performance across the frames of a 16 frame block is consistent for both
algorithms and is reminiscent of the reconstruction tendency observed in other video CS papers in
the literature [15, 23, 41, 42].

9

Hammer video sequenceFrame 8Frame 40Frame 72Frame 104Frame 136OriginalFC7-10MPSNR: 39.35SSIM: 0.9733PSNR: 37.70SSIM: 0.9674PSNR: 33.05SSIM: 0.9667PSNR: 36.59SSIM: 0.9712PSNR: 38.66SSIM: 0.9767GMM-4PSNR: 36.44SSIM: 0.9514PSNR: 34.99SSIM: 0.9415PSNR: 31.48SSIM: 0.9427PSNR: 34.33SSIM: 0.9471PSNR: 35.62SSIM: 0.9540FC7-10MGMM-4 PSNR01002003004002628303234363840 Frame numberHorse sequence 05010015020020222426283032 Frame numberPorsche sequence02060100140180262830323436384042  Frame numberHammer sequenceFigure 10: Average PSNR and SSIM over all video sequences for several methods under different
levels of measurement noise.

4.5 Reconstruction Results with Noise

Previously, we evaluated the proposed algorithms assuming noiseless measurements. In this sub-
section, we investigate the performance of the presented deep architectures under the presence of
measurement noise. Speciﬁcally, the measurement model of equation (1) is now modiﬁed to

y = Φx + n,

(6)

where n : Mf × 1 is the additive measurement noise vector.
We employ our best architecture utilizing K = 7 hidden layers and follow two different training
schemes. In the ﬁrst one, the network is trained on the 10×106 samples, as discussed in subsection 4.3
(i.e., the same FC7-10M network as before) while in the second, the network is trained using the
same data pairs {yi, xi} after adding random Gaussian noise to each vector yi. Each vector yi was
corrupted with a level of noise such that signal-to-noise ratio (SNR) is uniformly selected in the
range between 20 − 40 dB giving rise to a set of 10 × 106 noisy samples for training. We denote the
network trained on the noisy dataset as FC7N-10M.
We now compare the performance of the two proposed architectures with the previous methods
GMM-4 and GMM-1 using measurement noise. We did not include experiments with the MMLE
counterparts of the algorithms since, as we observed earlier, the performance improvement is always
related to the starting point of the MMLE algorithm. Figure 10 shows the average performance
comparison for the reconstruction of the ﬁrst 32 frames of each tested video sequence under different
levels of measurement noise while Figure 11 depicts example reconstructed frames.
As we can observe, the network trained on noiseless data (FC7-10M) provides good performance for
low measurement noise (e.g., 40 dB) and reaches similar performance to GMM-1 for more severe
noise levels (e.g., 20 dB). The network trained on noisy data (FC7N-10M), proves more robust to
noise severity achieving better performance than GMM-1 under all tested noise levels.
Despite proving more robust to noise, our algorithms in general recover motion favorably but, for
high noise levels, there is additive noise throughout the reconstructed scene (observe results for 20
dB noise level in Figure 11). Such degradation could be combated by cascading our architecture with
a denoising deep architecture (e.g., [2]) or denoising algorithm to remove the noise artifacts. Ideally,
for a speciﬁc camera system, data would be collected using this system and trained such that the deep
architecture incorporates the noise characteristics of the underlying sensor.

4.6 Run Time

Run time comparisons for several methods are illustrated at the bottom row of Table 1. All previous
approaches are implemented in MATLAB. Our deep learning methods are implemented in Caffe
package [14] and all algorithms were executed by the same machine. We observe that the deep
learning approaches signiﬁcantly outperform the previous approaches in order of several magnitudes.

10

Average PSNRAverage SSIMMeasurement Noise Level253527293133.6.9.85.65.7.75.80Proposed methodsPrevious methodsFC7-10MFC7-10MFC7-10MFC7N-10MFC7N-10MFC7N-10MGMM-4GMM-4GMM-1GMM-1GMM-1GMM-420 dB30 dB40 dBFC7-10MFC7-10MFC7-10MFC7N-10MFC7N-10MFC7N-10MGMM-4GMM-4GMM-4GMM-1GMM-1GMM-1Figure 11: Qualitative reconstruction comparison between our methods and GMM-4 [42], GMM-
1 [41] under different levels of measurement noise. The original frame and corresponding inset are
presented in Figure 6.

Note that a direct comparison between the methods is not trivial due to the different implementations.
Nevertheless, previous methods solve an optimization problem during reconstruction while our MLP
is a feed-forward network that requires only few matrix-vector multiplications.

4.7 Number of Layers and Dataset Size

From Figure 7 we observe that as the number of training samples increase the performance consistently
improves. However, the improvement achieved by increasing the number of layers (from 4 to 7) for
architectures trained on small datasets (e.g., 1M) is not signiﬁcant. This is perhaps expected as one
may argue that in order to achieve higher performance with extra layers (thus, more parameters to
train) more training data would be required. Intuitively, adding hidden layers enables the network to
learn more complex functions. Indeed, reconstruction performance in our 10 million dataset is higher
in FC7-10M than in FC4-10M. Increasing the number of hidden layers further did not help in our
experiments as we did not observe any additional performance improvement.

5 Conclusions

To the best of our knowledge, this work constitutes the ﬁrst deep learning architecture for temporal
video compressive sensing reconstruction. We demonstrated superior performance compared to
existing algorithms while reducing reconstruction time to a few seconds. At the same time, we focused
on the applicability of our framework on existing compressive camera architectures suggesting that
their commercial use could be viable. We believe that this work can be extended in three directions:
1) exploring the performance of variant architectures such as RNNs, 2) investigate the training of
deeper architectures and 3) ﬁnally, examine the reconstruction performance in real video sequences
acquired by a temporal compressive sensing camera.

References
[1] F. Agostinelli, M. R. Anderson, and H. Lee. Adaptive multi-column deep neural networks with application

to robust image denoising. In Adv. Neural Inf. Process. Syst. 26, pages 1493–1501. 2013.

[2] H. C. Burger, C. J. Schuler, and S. Harmeling. Image denoising: Can plain neural networks compete with

BM3D? In Proc. IEEE Conf. Comp. Vision Pattern Recognition, pages 2392–2399, June 2012.

[3] H. Chen, M. S. Asif, A. C. Sankaranarayanan, and A. Veeraraghavan. FPA-CS: Focal plane array-based
compressive imaging in short-wave infrared. In Proc. IEEE Conf. Comp. Vision Pattern Recognition, pages
2358–2366, June 2015.

[4] H. Chen, Z. Weng, Y. Liang, C. Lei, F. Xing, M. Chen, and S. Xie. High speed single-pixel imaging via
time domain compressive sampling. In CLEO: 2014, page JTh2A.132. Optical Society of America, 2014.

11

Frame 8 of Porsche video sequenceFC7-10MFC7N-10MGMM-4GMM-1Measurement noise level30 dBPSNR: 29.82SSIM: 0.9345PSNR: 29.81SSIM: 0.9572PSNR: 27.32SSIM: 0.9341PSNR: 27.56SSIM: 0.938520 dBPSNR: 27.02SSIM: 0.7439PSNR: 27.54SSIM: 0.7830PSNR: 25.67SSIM: 0.7440PSNR: 26.03SSIM: 0.7728[5] Z. Cui, H. Chang, S. Shan, B. Zhong, and X. Chen. Deep network cascade for image super-resolution.
In Computer Vision – ECCV 2014, volume 8693 of Lecture Notes in Computer Science, pages 49–64.
Springer International Publishing, 2014.

[6] C. Dong, C. Loy, K. He, and X. Tang. Image super-resolution using deep convolutional networks. IEEE

Trans. Pattern Anal. Mach. Intell., 38(2):295–307, Feb. 2016.

[7] M. F. Duarte, M. A. Davenport, D. Takhar, J. N. Laska, T. Sun, K. F. Kelly, and R. G. Baraniuk. Single-Pixel

imaging via compressive sampling. IEEE Signal Process. Mag., 25(2):83–91, Mar. 2008.

[8] C. Fernandez-Cull, B. M. Tyrrell, R. D’Onofrio, A. Bolstad, J. Lin, J. W. Little, M. Blackwell, M. Renzi,
and M. Kelly. Smart pixel imaging with computational-imaging arrays. In Proc. SPIE, volume 9070, pages
90703D–90703D–13, 2014.

[9] L. Gao, J. Liang, C. Li, and L. V. Wang. Single-Shot compressed ultrafast photography at one hundred

billion frames per second. Nature, 516:74–77, 2014.

[10] X. Glorot and Y. Bengio. Understanding the difﬁculty of training deep feedforward neural networks. In

Proc. Int. Conf. Artiﬁcial Intelligence and Statistics, 2010.

[11] K. He, X. Zhang, S. Ren, and J. Sun. Deep residual learning for image recognition. CoRR, abs/1512.03385,

2015.

[12] J. Holloway, A. C. Sankaranarayanan, A. Veeraraghavan, and S. Tambe. Flutter shutter video camera for
compressive sensing of videos. In IEEE Int. Conf. Computational Photography, pages 1–9, April 2012.
[13] Y. Huang, W. Wang, and L. Wang. Bidirectional recurrent convolutional networks for multi-frame

super-resolution. In Adv. Neural Inf. Process. Syst. 28, pages 235–243. 2015.

[14] Y. Jia, E. Shelhamer, J. Donahue, S. Karayev, J. Long, R. Girshick, S. Guadarrama, and T. Darrell. Caffe:
Convolutional architecture for fast feature embedding. In Proc. ACM Int. Conf. Multimedia, MM ’14,
pages 675–678, New York, NY, USA, 2014. ACM.

[15] R. Koller, L. Schmid, N. Matsuda, T. Niederberger, L. Spinoulas, O. Cossairt, G. Schuster, and A. K.
Katsaggelos. High spatio-temporal resolution video with compressed sensing. Opt. Express, 23(12):15992–
16007, June 2015.

[16] A. Krizhevsky, I. Sutskever, and G. E. Hinton. Imagenet classiﬁcation with deep convolutional neural

networks. In Adv. Neural Inf. Process. Syst. 25, pages 1097–1105. 2012.

[17] K. Kulkarni, S. Lohit, P. K. Turaga, R. Kerviche, and A. Ashok. ReconNet: Non-iterative reconstruction of

images from compressively sensed random measurements. CoRR, abs/1601.06892, 2016.

[18] Y. LeCun, Y. Bengio, and G. Hinton. Deep learning. Nature, 521(7553):436–444, May 2015. Insight.
[19] Y. LeCun, B. Boser, J. Denker, D. Henderson, R. Howard, W. Hubbard, and L. Jackel. Backpropagation

applied to handwritten zip code recognition. Neural Computation, 1(4):541–551, Dec. 1989.

[20] Y. Lecun, L. Bottou, Y. Bengio, and P. Haffner. Gradient-based learning applied to document recognition.

Proc. IEEE, 86(11):2278–2324, Nov. 1998.

[21] D. Liu, J. Gu, Y. Hitomi, M. Gupta, T. Mitsunaga, and S. K. Nayar. Efﬁcient space-time sampling with
pixel-wise coded exposure for high speed imaging. IEEE Trans. Pattern Anal. Mach. Intell., 99:1, 2013.
[22] D. Liu, J. Gu, Y. Hitomi, M. Gupta, T. Mitsunaga, and S. K. Nayar. Efﬁcient space-time sampling with
pixel-wise coded exposure for high-speed imaging. IEEE Trans. Pattern Anal. Mach. Intell., 36(2):248–260,
Feb 2014.

[23] P. Llull, X. Liao, X. Yuan, J. Yang, D. Kittle, L. Carin, G. Sapiro, and D. J. Brady. Coded aperture

compressive temporal imaging. Opt. Express, 21(9):10526–10545, May 2013.

[24] A. Mousavi, A. B. Patel, and R. G. Baraniuk. A deep learning approach to structured signal recovery.

CoRR, abs/1508.04065, 2015.

[25] V. Nair and G. E. Hinton. Rectiﬁed linear units improve restricted boltzmann machines. In Proc. Int. Conf.

Machine Learning, pages 807–814, 2010.

[26] G. Orchard, J. Zhang, Y. Suo, M. Dao, D. T. Nguyen, S. Chin, C. Posch, T. D. Tran, and R. Etienne-
Cummings. Real time compressive sensing video reconstruction in hardware. IEEE Trans. Emerg. Sel.
Topics Circuits Syst., 2(3):604–615, Sept. 2012.

[27] R. Pascanu, T. Mikolov, and Y. Bengio. On the difﬁculty of training recurrent neural networks. In ICML

(3), volume 28 of JMLR Proceedings, pages 1310–1318. JMLR.org, 2013.

[28] P. O. Pinheiro, R. Collobert, and P. Dollár. Learning to segment object candidates. CoRR, abs/1506.06204,

2015.

[29] D. Reddy, A. Veeraraghavan, and R. Chellappa. P2C2: Programmable pixel compressive camera for high

speed imaging. In Proc. IEEE Conf. Comp. Vision Pattern Recognition, pages 329–336, June 2011.

[30] J. S. Ren, L. Xu, Q. Yan, and W. Sun. Shepard convolutional neural networks. In Adv. Neural Inf. Process.

Syst. 28, pages 901–909. 2015.

[31] D. E. Rumelhart, G. E. Hinton, and R. J. Williams. Neurocomputing: Foundations of research. chapter
Learning Representations by Back-propagating Errors, pages 696–699. MIT Press, Cambridge, MA, USA,
1988.

[32] C. Schuler, H. Burger, S. Harmeling, and B. Scholkopf. A machine learning approach for non-blind image

deconvolution. In Proc. IEEE Conf. Comp. Vision Pattern Recognition, pages 1067–1074, June 2013.

12

[33] L. Spinoulas, K. He, O. Cossairt, and A. Katsaggelos. Video compressive sensing with on-chip pro-
grammable subsampling. In Proc. IEEE Conf. Comp. Vision Pattern Recognition Workshops, pages 49–57,
June 2015.

[34] J. Sun, W. Cao, Z. Xu, and J. Ponce. Learning a convolutional neural network for non-uniform motion blur

removal. In Proc. IEEE Conf. Comp. Vision Pattern Recognition, pages 769–777, June 2015.

[35] D. Tran, L. Bourdev, R. Fergus, L. Torresani, and M. Paluri. Learning spatiotemporal features with 3d

convolutional networks. In IEEE Int. Conf. Computer Vision, pages 4489–4497, Dec 2015.

[36] P. Vincent, H. Larochelle, I. Lajoie, Y. Bengio, and P.-A. Manzagol. Stacked denoising autoencoders:
Learning useful representations in a deep network with a local denoising criterion. J. Mach. Learn. Res.,
11:3371–3408, Dec. 2010.

[37] J. Wang, M. Gupta, and A. C. Sankaranarayanan. Lisens- a scalable architecture for video compressive

sensing. In Proc. IEEE Conf. Comp. Photography, pages 1–9, April 2015.

[38] Z. Wang, A. C. Bovik, H. Sheikh, and E. P. Simoncelli. Image quality assessment: from error visibility to

structural similarity. IEEE Trans. Image Process., 13(4):600–612, April 2004.

[39] J. Xie, L. Xu, and E. Chen. Image denoising and inpainting with deep neural networks. In Adv. Neural Inf.

Process. Syst. 25, pages 341–349. 2012.

[40] L. Xu, J. S. Ren, C. Liu, and J. Jia. Deep convolutional neural network for image deconvolution. In Adv.

Neural Inf. Process. Syst. 27, pages 1790–1798. 2014.

[41] J. Yang, X. Liao, X. Yuan, P. Llull, D. J. Brady, G. Sapiro, and L. Carin. Compressive sensing by learning
a gaussian mixture model from measurements. IEEE Trans. Image Processing, 24(1):106–119, Jan. 2015.
[42] J. Yang, X. Yuan, X. Liao, P. Llull, D. J. Brady, G. Sapiro, and L. Carin. Video compressive sensing using

gaussian mixture models. IEEE Trans. Image Processing, 23(11):4863–4878, Nov. 2014.

13

