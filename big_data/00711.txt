6
1
0
2

 
r
a

M
2

 

 
 
]

.

G
A
h
t
a
m

[
 
 

1
v
1
1
7
0
0

.

3
0
6
1
:
v
i
X
r
a

Submitted exclusively to the London Mathematical Society
doi:10.1112/0000/000000

Explicit isogenies in quadratic time in any characteristic

Luca De Feo, Cyril Hugounenq, Jérôme Plût, and Éric Schost

Abstract

Consider two elliptic curves E, E ′ deﬁned over the ﬁnite ﬁeld Fq, and suppose that there exists
an isogeny ψ between E and E ′. We propose an algorithm that determines ψ from the knowledge
of E, E ′ and of its degree r, by using the structure of the ℓ-torsion of the curves (where ℓ is a
prime diﬀerent from the characteristic p of the base ﬁeld).

Our approach is inspired by a previous algorithm due to Couveignes, that involved compu-
tations using the p-torsion on the curves. The most reﬁned version of that algorithm, due to
De Feo, has a complexity of ˜O(r2)pO(1) base ﬁeld operations. On the other hand, the cost of
our algorithm is ˜O(r2 + √r log(q)); this makes it an interesting alternative for the medium- and
large-characteristic cases.

1.

Introduction

Isogenies are non-zero morphisms of elliptic curves, that is, non-constant rational maps
preserving the point at inﬁnity. They are also algebraic group morphisms. Isogeny computations
play a central role in the algorithmic theory of elliptic curves. They are notably used to speed
up Schoof’s point counting algorithm [Sch85, Atk88, Elk92, Sch95, Elk98]. They are also
widely applied in cryptography, where they are used to speed up point multiplication [GLV01,
BS11], to perform cryptanalysis [MMT01], and to construct new cryptosystems [Tes06,
CLG09, Sto10, DFJP11, JS14].

The degree of an isogeny is its degree as a rational map. If an isogeny has degree r, we call
it an r-isogeny, and we say that two elliptic curves are r-isogenous if there exists an r-isogeny
relating them. Accordingly, we say that two ﬁeld elements j and j ′ are r-isogenous if there exist
r-isogenous elliptic curves E and E ′ such that j(E) = j and j(E ′) = j ′. The explicit isogeny
problem has many incarnations. In this paper, we are interested in the variant deﬁned below.

Explicit isogeny problem. Given two j-invariants j and j ′, and a positive integer r,
determine if they are r-isogenous. In that case, compute curves E, E ′ with j(E) = j and
j(E ′) = j ′, and the rational fractions deﬁning an r-isogeny ψ : E → E ′.

Thanks to Vélu’s formulas [Vél71], it is enough to know the polynomial h vanishing on the
abscissas of ker ψ to compute the rational fractions deﬁning ψ in optimal time. Thus, we often
say that we have computed ψ whenever we have computed h, and reciprocally.

This paper focuses on the explicit isogeny problem for ordinary elliptic curves over ﬁnite
ﬁelds. A famous theorem by Tate states that two curves are isogenous over a ﬁnite ﬁeld if
and only if they have the same cardinality over that ﬁeld. The explicit isogeny problem stated
here appears naturally in the Schoof-Elkies-Atkin point counting algorithm (SEA). There, E
is the curve of which we want to compute the cardinality, and E ′ is an r-isogenous curve,
with r a prime of size approximately log(#E). For this reason, the explicit isogeny problem

2000 Mathematics Subject Classiﬁcation 11Y40 (primary), 11G20, 14H52 (secondary).
This work was partially supported by the DIGITEO grant 2013-0531D (ARGC) and NSERC.

Page 2 of 16

L. DE FEO, C. HUGOUNENQ, J. PLÛT, É. SCHOST

is customarily solved without prior knowledge of the cardinality of E. We will abide by this
convention here.

A good measure of the computational diﬃculty of the problem is given by the isogeny
degree r. Indeed the output is represented by O(r) base ﬁeld elements, hence an asymptotically
optimal algorithm would solve the problem using O(r) ﬁeld operations. Many algorithms have
been suggested over the years to solve the explicit isogeny problem. Early algorithms were due to
Atkin [Atk91] and Charlap, Coley and Robbins [CCR91]. Elkies’ [Elk92, Elk98, BMSS08]
was the ﬁrst algorithm targeted to ﬁnite ﬁelds (of large enough characteristic). Assuming r is
prime, its complexity is dominated by the computation of the modular polynomial Φr, which is
an object of (binary) size O(r3 log(r)). Later Bröker, Lauter and Sutherland [BLS10] optimized
the modular polynomial computation in the context of the SEA algorithm. Finally Lercier and
Sirvent [LS08, LV16] generalized Elkies’ algorithm to work in any characteristic. Despite these
advances, the overall cost of Elkies’ algorithm and its variants is still at least cubic in r.

Another line of work to solve the explicit isogeny problem was initiated by Cou-
veignes [Cou94, Cou96, Cou00], and later improved by De Feo and Schost [DF11, DFS12].
These algorithms use an interpolation approach combined with ad-hoc constructions for towers
of ﬁnite ﬁelds of characteristic p. Their complexity is quasi-quadratic in r, but exponential in
log(p), hence they are only practical for very small characteristic.

In this paper we present a variant of Couveignes’ algorithm with complexity polynomial in
log(p) and quasi-quadratic in r. Together with the Lercier-Sirvent algorithm, they are the only
polynomial-time isogeny computation algorithms working in any characteristic, hence they are
especially relevant for counting points in medium characteristic (i.e., counting points over Fpn ,
when n ≫ p/ log(p)).
Note that, although Couveignes-type algorithms do not make use of the modular polynomial
Φr, its computation is still necessary in the context of the SEA algorithm. Thus our new
algorithm does not improve the overall complexity of point counting, though it may provide a
speed-up in some cases. It gives, however, an eﬀective algorithm for solving the explicit isogeny
problem, with potential applications in other contexts, e.g., cryptography.

1.1. Notation

Throughout this paper: r is a positive integer, p an odd prime, q a power of p, and Fq is
the ﬁnite ﬁeld with q elements. E is an ordinary elliptic curve over Fq, its group of n-torsion
points is denoted by E[n], its q-Frobenius endomorphism by π. The endomorphism ring of E
is denoted by O, with K = O ⊗ Q the corresponding number ﬁeld, OK is its maximal order,
and dK the discriminant of OK . For a prime ℓ diﬀerent from p and not dividing r, we denote
by E[ℓk] the group of ℓk-torsion points of E, E[ℓ∞] = lim
E[ℓk] the reunion of all E[ℓk], and
−→
E[ℓk] the ℓ-adic Tate module [Sil92, III.7], which is free of rank two over Zℓ.
Tℓ(E) = lim
←−
The factorization of the characteristic polynomial of π in Zℓ is determined by the Kronecker
symbol (dK /ℓ). If (dK /ℓ) = +1 then we also deﬁne λ, µ as the eigenvalues of π in Zℓ and
write h = vℓ(λ − µ), where vℓ is the ℓ-adic valuation.
We measure all computational complexities in terms of operations in Fq; the binary costs
associated to the algorithms presented next are negligible compared to the algebraic costs,
and will be ignored. We use the Landau notation O( ) to express asymptotic complexities,
and the notation ˜O( ) to neglect (poly)logarithmic factors. We let M(n) be a function such
that polynomials in Fq[x] of degree less than n can be multiplied using M(n) operations in
Fq, under the assumptions of [vzGG99, Chapter 8.3]. Using FFT multiplication, one can take
M(n) ∈ O(n log(n) loglog(n)).

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Page 3 of 16

1.2. Couveignes’ algorithm

Couveignes’ isogeny algorithm takes as input two ordinary j-invariants j, j ′ ∈ Fq, and a
positive integer r not divisible by p, and returns, if it exists, an r-isogeny ψ : E → E ′, with
j(E) = j and j(E ′) = j ′. It is based on the observation that the isogeny ψ must put E[pk]
in bijection with E ′[pk], in a way that is compatible with their structure of cyclic groups. It
proceeds in three steps:

(1) Compute generators P, P ′ of E[pk] and E ′[pk] respectively, for k large enough;
(2) Compute the interpolation polynomial L sending x(P ) to x(P ′), and the abscissas of

their scalar multiples accordingly;

(3) Deduce a rational fraction g(x)/h(x) that coincides with L at all points of E[pk], and
verify that it deﬁnes the x-component of an isogeny of degree r. If it does, return it
otherwise replace P ′ with a scalar multiple of itself and go back to Step (2).

For this algorithm to succeed, enough interpolation points are required. Given that the x-
component of ψ is deﬁned by O(r) coeﬃcients, it is necessary that pk ∈ O(r). However, most
of the time, those points are not going to be deﬁned in the base ﬁeld Fq, thus Couveignes’
algorithm must be based on eﬃcient algorithms to construct and compute in towers of
extensions of ﬁnite ﬁelds. Indeed, Couveignes and his successors go at great length in studying
the arithmetic of Artin-Schreier towers [Cou00, DFS12], and the adaptation of the fast
interpolation algorithm to that setting [DF11]. Using these highly specialized constructions,
Steps (1) and (2) are both executed in time ˜O(pk+O(1)) = ˜O(rpO(1)). However the last step
only succeeds for one pair of torsion points P, P ′, in general, thus O(r) trials are expected on
average.

Hence, the overall complexity of Couveignes’ algorithm is ˜O(r2pO(1)), i.e., quadratic in r2,
but exponential in log(p). Although the exponent of p is relatively small, Couveignes algorithm
quickly becomes impractical as p grows.

1.3. Our contributions

In this paper we introduce a variant of Couveignes’ algorithm with the same quadratic

complexity in r, and no exponential dependency in log(p).

The bottom line of our algorithm is elementary: replace E[pk] in the algorithm with E[ℓk],
for some small prime ℓ. However a naive application of this idea fails to yield a quadratic-time
algorithm. Indeed, in the worst case one has ℓ2k ∈ Θ(r), with E[ℓk] ≃ (Z/ℓkZ)2. Hence, two
generators P, Q of E[ℓk] must be mapped onto two generators of E ′[ℓk]. This can be done in
O(ℓ4k) possible ways, with a best possible cost of O(ℓ2k) per trial, thus yielding an algorithm
of complexity O(ℓ6k) = O(r3) at best.

To avoid this pitfall, we carefully study in Section 2 the structure of E[ℓk], and its relationship
with the Frobenius endomorphism π. With that knowledge, we can put some restrictions on
the generators P, Q, as explained in Section 3, thus limiting the number of trials to O(ℓ2k). In
Section 4 we present an interpolation algorithm adapted to the setting of ℓ-adic towers, and
in Section 5 we put all steps together and analyze the full algorithm. Finally in Section 6 we
discuss our implementation and the performance of the algorithm.

1.4. Towers of ﬁnite ﬁelds

The algorithms presented next operate on elements deﬁned in ﬁnite extensions of Fq.
Speciﬁcally, we will work in a tower of ﬁnite ﬁelds Fq = F0 ⊂ F1 ⊂ ··· ⊂ Fn, with ℓ dividing
#F1 − 1, d1 = [F1 : F0] dividing ℓ − 1, and [Fi+1 : Fi] = ℓ for any i > 0. For ℓ = 2, we build
upon the work of Doliskani and Schost [DS15], whereas for general ℓ we use towers of Kummer
extensions in a way similar to [DDS13, §2]. Both constructions represent elements of Fi
as univariate polynomials with coeﬃcients in Fq, thus basic arithmetic operations can be

Page 4 of 16

L. DE FEO, C. HUGOUNENQ, J. PLÛT, É. SCHOST

performed with classic modular polynomial arithmetic. While constructing the tower, we also
enforce special relations between the generators of each level, so that moving elements up and
down the tower, and testing membership, can be done at negligible cost.

We brieﬂy sketch the construction for odd ℓ. We ﬁrst look for a primitive polynomial P1 ∈
Fq[x] of degree equal to [F1 : F0]. There are many probabilistic algorithms to compute P1 in
time polynomial in ℓ and log(q); since their cost does not depend on the height n of the tower,
we neglect it. Then, the image x1 of x in F1 = Fq[x]/P1(x) is an element of multiplicative
order #F1 − 1, and in particular it is not a ℓ-th power. Hence for any i > 1 we deﬁne Fi as
Fq[x]/P1(cid:0)xℓi−1(cid:1), the computation of the polynomials P1(cid:0)xℓi−1(cid:1) incurring no algebraic cost.
Using this representation, elements of Fi can be expressed as elements of a higher level Fi+j ,
and reciprocally, by a simple rearrangement of the coeﬃcients. Another fundamental operation
can be done much more eﬃciently than in generic ﬁnite ﬁelds, as the following generalization
of [DS15, §2.3] shows.

Lemma 1.1. Let F0 ⊂ ··· ⊂ Fn be a Kummer tower as deﬁned above, and let a ∈ Fi for
some 0 6 i 6 n. For any integer j, we can compute the (#Fj )-th power of a using O(ℓi−1M(ℓ))
operations in Fq, after a precomputation independent of a that uses O(ℓM(ℓ) log(q)) operations
in Fq.

Proof. Without loss of generality, we can assume that j < i; otherwise, the output is simply
a itself. Let σ = #Fj, and let d = [Fi : F1] = ℓi−1. Let xi be the image of x in Fi = Fq[x]/Pi(x),
so that xd

i = x1.

The ﬁrst step, independently of a, is to compute y = xσ

see that y is given by xu mod #F1
in Fq, and we keep this element as a monomial of F1[xi].

i . We compute xu mod #F1
xr

1

i . Writing σ = ud + r, with r < d, we
using O(ℓM(ℓ) log(q)) operations

1

i

it as a = a0 + a1xi + ··· + ad−1xd−1
the coeﬃcients of a.

By assumption, a is represented as a polynomial in xi of degree less than [Fi : F0]. We rewrite
, with ai ∈ F1. This is done by a simple rearrangement of
Finally, we compute a(y) by a Horner scheme. All powers yk we need are themselves
monomials in F1[xi], each computed from the previous one using O(M(ℓ)) operations in Fq, for
a total of O(ℓi−1M(ℓ)). Finally the monomials akyk are combined together to form a polynomial
in (x1, xi) of degree less than (d1, d), and then brought to a canonical form in Fi via another
rearrangement of coeﬃcients.

Summarizing, the following computations can be performed in a Kummer tower at the

indicated asymptotic costs, all expressed in terms of operations in Fq.

– basic arithmetic operations (addition, multiplication) in Fi, using O(M(ℓi)) operations;
– inversion in Fi using O(M(ℓi) log(ℓi)) operations (when ℓ = 2, a factor of i can be saved

here [DS15], but we will disregard this optimization for simplicity.)

– mapping elements from Fi−1 to Fi and vice versa at no arithmetic cost;
– multiplication and Euclidean division of polynomials of degree at most d in Fi[x] using

O(M(dℓi)) operations, via Kronecker’s substitution, as already done in e.g. [vzGS92];

– computing a (#Fj )-th power in Fi using O(ℓi−1M(ℓ)) operations, after a precomputation

that uses O(ℓM(ℓ) log(q)) operations.

For one fundamental operation, we only have an eﬃcient algorithm in the case ℓ = 2, hence

we introduce the following notation:

– R(i) is a bound on the expected cost of ﬁnding a root of a polynomial of degree ℓ in Fi[x].
For ℓ = 2, Doliskani and Schost show that R(i) = O(M(ℓi) log(ℓiq)). For general ℓ, we
have R(i) = O(ℓiM(ℓi+1) log(ℓ) log(ℓq)) using the variant of the Cantor-Zassenhaus algorithm

described in [vzGG99, Chapter 14.5], or R(i) = O(cid:0)(ℓi(ω+1)/2 + M(ℓi+1 log(q)))i log(ℓ)(cid:1) us-

ing [KS97]. Here, ω is such that matrix multiplication in size m over any ring can be done

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Page 5 of 16

in O(mω) base ring operations (so we can take ω = 2.38 using the Coppersmith-Winograd
algorithm). In any case, R(i) is between linear and quadratic in the degree ℓi.

2. The Frobenius and the volcano

In this section we explore some fundamental properties of ordinary elliptic curves over ﬁnite
ﬁelds: the structure of their isogeny classes, its relationship with the rational ℓ∞-torsion points,
and with the Frobenius endomorphism π.

2.1.

Isogeny volcanoes

For an extensive introduction to isogeny volcanoes we address the reader to [Sut13]. We
recall here, without their proof, two results about ℓ-isogenies between ordinary elliptic curves.

Proposition 2.1 [Koh96, Proposition 21]. Let φ : E → E ′ be an ℓ-isogeny between
ordinary elliptic curves and O,O′ be their endomorphism rings. Then one of the three following
cases is true:

(i) [O′ : O] = ℓ, in which case we call φ ascending;
(ii) [O : O′] = ℓ, in which case we call φ descending;
(iii) O′ = O, in which case we call φ horizontal.
Proposition 2.2 [Koh96, Proposition 23]; [Sut13, Lemma 6]. Let E be an ordinary

elliptic curve with endomorphism ring O.

ascending ℓ-isogenies).

(i) If O is ℓ-maximal then there are (dK/ℓ) + 1 horizontal ℓ-isogenies from E (and no
(ii) If O is not ℓ-maximal then there are no horizontal ℓ-isogenies from E, and one ascending

ℓ-isogeny.

A volcano of ℓ-isogenies is a connected component of the graph of rational ℓ-isogenies between
curves deﬁned on Fq. The crater is the subgraph corresponding to curves having an ℓ-maximal
endomorphism ring. The shape of the crater is given by the Kronecker symbol (dK/ℓ), as per
Proposition 2.2. For any k > 0, a ℓk-isogeny is horizontal if it is the composite of k horizontal
ℓ-isogenies. The depth of a curve is its distance from the crater. It is also the ℓ-adic valuation
of the conductor of O = End(E).

•

•

•
•

•

•

•

•

•

•

•

•
•

•

•
•

•

•
•

•

“Stromboli”: (dK /ℓ) = −1

“Vesuvius”: (dK /ℓ) = 0

“Etna”: (dK /ℓ) = +1

Figure 1. The three shapes of volcanoes of 2-isogenies

2.2. The ℓ-adic Frobenius

In the rest of this paper we consider only a volcano with a cyclic crater (i.e. we assume
(dK /ℓ) = +1), so that ℓ is an Elkies prime for these curves. This implies that the Frobenius
automorphism on Tℓ(E), which we write π|Tℓ(E), has two distinct eigenvalues λ 6= µ. The
depth of the volcano of Fq-rational ℓ-isogenies is h = vℓ(λ − µ).

Page 6 of 16

L. DE FEO, C. HUGOUNENQ, J. PLÛT, É. SCHOST

Proposition 2.3. Let E be an ordinary elliptic curve with Frobenius endomorphism π.
Assume that the characteristic polynomial of π has two distinct roots λ, µ in Zℓ, so that the
ℓ-isogeny volcano has a cyclic crater. Then there exists a unique a ∈ J0, ℓh − 1K such that
π|Tℓ(E) is conjugate, over Zℓ, to the matrix(cid:0) λ a
0 µ(cid:1). Moreover a = 0 if E lies on the crater, and
else h − vℓ(a) is the depth of E in the volcano.
Proof. Since the characteristic polynomial of π splits over Zℓ, the matrix of π|Tℓ(E) is
trigonalizable. Conjugating the matrix (cid:0) λ a
0 1 ) replaces a by a + b(λ − µ), so that a is
well-deﬁned modulo ℓh. Finally, by Tate’s theorem [Sil92, Isogeny theorem 7.7 (a)], O ⊗ Zℓ is
isomorphic to the order in Qℓ[πℓ] of matrices with integer coeﬃcients, which is generated by
the identity and ℓ− min(h,vℓ(a))(πℓ − λ).

0 µ(cid:1) by ( 1 b

We now study the action of ℓ-isogenies on the ℓ-adic Frobenius by showing the link between

two related notions of diagonalization.

Definition 2.4 (Horizontal and diagonal bases). Let E be a curve lying on the crater.
We call a basis of E[ℓk] diagonal if π is diagonal in it; we call it horizontal if both basis
points generate the kernel of horizontal ℓk-isogenies. Accordingly, we also call diagonal (resp.
horizontal) the generators of a diagonal (resp. horizontal) basis.

Proposition 2.5. Let E be a curve lying on the crater and P be a point of E[ℓk]. Then
ℓhP is horizontal if, and only if, P is an eigenvector for π. If π(P ) = λP then we say that
ℓhP has direction λ.

Let R be a point of E of order ℓk, let φ be the isogeny with kernel hRi, and let E ′ be its
image. The subgroup hRi deﬁnes a point in the projective space of E[ℓk], which is a projective
line over Z/ℓkZ. There exists a canonical bijection [Ser77, II.1.1] between this projective
line and the set of lattices of index ℓk in the Zℓ-module Tℓ(E): it maps a line hRi to the
lattice ΛR = hRi + ℓkTℓ(E). This lattice is also the preimage by φ of the lattice ℓkTℓ(E ′).
Fix a basis (P, Q) of E[ℓk], let Π be the matrix of π in this basis, and let R = xP + yQ. The
lattice ΛR is generated by the columns of the matrix LR =(cid:16) ℓk 0 x
0 ℓk y(cid:17). The Hermite normal
ℓm (cid:17), where we write y = ℓmy′ with ℓ ∤ y′, and the columns of MR
form of LR is MR =(cid:16) ℓk−m x/y ′

also generate the lattice ΛR. We check that MR has determinant ℓk. Since ΛR = φ−1
there exists a basis of Tℓ(E ′) in which φR has matrix ℓkM −1
the matrix of π|Tℓ(E ′) is M −1

R (ℓkTℓ(E ′)),
R . Therefore, in that basis of Tℓ(E ′),

0

R · Π · MR.

Proof of Proposition 2.5. Fix a basis (R, S) of E[ℓk] that diagonalizes π. We can write
P = xR + yS; without loss of generality we may assume y = 1. Let φ be the isogeny determined

(cid:17). This matrix is
by ℓhP , and let E ′ be its image. Then π|Tℓ(E ′) has matrix (cid:16) λ ℓh−kx(λ−µ)
diagonalizable only if vℓ(x) > k − h. On the other hand, we can compute (π − µ)P = x(λ −
µ)R, so that P is an eigenvector on the same condition vℓ(x) > k − h.

µ

0

While horizontal bases are our main interest, diagonal bases are easier to compute in practice.
Algorithms computing both kind of bases are given in Section 3. The main tool for this is the
next proposition: given a horizontal point of order ℓk, it allows us to compute a horizontal
point of order ℓk+1.

Proposition 2.6. Let ψ : E → E ′ be a horizontal ℓ-isogeny with direction λ. For any
point Q ∈ E[ℓ∞], if ℓQ is horizontal with direction µ, then ψ(Q) is horizontal with direction µ.

(Since Q has direction µ, its image ψ(Q) has the same multiplicative order as Q).

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Page 7 of 16

horizontal with direction µ, Q′ is also horizontal.

Proof. Let Q′ = ψ(Q) and bψ be the isogeny dual to ψ. Since both bψ and bψ(Q′) = ℓQ are
Proposition 2.7. Let ψ : E → E ′ be an isogeny of degree r prime to ℓ.
(i) The curves E and E ′ have the same depth in their ℓ-isogeny volcanoes.
(ii) For any point P ∈ E[ℓk], the isogenies with kernel hPi and hψ(P )i have the same type
(iii) If P ∈ E[ℓ] and P ′ ∈ E ′[ℓ] are both ascending, or both horizontal with the same

(ascending, descending, or horizontal with the same direction).

direction, then E/P and E ′/P ′ are again r-isogenous.

Proof. Points (i) and (ii) are consequences of Proposition 2.3 and of the fact that ψ, being
rational and of degree prime to ℓ, induces an isomorphism between the Tate modules of E
and E ′, commuting to the Frobenius endomorphisms. For point (iii), we just note that since
there exists a unique point of order ℓ either ascending or horizontal with a given direction, we
must have P ′ = ψ(P ).

2.3. Galois classes in the ℓ-torsion

Here we assume that E has a ℓ-maximal endomorphism ring. The following proposition
summarizes the properties of E[ℓk] that we will need for our main interpolation algorithm. If
ℓ is odd, let α = vℓ(λℓ−1 − 1) and β = vℓ(µℓ−1 − 1); if ℓ = 2, let α = v2(λ2 − 1) − 1 and β =
v2(µ2 − 1) − 1, and assume without loss of generality that α > β. Since λ 6≡ µ (mod ℓh+1), it
is impossible that λ ≡ µ ≡ 1 (mod h), so that one at least of the two valuations α, β is 6 h,
and therefore β 6 h.

Proposition 2.8. For any k, let dk be the degree of the smallest ﬁeld extension F/Fq such

that E[ℓk] ⊂ E(F ). Then:

(i) The order of q in (Z/ℓZ)× divides d1, and d1 divides (ℓ − 1).
(ii) If ℓ is odd then for all k > 1, dk = lcm(d1, ℓk−β).
(iii) If ℓ = 2 then d2 ∈ {1, 2} and, for all k > 2, dk = lcm(d2, ℓk−β).
(iv) Let [F : Fq] = d1ℓn, the group E[ℓ∞](F ) is isomorphic to (Z/ℓn+αZ) × (Z/ℓn+βZ).
(v) The group E[ℓk] contains at most k · ℓk+β Galois conjugacy classes over F1 = Fqd1 .
Proof. The degree dk is exactly the order of the matrix π|E[ℓk]. It is therefore the least
common multiple of the multiplicative orders of λ, µ modulo ℓk. This proves (i) using the fact
that λ · µ = q.
For points (ii)–(v) we may assume that d1 = 1. Then, for any N , vℓ(λ2N − 1) = α + vℓ(2N ).
Let (P, Q) be a diagonal basis of E[ℓk]. The point (πN − 1)(xP + yQ) = (λN − 1)xP +
(µN − 1)yQ is zero iﬀ vℓ(x) + α + vℓ(N ) > k and vℓ(y) + β + vℓ(N ) > k. This shows (iv).
The largest Galois classes are those for which vℓ(y) = 0 and their size is ℓk−β, proving (ii)
and (iii). Moreover, for any i 6 k − β the points in an orbit of size 6 ℓi are those for
which vℓ(x) > k − α − i and vℓ(y) > k − β − i; there are at most ℓmin(α+i,k)+min(β+i,k) such
points, and therefore ℓmin(α+i,k)+min(β,k−i) 6 ℓk−i+β corresponding classes. Summing this over
all i proves (v).

3. Computing the action of the Frobenius endomorphism

We continue here our study on the action of the Frobenius π on E[ℓk]. Given an elliptic
curve E with ℓ-maximal endomorphism ring, we explicitly compute diagonal and horizontal

Page 8 of 16

L. DE FEO, C. HUGOUNENQ, J. PLÛT, É. SCHOST

bases of E[ℓk] as deﬁned in the previous section. We will use the latter basis of E[ℓk] in
Section 5.2, to put restrictions on the interpolation problem of our algorithm.

We suppose that k > h. By Proposition 2.8, there exists a Kummer tower F0 ⊂ ··· ⊂ Fk−β
such that all the points of E[ℓk] are rational over Fk−β . The algorithms presented next assume
that the tower has already been computed.

3.1. Computation of a diagonal basis

In Algorithm 1 below, we describe how to compute eigenvalues of the Frobenius modℓk
and corresponding eigenvectors in the ℓk-torsion subgroup. We write Q ← divide(ℓ, P ) for the
computation of a preimage of P by multiplication by ℓ.

Algorithm 1 Computing a diagonal basis of E[ℓk]
Input: E: an ordinary, ℓ-maximal elliptic curve; k: an integer.
Output: (Pk, Qk): a basis of E[ℓk]; λ, µ ∈ Z/ℓkZ such that π(Pk) = λPk, π(Qk) = µQk.
1: Compute (P1, Q1), a basis of E[ℓ]
2: h := 1, u := 1
3: for i = 1 to k − 1 do
4:

cℓi µ+dℓi(cid:17) (mod ℓi+1) with a, b, c, d ∈ Z/ℓZ

bℓi

5:

P ′ ← divide(ℓ, Pi); Q′ ← divide(ℓ, Qi).
compute π|(P ′, Q′) =(cid:16) λ+aℓi
if λ 6= µ then u ← (λ − µ)/ℓh endif
(λ, µ) ← (λ + aℓi, µ + dℓi)
(b′, c′) ← (−b/u, c/u) (mod ℓ)
(Pi+1, Qi+1) ← (P ′ + ℓi−1−hb′Q′, Q′ + ℓi−1−hc′P ′)
if λ = µ then h ← h + 1 endif

6:
7:
8:
9:
10:
11: end for
12: return (Pk, Qk, λ, µ)

Proposition 3.1. Algorithm 1 computes a diagonal basis of E[ℓk] using an expected

O(R(k − β) + ℓ2M(ℓk−β) + ℓM(ℓ2) log(ℓ) log(ℓq)) operations in Fq.

Proof. A straightforward calculation shows that after each loop the basis (Pi+1, Qi+1) is
diagonal. To bootstrap the algorithm, we need to compute a basis of E[ℓ] over the ﬁeld F1. We
do this by factoring the ℓ-division polynomial at a cost of O(ℓM(ℓ2) log(ℓ) log(ℓq)) operations
using the Cantor-Zassenhaus algorithm.

Once E[ℓ] has been computed, we can factor the multiplication-by-ℓ map as a product of
two ℓ-isogenies. Then, for any P deﬁned in E(Fi−β ), the computation of divide(ℓ, P ) at Step 4
costs O(R(i − β + 1)) operations.
Evaluating π(P ′) in Step 5 has a cost of O(ℓi−β M(ℓ)). Writing π(P ′) as a linear combina-
tion αP ′ + βQ′ needs at most ℓ2 point additions, with a cost of ℓ2M(ℓi−β+1); all other steps are
negligible. Since the cost of each loop grows geometrically, the last loop dominates all others,
and gives the stated complexity.

3.2. Computation of a horizontal basis

Using the previous algorithm we can compute a diagonal basis of E[ℓh+1]. By Proposition 2.5,
this gives us a horizontal basis of E[ℓ]. Thanks to Proposition 2.6, we can use this information to
improve horizontal points of E[ℓi] into horizontal points of E[ℓi+1], as illustrated in Algorithm 2.

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Page 9 of 16

Algorithm 2 Computing a horizontal point of order ℓk
Input: (P0, Q0): a diagonal basis of E[ℓh+1]; k: an integer.
Output: R: a horizontal point of E[ℓk] with direction λ.
1: for i = 1 to k − 1 do
2:
3: Qi ← φi(Qi−1)
4:
5: Write π(P ′) = λP ′ + bQi for b ∈ Z/ℓZ and let Pi ← P ′ − (b/µ)Qi.
6: end for
7: return R = bφ1 ◦ . . . ◦ bφk−1(divide(ℓk−(h+1), Pk−1)).

φi ← isogeny with kernel (cid:10)ℓhPi−1(cid:11)
P ′ ← divide(ℓ, φi(Pi−1)).

Proposition 3.2. Algorithm 2 is correct and computes its output using an expected

O(R(k − β) + kR(h − β + 1) + kℓ2M(ℓh−β+1)) operations in Fq.

Proof. We check that at step i of the loop, the points (Pi, Qi) form a diagonal basis
of Ei[ℓh+1], and φi has direction λ. The fact that R is horizontal is then a consequence of
Proposition 2.6. The two most expensive operations in the loop are Steps 4 and 5, costing
respectively O(R(h − β + 1)) and O(ℓ2M(ℓh−β+1)), as discussed in the proof of Proposition 3.1.
They are repeated k times. Finally, Step 7 is dominated by the last divide operation, which
costs O(R(k − β)).

One application of Algorithm 1 (with input k ← h + 1) and two applications of Algorithm 2
allow us to compute a horizontal basis of E[ℓk]. This could be done directly with Algorithm 1
instead, but that would require computing in an extension Fk+h−β.

4.

Interpolation step

After constructing bases (P, Q) of E[ℓk] and (P ′, Q′) of E ′[ℓk] using the algorithms of the
previous section, our algorithm computes the polynomial with coeﬃcients in Fq mapping x(P )
to x(P ′), x(Q) to x(Q′), and the other abscissas accordingly. In this section we give an eﬃcient
algorithm for this speciﬁc interpolation problem. The algorithm appeared in [DF11] in the
context of the Artin-Schreier extensions used in Couveignes’ isogeny algorithm; it uses original
ideas from [EM03]. We recall this algorithm here, and adapt the complexity analysis to our
setting of Kummer extensions.

We start by tackling a simpler problem. We suppose we have constructed a tower of Kummer
extensions Fq = F0 ⊂ F1 ⊂ ··· ⊂ Fn, with [F1 : F0] | (ℓ − 1), and [Fi+1 : Fi] = ℓ for any i > 0.
Given two elements v, w ∈ Fn \ Fn−1, we want to compute polynomials T and L such that:

– T ∈ Fq[x] is the minimal polynomial of v, of degree d = deg T < ℓn;
– L is in Fq[x], of degree less than d, and L(v) = w.

form of the Kummer tower, and the Frobenius algorithm given in Lemma 1.1.

Using a fast interpolation algorithm [vzGG99, Chapter 10.2], the polynomials T and L could

Observe that, since v, w /∈ Fn−1, we necessarily have vℓ(d) = n − 1, so that ℓn−1 6 d < ℓn.
be computed in O(cid:0)nM(ℓ2n) log(ℓ)(cid:1) operations in Fq. We can do much better by exploiting the
Following [DF11], we ﬁrst compute T , starting from T (0) = x − v. We let σi be the map that
takes all the coeﬃcients of a polynomial in Fn−i[x] to the power #Fn−i−1. For i = 0, . . . , n − 2,
suppose we know a polynomial T (i) of degree ℓi in Fn−i[x]. Then, compute the polynomials
T (i,j) given by

T (i,j) = σj

i(cid:0)T (i)(cid:1)

for 0 ≤ j ≤ ℓ − 1,

Page 10 of 16

L. DE FEO, C. HUGOUNENQ, J. PLÛT, É. SCHOST

and deﬁne

T (i+1) =

ℓ−1Yj=0

T (i,j);

one easily sees that T (i+1) is the minimal polynomial of v over Fn−i+1. For the last step
i = n − 1, we proceed in a similar way by deﬁning
Yj=0

T = T (n) =

d/ℓn−1

T (n−1,j).

Lemma 4.1. The cost of computing T is bounded by O(nM(ℓn+1) log(ℓ)) operations in Fq.

Proof. At each step i, from the knowledge of T (i) we compute all T (i,j) using Lemma 1.1.
The cost for a single polynomial T (i,j) is of O(ℓiℓn−i−1M(ℓ)) operations, i.e. O(ℓnM(ℓ)) for all
O(ℓ) of them. From the T (i,j)’s we compute T (i+1) using a subproduct tree, as in [vzGG99,
Lemma 10.4]. The result has degree O(ℓi+1) and coeﬃcients in Fn−i, thus the overall cost is
O(M(ℓn+1) log(ℓ)). After T (i+1) is computed this way, we can convert its coeﬃcients to Fn−i−1
at no algebraic cost. Summing over all i, we obtain the stated complexity.

We can ﬁnally proceed with the interpolation itself. First, compute w′ = w/T ′(v) and let
L(0) = w′. Next, for i = 0, . . . , n − 2, suppose we know a polynomial L(i) in Fn−i[x] of degree
less than ℓi. We compute the polynomials L(i,j) given by

for 0 ≤ j ≤ ℓ − 1, and

L(i+1) =

ℓ−1Xj=0

L(i,j) = σj

i(cid:0)L(i)(cid:1),
L(i,j) T (i+1)
T (i,j) .

The last step i = n − 1 is done analogously. As shown in [DF11], L(n) is the polynomial L we
are looking for.

Proposition 4.2. Given elements v, w ∈ Fn \ Fn−1, the cost of computing the minimal
polynomial T ∈ Fq[x] of v, and the interpolating polynomial L ∈ Fq[x] such that L(v) = w, is
of O(nM(ℓn+1) log(ℓ)) operations in Fq.

Proof. After the polynomials T (i) have been computed, we need to compute T ′(v). This
is done by means of successive Euclidean remainders, since T ′(v) = (((T ′ mod T (1)) mod
T (2))··· mod T (n)). At stage i, we have to compute the Euclidean division of a polynomial
of degree O(ℓn−i+1) by one of degree O(ℓn−i) in Fi[x]. Using the complexities from Section 1.4
we deduce that each division can be done in time O(M(ℓn+1)), for a total of O(nM(ℓn+1))
operations. Then, computing w′ = w/T ′(v) takes O(M(ℓn) log(ℓn)) operations.

Finally, at each step i, the polynomials L(i,j) are computed at a cost of O(ℓnM(ℓ)), as in
the proof of Lemma 4.1. The computation of L(i+1) uses the same subproduct tree as for the
computation of T (i), requiring O(log ℓ) additions, multiplications and divisions of polynomials
of degree O(ℓi+1) with coeﬃcients in Fn−i, for a total of O(M(ℓn+1) log(ℓ)). Summing over all
i, the complexity statement follows readily.

We ﬁnally go to the general problem of interpolating a polynomial in Fq[x] at many points

of Fn.

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Page 11 of 16

Proposition 4.3. Let (v1, w1), . . . , (vs, ws) be pairs of elements of Fn, let ti be the degree

of the minimal polynomial of vi, and let t =P ti. The polynomials
– T ∈ Fq[x] of degree t such that T (vi) = 0 for all i, and
– L ∈ Fq[x] of degree less than t such that L(vi) = wi for all i
can be computed using O(cid:0)M(t) log(s) + nM(ℓ2t) log(ℓ)(cid:1) operations in Fq.
Proof. The polynomial T is simply the product of all the minimal polynomials Ti. Let
ni = vℓ(ti), so that vi, wi ∈ Fni+1 \ Fni, and ℓni 6 ti < ℓni+1. We convert (vi, wi) to a pair
of elements of Fni+1 at no algebraic cost, then we compute Ti as explained previously at a
cost of O(nM(ℓni+2) log(ℓ)) operations. Bounding ℓni by ti, summing over all i, and using the
superlinearity of M, we obtain a total cost of O(nM(ℓ2t) log(ℓ)) operations. Simultaneously, we
compute all the polynomials Li such that Li(vi) = wi, at the same cost.

Then we arrange the Ti’s into a binary subproduct tree and multiply them together. A
balanced binary tree, though not necessarily optimal, has a depth of O(log(s)), and requires
O(M(t)) operations per level. Thus we can bound the cost of computing T by O(M(t) log(s)).
Finally, using the same subproduct tree structure, we apply the Chinese remainder algorithm

of [vzGG99, Chapter 10] to compute the polynomial L at the same cost O(M(t) log(s)).

5. The complete algorithm

We ﬁnally come to the description of the full algorithm. As stated in the introduction, we
are given two j-invariants, deﬁning two elliptic curves E and E ′, and an integer r, and we want
to compute an isogeny ψ : E → E ′ of degree r.
Since the algorithms of Section 3 only apply to curves on top of volcanoes with cyclic crater,
we ﬁrst need to determine a small Elkies prime ℓ for E and E ′, and then reduce to an explicit
isogeny problem on the crater of the ℓ-volcanoes. These steps are discussed and analyzed next.

5.1. Finding a suitable ℓ-volcano

Our algorithm uses an Elkies prime ℓ. According to Chebotarev’s density theorem, the density
of primes ℓ such that (dK/ℓ) = +1 is asymptotically 1/2, so that we need only try a O(1)
number of primes ℓ. Since dK is not assumed to be known yet, we need to be able to compute
the height h of the volcano, the shape of its crater, as well as the shortest ℓ-isogeny chain
from E to the crater.

The algorithms of Fouquet and Morain [FM02] compute the height h and ﬁnd a curve
Emax on the crater at the cost of O(ℓh2) factorizations of the ℓ-th modular polynomial Φℓ. The
polynomial Φℓ is computed using ˜O(ℓ3 log(ℓ)) binary operations and O(M(ℓ2) log(q)) operations
in Fq, then each factorization costs an expected O(M(ℓ) log(ℓ) log(ℓq)) operations using the
Cantor-Zassenhaus algorithm. More eﬃcient methods for special instances of volcanoes are
presented in [MMRV05] and in [IJ10], but we do not discuss them.

Once we know a curve on the crater, we still have to determine the shape of the crater. Since
the height h of the volcano is known, using Algorithm 1 we can compute a matrix of π|E[ℓh+1].
If this matrix has two distinct eigenvalues then the crater is cyclic, otherwise it is not.
By Proposition 2.7, the depth of E and E ′ below their respective craters is the same.
Using the methods of Section 5.1, we can compute the shortest path of ℓ-isogenies α : E →
Emax, α′ : E ′ → E ′
max linking the curves E, E ′ to the craters. By Proposition 2.7 (iii), the
curves Emax and E ′
max are again r-isogenous; we can use our algorithm to compute such an
isogeny ψmax. Then ψ = (α′)−1 ◦ ψmax ◦ α is the required r-isogeny; its kernel can be computed
in O(hM(r) log(r)) operations by evaluating α−1 on the kernel of ψmax via a sequence of
resultants.

Page 12 of 16

L. DE FEO, C. HUGOUNENQ, J. PLÛT, É. SCHOST

5.2.

Interpolating the isogeny

We now assume that both curves E, E ′ have ℓ-maximal endomorphism rings. We ﬁx bases
of E[ℓk], E ′[ℓk] and write π, π′ for the matrices of the Frobenius. Since ψ is rational, its matrix
satisﬁes the relation π′ · ψ = ψ · π in Z2×2
If diagonal bases of E[ℓk], E ′[ℓk] are used, then, since π is a cyclic endomorphism of Z2
ℓ ,
this condition seems to ensure that ψ is a diagonal matrix; however, Z/ℓkZ is not an integral
domain and π is congruent, modulo ℓh, to the scalar matrix λ, so we can only say that ψ
(mod ℓk−h) is diagonal. If on the other hand we choose horizontal bases of E[ℓk], E ′[ℓk] then,
by Proposition 2.7 (ii), we know that ψ is a diagonal matrix.

and hence in (Z/ℓkZ)2×2.

ℓ

We then enumerate all the ℓ2k−2 invertible diagonal matrices; for each matrix M , we
interpolate the action of M on E[ℓk] as a rational fraction, and verify that it is an r-isogeny.
The successful interpolation will be our explicit isogeny ψ. Precisely, we interpolate using the
abscissas of non-zero points of E[ℓk]; there are (ℓ2k − 1)/2 distinct such abscissas (or 22k−1 + 1
when ℓ = 2). The isogeny ψ acts on abscissas as a rational fraction of degrees (r, r − 1), which
is thus deﬁned by 2r coeﬃcients; knowing this rational function allows us to ﬁnd the kernel
of ψ, and recover ψ itself using Vélu’s formulas in linear time. For this method to work, we
therefore select the smallest k > h + 1 such that ℓ2k − 1 > 4r.
as follows:

Summarizing, our algorithm for two curves having ℓ-maximal endomorphism ring proceeds

(1) Use Algorithms 1 and 2 to compute horizontal bases (P, Q) of E[ℓk] and (P ′, Q′) of

E ′[ℓk];

(i) compute

the

interpolation polynomial La,b

0

Section 4;

(2) Compute the polynomial T vanishing on the abscissas of hP, Qi using the method of
(3) For each invertible diagonal matrix (cid:16)a 0
x(a u P ′ + b v Q′) for all u, v ∈ Z/ℓkZ;
rational fraction Fa,b ≡ La,b (mod T ) of degrees (r, r − 1);
(iii) If Fa,b deﬁnes an isogeny of degree r, return it and stop.

(ii) Use the Cauchy interpolation algorithm of [vzGG99, Chapter 5.8] to compute a

b(cid:17) in (Z/ℓkZ)2×2:

such that La,b(x(uP + vQ)) =

Theorem.

It is possible to solve the “Explicit Isogeny Problem” using an expected

operations in Fq.

O(cid:0)rM(r) log2(r) + M(cid:0)√r log(q)(cid:1) log(r)(cid:1)

Proof. We expect to ﬁnd a small Elkies prime ℓ after O(1) trials. Also note that the height
h of the volcano of ℓ-isogenies is small with very high probability; in case it is not, we can
simply discard ℓ and choose another one. Hence, we treat both h and ℓ as constants for the
purpose of this theorem.

First we reduce the problem to one on ℓ-maximal curves. This costs O(log(q) + M(r) log(r)),
as outlined in Section 5.1. Then we pick k with ℓ2k ∈ O(r), and we apply the algorithm outlined
above. By Proposition 2.8, there is a β < h such that E[ℓk] is contained in E(Fn) with n =
k − β. We thus construct the Kummer tower F0 ⊂ ··· ⊂ Fn, and we do the precomputations
required by Lemma 1.1 at a cost of O(log(r) log(q)).
Step (1) costs O(R(k − β)) according to Proposition 3.2. Using the estimates of Section 1.4,
we see that this cost is bounded by O(M(√r) log(rq)) if ℓ = 2, or by O(r + M(√r log(q)) log(r))
otherwise.

By Proposition 2.8 (v), there are at most O(k · ℓk+β) Galois classes in E[ℓk]. In order to
apply the algorithms of Section 4, we need to compute a representative for each class. Each
representative is computed from the basis (P, Q) using point multiplication by two scalars

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Page 13 of 16

 1024

 256

s
d
n
o
c
e
s

 64

 16

 4

 1

 0.25

 0.0625

diagonalization
interpolation

 2

 4

 8

 16

 32

 64  128  256  512  1024

r

Figure 2. Comparison of diagonalization and interpolation phases, for a curves deﬁned over

F101, and increasing r. Plot in logarithmic scale.

6 ℓk in the ﬁeld Fn, which costs O(M(ℓn) log(ℓk)) operations. We thus have a total cost of
O(kM(ℓ2k) log(ℓk)) ⊂ O(M(r) log2(r)) to compute all such representatives.
Then, using proposition 4.3, where the total degree is t = (ℓ2k − 1)/2 ∈ O(r), and the number
of interpolation points is s ∈ O(k · ℓk+β), we can compute the polynomials T and La,b at a cost
of O(M(r) log(r)). The cost of computing Fa,b, and identifying the isogeny is dominated by that
of computing La,b [DF11, §3.3]. Finally, in general approximately ℓ2k ≈ r candidate matrices
must be tried before ﬁnding the isogeny.

6. Experimental results

We implemented a simpliﬁed version of our main algorithm using SageMath v7.0 [Dev16]. In
our current implementation, we only handle the case ℓ = 2 and we work only with curves located
on the cyclic crater of a volcano of 2-isogenies. We implemented the construction of towers of
ﬁnite ﬁelds from [DS15], in the favorable case where p = 1 mod 4. The source code is available
in the GitHub project https://github.com/Hugounenq-Cyril/Two_curves_on_a_volcano/.
We ran benchmarks on an Intel Xeon E5530 CPU clocked at 2.4GHz. We ﬁxed a base ﬁeld
F101 and ran our algorithm on isogenous elliptic curves of increasing degree r. The torsion
groups involved in the computations varied from 23 to 26. Figure 2 shows the running time for
the computation of the horizontal basis of E[ℓk], and that for one execution of the interpolation
step. Total running times are multiplied by an average factor of r, as expected. The staircase
behavior of our algorithm is apparent from the plot. Although the data points are limited, we
can also guess the quasi-linear growth of the running times. Finally, we remark that, though
asymptotically negligible, the diagonalization step dominates one interpolation step for the
tested parameters.

References

Atk88 A. O. L. Atkin. The number of points on an elliptic curve modulo a prime. 1988.
Atk91 A. O. L. Atkin. The number of points on an elliptic curve modulo a prime. 1991.
BLS10 Reinier Bröker, Kristin Lauter, and Andrew V. Sutherland. Modular polynomials via isogeny volcanoes,

January 2010.

2011.

BMSS08 Alin Bostan, François Morain, Bruno Salvy, and Éric Schost. Fast algorithms for computing isogenies

between elliptic curves. Math. Comp., 77(263), 2008.

BS11 Peter Birkner and Francesco Sica. Four-dimensional Gallant-Lambert-Vanstone scalar multiplication. June

CCR91 Leonard S Charlap, Raymond Coley, and David P Robbins. Enumeration of rational points on elliptic

curves over ﬁnite ﬁelds, 1991.

Page 14 of 16

L. DE FEO, C. HUGOUNENQ, J. PLÛT, É. SCHOST

CLG09 Denis X. Charles, Kristin E. Lauter, and Eyal Z. Goren. Cryptographic hash functions from expander

graphs. Journal of Cryptology, 22(1):93–113, January 2009.

Cou94 Jean-Marc Couveignes. Quelques calculs en théorie des nombres. PhD thesis, Université de Bordeaux,

1994.

Cou96 Jean-Marc Couveignes. Computing l-Isogenies using the p-Torsion. In ANTS-II: Proceedings of the Second
International Symposium on Algorithmic Number Theory, pages 59–65, London, UK, 1996. Springer-
Verlag.

Cou00 J.-M. Couveignes. Isomorphisms between Artin-Schreier towers. Math. Comp., 69(232):1625–1631, 2000.
DDS13 L. De Feo, J. Doliskani, and É. Schost. Fast algorithms for ℓ-adic towers over ﬁnite ﬁelds. In ISSAC’13,

pages 165–172. ACM, 2013.

Dev16 The Sage Developers. Sage Mathematics Software (Version 7.0), 2016.
DF11 Luca De Feo.

Fast algorithms for computing isogenies between ordinary elliptic curves in small

characteristic. Journal of Number Theory, 131(5):873–893, May 2011.

DFJP11 Luca De Feo, David Jao, and Jérôme Plût. Towards quantum-resistant cryptosystems from supersingular

elliptic curve isogenies. Cryptology ePrint Archive, Report 2011/506, September 2011.

DFS12 L. De Feo and É. Schost. Fast arithmetics in Artin-Schreier towers over ﬁnite ﬁelds. J. Symbolic Comput.,

47(7):771–792, 2012.

DS15 J. Doliskani and É. Schost. Computing in degree 2k-extensions of ﬁnite ﬁelds of odd characteristic. Des.

Codes Cryptogr., 74(3):559–569, 2015.

Elk92 Noam D. Elkies. Explicit isogenies. 1992.
Elk98 Noam D. Elkies. Elliptic and modular curves over ﬁnite ﬁelds and related computational issues.

In
Computational perspectives on number theory (Chicago, IL, 1995), volume 7 of Studies in Advanced
Mathematics, pages 21–76, Providence, RI, 1998. AMS International Press.

EM03 Andreas Enge and François Morain. Fast decomposition of polynomials with known galois group.

In
AAECC’03: Proceedings of the 15th international conference on Applied algebra, algebraic algorithms and
error-correcting codes, pages 254–264, Berlin, Heidelberg, 2003. Springer-Verlag.

FM02 M. Fouquet and F. Morain. Isogeny volcanoes and the SEA algorithm. In Algorithmic number theory

(Sydney, 2002), volume 2369 of Lecture Notes in Comput. Sci. Springer, Berlin, 2002.

GLV01 Robert P. Gallant, Robert J. Lambert, and Scott A. Vanstone. Faster point multiplication on elliptic curves
with eﬃcient endomorphisms. In CRYPTO ’01: Proceedings of the 21st Annual International Cryptology
Conference on Advances in Cryptology, pages 190–200, London, UK, 2001. Springer-Verlag.

IJ10 Sorina Ionica and Antoine Joux. Pairing the volcano. In ANTS, pages 201–218, 2010.
JS14 David Jao and Vladimir Soukharev. Post-Quantum Cryptography: 6th International Workshop, PQCrypto
2014, Waterloo, ON, Canada, October 1-3, 2014. Proceedings, chapter Isogeny-Based Quantum-Resistant
Undeniable Signatures, pages 160–179. Springer International Publishing, Cham, 2014.

Koh96 David Kohel. Endomorphism rings of elliptic curves over ﬁnite ﬁelds. PhD thesis, University of California

at Berkley, 1996.

KS97 Erich Kaltofen and Victor Shoup. Fast polynomial factorization over high algebraic extensions of ﬁnite
In ISSAC ’97: Proceedings of the 1997 international symposium on Symbolic and algebraic

ﬁelds.
computation, pages 184–188, New York, NY, USA, 1997. ACM.

LS08 Reynald Lercier and Thomas Sirvent. On Elkies subgroups of ℓ-torsion points in elliptic curves deﬁned

over a ﬁnite ﬁeld. Journal de théorie des nombres de Bordeaux, 20(3):783–797, 2008.

LV16 Pierre Lairez and Tristan Vaccon. On p-adic diﬀerential equations with separation of variables, 2016.

MMRV05 Josep M. Miret, Ramiro Moreno, A. Rio, and Magda Valls. Determining the 2-sylow subgroup of an elliptic

curve over a ﬁnite ﬁeld. Math. Comput., 74(249):411–427, 2005.

MMT01 Markus Maurer, Alfred Menezes, and Edlyn Teske. Analysis of the GHS Weil descent attack on the ECDLP
over characteristic two ﬁnite ﬁelds of composite degree. In INDOCRYPT ’01: Proceedings of the Second
International Conference on Cryptology in India, pages 195–213, London, UK, 2001. Springer-Verlag.

Sch85 René Schoof. Elliptic curves over ﬁnite ﬁelds and the computation of square roots mod p. Math. Comp.,

44(170):483–494, 1985.

Sch95 René Schoof. Counting points on elliptic curves over ﬁnite ﬁelds. Journal de Théorie des Nombres de

Bordeaux, 7(1):219–254, 1995.

Ser70 Jean-Pierre Serre. Cours d’arithmétique. Presses Universitaires de France, 1970.
Ser77 Jean-Pierre Serre. Arbres, amalgames, SL2, volume 46 of Astérisque. Société Mathématique de France,

1977.

Sil92 Joseph H. Silverman. The arithmetic of elliptic curves, volume 106 of Graduate Texts in Mathematics.

Springer-Verlag, New York, 1992.

Sto10 Anton Stolbunov. Constructing public-key cryptographic schemes based on class group action on a set of

isogenous elliptic curves. Adv. Math. Commun., 4(2), 2010.

Sut13 Andrew Sutherland. Isogeny volcanoes. In ANTS X: Proceedings of the Algorithmic Number Theory 10th

International Symposium, volume 1, pages 507–530. Mathematical Sciences Publishers, 2013.

Tes06 Edlyn Teske. An elliptic curve trapdoor system. Journal of Cryptology, 19(1):115–133, January 2006.
Vél71 Jean Vélu.

Isogénies entre courbes elliptiques. Comptes Rendus de l’Académie des Sciences de Paris,

273:238–241, 1971.

vzGG99 Joachim von zur Gathen and Jurgen Gerhard. Modern Computer Algebra. Cambridge University Press,

New York, NY, USA, 1999.

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Page 15 of 16

vzGS92 Joachim von zur Gathen and Victor Shoup. Computing Frobenius maps and factoring polynomials. In
STOC ’92: Proceedings of the twenty-fourth annual ACM symposium on Theory of computing, pages
97–105, New York, NY, USA, 1992. ACM.

Appendix A. Galois classes in E[ℓk]

We give here the full decomposition of E[ℓk] in Galois classes. This is a more precise form

of Proposition 2.8 (v).

Proposition A.1. Let E be an elliptic curve with ℓ-maximal endomorphism ring. Assume
ℓ 6= 2, λ ≡ µ ≡ 1 (mod ℓ) and let α = vℓ(λ − 1), β = vℓ(µ − 1). Write ν(x, y) = min(x + y, x +
β − 1, y + α − 1) and ρ(x, y) = x + y − ν(x, y) = max(0, x − α + 1, y − β + 1). The decompo-
sition of the group E[ℓk] in Galois classes is as follows:

(i) for i, j = 1, . . . , k − 1: (ℓ − 1)2 · ℓν(i,j) classes of size ℓρ(i,j);
(ii) for i = 1, . . . , k − 1: (ℓ − 1) · ℓmin(i,α−1) classes of size ℓmax(0,i−α+1), and (ℓ − 1) ·
(iii) the ℓ2 singleton classes of E[ℓ].

ℓmin(i,β−1) classes of size ℓmax(0,i−β+1);

Proof. Fix a basis (P, Q) of E[ℓk] such that π(P ) = λP , π(Q) = µQ. Studying the Galois
ℓ , (x, y) 7→ (λx, µy). In other words, the orbits
ℓ modulo the multiplicative subgroup generated by (λ, µ). An easy

orbits of E[ℓk] means studying the map Z2
correspond to elements of Z2
way to describe this is to consider a multiplicative lattice in (Q×

ℓ → Z2

ℓ )2.

Let ξ be a primitive (ℓ − 1)-th root of unity in Zℓ. Then by [Ser70, Théorème II.3.2],
the map f (x, y, z) = ℓx · ξy · exp(ℓz) is a group isomorphism between Z × (Z/(ℓ − 1)Z) × Zℓ
ℓ . For i ∈ J0, k − 1K and c ∈ Z/(ℓ − 1)Z, let V (i, c) be the image in Z/ℓkZ of the
and Q×
map f (k − 1 − i, c, –): then the multiplicative structure of V (i, c) is that of a principal
homogeneous space under Z/ℓiZ. We also deﬁne W (i, j, c, d) = V (i, c) · P + V (j, d) · Q ⊂
E[ℓk].
Since λ ≡ 1 (mod ℓ), we may write λ = f (0, 0, u ℓα−1) and µ = f (0, 0, v ℓβ−1) for some u, v ∈
Z×
ℓ . This implies that the set W (i, j, c, d) is stable under Galois. Moreover, the orbits
of W (i, j, c, d) correspond bijectively to points of a fundamental domain of the lattice Λi,j
vℓβ−1(cid:19), whereas the size of each orbit is [(Z/ℓiZ) ×
generated by the columns of (cid:18)ℓi

(Z/ℓjZ) : Λi,j]. By using elementary column manipulations, we ﬁnd that the covolume of Λi,j
is ℓν(i,j), hence the point (i) of the proposition. (The case i = j = 0 yields singleton classes
in E[ℓ]).

uℓα−1

0
ℓj

0

The reunion of all the sets W (j, i, c, d) is exactly the set of all xP + yQ for x, y 6= 0. We

obtain the classes of (ii) by considering the sets V (i, c) · P and V (j, d) · Q.

We now state the equivalent proposition when ℓ = 2. The proof is much the same as in the

odd case.

Proposition A.2. Let E be an elliptic curve with 2-maximal endomorphism ring. Assume
λ ≡ µ ≡ 1 (mod 4) and let α = v2(λ − 1), β = v2(µ − 1). Write ν2(x, y) = min(x + y, x + β −
2, y + α − 2) and ρ2(x, y) = x + y − ν2(x, y) = max(0, x − α + 2, y − β + 2). The decomposi-
tion of the group E[2k] in Galois classes is as follows:

(i) for i, j = 1, . . . , k − 2: 4 · 2ν2(i,j) classes of size 2ρ2(i,j);
(ii) for i = 1, . . . , k − 2: 4 · 2min(i,α−2) classes of size 2max(0,i−α+2), and 4 · 2min(i,β−2) classes
(iii) the 16 singleton classes of E[4].

of size 2max(0,i−β+2).

Page 16 of 16

EXPLICIT ISOGENIES IN ANY CHARACTERISTIC

Note that if λ or µ ≡ −1 (mod 4) then by replacing the base ﬁeld by a quadratic extension,

we can always ensure that the condition λ ≡ µ ≡ 1 (mod 4) is satisﬁed.

Luca De Feo, Cyril Hugounenq
LMV – UVSQ
45 avenue des États-Unis
78035 Versailles
France

Jérôme Plût
ANSSI
51, boulevard de La Tour-Maubourg
75007 Paris
France

Éric Schost
Cheriton School of Computer Science
University of Waterloo
Canada

