Cycle and ﬂow trusses in directed networks

Taro Takaguchi1,2,†, Yuichi Yoshida1,3,‡

1 National Institute of Informatics,

2-1-2 Hitotsubashi, Chiyoda-ku, 101-8430 Tokyo, Japan

2 JST, ERATO, Kawarabayashi Large Graph Project,
2-1-2 Hitotsubashi, Chiyoda-ku, 101-8430 Tokyo, Japan

3 Preferred Infrastructure, Inc.,

2-40-1 Hongo, Bunkyo-ku, 113-0033 Tokyo, Japan

† t takaguchi@nii.ac.jp
‡ yyoshida@nii.ac.jp

March 14, 2016

6
1
0
2

 
r
a

 

M
1
1

 
 
]
I
S
.
s
c
[
 
 

1
v
9
1
5
3
0

.

3
0
6
1
:
v
i
X
r
a

1

Abstract

When we represent real-world systems as networks, the directions of links often con-

vey valuable information. Finding module structures that respect link directions is one

of the most important tasks for analyzing directed networks. Although many methods

have been proposed, no consensus on the notion of a directed module has been reached.

This lack of consensus results partly because there might exist distinct types of modules

in a single directed network, whereas most previous studies focused on an independent

criterion for modules. To address this issue, we propose a generic method to ﬁnd the

so-called truss structures in directed networks. Our method is able to extract two distinct

types of trusses, named the cycle truss and the ﬂow truss, from a uniﬁed framework. By

applying the method to empirical networks obtained from a wide range of research ﬁelds,

we ﬁnd that most real networks contain both cycle and ﬂow trusses.

In addition, the

abundance of (and the overlap between) the two types of trusses may be useful to charac-

terize module structures in a wide variety of empirical networks. Our ﬁndings shed light

on the importance of simultaneously considering diﬀerent types of modules in directed

networks.

2

Introduction

Analysis methods developed in network science provide us with useful tools for investigating

and characterizing the kinds of network structures observed in real-world systems [1]. Standard

techniques in network science include characterizing global properties of networks, measuring

centralities of nodes and links, and classifying nodes into groups [2, 3]. Finding relevant sub-

groups of nodes, often called communities or modules, is a fundamental problem. This problem

is referred to as the community detection problem [4, 5], which has been studied in diﬀerent

disciplines including computer science, statistics, and statistical physics. Although there is no

unifying deﬁnition of a community, information regarding communities in networks gives us a

guide to summarize large-scale networks [6], to predict the existence of links [7], and to reveal

functional organization in real networks [8, 9].

Within the community detection problem for real-world networks, the direction of links

plays a crucial role. Although the majority of community detection algorithms assume undi-

rected networks as their input, several algorithms are explicitly designed for directed networks.

Examples of such algorithms include extensions of spectral partitioning [10, 11], a generalization

of the modularity maximization [12], and the map equation [6] (for a comprehensive review see

Ref. [13]). These algorithms often successfully detect communities that satisfy their criteria.

Nevertheless, it remains an open problem as to how to choose an algorithm when we are given

directed network data. For undirected networks, the local density of links within a subgroup

of nodes is arguably a suitable criterion for a module, regardless of the details of the algo-

rithms [5]. In contrast, for directed networks, the directionality of links can alter the module

structure, even when we observe the same link density in two subgroups of nodes. The choice

of algorithms crucially depends on what types of modules we expect to ﬁnd. In addition, some

algorithms are known to fail to detect certain types of module structure [14, 13]; the impact of

this drawback is not clear until we analyze the network. Therefore, a generic method to ﬁnd

directed modules is necessary for understanding the nature of module structures in real-world

3

directed networks.

To address this issue, in this paper, we propose an algorithm for extracting module structures

in directed networks. The following observations underlie the core concept of our method. First,

there could be diﬀerent types of modules within a single directed network. For example, one

part of a network can be an all-to-all connected module, whereas another part can form a

layered structure [13]. Second, it is not necessary to divide the entire network into modules.

For example, the World Wide Web network is well known to exhibit the so-called bow-tie

structure [15, 16]. This fact implies that the diﬀerent parts of a directed network may not be

regarded as modules to an equal degree. Instead, extraction of modules from the network should

be considered. Previous algorithms often ignore these observations: they aim at partitioning

the entire network into modules based on a single objective function. Therefore, we develop

a method to extract two distinct types of modules, called the cycle truss and the ﬂow truss,

using a uniﬁed framework. Our method relies on pattern matching and local agglomeration of

directed triangles (i.e., connected subgraphs composed of three nodes and three links).

We apply the proposed method to a variety of empirical networks to verify its practicality.

First, we observe that the extracted trusses seem to capture meaningful subgroups of nodes in

networks with node label data. Second, because our method simultaneously detects the two

types of modules, we can use them as features for classifying diﬀerent networks. Empirical

networks obtained from the same categories (e.g., social or biological) tend to show a similar

degree of abundance of the two types of trusses. In addition, the overlap between the two types

of trusses captures another kind of similarity between networks in a given category. Our ﬁndings

demonstrate the importance of simultaneously considering diﬀerent types of modules in directed

networks to understand the common properties underlying the organization of modules.

4

Results

Deﬁnitions of cycle and ﬂow trusses

In this paper, we assume that the focal network is directed and simple, i.e., there are no self-

loops or multiple links in the same direction. Bidirectional connections between two nodes are

possible: links from node i to node j, and from j to i may coexist. We also assume that links are

unweighted. First, we deﬁne cycle and ﬂow triangles as the elements of cycle and ﬂow trusses,

respectively. A cycle triangle is a directed cycle composed of three nodes (see Fig. 1(a)). A ﬂow

triangle is a connected subgraph composed of three nodes that have out-degrees equal to zero,

one, and two (see Fig. 1(b)). A ﬂow triangle is also called a feed-forward loop [17, 18]. Next, we

deﬁne the cycle and ﬂow trusses by generalizing the k-truss, originally deﬁned for undirected

networks [19]. A cycle (ﬂow) k-truss is a maximal connected subgraph of a network in which

every link is involved in at least k cycle (ﬂow) triangles within the subgraph [20] (see Fig. 1(c)

for an example). Free parameter k takes a nonnegative integer value and controls the extent

to which triangles are overlapped within a truss. It should be noted that a cycle (ﬂow) truss

may contain ﬂow (cycle) triangles.

The deﬁnitions of the cycle and ﬂow k-trusses satisfy the requirements described in Intro-

duction, as we can see in the example shown in Fig. 1(c). To be more precise, these deﬁnitions

enable us to ﬁnd two distinct types of modules using the uniﬁed framework. In addition, this

method extracts modules from a network, instead of partitioning the entire network into mod-

ules. The algorithm for ﬁnding cycle and ﬂow k-trusses in a given network is a modiﬁed version

of that for undirected truss [21]. The details of the algorithm are presented with pseudo-codes

in Materials and Methods.

The deﬁnitions of the trusses lead to their basic properties as follows: First, there can be

multiple cycle (ﬂow) k-trusses in a network. Second, cycle and ﬂow (k+a)-trusses are subgraphs

of cycle and ﬂow k-trusses, respectively (a = 1, 2, . . .). Third, the node sets of two k-trusses

of the same type can overlap, but their link sets must be disjoint if we take into account the

5

maximal property in the deﬁnition. Fourth, the complete graph with k nodes in which all node
pairs are connected for both directions is both a cycle (k − 2)-truss and a ﬂow 3(k − 2)-truss
at the same time (k ≥ 3).

We assign a link from nodes i to j with the truss number ki→j deﬁned by

ki→j ≡ max{k | (i → j) ∈ Ek} ,

(1)

where Ek is the set of links involved in k-trusses. We denote the truss number for cycle and

ﬂow trusses by kc

i→j and kf

i→j, respectively. We use the superscripts ‘c’ and ‘f’ to represent

the variables related to the cycle and ﬂow trusses throughout this paper. The truss number

indicates the extent of agglomeration of triangles around a link. For example, in the network
shown in Fig. 1(c), link (i1 → j1) has (kc, kf) = (2, 0) and link (i2 → j2) has (kc, kf) = (0, 2).
We are also interested in the maximum values of kc
i→j over all the links. We call
max and kf

i→j and kf
these values the maximum truss numbers; they are denoted by kc

max for cycle and ﬂow

trusses, respectively. For the network shown in Fig. 1(c), kc

max = kf

max = 2 holds.

There are several relationships between the cycle and ﬂow trusses and other notions of

directed subgraphs presented in previous studies. Detecting directed triangles that are sig-

niﬁcantly over-presented is a key idea of motif analysis [17, 18]. The original notion of the

motif often focuses on subgraphs with a small number of nodes (e.g., three or four). Previous

studies [22, 23, 24, 25] considered the generalization of motifs by aggregating the motifs sharing

links so as to construct functional modules larger than single motifs. In particular, the gen-

eralization of the feed-forward loop motif (called the ﬂow triangle in this paper) described in

Refs. [22, 23, 24, 25] is an example of the ﬂow 1-truss in our deﬁnition. Another related notion
is the directed k-clique [26]. A directed k-clique is a subgraph with k nodes and k(k−1)/2 links,
in which the k nodes has a linear ordering and all node have directed links to all the lower-rank

nodes. A directed k-clique module is deﬁned by a union of adjacent directed k-cliques. Two
directed k-cliques are said to be adjacent if the two have k − 1 nodes in common. A directed
k-clique module is a ﬂow (k − 2)-truss (k ≥ 3); however, the converse does not always hold
true. Therefore, the cohesiveness of the ﬂow k-trusses is between those of the generalization

6

of feed-forward loop motif and the directed k-clique modules. A cycle k-truss does not exactly

correspond to any of the previous notions. Based on the deﬁnition, a cycle truss is a strongly

connected component (i.e., any node in the cycle truss is connected to all the other nodes via

directed links).

Trusses in empirical networks

We apply the proposed method to empirical network data that are assigned with predeﬁned

node labels so as to demonstrate that cycle and ﬂow trusses can extract meaningful modules. We

use two networks obtained from diﬀerent ﬁelds: the neural network of Caenorhabditis elegans

(C. elegans) [27] and the network between words collected via word association experiments [28].

Neural network of Caenorhabditis elegans The C. elegans neural network comprises 279

nodes, which correspond to neurons, and 2, 990 links between the nodes. A chemical synapse

between two neurons is represented as a directed link and an electrical junction as two directed

links in both directions between the node pair [27]. Each neuron is assigned with a unique

name and additional information such as soma positions in the worm’s body and functional

categories (i.e., sensory neuron, interneuron, or motor neuron), which enables us to interpret

the neuronal functions of the extracted trusses.

In Fig. 2, the resulting k-trusses are depicted. We focus on the cycle kc

max = 3- and ﬂow

kf
max = 9-trusses, which are the most cohesive trusses in the network. In this case, both the cycle

3- and ﬂow 9-trusses are a single weakly connected components (i.e., any pair of nodes in each

of the trusses is connected if we discard the link direction). When we map the cycle and ﬂow

trusses in the entire network (Fig. 2(a)), neither of these trusses is localized in any particular

part of the worm body, but instead, spans almost the entire range of the body (from head to

tail). We can see that a small number of nodes bridges most of the triangles in the trusses. The

cycle 3-truss (Fig. 2(b)) consists of four command interneurons relevant for locomotion (AVAL,

AVAR, AVBR, and PVCR) and three motor neurons in the ventral cord of the worm (VA08,

7

VA09, and VB09). Here, we follow the description of each neuron in Ref. [29]. These seven

neurons in the cycle 3-truss are tightly connected to each other; however, certain node pairs

have a link in only one direction. On the other hand, the ﬂow 9-truss (Fig. 2(c)) consists of

13 interneurons relevant to locomotion (AVAL, AVAR, AVBL, AVBR, AVDL, AVDR, AVEL,

AVER, AVJL, AVJR, PVCL, PVCR, and SABVR) and seven motor neurons in the dorsal

cord of the worm (DA1, DB03 to 06, and DVA), except for that in the ventral cord (AS01).

Although we need further explanation by biological experts as to why these neurons constitute

the cycle and ﬂow trusses, the trusses seem to represent functional modules of neurons. The

cycle and ﬂow trusses overlap with each other and have four command interneurons AVAL,

AVAR, AVBR, and PVCR in common. This fact arises logically, as the command interneurons

related to locomotion should play a central role in mediating the motor neurons in the ventral

and dorsal cords [27]. This example of the C. elegans neural network demonstrates the ability of

our proposed method to extract diﬀerent types of cohesive modules from networks. In addition,

the overlap between the two types of trusses can shed light on the importance of nodes that

bridge diﬀerent modules.

Word network of the Edinburgh Associative Thesaurus Our second example is the

graph representation of the Edinburgh Associative Thesaurus (EAT), which was collected

through word association experiments with subjects [28]. A directed link from nodes (i.e.,

words) i to j represents the associative relationship between the two:

for subjects, word j

comes to mind when they are shown word i as a stimulus. After the aggregation of the results

of word association experiments for many subjects with diﬀerent stimuli, the EAT network

contains 23, 219 nodes and 325, 029 links between them.

In Fig. 3, the resulting k-trusses are depicted. We show the cycle kc

max = 2- and ﬂow

kf
max = 8-trusses. Unlike the results of the C. elegans neural network (Fig. 2), there are
multiple disjoint cycle and ﬂow trusses with kc

max = 8. We can see that each

max = 2 and kf

of the trusses consists of words related to a topic, for example, religion, emotion, health, and

8

poem. All six of the cycle 2-trusses composed of ﬁve nodes are fully connected, in which all

node pairs have links in both directions. Each of the cycle 2-trusses related to emotion, health,

and color strongly overlap with one of the ﬂow 8-trusses (Fig. 3). Only the ﬂow 8-truss related

to liquor, the largest one, is less overlapped with the cycle trusses than the other ﬂow 8-trusses

are. We can interpret the diﬀerence between the cycle and ﬂow trusses as follows. The words

constituting a cycle truss have an equal relationship with each other such that the experimental

subjects tend to recall all words based on each word. By contrast, the words constituting a

ﬂow truss have a hierarchical relationship such that some words remind the subjects of other

words but the converse rarely occurs. If we discard the link direction, we cannot distinguish

the modules of the cycle and ﬂow trusses. Therefore, this example demonstrates that the link

direction plays an important role in ﬁnding modules; our method successfully takes into account

the link direction.

Basic statistics of trusses in various networks The basic statistics of the truss structure

for empirical networks obtained from 12 diﬀerent ﬁelds are summarized in Tables. S1 and S2 of

Supplementary Materials (SM). Except for kf

max for the circuit networks and a few examples,

almost all kc

max and kf

max are nontrivial. Additionally, the kc

max and kf

max values do not necessarily

increase with the number of cycle and ﬂow triangles. This result implies that the trusses

can retain the information regarding the module structure, irrespective of the count of these

triangles.

Classiﬁcation of networks based on truss number distributions

We can use the truss number statistics to classify various networks. Intuitively, a network is

more cycle (ﬂow) truss oriented if the links tend to have larger cycle (ﬂow) truss numbers. Note

that a large truss number implies the agglomeration (and abundance) of triangles. To quantify

how much a network is truss oriented, we deﬁne a measure D as
(Frand(k) − Forig(k)) ,

D ≡ 1
K

K(cid:88)

k=0

9

(2)

(cid:80)k

where F (k) is the complementary cumulative distribution of truss numbers deﬁned by F (k) ≡
k(cid:48)=0 f (k(cid:48)) and f (k(cid:48)) (in the sum) is the frequency distribution of the truss number. In Eq. 2,
the subscripts “orig” and “rand” represent the distributions for the original and randomized

networks, respectively. We randomize the original network by rewiring links in a uniformly

random manner while retaining the in- and out-degrees of all nodes. The range of the sum over
k is determined by K. Here, we choose K ≡ min{k | Forig(k) > 0.9 ∧ Frand(k) > 0.9}. We
do not assume K = kmax, because kmax might be sensitive to noise in the network data. The
measure D takes a value in [−1, 1]; a large positive value of D represents that the links in the
original network tend to have a larger truss number than those in the randomized networks.

We denote the measure D for the cycle and ﬂow truss numbers by Dc and Df, respectively. In

Figs. 4(a) and 4(b), we plot the truss number distributions f c(k) and f f(k) of the C. elegans

neural network and the randomized networks. The kc

max and kf

max values are larger for the

original network than those for the randomized networks. The proportions of links with large

k values are also larger for the original than the randomized networks. For this network, we

obtain (Dc, Df) = (0.122, 0.329). Therefore, the C. elegans network is inclined to have more

ﬂow trusses than cycle trusses, which agrees well with our intuition based on Figs. 4(a) and

4(b).

The measure D allows us to compare various networks of diﬀerent sizes in terms of truss ten-

dency. In Fig. 4(c), we show the scatter plot of Dc and Df for the empirical networks. As we can

see, the networks of certain categories such as airport, circuit, citation, and food webs loosely

fall into the similar positions on the plane. The points are located around the diagonal because

networks with larger numbers of triangles tend to have larger D values. This phenomenon

occurs because our randomization procedure does not conserve the number of triangles in the

original network; the randomization tends to destroy triangles, and consequently, destroy the

truss structure. This reasoning is supported by the observation shown in Fig. S1 in SM. The

elements of the ﬁrst principle component of the plot shown inFig. 4 exhibit a strong positive

correlation with the clustering coeﬃcient [30] after discarding the link directions. Nevertheless,

10

Fig. 4 provides the information regarding network topology beyond simply the count of the

triangles. For example, there are several distinguishable classes of network (such as citation

and circuit networks) in which either cycle or ﬂow trusses are dominant. The neural, airport,

and web networks contain both types of trusses. The metabolic networks [31] tend to have few

cycle or ﬂow trusses as comparable with those in the randomized networks. These observations

suggest the usefulness of the cycle and ﬂow trusses to characterize diﬀerent types of directed

networks.

Overlap between cycle and ﬂow trusses

In the previous section, we separately considered the properties related to the cycle and ﬂow

trusses. As we observed in the example networks (Figs. 2 and 3), the overlap between the

two types of trusses can be another characteristic of the networks. In particular, we are in-

terested in the overlap between highly cohesive cycle and ﬂow trusses with large k values. To

analyze the overlap, we plot the joint frequency distribution of truss numbers (kc, kf) for four

example networks, i.e., the C. elegans neural network, the EAT network, the USairport 2010

network [32], and the web-Google network [33] (Fig. 5). In these plots, a cell at (kc, kf) indicates

the proportion of links with these truss numbers. The plots of (kc, kf) frequencies indicate the

unique characteristics of the diﬀerent networks. In the C. elegans neural network (Fig. 5(a)),
the links with kc = 3 have only 7 ≤ kf ≤ 9 = kf
of the cycle kc

max. This property suggests that the size

max-truss is smaller than that of the ﬂow kf

max-truss and a large section of the

cycle truss overlaps with the ﬂow truss, as we observed in Fig. 2. By contrast, for the EAT

network (Fig. 5(b)), the majority of links have relatively small truss numbers, as kc = 0 and
0 ≤ kf ≤ 3. Thus, the cohesive cycle and ﬂow trusses are not strongly overlapped. The plots
for the USairport 2010 (Fig. 5(c)) and web-Google (Fig. 5(d)) networks look similar, such that

we can see the colored cells along the diagonal of slope equal to 3. This observation suggests

that in these networks there are complete subgraphs within which node pairs are connected in

both directions. This situation may correspond to airports within local regions and web pages

11

under the same directories.

To quantify the overlap between the cohesive cycle and ﬂow trusses in a network, we deﬁne

(cid:12)(cid:12)(cid:8)e ∈ E | (kc
(cid:12)(cid:12)(cid:8)e ∈ E | (kc

med) ∧(cid:0)kf
med) ∨(cid:0)kf

e > kc
e > kc

R ≡

(cid:1)(cid:9)(cid:12)(cid:12)
(cid:1)(cid:9)(cid:12)(cid:12),

e > kf
e > kf

med

med

(3)

where E is the set of all links and kc

med are the median values of f c(k) and f f(k) (indi-
cated by the dashed lines in Fig. 5), respectively. The measure R characterizes the proportion

med and kf

of links with large kc and kf values among those with large kc or kf values. The measure R

takes a value in [0, 1]; a large R value indicates a strong overlap between the cohesive cycle and

ﬂow trusses. For the four networks shown in Fig. 5, we obtain R = 0.531, 0.383, 0.983, and

0.540 for the C. elegans neural network, the EAT network, the USairport 2010 network, and

the web-Google network, respectively.

In Fig. 6, we plot the R values for the empirical networks (i.e., the same set that we used

in Fig. 4, except for the metabolic networks). First, we can see that the networks of some

categories have the R values close to the extreme cases, i.e., 0 or 1. For the airport networks,

the R values for the three networks are almost equal to unity. This result follows logically,

because almost all of the adjacent pairs of nodes have bidirectional links (Table S1 in SM).

Therefore, any triplet of nodes is likely to constitute a cycle triangle if it composes a ﬂow

triangle and vice versa. For the circuit, citation, gene regulatory, P2P, and software networks,

the R values are close to zero, because these types of networks have huge gaps between the

number of cycle and ﬂow triangles (Table S1). The three circuit networks do not contain any

ﬂow triangles. For the citation, gene regulatory, P2P, and software networks, the number of

cycle triangles is much smaller than that of ﬂow triangles.

The following, neural, web, and word networks tend to have R values greater than 0.5,

although ﬂuctuations within a category are large. The food webs tend to have R values less

than 0.5. The results for the metabolic networks are shown in Fig. S2 in SM; the majority of
these networks have R values of 0.491±0.0481 (mean ± standard deviation). These observations
may indicate the usefulness of the R value to characterize the tendency of module organization

12

for diﬀerent categories of networks.

Discussion

In this paper, we proposed the cycle and ﬂow k-trusses in order to extract two distinct types of

cohesive modules from directed networks. We developed an eﬃcient algorithm for computing

these trusses and deﬁned the measures used to quantify the module organization in a network

based on the truss properties. Applications of our method to a wide variety of empirical

networks illustrated that most empirical networks contain either type of trusses or both of

them. We investigated the extracted trusses for several networks with the given node labels

and found that the trusses seem to capture relevant subgroups of nodes. We also found that

the abundance of (and the overlap between) cycle and ﬂow trusses helps us to classify empirical

networks obtained from diﬀerent ﬁelds. These ﬁndings suggest the importance of exploring

diﬀerent types of modules in directed networks. We believe that our method will be a useful

tool for investigating module structure in directed networks.

Our method assumes that the focal network is directed and unweighted. However, the im-

portance of link weight in many systems has been suggested in previous work (e.g., Ref. [34]).

This point is a clear limitation of the present method and a suitable generalization for weighted

networks is warranted. Although we determined the existence of truss structures in empirical

networks, the origins and functional roles of these trusses are not yet well understood. Dy-

namical models of the growth processes of directed networks that yield truss structures will be

potential future work, providing fully understanding of the organization of modules in directed

networks.

Materials and Methods

Data

The network data sets used in the present study were downloaded from the following websites.

13

• The airport, communication, following, and software networks: http://konect.uni-koblenz.

de/

• the USairport500 network: http://toreopsahl.com/datasets/#usairports
• The circuit networks and the word networks: http://www.weizmann.ac.il/mcb/UriAlon/

download/collection-complex-networks

• The allcites network (the U.S. supreme court citation network): http://fowler.ucsd.edu/

judicial.htm

• The cit-HepPh, cit-HepTh, social, slashdot-0902, twitter combined, wiki-Vote, P2P, and the

web networks: http://snap.stanford.edu/data/

• The food webs and the Edinburgh Associative Thesaurus: http://vlado.fmf.uni-lj.si/pub/

networks/data/

• The gene regulatory networks; http://info.gersteinlab.org/Hierarchy
• The C. elegans neural network: http://www.wormatlas.org/neuronalwiring.html
• The brain connectivity networks: https://sites.google.com/site/bctnet/datasets
• The mac95 network: http://www.biological-networks.org/?page_id=25
• The polblog network (the hyperlink network between weblogs on US politics): http://

www-personal.umich.edu/~mejn/netdata/

The metabolic networks were based on those used in Ref. [31] and the network data were given

by Kazuhiro Takemoto through personal communication. Any additional information from

links, such as the weight, sign, or time stamp, were discarded from the network data. We also

removed the self-loops and multiple links to make the networks simple.

Algorithms to compute trusses

We describe our algorithm for ﬁnding the ﬂow and cycle k-trusses in a network. For a network G,
the sets of nodes and links are denoted by V (G) and E(G), respectively. For a node v ∈ V (G),
G (v) = {w ∈ V (G) | vw ∈ E(G)}; we
we deﬁne N +
G (v)|. Here, for the sake of simplicity,

G (v) as the set of out-neighbors of v, that is, N +
G(v) = |N +
G(v) as the out-degree of v, i.e., deg+

deﬁne deg+

we denote the link from node u to node v by uv .

Our algorithm uses a subroutine called CommonNeighbor (Algorithm 1). This subroutine
takes two networks G and G(cid:48) on the same node set V and two nodes u, v ∈ V , and returns the set
of nodes w such that uw ∈ E(G) and vw ∈ E(G(cid:48)). This subroutine will be used to enumerate

14

the cycle or ﬂow triangles involving the link uv. The algorithm is relatively straightforward:

it chooses either u or v, enumerates its out-neighbors w, and then checks whether w is also an

out-neighbor of the other unchosen node. For eﬃciency, we choose u if deg+

G(u) < deg+

G(cid:48)(v) and

choose v otherwise. Using hash tables for storing out-neighbors of nodes, the time complexity
of CommonNeighbor is bounded by O(min{deg+

G(u), deg+

G(cid:48)(v)}).

Now we present our algorithm for enumerating cycle trusses (Algorithm 2). Given a network

G, it computes cycle k-trusses for all k at once.

First, for every link uv ∈ E(G), we count the number of cycle triangles involving uv and store
the number to c[uv] (Line 6). This can be done by calling CommonNeighbor(G(cid:48), G, u, v),
where G(cid:48) is the network obtained from G by reversing the directions of links. This is because if
there exists a cycle triangle in G with links uv, vw, and wu, then G(cid:48) contains the link uw and

G contains the link vw.

Next, starting with k = 0, as long as the links remain, we perform the following process:

As long as there is a link uv such that c[uv] is at most k, we set the truss number (cid:96)[uv] of uv

to be k (Line 11), then for each cycle triangle involving the link uv, we decrease the count of

the other two links (Line 12-14), and ﬁnally Finally, we remove the link uv from the network

(Line 15). If there is no link with a count of at most k, we increment the value of k and repeat

the process. Note that, when the process starts for a particular value of k, all links have counts

of at least k, and thus, all these links have truss numbers of at least k. On the other hand,

when we remove a link in the process for a particular k value, because we have only removed

links that cannot be a member of a cycle (k + 1)-truss, its truss number is at most k. Therefore,

each link is assigned with the correct truss number.

The overall time complexity of CycleTruss is dominated by the time complexity of enu-

merating the cycle triangles. Naively, this can be bounded by

(cid:88)

uv∈E(G)

(cid:88)

v∈V (G)

deg+

G(v) =

deg+

G(v)2 = O

(cid:16)

N 2 · M
N

(cid:17)

= O(N M ),

where N and M are the number of nodes and links, respectively, in the input network.

In

15

practice, however, the time taken runs is almost linear with M for real networks.

Finally, we explain our algorithm for enumerating ﬂow trusses (Algorithm 3), which simul-

taneously computes ﬂow k-trusses for all k values. Conceptually, FlowTruss is almost the

same as CycleTruss. However, for a link uv and a node w, there are three types of a ﬂow

triangle involved: (i) a ﬂow truss with links uv, wv, and uw, (ii) a ﬂow truss with links uv, wv,

and wu, and (iii) a ﬂow truss with links uv, vw, and wu. These links can be enumerated by call-
ing CommonNeighbor(G, G(cid:48)), CommonNeighbor(G(cid:48), G(cid:48)), and CommonNeighbor(G, G),
respectively, where G(cid:48) is the network obtained from G by reversing the directions of all links.

The other parts of the algorithm and the analysis of time complexity are the same as those of

CycleTruss, and therefore we omit them.

References and Notes

[1] M. E. J. Newman. Networks: An Introduction. (Oxford University Press, Oxford, 2010).

[2] L. da F. Costa, F. A. Rodrigues, G. Travieso, P. R. Villas Boas. Characterization of

complex networks: A survey of measurements. Adv. Phys. 56, 167–242 (2007).

[3] A. Barrat, M. Barth´elemy, A. Vespignani. Dynamical Processes on Complex Networks.

(Cambridge University Press, Cambridge, 2008).

[4] M. A. Porter, J.-P. Onnela, P. J. Mucha. Communities in Networks. Not. Am. Math. Soc.

56, 1082–1097 (2009).

[5] S. Fortunato. Community detection in graphs. Phys. Rep. 486, 75–174 (2010).

[6] M. Rosvall, C. T. Bergstrom. Maps of random walks on complex networks reveal commu-

nity structure. Proc. Natl. Acad. Sci. U.S.A. 105, 1118–1123 (2008).

[7] A. Clauset, C. Moore, M. E. J. Newman. Hierarchical structure and the prediction of

missing links in networks. Nature 453, 98–101 (2008).

16

[8] J. Chen, B. Yuan. Detecting functional modules in the yeast protein-protein interaction

network. Bioinformatics, 22(18):2283–2290, 2006.

[9] Y. Sohn, M.-K. Choi, Y.-Y. Ahn, J. Lee, J. Jeong. Topological cluster analysis reveals the

systemic organization of the Caenorhabditis elegans connectome. PLOS Comput. Biol. 7,

e1001139 (2011).

[10] F. Chung. Laplacians and the Cheeger inequality for directed graphs. Ann. Comb. 9, 1–19

(2005).

[11] Y. Yoshida. Nonlinear Laplacian for digraphs and its applications to network analysis.

Proceedings of the Ninth ACM International Conference on Web Search and Data Mining,

San Francisco, CA, USA, 22 to 25 February 2016, pp. 483–492.

[12] E. A. Leicht, M. E. J. Newman. Community structure in directed networks. Phys. Rev.

Lett. 100, 118703 (2008).

[13] F. D. Malliaros, M. Vazirgiannis. Clustering and community detection in directed networks:

A survey. Phys. Rep. 533, 95–142 (2013).

[14] Y. Kim, S.-W. Son, H. Jeong. Finding communities in directed networks. Phys. Rev. E

81, 016103 (2010).

[15] A. Broder, R. Kumar, F. Maghoul, P. Raghavan, S. Rajagopalan, R. Stata, A. Tomkins,

J. Wiener. Graph structure in the Web. Comput. Networks 33, 309–320 (2000).

[16] B. Corominas-Murtra, J. Go˜ni, R. V. Sol´e, C. Rodr´ıguez-Caso. On the origins of hierarchy

in complex networks. Proc. Natl. Acad. Sci. U.S.A. 110, 13316–13321 (2013).

[17] R. Milo, S. Shen-Orr, S. Itzkovitz, N. Kashtan, D. Chklovskii, U. Alon. Network motifs:

simple building blocks of complex networks. Science (New York, N.Y.) 298, 824–827

(2002).

17

[18] U. Alon. Network motifs: theory and experimental approaches. Nat. Rev. Genet. 8,

450–461 (2007).

[19] J. Cohen. Trusses : Cohesive Subgraphs for Social Network Analysis. Technical report

(National Security Agency, Fort Meade, MD, 2008).

[20] In the original deﬁnition for undirected networks [19], the k-truss is the maximal subgraph
in which every link is involved in (k−2) triangles, not k triangles. We modify the deﬁnition
in order to make the truss number of links involved in no triangles zero.

[21] J. Wang, J. Cheng. Truss decomposition in massive networks. Proc. VLDB Endowment

5, 812–823 (2012).

[22] R. Dobrin, Q. K. Beg, A.-L. Barab´asi, Z. N. Oltvai. Aggregation of topological motifs in

the Escherichia coli transcriptional regulatory network. BMC Bioinform. 5, 10 (2004).

[23] N. Kashtan, S. Itzkovitz, R. Milo, and U. Alon. Topological generalizations of network

motifs. Phys. Rev. E 70, 031909 (2004).

[24] L. V. Zhang, O. D. King, S. L. Wong, D. S. Goldberg, A. H. Y. Tong, G. Lesage, B.

Andrews, H. Bussey, C. Boone, F. P. Roth. Motifs, themes and thematic maps of an

integrated Saccharomyces cerevisiae interaction network. J. Biol. 4, 6 (2005).

[25] T. Michoel, A. Joshi, B. Nachtergaele, Y. Van de Peer. Enrichment and aggregation

of topological motifs are independent organizational principles of integrated interaction

networks. Mol. Biosyst. 7, 2769–2778 (2011).

[26] G. Palla, I. J. Farkas, P. Pollner, I. Der´enyi, T. Vicsek. Directed network modules. New

J. Phys. 9, 186 (2007).

[27] L. R. Varshney, B. L. Chen, E. Paniagua, D. H. Hall, D. B. Chklovskii. Structural prop-

erties of the Caenorhabditis elegans neuronal network. PLOS Comput. Biol. 7, e1001066

(2011).

18

[28] G. R. Kiss, C. Armstrong, R. Milroy, J. Piper. An associative thesaurus of English and

its computer analysis. In The computer and literary studies, A.J. Aitken, R.W. Bailey,

N. Hamilton-Smith, Eds. (Edinburgh University Press, 1973), pp. 153–165.

[29] Z.F. Altun, D. H. Hall. Nervous system, general description, In WormAtlas, http://dx.

doi.org/doi:10.3908/wormatlas.1.18 (Date accessed: 1st March 2016).

[30] D. J. Watts, S. H. Strogatz. Collective dynamics of ‘small-world’ networks. Nature 393,

440–442 (1998).

[31] K. Takemoto. Metabolic networks are almost nonfractal: A comprehensive evaluation.

Phys. Rev. E 90, 022802 (2014).

[32] Tore

Opsahl.

Why

Anchorage

is

not

(that)

important:

Bi-

nary

ties

and

Sample

selection,

http://toreopsahl.com/2011/08/12/

why-anchorage-is-not-that-important-binary-ties-and-sample-selection/

(Date accessed: 1st March 2016).

[33] J. Leskovec, K.J. Lang, A. Dasgupta, M.W. Mahoney. Community structure in large

networks: Natural cluster sizes and the absence of large well-deﬁned clusters. Internet

Math. 6, 29–123 (2009).

[34] A. Barrat, M. Barth´elemy, R. Pastor-Satorras, A. Vespignani. The architecture of complex

weighted networks. Proc. Natl. Acad. Sci. U.S.A. 101, 3747–3752 (2004).

Acknowledgments

The authors thank Naoki Masuda for insightful comments. Author contributions: T.T. and

Y.Y. conceived and designed the research. Y.Y. performed the coding. T.T. and Y.Y. analyzed

the data, discussed the results, and wrote the manuscript. Competing interests: The authors

declare no competing ﬁnancial interests. Funding: Y.Y. acknowledges the ﬁnancial support

19

through JST, ERATO, Kawarabayashi Large Graph Project, JSPS Grant-in-Aid for Young

Scientists (B) (No. 26730009), and MEXT Grant-in-Aid for Scientiﬁc Research on Innovative

Areas (No. 24106003).

Supplementary Materials

• Fig. S1. Scatter plot of the ﬁrst principal component of (Dc, Df) and the clustering

coeﬃcient.

• Fig. S2. Histogram of the R measure for the metabolic networks.

• Tables. S1 and. S2. Statistics of the empirical networks.

20

Figure 1: Deﬁnitions of cycle and ﬂow trusses. (a) a cycle and (b) ﬂow triangles. (c) the
cycle (blue) and ﬂow (red) k = 2-trusses in an example network. The vertical arrow colored
with purple at the center represents the link that belongs to both of the cycle and ﬂow 2-trusses.

21

(a)(b)(c)Figure 2: Cycle and ﬂow trusses in the C. elegans neural network. We set k to
kc
max = 3 and kf
max = 9 for the cycle and ﬂow trusses, respectively. The links are colored with
blue (in the cycle 3-truss), red (in the ﬂow 9-truss), purple (in both), and gray (remainder).
(a) The whole picture of the C. elegans neural network. The nodes are ordered according to
the soma position in the worm body (head to tail from left to right and from top to bottom).
A group of nodes composing a circle have the same position. (b) the cycle 3- and (c) the ﬂow
9-trusses. The node labels indicate the names of neurons.

22

(a)(b)(c)AVARAVALPVCRVB09VA08VA09AVBRheadtailPVCRAVBLPVCLAVARAVELAVERAVALDB04DB03DVADB06DB05AVBRDA01SABVRAVDLAVDRAVJRAVJLAS01Figure 3: Cycle and ﬂow trusses in the EAT network. We set k to kc
max = 2 and
kf
max = 8 for the cycle and ﬂow trusses, respectively. The links are colored with blue (in the
cycle 2-trusses), red (in the ﬂow 8-trusses), and purple (in both). The node labels indicate the
corresponding words.

23

CATHOLICPRIESTCHRISTFAITHCHRISTIANCROSSGODCHAPELRELIGIONCHURCHPRAYVICARCLERGYPARSONMINISTERSIZESMALLLARGEBIGGREATHUGEENORMOUSVASTPOETPOEMPOETRYVERSEPROSELOTSMOREPLENTYMUCHMANYPLANETMARSJUPITERVENUSSATURNSURECERTAINUNSUREDOUBTFULUNCERTAINBEGANSTARTEDENDEDBEGUNFINISHEDTRANQUILQUIETPEACEFULCALMSERENEPLACIDPINKREDYELLOWCOLOURGREENBLUEJOYSADMISERYUNHAPPINESSHAPPINESSTEARSSADNESSGRIEFLAUGHTERSORROWSICKPAINILLPATIENTDOCTORCANCERDEATHHOSPITALILLNESSHEALTHCUREMEDICINEDISEASESICKNESS      LIQUORSPIRITSWHISKYGINGLASSBOOZERUMPUBDRUNKDRINKBEERWHISKEYWINEWATERBOTTLEBLANDYALCOHOLGOODFigure 4: Distributions of the truss numbers and the D measure. Distributions of (a)
kc and (b) kf for the original network and 100 randomized networks of the C. elegans neural
network. (c) Scatter plot of Dc and Df for (main panel) empirical networks of the 12 categories
and for (inset) the metabolic networks.

24

(cid:724)(cid:724)0.00.20.40.60.00.20.40.6 for cycle truss numberfor flow truss number(cid:724)airportcircuitcitationcommunicationfollowingfood  webgeneneuralsoftwarewebword0.040.060.080.100.020.040.06cycle truss number 01230.00.10.20.30.40.5(a)flow truss number frequency01234567890.00.10.20.3originalrandomizedoriginalrandomized(b)frequency(c)originalrandomizedP2PFigure 5: Joint frequency distribution of(cid:0)kc, kf(cid:1). (a) the C. elegans neural network. (b)

the EAT network. (c) the USairport 2010 network. (d) the web-Google network. The vertical
and horizontal dashed lines indicate the k values that gives the median value for kc and kf,
respectively.

25

051001230.0250.0750.12502480120.050.100.150.20050100150020400.050.10025507501020300.0250.0500.0750.100(a)(b)(c)(d)6cycle truss numberflow truss numbercycle truss numberflow truss numberflow truss numberflow truss numbercycle truss numbercycle truss numberFigure 6: Overlap measure R for various networks. The set of empirical networks
considered is the same as that used in the main panel of Fig. 4(c).

26

USairport_2010openflightsUSairport500s208_sts420_sts838_stallcitescit−HepPhcit−HepThmunmun_digg_replyslashdot−threadsradoslaw_emailwiki−Talkemail−EuAllopsahl−ucsocialenronmunmun_twitter_socialwiki−Votepolblogssoc−Epinions1twitter_combinedsoc−Slashdot0902CrystalCMaspalomasMondegoRhodeChesUpperStMarksChesLowerChesapeakeFloridaChesMiddleMichiganNarraganCrystalDEvergladesMt_TrRr_TrMm_TrSc_TrHs_Trsubelj_jdksubelj_jung−jweb−Stanfordweb−BerkStanweb−Googleweb−NotreDamelasagne−yahooeatfrenchbookinter_stjapanesebookinter_stlasagne−spanishbookspanishbookinter_stdarwinbookinter_stairportcircuitcitationcommunicationfollowingweb(cid:71)(cid:80)(cid:80)(cid:69)genep2p−Gnutella04p2p−Gnutella31P2Pmac95celegans_neuralcatmacaque71fve32neuralsoftwarewebword0.000.250.500.751.000.000.250.500.751.00overlap0.000.250.500.751.000.000.250.500.751.00overlapfood(cid:46) Find all w such that uw ∈ E(G) and

Algorithm 1
1: procedure CommonNeighbor(G, G(cid:48), u, v)
vw ∈ E(G(cid:48))
W ← ∅.
if deg+

for w ∈ N +

G(u) < deg+
G(cid:48)(v) then
G (u) \ {v} do
if vw ∈ E(G(cid:48)) then
W ← W ∪ {w}.

G(cid:48)(v) \ {u} do
if uw ∈ E(G) then
W ← W ∪ {w}.

end if

else

end for
for w ∈ N +

2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17: end procedure

end if
return W .

end for

end if

27

(cid:46) Find cycle-trusses in G

c[uv] ← |CommonNeighbor(G(cid:48), G, u, v)|.

(cid:46) Count cycle triangles involving uv.

end for
k ← 0.
while a link remains do

Algorithm 2
1: procedure CycleTruss(G)
Let G(cid:48) be the network obtained from G by reversing the directions of links.
2:
c[e] ← 0 for each e ∈ E(G).
3:
(cid:96)[e] ← ∞ for each e ∈ E(G).
4:
for uv ∈ E(G) do
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19: end procedure

while there exists a link uv with c[uv] ≤ k do
(cid:96)[uv] ← k.
for w ∈ CommonNeighbor(G(cid:48), G, u, v) do
c[wu] ← c[wu] − 1 and c[vw] ← c[vw] − 1.

end for
Remove the link uv, and update G and G(cid:48).

end while
k ← k + 1.

end while

28

(cid:46) Find ﬂow-trusses in G

Let G(cid:48) be the network obtained from G by reversing the directions of links.
c[e] ← 0 for each e ∈ E(G).
(cid:96)[e] ← ∞ for each e ∈ E(G).
for uv ∈ E(G) do

c[uv] ← |CommonNeighbor(G, G(cid:48), u, v)|.
c[uv] ← c[uv] + |CommonNeighbor(G(cid:48), G(cid:48), u, v)|.
c[uv] ← c[uv] + |CommonNeighbor(G, G, u, v)|.

(cid:46) Count ﬂow triangles with links uv, wv, and uw for some w ∈ V (G).
(cid:46) Count ﬂow triangles with links uv, wv, and wu for some w ∈ V (G).
(cid:46) Count ﬂow triangles with links uv, vw, and uw for some w ∈ V (G).

end for
k ← 0.
while a link remains do

Algorithm 3
1: procedure FlowTruss(G)
2:
3:
4:
5:
6:
7:
8:
9:
10:
11:
12:
13:
14:
15:
16:
17:
18:
19:
20:
21:
22:
23:
24:
25:
26:
27:
28:
29:
30: end procedure

end while
k ← k + 1.

end while

while there exists a link uv with c[uv] ≤ k do
(cid:96)[uv] ← k.
for w ∈ CommonNeighbor(G, G(cid:48), u, v) do
c[uw] ← c[uw] − 1 and c[wv] ← c[wv] − 1.
end for
for w ∈ CommonNeighbor(G(cid:48), G(cid:48), u, v) do
c[wu] ← c[wu] − 1 and c[wv] ← c[wv] − 1.
end for
for w ∈ CommonNeighbor(G, G, u, v) do
c[wu] ← c[uw] − 1 and c[vw] ← c[vw] − 1.

end for
Remove the link uv, and update G and G(cid:48).

29

Supplementary Materials

for

Taro Takaguchi and Yuichi Yoshida

Cycle and ﬂow trusses in directed networks

1

Figure S1: Scatter plot of the values of the ﬁrst principal component of(cid:0)Dc, Df(cid:1) and

the clustering coeﬃcient for various networks. The clustering coeﬃcient is calculated
with regarding networks as undirected. The points corresponding to the ten networks with the
largest values of the principal component are indicated with the names of networks. The r
value is the Pearson correlation coeﬃcient.

2

−1012340.00.10.20.30.40.50.60.7first principal component of clustering coefficientcatfve32mac95macaque71openflightsradoslaw_emailtwitter_combinedUSairport_2010USairport500web−GoogleFigure S2: Histogram of the R measure for the metabolic networks. The measure
R quantiﬁes the overlap between the set of links with the largest kc values and that with the
largest kf values.

3

051015200.40.50.60.7overlapfrequencyTable S1: Statistics of the empirical network used in this study. N and M : the number
of nodes and links. kc
max: the maximum cycle and ﬂow truss numbers. C: the average
clustering coeﬃcient after discarding the link direction. T c and T f: the number of the cycle and
ﬂow triangles. M bid: the number of links whose node pairs have another link in the opposite
direction.

max and kf

M

kc
max

kf
max

C

T c

T f

M bid

N

2939
500
1574

122
252
512

30501
5960
28236

189
399
819

25417
34546
27769

216738
421534
352768

265009
86978
30360
1899
168
51083
2394385

465017
1224
75879
82168
81306
7115

418956
320154
85247
20296
11544
130370
5021410

834797
19022
508837
870161
1768135
103689

name

airport
openﬂights [1]
USairport500 [2]
USairport 2010 [3]

circuit
s208 st [4]
s420 st [4]
s838 st [4]

citation
allcites [5,6]
cit-HepPh [7, 8]
cit-HepTh [7, 8]

communication
email-EuAll [9]
enron [10]
munmun digg reply [11]
opsahl-ucsocial [12]
radoslaw email [13]
slashdot-threads [14]
wiki-Talk [15]

following
munmun twitter social [16]
polblogs [17]
soc-Epinions1 [18]
soc-Slashdot0902 [19]
twitter combined [20]
wiki-Vote [21, 22]

63
75
163

0.2547
0.3514
0.3841

72631
18424
220832

72803
18424
243384

29648
5960
22042

0
0
0

13
23
28

39
50
2
10
189
5
91

4
32
60
99
139
25

0.0574
0.0517
0.0483

0.1260
0.1457
0.1196

0.0041
0.0716
0.0056
0.0568
0.8246
0.0060
0.0022

0.0006
0.2260
0.0657
0.0241
0.1706
0.1255

10
20
40

49
506
522

134844
255012

286
8441
176867
4320

4302222

119
18481
580213
493487
5118668
41856

0
0
0

0
0
0

385667
1276803
1478675

564
1314
966

266308
1171455

4028
14253
203312
18175
9031616

38375
100562
1616825
602500
13059341
601594

108950
45396
184
12916
9266
27594
723690

2514
4614
206194
731862
851678
5854

21
25
54

1
1
1

1
1
3

12
13
1
3
62
2
28

1
9
18
33
41
6

4

Table S2: Statistics of the empirical network used in this study (continued).

M

kc
max

kf
max

C

name

foodweb
Chesapeake [23]
ChesLower [24]
ChesMiddle [24]
ChesUpper [24]
CrystalC [25, 26]
CrystalD [25, 26]
Everglades [27]
Florida [28]
Maspalomas [29]
Michigan [30]
Mondego [31]
Narragan [32]
Rhode [33]
StMarks [34]

gene
Hs Tr [35]
Mm Tr [35]
Mt Tr [35]
Rr Tr [35]
Sc Tr [35]

P2P
p2p-Gnutella04 [9, 36]
p2p-Gnutella31 [9, 36]

neural
cat [37]
celegans neural [38]
fve32 [39]
macaque71 [40]
mac95 [41, 42]

software
subelj jdk [43]
subelj jung-j [43]

web
web-BerkStan [19]
web-Google [19]
web-NotreDame [44]
web-Stanford [19]

T c

14
24
38
44
41
24
536
357
9
52
224
69
0
15

46
1
0
0
13

33
57

5367
1414
380
813
9145

288
300

T f

M bid

194
241
383
393
209
127
4344
8367
59
332
1185
446
22
650

2690
206
49
102
3742

901
1967

12
20
18
30
22
14
62
62
10
18
68
28
16
6

72
0
6
6
18

0
0

5929
4408
486
957
13802

194798
182009

1912
1406
242
616
1750

468
490

7426999
2486567
6936636
689426

64666756
13357485
8900531
11320457

1902224
1565976
759142
639722

0.2842
0.3529
0.4323
0.4203
0.4925
0.3936
0.4704
0.3119
0.3182
0.3347
0.4911
0.4425
0.2548
0.3329

0.0084
0.0087
0.0047
0.0118
0.0099

0.0054
0.0039

0.4891
0.2135
0.5812
0.4418
0.7926

0.0111
0.0110

0.0069
0.0552
0.0877
0.0086

N

39
37
37
37
24
24
69
128
24
39
46
35
19
54

176
177
207
214
125
99
911
2106
82
218
392
218
53
353

3107
1192
755
533
4441

6873
2393
887
1089
12873

10876
62586

39994
147892

95
279
32
71
94

2126
2990
315
746
2390

6434
6210

53892
50535

1
1
1
1
1
1
2
1
1
1
1
1
0
1

1
1
0
0
1

1
1

8
3
4
4
15

2
4

3
4
6
5
5
4
10
9
2
4
9
5
2
5

5
2
2
1
4

2
2

25
9
13
12
47

16
16

483
93
444
120

22
8
7
9
21
1
21

685224
875713
325729
281903

7600545
5105039
1469679
2312497

161
31
148
40

word
darwinbookinter st [45]
Edinburgh Associative Thesaurus [46]
frenchbookinter st [45]
japanesebookinter st [45]
lasagne-spanishbook [43]
lasagne-yahoo [43]
spanishbookinter st [45]

7381
23132
8325
2704
12643
653260
11586

46281
311758
24295
8300
57451
2931706
45129

7
2
3
3
5
1
5

0.0361
0.0404
0.0118
0.0301
0.0085
5.2 × 10−6
0.0168

63392
49884
6543
3194
47110

4

40868

144954
395238
15834
7320
110228
67256
97112

4148
29328
908
604
4864
16
4128

References

[1] T. Opsahl, F. Agneessens, J. Skvoretz. Node centrality in weighted networks: General-

izing degree and shortest paths. Soc. Networks 32, 245–251 (2010).

[2] V. Colizza, R. Pastor-Satorras, A. Vespignani. Reaction-diﬀusion processes and metapop-

ulation models in heterogeneous networks. Nat. Phys. 3, 276–282 (2007).

[3] Tore Opsahl.

Why Anchorage

is

not

(that)

important:

Bi-

nary

ties

and

Sample

selection,

http://toreopsahl.com/2011/08/12/

why-anchorage-is-not-that-important-binary-ties-and-sample-selection/

(Date accessed: 1st March 2016).

[4] R. Milo, S. Shen-Orr, S. Itzkovitz, N. Kashtan, D. Chklovskii, U. Alon. Network motifs:

simple building blocks of complex networks. Science (New York, N.Y.) 298, 824–827

(2002).

[5] J. H. Fowler, T. R. Johnson, J. F. Spriggs, S. Jeon, P. J. Wahlbeck. Network analysis

and the law: Measuring the legal importance of precedents at the U.S. supreme court.

Polit. Anal. 15, 324–346 (2007).

[6] J. H. Fowler, S. Jeon. The authority of Supreme Court precedent. Soc. Networks 30,

16–30 (2008).

[7] J. Gehrke, P. Ginsparg, J. Kleinberg. Overview of the 2003 KDD Cup. ACM SIGKDD

Explor. 5, 149 (2003).

[8] J. Leskovec, J. Kleinberg, C. Faloutsos. Graphs over time: Densiﬁcation laws, shrinking

diameters and possible explanations. Proceedings of the eleventh ACM SIGKDD inter-

national conference on Knowledge discovery in data mining, Chicago, IL, USA, 21 to 24

August 2005, pp. 177–187.

6

[9] J. Leskovec, J. Kleinberg, C. Faloutsos. Graph evolution: Densiﬁcation and shrinking

diameters. ACM Trans. Knowl. Discov. Data 1, 2 (2007).

[10] B. Klimt, Y. Yang. The Enron corpus: A new dataset for email classiﬁcation research.

Proceedings of 15th European Conference on Machine Learning, Pisa, Italy, 20 to 24

September 2004, pp. 217–226.

[11] M. De Choudhury, H. Sundaram, A. John, D. D. Seligmann. Social synchrony: Predicting

mimicry of user actions in online social media. Proceedings of International Conference

on Computational Science and Engineering 4, Vancouver, BC, Canada, 29 to 31 August

2009, pp. 151–158.

[12] T. Opsahl, P. Panzarasa. Clustering in weighted networks. Soc. Networks 31, 155–163

(2009).

[13] R. Michalski, S. Palus, P. Kazienko. Matching organizational structure and social network

extracted from email communication. Proceedings of 14th International Conference on

Business Information Systems, Po´zan, Poland, 15 to 17 June 2011, pp. 197–206.

[14] V. G´omez, A. Kaltenbrunner, V. L´opez. Statistical analysis of the social network and

discussion threads in slashdot. Proceedings of the 17th international conference on World

Wide Web, Beijing, China, 21 to 25 April 2008, pp. 645–654.

[15] J. Leskovec, D. P. Huttenlocher, J. M. Kleinberg. Governance in social media: A case

study of the Wikipedia promotion process. Proceedings of Fourth International AAAI

Conference on Weblogs and Social Media, Washington, D.C., USA, 23 to 26 May 2010,

pp. 98–105.

[16] M. De Choudhury, Y.-R. Lin, H. Sundaram, K. S. Candan, L. Xie, A. Kelliher. How

does the data sampling strategy impact the discovery of information diﬀusion in social

media? IProceedings of Fourth International AAAI Conference on Weblogs and Social

Media, Washington, D.C., USA, 23 to 26 May 2010, pp. 34–41.

7

[17] L. A. Adamic, N. Glance. The political blogosphere and the 2004 US election: divided

they blog. Proceedings of the 3rd international workshop on Link discovery, Chicago, IL,

USA, 21 to 24 August 2005, pp. 36–43.

[18] M. Richardson, R. Agrawal, P. Domingos. Trust management for the semantic web.

Proceedings of the Second International Semantic Web Conference, Sanibel Island, FL,

USA, 20 to 23 October 2003, pp. 351–368.

[19] J. Leskovec, K.J. Lang, A. Dasgupta, M.W. Mahoney. Community structure in large

networks: Natural cluster sizes and the absence of large well-deﬁned clusters.

Internet

Math. 6, 29–123 (2009).

[20] J. Mcauley, J. Leskovec. Discovering social circles in ego networks. ACM Trans. Knowl.

Discov. Data 8, 1–28 (2014).

[21] J. Leskovec, D. Huttenlocher, J. Kleinberg. Signed networks in social media. Proceedings

of the SIGCHI Conference on Human Factors in Computing Systems, Atlanta, GA, USA,

10 to 15 April 2010, pp. 1361–1370.

[22] J. Leskovec, D. Huttenlocher, J. Kleinberg. Predicting positive and negative links in

online social networks. Proceedings of the 19th international conference on World wide

web, Raleigh, NC, USA, 26 to 30 April 2010, pp. 641–650.

[23] D. Baird, R. E. Ulanowicz. The seasonal dynamics of the Chesapeake Bay ecosystem.

Ecol. Monogr. 59, 329 (1989).

[24] J. D. Hagy. Eutrophication, hypoxia and trophic transfer eﬃciency in Chesapeake Bay.

PhD thesis, University of Maryland, 2002.

[25] M. Homer, W. M. Kemp. unpublished manuscript.

[26] R. E. Ulanowicz. Growth and Development: Ecosystems Phenomenology. (Springer New

York, New York, NY, 1986).

8

[27] R. E. Ulanowicz, J. J. Heymans, M. S. Egnotoivich. Network analysis of trophic dynamics

in south Florida ecosystems, FY 99: The Graminoid ecosystem. Technical report, Center

for Environmental Science, the University of Maryland, Solomons, MD, 2000.

[28] R. E. Ulanowicz, C. Bondavalli, M. S. Egnotovich. Network analysis of trophic dynamics

in south Florida ecosystem, FY 97: The Florida Bay ecosystem. Technical report,

Chesapeake Biological Laboratory, University of Maryland, Solomons, MD, 1998.

[29] J. Almunia, G. Basterretxea, J. Ar´ıstegui, R. E. Ulanowicz. Benthic-pelagic switching in

a coastal subtropical lagoon. Estuar. Coast. Shelf Sci. 49, 363–384 (1999).

[30] A. E. Krause. The role of compartments in food-web structure and changes following

biological invasions in southeast Lake Michigan. Ph.D thesis, Michigan State University,

2004.

[31] J. Patricio. Master’s thesis, University of Coimbra, Portugal, 2002.

[32] M. E. Monaco and R. E. Ulanowicz. Comparative ecosystem trophic structure of three

U.S. mid-Atlantic estuaries. Mar. Ecol. Prog. Ser. 161, 239–254 (1997).

[33] D. Correll. unpublished manuscript.

[34] D. Baird, J Luczkovich, R. R. Christian. Assessment of spatial and temporal variability

in ecosystem attributes of the St Marks national wildlife refuge, Apalachee Bay, Florida.

Estuar. Coast. Shelf Sci. 47, 329–349 (1998).

[35] N. Bhardwaj, K.-K. Yan, M. B. Gerstein. Analysis of diverse regulatory networks in

a hierarchical context shows consistent tendencies for collaboration in the middle levels.

Proc. Natl. Acad. Sci. U.S.A. 107, 6841–6846 (2010).

[36] M. Ripeanu, I. Foster. Mapping the Gnutella network: Macroscopic properties of large-

scale peer-to-peer systems. IEEE Internet Comput. J., 6, (2002).

9

[37] J. W. Scannell, G. A. P. C. Burns, C. C. Hilgetag, M. A. O’Neil, M. P. Young. The

connectional organization of the cortico-thalamic system of the cat. Cereb. Cortex 9,

277–299 (1999).

[38] L. R. Varshney, B. L. Chen, E. Paniagua, D. H. Hall, D. B. Chklovskii.

Structural

properties of the Caenorhabditis elegans neuronal network. PLOS Comput. Biol. 7,

e1001066 (2011).

[39] D. J. Felleman, D. C. Van Essen. Distributed hierarchical processing in the primate

cerebral cortex. Cereb. Cortex 1, 1–47 (1991).

[40] M. P. Young. The organization of neural systems in the primate cerebral cortex. Proc.

R. Soc. B 252, 13–18 (1993).

[41] M. Kaiser, C. C. Hilgetag. Nonoptimal component placement, but short processing paths,

due to long-distance projections in neural systems. PLOS Comput. Biol. 2, e95 (2006).

[42] R. K¨otter. Online retrieval, processing, and visualization of primate connectivity data

from the CoCoMac database. Neuroinformatics 2, 27–144 (2004).

[43] KONECT: the Koblenz Network Collection. http://konect.uni-koblenz.de/ (Date

accessed: 1st March 2016).

[44] R. Albert, A.-L. Barab´asi, H. Jeong. Diameter of the World-Wide Web. Nature 401,130–

131 (1999).

[45] R. Milo, S. Itzkovitz, N. Kashtan, R. Levitt, S. Shen-Orr, I. Ayzenshtat, M. Sheﬀer, U.

Alon. Superfamilies of evolved and designed networks. Science (New York, N.Y.) 303,

1538–1542 (2004).

[46] G. R. Kiss, C. Armstrong, R. Milroy, J. Piper. An associative thesaurus of English and

its computer analysis.

In The computer and literary studies, A.J. Aitken, R.W. Bailey,

N. Hamilton-Smith, Eds. (Edinburgh University Press, 1973), pp. 153–165.

10

