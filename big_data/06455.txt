6
1
0
2

 
r
a

 

M
1
2

 
 
]
P
A

.
t
a
t
s
[
 
 

1
v
5
5
4
6
0

.

3
0
6
1
:
v
i
X
r
a

Online estimation of driving events and fatigue

damage on vehicles

Roza Maghsood and Jonas Wallin

Mathematical Sciences,

Chalmers University of Technology,

SE-412 96 G¨oteborg, Sweden.

Abstract

Driving events, such as maneuvers at slow speed and turns, are impor-
tant for durability assessments of vehicle components. By counting the
number of driving events, one can estimate the fatigue damage caused
by the same kind of events. Through knowledge of the distribution of
driving events for a group of customers, the vehicles producers can tai-
lor the design, of vehicles, for the group. In this article, we propose an
algorithm that can be applied on-board a vehicle to online estimate the
expected number of driving events occurring, and thus be used to estimate
the distribution of driving events for a certain group of customers. Since
the driving events are not observed directly, the algorithm uses a hidden
Markov model to extract the events. The parameters of the HMM are
estimated using an online EM algorithm. The introduction of the online
EM is crucial for practical usage, on-board vehicles, due to that its com-
plexity of an iteration is ﬁxed. Typically, the EM algorithm is used to
ﬁnd the, ﬁxed, parameters that maximizes the likelihood. By introducing
a ﬁxed forgetting factor in the online EM, an adaptive algorithm is ac-
quired. This is important in practice since the driving conditions changes
over time and a single trip can contain diﬀerent road types such as city and
highway, making the assumption of ﬁxed parameters unrealistic. Finally,
we also derive a method to online compute the expected damage.

Keywords: Hidden Markov models; EM algorithm; online EM algorithm; driv-
ing events; expected damage, fatigue damage, vehicle engineering

1 Introduction

When designing vehicles components it is important to know the distributions
of loads expected to act on them. The life time of a component in a vehicle–
such as control arms, ball joints, etc.– is determined by its strength and the
loads acting on it. Where the eﬀect of a given force acting on a component is
well known, the distributions of loads, and hence forces, are more random. This

1

is because the distribution of the loads depends on the driving environment,
driver’s behavior, usage of the vehicle, and other things. For a more detailed
description of loads acting on vehicles see [16].

Although it is not ﬁnancially possible to design a vehicle for speciﬁc cus-
tomer, it is important to tailor the design for groups of customers, depending
on, for instance, geographical regions and usage. Obviously, components weakly
designed for the speciﬁc environments leads to increased costs due to call-backs
and badwill for the company, while too heavily designed components gives in-
creased material cost and unnecessarily heavy vehicles.

Traditionally, one has used a specially equipped test vehicle to study the
distributions of customer loads. This gives very precise measurements, but with
disadvantage of a statistically small sample size for the studied group. In addi-
tion, it is a very expensive way of acquiring data. However, all modern vehicles
are equipped with computers measuring many signals, known as Controller Area
Network (CAN) bus data, where the signal is for instance speed and lateral ac-
celeration. The goal of this article is to develop a statistical algorithm that uses
these signals, to extract information about the driving events for the speciﬁc
vehicle. This data can then be collected from several vehicles to generate a load
distribution for groups of customers.

The desired algorithm needs several key properties to be practically useful:
First, it obviously needs to be able to extract the driving events from the CAN
data. Second, since the data will be extracted over long periods of time the
computational cost of estimation of the driving events needs to be low.
It
is also desirable that the method does not require the storage of all the data.
Finally, the algorithm should allow for changing frequency of driving events over
time, since the frequency of driving events changes depending on the driving
environment such as highway driving or city driving.

To address the ﬁrst property, our algorithm uses a hidden Markov Model
(HMM) to extract the driving events from the CAN data. More speciﬁcally each
state in the HMM represents a driving state where we deﬁne a driving event
as a sequence of consecutive driving states. The CAN data for a given driving
state is assumed to follow a generalized Laplace (GAL) distribution. Laplace
distributions are well known methods to describe responses measured on driving
vehicles, see [34], [20] and [7]. The idea of using HMMs to identify driving events
has previously been used in for example Maghsood and Johannesson [23, 24],
Mitrovi´c [28, 29] and Berndt and Dietmayer [4].

For the HMM we divide the parameter into two sets: the transition matrix,
which is vehicle type independent, depending rather on the driving environment,
the driver’s behavior etc. The parameter of the GAL distribution is vehicle type
speciﬁc, and can thus be found in laboratory tests or in proving grounds. Thus
the second property, in the case of an HMM, is equivalent to eﬃciently es-
timating the transition matrix of driving states. In previous articles, the EM
algorithm has been used successfully to estimate the transition matrix,[25]; how-
ever an iteration of the algorithm has computational complexity O(n) (where
n is the number of observation) and is thus not practically feasible. Here, we
instead propose using the online EM algorithm from Capp´e [9] to estimate the

2

matrix. This gives the desired computational eﬃciency, since one iteration of
the algorithm has a computational cost of O(1).
The ﬁnal property is addressed by using a ﬁxed forgetting factor in the online
EM algorithm. Capp´e [9] proposes a diminishing forgetting factor to ensure that
the EM algorithm converges to a stationary point. However, this is not the goal
here and we do not want the algorithm to converge to a stationary point but
rather be an adaptive algorithm. The usage forgetting factors is a well-studied
area in automatic control, time series analysis and vehicle engineering [1, 22, 36].
Further, the algorithm also calculates online the expected damage for a given
component. This could be useful for the speciﬁc vehicle, on which the algorithm
is applied, by using the expected damage to tailor service times to speciﬁc vehicle
and components.

The paper is organized as follows: In the second section, the HMM and the
proposed online algorithm are presented. In the third section, the method for
estimating the fatigue damage is proposed. In the forth section, the algorithm
is applied to simulated data to verify its performance, and it is also evaluated
on real data, CAN data from a Volvo truck. The ﬁnal section contains the
conclusions of the paper.

2 Hidden Markov models

Hidden Markov models are statistical models often used in signal processing,
such as speech recognition and modeling the ﬁnancial time series, see for instance
Capp´e [10] and Frhwirth-Schnatter [13]. An HMM is a bivariate Markov process
{Zt, Yt}∞
t=0 where the underlying process Zt is an unobservable Markov chain
and is observed only through the Yt. The observation sequence Yt given Zt is
a sequence of independent random variables and the conditional distribution of
Yt depends only on Zt.

In this article, all HMMs are such that Zt takes values on a discrete space
{1, 2, . . . , m}, and the HMM is determined by two sets of parameters. The ﬁrst
set is the transition probabilities of Markov chain Zt:

q(i, j) = P (Zt+1 = j|Zt = i), i, j = 1, 2, ..., m.

(1)

The second set is the parameter vector, θ, of the conditional distribution of Yt
given Zt:

gθ(i, yt) = fYt(yt|Zt = i; θ), i = 1, 2, ..., m, yt ∈ R.

(2)

Here, we denote the set of parameters by Θ = (Q, θ) where Q = (q(i, j)) for
i, j = 1, 2, ..., m.

In an HMM, the state where the hidden process will start is modeled by the

initial state probabilities π = (πi), where πi is denoted by:

πi = P (Z0 = i), i = 1, 2, ..., m

i=1 πi = 1.

with Pm

3

2.1 Parameter estimation

For the parameter estimation in this article we use the EM (expectation maxi-
mization) algorithm, which is described below. The principle aim is to estimate
the transition matrix Q based on an observation sequence. For this, we use an
online EM algorithm, derived in [9]. To introduce the algorithm we ﬁrst describe
the EM algorithm and then describe the modiﬁcation needed for online usage
of the algorithm.

In our study, the parameter θ is not estimated recursively, but rather found
through maximum likelihood estimation on a training set. This is because
the conditional distribution of Yt given Zt in our case study represents the
vehicle speciﬁc data which can be estimated under well-deﬁned conditions on
the proving ground.

2.2 The EM algorithm

Here, we present the EM algorithm following Capp´e [9]. The EM algorithm is a
common method for estimating the parameters in HMMs. It is an optimization
algorithm to ﬁnd the parameters that maximize the likelihood. The algorithm
is both robust – it does not diverge easily– and is often easy to implementation.
The EM algorithm is an iterative procedure. If the distribution of complete-
data (Zt, Yt) given Zt−1, p(zt, yt|zt−1), belongs to an exponential family, then
the nth iteration consists of the two following steps:

• The E-step, where the conditional expectation of the complete-data suﬃ-
cient statistics, s(Zt−1, Zt, Yt), given the observation sequence Y0, Y1, ..., Yt
and Θ(n), is computed,

S(n+1)

t

=

1
t

E" t
Xl=1

s(Zl−1, Zl, Yl)(cid:12)(cid:12)(cid:12)(cid:12)

Y0, ..., Yt; Θ(n)# ,

(3)

• The M-step, where the new parameter value Θ(n+1) is calculated using

, which can be formulated as Θ(n+1) = f (S(n+1)

S(n+1)

).

t

t

The sequence Θ(n) converges to a stationary point of the likelihood function,
for more details see [9].

For our speciﬁc model, where the parameter of interest is Q, the suﬃcient

statistics in the E-step is:

S(n+1)
t

(i, j) =

1
t

E" t
Xl=1

I(Zl−1 = i, Zl = j)(cid:12)(cid:12)(cid:12)(cid:12)

Y0, ..., Yt; Θ(n)# .

(4)

Thus St(i, j) is the expected number of transitions from state i to state j given
Y0, ..., Yt and Θ. For Q = (q(i, j)), the M-step is given by:

q(n+1)(i, j) =

(i, j)

S(n+1)
t
j=1 S(n+1)

t

(i, j)

Pm

4

.

(5)

2.2.1 Recursive formulation of the E-step

Zeitouni and Dembo [40] noted that the conditional expectation of the complete-
data suﬃcient statistics St can be computed recursively. To see this, deﬁne

φt(k) = P (Zt = k|Y0, ..., Yt; Θ),
ρt(i, j, k) =

E[

1
t

t

Xl=1

I(Zl−1 = i, Zl = j)|Y0, ..., Yt, Zt = k; Θ],

(6)

(7)

then St(i, j) can be written as St(i, j) =Pm

k=1 φt(k)ρt(i, j, k).

Note that (φt)k = φt(k) is an N -dimensional (row) vector. For a vector a, let
D(a) be a diagonal matrix where D(a)kk = ak. The recursive implementation
of the EM algorithm, using the observation sequence Y0, Y1, ..., YT , is initialized
with

φ0 =

πD(gθ(k, y0))
(πD(gθ(k, y0)))1′ , and ρ0(i, j, k) = 0,

for all 1 ≤ i, j, k ≤ m. Let gθ(yt) = (gθ(1, yt), gθ(2, yt), ..., gθ(m, yt)) and 1 =
(1, 1, ..., 1). Then, for nth iteration and t ≥ 1, the components are updated as
follows:

φt+1 =

1(D(φt)Q(n)D(gθ(yt)))
1(D(φt)Q(n)D(gθ(yt)))1′ ,

ρt+1(i, j, k) = γt+1I(j − k)rt+1(i|j) + (1 − γt+1)

(8)

m

Xk′=1

ρt(i, j, k′)rt+1(k′|k),(9)

where rt+1 = D(φt./1(D(φt)Q(n)))Q(n) and ./ represents the element-wise
division of two matrices. The forgetting factor, γt, equals 1/t.

Note that in nth iteration of EM algorithm, all elements in φ1, φ2, ..., φt and
ρ1, ρ2, ..., ρt depends on Q(n). Thus, for updating Q in (n + 1)th iteration, all
elements of the two quantities need to be recalculated. Therefore one needs to
store the entire observation vector to use the EM-algorithm.

2.3 Online estimation of HMM parameters

As we will see soon, the online EM algorithm remedies the issue of requiring
the entire observation vector to estimate parameters. Here we use the notation
ˆQt rather then Q(t). This is because, as we will see, one can not compute more
than one iteration at each time point t for the online EM.

The terms ˆφ0 and ˆρ0(i, j, k) are initialized the same way as in the regular
EM algorithm. For t = 0, 1, . . . the components are updated as follows: (the

5

E-step)

ˆφt+1 =

1(D(φt) ˆQtD(gθ(yt)))
1(D(φt) ˆQtD(gθ(yt)))1′

,

ˆρt+1(i, j, k) = γt+1I(j − k)ˆrt+1(i|j) + (1 − γt+1)

(10)

m

Xk′=1

ˆρt(i, j, k′)ˆrt+1(k′|k),(11)

where ˆrt+1 = D( ˆφt./1(D( ˆφt) ˆQt)) ˆQt. And in the M-step, the transition matrix
ˆQt+1 = (ˆqt+1(i, j)) is updated by:

ˆqt+1(i, j) =

,

(12)

ˆSt+1(i, j)

ˆSt+1(i, j)

j=1

Pm

where ˆSt+1(i, j) =Pm

k=1

ˆφt+1(k)ˆρt+1(i, j, k).

As can be seen, Eqs. (10) and (11) are the modiﬁcations of Eqs. (8) and (9)
where ˆφ1, ˆφ2, ..., ˆφt and ˆρ1, ˆρ2, ..., ˆρt did not depend on the parameter Q, but
rather ˆQt, and thus do not need to be recalculated.

t=1 is chosen such that P∞

In the proposed online EM algorithm by Capp´e [9], a decreasing sequence of
forgetting factors {γt}∞
t < ∞.
The choice of γt strongly aﬀects the convergence of the parameters. To converge
to a stationary point one can choose γt = 1/tα with 0.5 < α < 1, which is the
common choice suggested in [9]. By setting γt to a ﬁxed value, the algorithm
will never converge to any ﬁxed point but behave like a stochastic processes. As
we will see later, this can be useful when the data comes from a non-stationary
process, where the parameters are not ﬁxed over time.

t=1 γt = ∞ and P∞

t=1 γ2

2.3.1 Setting forgetting factor

When using a ﬁxed value for γt (= γ) it is crucial that this value is well chosen.
A smaller γ gives a more stable parameter trajectory, at the price of a slower
adaptation. In the present form, it can be hard to see what a reasonable value
of γ is. To show this clearly, we introduce two explanatory parameters (K,
R), which represent the weight, R, that is put on the K latest observations,
when estimating Q. So for instance, if K = 100, and R = 0.9, then the weight
given to the hundred latest observations is such that, they represent 90% of the
information from the data used to estimate the parameters.

To link the parameters K and R to γ, note that (11) is approximately a

geometric series with ratio γ, thus approximately it holds that

K

γ

Xi=0
(1 − γ)i = R.

(13)

This gives an explicit γ for each (R, K).

6

A further issue is that in general, one observations does not contain equal
information about all the entires in Q, some states (events) might occur rarely
and thus most observations contain no information about the corresponding
column in the transition matrix. To address this, one can set a separate γ
for each column. One way is to set γt,i = γ · (πt)i where πt is the averaged
stationary distribution vector deﬁned below.

2.4 Online estimation of the number of events

In previous work, see Maghsood, Rychlik and Wallin [25], the Viterbi algorithm
was used to calculate the number the driving events. However, the Viterbi
algorithm requires access to the entire data sequences and thus can not be used
for online estimation when the data is not stored.
Instead we compute the
expected number of events as follows:

Suppose that at each time t, the Markov chain {Zt} with transition matrix
Qt by solving equation (Qt − I)πt = 0, one gets the stationary distribution
of Qt . If the data comes from a stationary distribution then πt would be the
stationary distribution of {Zt}. If the data is not stationary one could estimate
the stationary distribution by taking the average, over time, of πt. By the same
reasoning we estimate the expected number of ith event up to time T as

ηi(T ) = E[

ξi(t)] =

T

Xt=1

T

Xt=1Xj6=i

πt,jqt(j, i),

(14)

where ξi(t) =Pj6=i I(Zt = j, Zt+1 = i).

The above formula works if we substitute Qt with the online estimate ˆQt
for each t. Then, one can compute and update the number of events based on
each new observation.

2.5 HMMs with Laplace distribution

As mentioned in the introduction, we set the conditional distribution of Yt
given Zt, denoted by gθ(i, yt), to be a generalized asymmetric Laplace distribu-
tion (GAL), see [18]. The GAL distribution is a ﬂexible distribution with four
parameters: δ− location vector, µ− shift vector, ν > 0− shape parameter, and
Σ− scaling matrix and denoted by GAL(δ, µ, ν, Σ). The probability density
function (pdf) of a GAL(δ, µ, ν, Σ) distribution is

g(y) =

1

Γ(1/ν)√2π  p(y − δ)T Σ−1(y − δ)

c2

1/ν−d/2

2

!

e(y−δ)Σ−1 µ

K1/ν−d/2(cid:18)c2q(y − δ)T Σ−1(y − δ)(cid:19) ,
where d is the dimension of Y , c2 = p2 + µT Σ−1µ and K1/ν−d/2(.) is the

modiﬁed Bessel function of the second kind. The normal mean variance mixture

7

representation can give an intiutive feel of the distribution. That is a random
variable Y having GAL distribution and the following equality works:

d= δ + Γµ + √ΓΣ1/2Z,

Y

where Γ is a Gamma distributed random variable with shape 1/ν and scale one,
and Z is a vector of d independent standard normal random variable. For more
details see [2].

3 Estimation of fatigue damage

Fatigue is a random process of material deterioration caused by variable stresses.
For a vehicle, stresses depend on environmental loads, like road roughness, ve-
hicle usage or driver’s behavior.

Often, the rainﬂow cycles are calculated in order to describe the environ-
mental loads [18], and the fatigue damage is then approximated by a function
of the rainﬂow cycles.

Typically, the approximations are done in order to reduce the length of the
load signals storing only the events relevant for fatigue. The reduced signal is
then used to ﬁnd the fatigue life of components in a laboratory (or to estimate
the fatigue life mathematically). The reduction is mainly done in order to speed
up the testing which is very expensive (or simplify calculations).

In this section, we present a method to approximate the environmental load
using driving events. The method is similar to a well-known method in fatigue
analysis, the rainﬂow ﬁlter method [16]. We show that one can explicitly calcu-
late the expected damage intensity (which describes the expected life time of a
component) online.

We start with a short introduction to rainﬂow cycles and expected damage,
then show the approximation method that uses the driving event to derive the
expected damage.

3.1 Rainﬂow counting distribution and the expected dam-

age

The rainﬂow cycle count algorithm is one of the most commonly used methods
to compute fatigue damage. The method was ﬁrst proposed by Matsuishi and
Endo [26]. Here, we use the deﬁnition given by Rychlik [31] which is more
suitable for statistical analysis of damage index. The rainﬂow cycles are deﬁned
as follows.

Assume that a load LT , the processes up to time T , has N local maxima.
Let Mi denote the height of ith local maximum. Denote m+
i ) the mini-
i
mum value in forward (backward) direction from the location of Mi until LT
crosses Mi again. The rainﬂow minimum, mrf c
, is the maximum value of m+
i
and m−
, Mi) is the ith rainﬂow pair with the rainﬂow range
hi(LT ) = Mi − mrf c
. Figure 1 illustrates the deﬁnition of the rainﬂow cycles.

i . The pair (mrf c

(m−

i

i

i

8

max

h

min rfc

Figure 1: The rainﬂow cycle.

By using the rainﬂow cycles found in LT , the fatigue damage can be deﬁned

by means of Palmgren-Miner (PM) rule [30], [27],

N

Dβ(LT ) = α

hi(LT )β,

(15)

where α, β are material dependent constants. The parameter α−1 is equal to the
predicted number of cycles with range one leading to fatigue failure (throughout
the article it is assumed that α equals one). Various choices of the damage
exponent β can be considered, like β = 3 which is the standard value for the
crack growth process or β = 5 which is often used when a fatigue process is
dominated by the crack initiation phase.

A more convenient representation, from computational viewpoint, of damage

is:

Xi=1

Dβ(LT ) = β(β − 1)Z +∞

−∞ Z v

−∞

(v − u)β−2N osc(u, v) du dv,

(16)

where N osc(u, v) is the number of interval ([u, v]) upcrossing by a load, see [33]
for details.

Since LT is a random process, one uses the expected damage as a tool to

describe damage. The damage intensity of a process is

dβ = lim
T →∞

1
T

E[Dβ(LT )].

Finally, using Eq. (16), we get that

where

dβ = β(β − 1)Z +∞
−∞ Z v

−∞

(v − u)β−2µosc(u, v) du dv,

µosc(u, v) = lim
T →∞

E [N osc(u, v)]

T

.

which is called the intensity of interval up-crossings.

(17)

(18)

(19)

9

3.2 Reduced load and expected damage given driving events

In general the lateral loads are not available and will vary between vehicles. The
reduced load, we propose below, is constructed using estimated frequencies of
driving events from the HMM, and the distributions of extreme loads associated
with driving events, which can be measured on testing grounds or in laboratories.
We now describe how to construct a reduced load from the driving events left
turn, LT , and right turn, RT (the method could of course be generalized to other
driving events); these events are known to cause the majority of the damage for
steering components. Let {Zt}T
t=0 be the hidden processes in a HMM, with three
possible driving states right turn, left turn or straight forward, at time t. Here,
i as the driving event representing the ith turn, occurring in the
we deﬁne Z ∗
time interval [ti,start, ti,stop], and is equal one if the turn is left, and two if the
turn is right. The relation between the two sequences {Z ∗
t=0 is
that the event {Z ∗
i = 2}) is equivalent to that Zti,start , ..., Zti,stop
are all equal to, the same driving state, left turn (or right turn).
Now to create the reduced load, from the sequence driving events, assume
that Mi and mi are the ith maximum and minimum load during a turn, that is

i = 1}( or {Z ∗

i }N

i=0 and {Zt}T

Mi = max
t∈Ii

Lt,

mi = min
t∈Ii

Lt,

(20)

where Ii = [ti,start, ti,stop] represents the start and stop points of ith turn. The
reduced load {Xi}N

i=0 is deﬁned as follows

0,
Mi/2,
mi/2,

if i is odd integer,
if Z ∗
if Z ∗

i = 1, i is even integer,
i = 2, i is even integer.

(21)

Xi =


Here the zeros are inputed since between each left and right turn event there
must be a straight forward event. Figure 2 illustrates a lateral load and the
corresponding reduced load.

10

X
0

Z*
=1
0

2.5

2

1.5

1

0.5

0

−0.5

−1

−1.5

−2

d
a
o
L

X
3

X
5

X
4

X
6

X
1

X
2

Z*
=2
1

−2.5
t
0,start

0

t
0,stop

t
1,start

t
1,stop
Time(s)

80

Figure 2: Reduced load represented by dots where the observed load is repre-
sented by the irregular solid line.

To compute the damage intensity dβ, per driving event, one needs the interval
up-crossing intensity µosc(u, v) of {Z ∗
i=0 and
{mi}N
i=0 are sequences of iid r.v, and that the transition matrix P of Z ∗ is known
(it can be derived from transition matrix Q in the HMM, see Appendix A), one
gets the closed form solution

i=0. Assuming that both {Mi}N

i }N

µosc(u, v) =

π′
2P (m1 < u),
u < v < 0,
π′
2 P (m1 < u) p2(u, v), u ≤ 0 ≤ v,
π′
0 < u < v.
1P (M1 > v),

(22)

1

2


Here π′ = (π′
derived from the systems

1, π′

2) is the stationary distribution of the P and p2(u, v) can be

pj(u, v) = p(j, 1)P (M1 > v) + P (M1 ≤ v) p(j, 1) p1(u, v)

+ P (m1 ≥ u) p(j, 2) p2(u, v), j = 1, 2.

(23)

For more details see [25].

4 Examples

We evaluate the proposed algorithm with simulated and measured data sets.
We consider the steering events occurring when the vehicle is driving at a speed
higher than 10 km/h, e.g. when driving in curves. We estimate the number of
left and right turns for a costumer. We further investigate the damage caused by
steering events and compute the expected damage using the online estimation
of transition matrix.

11

In our simulation study, a training set is used to estimate the parameters of
the model which contains all steering events. We also use the simulation study
to show the eﬀects of diﬀerent values of forgetting factor γ.

Finally, we use the measured data which is dedicated ﬁeld measurements
from a Volvo Truck. The measured signals come from the CAN (Controller
Area Network) bus data, which is a systematic data acquisition and contains
customer data.

4.1 Simulation study

We want to imitate a real journey during diﬀerent road environments, such as
city streets and highways. This is done by ﬁrst generating a sequence of steering
states using a Markov chain. We consider three states right turn (RT), left turn
(LT) and straight forward (SF). We set these events as three hidden states and
construct the HMM based on them as follows: We assume that the probabilities
of going from a right turn to a left turn and vice versa are small and most
often we will have straight forward after a right or a left turn. It has been also
assumed that the average duration of straight forward during a city road is less
than highway. Two diﬀerent transition matrices Qcity and Qhighway have been
considered for city and highway respectively:

SF
0.1

RT
LT
0.85
0.05
0.025 0.95 0.025
0.05

0.85 

0.1

Qcity =

RT
SF
LT




SF
0.08

RT
LT
0.90
0.02
0.005 0.99 0.005
0.02

0.08

0.90 
.

RT
SF
LT




, Qhighway =

Second, we use Laplace distribution to simulate the lateral acceleration sig-

nal, Yt. The Laplace parameters (δ, µ, ν, Σ) for each state are set as follows:

• δRT = −δLT = −1, δSF = 0,
• µRT = −µLT = −0.5, µSF = 0,
• νRT = νLT = 10, νSF = 0.5,
• ΣRT = ΣLT = 0.2, ΣSF = 1.

The ﬁtted distributions for lateral acceleration values within each state are
shown in Figure 3.

12

(a)

Laplace Distribution

Right turn

(b)

Laplace Distribution

Straight forward

0.2

0.15

0.1

0.05

0

3

2.5

2

1.5

1

0.5

0
−6

−15

−10

−5

0

(c)

Laplace Distribution

Left turn

0.2

0.15

0.1

0.05

−4

−2

0

2

4

6

0

0

5

10

15

Figure 3: (a), (b) and (c) represent the Laplace distributions ﬁtted on lateral
acceleration values for right turns, straight forward and left turns respectively.

We compare four diﬀerent values of γt for the estimation of the transition
matrix. First, we set γt = 1/tα where α = 0.9. This value of forgetting factor
satisﬁes the convergence conditions given by Capp´e [9]. Second we use three
diﬀerent values of ﬁxed γ, 0.01, 0.002 and 0.001–corresponding to R = 0.9 and
K = 200, 1000 and 2400 (which corresponds to a duration 2 min, 10 min, and
20 min) in Eq. (13). Figure 4 shows the estimated diagonal elements of the
transition matrices for one simulated signal. The simulated signal represents a
journey on a city road, a highway and then back to a city road and again highway
over 105 seconds, where the sampling period is 1/2 seconds. The straight thick
black lines show the diagonal elements of true transition matrices Qcity and
Qhighway.

City road + Highway + City road + Highway

α
γ=1/t
− for α=0.9

γ=0.01

1

0.95

0.9

0.85

.

b
o
r
P

0.8

0

2

1

0.9

0.8

.

b
o
r
P

8

10
x 104

0.7

0

2

4

6

Time
γ=0.002

.

b
o
r
P

1

0.95

0.9

0.85

0.8

0

.

b
o
r
P

1

0.95

0.9

0.85

0.8

 
0

2

4

Time

6

8

10
x 104

4

Time

6

γ=0.001

8

10
x 104

 

2

4

Time

6

8

10
x 104

q(1,1)
q(2,2)
q(3,3)

Figure 4: Diagonal elements of online estimated transition matrix, simulated
signal from City road+Highway+City road+Highway, with four diﬀerent values
of γ. Straight thick black lines show the diagonal elements of true transition
matrices Qcity and Qhighway.

13

In Figure 4, one can see that the online algorithm with variable γ can not
follow the changes of the parameters well and that the adaption diminishes over
time, as is to be expected. The ﬁxed forgetting factor, however, seems to adapt
well to the chaining environment.

Expected number of events

Here, we compute the expected number of turns. We simulate independently
hundred signals in order to investigate the accuracy of the online algorithm with
diﬀerent forgetting factors γ. In that case, we choose as before four diﬀerent
values of forgetting factors, which the ﬁxed values correspond to the weight
R = 0.9 given by the K = 200, 1000 and 2400 latest observations in Eq. (13).

We perform 100 simulations and estimate the intensities of occurrences of

turns by Eq. (14):

T

ηLT =

ηRT =

(πt,2 ˆqt(2, 3) + πt,1 ˆqt(1, 3)),

(πt,2 ˆqt(2, 1) + πt,3 ˆqt(3, 1)).

T

Xt=1
Xt=1

(24)

(25)

In order to validate the results, we compute an error rate which is the diﬀerence
between the estimated and observed number of turns in each simulation. The
expected number of turns from the model (using Qcity and Qhighway) are ηLT =
ηRT = 2840. The average number of observed left and right turns are nLT =
2834 and nRT = 2836, respectively. The average and the standard deviations of
errors for 100 simulations are computed. The results are presented in Table 1.
According to the average error, the forgetting factor γt = 0.002 performs the
best. However there is, surprisingly, only a small diﬀerence between all the ﬁxed
forgetting factors.

Table 1: The expected number of turns estimated by online algorithm and
Eqs. (24), (25). The errors are the average of the diﬀerences between the esti-
mated and observed number of turns.

Online algorithm

γt
Turns
Mean Est.
Mean Error
Std Error

1/t0.9

ηLT
3236
402.48
28.45

ηRT
3241
405.30
33.78

0.01

0.002

0.001

ηLT
2928
94.40
15.41

ηRT
2932
96.46
15.79

ηLT
2882
48.45
16.61

ηRT
2886
49.93
17.77

ηLT
2920
86.84
20.65

ηRT
2924
88.68
21.43

In our previous work, an HMM combined with a Viterbi algorithm [37] has
been used to identify the driving events. The Viterbi algorithm gives a recon-
structed sequence of events which maximizes the conditional probability of the

14

observation sequence. In that approach, all data has to be used to estimate the
driving events and is thus not suitable to on-board usage in a vehicle. However,
in order to compare the previously proposed approach with the online estimation
and to evaluate the frequencies of driving events, we also compute the number
of turns by the Viterbi algorithm for each simulation. The counted number of
turns from the Viterbi algorithm are on average ηLT = 2923 and ηRT = 2925.
One can see that the Viterbi algorithm overestimates the number of turns.

Damage investigation

In this section we compute the damage intensity based on online estimation of
transition matrix per kilometer. We use one of the simulated lateral acceleration
signals in order to calculate the damage. The speed of the vehicle is considered
50 kilometers per hour and the mileage is 1000 km (for a sampling period of 1/2
seconds). We split the signal into 1000 equally sized frames. For each frame,
the expected number of turns are computed by ∆ηk = ηk − ηk−1 where ηk is the
estimated number of turns occurring up to kth frame. The expected damage
based on turns for each frame is calculated by:

∆dk = ∆ηkdk,

where dk is the expected damage per turn and calculated by means of Eqs. (18)
and (22). The empirical distribution of Mi and mi are used to calculate the in-
tensity of interval crossings µosc(u, v). We use the online estimation of transition
matrix Q with γ = 0.002 to estimate the transition matrix P by using Eqs. (28)
and (27), see Appendix A. The result for damage exponent β = 3 is shown in
Figure 5. The straight thick red line shows ∆dk(Qtrue) which is the damage
intensity computed using the model transition matrices Qcity and Qhighway for
city and highway respectively. We can observe the change in damage between
highway and city road. As might be expected the damage intensities (per km)
estimated for the city are higher than for highway, since the number of turns
occurring in a city road are larger than on a highway.

15

4000

3500

3000

2500

k

d
 
∆

2000

1500

1000

500

0

 
0

Online algorithm with γ=0.002

β=3

 

∆ dk
∆ dk(Qtrue)

100

200

300

400

500

Distance(km)

600

700

800

900

1000

Figure 5: Damage intensity per km according to the online estimation of transi-
tion matrix with γ = 0.002. The upper plot shows the results for damage expo-
nent β = 3. The straight thick red line shows ∆dk(Qtrue) which is the damage
intensity computed using model transition matrices Qcity and Qhighway for city
and highway, respectively.

estimation of transition matrix– is equal to P1000

Further, the expected damage from the model (theoretical damage) is com-
pared with the total damage and the damage calculated from the reduced load.
One can see that the expected damage for the whole signal – based on online
k=1 ∆dk. The total damage is
calculated from the lateral acceleration signal using the rainﬂow method. The
damage evaluated for the load (lateral acceleration), reduced load and the ex-
pected damage is compared in Table 2. The numerical integration in (18) as well
as the rainﬂow cycle counting has been done using the WAFO (Wave Analysis
for Fatigue and Oceanography) toolbox, see [8, 38].

Table 2: Comparison of damage computed for the simulated load, the corre-
sponding reduced load and the expected damage.

Damage

β = 3
β = 5

Total
1.88 · 106
1.77 · 108

Reduced load

Expected

Online with γ = 0.002

1.68 · 106
1.72 · 108

1.68 · 106
1.67 · 108

Figure 5 and Table 2 demonstrate high accuracy of the proposed approach
to estimate the expected damage for the studied load. Obviously this load is a
realistic mathematical model of a real load. In the next section we will apply our
method to estimate the steering events and compute the damage for a measured
load on a VOLVO truck.

16

4.2 On-board logging data from Volvo

To evaluate the method on a real data set, we study ﬁeld measurements coming
from a Volvo Truck. We use the measured lateral acceleration signal from the
CAN (Controller Area Network) bus data.

We ﬁt the Laplace distribution for the lateral acceleration within each steer-
ing state. To estimate the Laplace distribution parameters considered, we need
a training set which contains all history about the curves. We detect the events
manually by looking at video recordings from the truck cabin to see what hap-
pened during the driving. The manual detections are not completely correct
because of the visual errors and the low quality of videos used for the manual
detection.

The online algorithms are used to count the number of left and right turns.

Figure 6 shows the estimation results using online algorithm with γt = 0.0008 (R =
0.8, K = 2000) for the measured signal. It is interesting to note that there is a
sudden change in the driving environment after around 5000 sec.

.

b
o
r
P

1

0.99

0.98

0.97

0.96

0.95

0.94

0.93

0.92

 
0

Online algorithm with γ=0.0008

 

2000

4000

6000

8000

10000

Time (s)

12000

14000

16000

18000

q(1,1)
q(2,2)
q(3,3)

Figure 6: Diagonal elements from online estimation of transition matrix with
γt = 0.0008 for measured data

The expected number of left and right turns computed by online algorithm

are ηLT = 228 and ηRT = 241 respectively.

Damage investigation

Here, we compute the damage intensity based on the model. In order to do that
we split data into the frames containing 250 seconds (approximately 4-5 km)
of measurement and we compute the distance based on the average speed in
each frame. Figure 7 shows the expected damage based on turns computed by
∆dk = ∆ηkdk where ∆ηk = ηk − ηk−1 and nk is the estimated number of turns

17

occur over k kilometers. Here, the results are based on the damage exponent
β = 3.

Expected damage 

Online algorithm with γ=0.0008

k

d
∆

 

200

180

160

140

120

100

80

60

40

20

0

0

50

100

150
Distance (km)

200

250

Figure 7: Damage intensity with damage exponent β = 3 regarding mileage.
The online estimation of transition matrix with γ = 0.0008 has been used to
estimate the expected damage.

The total expected damage using online estimation of transition matrix can

be computed by Pk=1 ∆dk. The damage evaluated for the load (lateral accel-

eration), reduced load and the expected damage is compared in Table 3. The
Rayleigh distributions which have been ﬁtted to positive and negative values of
the reduced load are

P (M1 > v) = e− 1

2 ( v

2.2 )2

, v ≥ 0,

P (m1 < u) = e− 1

2 ( u

2.3 )2

, u ≤ 0.

Table 3: Comparison of damage values computed from the measured load, the
corresponding reduced load and the expected damage.

Damage

β = 3
β = 5

Total
8.1 · 103
1.5 · 105

Reduced load

Expected

Online with γ = 0.0008

7.4 · 103
1.5 · 105

7.7 · 103
1.9 · 105

We also compare the damage accumulation process from the model,Pk=1 ∆dk,

with the empirical accumulated damage in the signal. The expected damage
based on ﬁtted model will be called the theoretical damage. Figure 8 shows the
theoretical and observed accumulated damage processes. It can be seen that

18

the accumulated damage from the model is close to the observed damage and
there are two damage rates in both theoretical and observed damage processes.

9000

8000

7000

6000

5000

4000

3000

2000

1000

x
e
d
n
i
 
e
g
a
m
a
D

Accumulated damage

 

Observed

Theoretical

0

 
0

50

100

150

Distance (km)

200

250

Figure 8: The theoretical and observed accumulated damage processes for dam-
age exponent β = 3. The online estimation of transition matrix with γ = 0.0008
has been used to estimate the expected damage.

Results shown in Figure 8 and Table 3 demonstrate the accuracy of the

proposed methodology for this measured load.

5 Conclusion

In this article, we have derived a method to estimate the number of driving
events for a vehicle using the CAN data through the use of an HMM. The
method uses an online EM algorithm to estimate the parameters of the HMM.
The online version has three major advantages over the regular EM algorithm,
making it possible to implement the method on-board a vehicle: the computa-
tional complexity of each iteration of the algorithm is O(1), making it a com-
putationally tractable method; the parameters are estimated without the need
to store any data; the formulation of the online algorithm allows for an adap-
tive parameter estimation method, using a ﬁxed forgetting factor, so that the
parameters can adapt over chaining driving environment.

The proposed estimation algorithm was validated using simulated and mea-
sured data sets. The results show that the online algorithm works well and can
adapt to a chaining environment when the driving conditions are not constant
over time.

19

Acknowledgment

We are thankful to Prof. Igor Rychlik and Dr. P¨ar Johannesson for their useful
ideas and helpful suggestions in this study. We would like to thank Volvo Trucks
for supplying the data in this study and to the members in our research group at
Volvo for their valuable advice. Finally, we gratefully acknowledge the ﬁnancial
support from VINNOVA. The second author has been supported by the Knut
and Alice Wallenberg foundation.

References

[1] L Arvastson, H Olsson, and J Holst. Asymptotic bias in parameter estima-
tion of ar-processes using recursive least squares with exponential forget-
ting. Scandinavian Journal of Statistics, 27(1):177–192, 2000.

[2] O. Barndorﬀ-Nielsen, J. Kent, and M. Sorensen. Normal variance-mean
mixtures and z distributions. International Statistical Review, 50:145–159,
1982.

[3] A. K. Bengtsson and I. Rychlik. Uncertainty in fatigue life prediction of
structures subject to gaussian loads. Probabilistic Engineering Mechanics,
2009.

[4] H. Berndt and K. Dietmayer. Driver intention inference with vehicle on-
board sensors. In IEEE International Conference on Vehicular Electronics
and Safety (ICVES), pages 102–107, Pune, 11-12 November 2009.

[5] A. Beste, K. Dressler, H. K¨otzle, W. Kr¨uger, B. Maier, and J. Petersen.
Multiaxial rainﬂow – a consequent continuation of Professor Tatsuo Endo’s
work. In Y. Murakami, editor, The Rainﬂow Method in Fatigue, pages 31–
40. Butterworth-Heinemann, 1992.

[6] Bishop and Sherratt. A theoretical solution for estimation of rainﬂow ranges
from power spectral density data. Fatigue Frac Eng Mater Struct, 13:311–
326, 1990.

[7] K. Bogsj¨o, K. Podgorski, and I. Rychlik. Models for road surface roughness.

Vehicle System Dynamics, 50:725–747, 2012.

[8] P. A. Brodtkorb, P. Johannesson, G. Lindgren, I. Rychlik, J. Ryd´en, and
E. Sj¨o. WAFO – a Matlab toolbox for analysis of random waves and loads.
In Proceedings of the 10th International Oﬀshore and Polar Engineering
conference, Seattle, volume III, pages 343–350, 2000.

[9] O. Capp´e. Online EM algorithm for hidden Markov models. Journal of

Computational and Graphical Statistics, 20:3:728–749, 2011.

[10] O. Capp´e, E. Moulines, and T. Ryd´en, editors. Inference in Hidden Markov

Models. Springer, 2005.

20

[11] A. P. Dempster, N. M. Laird, and D. B. Rubin. Maximum likelihood from
incomplete data via EM algorithm. Journal of the Royal Statistical Society.
Series B (Methodological), 39(1):1–38, 1977.

[12] M. Frendahl and I. Rychlik. Rainﬂow analysis - Markov method. Int. J.

Fatigue, 15:265–272, 1993.

[13] Sylvia Fr¨uhwirth-Schnatter. Finite Mixture and Markov Switching Models.

Springer, 2006.

[14] P. Johannesson. Rainﬂow cycles for switching processes with Markov struc-
ture. Probability in the Engineering and Informational Sciences, 12:143–
175, 1998.

[15] P. Johannesson. Rainﬂow Analysis of Switching Markov Loads. PhD thesis,

Lund Institute of Technology, 1999.

[16] P. Johannesson and M. Speckert, editors. Guide to Load Analysis for Dura-

bility in Vehicle Engineering. Wiley:Chichester, 2013.

[17] M. Karlsson. Load Modelling for Fatigue Assessment of Vehicles – a Sta-
tistical Approach. PhD thesis, Chalmers University of Technology, Sweden,
2007.

[18] S. Kotz, T. Kozubowski, and K. Podgorski. The Laplace distribution and
generalizations: a revisit with applications to communications, economics,
engineering, and ﬁnance. Springer Science & Business Media, 2001.

[19] S . Krenk and H. Gluver. A markov matrix for fatigue load simulation and

rainﬂow range evaluation. Struct Saf, 6:247–258, 1989.

[20] M. Kvanstr¨om, K. Podg´orski, and I. Rychlik. Laplace moving average
model for multi-axial responses in fatigue analysis of a cultivator. Proba-
bilistic Engineering Mechanics, 34:12–25, 2013.

[21] G. Lindgren and KB. Broberg. Cycle range distributions for gaussian pro-

cesses - exact and approximate results. Extremes, 7:69–89, 2004.

[22] Lennart Ljung and Torsten S¨oderstr¨om. Theory and practice of recursive

identiﬁcation. 1983.

[23] R. Maghsood. A statistical approach for detecting driving events and evalu-
ating their fatigue damage, Lic. Thesis, Chalmers University of Technology,
2014.

[24] R. Maghsood and P. Johannesson. Detection of the curves based on lateral
acceleration using hidden Markov models. Procedia Engineering, 66:425–
434, 2013.

21

[25] R. Maghsood, I. Rychlik, and J. Wallin. Modeling extreme loads acting on
steering components using driving events. Probabilistic Engineering Me-
chanics, 41:13–20, 2015.

[26] M. Matsuishi and T. Endo. Fatigue of metals subjected to varying stress.

Japan Society of Mechanical Engineers, 1968. In Japanese.

[27] M. A. Miner. Cumulative damage in fatigue. Journal of Applied Mechanics,

12:A159–A164, 1945.

[28] D. Mitrovi´c. Learning Driving Patterns to Support Navigation. PhD thesis,

University of Canterbury, New Zealand, 2004.

[29] D. Mitrovi´c. Reliable method for driving events recognition. IEEE Trans-

actions on Intelligent Transportation Systems, 6(2):198–205, 2005.

[30] A. Palmgren. Die Lebensdauer von Kugellagern. Zeitschrift des Vereins

Deutscher Ingenieure, 68:339–341, 1924. In German.

[31] I. Rychlik. A new deﬁnition of the rainﬂow cycle counting method. Inter-

national Journal of Fatigue, 9:119–121, 1987.

[32] I. Rychlik. Rain ﬂow cycle distribution for ergodic load processes. SIAM J

Appl Math, 48:662–679, 1988.

[33] I. Rychlik. Note on cycle counts in irregular loads. Fatigue & Fracture of

Engineering Materials & Structures, 16:377–390, 1993.

[34] I. Rychlik. Note on modelling of fatigue damage rates for non-Gaussian
stresses. Fatigue & Fracture of Engineering Materials & Structures, 36:750–
759, 2013.

[35] I. Rychlik, G. Lindgren, and Y.K. Lin. Markov based correlations of dam-
ages in Gaussian and non-Gaussian loads. Probabilistic Engineering Me-
chanics, 10:103–115, 1995.

[36] Ardalan Vahidi, Anna Stefanopoulou, and Huei Peng. Recursive least
squares with forgetting for online estimation of vehicle mass and road grade:
theory and experiments. Vehicle System Dynamics, 43(1):31–55, 2005.

[37] A. J. Viterbi. Error bounds for convolutional codes and an asymptotically
optimal decoding algorithm. IEEE Transactions on Information Theory,
IT-13(2):260–269, 1967.

[38] WAFO Group. WAFO – a Matlab toolbox for analysis of random waves and
loads, tutorial for WAFO 2.5. Mathematical Statistics, Lund University,
2011.

[39] WAFO Group. WAFO – a Matlab Toolbox for Analysis of Random Waves
and Loads, Version 2.5, 07-Feb-2011. Mathematical Statistics, Lund Uni-
versity, 2011.
Web: http://www.maths.lth.se/matstat/wafo/ (Accessed 24 January 2014).

22

[40] O. Zeitouni and A. Dembo. Exact ﬁlters for the estimation of the num-
ber of transitions of ﬁnite-state continuous-time Markov processes. IEEE
Transactions on Information Theory, 34(4):890–893, 1988.

Appendix A Derivation of transition matrix of

driving events.

i }N

To construct the sequence {Z ∗
in {t : Ztk 6= Ztk−1 ∩ Ztk 6= SF}, then
k =(1,

Z ∗

2,

if Ztk = LT,
if Ztk = RT.

(26)

i=0, of driving events, let {tk}N

k=0 be the indices

Assume that Z ∗ has transition matrix P = (p(k, j)). Note that the hidden
process {Zt}T
t=0 in HMM has three states ”1” = RT, ”2” = SF and ”3” = LT.
One can now derive the transition matrix P from the transition matrix of the
HMM ˆQ as follows:

ˆp(1, 1) =

ˆp(2, 2) =

ˆq(3, 2)ˆq(2, 3)

(1 − ˆq(2, 2))(1 − ˆq(3, 3))

ˆq(1, 2)ˆq(2, 1)

(1 − ˆq(2, 2))(1 − ˆq(1, 1))

,

.

(27)

(28)

As proof, we consider for instance the probability of going from LT to RT in Zi
which can be computed as follows:

ˆp(1, 2) = P (Z ∗

i = 1, Z ∗

i+1 = 2)

= P (Zti,start:ti,stop = 3, Zti,stop+1:ti+1,start−1 = 2, Zti+1,start:ti+1,stop = 1)

+ P (Zti,start:ti,stop = 3, Zti+1,start:ti+1,stop = 1),

=(cid:0)ˆq(3, 2)(cid:0)1 + ˆq(2, 2) + ˆq2(2, 2) + ...(cid:1) ˆq(2, 1) + ˆq(3, 1)(cid:1)
=(cid:20) ˆq(3, 2)ˆq(2, 1)
1 − ˆq(2, 2)

(1 + ˆq(3, 3) + ˆq2(3, 3) + ...),

+ ˆq(3, 1)(cid:21)

1 − ˆq(3, 3)

1

.

where Zti,start:ti,stop represents the sequence of consecutive driving states Zti,start , ..., Zti,stop .

23

