6
1
0
2

 
r
a

M
7

 

 
 
]

C
C
.
s
c
[
 
 

1
v
7
7
9
1
0

.

3
0
6
1
:
v
i
X
r
a

On the Implicit Graph Conjecture

Maurice Chandoo

Leibniz Universität Hannover, Germany

chandoo@thi.uni-hannover.de

Abstract. The implicit graph conjecture states that every suﬃciently
small, hereditary graph class has a labeling scheme with a polynomial-
time computable label decoder. We approach this conjecture by inves-
tigating classes of label decoders deﬁned in terms of complexity classes
such as P and EXP. For instance, GP denotes the class of graph classes
that have a labeling scheme with a polynomial-time computable label
decoder. Until now it was not even known whether GP is a strict subset
of GR. We show that this is indeed the case and reveal a strict hierarchy
akin to classical complexity. We also show that classes such as GP can be
characterized in terms of graph parameters. This could mean that certain
algorithmic problems are feasible on every graph class in GP. Lastly, we
deﬁne a very restricted class of label decoders using ﬁrst-order logic that
already contains many natural graph classes such as forests and interval
graphs. We give an alternative characterization of this class in terms of
directed acyclic graphs. By showing that some small, hereditary graph
class cannot be expressed with such label decoders a weaker form of the
implicit graph conjecture could be disproven.

Keywords: adjacency labeling scheme, complexity classes, logic

1 Introduction

The class of interval graphs has at most 2O(n log n) graphs on n vertices. Neither
adjacency matrices nor lists are asymptotically space optimal to represent this
class since only O(n log n) bits should be used to store a graph on n vertices.
However, due to the geometrical representation of this class every vertex of an
interval graph can be assigned an interval on a discrete line with 2n points. Stated
diﬀerently, every vertex can be labeled with two numbers between 1 and 2n and
adjacency of two vertices can be determined by comparing the four numbers.
Storing two such numbers for all n vertices requires n log 4n2 bits and thus is
asymptotically optimal. Labeling schemes, also known as implicit representation,
generalize this kind of representations by allowing to store a O(log n) long binary
label at every vertex such that adjacency between two vertices can be determined
by running an algorithm on the two labels. We investigate what graph classes
can or cannot be represented in such a way when restricting the computational
complexity of the function that determines adjacency, also called label decoder.
Let us call a graph class that has at most 2O(n log n) graphs on n vertices
small. A simple counting argument shows that only small graph classes can have

labeling schemes. The ﬁrst question that springs to mind is whether all small
graph classes have a labeling scheme. This is not the case as Spinrad shows by
giving a small, non-hereditary graph class as counter-example in [11, Thm. 7].
Now, the question becomes whether all small, hereditary graph classes have a
labeling scheme; this is known as implicit graph conjecture(IGC). This question
was already posed more than two decades ago in 1992 by Kannan, Naor and
Rudich[6] and has been brought up again by Spinrad[11]. But despite being such
an old question not much is known in this regard. One such result is: every tiny,
hereditary graph class admits a labeling scheme with labels of constant length[9].
Tiny means that there exist n0 ∈ N and k < 1
2 such that the class has at most
2kn log n labeled graphs on n vertices for all n ≥ n0. This follows from the insight
that every tiny, hereditary graph class has only a constant number of twin-
free graphs, which makes such classes rather uninteresting. On the other hand,
small, hereditary graph classes such as planar or circular-arc graphs can have
a rich structure. Candidates for the IGC, i.e. small, hereditary graph classes
for which no labeling scheme is known, are line segment graphs, (unit) disk
graphs, k-dot product graphs and k-sphere graphs[3,8,5]. It is interesting to
note that the obvious labeling schemes for line segment and disk graphs using
their geometrical representation does not work since coordinates and radii can
require an exponential number of bits[8] unlike in the case of interval graphs.

A diﬀerent aspect of labeling schemes that has been extensively studied
are lower and upper bounds on the label length, i.e. the constant lurking in
O(log n), which is related to small universal graphs. A recent result shows that
graphs of bounded arboricity k admit a labeling scheme with optimal label length
k log n + O(1)[1]. Besides, labeling schemes can be generalized in various ways.
One variant are distance labeling schemes where one wants to infer the distance
between two vertices given their labels[4]. In [7] it was proposed to consider mul-
tiple labels instead of only two. Another natural extension is to consider labeling
schemes for graph classes that are not small by allowing longer labels while still
maintaining the condition of being asymptotically space optimal[11]. However,
here we shall investigate the original variant of this concept.

Our results. For a complexity class A let GA denote the class of graph classes
that have a labeling scheme where the label decoder can be computed in A
(precise deﬁnitions follow). In general, we investigate how choosing various com-
plexity classes for A aﬀects the class of graph classes GA that can be represented
and how such classes of graph classes can be characterized. To the best of our
knowledge no research in this direction has been done yet. In section two we
argue that GkEXP ( G(k + 1)EXP for all k ≥ 1 by giving a diagonalization
argument. Additionally, we consider the graph class(es) constructed in the proof
as candidate for the implicit graph conjecture. In the third section we show
that for every reasonable complexity class A the class of graph classes GA can
be exactly characterized in terms of a graph parameter. By graph parameter
we mean a graph property which maps to the natural numbers such as clique
number or tree width. Given such a characterizing graph parameter λA for GA
the question of whether a graph class lies in GA then is equivalent to asking

whether it is bounded by λA. Another consequence of such a characterization
is that if for example determining the existence of a Hamiltonian cycle is ﬁxed-
parameter tractable under the parameterization λA then for every graph class
in GA this problem can be decided in polynomial time. This means the exis-
tence of a labeling scheme can have algorithmic implications. In the last section
we deﬁne a class of label decoders FO via ﬁrst-order logic formulas with arith-
metic, i.e. comparing order, addition and multiplication. We give upper bounds
on the expressiveness of GFO and its quantiﬁer-free variant. Even if quantiﬁers,
addition and multiplication are disallowed the resulting class GFOqf(<) already
contains many interesting graph classes such as forests, planar graphs and k-
interval graphs(also known as multiple interval graphs[2]). At the end we outline
an alternative characterization of GFOqf (<) in terms of directed acyclic graphs.

Terminology. Let [n] = {1, 2, . . . , n}. We write log n instead of ⌈log2 n⌉ and
exp(n) = 2n. Let expi(n) = exp(expi−1(i)) for i ≥ 1 and exp0(n) = n. The
domain of a function f is dom(f ). We consider only graphs without multiple
edges and self-loops and regard undirected graphs as special case of directed
ones. For two graphs G, H we write G ∼= H to indicate that they are isomorphic
and G ⊆ H to mean that G is an induced subgraph of H. We speak of G as
unlabeled graph to emphasize that we talk about the isomorphism class of G
rather than a speciﬁc adjacency matrix of G. A graph class is a set of unlabeled
graphs, i.e. closed under isomorphism. A graph class is hereditary if it is closed
under taking induced subgraphs. Let G be the class of all graphs and Gn is the
class of all graphs on n vertices. A language is a set of words over the binary
alphabet {0, 1} and a language class is a set of languages. We use complexity
class as informal term to mean a language class deﬁned in terms of computation
and assume that it is countable. The deterministic Turing machine (TM) is our
model of computation when talking about time as resource bound. Let L denote
the complexity class logspace, R is the class of recursive languages and kEXP is
the class of languages computable in time expk(nO(1)) for k ≥ 0, e.g. 0EXP = P.
Let ALL = P({0, 1}∗) be the class of all languages.

Deﬁnition 1 (Labeling scheme). A label decoder F is a subset of {0, 1}∗ ×
{0, 1}∗. A labeling scheme is a tuple S = (F, c) where F is a label decoder and
c ∈ N is the label length. A graph G on n vertices is in the class of graphs spanned
by S, in symbols G ∈ gr(S), if there exists a labeling ℓ : V (G) → {0, 1}c log n such
that for all u, v ∈ V (G):

(u, v) ∈ E(G) ⇔ (ℓ(u), ℓ(v)) ∈ F

We say a graph class C is represented by (or has) a labeling scheme S if C ⊆ gr(S).

Deﬁnition 2. A language L ⊆ {0, 1}∗ induces a label decoder FL where for all
x, y ∈ {0, 1}∗ and |x| = |y| it holds that (x, y) ∈ FL ⇔ xy ∈ L.

Let A be a language class and k ∈ N. A graph class C is in GkA if there
exists a language L ∈ A such that C is represented by (FL, c) for some c ≤ k.
Analogously, C is in GA if C is in Gk A for some k ∈ N.

A class of the form G· is trivially closed under taking subsets, i.e. if C ⊆ C ′
and C ′ ∈ G· then C ∈ G·. It follows that G· is closed under intersection as well.
However, no G· is closed under complement since the complement of a small
graph class is not small. For many complexity classes such as L and P it is also
not hard to show that the classes GL and GP are closed under union.

Here is an example of a language L whose label decoder FL represents interval
graphs: x1x2y1y2 ∈ L iﬀ x1, x2, y1, y2 are binary strings of equal length and
neither x2 < y1 nor y2 < x1 holds where < denotes the lexicographical order.
Then the labeling scheme S = (FL, 2) represents interval graphs. Since L can be
computed in logspace it follows that interval graphs are in G2L.

Using our terminology the implicit graph conjecture can be rephrased as:

Conjecture 1 (IGC,[6]). Let H denote the set of all small, hereditary graph
classes.

GP ∩ H = GALL ∩ H = H

As of now it is far from clear whether even the second equality holds, i.e. can
every small, hereditary graph class be represented by some labeling scheme,
leaving computability issues aside? This is a graph-theoretic question dealing
with the existence of polynomial-sized universal graphs that should be addressed
before one can expect to prove the implicit graph conjecture.

2 Hierarchy of Implicit Representations

In the previous section we have seen that every language L can be interpreted
as label decoder FL. Therefore a language class A can be understood as class of
label decoders and GA denotes the set of graph classes that can be represented
by a labeling scheme (F, c) with F ∈ A and c ∈ N. Inclusion carries over to this
setting meaning A ⊆ B implies GA ⊆ GB. For separations, however, this is not
true, i.e. there exist A, B with A ( B and GA = GB. Spinrad remarks that it is
not known whether restricting the label decoder to be computable in polynomial
time versus requiring it to be simply computable makes a diﬀerence in terms of
the graph classes that can be represented[11, p. 22]. We resolve this question by
giving a diagonalization argument that yields many of the separations known in
the classical setting. For the sake of clarity we prove the following class of sepa-
rations which we deem most interesting with respect to the IGC since it yields
the smallest class(G2EXP) that can be separated from GP by this argument:

Theorem 1. GkEXP ( G(k + 1)EXP for all k ≥ 1.

The idea of the diagonalization argument is as follows. Let A = {F1, F2, . . . } be
a class of label decoders. Then the set of labeling schemes in GA can be seen as
pair of natural numbers, one for the label decoder and one for the label length.
Let τ : N → N2 be a surjective function and Sτ (x) = (Fy, z) with τ (x) = (y, z).
It follows that for every labeling scheme S in GA there exists an x ∈ N such that
S = Sτ (x). The following graph class cannot be in GA:

G ∈ CA ⇔ G is the smallest graph on n = |V (G)| vertices s.t. G /∈ gr(Sτ (n))

where smallest is meant w.r.t. some order such as the lexicographical one. As-
sume CA is in GA via the labeling scheme S. There exists an n ∈ N such that
S = Sτ (n) and it follows that CA contains a graph on n vertices that cannot be in
S per deﬁnition, contradiction. Then it remains to show that CA is in the class
that we wish to separate from GA.

An issue with this argument is that for some n the set gr(Sτ (n)) might contain
all graphs on n vertices and thus the graph used to show that CA is no subset
of gr(Sτ (n)) does not exist. This can be solved by adding the requirement that
|τ −1(y, z)| is inﬁnite. It follows that for every labeling scheme S in GA there is
an arbitrarily large n ∈ N such that S = Sτ (n). By choosing n suﬃciently large
the existence of a graph on n vertices not in gr(Sτ (n)) is guaranteed and the
argument holds.

Deﬁnition 3. A surjective function τ : N → N2 is an admissible pairing if

1. |τ −1(y, z)| is inﬁnite for all y, z ∈ N,
2. y(x), z(x) ∈ O(log x) with τ (x) = (y(x), z(x)),
3. τ (x) is undeﬁned if x is not a power of two, and
4. τ is computable in polynomial time given its input in unary.

Note, that a graph on n vertices gets assigned labels of the same length as a
graph on m vertices whenever log n = log m (rounded up). The third condition
prevents this from happening, i.e. for all G 6= H ∈ CA it holds that their vertices
must have labels of diﬀerent length.

Lemma 1. There exists an admissible pairing function.

Proof. Consider the function τ (x) = (y, z) iﬀ x = 22y·3z ·5w

for some w ≥ 0. ⊓⊔

Deﬁnition 4. Let A be a language class, ≺ an order on graphs and τ an ad-
missible pairing. The diagonalization graph class of A is deﬁned as:

CA = [

n∈dom(τ )

(cid:8)G ∈ Gn (cid:12)(cid:12)G is the smallest graph w.r.t. ≺ not in gr(Sτ (n))(cid:9)

When we consider the diagonalization graph class of some language class we
assume the lexicographical order for ≺ and the function given in the proof of
Lemma 1 for τ .

Lemma 2. For every language class A it holds that CA /∈ GA.

This follows from our previous argument. To show that CA is in some class GB
we need to deﬁne a labeling scheme SA = (FA, 1) that represents CA and consider
the complexity of computing its label decoder.

Deﬁnition 5. Let A be a language class. For G ∈ CA let G0 denote the smallest
labeled graph with G0 ∼= G. For every m ∈ N such that there exists G ∈ CA with
|V (G)| = 2m and for all x, y ∈ {0, 1}m let

(x, y) ∈ FA ⇔ (x, y) ∈ E(G0)

It can be assumed that G0 has {0, 1}m as vertex set. Also, note that CA has
at most one graph on n vertices for any n. Therefore the label decoder FA is
well-deﬁned. It is easy to see that (FA, 1) represents CA, i.e. CA ⊆ gr(FA, 1).

Up to this point the exact correspondence between y ∈ N and the label
decoder Fy was not important. In fact, we only required the set of label decoders
A to be countable. To show that the label decoder FkEXP can be computed in
(k + 1)EXP it is important that given y the label decoder Fy from kEXP can be
eﬀectively computed. The following lemma grants this.

Lemma 3. For every k ≥ 0 there exists a mapping f : N → P({0, 1}∗) such that
∪x∈Nf (x) = kEXP and on input x ∈ N in binary and w ∈ {0, 1}∗ the question
w ∈ f (x) can be decided in expk+1(nO(1)) time with n = |w| + log x.

Proof. The lemma essentially states that all TMs running in kEXP can be sim-
ulated in (k + 1)EXP. Given the Gödelization of such a TM M and a word
w as input the question whether M accepts x can be decided by a TM in
(k + 1)EXP. Fix a reasonable encoding of TM as natural numbers, i.e. given
z ∈ N then Mz is a TM. Let f (x) = (y, z) ⇔ x = 2y3z. It holds that y ≤ log x
for every z ≥ 0. On input x ∈ N and w ∈ {0, 1}∗ the reference input length
is n = |w| + log x. Compute f (x) = (y, z) and then simulate Mz on w for
expk(y|w|y) ≤ expk(nn+1) ∈ O(expk+1(n2)) steps.
⊓⊔

Lemma 4. FkEXP ∈ (k + 1)EXP for every k ≥ 1.

Proof. On input xy with x, y ∈ {0, 1}m and m ≥ 1 compute τ (2m) = (y, z). If it
is undeﬁned then reject. Otherwise there is a labeling scheme Sτ (2m) = (Fy, z)
and we need to compute the smallest graph G0 on 2m vertices such that G0 /∈
gr(Sτ (2m)). If G0 exists we assume that its vertex set is {0, 1}m and accept iﬀ
(x, y) ∈ E(G0). If it does not exist then reject.

The graph G0 can be computed as follows. Iterate over all labeled graphs H
with 2m vertices in order and over all bijections ℓ : V (H) → {0, 1}zm. Check if
H ∈ gr(Sτ (2m)) by checking for every pair of vertices u, v ∈ V (H) if (ℓ(u), ℓ(v)) ∈
Fy ⇔ (u, v) ∈ E(H). If this condition fails then G0 = H. To query the label
decoder Fy the previous lemma can be applied, i.e. y can be interpreted as
encoding of a TM in kEXP that can be simulated.

Let us consider the time requirement w.r.t. m. To compute τ (2m) we write
down 2m in unary and compute τ in polynomial time w.r.t. 2m which is in the
order 2O(m). To compute G0 there are four nested loops. The ﬁrst one goes
over all labeled graphs on 2m vertices which is bounded by exp2(2m). The
second loop considers all possible labelings ℓ of which there can be at most
exp(zm)exp(m) = exp(exp(m)zm) ≤ exp2(zm2) ∈ exp2(mO(1)); recall that z is
polynomially bounded by m due to Def. 3. The other two loops go over all ver-
tices of H meaning 2m. By applying Lemma 3 the time required to compute
(ℓ(u), ℓ(v)) ∈ Fy is expk+1(nO(1)
) with n0 := 2zm + log y. Since n0 ∈ mO(1)
this operation can be computed in (k + 1)-exponential time. In summary, the
runtime order of this algorithm is expk+1(mO(1)).
⊓⊔

0

Now, Lemma 2 states that CkEXP /∈ GkEXP and from Lemma 4 it follows that
CkEXP ∈ G(k + 1)EXP therefore proving Theorem 1. Notice, that this argument
fails to show that GP ( GEXP because the runtime to compute the label decoder
FP is at least double exponential due to the ﬁrst two loops mentioned in the proof
of Lemma 4. Can this argument be modiﬁed to separate these two classes as well?
This seems rather unlikely.

Even so, we now know that there exist graph classes that have an implicit
representation but a polynomial-time computable label decoder does not suﬃce
to capture them. It follows that showing that the class CP is hereditary would
refute the IGC. In fact, it is suﬃcient to ﬁnd a hereditary superset of CP.

Fact 1. If there exists a small, hereditary graph class C with CP ⊆ C then the
implicit graph conjecture is false.

The existence of such a superset of CP can be refuted by showing that the hered-
itary closure of CP is not small:

Fact 2. Let C, D be graph classes such that for every G ∈ C there exists an
H ∈ D with G ⊆ H. If C is not small then every hereditary superset of D is not
small.

Recall that CP is not a unique graph class but strongly depends on the chosen
order ≺ and pairing τ .

3 Parameter Characterization

We consider a graph parameter to be a total function λ : G → N and call it
natural if the cardinality of its image is inﬁnite. Examples of natural graph pa-
rameters are the chromatic number or the diameter. A graph class C is bounded
by a graph parameter λ if there exists a c ∈ N such that for all G ∈ C it holds
that λ(G) ≤ c. We show that for every complexity class A such that GA is
closed under union there exists a graph parameter that characterizes GA. One
interesting aspect of such a characterization is that it might reveal algorithmic
implications for graph classes that have a labeling scheme of certain complexity.

Deﬁnition 6. Let C be a class of graph classes and λ is a natural graph param-
eter. We say λ characterizes C if for every graph class C it holds that C ∈ C iﬀ
C is bounded by λ.

Let us say a class of graph classes C is complete if for every graph G there exists
a C ∈ C such that G ∈ C.

Theorem 2. Let C be a complete class of graph classes closed under union and
subsets. If there exists a countable subset of C such that its closure under subsets
equals C then there exists a graph parameter that characterizes C.

Proof. Let C be a class of graph classes that satisﬁes the above premises and
C′ = {C1, C2, . . . } is the needed countable subset of C. Let λ(G) be the minimal

i ≥ 1 such that G ∈ Ci. Since C is complete it follows that C′ is complete and
thus λ is total. Let us deﬁne Cλ
=i. It
follows that a class C is bounded by λ iﬀ C ⊆ Cλ
≤i for some i ∈ N. We now argue
that λ characterizes C.

≤i as {G ∈ G | λ(G) ≤ i} and similarly Cλ

If C ∈ C then there exists an i ∈ N such that C ⊆ Ci. It follows that C ⊆ Cλ

We show the other direction by induction: if C ⊆ Cλ
For i = 1 it holds that C ⊆ Cλ
follows that C ∈ C. For i + 1 it holds that C ⊆ Cλ
By induction hypothesis it follows that Cλ
remains to argue that Cλ
and Ci+1 ∈ C.

≤i.
≤i then C ∈ C for all i ∈ N.
=1 = C1. Since C is closed under subsets it
=i+1.
≤i ∈ C. Since C is closed under union it
=i+1 ⊆ Ci+1
⊓⊔

=i+1 is in C. This follows by the observation Cλ

≤1 = Cλ

≤i+1 and Cλ

≤i+1 = Cλ

≤i ∪ Cλ

Every class of the form G· considered in this paper satisﬁes the premises of
Theorem 2 and therefore has a parameter characterization. The only exception
to that is GALL which cannot have the required countable subset. Nonetheless,
let us consider the four diﬀerent premises needed to apply this statement. That
C needs to be complete is a technical detail that can be omitted by allowing
graph parameters to be partial functions. Classes of the form G· are trivially
closed under taking subsets. That G· is closed under union is not necessarily true
but for many complexity classes this is the case. That C must have a speciﬁc
countable subset C′ is essential in order to deﬁne a characterizing parameter.
But why not simply require C to be countable itself? This would render Theorem
2 useless since every C that contains an inﬁnite graph class and is closed under
subsets is uncountable. In the case of classes such as GP the countable subset is
given by ∪L∈P,c∈N{gr(FL, c)}.

Consider the algorithmic relevance of such characterizations. Let P : G →
{0, 1} be a graph property such as having a Hamiltonian cycle and λ is a graph
parameter that characterizes the class GA. Assume that P can be decided in
time nf (k) on input G with k = λ(G) for some computable function f : N → N.
This can also be stated as P parameterized by λ being in the complexity class
XP. Then it follows that the property P can be decided in polynomial time on
every graph class in GA. The contra-position of this argument can be used to
show that a graph class C is (probably) not in GA: if it is NP-hard to decide the
property P on a graph class C then this implies that C cannot be in GA unless
P = NP.

For two graph parameters λ1, λ2 let us say that λ2 bounds λ1, in symbols
λ1 ≤ λ2, if Cλ1
≤c is bounded by λ2 for every c ∈ N reusing the deﬁnition in the
previous proof. If λ1 ≤ λ2 and λ2 ≤ λ1 we say λ1 and λ2 are equivalent. For
example, the maximum degree is bounded by clique number but not vice versa.

Fact 3. Let C1, C2 be two classes of graph classes and λ1, λ2 are respective char-
acterizing graph parameters. C1 ⊆ C2 iﬀ λ1 ≤ λ2.

It follows that two graph parameters are equivalent iﬀ they characterize the same
class of graph classes. For a complexity class A let λA be a characterizing graph
parameter thereof. Hence, comparing the containment relation of two classes

GA and GB is the same as examining whether λA bounds λB or vice versa. The
interval number λIntv(G) of a graph G is the smallest number k ∈ N such that
G is a k-interval graph, see [2]. From this perspective some of our results can be
stated as:

λIntv (cid:12) λFO(<) ≤ λL ≤ λP ≤ λEXP (cid:12) λ2EXP (cid:12) · · · (cid:12) λR

where λ (cid:12) λ′ means strict containment, i.e. λ ≤ λ′ holds and λ′ ≤ λ does not
hold. The class FO(<) is introduced in the next section.

The decomposition-based parameters usually considered in the parameterized
context such as tree-width, clique-width or module-width seem to be orthogonal
to the characterizing parameters mentioned above meaning neither bounds the
other.

4 First-Order Deﬁnable Label Decoders

Reconsider the labeling scheme for interval graphs given in the introduction. The
label decoder can be nicely stated in ﬁrst-order logic with natural numbers as
domain of discourse: ϕ(x1, x2, y1, y2) = ¬(x2 < y1 ∨ y2 < x1). It is also possible
to describe graph classes with linearly many edges(forests, planar graphs) with
such formulas using only equality, see [11, p. 20]. These formulas can be easily
adapted to k-interval graphs and graphs of bounded arboricity. Due to the length
constraint on labels only constantly many, polynomially bounded numbers can
be stored per vertex, which leads to the following setting. Be aware that the
class FO deﬁned here diﬀers from the one in descriptive complexity.

For n ≥ 1 let Nn be the structure that has [n] as universe, the relations
<, +, × with (x, y) ∈ < ⇔ x < y, (x, y, z) ∈ + ⇔ x + y = z and (x, y, z) ∈
× ⇔ x · y = z for all x, y, z ∈ [n]. For σ ⊆ {<, +, ×} let FOk(σ) be the set of
ﬁrst-order formulas with boolean connectives ¬, ∨, ∧, quantiﬁers ∃, ∀ and k free
variables using only equality and the relation symbols from σ. For σ = {<, +, ×}
we simply write FOk. Let Vars(ϕ) be the set of free variables in ϕ. Given ϕ ∈
FOk(σ), Vars(ϕ) = (x1, . . . , xk) and an assignment a1, . . . , ak ∈ [n] we write
Nn, (a1, . . . , ak) |= ϕ if the interpretation Nn, (a1, . . . , ak) satisﬁes ϕ under the
usual semantics of ﬁrst-order logic.

Deﬁnition 7. A (quantiﬁer-free) logical labeling scheme is a tuple S = (ϕ, c)
with a (quantiﬁer-free) formula ϕ ∈ FO2k and c, k ∈ N. A (c, k)-labeling for a set
V is a function ℓ : V → [nc]k and induces the graph Gℓ
S with vertex set V and
edges (u, v) if Nnc, (ℓ(u), ℓ(v)) |= ϕ. Then a graph G is in gr(S) if there exists a
(c, k)-labeling ℓ for V (G) such that G = Gℓ
S.

Deﬁnition 8. Let σ ⊆ {<, +, ×}, c, k ∈ N. A graph class C is in Gc,kFO(σ)
if there exists a logical labeling scheme (ϕ, c) with ϕ ∈ FO2k(σ) such that C ⊆
gr(ϕ, c). And GFO(σ) = ∪c,k∈NGc,kFO(σ). Let GFOqf (σ) denote the quantiﬁer-
free analogue.

Notice, k numbers in [nc] can be encoded as string of length ck log n. A logical la-
beling scheme can for instance express a system of polynomial inequalities on 2k
variables and adjacency is determined by whether this system is satisﬁed when
plugging in the values for two vertices. By disallowing multiplication these sys-
tems become linear. Quantiﬁed variables can be used to incorporate unknowns.
For example, ϕ(x, y) = ∃z : x × z2 = y means that there is an edge from u to v
with labels xu, yv if yv can be written as product of xu and a square number.

Theorem 3. GFO ⊆ GPSPACE and GFOqf ⊆ GL.
Proof (Sketch). It is known that the circuit class NC1 ⊆ L (assuming logspace-
uniformity or stronger) and therefore GNC1 ⊆ GL. We argue that GFOqf ⊆
GNC1. Given a logical labeling scheme (ϕ, c) with ϕ ∈ FO2k the label length
in a graph with n vertices is ck log n. The NC1 circuit has 2ck log n input bits
and every block of c log n bits corresponds to the value of a free variable in ϕ.
Every atomic formula(less than, addition, multiplication) in ϕ can be evaluated
in NC1. In fact, NC1 can be replaced by the smaller class TC0 in this argument
showing that GFOqf ⊆ GTC0. After replacing every atomic formula in ϕ by its
truth value it becomes a propositional formula that can be seen as circuit since
it is quantiﬁer-free. If ϕ contains q ≥ 1 quantiﬁers then they can be evaluated
using (c log n)q space meaning polynomial space in the actual input length. Since
the number of quantiﬁers is ﬁxed by the formula it can also be argued that the
corresponding label decoder can be decided in PH meaning GFO ⊆ GPH.
⊓⊔

Indeed, all of the graph classes mentioned in the beginning of this section are
already contained in GFOqf (<). Therefore let us consider this class more closely.

Fact 4. The interval number λIntv is strictly bounded by a graph parameter that
characterizes GFOqf (<).

Proof. This statement is equivalent to saying that k-interval graphs are con-
tained in GFOqf (<) and there exists a graph class C ∈ GFOqf (<) that is no
subclass of k-interval graphs for all k ≥ 1. The containment of k-interval graphs
in GFOqf (<) for every k follows by translating its geometrical representation
into a logical labeling scheme as we have done for interval graphs previously.
Consider the following family of graphs (Gn)n∈N where G1 is the cycle graph C4
and Gi+1 is obtained by vertex contraction of a vertex with maximal degree in
Gi and some vertex in C4. There is one vertex with degree 2i in Gi and the other
vertices have degree 2. Then the class {Gi | i ∈ N} lies in GFOqf(<) but can be
veriﬁed to have unbounded interval number (consider the number of intervals
⊓⊔
required to represent the vertex with maximal degree).

A natural question is how do c and k aﬀect the expressiveness of Gc,kFOqf (<).
Non-surprisingly, increasing k strictly enhances the graph classes that can be
represented as we will see in a moment. The parameter c determines how large
a number stored in a label can be, i.e. at most nc. In fact, c is degenerate in the
sense that it can be bounded in terms of k. It would be surprising if the same
holds in the presence of addition.

Lemma 5. Gc,kFOqf (<) ⊆ Gk,kFOqf (<) for all c, k ≥ 1.

Proof (sketch). Consider why it suﬃces for an interval graph on n vertices to use
only numbers between 1 and 2n to represent the intervals. For the same reason
it makes no diﬀerence for a quantiﬁer-free formula ϕ ∈ FO2k(<) to be evaluated
on a universe larger than kn in the sense that a labeling ℓ mapping to larger
⊓⊔
numbers than kn can be normalized.

A consequence of this is that a logical labeling scheme in GFOqf (<) is solely
determined by its formula ϕ. To check whether a graph G is in gr(ϕ) it suﬃces
to ﬁnd a labeling ℓ : V (G) → Nk with 2k = | Vars(ϕ)| which can be regarded as
(c, k)-labeling for a suﬃciently large c. Stated diﬀerently, one does not need to
worry about the numbers being polynomially bounded.

Also, it implies that for every k there exists a k′ > k such that Gk,kFOqf (<) (
Gk′ ,k′ FOqf(<). Assume the opposite, then GFOqf(<) collapses to Gk,k FOqf (<). It
follows that every graph class in GFOqf (<) can be represented using k2 log n bits
and therefore has at most exp(k2 log n) graphs on n vertices, which obviously
cannot be the case for any k ∈ N.

Directed Acyclic Graph Characterization

The semantics of a logical labeling scheme S = (ϕ, c) from GFOqf (<) can be
precisely captured using directed acyclic graphs. For ease of understanding, we
explain this correspondence rather informally by showing how to convert a for-
mula into a DAG. First, let us assume that ϕ contains no negation. To see that
this does not aﬀect expressiveness let ϕ be in negation normal form. Then ¬x = y
can be replaced by x < y ∨ y < x and ¬x < y by y < x ∨ x = y. Next, we assume
that ϕ is in disjunctive normal form, i.e. ϕ = C1 ∨ · · · ∨ Cp where Ci consists of
atomic formulas linked by conjunction. Given a (c, k)-labeling ℓ for a vertex set
V the formula ϕ induces the graph Gℓ
S as described in Def. 7. By a previous ar-
gument it is okay to consider a less restrictive labeling ℓ : V → Nk instead. Since
every clause Ci is a formula as well it can be seen as logical labeling scheme
Si = (Ci, c), which induces the graph Gℓ
. For a set of graphs G, G1, . . . , Gz
Si
on the same vertex set V let us say that G is the edge union of G1, . . . , Gz if
E(G) = ∪i∈[z]E(Gi). Then the correspondence between the graphs induced by
ϕ and its clauses is that Gℓ
. If a clause is
unsatisﬁable then its induced graph is the empty graph and thus removing this
clause does not aﬀect Gℓ
S. Therefore we assume that every clause is satisﬁable.
We now argue that a DAG D whose vertex set partitions [2k] can be inter-
preted similarly to a clause in the sense that together with a labeling ℓ : V → Nk
it induces a graph Gℓ
D adjacent? Consider
the 2k numbers of u and v given by ℓ: (x1, . . . , x2k) where the ﬁrst half is ℓ(u)
and the second ℓ(v). Whenever i, j ∈ [2k] occur in the same part of V (D) it
must hold that xi = xj . Otherwise there is no edge between u and v. Hence
every vertex X ⊆ [2k] in D can be assigned the number ℓ(X) = xi for some
i ∈ X (the choice of i does not matter). Then there is an edge between u and v

D. When are two vertices u, v in Gℓ

S is the edge-union of Gℓ

S1 , . . . , Gℓ
Sp

if for every edge (X, Y ) in D it holds that ℓ(X) < ℓ(Y ). Basically, the DAG D
encodes a partial order that must be obeyed by the 2k numbers. A clause C can
be converted into such a DAG DC by modeling the atomic formulas involving
equality with the partition of [2k] and the ones involving < with edges in D. If
DC is not acyclic then C is unsatisﬁable. Also note, if two DAGs with identi-
cal vertex set have equal transitive closure then they describe the same graphs
for all labelings. Lastly, we remark that existential quantiﬁers in clause can be
mimicked by using edge-weights for the DAG.

Conclusions and Future Research. We have seen that bounding the computa-
tional complexity of label decoders does in fact change the class of graph classes
that can be represented. Unfortunately, the diagonalization argument does not
provide any insight regarding the complexity that is required to represent a cer-
tain graph class. At the present, it is unknown if every small, hereditary graph
class admits a labeling scheme at all. This is a purely graph-theoretic question
as mentioned in the introduction. Because of that trying to determine upper
bounds for the complexity of a label decoder whose existence is unknown seems
to be a moot question. Lower bounds in the powerful Turing machine model such
as C /∈ GL are likely to require a reduction notion between graph classes. How-
ever, we have seen that many natural graph classes can be expressed with much
less computational resources, namely GFOqf(<). Additionally, we showed that
this class has an alternative characterization in terms of directed acyclic graphs,
which might be intuitively more accessible. The next goal should be to prove
that none of the candidates for the IGC are contained in this class, which would
constitute the ﬁrst non-trivial impossibility result for implicit representations.
Another interesting question is the complexity of various graph problems when
parameterized by a characterizing parameter of GFOqf (<). As such a parameter
strictly bounds the interval number one can use [2] as ﬁrst reference point in
this direction.

References

1. Alstrup, S., Dahlgaard, S., Knudsen, M.: Optimal Induced Universal Graphs and

Adjacency Labeling for Trees. Foundations of Computer Science (2015)

2. Fellows, M., Hermelin, D., Rosamond, F., Vialette, S.: On the parameterized com-
plexity of multiple-interval graph problems. Theoretical Computer Science, Volume
410 (2009)

3. Fiduccia, C., Scheinerman, E., Trenk, A., Zito, J.: Dot product representations of

graphs. Discrete Mathematics 181 (1998)

4. Gavoille, C., Peleg, D., Pérennes, S., Raz, R.: Distance labeling in graphs. Journal

of Algorithms 53 (2004)

5. Kang, R., Müller, T.: Sphere and Dot Product Representations of Graphs. Discrete

& Computational Geometry (2012)

6. Kannan, S., Naor, M., Rudich, S.: Implicit Representations of Graphs. SIAM Journal

Disc. Math. (1992)

7. Korman, A., Kutten, S.: A note on models for graph representations. Theoretical

Computer Science 410 (2009)

8. McDiarmid, C., Müller, T.: Integer realizations of disk and segment graphs. Journal

of Combinatorial Theory, Series B 103 (2013)

9. Scheinerman, E.: Local representations using very short labels. Journal of Discrete

Mathematics 203 (1999)

10. Scheinerman, E., Zito, J.: On the Size of Hereditary Classes of Graphs. Journal of

Combinatorial Theory, Series B 61 (1994)

11. Spinrad, J.: Eﬃcient Graph Representations. Fields Institute Monographs, Amer-

ican Mathematical Soc. (2003)

