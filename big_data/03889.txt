6
1
0
2

 
r
a

 

M
2
1
 
 
]

.

O
C
h
t
a
m

[
 
 

1
v
9
8
8
3
0

.

3
0
6
1
:
v
i
X
r
a

FAST M ¨OBIUS INVERSION IN SEMIMODULAR LATTICES

AND U-LABELABLE POSETS

PETTERI KASKI, JUKKA KOHONEN, AND THOMAS WESTERB ¨ACK

Abstract. We consider the problem of fast zeta and M¨obius transforms in
ﬁnite posets, particularly in lattices.
It has previously been shown that for
a certain family of lattices, zeta and M¨obius transforms can be computed in
O(e) elementary arithmetic operations, where e denotes the size of the covering
relation. We show that this family is exactly that of geometric lattices. We also
extend the algorithms so that they work in e operations for all semimodular
lattices, including chains and divisor lattices. Finally, for both transforms, we
provide a more general algorithm that works in e operations for all R-labelable
posets and their non-graded generalization, which we call U-labelable.

Mathematics Subject Classiﬁcations: 06C10, 06A07, 68W40, 68R05

1. Introduction

Fast methods for computing zeta and M¨obius transforms in ﬁnite posets are im-
portant for many algorithms of combinatorial nature, such as graph coloring [1] and
fast Fourier transforms on inverse semigroups [8]. From an algebraic perspective,
these transforms are basis-changing isomorphisms analogous to the fast Fourier
transform [2]. From a computational perspective, the zeta transform is related to
ensemble computation, where one is required to compute several diﬀerent products
of inputs, possibly sharing common subexpressions, and the challenge is to minimize
the number of elementary multiplications perfomed (see Garey and Johnson [4]).
Let (P,≤) be a ﬁnite partially ordered set, or poset, with |P| = v elements, and
let f : P → A be a function to an abelian group A. The zeta transform of f is the
function g : P → A such that, for all y ∈ P ,
g(y) = X

f (x).

x≤y

For computational purposes, the function f can be represented as a v-element
row vector ~f = (f (x))x∈P , and g similarly. The transformation ~f 7→ ~g is linear, and
deﬁned by the v× v matrix ζ, where ζxy = 1 if x ≤ y, and 0 otherwise. The obvious
way to compute the zeta transform is to perform the matrix-vector multiplication
~g = ~f ζ, incurring O(v2) elementary additions. However, the special structure of
the transformation gives hope of performing it faster, in particular for posets of
some speciﬁc form.

For a given poset, we represent the computation from f to its zeta transform g as
a straight-line program (see B¨urgisser et al. [3]), a sequence of elementary pairwise
arithmetic operations (additions and subtractions) to be executed in turn, without
loops or conditional statements. We seek to minimize the length of the program,
that is, the number of arithmetic operations performed.

1

2

PETTERI KASKI, JUKKA KOHONEN, AND THOMAS WESTERB ¨ACK

The zeta transform is always invertible, since ζ is an upper triangular matrix
with ones on the main diagonal, assuming the matrix lists the elements of P in a
linear order that is an extension of P . We also want to construct a short straight-
line program for the inverse transform µ = ζ −1, called the M¨obius transform. The
matrices ζ and µ are in fact representations of the zeta and M¨obius functions of
the poset. We refer to Stanley [11] for further discussion.

1.1. Measures of the complexity. We relate the program length to certain pa-
rameters characterizing the complexity of the poset: the number of elements or
vertices (v), the number of join-irreducible elements (n), and the number of edges
in the Hasse diagram of the poset (e).

In a lattice we always have v − 1 ≤ e ≤ vn.1 As an example where e is large,
consider the lattice of subsets of an n-element set. This lattice has v = 2n elements,
of which n are join-irreducible (the singletons), and e = 2n−1n = Θ(vn) edges.
Both zeta and M¨obius transforms can be computed in Θ(e) = Θ(vn) operations by
Yates’s construction [13]. As an example where e is small, consider the v-element
chain, which has n = e = v − 1, thus vn = Θ(e2). In a chain both transforms are
easily computed in e operations.
The parameter e also appears in a lower bound by Kennes [7]: for any lattice, any
sequence of additions that computes the zeta transform has length at least e. Note
that this lower bound does not apply to posets in general; as a counterexample,
Bj¨orklund et al. [2, §6] exhibit a non-lattice bipartite poset whose zeta transform
can be computed in O(√e) additions, using a construction by Valiant [12].
For any lattice, Bj¨orklund et al. [2] construct both programs with length O(vn).
This upper bound is always valid but possibly quite crude. A tighter length bound
O(e) applies for lattices fulﬁlling the condition that for any element x and any
join-irreducible element i that is not below x, the join x ∨ i covers x. Examples
of such lattices include the subset lattice, the partition lattice, and the lattice of
subspaces of a ﬁnite vector space. For some lattices, the resulting program length is
highly dependent upon the choice of certain details in the construction. As a simple
example, with the v-element chain one choice leads to the optimal O(e) additions,
while another choice leads to Θ(e2) additions. We seek here a better understanding
of posets that admit fast computation of the zeta and M¨obius transforms.

1.2. Our results. First we show that the aforementioned condition by Bj¨orklund
et al. [2] is equivalent to the the lattice being geometric (semimodular and atomic).
Thus in any geometric lattice both transforms can be done in O(e) arithmetic
operations. This result also provides an alternative “single-axiom” characterization
of geometric lattices.

Second, we show that atomicity is not needed: in any semimodular lattice, the
construction can be done in a manner that yields a program of length e, matching
Kennes’s lower bound. The optimal straight-line programs for chains now follow
as a special case, as well as for other non-atomic semimodular lattices such as the
lattice of positive divisors of an integer.

1The ﬁrst inequality holds because every non-maximal element has at least one upward edge.
The latter inequality follows by considering the upward edges of an arbitrary element x and the
spectrum map ϕ, as deﬁned in Section 2. If both y ⋗ x and z ⋗ x, then ϕ(y) \ ϕ(x) and ϕ(z) \ ϕ(x)
must be disjoint, otherwise y and z would have two incomparable lower bounds. Hence x has at
most n upward edges, and the whole lattice has e ≤ vn.

FAST M ¨OBIUS INVERSION IN SEMIMODULAR LATTICES AND U-LABELABLE POSETS 3

Third, for further generality, we show that if a poset admits a certain kind of
edge labeling, then the transforms can be done in exactly e arithmetic operations by
following the edges in an order implied by their labels. The idea of such labelings
goes back to Stanley [10], who studied edge labeling in the context of counting
chains in a lattice; for bibliography see Stanley [11, Chapter 3]. The class of posets
admitting zeta and M¨obius transforms in e operations now encompasses the family
of R-labelable posets, and their non-graded generalization, which we will call U-
labelable. Semimodular lattices are included as a special case, as well as lower
semimodular lattices (by duality) and supersolvable lattices.

The new results are summarized in Table 1 in context with previous results.

Poset family

Program length Reference

O(v2)
O(vn) = O(e)

all lattices
subset lattices
distributive lattices (zeta only) O(vn)
all lattices
O(vn)
lattices with a certain condition O(e)
O(e)
geometric lattices
O(e)
semimodular lattices
R-, U-labelable posets
O(e)

matrix-vector multiplication
Yates [13]
Parviainen and Koivisto [9]
Bj¨orklund et al. [2]
Bj¨orklund et al. [2]
new (§2)
new (§3)
new (§4)

Table 1. Program lengths for the zeta and M¨obius transforms.

2. Preliminaries

For a general treatment on posets and lattices we refer to Gr¨atzer [5] and Stan-
ley [11]. In the present work a poset P or a lattice L is always ﬁnite. The covering
relation is denoted by ⋖, and the set of covering pairs, or edges of the Hasse di-
agram, is E = {(x, y) : x ⋖ y}. An element x ∈ P is join-irreducible if it covers
exactly one element, and I is the set of join-irreducible elements. Poset size is
characterized by three quantities: the number of elements v = |P|; the number of
join-irreducible elements n = |I|; and the number of edges e = |E|.
Without loss of generality, we assume that the join-irreducible elements of a
lattice are denoted by integers I = [n]. The spectrum map of an element x ∈ L is
ϕ(x) = {h ∈ I : h ≤ x}, and for i ≤ n, the preﬁx spectrum map is ϕi(x) = {h ∈ [i] :
h ≤ x}, with ϕ0(x) = ∅.
In a lattice the minimum element is ˆ0, and an element that covers ˆ0 is an atom.
A lattice is atomic if every element is a join of atoms. A lattice is (upper) semi-
modular, if for any two elements x and y such that x covers x ∧ y, the join x ∨ y in
turn covers y. The dual of a semimodular lattice is lower semimodular. An atomic
semimodular lattice is geometric. Examples of geometric lattices include subset
lattices and partition lattices; examples of non-atomic semimodular lattices include
chains and divisor lattices (see Stanley [11, §3.3]).
Theorem 1.3 of Bj¨orklund et al. [2] shows that both zeta and M¨obius trans-
forms can be done in O(e) arithmetic operations in any ﬁnite lattice L fulﬁlling the
following condition:

(1)

x ∨ i ⋗ x

for all x ∈ L, i ∈ I, x 6≥ i.

4

PETTERI KASKI, JUKKA KOHONEN, AND THOMAS WESTERB ¨ACK

The following theorem provides an alternative characterization.

Theorem 1. A ﬁnite lattice fulﬁlls condition (1) if and only if it is geometric.

Proof. For the “if” direction, let L be a ﬁnite geometric lattice, x ∈ L, and i ∈ I
such that x 6≥ i. Since L is atomic, i is an atom, and i ⋗ ˆ0 = x ∧ i. Now by
semimodularity x ∨ i ⋗ x.
For the “only if” direction, let L be a ﬁnite lattice where (1) holds. For any
join-irreducible i, choosing x = ˆ0 shows that i ⋗ ˆ0, thus L is atomic.

Let then x and y be elements such that y ⋗ x∧ y = m. Choose a join-irreducible
element i such that i ≤ y but i 6≤ x. Now y = m ∨ i, so x ∨ y = x ∨ m ∨ i = x ∨ i,
which covers x by condition (1). Thus L is semimodular.

(cid:3)

3. Fast M¨obius inversion in semimodular lattices

We shall next show that atomicity is unnecessary for fast zeta and M¨obius trans-

forms: semimodularity by itself suﬃces to ensure programs of length e.

3.1. Fast zeta transform. We recall the fast zeta transform algorithm of Bj¨ork-
lund et al. [2, §3.2]. While the original algorithm is described by embedding the
lattice L into a set family L, for the sake of transparency we describe the algorithm
directly in terms of lattice operations.
Algorithm 1 takes as input a representation of the lattice structure, and outputs
a sequence of additions to be performed. Theorem 1.1 of Bj¨orklund et al. [2] shows
that the resulting straight-line program indeed computes the zeta transform for any
lattice, regardless of how I is ordered. The outer loop beginning on line 4 is executed
n times, and the inner loop at most |L| = v times, so at most O(vn) additions are
used; but the precise number may be much smaller, depending on lattice structure
and the ordering of I. Consider a chain of v elements, with n = e = v − 1. Bottom-
up traversal incurs e additions, which is the optimal number; each addition proceeds
along an edge of the chain. In contrast, top-down traversal is suboptimal and incurs
Θ(e2) additions [2], many of which involve two distant elements that do not share
an edge.

Algorithm 1 Fast zeta transform

Input: Lattice L with join-irreducibles I = [n]
Output: Straight-line program that, given f , computes its zeta transform g
1: for all x ∈ L do
2:
3: end for
4: for i = 1, 2, . . . , n do
5:

print “g(x) ← f (x)”

{Initialization}

{Addition}

for all x ∈ L such that x 6≥ i do

y ← x ∨ i
if ϕi−1(x) = ϕi−1(y) then

print “g(y) ← g(y) + g(x)”

6:

7:
8:

end if
end for

9:
10:
11: end for

FAST M ¨OBIUS INVERSION IN SEMIMODULAR LATTICES AND U-LABELABLE POSETS 5

The observation that bottom-up traversal leads to fewer additions can be gen-
eralized to all semimodular lattices. The following theorem provides the optimal
arrangement, whereby each addition corresponds to an edge of the lattice.

Theorem 2. In a semimodular lattice with e edges, the join-irreducible elements
can be ordered so that Algorithm 1 generates exactly e additions.

Proof. Order the join-irreducible elements by increasing rank, breaking ties arbi-
trarily. Consider the situation when the condition on line 7 succeeds.

Since i is join-irreducible, there is a unique element k such that k ⋖ i. Since k
has a rank strictly smaller than i, it follows that ϕi−1(k) = ϕ(k). Now, because
k ≤ i ≤ x ∨ i = y, we have

ϕ(k) = ϕi−1(k) ⊆ ϕi−1(y) = ϕi−1(x) ⊆ ϕ(x),

where the equality ϕi−1(y) = ϕi−1(x) is true due to the condition on line 7.

Since ϕ(k) ⊆ ϕ(x), it follows that k ≤ x. Thus since i 6≤ x we must have
x ∧ i = k, implying i ⋗ k = x ∧ i, and then x ∨ i ⋗ x by semimodularity.
We have seen that whenever an addition is generated on line 8, it involves ele-
ments x and y such that x ⋖ y, so we can associate the addition with an edge of the
Hasse diagram. No two additions are associated with the same edge, so the number
of additions is at most e. Conversely, each edge is visited by the algorithm, since
if x ⋖ y, then ϕ(x) 6= ϕ(y), and the edge is visited with the smallest i such that
ϕi(x) 6= ϕi(y). Hence the algorithm perfoms exactly e additions.

(cid:3)

Figure 1 illustrates how the zeta transform proceeds in a semimodular lattice
that has 9 edges. Nine additions are performed in four phases, corresponding to
the four join-irreducible elements of the lattice.

3.2. Fast M¨obius transform. Next we shall show the corresponding result for
the M¨obius transform, which computes f from g. Again we start with the algorithm
by Bj¨orklund et al. [2, §3.6] expressed in terms of lattice operations.
Algorithm 2 is similar to the zeta transform algorithm, with a few crucial changes.
The join-irreducible elements are visited in reverse order, the roles of f and g are
inversed, and subtraction replaces the addition on line 8. Since the conditions on
lines 5–7 are the same as before, the next theorem follows.

Algorithm 2 Fast M¨obius transform

Input: Lattice L with join-irreducibles I = [n]
Output: Straight-line program that, given g, computes its M¨obius transform f
1: for all x ∈ L do
print “f (x) ← g(x)”
2:
3: end for
4: for i = n, n − 1, . . . , 1 do

{Initialization}

5:

6:

7:
8:

for all x ∈ L such that x 6≥ i do

y ← x ∨ i
if ϕi−1(x) = ϕi−1(y) then

print “f (y) ← f (y) − f (x)”

end if
end for

9:
10:
11: end for

{Subtraction}

6

PETTERI KASKI, JUKKA KOHONEN, AND THOMAS WESTERB ¨ACK

3

1

6

5

0

4

3

2

1

6

5

0

4

3

2

1

Figure 1. Fast zeta transform in a semimod-
ular lattice. In each phase the join-irreducible
element i being considered is highlighted in
blue. Red arrows indicate addition along
edges. Thick black edges have been visited
already, and dashed edges are yet unvisited.

3

1

6

5

0

4

3

2

1

6

5

0

4

3

2

1

Figure 2. Fast M¨obius transform in a semi-
modular lattice.
In each phase the join-
irreducible element i being considered is high-
lighted in blue. Cyan arrows indicate subtrac-
tion along edges. Thick black edges have been
visited already, and dashed edges are yet un-
visited.

6

5

0

6

5

0

4

3

2

1

6

5

0

4

2

Straight-line program
Phase 1 g(1) ← g(1) + g(0)
g(5) ← g(5) + g(2)
g(6) ← g(6) + g(4)
Phase 2 g(2) ← g(2) + g(0)
g(5) ← g(5) + g(1)
g(6) ← g(6) + g(3)
Phase 3 g(3) ← g(3) + g(1)
g(6) ← g(6) + g(5)
Phase 4 g(4) ← g(4) + g(2)

4

3

2

1

6

5

0

4

2

Straight-line program
Phase 4 f (4) ← f (4) − f (2)
Phase 3 f (6) ← f (6) − f (5)
f (3) ← f (3) − f (1)
Phase 2 f (6) ← f (6) − f (3)
f (5) ← f (5) − f (1)
f (2) ← f (2) − f (0)
Phase 1 f (6) ← f (6) − f (4)
f (5) ← f (5) − f (2)
f (1) ← f (1) − f (0)

FAST M ¨OBIUS INVERSION IN SEMIMODULAR LATTICES AND U-LABELABLE POSETS 7

Theorem 3. In a semimodular lattice with e edges, the join-irreducible elements
can be ordered so that Algorithm 2 generates exactly e subtractions.

Proof. Order and name the join-irreducible elements as 1, 2, . . . , n by increasing
rank, breaking ties arbitrarily. When the condition on line 7 succeeds, it holds that
x ⋖ y, by the same reasoning as in Theorem 2. Thus the subtraction on line 8
can be associated with that edge, and total the number of subtractions performed
equals the number of edges.
(cid:3)

Figure 2 illustrates how the M¨obius transform proceeds on a semimodular lattice.

Note that join-irreducible elements are considered in the reverse order 4, 3, 2, 1.

4. Fast M¨obius inversion in posets labelable with unique rising chains

Our next addition algorithm is constructed to proceed along the edges of a poset.

By this we mean that the straight-line program consists of e lines of the form

g(y) ← g(y) + g(x),

one for each edge (x, y), where x ⋖ y. The edges are visited in an order speciﬁed
by an edge labeling λ : E → Z. The algorithm requires the labels to be distinct so
that the order is unambiguous. The inverse transform is obtained by reversing the
order of operations and replacing additions with subtractions.

Algorithm 3 Add along edges
Input: Poset P with injective edge labeling λ : E → Z
Output: Straight-line program
1: for all x ∈ P do
2:
3: end for
4: for all (x, y) ∈ E in increasing order of λ do
5:
6: end for

print “g(y) ← g(y) + g(x)”

print “g(x) ← f (x)”

Algorithm 4 Subtract along edges
Input: Poset P with injective edge labeling λ : E → Z
Output: Straight-line program
1: for all x ∈ P do
2:
3: end for
4: for all (x, y) ∈ E in decreasing order of λ do
5:
6: end for

print “f (y) ← f (y) − f (x)”

print “f (x) ← g(x)”

{Initialization}

{Addition}

{Initialization}

{Subtraction}

Both Algorithms 3 and 4 generate exactly e operations by design, in contrast to
Algorithms 1 and 2, which do so for semimodular lattices but not in general. We will
next formulate a suﬃcient condition to ensure that Algorithm 3 computes the zeta
transform (and that consequently Algorithm 4 computes the M¨obius transform).

8

PETTERI KASKI, JUKKA KOHONEN, AND THOMAS WESTERB ¨ACK

Consider two comparable elements x ≤ y and a unreﬁnable chain C from x to y,

x = x0 ⋖ x1 ⋖ ··· ⋖ xm = y.

With a labeling λ : E → Z, we say that C is rising if its labels are increasing,
(2)

λ(x0, x1) ≤ λ(x1, x2) ≤ ··· ≤ λ(xm−1, xm).

We allow here λ to be non-injective for compatibility with Stanley’s deﬁnition [11,
§3.14]. An edge labeling λ : E → Z is a U-labeling (labeling with unique rising
chains) if, for each pair of elements x ≤ y, there is exactly one rising chain from x
to y.
Now if λ is injective and C is a rising chain from x to y, then the inequalities
in (2) are strict, and Algorithm 3 performs additions along C in the chain order.
Thus the input term f (x) propagates along C to the output g(y). Conversely, if
C is not rising, then some of the additions in the chain are performed out of the
chain order, and f (x) does not propagate to g(y) along C. Hence we have following
suﬃcient condition.

Proposition 4. If λ is an injective U-labeling, then the straight-line programs from
Algorithms 3 and 4 compute the zeta and M¨obius transforms, respectively.
Proof. For each pair x ≤ y, the straight-line program from Algorithm 3 propagates
f (x) up to g(y) exactly once, along the unique rising chain from x to y. Thus for
each element y ∈ P , the output g(y) equals Px≤y f (x) as required. Hence the
result is the zeta transform.
The program from Algorithm 4 consists of subtractions that undo the additions
(cid:3)

in reverse order, hence it performs the M¨obius transform.

Below we show two diﬀerent edge labelings on a poset. The labeling on the left
has two rising chains from a to d, so if additions are performed in this order, g(d) will
incorrectly contain the term f (a) twice. On the right is a U-labeling, which leads
to the correct zeta transform g(a) = f (a), g(b) = f (a) + f (b), g(c) = f (a) + f (c),
and g(d) = f (a) + f (b) + f (c) + f (d).

b

3

1

d

a

4

2

c

b

4

1

d

a

2

3

c

A poset that admits a U-labeling is U-labelable. A U-labeling is not necessarily
injective as required by Algorithms 3 and 4, but an injective U-labeling can be
produced as follows.

Proposition 5. If a poset has a U-labeling, then it also has an injective U-labeling.

Proof. Let P be a poset with a U-labeling λ. Order the edges by λ; among edges
that have the same label, order by their ﬁrst elements according to the poset or-
der ≤. Break any remaining ties arbitrarily. With the edges thus ordered, deﬁne
an injective labeling λ′ by assigning labels 1, 2, . . . , e in order.

FAST M ¨OBIUS INVERSION IN SEMIMODULAR LATTICES AND U-LABELABLE POSETS 9

Consider now an unreﬁnable chain C. If C is not rising under λ, then it contains
three elements s ⋖ t ⋖ u such that λ(s, t) > λ(t, u). Then also λ′(s, t) > λ′(t, u),
and C is not rising under λ′.

Conversely, if C is rising under λ, then with any three consecutive elements
s ⋖ t ⋖ u in C, we have either λ(s, t) < λ(t, u) or λ(s, t) = λ(t, u). In either case,
by construction, λ′(s, t) < λ′(t, u). Hence C is rising under λ′.

Since λ and λ′ have the same rising chains, λ′ is also a U-labeling.

(cid:3)

By combining Propositions 4 and 5 we obtain our main result for U-labelable

posets.

Theorem 6. In a U-labelable poset that has e edges, the zeta transform can be
computed in e additions, and the M¨obius transform in e subtractions.

U-labelable posets are a generalization of R-labelable posets: an R-labelable
poset is a graded U-labelable poset. Thus Theorem 6 provides fast zeta and M¨obius
transforms for all R-labelable posets, which include supersolvable lattices and semi-
modular lattices (see Stanley [11, §3.14]). For a semimodular lattice an R-labeling
is obtained by naming the join-irreducible elements as 1, 2, . . . , n in an order com-
patible with the lattice (for example, ordering by rank), and deﬁning

λ(s, t) = min{i : s ∨ i = t}.

Lower semimodular lattices are U-labelable as well. More generally, duality pre-
if λ is a U-labeling for poset P , then λ∗(s, t) = −λ(t, s) is
serves U-labelability:
a U-labeling for P ∗. As an example, the ﬁgure below on the left shows an upper
semimodular lattice with a U-labeling. On the right is its dual with the derived
U-labeling, whereby Algorithm 3 computes the zeta transform in 9 additions. In
comparison, Algorithm 1 can use up to 11 additions (depending on how I is or-
dered).

2

3

1

4

3

2

1

1

2

−1

−2

−3

−2

−1

−4

−2

−3

−1

The pentagon lattice, shown below on the left, is not graded but has a U-labeling,
facilitating both transforms in 5 operations. The hexagon lattice (below on the
right) cannot be U-labeled. This would require rising chains from p to r and from
q to s, implying that the chain p ⋖ q ⋖ r ⋖ s is rising; but similarly p ⋖ t ⋖ u ⋖ s
would be rising, so there would be two rising chains from p to s.

10

PETTERI KASKI, JUKKA KOHONEN, AND THOMAS WESTERB ¨ACK

r

q

2

s

3

1

p

4

5

t

r

q

s

p

u

t

In the hexagon it is impossible to compute the zeta transform in e pairwise
operations (additions or subtractions); at the minimum, 7 = e + 1 operations are
required. This can be seen by observing that at least four operations are required
to compute the four outputs at q, r, t, and u, and then enumerating the possibilities
of computing the remaining output g(s).

The converse of Theorem 6 does not hold for posets in general. There are posets
that are not U-labelable, but admit the zeta transform in e operations or less
(for example the bipartite poset mentioned in the introduction, augmented with
a hexagon on top). However, for lattices this seems to be an open question:
if a
lattice admits the zeta transform in e operations, is it necessarily U-labelable?

Another open question concerns whether there are any posets where the zeta
transform requires more than 2e operations. The hardest known instance, in terms
of e, seems to be a lattice constructed from k parallel chains of k elements, adjoined
with a common bottom and a common top, with a total of e = k(k+1) edges. If only
addition is available, then Theorem 1 of J¨arvisalo et al. [6] implies that computing
the zeta transform for this lattice requires 2e − O(1) additions.
Acknowledgements. The research that led to these results has received funding
from the European Research Council under the European Union’s Seventh Frame-
work Programme (FP/2007-2013) / ERC Grant Agreement 338077 “Theory and
Practice of Advanced Search and Enumeration.”

We thank Marcus Greferath for the conjecture that became Theorem 1, and

Matti Karppa for helpful comments.

References

[1] Andreas Bj¨orklund, Thore Husfeldt, Petteri Kaski, and Mikko Koivisto.
Fourier meets M¨obius: Fast subset convolution. In Proc. 39th Annual ACM
Symposium on Theory of Computing, STOC’07, pages 67–74, 2007.

[2] Andreas Bj¨orklund, Thore Husfeldt, Petteri Kaski, Mikko Koivisto, Jesper
Nederlof, and Pekka Parviainen. Fast zeta transforms for lattices with few
irreducibles. ACM Transactions on Algorithms, 12:4:1–19, 2015.

[3] Peter B¨urgisser, Michael Clausen, and M. Amin Shokrollahi. Algebraic Com-

plexity Theory. Springer, 1997.

[4] Michael R. Garey and David S. Johnson. Computers and Intractability: A

Guide to the Theory of NP-completeness. W. H. Freeman, 1979.
[5] George Gr¨atzer. Lattice Theory: Foundation. Birkh¨auser, 2011.
[6] Matti J¨arvisalo, Petteri Kaski, Mikko Koivisto, and Janne H. Korhonen. Find-
In Proc. 15th International

ing eﬃcient circuits for ensemble computation.

FAST M ¨OBIUS INVERSION IN SEMIMODULAR LATTICES AND U-LABELABLE POSETS 11

Conference on Theory and Applications of Satisﬁability Testing, SAT’12, pages
369–382, 2012.

[7] Robert Kennes. Computational aspects of the M¨obius transformation of
graphs. IEEE Transactions on Systems, Man, and Cybernetics, 22:201–223,
1992.

[8] Martin E. Malandro. Fast Fourier transforms for ﬁnite inverse semigroups.

Journal of Algebra, 324:282–312, 2010.

[9] Pekka Parviainen and Mikko Koivisto. Bayesian structure discovery in
In Proc. 13th International Conference

Bayesian networks with less space.
on Artiﬁcial Intelligence and Statistics, AISTATS’10, pages 589–596, 2010.

[10] Richard P. Stanley. Supersolvable lattices. Algebra Universalis, 2:197–217,

1972.

[11] Richard P. Stanley. Enumerative Combinatorics: Volume 1. Cambridge Uni-

versity Press, second edition, 2011.

[12] Leslie G. Valiant. Negation is powerless for Boolean slice functions. SIAM

Journal on Computing, 15:531–535, 1986.

[13] Frank Yates. The Design and Analysis of Factorial Experiments.

Imperial

Bureau of Soil Science, 1937.

Department of Computer Science, Aalto University, Espoo, Finland
E-mail address: petteri.kaski@aalto.fi
E-mail address, Corresponding author: jukka.kohonen@aalto.fi

Department of Mathematics and Systems Analysis, Aalto University, Espoo, Finland
E-mail address: thomas.westerback@aalto.fi

