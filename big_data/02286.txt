6
1
0
2

 
r
a

 

M
0
1

 
 
]
h
p
-
t
n
a
u
q
[
 
 

2
v
6
8
2
2
0

.

3
0
6
1
:
v
i
X
r
a

Transversal Cliﬀord gates on folded surface codes

Center for Computing Research, Sandia National Laboratories, Albuquerque, New Mexico 87185, USA

Jonathan E. Moussa∗

Surface and color codes are two forms of topological quantum error correction in two spatial dimensions with
complementary properties. Surface codes have lower-depth error detection circuits and well-developed decoders
to interpret and correct errors, while color codes have transversal Cliﬀord gates and better code eﬃciency in the
number of physical qubits needed to achieve a given code distance. A formal equivalence exists between color
codes and folded surface codes, but it does not guarantee the transferability of any of these favorable properties.
However, the equivalence does imply the existence of constant-depth circuit implementations of logical Cliﬀord
gates on folded surface codes. We achieve and improve this result by constructing two families of folded surface
codes with transversal Cliﬀord gates. This construction is presented generally for qudits of any dimension.

PACS numbers: 03.67.Ac,03.67.Lx,03.67.Pp

The science of quantum error correction is maturing, with
much of its development now shifting from general theory and
properties of quantum codes to focused studies of the logical
operation, decoding, and performance of speciﬁc codes and
code families of particular importance. With severe geometric
restrictions expected of the layouts and interactions of qubits,
special attention is directed at topological codes in two spatial
dimensions that require only nearest-neighbor gate operations
between qubits on a regular lattice. The simplest families of
these codes are surface codes [1] and color codes [2]. Surface
codes are especially well understood, with resource estimates
for the operation of quantum computers based on them [3].

Surface codes are popular because of their simple structure
and favorable attributes. Data and ancilla qubits are arranged
in a checkerboard pattern on a square lattice. A surface code
is maintained by repeatedly measuring the Pauli operators that
generate its stabilizer group to detect errors. All ancilla qubits
are simultaneously initialized, then entangled with their four
neighboring data qubits, and ﬁnally measured. The low depth
of this error detection circuit combined with eﬃcient decoding
of errors based on minimum weight perfect matching results
in high error thresholds for faulty gate operations [4]. Logical
operations on a surface code are decomposed into Cliﬀord and
T gates, which are more diﬃcult to implement than the error
detection cycle. Established implementations [5] require code
deformation for Hadamard (H) and CNOT gates and resource
states for phase (S ) gates. Magic state distillation [6] is used to
implement T gates, which has a very high resource overhead.
Much research is now devoted to reducing these overheads.

Color codes were developed to simplify logical operations
with strongly transversal single-qubit Cliﬀord gates [2]. These
logical gates are implemented by applying the same physical
gate to every data qubit in the code. Another beneﬁt is that
fewer data qubits are needed to implement a logical qubit with
distance D in a planar color code ( 1
2) relative to a
planar surface code (D2) [7]. However, some stabilizer group
generators of color codes have higher weight than in surface
codes, which causes deeper error detection circuits and ancilla

2 D2 + D − 1

∗ godotalgorithm@gmail.com

qubits that must interact with more than four neighboring data
qubits. The higher diﬃculty of detecting and decoding errors
causes lower error thresholds for color codes compared with
surface codes [8]. Experimental comparison of surface [9] and
color [10] codes is at an early stage. With similar error rates,
surface codes will reach their threshold before color codes.

A formal equivalence between surface and color codes has
been established recently [11]. A color code on a triangle can
be transformed into a surface code on a square by combining
local unitary operations with addition and removal of qubits
and a ﬁnal global unfolding operation. The practical value of
such a transformation is unclear. Changes to the weight and
locality of stabilizer generators and the number of data qubits
will alter code performance, which restricts the mapping of
useful properties between surface and color codes. However,
the transversal single-qubit Cliﬀord gates of color codes must
inevitably map to local unitaries on folded surface codes.

In this paper, we construct folded versions of two standard
families of surface codes that are square or diamond segments
of the toric code [12]. Surprisingly, both code families admit

FIG. 1. (Color online) Generators of the stabilizer group for a qudit
surface code. (a) Vertices denote X or X† on the connected edges, set
by direction (in or out). (b) Faces denote Z or Z† on the surrounding
edges, set by orientation (clockwise or counterclockwise).

(a)(b)=or=ornsewnsewXn Xs Xe XwX †X †Xn Xs Xe XwX †X †Zn Zs Ze ZwZ †Z †Zn Zs Ze ZwZ †Z †2

transversal implementations of single-qubit Cliﬀord gates, but
at the cost of being reduced to the same low code eﬃciency of
2D2 − 2D + 1 data qubits per logical qubit for distance D. We
present this result for qudits rather than just qubits to extend
the recent construction of transversal Cliﬀord gates for qudit
color codes in two spatial dimensions [13]. To simplify this
presentation, we consider the speciﬁc case of D = 5. Because
of the geometric regularity of these surface code families, the
extension to other D values is straightforward. We discuss the
eﬀects of folding on the detection and decoding of errors, but
a detailed quantitative analysis is left to future work.

We deﬁne the qudit notation used in this paper because it is
not as standardized as qubit notation. The single-qudit Pauli
group in d dimensions is generated by {−ω−1/2, X, Z} for

in bra-ket notation. This group is closed under conjugation
by the single-qudit Cliﬀord group, which is generated up to a
phase by Z and extensions of the qubit H and S gates [14],

(1)

(2)

(3)

(4)

(5)

ω = exp(2πi/d)

d−1(cid:88)
d−1(cid:88)

x=0

x=0

X =

Z =

|(x + 1) mod d(cid:105)(cid:104)x|

ωx|x(cid:105)(cid:104)x|

d−1(cid:88)

y=0

d−1(cid:88)
d−1(cid:88)

x=0

x=0

H =

S =

|x(cid:105)(cid:104)y|

ωxy√
d

ω(x−d−2)x/2|x(cid:105)(cid:104)x|.

d−1(cid:88)

d−1(cid:88)

The multi-qudit Cliﬀord group is generated up to a phase by
including a controlled-X gate between all pairs of qudits [14],

CX =

|x, (x + y) mod d(cid:105)(cid:104)x, y|,

(6)

x=0

y=0

where an Xn operation on the second qudit is controlled by the
value n of the ﬁrst qudit. Some representative examples of the
conjugation of Pauli operators by Cliﬀord generators are

ZXZ† = ωX
HXH† = Z
HZH† = X†
S XS † = −ω
S ZS † = Z

−1/2XZ

CX(X ⊗ I)CX† = X ⊗ X
CX(I ⊗ X)CX† = I ⊗ X
CX(Z ⊗ I)CX† = Z ⊗ I
CX(I ⊗ Z)CX† = Z† ⊗ Z.

(7)

This is a nonstandard choice of Cliﬀord generators that results
in a uniform set of conjugation rules for even and odd d.

FIG. 2.
(Color online) Folding of the square qudit surface code for
distance D = 5. (a) The standard planar code layout with numbered
qudits. The dotted line marks the fold. (b) The folded code layout
with the same qudit labels. Stadiums that surround qudits demarcate
transversal subsystems of the logical Cliﬀord gates. Qudits on the
fold are isolated along the top-right diagonal boundary. Other qudits
are grouped by color into a “top” layer (black) an a “bottom” layer
(gray). The ‘X’ labels denote a product of X operators on the nearby
qudits that deﬁne the logical operator XL. Ditto for ‘Z’ labels and ZL.

The standard notation for describing a qudit surface code is
based on Kitaev’s quantum double construction [15] applied
to the cyclic group Zd. A code is deﬁned by a directed planar
graph on an orientable surface. The data qudits are deﬁned by
the graph edges and are labeled for clarity. The generators of

(a)(b)12345678910111213141516171819202122232829303132373839404124252627333435361621015731924842833953711161220251713293418143821262230352723393136324041ZXZZZZXXXXZXZXZXZXZXthe stabilizer group are deﬁned by graph vertices and faces as
shown in Fig. 1. All generators are guaranteed to commute by
this construction. We also label generators as tiles with qudits
on each corner and colored to distinguish between X-type and
Z-type to be consistent with an alternate notation inspired by
color codes [16]. The standard square surface code is shown
in Fig. 2(a) for distance D = 5. The more eﬃcient diamond
surface code is shown in Fig. 3(a), which is on a subgraph of
the square code that preserves the code distance. Both codes
encode a single logical qubit. The logical Pauli operator XL is
a product of neighboring X operators that commutes with all
stabilizer generators by connecting the top and bottom graph
boundaries, which terminate on vertices and are referred to as
“smooth”. Logical ZL is similarly a product of Z operators that
connects the left and right graph boundaries, which terminate
on faces and are referred to as “rough”. For convenience, we
deﬁne XL and ZL to lie along boundaries in Figs. 2 and 3.

In accordance with the mapping between color and surface
codes [11], we fold the square surface code in Fig. 2(a) along
the dotted line. A folded code layout is displayed in Fig. 2(b).
Qudits along the fold are positioned on the top-right diagonal
boundary and all remaining qudits are organized by color into
a “top” layer in black and a “bottom” layer in gray. The “top”
graph in black is dual to the “bottom” graph in gray. However,
this does not obey the standard dual construction of uniformly
rotating all primal edges to deﬁne the dual edge direction. The
stadiums surrounding qudits delineate transversal subsystems
of the logical Cliﬀord gates. Every top qudit is paired with a
bottom qudit, and every fold qudit is isolated. The top rough
boundary now overlaps the bottom smooth boundary, and the
bottom rough boundary overlaps the top smooth boundary. It
is this boundary correspondence that enables overlapping XL
and ZL in the folded layout, just as in a color code [11].

The diamond surface code in Fig. 3(a) possesses the same
code distance as the square surface code using D2 instead of
2D2 − 2D + 1 data qudits. However, we are unable to identify
a simple fold that attains the same symmetry properties as the
folded square code. An alternative is to extend the code from
a diamond into a folded cone in Fig. 3(b) that is folded over
the middle dotted line and merged along the top dotted lines.
The top-right qudit is removed to deﬁne commuting stabilizer
generators on the “tip” of the cone, and a bottom-right qudit is
added to deﬁne commuting stabilizer generators between the
rough and smooth boundaries on the bottom of the code. This
procedure unfortunately enlarges the folded cone code back to
the 2D2 − 2D + 1 data qudits of the square surface code. The
folded layout of the cone in Fig. 3(c) now possesses all of the
symmetries of the folded square in Fig. 2(b).

A transversal HL gate is enabled by symmetry over the fold,
which generalizes the self-dual structure of qubit codes [17].
A self-dual code has a strongly transversal HL gate. We can
assign a label S to every X-type stabilizer generator XS such
that HL conjugation transforms XS to a corresponding Z-type
stabilizer generator ZS with the same label,

HLXS H†
HLZS H†

L

L

= ZS ,
= X†
S .

(8)

3

FIG. 3.
(Color online) Extension and folding of the diamond qudit
surface code for distance D = 5. The notation is the same as Fig. 2
with standard layouts for the diamond (a) and cone (b) and a folded
layout for the cone (c). Pairs of qudits along the top of (b) are merged.

(a)(c)9171321222331ZXZZZXXXZXZXZX †ZXZX †(b)157910111213141516171819202122232425579101213141517181920222324252630313237383927333435362829126611162425ZX235383537393040418417143483610331232152720282919623842438ZZZZZXX †XX †X404121The logical action of HL is to transform between XL and ZL,

4

HLXLH†
HLZLH†

L

L

= ZL,
= X†
L.

(9)

d−1(cid:88)

d−1(cid:88)

Eqs. (8) and (9) remain true for the folded surface codes, but
with a more complicated transversal HL deﬁned in Fig. 4. The
alternation between operators and their Hermitian conjugates
is analogous to star-conjugate transversal gates induced by the
star bipartition structure of qudit color codes [13]. HL contains
the qudit SWAP gate, which generalizes the qubit case to

SWAP =

|x, y(cid:105)(cid:104)y, x|.

(10)

x=0

y=0

a,b

= Ub.

It transforms a gate Ua acting on a qudit a into the same gate
acting on a qudit b as SWAPa,bUaSWAP†

A transversal S L gate is also enabled by symmetry over the
fold. To enable a strongly transversal S L gate, a qubit code
must have doubly even structure [17]. The action of S L on an
X-type qubit stabilizer generator produces a phase factor and
a Z-type stabilizer generator, S LXS S †
= ω|XS |/2XS ZS , where
|XS| is the weight of the XS Pauli operator. This preserves the
stabilizer group only if |XS| is a multiple of four in the qubit
case to cancel the phase factor, ω|XS |/2 = 1. In general, this
mechanism for phase cancellation would require the weight
of stabilizer generators to scale with qudit dimension. Instead,
we cancel phase factors in complex conjugate pairs with the
S L implementation in Fig. 4. With the same labels as Eq. (8),
S L conjugation of generators preserves the stabilizer group,

L

S LXS S †
S LZS S †

L

L

= XS ZS ,
= ZS .

(11)

For X-type generators with nontrivial action on a pair of fold
qudits, the conjugation of an XaXb by S aS †
b produces a pair
of phase factors, −ω1/2 and −ω−1/2, that cancel. The logical
operators have nontrivial action on a single fold qudit, which
produces the correct phase factor for the logical S L,

−1/2XLZL,

= −ω
= ZL.

(12)

L

L

S LXLS †
S LZLS †
d−1(cid:88)

d−1(cid:88)

The S L implementation uses a two-qudit controlled-Z gate,

CZ =

ωxy|x, y(cid:105)(cid:104)x, y|.

(13)

x=0

y=0

It is exchange symmetric, with CaZb = CbZa for its operation
on qudits a and b. Up to symmetries, its only nontrivial action
on a Pauli generator is CZ(X ⊗ I)CZ† = X ⊗ Z.

With transversal implementations of both HL and S L on the
same layout of transversal subsystems, we have a transversal
implementation of the full single-qudit Cliﬀord group that S L
and HL generate [14]. To extend this to a multi-qudit Cliﬀord
group, we need to implement entangling logical gates such as
CXL with other logical qudits. With a planar layout of logical

(Color online) Transversal implementation of HL and S L
FIG. 4.
logical Cliﬀord gates for the codes in Figs. 2 and 3. There are four
types of transversal subsystems delineated by qudit orientation and
type. Each subsystem type prescribes a diﬀerent local unitary.

qudits on a common lattice of physical qudits, we can consider
lattice surgery implementations of CXL adapted from surface
code [18] or color code [19] implementations. This has the
overhead of preparing and measuring an ancilla logical qudit.
Alternatively, the folded surface layout can be repurposed for
a strongly transversal CXL gate if a pair of logical qudits can
be unfolded and stacked as depicted in Fig. 5(a). This idea has
been proposed previously for a stack of surface codes in three
spatial dimensions [20]. It now reduces the implementation of
a multi-qudit Cliﬀord group to a set of transversal gates and a
logical data movement problem.

In addition to the data qudits shown in Figs. 2(a) and 3(a),
the unfolded surface code is usually considered to have one
ancilla qudit on each colored tile. The standard error detection
circuit for qubits contains a sequence of CX gates between an
ancilla qubit and its four neighboring data qubits [20]. This
circuit is similar for qudits except for a distinction between
CX and CX†. The spatial layout of a surface code on a lattice
of qudits with nearest-neighbor gates is an important property
that we should preserve if at all possible. We can implement
the folded codes in Figs. 2(b) and 3(c) as shown with the same
spatial layout by inserting pairs of ancilla qudits between pairs
of data qudits. We can still measure the stabilizer generators
using only nearest-neighbor gates by inserting a swap phase
into the error detection circuit that applies SWAP to all pairs
of ancilla qudits and to all pairs of data qudits (fold qudits are
not paired and not swapped). Each of the CX gates in an error
detection circuit is now a nearest-neighbor gate either before
or after the swap phase. Unfortunately, a swap phase increases
the depth of the error detection circuit and can spread errors
between the top and bottom layers of a folded code, which are
nonlocal errors in the unfolded code. This might reduce error
thresholds and increase the diﬃculty of decoding errors. Also,
a single SWAP per pair does not return the data qudits to their
original locations at the end of the error detection circuit. This

HLSLsubsystemfftbHfSfHfH †SfS †tbSWAPt,b Ht HbH †SWAPb,t Hb HtH †Ct ZbCb ZtZ †is not a fundamental problem, it simply necessitates additional
bookkeeping of qudit locations as a function of time.

With an established planar layout for a folded surface code,
we return to the logical data movement problem. The paired
data qudits in this layout function as two virtual layers. While
a folded surface code occupies both layers, we can implement
an unfolded surface code on a single layer. We consider the
default conﬁguration of multiple logical qudits on this layout
as unfolded and fully occupying a single layer, with the other
layer completely empty. There is now suﬃcient room to fold
a logical qudit temporarily and perform a single-qudit Cliﬀord
gate or to use lattice surgery [18] for data movement through
the empty layer and stack logical qudits as in Fig. 5(a) for a
CX gate. While an individual folded surface code has a low
code eﬃciency, this arrangement of logical qudits enables an
overall 50% occupancy of data qudits. This improves on the
25% data qudit occupancy of a single-layer arrangement that
has suﬃcient space for data movement [18]. Quantifying the
eﬃcient use of physical qudits is thus more complicated than
considering the code eﬃciency of a single logical qudit.

We must now implement folding and unfolding operations
to convert a logical qudit between a default unfolded surface
code and a folded surface code to enable transversal Cliﬀord
gates. The folding of our square surface code is depicted as a
sequence of steps in Fig. 5(b). Active data qudits are swapped
with neighboring ancilla and data qudits. The swap paths for
the top right qudit are displayed, and all other swap paths are
shifted versions of these paths. When all data qudits are in a
stadium during this sequence of swaps, we can implement a
nearest-neighbor error detection circuit with a swap phase to
both check for errors and contribute to the data movement. To
unfold the code, we just reverse the folding operation.

The expansion of a diamond surface code into a folded cone
is more complicated than the folding of a square surface code
because the initial and ﬁnal codes have a diﬀerent number of
data qudits. In general, careful use of code deformation [21]
can transform Fig. 3(a) into Fig. 3(b) and preserve the code
distance at every step. We outline a simple example based on
lattice surgery [18] that is depicted in Fig. 5(c). First, active
data qudits are swapped into the appropriate location, and H2
is applied to qudits #6 and #16 to reverse their edge direction.
We apply projective X measurements to bottom qudits on the
left side of the diamond, and projective Z measurements to
bottom qudits on the right side of the diamond and the qudits
being added and removed along the fold. We then switch to
measuring the stabilizer generators of the folded cone code.
The new code experiences a high rate of X p errors on qudits
measured in the X basis and Z p errors on qudits measured in
the Z basis that it must correct. This masks background errors
and temporarily reduces the eﬀective code distance. Speciﬁc
errors that cause this problem are the Z p errors on qudits #21,
#26, and #41 that can each incorporate into a choice of ZL to
reduce its minimum weight to D = 4. Errors on qudit #21 can
be negated by applying C22X†
21 before measuring to decouple
it from the surface code. Errors on qudits #26 and #41 can be
mitigated by applying C25X26 and C40X41 after measuring the
data qudits. This step correlates the measurement-induced Z p
errors into pairs that are unable to reduce the weight of ZL.

5

FIG. 5.
(Color online) Logical data movement on a folded layout.
(a) Stacking of two surface codes for a strongly transversal CXL gate.
(b) Folding the square surface code for transversal HL and S L gates.
The lines denote example swap paths, which are further decomposed
into local swaps. In the example shown, swaps #3 and #6 are part of
error detection circuits with a swap phase. (c) Extending the diamond
surface code to the folded cone by lattice surgery [18] for transversal
HL and S L gates. Projective measurement is used to add and remove
qudits, in the X basis on the left and in the Z basis on the right.

(a)(c)(b)=123456measure Zmeasure X 6

The scope of this paper is limited to the implementation of
Cliﬀord gates, which do not directly enable universal quantum
computation. A single code cannot have a set of gates that is
both transversal and universal [22], and topological stabilizer
codes in two spatial dimensions cannot protect a non-Cliﬀord
gate [23]. Both no-go theorems apply to folded surface codes.
The ﬁrst can be circumvented by the conversion between two
codes with complementary transversal gates that are universal
when combined [24]. The second might be circumvented by
the combination of Cliﬀord gates on qubits and qudits, which
is universal if a four-dimensional logical Hilbert space can be
converted between two logical qubits and a logical qudit [25].
The code conversion relevant to this paper would be between
two stacked qubit surface codes and a qudit surface code. It is
not yet known if topological protection of this code conversion
process is possible in two spatial dimensions.

In conclusion, we have developed a formal correspondence
between planar color codes and folded surface codes [11] into
a practical proposal to fold surface codes and apply transversal
Cliﬀord gates without altering the underlying planar layout of
physical qudits. The only disadvantage of this proposal is the
addition of a swap phase in the error detection circuit, which
is an extra source of errors with faulty gate operations. It does

not change the low code eﬃciency of implementing a single
logical qudit in a surface code, but it does enable the eﬃcient
packing of logical qudits in a lattice of physical qudits while
maintaining the capability for logical data movement. This is
achieved by implementing two virtual layers of qudits within
one physical layer. We keep one virtual layer occupied with
logical qudits, and leave one virtual layer empty to either fold
logical qudits for single-qudit Cliﬀord gates or move and stack
logical qudits for controlled-X gates. Ultimately, all quantum
error correction proposals are limited by future experimental
constraints that are uncertain at the present time. To mitigate
this uncertainty, we should develop a diverse set of ideas that
can be adapted as necessary to satisfy unforeseen constraints.
The folding of surface codes on two virtual layers of qudits
embedded in a planar layout contributes to this diversity.

This work was supported by the Laboratory Directed Re-
search and Development program at Sandia National Labora-
tories. Sandia National Laboratories is a multi-program labo-
ratory managed and operated by Sandia Corporation, a wholly
owned subsidiary of Lockheed Martin Corporation, for the
U.S. Department of Energy’s National Nuclear Security Ad-
ministration under contract DE-AC04-94AL85000.

[1] S. B. Bravyi and A. Yu. Kitaev, arXiv:quant-ph/9811052.
[2] H. Bombin and M. A. Martin-Delgado, Phys. Rev. Lett. 97,

062303 (2006).

[12] H. Bombin and M. A. Martin-Delgado, Phys. Rev. A 73,

180501 (2006).

[3] N. C. Jones, R. Van Meter, A. G. Fowler, P. L. McMahon, J.
Kim, T. D. Ladd, and Y. Yamamoto, Phys. Rev. X 2, 031007
(2012).

[4] R. Raussendorf and J. Harrington, Phys. Rev. Lett. 98, 190504

[13] F. H. E. Watson, E. T. Campbell, H. Anwar, and D. E. Browne,

Phys. Rev. A 92, 022312 (2015).

[14] J. M. Farinholt, J. Phys. A 47, 305303 (2014).
[15] A. Yu. Kitaev, Ann. Phys. 303, 2 (2003).
[16] H. Bombin and M. A. Martin-Delgado, Phys. Rev. A 76,

(2007).

[5] A. G. Fowler, M. Mariantoni, J. M. Martinis, and A. N. Cleland,

Phys. Rev. A 86, 032324 (2012).

[6] S. Bravyi and A. Kitaev, Phys. Rev. A 71, 022316 (2005).
[7] A. J. Landahl, J. T. Anderson, and P. R. Rice, arXiv:1108.5738.
[8] A. M. Stephens, arXiv:1402.3037.
[9] A. D. C´orcoles, E. Magesan, S. J. Srinivasan, A. W. Cross, M.
Steﬀen, J. M. Gambetta, and J. M. Chow, Nat. Commun. 6,
6979 (2015).

[10] D. Nigg, M. M¨uller, E. A. Martinez, P. Schindler, M. Hennrich,
T. Monz, M. A. Martin-Delgado, and R. Blatt, Science 345, 302
(2014).

[11] A. Kubica, B. Yoshida and F. Pastawski, New J. Phys. 17,

083026 (2015).

012305 (2007).

[17] D. Gottesman, Phys. Rev. A 57, 127 (1998).
[18] C. Horsman, A. G. Fowler, S. Devitt, and R. Van Meter, New J.

Phys. 14, 123011 (2012).

[19] A. J. Landahl and C. Ryan-Anderson, arXiv:1407.5103.
[20] E. Dennis, A. Kitaev, A. Landahl, and J. Preskill, J. Math. Phys.

[21] H. Bombin and M. A. Martin-Delgado, J. Phys. A 42, 095302

43, 4452 (2002).

(2009).

[22] B. Eastin and E. Knill, Phys. Rev. Lett. 102, 110502 (2009).
[23] S. Bravyi and R. K¨onig, Phys. Rev. Lett. 110, 170503 (2013).
[24] J. T. Anderson, G. Duclos-Cianci, and D. Poulin, Phys. Rev.

Lett. 113, 080501 (2014).

[25] J. E. Moussa, arXiv:1512.06132.

