6
1
0
2

 
r
a

M
3

 

 
 
]
S
D
.
s
c
[
 
 

1
v
1
8
1
1
0

.

3
0
6
1
:
v
i
X
r
a

The Domination Game:

Proving the 3/5 Conjecture on Isolate-Free Forests

Neta Marcus ∗

David Peleg ∗ †

March 4, 2016

Abstract

We analyze the domination game, where two players, Dominator and Staller, construct to-
gether a dominating set M in a given graph, by alternately selecting vertices into M . Each move
must increase the size of the dominated set. The players have opposing goals: Dominator wishes
M to be as small as possible, and Staller has the opposite goal. Kinnersley, West and Zamani
conjectured in [4] that when both players play optimally on an isolate-free forest, there is a guar-
anteed upper bound for the size of the dominating set that depends only on the size n of the
forest. This bound is 3n/5 when the ﬁrst player is Dominator, and (3n + 2)/5 when the ﬁrst
player is Staller. The conjecture was proved for speciﬁc families of forests in [4] and extended by
Bujt´as in [2]. Here we prove it for all isolate-free forests, by supplying an algorithm for Dominator
that guarantees the desired bound.

1

Introduction

We analyze a two-party game on graphs called the domination game, in which two players with

opposing goals construct together a dominating set for a given graph. The game was introduced

by Bre˘sar, Klav˘zar and Rall in [1]. One setting in which such a problem may be of interest is the

following scenario:

New city regulations state that a house is only ﬁre-safe if it is a short distance from a trained

ﬁreﬁghter. In order to make sure all houses are ﬁre-safe, a list of citizens that should be trained and

hired as ﬁreﬁghters must be made. Two people volunteer for the task of making the list: The city

treasurer, who wishes to minimize the costs and therefore wants the number of ﬁreﬁghters to be as

small as possible, and the head of the ﬁreﬁghters union, who beneﬁts from adding new members and

therefore wishes to maximize the number of ﬁreﬁghters. The mayor, a seasoned politician, decides to

let both volunteers add names to the list in turns, each adding a single ﬁreﬁghter that would improve

∗The Weizmann Institute of Science, Rehovot, Israel. {neta.marcus,david.peleg}@weizmann.ac.il.
†Supported in part by the Israel Science Foundation (grant 1549/13) and the I-CORE program of the Israel PBC

and ISF (grant 4/11).

1

the safety of the city by making additional houses ﬁre-safe, until the new regulations are met. What

strategy should the treasurer adopt? What can be guaranteed about the outcome?

We study the possible outcomes of such a selection process under some speciﬁc settings.

The problem. Throughout, we consider an undirected graph G(V, E) of size |V | = n. We assume
G is isolate-free, i.e., it has no isolated vertices. A dominating set is a set S ⊆ V such that for each
v ∈ V , either v ∈ S or v has a neighbor in S.

For a graph G(V, E) and a subset S ⊆ V , denote the closed neighborhood of S by Γ[S, G], that
is, Γ[S, G] = S ∪ {u ∈ V | there exists some s ∈ S such that (u, s) ∈ E}. For a single vertex v ∈ V ,
deﬁne Γ[v, G] = Γ[{v}, G]. The open neighborhood of v is the set of its neighbors in G, and it is
denoted by Γ(v, G) = {u ∈ V | (u, v) ∈ E}. Whenever G is clear from the context, we omit it and
write simply Γ[S], Γ[v] or Γ(v). The size of the smallest dominating set in G is denoted by γ(G).
For any set S, a vertex v ∈ Γ[S] is said to be dominated by S.

In the domination game, two players construct together a dominating set, M . The players

alternate in taking turns, and in each turn, the current player picks a single vertex and adds it to M .

The two players are referred to as Dominator and Staller, and they have opposing goals regarding
M - Dominator wants to minimize |M|, while Staller wants to maximize it.

The chosen vertex at step t is referred to as the player’s move in step t or the t’th move,
and is denoted by mt. The partial dominating set constructed at the end of step t is denoted by
Mt = {mi : 1 ≤ i ≤ t}. Deﬁne M0 = ∅. A move mt is considered legal if the dominated set increases,
that is, Γ[Mt−1] (cid:36) Γ[Mt]. The players must make legal moves at all steps. The game ends when all
vertices of V are dominated by M (= MT ), that is, when M is a dominating set of G. Hence, the
game is a maximal sequence of legal moves, that is, a sequence (m1, m2, ..., mT ) such that MT is a
dominating set but MT−1 is not.

The domination game has two variants: It is called a Dominator-start game when the ﬁrst move

is taken by Dominator, and a Staller-start game when Staller makes the ﬁrst move. Hence, in a

Dominator-start game, the odd moves are decided by Dominator and the even moves are decided by

Staller. In a Staller-start game, it is the opposite. When both players play optimally, we call the
size of the resulting dominating set the game domination number of G, and denote it by γD(G) for
the Dominator-start variant, and by γS(G) for the Staller-start variant.

We wish to study the following conjecture, introduced in [4].

Conjecture 1. If G is an isolate-free n-vertex forest (i.e., it has no singleton vertices), then γD(G) ≤
3n/5 and γS(G) ≤ (3n + 2)/5.

The conjecture was later extended to general isolate-free graphs in [2], but here we focus on

forests.

Since our goal is to prove the conjecture, we introduce modiﬁed goals for the players. We say

2

Dominator wins in a Dominator-start (respectively, Staller-start) game if the game ends within at

most 3n/5 (resp., (3n + 2)/5) moves, and otherwise Staller wins.

Procedure 1.1. Given an isolate-free n-vertex forest G(V, E), the Dominator-start variant of the

game can be described by the following algorithm.

1. M ← ∅; Tmax ← (cid:98)3n/5(cid:99); t ← 0
2. While Γ[M ] (cid:54)= V :

(a) t ← t + 1
(b) current player ← Dominator if t is odd and Staller otherwise
(c) Receive a legal move v from the current player
(d) M ← M ∪ {v}.

3. If t ≤ Tmax, Dominator wins. Otherwise, Staller wins.

Hereafter, the total number of moves in a speciﬁc execution of the game is denoted by T .

A similar algorithm can be used to describe the Staller-start variant, except that then Tmax is

set to (cid:98)(3n + 2)/5(cid:99), and the odd moves are performed by Staller.

Previous approaches. As mentioned earlier, Conjecture 1 was introduced by Kinnersley, West

and Zamani in [4]. In the paper, the conjectured bound of 3n/5 moves is achieved for speciﬁc types

of forests, and a weaker bound of 7n/11 moves is proved for arbitrary isolate-free n-vertex forests.

In [2], Bujt´as proves the conjecture for isolate-free forests in which no two leaves are at distance

4, and improves the bound for arbitrary isolate-free n-vertex forests from 7n/11 to 5n/8. The

proofs in [2] use a method for coloring and evaluating vertices according to their state, and creating

intermediate graphs, in order to choose moves and to prove the desired bound.

Motivating example. We start with a simple example that illustrates some of the diﬃculties that

any algorithm for Dominator must face. Consider a Dominator-start game which is played on the

graph shown in Figure 1. The graph contains 23 vertices, therefore Dominator wins if and only if
the game ends within 13 moves or less. Even though the neighborhoods of the vertices v1 and v2 are
similar, the reader can verify that Dominator can win by playing v1 or u1 as the ﬁrst move, whereas
if Dominator plays v2 or u2, Staller can win the game by playing z in the following move.

We believe this example can be extended to graphs of arbitrarily large size, in which choosing

between moves that appear to be the same locally may determine the outcome of the game.

Our contributions. We provide an algorithm for Dominator that guarantees that the game ends

within the number of moves required by Conjecture 1 on all isolate-free forests, which proves the

conjecture. We rely on the general method used in [2] and extend it, by separating the value of

each vertex from its color, as well as ﬁne-tuning additional aspects of the intermediate graphs. We

3

Figure 1: Motivating example.

start with Section 2, where we lay the foundations for the analysis by formalizing various aspects of

the game. We then introduce the algorithm in Section 3, and prove that it achieves the bound of

Conjecture 1 in Section 4. We conclude the analysis of Dominator’s strategy in Section 5, where we

discuss a possible implementation of the algorithm and describe our tests. Finally, Section 6 contains

some concluding remarks.

2 Notation and Preliminaries

Before describing the algorithm, we introduce some deﬁnitions and properties used to analyze the

game.

Graph notions and vertex labeling. The graphs on which the game is played are undirected

and unrooted forests that have no isolated (singleton) vertices. We label all vertices in the initial
graph G with distinct even indices, z2i. The motivation for this is that we later introduce virtual
vertices, and we want an easy way to tell apart real (non-virtual) vertices from virtual ones - a real
vertex z2i always has an even index, while a virtual vertex z2j+1 has an odd index.

When we refer to components of a graph, we always mean maximal connected components. For
a component C, deﬁne the size of C to be the number of vertices in C and denote it by |C|. The
degree of a vertex v in a graph G(V, E) is denoted by d(v, G). When G is clear from the context, it

is denoted by d(v).

Vertex color, vertex value and legal moves. Recall that the players construct together a set

M , until it becomes a dominating set. We use a variation of the grading system introduced in [2].

During the game, each vertex has one of three possible colors, and one of three possible values (and

these may change between steps).

Deﬁnition 2.1. Let u be a vertex in the graph. The color, or type, of u at the end of step t, denoted
by ct(u), is deﬁned by the following properties:

– u is called white or ct(u) = W if u is not dominated, that is, u /∈ Γ[Mt].

4

– u is called blue or ct(u) = B if u is dominated but has an undominated neighbor, that is,

u ∈ Γ[Mt] but Γ[u] (cid:54)⊆ Γ[Mt].

– u is called red or ct(u) = R if u is dominated and all its neighbors are dominated, that is,

Γ[u] ⊆ Γ[Mt].

When t is clear from the context, we denote the color by c(u) instead of ct(u).
We deﬁne Wt, Bt and Rt to be the sets of vertices of type W , B and R (respectively) at the end

of step t.

Even though the ﬁrst step of the game is step 1, we use (the end of) step 0 to denote the state

of the graph before the ﬁrst move.
Observation 2.2. For all steps t ≥ 0, V = Wt ∪ Bt ∪ Rt, and these sets are disjoint.
Observation 2.3. For every t ≥ 0 and v ∈ Mt, ct(v) = R. Also, W0 = V and RT = V , namely,
c0(v) = W and cT (v) = R for every v.
Observation 2.4. If ct(u) = B then ct(cid:48)(u) ∈ {B, R} for all t(cid:48) > t. If ct(u) = R then ct(cid:48)(u) = R for
all t(cid:48) > t.
Claim 2.5. At the beginning of step t + 1, the set of legal moves consists of exactly the vertices of
Wt ∪ Bt, or in other words, the only vertices that a player cannot choose at step t + 1 are those in
Rt. This also implies that every move is either on or adjacent to some white vertex.
Proof: Let v ∈ V .
If v is a red vertex, then Γ[v] ⊆ Γ[Mt] and therefore Γ[Mt ∪ {v}] = Γ[Mt],
so v is an illegal move. On the other hand, if v is a blue vertex, then Γ[v] (cid:54)⊆ Γ[Mt] and therefore
Γ[Mt] (cid:36) Γ[Mt ∪ {v}], so v is a legal move. Similarly, if v is a white vertex, then v ∈ Γ[Mt∪{v}]\Γ[Mt]
and therefore v is a legal move.
Observation 2.6. If for some step t, ct(u) = W and ct(v) = R, then (u, v) /∈ E (that is, white and
red vertices cannot be neighbors).
Deﬁnition 2.7. For any step t and for any v /∈ Rt, let ct,v(u) be the color of u assuming the (t + 1)st
move was v, that is, ct,v(u) = ct+1(u) if mt+1 = v.

In addition to its color, each vertex also has a value.

Deﬁnition 2.8. A function p : V × {0, ..., T} → {0, 2, 3} is called a value function if it satisﬁes the
following requirements for all u ∈ V .

– If ct(u) = W then p(u, t) = 3,

– If ct(u) = R then p(u, t) = 0,
– If ct(u) = B then p(u, t) ∈ {2, 3}.

If p(u, t) = k, we say that at step t, u is worth k points, or has value k. For a set of vertices U ⊆ V ,

deﬁne p(U, t) =(cid:80)

u∈U p(u, t).

When t is clear from the context, we may omit it, and denote the value of u by p(u).

5

Deﬁnition 2.9. For any step t, a vertex u is called high, and its type is generically referred to as
H, if p(u, t) = 3. Let Ht denote the set of high vertices at the end of step t.
Deﬁnition 2.10. For any step t and for any vertex u ∈ V , if ct(u) = B and p(u, t) = 3, we say that
u is a B3 vertex (at the end of step t). Similarly, if ct(u) = B and p(u, t) = 2, then u is called a B2
vertex. Note that saying that a vertex is of type H is synonymous to saying that it is of type W or
B3.

In the graphical illustrations to appear hereafter, vertices are of type H except where speciﬁcally

labeled otherwise.
Deﬁnition 2.11. For any step t and for any v /∈ Rt and u ∈ V , let p(u, t, v) be the value of u at
the end of step t + 1 assuming the (t + 1)st move was v, that is, p(u, t, v) = p(u, t + 1) if mt+1 = v.
Observation 2.12. For any step t, for every v ∈ Mt and for any value function p(·,·), p(v, t) = 0.
Also, for any u and for any value function, p(u, 0) = 3 and p(u, T ) = 0, and consecutively p(V, 0) = 3n

and p(V, T ) = 0.

Let us remark that the value function deﬁned later on for the algorithm will ensure that pt(V ) is

monotonically decreasing in t.

Gain. The gain of a vertex v under a given value function is the number of points gained when

the current player chooses it. Formally, given the value function p, the corresponding gain function
g : V × {1, ..., T} → {0, ..., 3 · |V |} is deﬁned by g(v, t + 1) = p(V, t) − p(V, t, v).

Again, whenever t is clear from the context, we omit it.

Claim 2.13. For any 1 ≤ t ≤ T and for any v /∈ Rt−1, the following properties hold.
(a) If p(u, t) = 2 for all u ∈ Bt \ Bt−1, then g(v, t) ≥ 3.
(b) If ct−1(v) = W then g(v, t) ≥ 3 for any gain function g(·,·).

Proof: If ct−1(v) = W , then for any value function it holds that p(v, t− 1) = 3 and p (v, t − 1, v) = 0.
Therefore g(v, t) ≥ 3 (for any gain function), establishing (b).
It remains to prove (a) in case
ct−1(v) = B. Then by the deﬁnition v has some white neighbor, u, at the end of step t − 1. Since
ct−1,v(v) = R, the value of v decreases by at least 2. Also, since ct−1,v(u) ∈ {R, B}, we conclude that
if p assigns a value of 2 to all new blue vertices then the value of u decreases by at least 1. Hence
g(v, t) ≥ 2 + 1 = 3.
Corollary 2.14. It is always possible to deﬁne the value function such that at least 3 points are

gained in every legal move.
Proof: Consider a move mt. If ct−1(mt) = W , then g(mt, t) ≥ 3 since ct(mt) = R. Otherwise,
ct−1(mt) = B and therefore mt has a neighbor u such that ct−1(u) = W . The value of mt itself
decreases by at least 2. Hence if ct(u) = R, then g(mt, t) ≥ 2+3 = 5 for any value function. Otherwise
ct(u) = B, and we can choose p(·,·) such that p(u, t) = 2, gaining 1, and then g(mt, t) ≥ 2 + 1 = 3.

6

In fact, the algorithm will deﬁne the value function in such a way, namely, it will ensure that

every move (including Staller moves) gains at least 3 points.

We now formulate a useful condition on strategies. Denote the average gain per move (over the

entire game) by

ˆg =

1
T

· T(cid:88)

t=1

g(mt, t).

The average gain condition: The average gain per move satisﬁes ˆg ≥ 5.
Claim 2.15. In a Dominator-start game, the average gain condition is equivalent to Conjecture 1.

Proof: As p(V, 0) = 3n and p(V, T ) = 0, we have ˆg = 3n
5 · ˆg ≥ T · ˆg = 3n, which yields ˆg ≥ 5.
3n

T . Therefore, T ≤ 3n

5

is equivalent to

· T(cid:88)

t=2

1

T − 1

g(mt, t).

Next, denote the average gain over steps 2, ..., T by

˜g =

The shifted average gain condition: Excluding the ﬁrst move, the average gain satisﬁes ˜g ≥ 5.
Claim 2.16. In a Staller-start game, the shifted average gain condition implies Conjecture 1.
Proof: By Claim 2.13, g(m1, 1) ≥ 3, and if we use a value function p satisfying p(u, 1) = 3 for all
u ∈ B1, then p(v, 1) = 3 for all v /∈ R1. Assume ˜g ≥ 5. Then p(V, 1) ≤ 3n − 3 and p(v, T ) = 0, and

g(m1, 1) + (T − 1) · ˜g = p(V, 0) − p(V, T ) = 3n.

As g(m1, 1) ≥ 3 and ˜g ≥ 5, we have 3 + (T − 1) · 5 ≤ 3n, or T ≤ 3n−3
claim.

5 + 1 = 3n+2

5

, establishing the

Removing vertices and edges. Recall that red vertices are illegal moves and cannot be played,

and are also worth 0 points. Therefore we have the following.

Observation 2.17. Red vertices can be removed from the graph along with their edges, without

changing the outcome of the game.

By deﬁnition, each blue vertex v has at least one white neighbor. Moreover, v is converted from

blue to red exactly when its last white neighbor is converted to blue or to red, regardless of the states

of its blue neighbors. Therefore we have the following.

Observation 2.18. Edges between two blue vertices can be removed from the graph without changing

the outcome of the game.

However, it may sometimes be useful for our algorithm to keep edges that have a B3 vertex as
one of their endpoints. The decision on whether to remove these edges or not will be made by the

algorithm.

7

The algorithm maintains a graph called the underlying graph, which contains only vertices and

edges that may aﬀect the outcome of the game. This data structure also stores the decisions made

by the algorithm about deleting edges between blue vertices, and contains only the edges that were

not deleted. In particular, the algorithm ensures the following property, throughout the execution.
Property 2.19. The underlying graph at the end of step t, denoted Gt = (Vt, Et), satisﬁes the
following conditions.

1. G0 = G, and the vertices of V are labeled with the labeling z2i deﬁned in Section 2.
2. Vt = Wt ∪ Bt.
3. Et contains only edges that have at least one endpoint in Ht (this guarantees that both endpoints

are in Vt by Observation 2.6), and contains all edges that have at least one endpoint in Wt.

4. Et ⊆ Et−1.

The following observation is an immediate result of the fact that edges are not removed as long

as one of their endpoints is white.
Observation 2.20. If ct(v) = W , then Γ[v, G0] = Γ[v, Gt]. That is, the neighborhood of a white
vertex does not change as long as it is white (except maybe for some of its white neighbors turning

blue).

Corollary 2.21. The last move on a component gains at least 5 points.

Proof: Since G is isolate-free, and the last move is either on or adjacent to some white vertex

(by Claim 2.5), we conclude from Observation 2.20 that the underlying graph contains at least one

additional vertex (that is not red) adjacent to the move. Therefore the total gain is at least 3 + 2 = 5

points.

We want to deﬁne a single algorithm that will serve to prove the conjecture for both variants of

the game. The following corollary explains how this can be done.
Corollary 2.22. Given an algorithm A, which guarantees that the game ends within at most 3n
5
moves in the Dominator-start variant of the game given any initial isolate-free forest where all vertices

are high (and not necessarily white), it is possible to construct an algorithm B which guarantees that
the game ends within at most 3n+2

5 moves in the Staller-start variant of the game.

Proof: The desired goal can be achieved by an algorithm B that sets the value function at the end

of the ﬁrst step as described in the proof of Claim 2.16, and then invokes A for all the following
moves (so that move i is considered by A as move i− 1 for all i ≥ 1). This holds since the underlying
graph G1 contains only high vertices, so the corollary follows from Claim 2.16.

Hereafter we focus on ﬁnding an algorithm which achieves the desired gain for the Dominator-

start variant of the game, and the conjecture will follow from Corollary 2.22.

Structural notations. We use the following deﬁnitions.

8

Deﬁnition 2.23 (White, blue, high subgraph). We say a subgraph of Gt is white (respectively, blue,
high) if all its vertices are white (respectively, blue, high). Speciﬁcally, G0 is high.
Deﬁnition 2.24 (Tail, Subtail). Let P = (v0, v1, ..., vk), k ≥ 1, be a path in Gt, that is, (vi, vi+1) ∈ Et
for every 0 ≤ i < k. P (cid:48) = (v1, ..., vk) is called a tail if d(v0) > 2, d(vk) = 1 (i.e., vk is a leaf ), and
d(vi) = 2 for all 0 < i < k. We call v1 the tail lead, and we say that v0 has a tail. If d(v0) ≥ 1, we
say that (v1, ..., vk) is a subtail.

Figure 2: Graphical conventions used in our illustrations.

Figure 3: Split vertex v in general form. Note that by our graphical conventions, the vertex v has degree
3 or higher, and u has degree 1 or higher, but v1 and v2 have degree exactly 1.

Deﬁnition 2.25 (Split vertex). A vertex of degree at least 3 is called a split vertex if it has at least

two tails. See Figure 3 (our graphical conventions are summarized in Figure 2).

Deﬁnition 2.26 (Path component). A component is called a path component if all its vertices have

degree 1 or 2 (since the graph is a forest, there cannot be cycles). Vertices on a path component that

have degree 2 are called internal vertices of the component.

Path components may be described by a sequence of the colors of their vertices. For example, when
we refer to “ a path of the form B2W H” we mean a path component of size 3 with vertices (v1, v2, v3)
such that v1 is B2, v2 is white and v3 is high. Speciﬁcally, we use the term “ BW component” to
describe a component of size 2 containing one blue vertex and one white vertex.

Deﬁnition 2.27 (Complex component). A component containing at least one split vertex is called

a complex component.
Claim 2.28. Let C be a component and let r1 and r2 be vertices in C (not necessarily distinct). If,
when C is rooted at r1, the subtree T rooted at r2 is not a subtail, then T contains a split vertex.
Proof: Let T be such a subtree. Let r be a vertex on T such that d(r) ≥ 3 (guaranteed to exist
since T is not a subtail). Let λ1, ..., λ(cid:96) be all the leaves of the subtree rooted at r, and for each i, let
vi be the ﬁrst vertex of degree at least 3 on the (unique) path from λi to r, including the endpoints
(see an example in Figure 4). Since d(r) ≥ 3, vi is guaranteed to exist for every i. Notice that not
all vi are distinct. Let v(cid:48) be the vi farthest from r. Since d(v(cid:48)) ≥ 3, there are at least two leaves, λj

9

Figure 4: A sample subtree T containing split vertices.

and λk, in its subtree. Since v(cid:48) is the ﬁrst vertex on the path from λj to r that has degree at least 3,
we conclude that vj = v(cid:48) and therefore v(cid:48) has a tail towards λj. Similarly, we conclude that v(cid:48) has
another tail towards λk. Therefore v(cid:48) has at least two tails, which means it is a split vertex.
Corollary 2.29. Every tree containing a vertex of degree 3 or more has at least one split vertex.

Corollary 2.30. Each (maximal connected) component is either a path component or a complex

component.

3 The algorithm

3.1 Outline

In order to prove Conjecture 1, we show a possible course of action for every move that guarantees

the average gain condition, namely, an average gain of 5 points or more in the Dominator-start

variant of the game. By Corollary 2.22, if Dominator uses an algorithm guaranteeing this gain, then

Dominator wins both in the Dominator-start variant and in the Staller-start variant.

We do not describe a speciﬁc algorithm in this section, but rather show that such an algorithm

exists. In Section 3.4 we present a concrete naive algorithm resulting from this outline, and in Section

5 we discuss better implementations. Section 3.5 contains a simpliﬁed version of this algorithm, that

can be used on isolate-free forests in which no two leaves are at distance 4.

The suggested algorithm outline consists of several parts, performed for each move. Suppose t

moves (t < T ) were already played, and the algorithm needs to decide on the (t + 1)st move (if it is

a Dominator move), or preprocess for step t + 2 (if t + 1 is a Staller move).

1. At the end of step t, the current underlying graph, denoted by Gt, undergoes a simulation

process consisting of two phases, each of which is described in detail later.

– Phase 1: The graph is simpliﬁed by replacing subtrees of certain speciﬁc forms by virtual
vertices (i.e., vertices that were not in G0). The resulting (possibly smaller) graph is called
the dense graph and is denoted by ˆGt.

10

– Phase 2: The resulting dense graph ˆGt is separated into boxes, each of which is a con-
nected subcomponent satisfying one of several properties. The process of separating the

dense graph into boxes is called box decomposition, and each vertex of the dense graph
is assigned into a single box. We deﬁne Invariant I which must be satisﬁed by the box
decompositions used by the algorithm. A box decomposition satisfying this invariant is

called a valid box decomposition.

As becomes clear later, a dense graph may have more than one valid box decomposition,

and we show in the analysis that it is possible to maintain the underlying graph such that

the corresponding dense graph has at least one valid box decomposition. We say that the
underlying graph Gt and the corresponding dense graph ˆGt are good if ˆGt has a valid box
decomposition, and similarly we say that a component C of the dense or underlying graph

is good if a graph containing only this component is good.

2. If move mt+1 is performed by Staller, then the new underlying graph Gt+1 is generated from
Gt in a way that guarantees that at least 3 points are gained by Staller’s move mt+1, and that
the corresponding dense graph has a valid box decomposition. In the analysis, we show that

an underlying graph satisfying these requirements can be generated from any good underlying

graph and for any Staller move.

3. Otherwise (move mt+1 is a Dominator move), move mt+1 is chosen (along with a corresponding
underlying graph) greedily for Dominator from the vertices of ˆGt, such that the gain is maximal
among all such moves which result in a good underlying graph Gt+1.

If several potential moves achieve the (same) maximal gain, ties are broken by choosing a move

maximizing the minimal cumulative gain in the next three moves, i.e., maximizing

min
mt+2

[g(mt+1, t + 1) + g(mt+2, t + 2) + gt+3]

where gt+3 is the maximal gain that can be achieved by Dominator in its following move (with
a good underlying graph), and we deﬁne gt(cid:48) = 0 for all t(cid:48) > T .
If there are still several such maximizing moves, then the tie is broken arbitrarily.

It remains to describe the two phases of the simulation process.

3.2 Phase 1 of the simulation: Creating the dense graph

The dense graph is the result of removing subtrees called triplet witnesses and replacing them with

virtual leaves. The subtrees are constructed by the following process. Initially, set

WT 2 = {v | v is a lead of a white tail of length 2} .

11

Figure 5: All unlabeled vertices are white.
(b) The
corresponding subtree on the dense graph. The triplet vertices in the set T T are the vertices that have
numbers next to them. These numbers are their triplet depths. The vertex v is the only triplet head
in (a), and its triplet witnesses are v1, v2 and v3. The vertices in WT 2 in (a) are v1, v2 and all other
vertices that are adjacent to leaves. Note that we assume that v does not have another neighbor in T T 3
except for v1 and v2.

(a) A triplet subtree on the underlying graph.

Next, the family T T =(cid:83)

i≥1 T T i of triplet vertices, and the family PW =(cid:83)

i≥1 PW i of potential
triplet witnesses, are constructed using the following iterative rule. For every i ≥ 1, we construct
in parallel the sets T T i of triplet vertices and PW i of potential triplet witnesses. For each vertex
v ∈ T T we also deﬁne its triplet depth, td(v), and its triplet subtree. We deﬁne T T i and PW i
iteratively as follows.

Initially, T T 1 = ∅; PW 1 = WT 2.

After deﬁning T T i and PW i:

– Add to T T i+1 every (blue or white) vertex v that has at least three neighbors in PW i:

T T i+1 = T T i ∪ {v ∈ V | |Γ(v) ∩ PW i| ≥ 3}.

– Add to PW i+1 all vertices from T T i+1 that are white and have degree exactly 4, and all

vertices from WT 2:
PW i+1 = {v ∈ T T i+1 | c(v) = W and d(v) = 4} ∪ WT 2.

– For each v ∈ T T i+1 \ T T i do:

1. Set the triplet depth of v, td(v) = i + 1.
2. Choose three triplet witnesses, v1, v2, v3, from the vertices of Γ(v) ∩ PW i (which is guar-
anteed to contain at least three vertices), according to the following priorities (in this

order of signiﬁcance):
(a) Prefer witnesses from WT 2.
(b) Prefer witnesses having lower triplet depth td(vi).
(c) Prefer witnesses with higher z2i labels.

The subtree containing v and its witnesses (and no other neighbors of v) is called the

triplet subtree rooted at v.

12

Note that there is a maximal triplet depth tdmax = maxv∈T T td(v) in the graph, and for all i ≥ tdmax,
T T i = T T tdmax (while T T tdmax−1 (cid:36) T T tdmax). This is true since the graph’s diameter upper bounds
td(v) for every v. If T T = ∅, then set tdmax = 0.

See illustration in Figure 5.

Deﬁnition 3.1. Let v ∈ V be a triplet vertex. If v is not a triplet witness, then it is called a triplet
head (note that v may still be a potential triplet witness that was not chosen as a witness).
Observation 3.2. Let v ∈ V be a triplet vertex. All vertices in the triplet subtree rooted at v are
white, except (possibly) for v itself, which is either white or blue. If v is not a triplet head, then v is

white as well.

Claim 3.3. Let C be a tree. If C contains a triplet vertex, then it contains a triplet head.
Proof: Consider the set T T C = T T ∩ C, and let v be a vertex in T T C with maximal triplet depth
(among the vertices of T T C). By the way we deﬁne td(v) we know that v ∈ T T td(v) \ T T td(v)−1,
and since PW i ⊆ T T i ∪ WT 2 for all i, we conclude that v is not a triplet witness, and therefore it
is a triplet head.
Deﬁnition 3.4. A virtual vertex or virtual leaf is a white leaf with odd label z2i+1 that exists only
on the dense graph, and is adjacent to a vertex z2i that is a triplet head on the underlying graph. A
vertex that is not virtual is called real, and each real vertex has at most one virtual neighbor.

The dense graph is created by replacing all triplet witnesses of each triplet head, along with their

entire subtrees, with a single virtual vertex colored white (see Figure 5(b)), thus converting each

triplet subtree into a subtail of length 2. This operation can be performed as follows:

Procedure Densify:

1. Calculate T = {z ∈ Gt | z is a triplet head}.

/* Note that Gt does not contain virtual vertices. */

2. For each z2i ∈ T :

(a) Disconnect the edges between z2i and its triplet witnesses, and remove the components

containing the triplet witnesses.

(b) Create a new (virtual) white leaf z2i+1 and add an edge between z2i and z2i+1.

3. Return the resulting graph.

The dense graph ˆGt results from invoking the procedure Densify on Gt.

3.3 Phase 2 of the simulation: Box decomposition

In the second phase of the simulation, the algorithm decomposes the dense graph ˆGt into boxes, so
that each vertex belongs to exactly one box. We start by deﬁning the boxes and their possible types.

13

3.3.1 Box types

We now deﬁne a box, and the four possible box types.
Deﬁnition 3.5. Let ˆVt be the set of vertices in ˆGt, and let Q ⊆ ˆVt be a connected subset of vertices
in the dense graph. Q is a box in ˆGt if it satisﬁes the following requirements.

1. Q is of (at least) one of four types: regular, dispensible, high leftover and corrupted, which

are deﬁned below.

2. Q contains at most two B2 vertices.

3. If Q is not regular, then it has a blue vertex r called the box root, and r does not have a

neighbor in Q that is a (white) leaf.

For a vertex v ∈ Q, we deﬁne the internal neighbors of v to be its neighbors inside the box, and the
internal degree of v to be the number of internal neighbors it has.

From now on, whenever we consider the degree or the neighbors of a vertex in a speciﬁc box, we

mean its internal degree and its internal neighbors, except where speciﬁcally noted otherwise.

Figure 6: (a) Dispensible box of type 1. (b) Dispensible box of type 2 where condition 2(c)i holds. (c)
Dispensible box of type 2 where condition 2(c)ii holds. Box roots are marked as r.

Deﬁnition 3.6. There are two types of dispensible boxes.

1. A box Q is called dispensible of type 1, denoted by D1, if it is a path (v1, v2, v3) of the form

B2HH, and the box root is v1.

2. A box Q of size 8 is called dispensible of type 2, denoted by D2, if the following conditions

hold.

(a) The box root r is a B2 vertex of internal degree 2.
(b) r has a high subtail of length 2.
(c) The neighbor u of r that is not on the high subtail satisﬁes exactly one of the following

conditions.
i. u has internal degree 3, and it has two additional neighbors in Q, λ and u(cid:48), such that
λ is a high leaf, and u(cid:48) is the (B2) lead of a tail of the form B2HH (note that this
implies that u(cid:48) could be the root of a D1 box).

14

ii. u has internal degree 2, and it is the lead of a subtail of the form HHB2HH (in this

case as well, the B2 vertex on the tail could be the root of a D1 box).

A box is called dispensible, denoted by D, if it is dispensible of type 1 or 2. See Figure 6 for

illustrations.
Deﬁnition 3.7. A box Q in ˆGt is called a high leftover box if all its vertices are high and it has a
B root, and additionally, it does not contain triplet subtrees.

There are several types of regular boxes, deﬁned below.

Figure 7: Boxes corresponding to the diﬀerent types of regular colored boxes (not all requirements are
illustrated).
(c) A box
satisfying Property P1:(c). (d) A box satisfying Property P2:(a). (e) A box satisfying Property P2:(b).

(b) A box satisfying Property P1:(b).

(a) A box satisfying Property P1:(a).

Deﬁnition 3.8. A box Q of size 3 or more is called a regular colored box if it satisﬁes exactly one
of the following two properties, P1 and P2, and additionally it satisﬁes Property P0 deﬁned below.
P1. Q contains a single B2 vertex, v, such that at least one of the following conditions is satisﬁed.
(a) v is a leaf on a subtail of a vertex u, and u has a high subtail of length 3 or more and

does not have white subtails of length 1 or 2.

(b) v has a (high) subtail of length 3 or more, and no leaf neighbors.
(c) v is a leaf and |Q| = 3 (i.e., Q is a dispensible box of type 1).

P2. Q contains two B2 vertices, v1 and v2, such that the internal degree of v1 is not greater than the

internal degree of v2, and at least one of the following conditions holds.

(a) v1 and v2 are leaves of subtails of the same vertex u, and u does not have a white leaf.
(b) v1 is a leaf of a subtail of v2, and v2 does not have leaf neighbors.

See Figure 7 for illustrations, and note that regular colored boxes do not necessarily contain a

split vertex.
Property P0. Let v be a triplet vertex of depth 2 in a box Q of the dense graph. Then for every
three white tails of length 2 of v whose tail leads are not all in PW (i.e., not all three tail leads are
potential triplet witnesses in the underlying graph Gt), at least one vertex v(cid:48) (cid:54)= v in one of these tails

15

is the parent of a box Q(cid:48) whose box root has internal degree at most 1 (i.e., Q(cid:48) is either a dispensible
box of type 1, or a high leftover or corrupted box whose box root has at most one internal neighbor).

Note that this relates to all white tails of length 2 of v, and not only the tails lead by the current

triplet witnesses.

Figure 8: (a) C12 box of Form F1. (b) C12 box of Form F2.

Deﬁnition 3.9. A box Q is called a C12 box if it contains exactly 12 vertices and is of one of the
forms F1 or F2 (see Figure 8):
F1. Q contains two high split vertices, v1 and v2, which are neighbors, and have the following tails:

(a) v1 has a B2W tail and two high tails of length 2.
(b) v2 has a high leaf, and a B2HH tail.

F2. Q contains a single high split vertex with exactly four tails of the following forms:

(a) Two high tails of length two.
(b) A B2W tail.
(c) A tail of length 5 of the form HHB2HH.

Deﬁnition 3.10. A regular box is a box Q that does not have a box root and satisﬁes exactly one

of the following properties.
R1. Q is of size 2.
R2. Q is high, i.e., does not contain B2 vertices, and it contains at least 3 vertices and satisﬁes

Property P0.
R3. Q is a C12 box.
R4. Q is a regular colored box.

If Q contains a split vertex and is not a C12 box, it is called a regular complex box. If Q does

not contain split vertices, it is called a regular path box.

Deﬁnition 3.11. A box Q that is not dispensible, high leftover or regular is called a corrupted box.

16

Figure 9: A component of the dense graph and a valid box decomposition. Boxes are marked by dotted
rectangles.

3.3.2 The decomposition

In the second phase of the simulation, each maximal connected component C in the dense graph ˆGt
is decomposed into boxes according to the following deﬁnition.
Deﬁnition 3.12. Let ˆVt be the set of vertices in ˆGt, and let Q = {Q1, Q2, ...} be a partition of ˆVt
into boxes, i.e., a collection of subsets of ˆVt satisfying Deﬁnition 3.5, such that:

(a) (cid:83)

Qi∈Q Qi = ˆVt.

(b) Qi ∩ Qj = ∅ for every Qi, Qj ∈ Q, Qi (cid:54)= Qj.

Q is called a box decomposition of ˆGt if it satisﬁes the following properties.
A1. Each connected component of ˆGt contains at most one regular box.
A2. Q contains at most one corrupted box.
A3. For each box Qi that is not regular, the box root r of Qi has at most one neighbor outside the
box, and if such a neighbor p exists, then it is not a box root. The vertex p (if exists) is called
r’s parent, and the box P containing p is called the parent box of Qi. The single box in each
component that does not have a parent is called the root box of the component.

A4. All parent boxes are of size 3 or more.
A5. The parent box of a high leftover box is not high.
A6. Edges between boxes always connect a box root to its parent, and are called external edges.

17

Component types are deﬁned according to their root boxes. For example, a component whose

root box is dispensible is called a dispensible component. One exception is that a component is

called a corrupted component if it contains a corrupted box anywhere in it (regardless of the type of

its root box).

Finally, we deﬁne a semi-corrupted component.

Deﬁnition 3.13. A component C of the dense graph ˆGt is called semi-corrupted if every one of its
box decompositions contains a corrupted box, but there exists some v ∈ C such that if mt+1 = v, then
there exist an underlying graph Gt+1, a corresponding dense graph ˆGt+1 and a box decomposition Q
of ˆGt+1 that does not contain corrupted boxes, and the gain from playing v on Gt is at least 8 points.

We are now ready to introduce the invariant that must be maintained by the algorithm.

Invariant I. Let t be any step in the game.
ID. If move mt is played by Dominator, then there exists a box decomposition Q of the dense graph

ˆGt that does not contain corrupted boxes.

IS. If move mt is played by Staller, then there exists a box decomposition Q of the dense graph ˆGt
that contains at most one corrupted box, and if such a box exists then it is in a semi-corrupted

component.

Deﬁnition 3.14.

1. The underlying graph Gt and the corresponding dense graph ˆGt are good if ˆGt has a valid box

decomposition, i.e., a box decomposition satisfying Invariant I.

2. A component C of the dense graph ˆGt or the underlying graph Gt is good if a graph containing

only this component is good.

See Figure 9 for an example component on the dense graph and a valid box decomposition.

In Section 4 we show that there exists an algorithm following the described outline, such that for
every t, if at the end of step t the dense graph is good (i.e., it satisﬁes Invariant I), and the average
gain up to (and including) step t is at least 5 points, then the algorithm guarantees that the average
gain at the end of some future step t(cid:48) > t is at least 5 points. This, in turn, guarantees also that the
average gain at the end of the game is at least 5 points.

3.4 Algorithmic details

The outline described in the previous subsections gives rise to the following naive (and highly ineﬃ-

cient) implementation.
Procedure Perform Match(G∗(V ∗, E∗)):

1. Initialize the state:

18

(a) G ← G∗ with a ﬁxed vertex labeling (see Section 2. /* the underlying graph */
(b) M ← ∅. /* the constructed dominating set */
(c) p(v) ← 3 for every v ∈ V . /* the value function */
(d) t ← 0. /* counter of moves */

2. While V (cid:54)= ∅:
(a) t ← t + 1.
(b) If t is odd: /* Dominator’s turn */

i. Create the dense graph ˆG from G using Procedure Densify of Section 3.2.
ii. v ← Play( ˆG). /* choose a move for Dominator and update the underlying graph and

value function */

(c) Else: /* Staller’s turn */

i. Receive a legal move v from Staller.
ii. Update(v). /* update the underlying graph and value function */

(d) M ← M ∪ {v}.

The procedure Update(v) performs the following actions:
1. For each choice of a pair (G(cid:48), p(cid:48)) of an underlying graph G(cid:48) satisfying Property 2.19 and a value
assignment p(cid:48), which may result from the move v, check if G(cid:48) with the value assignment p(cid:48) has
a valid box decomposition.

2. From the collection of pairs (G(cid:48), p(cid:48)) which have a valid box decomposition, choose the pair ((cid:101)G, ˜p)
achieving the highest excess gain, i.e., maximizing p(G) − ˜p((cid:101)G) (breaking ties arbitrarily), and

update G and p accordingly.

The procedure Play( ˆG) performs the following actions:
1. C ← ∅.
2. For each vertex m ∈ ˆG:

For each choice of a pair (Gm, pm) of an underlying graph Gm satisfying Property 2.19
and a value assignment pm, which may result from the move m:

If Gm with pm has a valid box decomposition, then add (m, Gm, pm) to C.

3. From the collection C, choose the sequence ((cid:101)m,(cid:101)G, ˜p) achieving the highest gain, i.e., maximizing
p(G)− ˜p((cid:101)G), breaking ties as described in Step 3 in Section 3.1 (by checking all possible choices
4. Update G and p according to (cid:101)G and ˜p.
5. Return (cid:101)m as the selected move for step t.

for the next three moves and choosing the move which maximizes the minimal gain over these

moves).

Section 5 contains a short discussion of more eﬃcient implementations for the strategy outlined in

Sections 3.1 through 3.3.

19

3.5 Simpliﬁed algorithm for forests in which no two leaves are at distance 4

Conjecture 1 was proved in [2] for isolate-free forests in which no two leaves are at distance exactly

4, using a much simpler algorithm than the one described in this thesis. We note that our algorithm

can also take a simpler form when used on this family of graphs. It may be instructive to consider

this variant, in order to pinpoint the aspects of our algorithm that were needed in order to handle

the possible existence of pairs of leaves at distance 4.

Observe that if no two leaves are at distance 4 from each other, then G does not contain triplet
subtrees. Therefore, there is no diﬀerence between the underlying graph Gt and the dense graph ˆGt
(and since Property P0 refers to triplet subtrees, this property also becomes irrelevant). Additionally,
it is always possible for Dominator to make a move gaining at least 7 points on any regular colored

or high box whose size is greater than 2 (this fact follows from Claims 4.20 and 4.21 which appear

later in the analysis of Dominator moves), and any Staller move on such boxes gains at least 3 points

(by Claim 4.17 in the analysis of Staller moves), and in both cases all resulting boxes can be regular
boxes that are not C12 boxes. As a result, there is no need to perform the box decomposition, and
the following simpler algorithm suﬃces (compare this to the algorithm in Section 3.1):

Suppose t moves (t < T ) were already played, and the algorithm needs to decide on the (t + 1)st

move (if it is a Dominator move), or preprocess for step t + 2 (if t + 1 is a Staller move).

1. If move mt+1 is performed by Staller, then the new graph Gt+1 is generated from Gt in a
way that guarantees that at least 3 points are gained by Staller’s move mt+1, and that all
components of Gt+1 are regular complex or regular path boxes.

2. Otherwise (move mt+1 is a Dominator move), move mt+1 is chosen greedily for Dominator
from the vertices of Gt, such that the gain is maximal among all such moves which result in
a graph Gt+1 all of whose components are regular complex or regular path boxes. If there are
ties, they are broken arbitrarily.

Note that when all components are of size 2, all moves (by both players) gain at least 5 points.

The complex form of the algorithm for general isolate-free forests results from the fact that in

some cases, Dominator must play on graphs that only contain split vertices with two or three tails,

and all these tails are white tails of length 2. This prompted the creation of the dense graph (for

handling triplet subtrees), as well as the addition of dispensible boxes, which contain subtrees that

can be ignored by Dominator (i.e., that cannot reduce the gain of playing on their parent boxes. See

Lemma 4.4 for details). High leftover and corrupted boxes were added in order to handle Staller
moves on these “hidden” subtrees, while Property P0 and C12 boxes were added in order to make
sure Dominator can always make moves that achieve the desired gain. The analysis section that

follows covers all possible moves on all types of boxes, but the core of the algorithm remains this

simpliﬁed version.

20

4 Analysis

We separate the analysis into several parts, and show that Invariant I is always satisﬁed, and that
an average gain of 5 points per move is achieved. In Section 4.1 we introduce suﬃcient conditions

for guaranteeing Dominator’s win. In Section 4.2 we show properties that simplify the case analysis,

and Section 4.3 contains an analysis of two special subtrees that appear in many of the cases. We

then analyze all possible moves and the resulting graphs. The possible outcomes of Staller moves

are analyzed in Section 4.4, and those of Dominator moves in Section 4.5. Lastly, in Section 4.6 we

combine all the results to conclude that the algorithm outline proves Conjecture 1.

4.1 A policy for ensuring high average gain

We have seen that it suﬃces to guarantee an average gain of 5 points per move (Claim 2.15), and also

that the last move on any component gains at least 5 points (Corollary 2.21). Therefore, it suﬃces

to guarantee that each pair of consecutive Dominator and Staller moves gains at least 10 points in

order to make sure that Dominator wins the game.
Deﬁnition 4.1. Deﬁne the excess gain of move mt at step t, denoted by ψt, as follows.

– If t is odd (Dominator plays mt), then ψt = g(mt, t) − 7.
– If t is even (Staller plays mt), then ψt = g(mt, t) − 3.

Additionally, deﬁne the cumulative excess gain at step t to be the sum of excess gains in steps 1

through t, and denote it by

Ψt =

ψ(mi, i).

t(cid:88)

Observation 4.2. Each of the following conditions is suﬃcient in order for Dominator to win.

i=1

1. T ≤ Tmax.
2. ΨT ≥ 0.
3. T is odd (i.e., Dominator plays mT ), and ΨT ≥ −2.
4. T is even (i.e., Staller plays mT ), and ΨT−1 ≥ −2.

Proof:

1. T ≤ Tmax is the condition in Conjecture 1.
2. If ΨT ≥ 0, then the game ended with an average gain of at least 5 points, which is a suﬃcient

condition according to Claim 2.15.

3. If T is odd and ΨT ≥ −2, then T − 1 is even and 5 · (T − 1) + 7 − 2 = 5 · T points are gained
in T moves. Therefore an average gain of 5 points is achieved throughout the game, which is

a suﬃcient condition by Claim 2.15.

21

4. If T is even and ΨT−1 ≥ −2 then ΨT ≥ 0, since Corollary 2.21 guarantees that ψT ≥ 2.

Therefore this is a suﬃcient condition.

The following guarantees are maintained throughout the execution, as will be shown in the analysis.
1. Every Staller move gains at least 3 points, i.e., ψ2t ≥ 0 for all t.
2. Ψt ≥ −2 for all 1 ≤ t ≤ T .
3. The algorithm never relies on past gains, but rather on future gains. Namely, it guarantees
that if ψt(v) is negative at some point, then there will be positive excess gain in future moves
to make up for it. Therefore, if Ψt > 0 for some t, we can use the cumulative excess gain to
convert B2 vertices to B3.

4.2 Preliminary properties simplifying the analysis

In this section we prove properties which will allow us to calculate a lower bound for the gain of

playing a (real) vertex from the dense graph directly on the box containing it in the dense graph.

First, we describe the diﬀerence between playing on the dense graph and playing on the underlying

graph. Then, we prove that it suﬃces to analyze moves on the dense graph by analyzing them

directly on the box that contains them. Since Dominator moves are chosen from vertices of the

dense graph, this includes all Dominator moves and all Staller moves that are on the dense graph,

i.e., all moves that are not under triplet subtrees. Staller moves that are not on the dense graph will

be analyzed separately in Section 4.4.

Figure 10: The graphs of Lemma 4.3.

Lemma 4.3. Let G1 be a graph, and let G2 be the corresponding dense graph. Let v be a (real)
vertex which exists both in G1 and in G2. If g points are gained when v is played directly on G2 (i.e.,
without invoking Densify()) and the resulting graph (again, without invoking Densify()) is G(cid:48)
2, then
1 resulting from
2 except that it may have (at most three) additional B2W components.

g points can be gained when v is played on G1, yielding (cid:101)G1, and the dense graph G(cid:48)
Densify((cid:101)G1) is the same as G(cid:48)

See Figure 10 for an illustration of the graphs in the claim.

22

Proof: Consider G1, G2 and v as in the claim. Since G2 = Densify(G1), the only diﬀerence between
the graphs G1 and G2 is the replacement of triplet subtrees from G1 with white leaves in G2.
Therefore, if G1 does not contain triplet vertices, then G1 = G2. Assume that G1 contains at least
one triplet vertex, and let u be a triplet head (guaranteed to exist by Claim 3.3). Let u1, u2 and u3
be the triplet witnesses of u in G1, and let λ be the white leaf adjacent to u in G2 that is not in G1
(the procedure Densify guarantees that exactly one such leaf exists, since it creates a single virtual
leaf next to each triplet head). Denote by Tu the set of vertices in the triplet subtree rooted at u in
G1, excluding u. Observation 3.2 guarantees that all vertices in Tu are white, and we know that λ
is white. λ is not in G1, and all vertices of Tu are not in G2, therefore by the claim’s assumption, v
cannot be any of these vertices.

If v (cid:54)= u, then the above implies that all vertices of Tu (in G1) and λ (in G2) remain white.

Therefore u is a triplet head in (cid:101)G1 with the same triplet witnesses (this results from the way we
1 = Densify((cid:101)G1). Note that u itself has the same color (and

choose triplet witnesses when there are more than three potential witnesses), which implies that u
has one virtual (white) leaf neighbor in G(cid:48)
value) in G(cid:48)

1 and in G(cid:48)
2.

All unlabeled vertices are white. (b) The components of (cid:101)G1 resulting from the triplet subtree following

Figure 11: (a) An example triplet subtree rooted at a vertex u in G1, with triplet witnesses u1, u2 and u3.

the move v = u.

If v = u, then λ becomes red when v is played on G2, and adds exactly 3 points to the gain
(since it is white in G2). In G1, each of the triplet witnesses u1, u2 and u3 becomes a blue vertex in
a separate component, and may be set as a B2 or B3 vertex. For each 1 ≤ i ≤ 3, if ui ∈ WT 2 in G1,

then ui is in a BW component in (cid:101)G1, and otherwise (i.e., if ui is a triplet vertex in G1), ui is a blue
triplet head of degree 3 in a component of (cid:101)G1. See Figure 11 for an example. In both cases, ui is a
1, and can be converted to B2 without violating Invariant I.

blue vertex in a BW component in G(cid:48)
Therefore exactly 3 points can be gained from the vertices of Tu.

The above shows that each virtual leaf in G(cid:48)

2, except possibly
for three BW components, and that each white leaf in G(cid:48)
1. The
claim follows from the fact (mentioned above) that all other vertices (except for the vertices in the

2 has a corresponding white leaf in G(cid:48)

1 has a corresponding white leaf in G(cid:48)

three discussed BW components) are the same in both graphs.

We now prove that in some cases, it is possible to calculate a lower bound for the gain of a move
mt by calculating its gain on another, simpler graph. Speciﬁcally, this simpler graph can be any graph

23

that contains only the vertices of the box Q that contains mt, in some valid box decomposition Q of
ˆGt−1. We use this important property later in the analysis of Dominator and Staller moves.
Lemma 4.4. Suppose ˆGt−1 is good. Let v be a vertex in a box Q of a valid box decomposition Q
of ˆGt−1 such that all boxes in Q \ {Q} are not corrupted, and consider the graph G(cid:48)
t−1 that contains
a single component with a box decomposition Q(cid:48) containing a single box Q(cid:48) that is identical to Q.
Suppose g points can be gained by playing v in G(cid:48)
t is good.
Then it is possible to play v in ˆGt−1 so that it leads to a good ˆGt. More precisely, the following
properties hold.
C1. If G(cid:48)

t does not contain a semi-corrupted component, and one or more of the following conditions

t−1 and the resulting underlying graph G(cid:48)

is satisﬁed:

1. Q is a root box in ˆGt−1.
2. v is the box root of Q.
3. The box root r of Q does not exist in ˆGt (i.e., r becomes red. Note that this may occur

even if r (cid:54)= v).

4. The box root r of Q(cid:48) exists in G(cid:48)

t (i.e., r does not become red).

Then at least g points are gained by playing v in ˆGt−1, and the resulting graph ˆGt is good
(namely, it has a valid box decomposition) and does not contain semi-corrupted components.

t does not contain a semi-corrupted component, and none of the above conditions (1) - (4)
are satisﬁed, then at least g − 3 points are gained by playing v in ˆGt−1, and the resulting graph
is good and does not contain semi-corrupted components.

t contains a semi-corrupted component C(cid:48) and one or more of the following conditions holds:
1. The corrupted box of C(cid:48) (under some valid box decomposition) is a root box of (a valid box

C2. If G(cid:48)

C3. If G(cid:48)

decomposition of ) ˆGt. Note that this includes the case that Q is a root box in ˆGt−1.

2. Playing r on C(cid:48), where r is the box root of Q, gains at least 8 points in G(cid:48)

t, and the

resulting graph is good.

Then at least g points are gained by playing v in ˆGt−1, and the resulting graph is good (and
may contain up to one semi-corrupted component).

Note that the classiﬁcation of Lemma 4.4 does not cover all cases in which G(cid:48)
corrupted component, because not all cases are needed for the rest of the analysis.
Proof: Assume all conditions of the claim are satisﬁed, and let Q1 be a valid box decomposition of
t. Consider an intermediate partition P of the vertices of ˆGt which is constructed by the following
G(cid:48)
procedure.

t contains a semi-

Procedure InterPart:

1. For each box Qi ∈ Q whose vertices exist in ˆGt (i.e., such that none of its vertices become red
in move mt), add Qi to P. Note that this includes all boxes of Q excluding Q, and possibly
excluding its parent box P (if exists) as well as some high leftover boxes of size 1 from Q whose
root (and only) vertex becomes red.

24

2. Add all boxes of Q1 to P.
3. If Q is not a root box in ˆGt−1, and its box root r is in ˆGt but not in G(cid:48)

t, then add the box
Qr of size 1 containing r to P. Note that Qr is either high leftover (if r is high) or corrupted
(otherwise).

4. If Q is not a root box in ˆGt−1, and not all vertices of its parent box P are in ˆGt, then add the

sets Qi containing all maximal connected subsets of P to P.

5. For every component C1 of size 2 in ˆGt, add the box P1 containing all vertices of C1 to P (if

it is not already in P).

Note that P is not necessarily a valid box decomposition. Also observe that P is a partition of the
vertices of ˆGt, and that all the sets added to P by the above ﬁve steps are boxes. After performing
Procedure InterPart, we invoke Operation DisconnectExtBlue on the resulting graph ˆGt and disconnect
all external edges in P that connect two blue vertices.

Operation DisconnectExtBlue:

For every edge e = (u1, u2) that is external in P, do:

If u1 and u2 are both blue, remove e.

Note that after performing Operation DisconnectExtBlue there are no parent boxes of size 1 in P
(since box roots are blue).

We now consider the partition P under the three diﬀerent settings speciﬁed in the claim, and
describe in each setting how P can be modiﬁed into a valid box decomposition of ˆGt, so ˆGt is good,
while achieving the desired properties (i.e., a gain of at least g points with no corrupted boxes in
Case C1, a gain of at least g − 3 points with no corrupted boxes in Case C2, and a gain of at least g
points with at most one semi-corrupted component in Case C3). This will imply the claim. We rely
on the following three claims.
Claim 4.5. All parent boxes of size 2 in P are of the form BW .
Proof: Let P1 be a parent box of size 2 in P, and assume towards contradiction that P1 is of the
form W W . Recall that Observation 2.20 guarantees that all neighbors of each white vertex are still

in the graph. Also recall that Deﬁnitions 3.5 and 3.12 guarantee that each box that is not a root
box contains a blue vertex (the box root), and that a parent box is of size 3 or more (Property A4).
Since P1 is in P and P was constructed using Procedure InterPart, we conclude that P1 was added
to P for one of the following three reasons. The ﬁrst option is that P1 was in Q. This is impossible,
since then P1 would be a parent box of size 2, which contradicts Property A4 of Deﬁnition 3.12. The
second option is that P1 is in Q1. This is impossible when P1 is white, since a box of the form W W
cannot be a parent box and cannot have a parent, which means that it must be in a component of
size 2 in G(cid:48)
t must contain a blue
vertex by Observation 2.20. The third option is that P1 ⊆ P , where P is the parent box of Q in

t. This contradicts the fact that the component containing P1 in G(cid:48)

25

ˆGt−1. This is also impossible when P1 is white since, as in the previous case, P must contain a blue
vertex by Observation 2.20. The claim follows.
Claim 4.6. All boxes of size 2 in P are root boxes.
Proof: Let P1 be a box of size 2 in P. Denote by u1 and u2 the blue and white vertices of P1,
respectively. If P1 was a root box in ˆGt−1, then it is clearly also a root box in ˆGt. Otherwise, we
know that u1 was not a box root: Assume towards contradiction that u1 was a box root in ˆGt−1, and
denote the box which contained u1 and u2 in ˆGt−1 by Q0. Deﬁnition 3.5 guarantees that box roots
do not have neighbors that are white leave, therefore u2 was not a leaf in Q0, and had a neighbor, u3.
Since u2 is white in ˆGt, we conclude from Observation 2.20 that u3 is in ˆGt (and Procedure InterPart
guarantees that it is in P1), in contradiction to the assumption that P1 is of size 2. Therefore u1 was
not a box root in Q, which means that it does not have a parent in P. In all cases, we conclude that
P1 is a root box in P.
Claim 4.7. Assume that g0 points are gained, and the described partition P does not contain cor-
rupted boxes and satisﬁes all properties of Deﬁnition 3.12 except, possibly, for Properties A4 and A5.
Then Gt is good, and P can be modiﬁed into a valid box decomposition of ˆGt that does not contain
corrupted boxes, while gaining at least g0 points.
Proof: We start by handling the case that P does not satisfy Property A5, i.e., it contains a high
box that is the parent of at least one high leftover box. Consider the following operation.

Operation JoinHigh:

While there are high boxes P1 and Q1 such that P1 is the parent of Q1, do:

Remove both boxes P1 and Q1 from P and replace them with the single box Q2 that
contains all vertices of Q1 and P1.

After performing Operation JoinHigh, P satisﬁes Property A5, and the gain does not change. It is
possible that now P is a valid box decomposition of ˆGt. If this is not the case, it remains to modify
P so that it satisﬁes Property A4. From Claims 4.5 and 4.6 we conclude that all parent boxes of size
2 in P are root boxes of the form BW , and we have seen earlier that after performing Operation
DisconnectExtBlue P does not contain parent boxes of size 1. Let P1 be a (root) parent box of size
2 in P, and let Q1 be another box in P such that P1 is the parent of Q1. Consider the following
operation. See Figure 12 for illustrations.

Operation FixBWParent:

For every parent box P1 = (u1, u2) in P, such that u1 is blue and u2 is white, do:

1. Find a box Q1 in P such that P1 is the parent of Q1, and denote the box root of Q1 by
2. Remove both boxes P1 and Q1 from P and replace them with the single box Q2 that

r1.

contains all vertices of Q1 and P1.

26

Figure 12: Examples of the results of Operation FixBWParent for each pair of boxes Q1 and P1. (a) The
resulting box Q2, if Q1 is dispensible of type 1 or high leftover. (b) An example of the resulting boxes
Q3 and Q4 when Q1 is dispensible of type 2.

3. Convert u1 and r1 to B2 (if they are high).
4. If Q1 was a dispensible box of type 2, then:

vertices in Q1 that are on its high subtail.

(a) Denote by r2 the B2 vertex of Q1 that is not r1, and denote by u3 and u4 the two
(b) Remove Q2 from P, and replace it with the following two boxes: The box Q3, which
contains all vertices of Q2 except for r2, u3 and u4, and the box Q4, which contains
r2, u3 and u4 with box root r2.

Observe that Operation FixBWParent may only increase the gain (if u1 or r1 is high). We make
the following two observations. First, if Q1 was a dispensible box of type 1 or a high leftover box,
then Q2 is a regular colored box, since it satisﬁes Property P2:(b) of Deﬁnition 3.8 (see Case (a)
in Figure 12). Second, if Q1 was a dispensible box of type 2, then the box Q3 is a regular colored
box (again by Property P2:(b)), and the box Q4 is dispensible of type 1 (see an example in Case (b)
of Figure 12). We conclude that after performing Operation FixBWParent, the resulting P satisﬁes
Deﬁnition 3.12 and does not contain corrupted boxes, and therefore it is a valid box decomposition
of ˆGt, and that at least g0 points are gained.

For Cases C1 and C2, it remains to show that in each setting, the gain is as described in the
theorem and P satisﬁes Properties A1, A2, A3 and A6 of Deﬁnition 3.12 before performing Operations
JoinHigh and FixBWParent, and then the theorem will follow from Claims 4.6 and 4.7. In Case C3,
we cannot use Claim 4.7 directly.

Case (C1): Let us ﬁrst consider the setting of Case (C1), in which G(cid:48)
t does not contain a semi-
corrupted component, and one of the four conditions (1)-(4) is satisﬁed. We examine each of these

conditions.

Subcase (1): First, suppose Condition (1) holds, namely, Q is a root box in ˆGt−1. Since box roots
are always blue, external edges always connect a box root to its parent, and root boxes do not have

27

parents (see Deﬁnitions 3.5 and 3.12), we conclude that all external neighbors of vertices of Q (i.e.,
neighbors that are in ˆGt−1 but not in Q) are blue box roots. This implies that if a vertex in Q does
not have internal white neighbors (i.e., white neighbors that are also in Q), then it does not have
any white neighbor. We conclude that Q does not contain vertices that are in ˆGt but are not in
G(cid:48)
t (i.e., vertices that are red in G(cid:48)
t but blue in ˆGt). Additionally, if an external neighbor u does
not have internal white neighbors in its box in Q, then it must be in a high leftover box of size 1,
which means (since box roots cannot be parents) that it does not have additional external neighbors

except its parent. Therefore, the only case in which an external neighbor’s color changes as a result

of playing v is when a vertex in a high leftover box of size 1 becomes red, and in such a case 3 more

points are gained and no additional boxes are modiﬁed.

We make the following four observations regarding the properties of Deﬁnition 3.12. First, each
connected component contains at most one regular box, i.e., Property A1 is satisﬁed. This is because
all boxes from Q that were not in the same component with v are in P, all boxes of Q\{Q} that were
in the same component with v were not regular, and Q1 is a valid box decomposition and therefore
satisﬁes this condition. Second, P does not contain corrupted boxes, and therefore Property A2 is
satisﬁed. This is because the only potentially corrupted box is Qr, generated in step 3 of Procedure
InterPart, and from the previous paragraph we conclude that it does not exist when Q is a root box.
Third, Property A3 holds, since all box roots have at most one external neighbor, and if such a
neighbor exists then it is not another box root. This is because all external edges connecting blue
vertices were disconnected in Operation DisconnectExtBlue (and box roots are blue). Fourth, all
external edges connect a box root to its parent, because all external edges of P are either external
edges in Q1, or were external edges in Q. Therefore Property A6 holds.

We conclude from Claim 4.7 that P can be modiﬁed into a valid box decomposition of ˆGt while
preserving a gain of g points or more, and that ˆGt does not contain semi-corrupted components,
which is what we wanted to prove.
Subcase (2): Next, suppose Condition (2) of Case (C1) holds, namely, Q is not a root box, and v
is the box root of Q. Since only the box root v had a parent in Q, and v is red, we conclude that
all boxes from Q1 are root boxes in P. Therefore all components except, possibly, for components
which contain vertices from the parent box P , satisfy Properties A1, A2, A3 and A6, for the same
reasons as in the previous subcase. It remains to handle the components that contain vertices from
P . Consider the boxes Pi in P which resulted from the parent box P in Q. Exactly one of the
following cases occurs.

1. All vertices of P are in ˆGt. Then the box P remains as it was, except that maybe the vertex
p that was the parent of the box root r of Q was converted from white to blue. Whether P

was a regular, dispensible or high leftover box, it is still of the same type that it was, since all
these properties are still satisﬁed if a single vertex is converted from white to B3 (see Section
3.3.1). Therefore in this case P satisﬁes Properties A1, A2, A3 and A6.

28

2. Some vertex of P became red and is not in ˆGt. Then at least 2 additional points were gained,
and they can be used to convert all remaining vertices of P to high vertices (since each box
contains at most two B2 vertices). Claim 4.6 guarantees that all resulting boxes of size 2
are root boxes, and we conclude that all properties of Deﬁnition 3.12 are satisﬁed on these

components as well.

From Claim 4.7, we conclude that P can be modiﬁed into a valid box decomposition of ˆGt while

preserving a gain of g points or more, and that ˆGt does not contain semi-corrupted components.
Subcase (3): Next, consider Condition (3) of Case (C1), namely, the box root r of Q does not exist
in ˆGt (i.e., r becomes red), and assume that v (cid:54)= r. Then all boxes of Q1 are root boxes in P (since
only the box root r could have a parent), and all components that do not contain vertices from Q1
remain as they were in ˆGt−1. As in the previous subcase, we conclude that Properties A1, A2, A3
and A6 are satisﬁed by P, and therefore from Claim 4.7 we conclude that ˆGt is good and does not
contain semi-corrupted components, and at least g points are gained.
Subcase (4): Finally, suppose Condition (4) of Case (C1) holds, i.e., Q is not a root box and the
box root r of Q(cid:48) exists in G(cid:48)
1 the box containing r
in Q1. Since box roots do not have internal neighbors that are white leaves, and Observation 2.20
guarantees that the neighborhood of a white vertex remains as it was, we conclude that Q(cid:48)
1 is not of
size 2. Therefore Properties A1 and A6 are satisﬁed in P. Properties A2 and A3 are satisﬁed for the
same reasons as in Subcase (1). We conclude from Claim 4.7 that ˆGt has a valid box decomposition
that does not contain corrupted boxes, and that at least g points are gained.
In all the above subcases, the gain in ˆGt is at least as high as the gain in G(cid:48)
is good (with no semi-corrupted components). Hence Case (C1) follows.

t (that is, it does not become red). Denote by Q(cid:48)

t and the resulting graph

Case (C2): We now turn to Case (C2) of the claim, in which Q is not a root box, and the box root
r is in ˆGt but not in G(cid:48)

t. Consider the following operation.

Operation ConvHigh:

Convert the root box r of Q to B3.

The diﬀerence between the gain in G(cid:48)
t, and the gain in ˆGt after performing Operation ConvHigh (if
r was B2), is at most 3 points. Since r was a box root and box roots cannot be parents, the box
Qr containing r in P is a high leftover box of size 1 that is not the parent of another box, and its
parent box P remains as it was in ˆGt−1. We conclude that the component C containing r satisﬁes
all properties of Deﬁnition 3.12 except, possibly, for Property A5 (i.e., P may also be a high box).
All other components can be analyzed as in Case (C1) above, and therefore we conclude from Claim
4.7 that P can be converted into a valid box decomposition of ˆGt while gaining at least g − 3 points,
and that ˆGt does not contain semi-corrupted components.

29

Case (C3): Finally, we consider Case (C3). If G(cid:48)
t contains a semi-corrupted component C(cid:48) and one of
the speciﬁed conditions holds, then at least one of the conditions of Case C1 above is satisﬁed (except
that now one of the resulting components may contain a corrupted box). All components except,
possibly, for the component C∗ containing vertices from C(cid:48), satisfy the conditions of Claim 4.7, and
therefore P can be modiﬁed so that its restriction to these components is valid, while preserving the
number of points gained on them. It remains to handle C∗. Property A4 of Deﬁnition 3.12 guarantees
that the root box of Q1 that is in C(cid:48) is a box QC(cid:48) of size at least 3 in P, therefore Property A4 is
also satisﬁed by P. Since P contains a single corrupted box, we conclude that P satisﬁes Properties
A1, A2, A3 and A6 on C∗ for the same reasons as in Case (C1) above. Therefore, after performing
Operation JoinHigh, P is a box decomposition of ˆGt and at least g points are gained.

It remains to check whether C∗ is semi-corrupted. In order for C∗ to be semi-corrupted (and for
P to be a valid box decomposition of ˆGt), we need to check if it contains a move u gaining at least
8 points with a good resulting graph ˆGt+1. Since C(cid:48) is semi-corrupted, it contains a move u gaining
at least 8 points when played in G(cid:48)
t. Under each of the conditions of the claim, one of the conditions
of Case C1 is satisﬁed for step t + 1 (since the move u in question is either a box root, or on a root
box), and we conclude that at least 8 points can be gained when playing on ˆGt so that ˆGt+1 is good.
Therefore C∗ is semi-corrupted, as desired.

This concludes the proof of Lemma 4.4.

4.3 Two special subtrees

In this section we focus attention on two types of subtrees that occur frequently in subsequent

analysis, and describe how the algorithm may cope with such subtrees, and what moves can be used

in the analysis. We start by deﬁning the subtrees.

Figure 13: An example of a ﬁx vertex (marked as u) and its ﬁx subtree.

Deﬁnition 4.8. A vertex u ∈ V is called a ﬁx vertex if the following conditions hold.

1. u has (at least) one neighbor that is a B3 leaf.

2. u has (at least) two high tails of length 2.

3. There is a valid box decomposition where none of the vertices in these tails are box roots. Note

that this implies that u is white.

If u has at most one additional white neighbor, and this neighbor (if exists) is not the lead of a white

tail of length 1 or 2, we say that u is a strong ﬁx vertex.

30

The subtree containing u and the three speciﬁed tails is called the ﬁx subtree rooted at u. See

Figure 13.

Figure 14: Semi-triplet split vertices (marked as u) and their semi-triplet subtrees.

Deﬁnition 4.9. A high split vertex u is called a semi-triplet vertex if the following conditions hold.

1. u has three high tails of length 2, and there is a valid box decomposition where none of the

vertices in these tails are box roots.

2. u is not a triplet vertex (i.e., not all vertices in the tails are white).

If u has at most one additional white neighbor, and this neighbor (if exists) is not the lead of a

white tail of length 1 or 2, we say that u is a strong semi-triplet vertex.

The subtree containing u and the three speciﬁed tails is called the semi-triplet subtree rooted at

u. See Figure 14.
Lemma 4.10. Let Q be a box in a valid box decomposition of the dense graph ˆG. If Q contains a ﬁx
subtree before Dominator’s move, then Dominator gains at least 9 − k points in the following move,
where k is the number of points needed in order to convert the resulting graph to a good graph, and
k ≤ 2. If Q contains a strong ﬁx subtree, then Dominator gains at least 10 − k points.
Proof: Let Q be a box in ˆG as described. If Q contains a ﬁx subtree, consider the move v which is a
lead of a high tail of length 2 adjacent to u. Playing v converts at least 3 vertices (v and its adjacent
leaf, and the B3 leaf) to red, which gains at least 9 points, and no new B2 vertices are created. Since
Q contains at most two B2 vertices, at most two points are needed in order to convert all resulting
boxes to high, and therefore k ≤ 2.

For a strong ﬁx subtree, if 9 points are gained then no additional vertices became red (otherwise
the gain would be greater than 9). Therefore, if u is converted to B2, one of the following cases
occurs.

Case (1): u is a strong ﬁx vertex with a white neighbor that is the lead of a tail of length 2 that
is not white. Then the resulting box is a path of the form BW B2HH, and it can be converted to a
regular colored path box of the form B2W B2HH (if it is not already so).

Case (2): Either u does not have additional neighbors, or its neighbors are not leads of tails of
length 2. After converting all B2 vertices except u in the box containing u to B3, and possibly
disconnecting edges between u and its blue neighbors (so that u has at most one neighbor), u and

the remaining subtail from the ﬁx subtree can be separated into a dispensible box of type 1, with u

as the box root.

31

In both cases, at least 10 − k points are gained.
Lemma 4.11. Let Q be a box in a valid box decomposition of the dense graph ˆG. If Q contains a
semi-triplet subtree before Dominator’s move, then the following properties hold.

1. If the semi-triplet subtree has a B3 leaf, then at least 11 − k points are gained in the following
move, where k is the number of points needed in order to convert the resulting graph to a good
graph, and k ≤ 2.

2. If the semi-triplet subtree is strong, then at least 8 − k points are gained in the next move.
3. Otherwise, at least 7 − k points are gained.

Proof: Let Q be a box in ˆG as described that contains a semi-triplet subtree rooted at a vertex u.
We analyze the diﬀerent cases.

Case (1): The semi-triplet subtree rooted at u contains a B3 leaf, λ. If u is played, then at least
3 + 3 + 3 + 1 + 1 = 11 points are gained from the vertices that become red (u, λ and the neighbor
of λ) and from converting B vertices in resulting components of size 2 to B2. We note that if less
than two BW components are created as a result of playing u, then at least one additional vertex
was converted to red and therefore at least 3 · 4 = 12 points are gained. The claim follows, since Q
contains at most two B2 vertices and therefore k ≤ 2.

Case (2): The semi-triplet subtree rooted at u does not contain a B3 leaf. Then it must contain a
B3 tail lead, u1. Let v be another tail lead. As a result of playing v, at least 3 + 3 + 1 = 7 points can
be gained from the resulting red vertices (v and the adjacent leaf), and from disconnecting u1 to a
component of size 2 and converting it to B2. As before, k ≤ 2, and at least 7 − k points are gained.

If the semi-triplet subtree is strong, then an additional point can be gained by converting u to
B2: If u does not have an additional white neighbor that is not in the triplet subtree, or if u has
such a neighbor and it is not the lead of a subtail of length 1 or 2, then u can be a box root of

a dispensible box of type 1 (possibly after disconnecting edges between u and its blue neighbors).

Otherwise, u has a white neighbor that is the lead of a subtail of length 2, and this subtail is not

white (note that u cannot have a white leaf neighbor by the deﬁnition of strong semi-triplet). We
conclude that u is in a box of the form BW B2HH, and therefore it can be converted to a regular
colored path box by converting all B vertices to B2.

4.4 Results of Staller moves

In this section we analyze all possible Staller moves, i.e., the result of Staller playing any vertex m2t
of the underlying graph. Notice that m2t may be in the dense graph, or in a triplet subtree in the
underlying graph. Theorem 4.12 summarizes all the possible outcomes of Staller moves.
Theorem 4.12. If Staller plays on a vertex v in Gt−1 and Gt−1 is good, then at least 3 points are
gained and the resulting underlying graph, Gt, is good.

32

We separate the proof of the theorem into several claims, and note that Lemma 4.4 guarantees

that it suﬃces to analyze each move inside the box containing it (and calculate the gain on the

underlying graph accordingly).

First, we extend the deﬁnition of box decomposition to the underlying graph in the following

natural way:
Deﬁnition 4.13. A decomposition Q of the set Vt of vertices of the underlying graph Gt is called a
box decomposition, if the decomposition ˆQt which results from Q by replacing (without repetitions)
each vertex of the underlying graph Gt that is not on the dense graph ˆGt with the virtual leaf that
replaces them on ˆGt (i.e., the vertex z2i+1 adjacent to the nearest triplet head) is a box decomposition
of ˆGt.
Claim 4.14. If Staller plays on Gt−1 a vertex v that is not on the dense graph ˆGt−1, then at least
3 points are gained and the resulting dense graph ˆGt is good.

Figure 15: All possible Staller moves on Gt−1 (marked as v) on triplet witnesses as described in the
proof of Claim 4.14. Each tail represents the subtree of a triplet witness, which is either a real tail (of
the witness is in WT 2), or a triplet subtree. In all cases, (a) is the graph Gt−1 before the move and (b)
is the resulting graph Gt.

Proof: If v is not on the dense graph ˆGt−1, then it is in a triplet subtree rooted at a vertex u, and
u is in some box Q on ˆGt−1. There are three cases to consider, illustrated in Figure 15.

Case (1): v is not a leaf. Then at least 3 + 3 = 6 points can be gained from v and its triplet
witnesses or its adjacent leaf, and all resulting components on ˆGt are BW components (if v was in
T T ), and the component containing u. Since Q contains at most two B2 vertices, at least 6 − 2 = 4
points can be gained while converting the boxes resulting from Q (that are not BW components) to
high, and therefore Invariant I is satisﬁed, so the resulting dense graph ˆGt is good.

Case (2): v is a leaf at distance 2 from u, and u is blue. Then at least 6 points are gained since
v and its neighbor become red. Therefore, as before, at least 6 − 2 = 4 points can be gained while
satisfying Invariant I.

Case (3): v is a leaf and the nearest split vertex v1 is white. Therefore 3 points are gained, and
the resulting box Q(cid:48) contains a ﬁx vertex (v1). If Q(cid:48) is corrupted, then at least one of the following
three subcases occurs.

33

Subcase (3.1): v1 was not a triplet head in Q. Then v1 is a strong ﬁx vertex in Q(cid:48), and Lemma
4.10 guarantees that at least 10 − 2 = 8 points can be gained while converting Q(cid:48) to a high box, and
therefore the component is semi-corrupted. Therefore Invariant I is satisﬁed by the resulting dense
graph ˆGt.
Subcase (3.2): Q contained a single B2 vertex. Then Lemma 4.10 guarantees that at least 9− 1 = 8
points can be gained while converting Q(cid:48) to a high box, and as in the previous item, this implies
that Invariant I is satisﬁed by the resulting dense graph ˆGt.

Subcase (3.3): Q contained two B2 vertices. This subcase splits further into three.
Subcase (3.3.1): If Q was a dispensible box of type 2, then Q(cid:48) contains a strong ﬁx vertex (since
all white vertices in the dense graph had at most one white neighbor, and if this neighbor was

a virtual leaf then they have no additional white neighbors). From Lemma 4.10 we conclude
that Q(cid:48) is semi-corrupted, therefore Invariant I is satisﬁed by the resulting dense graph ˆGt.

Subcase (3.3.2): If Q was a C12 box, then again Q(cid:48) contains a strong ﬁx vertex (since all neighbors of
white leaves in the dense graph, i.e., all vertices that could be triplet vertices in the underlying

graph, have at most one white neighbor, and this neighbor is not the lead of a white tail of

length 1 or 2).

Subcase (3.3.3): If Q was a regular colored box with two B2 vertices, then Q(cid:48) is not corrupted, and

therefore this case can be ignored.

Note that the above subcases cover all graphs in which Q(cid:48) is corrupted, for the following reasons:
If Q was a high leftover or high regular box then Q(cid:48) is not corrupted. Additionally, if Q was a
regular colored box satisfying Property P2 (Subcase (3.3.3)), then Q(cid:48) also satisﬁes it. Finally, we
know that Q was not corrupted because Invariant I guarantees that there are no corrupted boxes
before Staller’s move.
Claim 4.15. If Staller plays on ˆGt−1 a vertex v that is in a dispensible box, then at least 3 points
are gained and the resulting dense graph ˆGt is good.

Figure 16: All possible moves on dispensible boxes. (a) Dispensible box of type 1. (b), (c) Dispensible
box of type 2.

Proof:

34

Figure 17: Possible boxes resulting from Staller moves on dispensible boxes.

Let Q be a dispensible box. The possible moves are shown in Figure 16.

Case (a): Q is dispensible of type 1. Then Staller has two choices.

1. If Staller plays v1, then at least 3 points are gained from v1 and v2, and a single BW component

results. From Lemma 4.4 we know that Invariant I is satisﬁed on ˆGt.

2. If Staller plays v2 or v3, then from Lemma 4.4 we know that at least 3 + 3 + 2 − 3 = 5 points

are gained and the resulting graph ˆGt is good.

Cases (b) and (c): Q is dispensible of type 2. Then Staller has three types of choices.

1. If Staller plays a high vertex, i.e., v5, v6, v7, v8, v10, v11, v13, v14, v15, v16, v18 or v19, then at
least 6 − 2 = 4 points are gained and the resulting boxes are high, and therefore Invariant I is
satisﬁed.

2. If Staller plays v4, v9 or v12, then at least 4 points are gained, and the resulting boxes are
dispensible, regular of size 2, and if v12 is played then regular colored path (see Case (1) in
Figure 17).

3. If Staller plays v17, then at least 3 points are gained and the resulting box is a path of the form
HHB2HB3 (see Case (2) in Figure 17). The containing component is semi-corrupted since
Dominator can play on the middle B2 vertex of this box (which is the box root) and gain at
least 2 + 3 + 3 + 1 = 9 points.

Claim 4.16. If Staller plays on ˆGt−1 a vertex v that is in a high leftover box, then at least 3 points
are gained and the resulting dense graph ˆGt is good.

Proof: If v is in a high leftover box, then at least 3 points are gained from v becoming red, and all

resulting boxes are high and do not contain triplet subtrees. Therefore there is a box decomposition
satisfying Invariant I on the resulting dense graph ˆGt.
Claim 4.17. If Staller plays on ˆGt−1 a vertex v that is in a regular box, then at least 3 points are
gained and the resulting dense graph ˆGt is good.

Proof: Let Q be a regular box. There are four cases to consider, corresponding to the four categories

in Deﬁnition 3.10.

35

Figure 18: All possible moves on a C12 box. The dotted edges correspond to the two types of C12 boxes,
and exactly one of them exists.

Case (R1): Q is of size 2. Then any move on Q gains at least 5 points, and Lemmas 4.3 and 4.4
guarantee that the resulting graph is good.

Case (R2): Q is a high regular box. Then any move gains at least 3 points and all resulting boxes
can be high.

Case (R3): C is a C12 box. The possible moves are described in Figure 18.

If Staller plays v1, then the remaining box is semi-corrupted since Dominator can play v4 in the
next move and gain at least 3 + 3 + 2 + 1 = 9 points from the red vertices and from converting v3 to
B2, and the remaining box is a dispensible box of type 2. See Case (a) in Figure 19.

Figure 19: Possible semi-corrupted boxes resulting from Staller moves on C12 boxes, and moves v gaining
at least 9 points.

If Staller plays v2, then at least 5 points are gained and, after separating the vertices v8, v9 and
v10 to a dispensible box of type 1 rooted at v8, the resulting box is high and satisﬁes Property P0,
and therefore it is regular.

If Staller plays v3, then at least 6 points are gained and all resulting boxes are regular colored

path boxes and regular boxes of size 2.

If Staller plays one of the vertices v4, v6, v9 or v10, then at least 6 − 2 = 4 points can be gained

36

while converting the B2 vertices to high, and the resulting boxes are regular.

If Staller plays v5 or v7, then at least 3 points are gained and the resulting box (after separating
v8, v9 and v10 to a dispensible box of type 1 rooted at v8) contains a strong ﬁx vertex and a single
B2 vertex (see Case (b) in Figure 19), and therefore it is in a semi-corrupted component.

If Staller plays v8, then at least 3 points are gained from converting v9 to a B2 vertex in a BW
box, and v3 becomes a strong semi-triplet vertex in a corrupted box. From Lemma 4.11 we conclude
that the box is semi-corrupted, since it is possible to gain at least 8 points in the following move

(since k = 0).

Case (R4): Q is a regular colored box. Case P1:(c) (i.e., Q is a dispensible box of type 1) was
already analyzed in Claim 4.15, and therefore we ignore it. Therefore exactly one of the following

cases occurs (see Figure 7). Note that in all the following cases, we analyze the subtree rooted at

some split vertex, and show that all the resulting boxes are regular. If an unexpected vertex becomes

red, then at least two additional points are gained, and therefore the box containing this vertex can

be converted to a high box. We therefore ignore this possibility in the case analysis. We split the

analysis into two subcases, as follows.

Subcase (a): v is a B2 vertex. Then at least one of the following cases occurs.

1. v is the only B2 vertex and Q satisﬁes Case P1:(a) of Deﬁnition 3.8. Then at least 2 + 1 = 3
points are gained by converting the vertex v(cid:48) adjacent to v to B2. If the resulting box does not
satisfy Case P1:(a), then it must satisfy Case P1:(b), and therefore it is a regular colored box.
2. v is the only B2 vertex and Q satisﬁes Case P1:(b). Then at least 2 + 1 = 3 points are gained
from v and from an adjacent subtail lead, and the resulting boxes are a high box, and regular
colored path boxes satisfying case P1:(b) or P1:(c) (and possibly additional BW components).
3. v is a B2 leaf and Q satisﬁes Case P2:(a) or Case P2:(b). Then, similarly to Case P1:(a), at
least 3 points are gained from v and its neighbor, and if the resulting box cannot be converted
to a high box while gaining at least 3 points, then it satisﬁes one of the cases P2:(a) and P2:(b).
4. v is a non-leaf vertex and Q satisﬁes Case P2:(b). Then, similarly to Case P1:(b), at least 3
points are gained from v and from an adjacent tail lead, and the resulting boxes are a high

box, and regular colored path boxes (and possibly additional BW components).

Subcase (b): v is a high vertex. Then at least 3 points are gained from v, and therefore no additional
B2 vertices need to be created. At least one of the following cases occurs.

1. Q contains a single B2 vertex, v(cid:48), satisfying Case P1:(a) of Deﬁnition 3.8. Let u be the vertex
closest to v(cid:48) that has a subtail ending at v(cid:48) and another subtail (guaranteed to exist by the
deﬁnition). Exactly one of the following cases occurs.
(a) v is on the subtail of u that contains v(cid:48), or v = u. Then at least 3 + 1 = 4 points are
gained, and the resulting boxes are high regular boxes, and possibly a regular colored path
box with two B2 leaves.

37

(b) v is on another subtail of u. Then at least 3+1 = 4 points can be gained, and the resulting
boxes are a regular colored box satisfying Case P2:(a) or Case P2:(b), and possibly another
regular colored path with a single B2 leaf.
not high can satisfy Case P1:(a).

(c) v is not on a subtail of u. Then at least 3 points are gained and the resulting box that is

2. Q contains a single B2 vertex, u, satisfying Case P1:(b). Then exactly one of the following
cases occurs. Notice that u is blue and therefore does not have neighbors that are blue leaves,

which implies that it does not have leaf neighbors.

(a) v is on a subtail of u, and is at distance 1 or 2 from u. Then at least 4 points can be

gained from v and its neighbors, which means that at least 3 points can be gained while

converting the box containing u to a high box.

(b) v is on a subtail of u, and is at distance 3 or more from u. Then at least 4 points can
be gained, and the resulting boxes are a regular colored box satisfying Case P2:(b), and
possibly a regular colored path with a single B2 leaf, or a BW component.
can be high boxes and a regular colored box satisfying Case P1:(b).

(c) v is not on a subtail of u. Then at least 3 points can be gained, and the resulting boxes

3. Q contains two B2 vertices, v1 and v2, that are leaves of subtails of a vertex u, corresponding

to Case P2:(a). Then exactly one of the following cases occurs.
(a) v is on a subtail of u that contains a B2 vertex, or v = u. Then at least 4 points can be
gained on the subtail, and at least 3 points can be gained while converting the other B2
leaf to B3. In this case, all resulting boxes are high boxes and possibly a regular colored
path with two B2 leaves.
Case P2:(a).

(b) Otherwise, at least 3 points are gained and the resulting box that is not high still satisﬁes

4. Q contains two B2 vertices, v1 and v2, such that v1 is a leaf on a subtail of v2, corresponding

to Case P2:(b). Then exactly one of the following cases occurs.
(a) v is on the subtail of v2 that contains v1. Then at least 4 points can be gained on the
subtail, which means that at least 3 points can be gained while converting v2 to B3. In
this case, all resulting boxes are high, and possibly a regular colored path with two B2
leaves.

(b) Otherwise, at least 3 points are gained and the resulting box that is not high still satisﬁes

Case P2:(a).

Theorem 4.12 follows from Claims 4.14, 4.15, 4.16 and 4.17.

4.5 Dominator moves

We have seen that if Staller plays on a good graph Gt, then the resulting graph is also good. Our
goal in this section is to prove the following theorem.

38

Theorem 4.18. Let t < T .

If Dominator plays on a vertex v in ˆGt−1 and ˆGt−1 is good, and
Dominator chooses all moves greedily according to the guidelines in Section 3, then the resulting
graph ˆGt is good, and at least one of the following properties holds.

1. ψt ≥ 0.
2. ψt ≥ −2 and ψt + ψt+1 ≥ 0.
3. ψt ≥ −2 and ψt + ψt+1 + ψt+2 ≥ 0.

Notice that we do not make requirements about the last move (step T ) because of Corollary 2.21,

and therefore in all the following claims we only consider t such that t < T .

The deﬁnition of semi-corrupted components guarantees that if a semi-corrupted component is
created, then in the following Dominator move ψ ≥ 1, and therefore we focus on the case that there
is a box decomposition that does not contain corrupted boxes. Let Q be a box decomposition of
ˆGt−1 that does not contain corrupted boxes.
Claim 4.19. If Q contains a C12 box, then ψt ≥ 0 and the resulting graph ˆGt is good.

If Dominator plays v4, then at least
Proof: Recall that all possible moves appear in Figure 18.
3 + 3 + 1 = 7 points are gained and the resulting boxes, after disconnecting the edge between v2 and
v3, are a BW box and a dispensible box of type 2.
Claim 4.20. If Q contains a regular colored box (including a dispensible component of type 1), then
ψt ≥ 0 and the resulting graph ˆGt is good.

Figure 20: Possible moves (marked as v) gaining at least 7 points on regular colored boxes containing
B2 vertices, corresponding to the diﬀerent cases in the proof of Claim 4.20. (a) Case (P1:a). (b) Case
(P1:b). (c) Case (P1:c). (d) Case (P2:1). (e) Case (P2:2).

Proof: Let Q be a regular colored box. The following cases cover all possibilities for Q.

Except where noted otherwise, we assume all high vertices are white. If an unexpected vertex

becomes red, then at least two additional points are gained, and the resulting box can be converted

to a high box. Therefore we ignore this possibility in the analysis.

See Figure 20 for illustrations, and recall that all possible regular colored boxes are illustrated in

Figure 7. We separate the analysis into cases according to the diﬀerent properties of Deﬁnition 3.8,

as follows.

39

Case (P1:a): Q satisﬁes Case P1:(a) of Deﬁnition 3.8. Let u be a vertex with a subtail containing
a B2 leaf and a high subtail of length 3 or more. By playing on the neighbor of the leaf on the high
subtail, at least 3 + 3 + 1 = 7 points can be gained and the resulting box satisﬁes Case P2:(a).

Case (P1:b): Q satisﬁes Case P1:(b). Let u be the B2 vertex. By playing on the neighbor of the
leaf on a subtail of u of length 3 or more, exactly one of the following cases can result.

1. At least 3 + 3 + 1 = 7 points are gained, and the resulting box satisﬁes Case P2:(b).
2. At least 3 + 3 + 3 − 1 = 8 points are gained after converting u to B3, and the resulting box is

high.

Case (P1:c): Q satisﬁes Case P1:(c). By playing on the middle vertex v, all vertices of the box are
eliminated and at least 2 + 3 + 3 = 8 points are gained.

Case (P2): Q satisﬁes Case P2:(a) or Case P2:(b). This splits further into the following two subcases.

Subcase (1): There is a B2 leaf on a subtail of length 2 of some vertex v. Since the leaf is a B
vertex, its neighbor must be white. Exactly one of the following cases results from playing v.

1. v is high. Then at least 2 + 3 + 3 − 1 = 7 points can be gained while converting the remaining

B2 vertex in the box to high.

2. v is not high. Then at least 2 + 3 + 2 = 7 points are gained and the resulting boxes do not

contain B2 vertices.

Subcase (2): Otherwise, there must be two B2 leaves that are neighbors of the same vertex, v.
Playing v gains at least 2 + 3 + 2 = 7 points, and the resulting boxes are high.
Claim 4.21. If Q contains a high regular box Q of size 3 or more (including a high leftover root
box), and Q is either a path or contains a split vertex s satisfying one of the following requirements:

1. s has four tails or more.

2. s has a tail that is not of length 2.

3. s has a tail of length 2 containing a B3 vertex.

Then ψt ≥ 0 and the resulting graph ˆGt is good.
Proof: First, observe that if Q contains a high path of length 3 or more, then playing on the neighbor
of a leaf on this path can gain at least 3 + 3 + 1 = 7 points, and if a box remains, it is a path with
a B2 leaf and no other B2 vertices, and therefore it is a regular box. Otherwise, let Q be a high
regular complex box, and s a split vertex in Q, as described. As before, we assume all high vertices

are white, since if an unexpected vertex becomes red, at least two additional points are gained and

the box containing the red vertex can be converted to a high box. We separate the analysis into

cases according to the diﬀerent conditions of the claim. See Figure 21 for illustrations.

40

Figure 21: Possible moves (marked as v) gaining at least 7 points on high regular complex boxes,
corresponding to the diﬀerent cases in the proof of Claim 4.21. When there are two items, (a) is before
playing v and (b) is the result. (1) Case (a). (2) Case (b). (3) Case (c:1). (4) Case (c:2). (5) Case
(d:1). (6) Case (d:2).

Case (a): s has 4 tails or more. Then playing s gains at least 3 + 4 = 7 points, and the resulting
boxes are high boxes, and paths with a B2 leaf and no internal B2 vertices, i.e., regular colored path
boxes and boxes of size 2.

Case (b): s has a leaf neighbor and an additional tail. Then playing s can gain at least 3 + 3 + 1 = 7

points from the red vertices and the other tail lead, and as in the previous case, the resulting boxes

are high boxes, regular colored path boxes and boxes of size 2.

If Cases (a) and (b) are not satisﬁed, then all tails are of length 2 or more.

Case (c): s has a tail of length 3 or more. If Dominator plays the vertex v that is the neighbor of

the leaf on the shortest tail, then exactly one of the following two subcases occurs.

Subcase (1): The shortest tail is of length 2. Then playing v gains 3 + 3 + 1 = 7 points from the
red vertices and from s, and the resulting box satisﬁes Case P1:(b) of Deﬁnition 3.8.

Subcase (2): The shortest tail is of length 3 or more. Then playing v gains at least 3 + 3 + 1 = 7
points from v and its neighbors, and the resulting box satisﬁes Case P1:(a) of Deﬁnition 3.8.

Case (d): All tails are of length exactly 2, and s has a tail of length 2 containing a B3 vertex. Then
at least one of the following two subcases occurs.

Subcase (1): There is a B3 leaf on a tail of s. Then playing s gains at least 3 + 3 + 3 + 1 = 10
points from the vertices that become red and the tail leads, and the resulting boxes are high boxes

and boxes of size 2.

Subcase (2): s has a B3 tail lead, u. Then playing a vertex v that is another tail lead adjacent to

41

s can gain at least 3 + 3 + 1 = 7 points from the red vertices and from u, and the resulting boxes

are high boxes and boxes of size 2.
Claim 4.22. If Q contains a dispensible component and ψt < 0, then ψt = −1, and additionally,
ψt+1 + ψt+2 ≥ 1 and all resulting graphs are good.
Proof: First observe that if there is a dispensible box of type 1 that is a root box, then ψt ≥ 0
by Claim 4.20 (in fact, ψt ≥ 1). Therefore the dispensible component is of type 2. Recall that
all possible moves appear in Figure 16. If Dominator plays v7 or v15 (according to the type of D2
box), then two of the resulting components are dispensible components of type 1 in some valid box
decomposition Q1 of ˆGt. Therefore, one of the following cases occurs.
Case (a): After Staller’s move a semi-corrupted box is created. Then ψt+1 + ψt+2 ≥ 1.

Case (b): Staller does not create a semi-corrupted box. Then at least one dispensible component
of type 1 remains, and Dominator can play move mt+2 on a high vertex in a dispensible component
of type 1 and gain at least 8 points.
Since Theorem 4.12 guarantees that ψt+1 ≥ 0, we get the claim.
Claim 4.23. If Q contains a high regular box of size 3 or more and ψt < 0, then ψt = −1, and
additionally, ψt+1 + ψt+2 ≥ 1 and all resulting graphs are good.

Figure 22: Subtrees in ˆGt−1 corresponding to the diﬀerent cases in the proof of Claim 4.23. (1) Case
(a). (2) Case (b:1). (3) Case (b:2).

Proof: From Claims 4.19, 4.20 and 4.21 we conclude that all regular boxes of size 3 or more are high

complex boxes, all split vertices in these boxes have two or three tails of length 2, and all vertices in

these tails are white.

Let Q be a high regular box of size 3 or more as described. Let s be a split vertex in Q that has

at most one neighbor that is not a tail lead (from Claim 2.28 we know that such a vertex exists),
and such that all vertices in the tails of s are white, and assume that ψt < 0. See illustrations in
Figure 22.

First, observe that if there is such a split vertex s with exactly two tails, then playing one of

the tail leads gains at least 3 + 3 + 1 = 7 points and the resulting box can be separated into a

42

dispensible box of type 1 rooted at s, and a high box. Therefore, s is a triplet vertex of depth 2.
Additionally, note that Property P0 guarantees that there is a vertex u on a tail of s that is the
parent of a dispensible box of type 1, since if all three tail leads were potential triplet witnesses then

this would imply that s has a (virtual) white leaf, contradicting our assumption that all tails of s
are of length 2 (and since a high box cannot be a parent of a high leftover box, and Q does not
contain corrupted boxes). Let v be a tail lead adjacent to s on another tail. Playing v could gain
3 + 3 + 1 = 7 points from converting s to a B2 vertex that is the box root of a dispensible box of type
2. Since the other resulting box would be high, and ψt < 0, we conclude that doing so would violate
Property P0. Therefore, we conclude that for each such split vertex s there exists a split vertex s(cid:48)
that would become a triplet vertex in this case. See Cases (2) and (3) in Figure 22 (s1 corresponds
to s and s2 corresponds to s(cid:48)).

Let λ be a leaf on Q, and let s1 to be the split vertex farthest from λ. Let s2 be the split
vertex that is closest to s1. We analyze the results of playing mt = s1, and separate them into cases
according to the structure of the graph. Observe that at least 6 points are gained by this move,
therefore ψt ≥ −1.

Case (a): There is a dispensible box of type 1 that is adjacent to a leaf of a tail of s1. Then playing s1
gains at least 6 points, and the resulting boxes are BW boxes, a high box containing the semi-triplet
vertex s2, and a path P = (v1, v2, v3, v4, v5) of the form B2W B2HH. See Case (1) in Figure 22. For
all 1 ≤ i ≤ 5, if Staller plays vi, then at least 5 points are gained and in the following Dominator
move there is a valid box decomposition containing a high box with a semi-triplet vertex, therefore
in this case ψt+1 + ψt+2 ≥ 2 by Lemma 4.11. If Staller plays elsewhere, then either a semi-corrupted
component is created in ˆGt+1 (in which case at least 8 points are gained in step t + 2), or Dominator
can play v3 and gain at least 2 + 3 + 2 + 1 = 8 points in step t + 2. We conclude that in this case
ψt+1 + ψt+2 ≥ 1.

Case (b): After Dominator plays s1, the resulting graph ˆGt+1 contains a dispensible component of
type 1 and a high box with a semi-triplet subtree rooted at s2. This splits further into the following
two subcases.

Subcase (1): The resulting semi-triplet subtree has a B3 leaf (Case (2) in Figure 22). Lemma
4.11 guarantees that in this case, if Staller does not play on the semi-triplet subtree then at least 11

points are gained. If Staller does play on the semi-triplet subtree, then Dominator can play on the
D1 component and gain at least 8 points. If Staller creates a semi-corrupted component, then at
least 8 points are gained in step t + 2 as well. In all cases, ψt+1 + ψt+2 ≥ 1.

Subcase (2): The semi-triplet subtree rooted at s2 has a B3 tail lead (Case (3) in Figure 22). We
conclude that the internal degree of s2 in ˆGt−1 is exactly 4, for the following reasons: First, assume
towards contradiction that the internal degree of s2 is 3. Then s2 is a split vertex with two tails of
length 2, in contradiction to the assumption that ψt < 0. Next, assume towards contradiction that

43

the internal degree of s2 is 5 or more. Then s2 has at least two additional neighbors, besides the tail
lead v1 adjacent to s1 and the two other tail leads. Since s1 was chosen to be the split vertex farthest
from λ, and all tails of all split vertices are of length exactly 2, at least one of the other neighbors of
s2, v0, must be one of the following:

1. A lead of a white tail of length 2.

2. A vertex of internal degree 3 that has a white leaf and a neighbor s0 that is a triplet vertex of

depth 2.

In both cases, Dominator could play mt = s2 and gain at least 3 + 4 · 1 = 7 points from s2, the
tail leads and v1 and v0, and the resulting boxes in ˆGt would be BW boxes and C12 boxes (since
every triplet subtree has a vertex that is the parent of a D1 box by Property P0, as none of the split
vertices have leaf neighbors). This contradicts the assumption that ψt < 0, and we conclude that
the internal degree of s2 is less than 5.

Since the internal degree of s2 is exactly 4, and it does not have another white tail of length 2
or a white tail of length 1, we conclude that s2 is a strong semi-triplet vertex. From Lemma 4.11
we conclude that if Staller does not play mt+1 on the semi-triplet subtree, then ψt+2 ≥ 1. If Staller
does play on the semi-triplet subtree, then as before, Dominator can play on the D1 component and
gain at least 8 points, so either way ψt+2 ≥ 1.
If Staller plays elsewhere and creates a semi-corrupted component, then ψt+2 ≥ 1 as well.

This concludes the proof, since all resulting graphs are good.
Claim 4.24. If all root boxes in Q are of size 2, then ψt ≥ −2 and the resulting graph ˆGt is good,
and at least one of the following properties holds.

1. ψt+1 ≥ 2.
2. ψt+1 + ψt+2 ≥ 2.

Proof: Recall that boxes of size 2 cannot be parent boxes, and therefore all components of the dense
graph are of size 2 (i.e., components of the forms B2W , B3W and W W ). Dominator can play on
any real vertex and gain at least 2 + 3 = 5 points, and the resulting dense graph ˆGt contains only
components of size 2. If Staller plays on a real vertex of the dense graph, then at least 5 points are
gained and therefore ψt+1 ≥ 2. Otherwise, since the box containing Staller’s move contains at most
one B2 vertex, the proof of Claim 4.14 guarantees that one of the following cases occurs.
Case (a): At least 6 − 1 = 5 points are gained in Staller’s move, and the resulting box is high.
Therefore ψt+1 ≥ 2, and the resulting graph ˆGt+1 is good.
Case (b): At least 3 points are gained in Staller’s move (i.e., ψt+1 ≥ 0), and the resulting box is
semi-corrupted and contains a strong ﬁx vertex. Lemma 4.10 guarantees that in this case, at least

44

10 − 1 = 9 points are gained in the following Dominator move (i.e., ψt+2 ≥ 2), and the resulting
graph ˆGt+2 is good.

Theorem 4.18 follows from Claims 4.19, 4.20, 4.22, 4.23 and 4.24.

4.6 Analysis conclusion

We conclude by showing that if Dominator plays according to the algorithm, then the game ends

with an average gain of at least 5 points per move, and therefore Dominator wins.

Theorem 4.25. If Dominator plays greedily according to the guidelines in Section 3, then the average

gain in a Dominator-start game is at least 5 points.
Proof: We ﬁrst note that if ˆGt∗ is good for some t∗ and Ψt∗ ≥ 0, then there exists t > t∗ such
that at least one of the following properties holds. We observe that for even t∗, these properties are
guaranteed by Theorem 4.18 and Corollary 2.21, and for odd t∗, they are guaranteed by Theorem
4.12 (and the deﬁnition of semi-corrupted components).

1. t is odd and at least 5t + 2 points are gained in steps 1 through t, and ˆGt is good.
2. t is even and at least 5t points are gained in steps 1 through t, and ˆGt is good.
3. At least 5t points are gained in steps 1 through t and ˆGt is empty, i.e., the game is over.

We note that for t∗ = 0, ˆGt∗ is high and therefore good, and Ψ0 = 0, and therefore there exists

some t > 0 satisfying one of the above cases.

The theorem follows by induction, since Ψt ≥ 0 in Cases 1 and 2, and the game ends when the

graph is empty, and therefore t = T must satisfy Case 3.

This concludes the analysis.

5

Implementing the algorithm

The greedy algorithm described in Section 3 often achieves stronger results than what is required in

order to prove Conjecture 1. Speciﬁcally, it would suﬃce if Dominator’s move was chosen such that
Ψ is non-negative when possible while preserving the invariant, and when no such move is possible,
chose a move which guarantees that the excess gain at the end of the next Staller move or the next

Dominator move is non-negative (if the current Dominator move is not the last move of the game).

The analysis shown in the previous section guarantees that Dominator always has such a move.

We have implemented a variant of the algorithm in order to verify the correctness of the algorithm

and the analysis, and ran it successfully on all trees up to size 20 (using the tree generation algo-

rithm described in [5]), as well as on some speciﬁcally constructed intermediate underlying graphs

(containing components which consist of several boxes in all valid box decompositions). In each test,

45

all possible games resulting from the tested initial graph were checked, i.e., Dominator’s moves were

chosen according to the algorithm, and all possible legal moves were tested for each Staller move.

For eﬃciency reasons, the implementation diﬀers from the algorithm described in Section 3 in

the following ways.

1. Not all possible underlying graphs and value functions are tested, but rather a small subset

which is closely related to the previous underlying graph and value function.

2. The implementation uses a deterministic box decomposition process, rather than checking all

possible box decompositions.

3. Dominator’s move is always chosen from the vertices in the root boxes of the dense graph, and

leaves are not considered except when all components of the dense graph are of size 2. Note

that the analysis of Dominator’s moves refers only to the root boxes, and therefore there is

always a move on a root box.

4. When a semi-corrupted component is created at the end of Staller’s move, the following Dom-

inator move is chosen from the vertices of the corrupted box.

5. If it is impossible to gain more than 6 points on Dominator’s move, and if there are several

moves gaining 6 points, ties are broken according to the following priorities:

(a) Prefer to play on a white vertex of a dispensible component.
(b) Prefer a move where the resulting dense graph contains a root box of the form BW BHH.

(c) Prefer a move where the resulting dense graph contains a strong semi-triplet subtree or a

semi-triplet subtree with a B3 leaf.

(d) Prefer a move where the resulting dense graph contains a dispensible component of type

1.

(e) Break additional ties arbitrarily.

Because we used the implementation to verify parts of the analysis as well, we did not make

additional improvements, and also veriﬁed that the excess gain for Staller moves is never negative,

and that if the excess gain of a move played by Dominator is negative, then the sum of excess gains

over at most three moves starting from this move is not negative (see Theorem 4.18 for details).

The eﬃciency of the algorithm can be further improved using additional modiﬁcations, such as

choosing the ﬁrst move achieving non-negative excess gain (as described above), and choosing moves

in a deterministic manner imitating the proofs in the analysis.

6 Conclusions

The algorithm described for Dominator achieves the desired bound of 3n/5 on all isolate-free forests,

which proves Conjecture 1. The variant of the conjecture that relates to general isolate-free graphs
remains open, however an upper bound of (cid:100)7n/10(cid:101) is proved in [4], and an improved bound of 2n/3

46

is shown in [3]. In [3], Bujt´as further improves these results (to bounds below 3n/5) for graphs with

minimum degree 3 or more.

We note that the algorithm introduced here does not perform optimally (i.e., does not achieve

the game domination number) on all graphs, and it may be interesting to optimize the solutions and

ﬁnd strategies that achieve the game domination number. Constructing a strategy for Staller may

also be of interest, whether it is an optimal strategy or a strategy that performs optimally against a

speciﬁc Dominator strategy.

References

[1] Boˇstjan Breˇsar, Sandi Klavˇzar, and Douglas F Rall. Domination game and an imagination

strategy. SIAM Journal on Discrete Mathematics, 24(3):979–991, 2010.

[2] Csilla Bujt´as. Domination game on forests. Discrete Mathematics, 338(12):2220–2228, 2015.

[3] Csilla Bujt´as. On the game domination number of graphs with given minimum degree. The

Electronic Journal of Combinatorics, 22(3):P3–29, 2015.

[4] William B Kinnersley, Douglas B West, and Reza Zamani. Extremal problems for game domi-

nation number. SIAM Journal on Discrete Mathematics, 27(4):2090–2107, 2013.

[5] Robert Alan Wright, Bruce Richmond, Andrew Odlyzko, and Brendan D McKay. Constant time

generation of free trees. SIAM Journal on Computing, 15(2):540–548, 1986.

47

