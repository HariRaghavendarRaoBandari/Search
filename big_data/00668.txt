6
1
0
2

 
r
a

M
2

 

 
 
]

.

A
N
h
t
a
m

[
 
 

1
v
8
6
6
0
0

.

3
0
6
1
:
v
i
X
r
a

POD-Galerkin reduced-order modeling with

adaptive ﬁnite element snapshots$

Sebastian Ullmanna,b, Marko Rotkvica, Jens Langa,b

aDepartment of Mathematics, Technische Universit¨at Darmstadt,

Dolivostr. 15, D-64293 Darmstadt, Germany

bGraduate School Computational Engineering, Technische Universit¨at Darmstadt,

Dolivostr. 15, D-64293 Darmstadt, Germany

Abstract

We consider model order reduction by proper orthogonal decomposition (POD)
for parametrized partial diﬀerential equations, where the underlying snapshots
are computed with adaptive ﬁnite elements. We address computational and
theoretical issues arising from the fact that the snapshots are members of dif-
ferent ﬁnite element spaces. We propose a method to create a POD-Galerkin
model without interpolating the snapshots onto their common ﬁnite element
mesh. The error of the reduced-order solution is not necessarily Galerkin or-
thogonal to the reduced space created from space-adapted snapshot. We ana-
lyze how this inﬂuences the error assessment for POD-Galerkin models of lin-
ear elliptic boundary value problems. As a numerical example we consider a
two-dimensional convection-diﬀusion equation with a parametrized convective
direction. To illustrate the applicability of our techniques to non-linear time-
dependent problems, we present a test case of a two-dimensional viscous Burgers
equation with parametrized initial data.

Keywords: proper orthogonal decomposition, adaptive ﬁnite elements, model
order reduction, reduced basis method

1. Introduction

Model order reduction is a tool to decrease the computational cost for appli-
cations where a parametrized PDE problem needs to be solved multiple times
for diﬀerent parameter values. Therefore model order reductions is often stud-
ied in the context of optimal control [7, 14, 19] or uncertainty quantiﬁcation
[5, 8, 20]. Snapshot-based model order reduction requires a set of representative
samples of the solution, which need to be computed in advance. The solution
of the reduced-order model is then represented as a linear combination of these
snapshots. The respective coeﬃcients are determined by means of a Galerkin

$This work was supported by the Graduate School Computational Engineering, Technische

Universit¨at Darmstadt.

Preprint submitted to Elsevier

March 3, 2016

projection, based on a weak form of the governing equations. In this way, the
reduced-order model inherits both the spatial structure of typical solutions as
well as the underlying physics.
Introductions to snapshot-based model order
reduction are provided by the textbooks [9, 16].

Standard techniques for model order reduction assume that all snapshots
use one and the same spatial mesh. Combining adaptive meshing with model
order reduction, however, can be an advantage from two points of view: Firstly,
introducing spatial adaptivity to the set-up phase of a reduced-order model can
decrease the total computation time if the solution contains local features de-
pending on the parameter. By adapting the mesh to the features at a given
parameter value, less degrees of freedom are required to obtain a certain accu-
racy. Secondly, introducing model order reduction to space-adaptive simulations
promises computational speed-up in cases where the solution is susceptible to
an approximation in a low-dimensional linear space and needs to be evaluated
for multiple diﬀerent parameter values.

Model order reduction with spatial adaptivity has been studied in [1, 2] for
snapshot computations with adaptive wavelets and in [21] for snapshot com-
putations with adaptive mixed ﬁnite elements. The main issue addressed in
these publications is the assessment of the error between the reduced-order so-
lution and the inﬁnite-dimensional true solution. In the case of static snapshot
computations, this problem can be circumvented by assuming a suﬃciently ﬁne
snapshot discretization. Then the error between the reduced-order solution and
a corresponding discrete solution can be estimated with the help of the discrete
residual. For the case of adaptive snapshot computations, [1, 2] use wavelet
techniques to estimate the required dual norm of the continuous residual. In
contrast, [21] derives a bound for the dual norm of the continuous residual from
a special mixed ﬁnite element and reduced basis formulation.

The references [1, 2, 21] focus on model order reduction by the greedy re-
duced basis method [15].
In this paper, however, we consider an alternative
approach, namely proper orthogonal decomposition (POD) [10, 17]. The major
diﬀerence between both methods lies in the construction of the reduced space
used as a test and trial space in a Galerkin procedure. Both methods require
a ﬁxed set of training parameters to be chosen in advance. From these, the
greedy reduced basis method selects a set of parameter values in an iterative
way using an error estimator and uses the span of the corresponding snapshots
as a reduced space. This can save computation time by avoiding the compu-
tation of snapshots which have not been selected. In contrast, POD forms a
reduced basis by linearly combining the snapshots corresponding to all training
parameter values. The linear combination is done in a way which minimizes the
approximation error between the snapshots and their reduced-order approxima-
tions.
If the dimension of the reduced spaces are increased, both the greedy
and the POD space eventually become equal to the span of the snapshots corre-
sponding to all training parameter values. A POD of snapshots resulting from
a static spatial discretization can implemented in terms of a truncated singular
value decomposition [11]. Therefore, an error estimator is not necessary for
creating a POD reduced basis. Because snapshots have to be computed for all

2

training parameters, POD is often applied to time-dependent problems, where
snapshot data arise as a by-product of the numerical time stepping scheme. We
note that in this context, POD with time-adaptive snapshots has been studied
in [3]. POD with one-dimensional space-adaptive snapshots has already been
addressed in [13], where the POD computation relies on a polynomial approxi-
mation of the snapshots. In contrast, we focus on the two-dimensional case and
present a method which does not require an intermediate approximation of the
snapshots.

A major diﬀerence between greedy and POD reduced basis methods for
space adaptive snapshots is caused by the relation between the snapshots and
the reduced basis functions: In the greedy reduced basis method, the reduced
space is formed by linear combinations of snapshots, while the snapshots are
themselves elements of the reduced space. In the POD reduced basis method,
the reduced space is also formed by linear combinations of snapshots, but the
snapshots are not elements of the reduced space, in general. The diﬀerence
between the snapshots and their closest approximation in the POD space can
be measured in terms of the truncated singular values. This has consequences
for the error assessment of POD-Galerkin schemes in presence of space-adapted
snapshots. While the main diﬃculties in the greedy reduced basis method arise
from the fact that the error of the reduced-order solution is not necessarily
orthogonal to the reduced space anymore, the POD reduced basis method is
additionally subject to a truncation error.

This paper is structured as follows: In section 2, we introduce proper orthog-
onal decomposition for adaptive ﬁnite element snapshots. We propose methods
to eﬃciently compute POD bases for adaptive ﬁnite element discretizations
with nested reﬁnement. A POD-Galerkin reduced-order model based on adap-
tive snapshots is formulated in section 3 for an elliptic boundary value problem.
We prove error statements for the reduced-order solution in presence of adap-
tivity and compare the results to the static case. The methods and analytic
results are illustrated in section 4 with a numerical test case involving a linear
convection-diﬀusion equation with parametrized convective direction. The ap-
plicability to non-linear time-dependent problems is suggested by the results of
section 5, which features a Burgers problem with parametrized initial condition.

2. Proper orthogonal decomposition

We consider snapshot-based model order reduction, where the solution of
a PDE problem is represented in the space spanned by a set of reduced basis
functions obtained by linearly combining a set of snapshots. Such reduced-
basis functions typically have a global support and contain information about
expected spatial structures of the solution.

One method to compute reduced basis functions from snapshots is the proper
orthogonal decomposition [10, 17].
If the snapshots correspond to coeﬃcient
vectors of a ﬁnite element discretization on a ﬁxed grid, a POD can be given in
terms of the snapshot coeﬃcient matrix [11]. In the following, we introduce a
method that computes a POD of snapshots stemming from an adaptive ﬁnite

3

element simulation, where a snapshot matrix can not be created in straight-
forward manner.

2.1. Method of snapshots

We consider a PDE problem deﬁned over some bounded open spatial domain
Ω and some time and/or parameter domain S. In particular, we are interested in
parametrized elliptic boundary value problems, where S is a parameter domain,
and in parametrized parabolic initial boundary value problems, where S is a
tensor product of a time interval and a parameter domain.

Let V be the inﬁnite-dimensional Hilbert space used to characterize the
solution as a function of space. A typical example is V = H 1
0 (Ω), the Sobolev
space of L2(Ω) functions with weak ﬁrst derivatives in L2(Ω) and boundary
values vanishing in the sense of traces. We denote the V -scalar product by
(·,·)V and the V -norm by (cid:107) · (cid:107)V .
A proper orthogonal decomposition of snapshots u1, . . . , uN ∈ V can be
deﬁned in terms of a system of minimization problems [12]: Find functions
φ1, . . . , φN ∈ V which solve the minimization problems

N(cid:88)

n=1

(cid:13)(cid:13)(cid:13)un − R(cid:88)

k=1

(cid:13)(cid:13)(cid:13)2

V

min

φ1,...,φR∈V

(un, φk)V φk

,

(φi, φj)V = δij,

i, j = 1, . . . , R

(1)

for all R = 1, . . . , N . The solutions can be computed by an eigenvalue decompo-
sition of the matrix containing the mutual V -inner products of u1, . . . , uN . This
approach is often called the method of snapshots [17]. The eigenvalue problem
can be written in components as follows: For given u1, . . . , uN ∈ V , ﬁnd λ ∈ R
and (cid:126)a = (a1, . . . , aN )T ∈ RN , such that

N(cid:88)

j=1

(ui, uj)V aj = λai,

i = 1, . . . , N.

The matrix form is written as G(cid:126)a = λ(cid:126)a, where G is called the snapshot Gramian.
The eigenvalue decomposition of the snapshot Gramian results in eigenvalues
λ1, . . . , λN ∈ R and eigenvectors (cid:126)a1, . . . , (cid:126)aN ∈ RN . We order the eigenvalues
such that λ1 ≥ ··· ≥ λD > 0 = λD+1 = ··· = λN and write the eigenvectors in
N )T for r = 1, . . . , N . Then the ﬁrst POD basis
components as (cid:126)ar = (ar
functions are given as linear combinations of snapshots,

1, . . . , ar

N(cid:88)

n=1

φr =

un

ar
n√
λr

,

r = 1, . . . , D.

(2)

The space V R = span(φ1, . . . , φR) is called a POD space of dimension R for any
1 ≤ R ≤ D.

4

POD reduced-order modeling tries to approximate a solution u : S → V

with a function uR : S → V R deﬁned as

uR =

φrbr,

(3)

where (cid:126)b = (b1, . . . , bR)T : S → RR is a POD coeﬃcient vector. Combining (2)
and (3) gives a POD approximation in terms of the snapshots,

uR =

un

nbr√
ar
λr

,

(4)

One particular choice of POD coeﬃcients is implied by the POD minimiza-

tion problem (1) and given by a V -orthogonal projection of u onto V R:

R(cid:88)

r=1

N(cid:88)

R(cid:88)

n=1

r=1

R(cid:88)

N(cid:88)

D(cid:88)

P Ru :=

φr(φr, u)V

∀u ∈ V, R = 1, . . . , D,

r=1

which means br = (φr, u) for r = 1, . . . , R. The orthogonal projection is used
as a reference solution later on, because it gives a POD representation with
optimal coeﬃcients:

(cid:107)u − P Ru(cid:107)V = inf
v∈V R

(cid:107)u − v(cid:107)V

∀u ∈ V.

The error of the POD projection of the snapshots can be computed from the
POD eigenvalues,

(cid:107)un − P Run(cid:107)2

V =

λn,

(5)

n=1

n=R+1

which implies that the POD projection error of the snapshots decreases mono-
tonically with the POD dimension and that un = P Dun for n = 1, . . . , N .
Together with (2) this means

span(u1, . . . , uN ) = span(φ1, . . . , φD).

(6)

2.2. Adaptive snapshot spaces
In order to compute a set of snapshots, we discretize our PDE problem of
interest with adaptive ﬁnite elements in space. Let V1, . . . , VN ⊂ V be adapted
ﬁnite element spaces, so that u1 ∈ V1, . . . , uN ∈ VN . Let M1, . . . , MN be the
dimensions of the respective spaces. We focus on h-adaptive Lagrangian ﬁnite
elements with a ﬁxed polynomial degree, so that each snapshot ﬁnite element
space is deﬁned by a triangulation.

For discretizations on a ﬁxed triangulation, one can represent linear com-
binations of snapshots by linear combinations of ﬁnite element coeﬃcient vec-
tors. In order to do this for adaptive spatial discretizations, however, one must
ﬁrst express the snapshots in terms of a suitable common ﬁnite element basis.
Therefore, we introduce a space V+ ⊂ V with ﬁnite dimension M+, on which
we impose two properties:

5

Figure 1: Illustration of meshes corresponding to general ﬁnite element spaces V1 and V2,
their vector sum V1 + V2 and a common ﬁnite element space V+ obtained by adding nodes
and edges.

1. V+ is a ﬁnite element space of the same type as V1, . . . , VN ,
2. V1 + ··· + VN ⊂ V+ in terms of a vector sum.

A consequence of the ﬁrst property is that after interpolating all snapshots onto
V+, we can work with them in the same way as if they were computed on a
ﬁxed triangulation. The second property ensures that the error between any
snapshot and its representation in V+ is zero.
In general, setting V+ = V1 + ··· + VN would be too restrictive in the sense
that it does not necessarily fulﬁll the ﬁrst property. Consider, for example, the
case where V1, . . . , VN are linear Lagrangian ﬁnite element spaces deﬁned over
diﬀerent triangulations of a common spatial domain, like in Figure 1. While the
functions in V1+···+VN are still piecewise linear, they do not always correspond
to a ﬁnite element discretization on a triangulation. Still, by adding degrees of
freedom one can ﬁnd a triangulation and a respective linear Lagrangian ﬁnite
element space V+ containing V1 + ··· + VN .

A more convenient situation is encountered if the snapshots are adapted with
the newest vertex bisection algorithm starting from a common initial triangu-
lation. It is known that the smallest common reﬁnement of two such meshes is
their overlay [4, 18], which implies V1 + ··· + VN = V+. A sketch is given in
Figure 2. Moreover, the mesh of V+ can be found by repeated local reﬁnements
of any snapshot mesh. Consequently, to interpolate a function from Vn to V+ for
any n = 1, . . . , N , one only needs to interpolate the function between successive
reﬁnement steps. Because of this favorable property, we focus on reﬁnement by
newest vertex bisection in our numerical examples. However, the theory does
not depend on this decision.

Besides a common ﬁnite element space of all snapshots, it will be useful to
have common ﬁnite element spaces of subsets of snapshots available. To this
end, we extend our notation in the following way: Let Vn1 , . . . , VnK for K > 1
deﬁne a K-tuple of snapshot ﬁnite element spaces with 1 ≤ nk ≤ N for all
k = 1, . . . , K. We deﬁne Vn1...nK as a ﬁnite element space of the same type
as Vn1 , . . . , VnK , with Vn1 + ··· + VnK ⊂ Vn1...nK . As a special case we denote
V+ = V1...N .

6

V1V2V1+V2V+Figure 2: Illustration of meshes resulting from reﬁnement by newest vertex reﬁnement based
on a common initial triangulation corresponding to a ﬁnite element space V0. Dotted lines
indicate the next possible reﬁnement. Reﬁning the upper left triangle of the initial mesh
results in V1. Reﬁning the upper right triangle of the initial mesh results in V2. The common
ﬁnite element space V+ equals the overlay of both reﬁned meshes, and therefore V+ = V1 + V2.

2.3. Gramian of adapted snapshots

The ﬁrst step in the computation of a POD with the method of snapshots
is the creation of the snapshot Gramian, see section 2.1. For the case of space
adapted snapshots, we consider two options: The ﬁrst option is to represent all
snapshots as members of the common ﬁnite element space of all snapshots. The
second option is to represent pairs of snapshots as members of common ﬁnite
element spaces of these pairs.

At ﬁrst we provide an implementation for adaptive ﬁnite element snapshots
in terms of the common ﬁnite element space of all snapshots, where we choose
u1, . . . , uN ∈ V+. We collect the ﬁnite element coeﬃcients of the snapshots with
respect to a basis of V+ in a set of snapshot coeﬃcient vectors U1, . . . ,UN ∈ RM+
and deﬁne a snapshot matrix U = (U1, . . . ,UN ) ∈ RM+×N . Let M+ be the
matrix associated with the V -inner product of functions in V+, so that for
ui, uj ∈ V+ we have (ui, uj)V = U T
i M+Uj. Then the snapshot Gramian matrix
is given by G = U TM+U.

Now we reformulate the computation of the snapshot Gramian so that we
only need to create common ﬁnite element spaces of pairs of snapshots. We
consider the computation of a single entry of the snapshot Gramian matrix
for a pair consisting of ui ∈ Vi and uj ∈ Vj. Let U ij
j be the ﬁnite
element coeﬃcients of ui and uj with respect to a basis of their common ﬁnite
element space Vij and let Mij be the matrix associated with the V -inner product
of functions in Vij, so that (ui, uj)V = (U ij
j . This means that the
Gramian matrix can be ﬁlled by creating ﬁnite element spaces Vij of all pairs
of snapshots.

i )TMijU ij

i and U ij

We have presented two ways of creating the snapshot Gramian matrix for
the eigenvalue decomposition associated with the POD method of snapshots. In
any case, due to the properties of the common ﬁnite element spaces we obtain
the exact Gramians. The advantage of the ﬁrst method is that only a single
common ﬁnite element space has to be created. A possible disadvantage is that
the dimension of this space may be very high. In the second method a larger
number of lower-dimensional ﬁnite element spaces must be created.

7

V0V1V2V+2.4. POD basis functions and approximation

The POD basis functions are determined as linear combinations of snap-
shots by (2). If the snapshots are represented as members of V+, the POD basis
functions are automatically members of V+ and can be computed by linearly
combining the snapshot ﬁnite element coeﬃcient vectors corresponding to a ba-
sis of V+. If the snapshots are represented as members of their original adapted
ﬁnite element spaces V1, . . . , VN , the POD basis functions can be implicitly de-
ﬁned as linear combinations of snapshots. In this way, forming a basis of V+
can be avoided, but applying a linear operator to a single POD basis function
means applying this operator to all snapshots. Following this idea, there are
multiple ways to represent a POD approximation: in terms of V+, or in terms
of a linear combination of POD basis functions by (3), or in terms of snapshots
by (4).

The theoretical results regarding the V -orthogonal POD projection in the
last paragraph of section 2.1 have been stated in the context of functions in
V . Therefore, these results do not depend on whether the snapshots have been
computed with a static or an adaptive discretization. Still, the V -orthogonal
projection requires knowledge of the function to be projected, and is therefore
only valuable as a reference.

A diﬀerent scenario is the computation of POD coeﬃcients by a reduced-
order model obtained via Galerkin projection. Here, knowledge of the solution
is not necessary to obtain POD coeﬃcients. As we will see in the following
section, however, the snapshot discretization inﬂuences the accuracy of the POD
approximation.

3. POD Galerkin reduced-order modeling for an elliptic PDE

We highlight the principal diﬀerences between POD Galerkin reduced-order
modeling for static and adapted snapshots with an example of a parametrized
elliptic boundary value problem. For the case R = D we can use results from
the greedy reduced basis theory [1], because according to (6) the POD space
equals the span of the snapshots. For R < D we need to take the additional
POD truncation error into account.

3.1. Weak formulation

Let µ ∈ S be a parameter vector in a domain S ⊂ RK. We deﬁne a
parametrized bilinear form a(·,·; µ) which is uniformly coercive with coerciv-
ity constant

α(µ) = inf

v∈V \{0}

a(v, v; µ)
(cid:107)v(cid:107)2

V

≥ α > 0

and uniformly continuous with continuity constant

γ(µ) =

sup

v,w∈V \{0}

a(v, w; µ)
(cid:107)v(cid:107)V (cid:107)w(cid:107)V

≤ γ < ∞.

8

We also deﬁne a linear form f (v; µ) which is uniformly continuous with conti-
nuity constant

δ(µ) = sup

v∈V \{0}

f (v; µ)
(cid:107)v(cid:107)V

≤ δ < ∞.

The parametrized elliptic PDE problem is now formulated as follows: For

µ ∈ S, ﬁnd u(µ) ∈ V such that

a(u(µ), v; µ) = f (v; µ) ∀v ∈ V.

(7)

The Lax-Milgram theorem guarantees well-posedness of this problem under the
given continuity and coercivity assumptions. Its solution is called true solution
in the following.

3.2. Snapshot computation

To provide snapshots for the POD computation, we introduce a collection
of discretized PDE problems associated with a given discrete training set SN =
{µ1, . . . , µN} with µ1, . . . , µN ∈ S. For each µ ∈ SN we solve the respective PDE
problem with an adaptive discretization scheme, which leads to the snapshot
spaces V1, . . . , VN ⊂ V . The snapshots are solutions of the following discretized
version of (7): For each n = 1, . . . , N , ﬁnd un ∈ Vn such that

a(un, v; µn) = f (v; µn) ∀v ∈ Vn.

For any n = 1, . . . , N , the subspace property Vn ⊂ V leads to Galerkin
orthogonality between the error u(µn) − un and the discrete space Vn, which
means

a(u(µn) − un, v; µn) = 0 ∀v ∈ Vn.

We imply a C´ea lemma stating
(cid:107)u(µn) − un(cid:107)V ≤ γ(µn)
α(µn)

(cid:107)u(µn) − Pnu(µn)(cid:107)V , n = 1, . . . , N,

(8)

where Pn denotes the V -orthogonal projection onto the snapshot discretization
space Vn, so that

(cid:107)u(µn) − Pnu(µn)(cid:107)V = inf
v∈Vn

(cid:107)u(µn) − v(cid:107)V .

3.3. Reduced-order model and error assessment

Using the methods from section 2, we create a POD space V R ⊂ V from
the snapshots. The respective POD-Galerkin reduced-order model of (7) is
formulated as follows: For µ ∈ S, ﬁnd uR(µ) ∈ V R such that

a(uR(µ), v; µ) = f (v; µ) ∀v ∈ V R.

For the error assessment of uR, we ﬁrst recall the main results for static dis-
cretizations. Then we study to the adaptive case and point out major diﬀerences
compared to the static case. We restrict our attention to µ ∈ SN . For practical
applications this means that a suﬃciently rich snapshot set is assumed, so that
the error from discretizing S is negligible.

9

3.3.1. Static discretization

Assume V R ⊂ Vn for n = 1, . . . , N . This assumption holds if the snapshots

have been computed with static ﬁnite elements.

At ﬁrst we study the error between the snapshots and the reduced-order
solution evaluated at the corresponding training parameter values. We can
derive a Galerkin orthogonality between this error and the POD space,

a(un − uR(µn), v; µn) = 0 ∀v ∈ V R, n = 1, . . . , N.

The C´ea lemma, following from coercivity and continuity, states the relation to
the POD approximation error,

(cid:107)un − uR(µn)(cid:107)V ≤ γ(µn)
α(µn)

(cid:107)un − P Run(cid:107)V , n = 1, . . . , N.

Moreover, (5) implies uD(µn) = un for n = 1, . . . , N . The fact that the snap-
shots are recovered for large enough R is called asymptotic snapshot repro-
ducibility.

For the error with respect to the true solution we use a triangle inequality

and respective C´ea lemmas to obtain

(cid:107)u(µn) − uR(µn)(cid:107)V ≤ (cid:107)u(µn) − un(cid:107)V + (cid:107)un − uR(µn)(cid:107)V

≤ γ(µn)
α(µn)

(cid:107)u(µn) − Pnu(µn)(cid:107)V +

γ(µn)
α(µn)

(cid:107)un − P Run(cid:107)V

for n = 1, . . . , N . For maximum eﬃciency, the errors of the ﬁnite element
discretization and the POD truncation should be balanced. It should be noticed,
however, that the ﬁrst term stems from the oﬀ-line discretization, which is only
relevant for the setup of the reduced-order model, while the second term stems
from the on-line discretization, which is also relevant for the evaluation time of
the reduced-order model.

3.3.2. Adaptive discretization

We derive error inequalities similar to the ones in section 3.3.1, but for the
more general case, where the snapshots are members of diﬀerent ﬁnite element
spaces. Here we do not have a Galerkin orthogonality between the reduced-order
error and the reduced space available.
We start with the error between the solution of the reduced-order model and
the true solution. Due to V R ⊂ V , for any µ ∈ S one can derive a Galerkin
orthogonality

a(u(µ) − uR(µ), v; µ) = 0 ∀v ∈ V R

and a corresponding C´ea lemma

(cid:107)u(µ) − uR(µ)(cid:107)V ≤ γ(µ)
α(µ)

(cid:107)u(µ) − P Ru(µ)(cid:107)V .

10

We split the right-hand side of the C´ea lemma into contributions from the
snapshot computation and from the POD truncation. To exclude the error
associated with the discretization of the parameter domain, we consider only
µ ∈ SN . The derivation starts with adding a zero to the right-hand side of
the C´ea lemma for the reduced-order model and subsequently uses triangle
inequalities and the properties of orthogonal projections,
(cid:107)u(µn) − uR(µn)(cid:107)V ≤ γ(µn)
α(µn)
≤ γ(µn)
α(µn)
≤ γ(µn)
α(µn)

(cid:107)u(µn) − un + un − P Run + P Run − P Ru(µn)(cid:107)V

(cid:107)(I − P R)(u(µn) − un)(cid:107)V

(cid:107)un − P Run(cid:107)V +

(cid:107)un − P Run(cid:107)V +

γ(µn)
α(µn)
γ(µn)
α(µn)

(cid:107)u(µn) − un(cid:107)V

for n = 1, . . . , N . Using (8) we obtain
(cid:107)u(µn) − uR(µn)(cid:107)V ≤ γ(µn)
α(µn)

(cid:107)un − P Run(cid:107)V +

γ(µn)2
α(µn)2

(cid:107)u(µn) − Pnu(µn)(cid:107)V

for n = 1, . . . , N . This means that for parameter values in SN , the error between
the true and the reduced-order solution can be split into contributions from
the projection of the respective snapshot onto the POD space and from the
projection of the true solution onto the respective snapshot ﬁnite element space.
In absence of POD truncation, i.e. for R = D, the POD projection error vanishes
and we obtain a variant of known results from greedy reduced basis theory [1].
Because in general V R (cid:54)⊂ Vn for n = 1, . . . , N , we are not able to derive a
C´ea lemma for un − uR(µn). A straight-forward approach is using the results
from above to obtain

(cid:107)un − uR(µn)(cid:107)V

(cid:19)

(cid:18)

≤ (cid:107)un − u(µn)(cid:107)V + (cid:107)u(µn) − uR(µn)(cid:107)V
≤ γ(µn)
α(µn)

γ(µn)
α(µn)

(cid:107)u(µn) − Pnu(µn)(cid:107)V +

1 +

γ(µn)
α(µn)

(cid:107)un − P Run(cid:107)V .

Alternatively, we can use another result adapted from the literature [1]: Due
to coercivity, continuity, un ∈ V D and Galerkin orthogonality between V D and
the error between the true solution and the solution of the reduced-order model
we have
α(µn)(cid:107)un − uD(µn)(cid:107)2

V ≤ a(un − uD(µn), un − uD(µn); µn)

= a(un − u(µn), un − uD(µn); µ)
≤ γ(µn)(cid:107)un − u(µn)(cid:107)V (cid:107)un − uD(µn)(cid:107)V , n = 1, . . . , N,

so that

(cid:107)un − uD(µn)(cid:107)V ≤ γ(µn)
α(µn)

(cid:107)un − u(µn)(cid:107)V , n = 1, . . . , N.

11

Because V R ⊂ V D for R ≤ D we obtain

(cid:107)un − uR(µn)(cid:107)V

(cid:107)un − u(µn)(cid:107)V +

≤ (cid:107)un − uD(µn)(cid:107)V + (cid:107)uD(µn) − uR(µn)(cid:107)V
≤ γ(µn)
α(µn)
≤ γ(µn)2
α(µn)2

γ(µn)
α(µn)
(cid:107)u(µn) − Pnu(µn)(cid:107)V +

γ(µn)
α(µn)

(cid:107)uD(µn) − P RuD(µn)(cid:107)V

(cid:107)uD(µn) − P RuD(µn)(cid:107)V ,

with the help of the C´ea lemma of the snapshot computation. In any case, the
error between a snapshot and the solution of the reduced-order model at the
corresponding parameter value contains a component from the ﬁnite element
computation, which was not present for static snapshots.

4. Numerical example of a convection-diﬀusion equation

We apply POD model order reduction to a two-dimensional convection-
diﬀusion problem, where the transport direction serves as a parameter and
adaptive ﬁnite element snapshots are taken over the parameter interval. The
test case illustrates the computational methods introduced in section 2 and the
theoretical results derived in section 3.

4.1. Problem setting

We consider a parametrized boundary value problem based on a convection-

diﬀusion equation in two dimensions,

vx(µ)∂xu + vy(µ)∂yu − ν∂xxu − ν∂yyu = 1 ∀((cid:126)x, µ) ∈ Ω × S,

with solution u((cid:126)x, µ) : Ω × S → R for some spatial domain Ω = (0, X) × (0, Y )
with X, Y < ∞, and some parameter interval S ⊂ R. For the diﬀusivity con-
stant we assume ν > 0. The dependence of the convective velocity compo-
nents vx(µ) and vy(µ) on the parameter µ is given by vx = cos(0.25πµ) and
vy = sin(0.25πµ), which means that only the direction of the velocity vector is
varied. At the boundary ∂Ω of the spatial domain Ω, we specify homogeneous
Dirichlet conditions, so that

u((cid:126)x, µ) = 0 ∀((cid:126)x, µ) ∈ ∂Ω × S.

We ﬁx V = H 1

0 (Ω) for this example problem. A spatial weak form of the
parametrized convection-diﬀusion problem is given as follows: Find u(µ) : S →
V , such that

a(u, φ; µ) = f (φ) ∀φ ∈ V, µ ∈ S,

(9)

where the bilinear and linear forms are deﬁned as

a(w, ψ; µ) :=

vx(µ)∂xw ψ + vy(µ)∂yw ψ + ν∂xw ∂xψ + ν∂yw ∂yψ d(cid:126)x,

(cid:90)
(cid:90)

Ω

f (ψ) :=

ψ d(cid:126)x.

Ω

12

4.2. Discretization

The parameter domain is discretized into a training set SN := {µ1, . . . , µN}
with µ1, . . . , µN ∈ S. For each training parameter value, an adaptive ﬁnite
element algorithm chooses an individual ﬁnite element space with respect to
some ﬁxed error tolerance. The respective discrete solutions and ﬁnite element
spaces are denoted by un ∈ Vn for n = 1, . . . , N , so that un ≈ u(µn). We
assume adaptive ﬁnite discretizations for the training parameter values are given
as follows: For n = 1, . . . , N , ﬁnd un ∈ Vn such that

a(un, φ; µn) = f (φ) ∀φ ∈ Vn.

(10)

The ﬁnite element discretization leads to a set of linear algebraic equations
which can be solved in parallel for n = 1, . . . , N .

4.3. Reduced-order modeling

Using the methods from section 2, we create a POD space V R ⊂ V with
basis functions φ1, . . . , φR from the discrete solutions u1 ∈ V1, . . . , uN ∈ VN .
Substituting V by V R in (9) gives rise to the following reduced-order model:
Find uR(µ) : S → V R such that

a(uR, φ; µ) = f (φ) ∀φ ∈ V R.

(11)

We can rewrite the model as an equation for the POD coeﬃcient vector: Find
(cid:126)b(µ) : S → RR such that

(AR

ν )(cid:126)b = (cid:126)F R.

x vx(µ) + AR

y vy(µ) + AR

Expressions for the constant model coeﬃcient matrices AR
ν and the
right-hand side vector (cid:126)F R follow from substitution of the POD expansion (3)
into (11) and testing against the POD basis functions.

y , AR

x , AR

4.4. Results

For our computations, we choose a domain with X = Y = 1, a diﬀusivity of
ν = 0.01 and a parameter interval of S = [0, 1]. For the numerical discretization,
we use a custom implementation of piecewise linear Lagrangian ﬁnite elements
on triangular meshes with reﬁnement by newest vertex bisection. As an error
indicator we use the Matlab PDE toolbox with a spatial tolerance of 0.008 for
the error based on the viscous term. Numerical solutions for varying parameter
values are presented in Figure 3. Respective adapted spatial meshes are plotted
in Figure 4.

In order to generate snapshots for subsequent reduced-order modeling, we
solve the problem for 33 parameter values distributed equidistantly over the
parameter interval and store the respective solutions. We compute a POD of
these snapshots and create Galerkin reduced-order models of varying dimension.
In order to test the accuracy of the reduced-order models, we solve them for the
parameter values in the training set.

13

Figure 3: Solution of the convection-diﬀusion problem for diﬀerent parameter values.

Figure 4: Adapted triangulations corresponding to Figure 3, and their overlay.

14

The error between the snapshots and the solution of the POD-Galerkin
model is named ROM.
It can be viewed as a benchmark for the Galerkin
reduced-order model under the assumption that suﬃcient snapshot data has
been used to create the POD. It is measured in the relative norm induced by
the POD, so that

(cid:118)(cid:117)(cid:117)(cid:116) N(cid:88)

(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) N(cid:88)

ROM =

(cid:107)un − uR(µn)(cid:107)2

V

(cid:107)un(cid:107)2
V .

(12)

n=1

n=1

The error between the snapshots and their orthogonal projection on the
POD is named POD.
It can be viewed as a benchmark for the POD in the
sense that it characterizes the ability of the snapshot data to be represented in
a low-dimensional space. It is measured in the relative norm induced by the
POD, which enables an alternative expression in terms of the POD eigenvalues
via (5):

(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) N(cid:88)

(cid:118)(cid:117)(cid:117)(cid:116) D(cid:88)

(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) D(cid:88)

λn

λn.

(13)

POD =

(cid:107)un − P Run(cid:107)2

V

(cid:107)un(cid:107)2

V =

n=1

n=1

n=R+1

n=1

(cid:118)(cid:117)(cid:117)(cid:116) N(cid:88)

To compare the approximation errors resulting from the model order reduc-
tion with the ﬁnite element discretization error, we computed reference snap-
shots uref
N with a stricter spatial tolerance of 0.002. The resulting esti-
mated ﬁnite element discretization error of the original snapshots is measured
in the same norm as above, so that

1 , . . . , uref

(cid:118)(cid:117)(cid:117)(cid:116) N(cid:88)

(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) N(cid:88)

FEM =

(cid:107)uref

n − un(cid:107)2

V

(cid:107)un(cid:107)2
V .

(14)

n=1

n=1

The errors deﬁned in (12)–(14) are plotted in Figure 5 (left). We observe that
the POD projection error POD decreases monotonically, which is implied by its
representation in terms of the POD eigenvalues. The convergence of the error
of the reduced-order model ROM, however, stagnates at a level related to the
ﬁnite element error of the snapshots, as suggested by the results of section 3.3.2.
Still, both model order reduction errors POD and ROM are well below the ﬁnite
element error for reasonable dimensions of the reduced space.

The same types of plots are shown in Figure 5 (right) for simulations on a
ﬁxed grid given by the overlay of all adapted snapshots. Here both the error
of the POD projection and the solution of the reduced-order model converge.
This can be explained by the Galerkin orthogonality property detailed in sec-
tion 3.3.1. The convergence rate is higher in the case of a static ﬁnite element
discretization. Our interpretation of this behavior is that in the adaptive case
the POD basis functions of higher index start approximating spatial artifacts
resulting from the diﬀerent discretizations.

To underline our interpretation of the diﬀerences in the POD approximation
error POD between adaptive and static snapshots simulations, we plot the ﬁrst

15

Figure 5: Error POD of the POD projection, error ROM of the solution of the reduced-
order model, and ﬁnite element discretization error FEM, corresponding to (12)–(14). Left:
adapted snapshots, right: static snapshots computed on the common grid of the space-adapted
snapshots.

Figure 6: First 10 POD basis functions resulting from 33 adapted snapshots.

Figure 7: First 10 POD basis functions resulting from 33 static snapshots.

16

number of POD basis functions012345678910error10-510-410-310-210-1100adapted snapshotsROMPODFEMnumber of POD basis functions012345678910error10-510-410-310-210-1100static snapshotsROMPODFEM10 POD basis functions resulting from the adapted snapshots in Figure 6. We
observe that the POD basis functions corresponding to the adaptive simulation
start exhibiting local variations in the size of typical mesh cells when the index is
increased. For comparison, we present the ﬁrst 10 POD basis functions resulting
from the static snapshots in Figure 7. It is reasonable that the oscillations visible
in these plots are necessary to approximate the parameter-dependent physical
structures of the solution with increasing accuracy, see Figure 3.

Despite this qualitative diﬀerences in the appearance of the POD basis func-
tions of higher index, we stress that in this example including more than 4
basis functions does not decrease the total error of the reduced-order solution.
This is because the POD errors are dominated by the ﬁnite element approxima-
tion error for R ≥ 4 in both the adaptive and the static case, as obvious from
Figure 5.

5. Numerical example of a Burgers equation

To illustrate the potential of POD-Galerkin modeling with adaptive snap-
shots for non-linear time-dependent problems, we apply our techniques to a
Burgers equation. Adaptive ﬁnite element snapshots are taken over the time
and parameter domain. The test case suggests that the theoretical results de-
rived in section 3 for a linear elliptic setting can be transferred to a parabolic
setting.

5.1. Problem setting

We consider a parametrized initial-boundary value problem based on a scalar

viscous Burgers equation in two dimensions,

∂tu + u∂xu − ν∂xxu − ν∂yyu = 0 ∀(t, (cid:126)x, µ) ∈ I × Ω × S,

with solution u(t, (cid:126)x, µ) : I × Ω × S → R for some time interval I = (0, T ] with
T < ∞, some spatial domain Ω = (0, X) × (0, Y ) with X, Y < ∞, and some
parameter interval S ⊂ R. A parametrized initial condition is given by

u(0, (cid:126)x, µ) − u0((cid:126)x)µ = 0 ∀((cid:126)x, µ) ∈ Ω × S

with spatial data u0(x) : Ω → R. At the boundary we choose a combination of
homogeneous Neumann and periodic conditions, so that

u(t, (0, y)T , µ) − u(t, (X, y)T , µ) = 0 ∀(t, y, µ) ∈ I × (0, Y ) × S,
∂yu(t, (x, 0)T , µ) = ∂yu(t, (x, Y )T , µ) = 0 ∀(t, x, µ) ∈ I × (0, X) × S.

We assume that ν > 0. Note that for the inviscid Burgers equation with ν = 0
we would have u(t, (cid:126)x, µ) = µu(tµ, (cid:126)x, 1).
In the context of section 5, we deﬁne V ⊂ H 1(Ω) as the Sobolev space of
L2(Ω) functions which have weak ﬁrst derivatives in L2(Ω) and which satisfy
the periodic boundary conditions in a weak sense. A spatial weak form of the

17

parametrized Burgers problem is then given as follows: For u0 ∈ L2(Ω), ﬁnd
u(t, µ) : I × S → V , such that

(u(0, µ) − u0µ, φ) = 0 ∀φ ∈ V, µ ∈ S,

(∂tu, φ) + a(u, φ) + b(u, u, φ) = 0 ∀φ ∈ V,

(t, µ) ∈ I × S,

where (·,·) denotes the L2(Ω)-inner product and the bilinear and trilinear forms
are deﬁned as

(cid:90)

(cid:90)

a(v, ψ) := ν

∂xv ∂xψ + ∂yv ∂yψ d(cid:126)x,

b(v, w, ψ) :=

v∂xw ψ d(cid:126)x.

Ω

Ω

5.2. Discretization

We apply Rothe’s method to the problem, i.e. we employ a time discretiza-
tion followed by space discretizations of the sequence of resulting boundary
value problems. We use a constant time step size τ = T /(K − 1) with according
discrete time instances tk = (k− 1)τ and semi-discretized solutions ˜uk ≈ u(tk,·)
for k = 1, . . . , K. An implicit Euler time discretization is given as follows: For
u0 ∈ L2(Ω), ﬁnd ˜u1(µ), . . . , ˜uK(µ) : S → V such that

(˜uk − ˜uk−1, φ) + τ a(˜uk, φ) + τ b(˜uk, ˜uk, φ) = 0 ∀φ ∈ V, k = 2, . . . , K.

(˜uk − u0µ, φ) = 0 ∀φ ∈ V, k = 1,

(15)

(16)

This semi-discretization is the starting point for further adaptive space dis-
cretization and reduced-order modeling.
In order to obtain snapshots for a reduced-order model, we discretize the
parameter domain into a training set SP := {µ1, . . . , µP} with µ1, . . . , µP ∈ S.
We denote the respective semi-discrete solutions by uk,p ∈ V for time indices
k = 1, . . . , K and parameter indices p = 1, . . . , P , so that uk,p ≈ u(tk, µp). We
introduce a discretization in space with adaptive ﬁnite elements, so that each
snapshot belongs to an individual ﬁnite element space chosen with respect to
some global error tolerance . We denote the respective fully discrete solutions
and ﬁnite element spaces by u
k,p for k = 1, . . . , K and p = 1, . . . , P , so
k,p ≈ uk,p. A discretization of the problem with an implicit Euler scheme
that u
in time and adaptive ﬁnite elements in space for the training parameter values is
K,p ∈
given as follows: For u0 ∈ L2(Ω) and p = 1, . . . , P , ﬁnd u
V 
K,p such that

k,p ∈ V 

1,p ∈ V 

1,p, . . . , u

k,p − u
(u

k−1,p, φ) + τ a(u

k,p, φ) + τ b(u

k,p − u0µp, φ) = 0 ∀φ ∈ V 
(u
k,p, φ) = 0 ∀φ ∈ V 

k,p, u

k,p, k = 1,
k,p, k = 2, . . . , K.

The ﬁnite element discretization leads to a set of non-linear algebraic equations
which can be solved in parallel for p = 1, . . . , P and in sequence for k = 1, . . . , K.
The non-linear equations are solved with a standard Newton method using a
direct solver for the resulting sequence of linear algebraic equations in each time
step.

18

5.3. Reduced-order modeling

We compute a POD of all available discrete solutions. To have a consistent
notation, we ﬁx  and denote the snapshots as u1 ∈ V1, . . . , uN ∈ VN with
k,p with N = k + (p − 1)P for
N = KP . We set un = u
k = 1, . . . , K and p = 1, . . . , P . Using the methods from section 2, we create
a POD space V R ⊂ V with basis functions φ1, . . . , φR. Substituting V by
V R in the semi-discretization (15)–(16) gives rise to the following discretized
reduced-order model: Find uR

K(µ) : S → V R such that

k,p and VN = V 

1 (µ), . . . , uR

k − uR
(uR

k−1, φ) + τ a(uR

k , φ) + τ b(uR

k , uR

k − u0µ, φ) = 0 ∀φ ∈ V R, k = 1,
(uR

(17)

k , φ) = 0 ∀φ ∈ V R, k = 2, . . . , K.

(18)

We can rewrite the model as a set of equations for the POD coeﬃcient vectors:
Find (cid:126)b1(µ), . . . ,(cid:126)bK(µ) : S → RR such that

M R((cid:126)bk − (cid:126)bk−1) + τ AR(cid:126)bk + τ BR((cid:126)bk)(cid:126)bk = (cid:126)0, k = 2, . . . , K.

M R(cid:126)bk − (cid:126)b0µ = (cid:126)0, k = 1,

Expressions for the constant model coeﬃcient matrices M R, AR, BR and the
initial data (cid:126)b0 follow directly from substitution of the POD expansion (3) into
(17)–(18) and testing against the POD basis functions. An evaluation of the
term involving B amounts to a multiplication with a tensor containing R3 con-
stant model coeﬃcients.

5.4. Results

We consider an example with a domain width X = 1.0, a domain height
Y = 0.5, a ﬁnal time T = 1.2 and a parameter interval S = [0, 1]. As initial
data we specify a two-dimensional sinusoidal proﬁle

u0 = 0.5 + 0.5 sin(cid:0)(x − y − 0.75)π(cid:1) sin(cid:0)(x + y + 0.25)π(cid:1).

We choose a viscosity constant of ν = 0.001. The problem is a modiﬁed version
of a numerical example in [6].

The time discretization uses a step size of 0.005. For the spatial reﬁnement,
we employ the error indicator of the Matlab PDE toolbox with a spatial tol-
erance of 0.02 for the error based on the viscous term. The adapted meshes
and corresponding numerical solutions at various time instances are presented
in Figure 8 for a ﬁxed parameter choice of µ = 1.

In order to generate snapshots for subsequent reduced-order modeling, we
solve the problem for 33 parameter values distributed equidistantly over the
parameter interval and store the spatial solutions at all time steps. We compute
a POD of these snapshots and create Galerkin reduced-order models of varying
dimension. In order to test the accuracy of the reduced-order model, we solve
it for the parameter values in the training set.

19

Figure 8: Solution of the Burgers problem with µ = 1 at diﬀerent times. Left: Adapted ﬁnite
element meshes, right: numerical solutions

20

k=1

(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) K(cid:88)
(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) K(cid:88)

P(cid:88)

p=1

P(cid:88)

p=1

k=1

P(cid:88)

(cid:118)(cid:117)(cid:117)(cid:116) K(cid:88)
(cid:118)(cid:117)(cid:117)(cid:116) K(cid:88)
P(cid:88)
(cid:118)(cid:117)(cid:117)(cid:116) D(cid:88)

k=1

p=1

The errors are measured like in the elliptic case presented in section 4. The
error between the snapshots and the solution of the POD-Galerkin model is
deﬁned by

ROM =

(cid:107)u

k,p − uR

k (µp)(cid:107)2

V

(cid:107)u

k,p(cid:107)2
V .

(19)

The error between the snapshots and their orthogonal projection on the POD
is deﬁned by

POD =

=

(cid:107)u

k,p − P Ru

k,p(cid:107)2

V

(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) D(cid:88)

λn

k=1

p=1

λn.

(20)

(cid:107)u

k,p(cid:107)2
V ,

n=R+1

n=1

To estimate the ﬁnite element discretization error of the snapshots, we compute
reference snapshots uref
k,p for k = 1, . . . , K and p = 1, . . . , P with an adaptive
discretization using a stricter spatial tolerance of 0.005. The ﬁnite element
discretization error is given by

(cid:118)(cid:117)(cid:117)(cid:116) K(cid:88)

P(cid:88)

(cid:30)(cid:118)(cid:117)(cid:117)(cid:116) K(cid:88)

P(cid:88)

FEM =

(cid:107)u

k,p − uref

k,p(cid:107)2

V

(cid:107)u

k,p(cid:107)2
V .

(21)

k=1

p=1

k=1

p=1

The results are shown in Figure 9. We observe that the number of POD basis
functions needed for a given relative error is increased in comparison with the
convection-diﬀusion problem presented in the previous section. Otherwise the
results are similar. In particular, the POD projection error with respect to the
snapshots monotonically decreases, but the convergence of the solution of the
reduced-order model stagnates at some point. Also the results for a ﬁxed grid
are qualitatively similar to the corresponding results of the convection-diﬀusion
problem, so the same conclusions regarding the use of adaptive snapshots can
be drawn in the case of a Burgers problem.

6. Conclusions

We have extended the framework of POD-Galerkin reduced-order modeling
to snapshot data obtained with adaptive ﬁnite elements, where each snapshot
may be represented in a diﬀerent ﬁnite element space. These reduced-order
models rely on a representation in a common ﬁnite element space of all snap-
shots. Because creating such a space may be computationally demanding, we
have proposed a method to create the reduced-order model without actually
building the common ﬁnite element space.

21

Figure 9: Error POD of the POD projection, error ROM of the solution of the reduced-
order model, and ﬁnite element discretization error FEM, corresponding to (19)–(21). Left:
adapted snapshots, right: static snapshots computed on the common grid of the space-adapted
snapshots.

The POD projection error of our method converges when the dimension is
increased. The error between the POD Galerkin solution and the snapshots,
however, contains a contribution from the spatial ﬁnite element discretization,
which does not vanish when the POD dimension is increased. We have shown
this eﬀect for the case of linear elliptic boundary value problems.

Our ﬁndings are underlined with a numerical example of a convection-
diﬀusion problem. Here we could observe that the error caused by the spatial
adaptivity is dominated by the ﬁnite element error of the snapshots. Computa-
tional results for a Burgers problem suggest that the principal statements can be
carried over to a broader class of problems, including non-linear parametrized
parabolic PDEs.

References

[1] M. Ali, K. Steih, and K. Urban, Reduced basis methods based upon

adaptive snapshot computations, submitted.

[2] M. Ali and K. Urban, Reduced basis exact error estimates with wavelets,

to appear in Proceedings of ENUMATH 2015.

[3] A. Alla, C. Gr¨aßle, and M. Hinze, A residual based snapshot location
strategy for POD in distributed optimal control of linear parabolic equations,
tech. report, Hamburger Beitr¨age zur Angewandten Mathematik 2015-42,
2015.

[4] M. Cascon, C. Kreuzer, R. Nochetto, and K. Siebert, Quasi-
optimal convergence rate for an adaptive ﬁnite element method, SIAM J.
Numer. Anal., 46 (2008), pp. 2524–2550.

22

number of POD basis functions0816243240485664error10-410-310-210-1100adapted snapshotsROMPODFEMnumber of POD basis functions0816243240485664error10-410-310-210-1100static snapshotsROMPODFEM[5] P. Chen and A. Quarteroni, A new algorithm for high-dimensional
uncertainty quantiﬁcation based on dimension-adaptive sparse grid approx-
imation and reduced basis methods, J. Comp. Phys., 298 (201), pp. 176 –
193.

[6] M. Drohmann, B. Haasdonk, and M. Ohlberger, Reduced basis ap-
proximation for nonlinear parametrized evolution equations based on empir-
ical operator interpolation, SIAM J. Sci. Comp., 34 (2012), pp. A937–A969.

[7] J. Ghiglieri and S. Ulbrich, Optimal ﬂow control based on POD and
MPC and an application to the cancellation of Tollmien-Schlichting waves,
Optim. Meth. Software, 29 (2014), pp. 1042–1074.

[8] B. Haasdonk, K. Urban, and B. Wieland, Reduced basis methods for
parametrized partial diﬀerential equations with stochastic inﬂuences using
the Karhunen Loeve expansion, SIAM/ASA J. Uncertainty Quantiﬁcation,
1 (2013), pp. 79–105.

[9] J.S. Hesthaven, G. Rozza, and B. Stamm, Certiﬁed Reduced Basis

Methods for Parametrized Partial Diﬀerential Equations, Springer, 2016.

[10] P. Holmes, J.L. Lumley, and G. Berkooz, Turbulence, Coher-
ent Structures, Dynamical Systems and Symmetry, Cambridge University
Press, 1996.

[11] K. Kunisch and S. Volkwein, Control of the Burgers equation by a
reduced-order approach using proper orthogonal decomposition, J. Optimiz.
Theory App., 102 (1999), pp. 345–371.

[12]

, Galerkin proper orthogonal decomposition methods for parabolic prob-

lems, Numer. Math., 90 (2001), pp. 117–148.

[13] O. Lass, Reduced order modeling and parameter identiﬁcation for coupled

nonlinear PDE systems, PhD thesis, Universit¨at Konstanz, 2014.

[14] F. Negri, G. Rozza, A. Manzoni, and A. Quarteroni, Reduced basis
method for parametrized elliptic optimal control problems, SIAM J. Sci.
Comp., 35 (2013), pp. A2316–A2340.

[15] C. Prud’homme, D. V. Rovas, K. Veroy, L. Machiels, Y. Ma-
day, A. T. Patera, and G. Turinici, Reliable real-time solution of
parametrized partial diﬀerential equations: Reduced-basis output bound
methods, J. Fluid. Eng.–T. ASME, 124 (2002), pp. 70–80.

[16] A. Quarteroni, A. Manzoni, and F. Negri, Reduced Basis Methods

for Partial Diﬀerential Equations, Springer, 2016.

[17] L. Sirovich, Turbulence and the dynamics of coherent structures. parts I,

II and III, Quart. Appl. Math., 45 (1987), pp. 561–590.

23

[18] R. Stevenson, Optimality of a standard adaptive ﬁnite element method,

Found. Comput. Math., (2007), pp. 245–269.

[19] F. Tr¨oltzsch and S. Volkwein, POD a-posteriori error estimates
for linear-quadratic optimal control problems, Comput. Optim. Appl., 44
(2009), pp. 83–115.

[20] S. Ullmann and J. Lang, POD-Galerkin modeling and sparse-grid collo-
cation for a natural convection problem with stochastic boundary conditions,
in Sparse Grids and Applications – Munich 2012, J. Garke and D. Pﬂ¨uger,
eds., Lecture Notes in Computational Science and Engineering, Springer,
2014.

[21] M. Yano, A minimum-residual mixed reduced basis method: Exact resid-
ual certiﬁcation and simultaneous ﬁnite-element reduced-basis reﬁnement,
ESAIM: M2AN, 50 (2016), pp. 163–185.

24

