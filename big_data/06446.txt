6
1
0
2

 
r
a

 

M
1
2

 
 
]
S
D
h
t
a
m

.

[
 
 

1
v
6
4
4
6
0

.

3
0
6
1
:
v
i
X
r
a

Eulerian Methods for Visualizing Continuous Dynamical Systems

using Lyapunov Exponents

Guoqiao You ∗

Tony Wong †

Shingyu Leung‡

March 22, 2016

Abstract

We propose eﬃcient Eulerian numerical approaches for constructing ﬂow maps in con-

tinuous dynamical systems and apply these methods to compute the ﬁnite time Lyapunov

exponent (FTLE), the ﬁnite size Lyapunov exponent (FSLE) and also a related inﬁnitesi-

mal size Lyapunov exponent (ISLE). The new algorithm improves the original formulation

developed in [20, 21] so that the associated partial diﬀerential equations (PDEs) are solved

forward in time and, therefore, the forward ﬂow map can now be determined on the ﬂy.

When applied to the ISLE computations, the Eulerian method is computationally eﬃcient.

For each separation factor r in the deﬁnition of the FSLE or the ISLE, typical Lagrangian

methods require to shoot and monitor an individual set of ray trajectories. If the scale r

is changed, these methods have to restart the whole computations all over again. The pro-

posed method, however, requires to extract only an isosurface of a volumetric data for an

individual value of r which can be easily done using any well-developed eﬃcient interpolation

method or simply an isosurface extraction algorithm. Moreover, we provide a theoretical

link between the FTLE and the ISLE ﬁelds which explains the similarity in these solutions

observed in various applications.

1 Introduction

It is an important task to visualize, understand and then extract useful information in complex

continuous dynamical systems from many science and engineering ﬁelds including ﬂight simu-

∗School of Science, Nanjing Audit University, Nanjing, 211815, China. Email: 270217@nau.edu.cn
†Department of Mathematics, the Hong Kong University of Science and Technology, Clear Water Bay, Hong

Kong. Email: kwwongam@ust.hk

‡Department of Mathematics, the Hong Kong University of Science and Technology, Clear Water Bay, Hong

Kong. Email: masyleung@ust.hk

1

lation, wave propagation, bio-inspired ﬂuid ﬂow motions, ocean current model, and etc. It is,

therefore, natural to see many existing tools to study dynamical systems. For example, a lot

of work in dynamical systems focuses on understanding diﬀerent types of behaviors in a model,

such as elliptical zones, hyperbolic trajectories, chaotic attractors, mixing regions, to name just

a few.

One interesting tool is to partition the space-time domain into subregions based on certain

quantity measured along with the passive tracer advected according to the associated dynamical

system. Because of such a Lagrangian property in the deﬁnition, the corresponding partition is

named the Lagrangian coherent structure (LCS). One commonly used quantity is the so-called

ﬁnite time Lyapunov exponent (FTLE) [10, 11, 12, 16] which measures the rate of separation of

a passive tracer with an inﬁnitesimal perturbation in the initial condition, over a ﬁnite period of

time. Another popular diagnostic of trajectory separation in dynamical systems is the ﬁnite-size

Lyapunov exponent (FSLE) [3, 15, 7] which is especially popular in the applications from the

oceanography. Instead of introducing an inﬁnitesimal perturbation in the initial condition of the

ﬂuid particles, FSLE considers ﬁnite perturbation. It does not measure the rate of separation

but computes the time required to separate two adjacent tracers up to certain distance.

Since all these quantities are long treated as a Lagrangian property of a continuous dynamical

system, most, if not all, numerical methods are developed based on the traditional Lagrangian

ray tracing method by solving the ODE system using any well-developed numerical integrator.

These approaches, however, require the velocity ﬁeld deﬁned at arbitrary locations in the whole

space depending on the location of each individual particle. This implies that one has to in

general implement some interpolation routines in the numerical code. Unfortunately, it could be

numerically challenging to develop an interpolation approach which is computationally cheap,

high order accurate yet monotone (due to the numerical stability constraint for nonsmooth

velocity ﬁelds).

An Eulerian approach to the ﬂow map computation for the FTLE has been ﬁrst proposed

in [20] which has incorporated the level set method [24]. Based on the phase ﬂow method

[6, 22], we have developed a backward phase ﬂow method for the Eulerian FTLE computations

in [21]. Based on these partial diﬀerential equation (PDE) based algorithms, more recently, we

have developed in [32] an eﬃcient Eulerian numerical approach for extracting invariant sets in
a continuous dynamical system in the extended phase space (the x − t space). In [33], we have

proposed a simple algorithm called VIALS which determines the average growth in the surface

2

area of a family of level surfaces. This Eulerian tool relates closely to the FTLE and provides

an alternative for understanding complicated dynamical systems.

In this paper, we are going to further develop these Eulerian tools for continuous dynamical

systems. There are two main contributions of this paper. We will ﬁrst improve the numerical

algorithm for forward ﬂow map construction. [20, 21] have proposed to construct the forward

ﬂow map deﬁned on a ﬁxed Cartesian mesh by solving the level set equations or the Liouville

equations in the backward direction. In particular, to compute the forward ﬂow map from the

initial time t = 0 to the ﬁnal time t = T , one needs to solve the Liouville equations backward

in time from t = T to t = 0 with the initial condition given at t = T . This implementation is

numerically inconvenient, especially when incorporating with some computational ﬂuid dynamic

(CFD) solvers, since the velocity ﬁeld is loaded from the current time t = T backward in time

to the initial time. This implies that the whole ﬁeld at all time steps has to be stored in the

desk which might not be practical at all. In this paper, we ﬁrst propose an Eulerian approach

to compute the forward ﬂow map on the ﬂy so that the PDE is solved forward in time. Based

on this algorithm, we also propose a simple Eulerian method for computing the ISLE. For each

of the separation factor r in the deﬁnition of the ISLE, typical Lagrangian method requires to

shoot an individual set of rays and to monitor the variations in these trajectories. If the scale

r is changed, these methods will require to restart the whole computations all over again. In

this work, we are going to develop an eﬃcient algorithm which provides the ISLE ﬁeld for any

arbitrary separation factor r. For an individual value of r, the method requires to extract only

an isosurface of a volumetric data. This can be done easily by any well-developed interpolation

algorithm or simply the function isosurface in MATLAB. The second main contribution of this

work is to provide a theoretical link between the FTLE and the ISLE. Even though these two

quantities are measuring diﬀerent properties of the ﬂow, it has been reported widely, such as

[26], that they give visually very similar solutions in many examples. We are going to show in

particular that their ridges can be identiﬁed through the ridge of the largest eigenvalue of the

associated Cauchy-Green deformation tensor of the ﬂow.

Comparisons between FTLE and FSLE have been made in various studies. [4] has pointed

out that the FTLE might be unable to recognize the boundaries between the chaotic and the

large-scale mixing regime. [16] has argued that the FSLE has several limitations in Lagrangian

coherence detection including aspects from local ill-posedness, spurious ridges and intrinsic

jump-discontinuities. Nevertheless, [26] has stated that these two concepts might yield similar

3

results, if properly calibrated, and could be even interchangeable in some applications. Here,

we would like to emphasize that the main purpose of this work is on the computational aspect

of using these Lyapunov exponents, rather than on comparing the advantages and the disad-

vantages of these diﬀerent methods. The preference for one or the other could be based on the

tradition in various ﬁelds, or the availability of the computational resources.

This paper is organized as follows. In Section 2 we will give a summary of several important

concepts including the FTLE, FSLE and ISLE, and also our original Eulerian formulations for

computing the ﬂow maps and the FTLE. Then, our proposed Eulerian algorithms will be given

in Section 3. We will then point out some theoretical properties and relationships between the

FTLE and the ISLE in Section 4. Finally, some numerical examples will be given in Section 5.

2 Background

In this section, we will summarize several useful concepts and methods, which will be useful

for the developments that we are proposing. We ﬁrst introduce the deﬁnition of various closely

related Lyapunov exponents including the ﬁnite time Lyapunov exponent (FTLE) [14, 10, 11, 29,

18], the ﬁnite size Lyapunov exponent (FSLE) [2, 3, 19] and also the inﬁnitesimal size Lyapunov

exponent (ISLE) [16]. Then we discuss typical Lagrangian approaches and summarize the

original Eulerian approaches as in [20, 21, 32, 33]. The discussions here, however, will deﬁnitely

not be a complete survey. We refer any interested readers to the above references and thereafter.

2.1 FTLE, FSLE and ISLE

In this paper, we consider a continuous dynamical system governed by the following ordinary

diﬀerential equation (ODE)

x(cid:48)(t; x0, t0) = u(x(t; x0, t0), t)

(1)

with the initial condition x(t0; x0, t0) = x0. The velocity ﬁeld u : Ω × R → Rd is a time
dependent Lipschitz function where Ω ⊂ Rd is a bounded domain in the d-dimensional space.

To simplify the notation in the later sections, we collect the solutions to this ODE for all initial
conditions in Ω at all time t ∈ R and introduce the ﬂow map

a : Ω × R × R → Rd
Φb

4

such that Φb

a(x0) = x(b; x0, a) represents the arrival location x(b; x0, a) of the particle trajectory

satisfying the ODE (1) with the initial condition x(a; x0, a) = x0 at the initial time t = a. This

implies that the mapping will take a point from x(a; x0, a) at t = a to another point x(b; x0, a)

at t = b.

The ﬁnite time Lyapunov exponent (FTLE) [14, 10, 11, 29, 18] measures the rate of separa-

tion between adjacent particles over a ﬁnite time interval with an inﬁnitesimal perturbation in

the initial location. Mathematically, consider the initial time to be 0 and the ﬁnal time to be t,

we have the change in the initial inﬁnitesimal perturbation given by

0(x + δx(0)) − Φt

0(x)

δx(t) = Φt
= ∇Φt

0(x)δx(0) + higher order terms .

The leading order term of the magnitude of this perturbation is given by

(cid:113)(cid:104)δx(0), [∇Φt

(cid:107)δx(t)(cid:107) =

0(x)]∗∇Φt

0(x)δx(0)(cid:105) .

With the strain tensor matrix ∆t

0(x), the maximum strength deformation

is obtained by

max
δx(0)

(cid:107)δx(t)(cid:107) =

λmax[∆t

0(x)](cid:107)e(0)(cid:107) = eσt

0(x)|t|(cid:107)e(0)(cid:107) ,

0(x)]∗∇Φt

0(x) = [∇Φt
(cid:113)

where e(0) is the eigenvector associated with the largest eigenvalue of the deformation tensor.

Using this quantity, the ﬁnite-time Lyapunov exponent (FTLE) σt

0(x) is deﬁned as

(cid:113)

(cid:113)

σt
0(x) =

1
|t| ln

λmax[∆t

0(x)] =

λt
0(x) .

1
|t| ln

(2)

where λt

0(x) = λmax(∆t

0(x)) denotes the largest eigenvalue of the Cauchy-Green tensor. The

absolute value of t in the expression reﬂects the fact that we can trace the particles either forward

or backward in time. In the case when t < 0, we are measuring the maximum stretch backward

in time and this corresponds to the maximum compression forward in time. To distinguish

diﬀerent measures, we call σt

0(x) the forward FTLE if t > 0 and the backward FTLE if t < 0.

A related concept is a widely used concept in oceanography called the ﬁnite size Lyapunov

exponent (FSLE) which tries to measure the time it takes to separate two adjacent particles up

to certain distance [3, 15, 7]. There are two length scales in the original deﬁnition of the FSLE.

5

One is the initial distance between two particles which is denoted by . The other one is the

so-called separation factor, denoted by r > 1. For any trajectory with initial take oﬀ location
x(0; x1, 0) = x1 with (cid:107)x0 − x1(cid:107) = , we ﬁrst determine the shortest time τr(x1) > 0 so that

(cid:107)x(τr(x1); x0, 0) − x(τr(x1); x1, 0)(cid:107) = (cid:107)Φτr(x1)

0

(x0) − Φτr(x1)

0

(x1)(cid:107) = r .

The FSLE at the point x0 is then deﬁned as

γ,r(x0, 0) = max

(cid:107)x0−x1(cid:107)=

ln r
|τr(x1)| .

Numerically, on the other hand, the maximization over the constraint (cid:107)x0 − x1(cid:107) =  might
require special considerations and the corresponding optimization problem might not be easily

solved by typical optimization algorithms. One simple approximation is to consider only 2d-

neighbors of x0 with each point x1 obtained by perturbing one coordinate of x0 with distance

.

To avoid introducing two separated length scales ( and r) and the approximation by 2d

neighbors in the ﬁnal optimization step, one theoretically takes the limit as the length scale 

tends to 0. The FSLE can then be reduced to the inﬁnitesimal size Lyapunov exponent (ISLE)

as deﬁned in [16] given by

where |τr(x)| is the shortest time for which(cid:112)λmax(∆τr

γr(x, 0) =

ln r
|τr(x)|

0 (x)) = r.

(3)

Even with tremendous theoretical development, there are not many discussions on the nu-

merical implementations. Because the quantity is deﬁned using Lagrangian particle trajectories,

most numerical algorithms for computing the FTLE or the FSLE are developed based on the

ray tracing method which tries to solve the ﬂow system (1) using a numerical integrator. In the

two dimensional case, for example, the ﬂow map is ﬁrst determined by solving the ODE system

with the initial condition imposed on a uniform mesh x = xi,j. Then one can apply simple ﬁnite

diﬀerence to determine the deformation tensor and, therefore, its eigenvalues. The computation

of the FTLE is a little easier. For a given ﬁnal time, one simply solves the ODE system up to

that particular time level. Then the FTLE at each grid location can be computed directly from

these eigenvalues. The ISLE, on the other hand, is a little more involved since for a particular

separation factor, r, one has to continuously monitor the change in these eigenvalues and record

6

the precise moment when it reaches the thresholding value.

Computational complexity could be one major concern of these numerical tools. Let M =
O(∆x−1) and N = O(∆t−1) be the number of grid points in each physical direction and in the

temporal direction, respectively. The total number of operations required to compute the ﬂow

map ΦtN
t0

(xi,j) is, therefore, O(M 2N ). Note however that such complexity is needed for deter-

mining the FTLE or the ISLE on one single time level. For all time levels, the computational

complexity for these usual Lagrangian implementation is O(M 2N 2). There are several nice

ideas to improve the computational time. One natural idea is to concentrate the computations

near the locations where the solutions have large derivatives by implementing an adaptive mesh

strategy [27, 8, 17]. Another interesting approach is to avoid the computation of the overall

map ΦtN
t0

but to numerically decompose it into sub-maps Φtn+1

tn

[5]. Then, the extra eﬀort from

ΦtN
t0

to ΦtN +1

t1

, given by

ΦtN
t0

ΦtN +1

t1

= ΦtN

tN−1
= ΦtN +1

tN

◦ ··· ◦ Φt2
◦ ··· ◦ Φt3

t1

t2

t0

◦ Φt1
◦ Φt2

t1

,

are simply some interpolations. All these proposed improvements are only on the ﬂow map

computations, and therefore the FTLE. For the FSLE or the ISLE computations on one single

time level and one particular r, say γr(xi,j, t0), one has to go through all M mesh points in the

temporal direction. For a diﬀerent time level or even a diﬀerent separation factor r, we have to

go though the same procedure all over again. We do not aware of many eﬃcient algorithms for

the FSLE or the ISLE implementation.

2.2 An Eulerian method for computing the ﬂow map

We brieﬂy summarize the Eulerian approach based on the level set method and the Louville

equation. We refer interested readers to [20] and thereafter. We deﬁne a vector-valued function
Ψ = (Ψ1, Ψ2,··· , Ψd) : Ω × R → Rd. At t = 0, we initialize these functions by

Ψ(x, 0) = x = (x1, x2,··· , xd) .

(4)

These functions provide a labeling for any particle in the phase space at t = 0. In particular,

any particle initially located at (x, t) = (x0, 0) = (x1

0, 0) in the extended phase space

0,··· , xd

0, x2

7

(a)

(b)

Figure 1: Lagrangian and Eulerian interpretations of the function Ψ [20]. (a) Lagrangian ray
tracing from a given grid location x at t = 0. Note that y might be a non-grid point. (b)
Eulerian values of Ψ at a given grid location y at t = T gives the corresponding take-oﬀ
location at t = 0. Note the take-oﬀ location might not be a mesh point.

can be implicitly represented by the intersection of d codimension-1 surfaces represented by
∩d
i=1{Ψi(x, 0) = xi
0} in Rd. Following the particle trajectory with x = x0 as the initial condition
in a given velocity ﬁeld, any particle identity should be preserved in the Lagrangian framework

and this implies that the material derivative of these level set functions is zero, i.e.

DΨ(x, t)

Dt

= 0 .

This implies the following level set equations, or the Liouville equations,

∂Ψ(x, t)

∂t

+ (u · ∇)Ψ(x, t) = 0

(5)

with the initial condition (4).

The above implicit representation embeds all path lines in the extended phase space. For

instance, the trajectory of a particle initially located at (x0, 0) can be found by determining
the intersection of d codimension-1 surfaces represented by ∩d
0} in the extended
phase space. Furthermore, the forward ﬂow map at a grid location x = x0 from t = 0 to t = T
0 (x0) = y where y satisﬁes Ψ(y, 0 + T ) = Ψ(x0, 0) ≡ x0. Note that, in general, y

i=1{Ψi(x, t) = xi

is given by ΦT

is a non-mesh location. The typical two dimensional scenario is illustrated in Figure 1 (a).

The solution to (5) contains much more information than what was referred to above.

Consider a given mesh location y in the phase space at the time t = T , as shown in Figure

1 (b), i.e. (y, T ) in the extended phase space. As discussed in our previous work, these level

set functions Ψ(y, T ) deﬁned on a uniform Cartesian mesh in fact give the backward ﬂow map

from t = T to t = 0, i.e. Φ0

T (y) = Ψ(y, T ). Moreover, the solution to the level set equations (5)

8

for t ∈ (0, T ) provides also backward ﬂow maps for all intermediate times, i.e. Φ0

t (y) = Ψ(y, t).

To compute the forward ﬂow map, on the other hand, [20] has proposed to simply reverse

the above process by initializing the level set functions at t = T by Ψ(x, T ) = x and solving

the corresponding level set equations (5) backward in time. A typical algorithm of this type

is given in Algorithm 1. Note that in the original Lagrangian formulation, the attracting LCS

or the unstable manifold is obtained by backward time tracing, while the repelling LCS or the

stable manifold is computed by forward time integration. In this current Eulerian formulation,

on the other hand, forward time integration of the Liouville equations gives the attracting LCS

and backward time marching provides the repelling LCS.

Algorithm 1: Computing the forward ﬂow map ΦT

0 (x):

1. Discretize the computational domain to get xi, yj, tk.

2. Initialize the level set functions on the last time level t = tN by

Ψ1(xi, yj, tk) = xi

Ψ2(xi, yj, tk) = yj .

3. Solve the Liouville equations for each individual level set function l = 1, 2

∂Ψl
∂t

+ (u · ∇)Ψl = 0

from t = tk down to t = 0 using any well-developed high order numerical methods like

WENO5-TVDRK2 [23, 30, 9] with the boundary conditions

Ψ(x, t)|x∈∂Ω = x
n · ∇Ψl(x, t)|x∈∂Ω = 0

if n · u < 0
if n · u > 0

(6)

(7)

where n is the outward normal of the boundary.

4. Assign ΦT

0 (xi, yj) = Ψ(xi, yj, 0).

9

3 Our proposed approaches

In this section, we introduce two new Eulerian algorithms for ﬂow visualizations. The ﬁrst

algorithm is to improve the numerical method for computing the forward ﬂow map. Instead

of solving the PDE backward in time as in Section 2.2 and [20], we develop an Eulerian PDE

algorithm to construct the forward ﬂow map from t = 0 to the ﬁnal time t = T so that we

do not need to load the time-dependent velocity ﬁeld from the terminal time level backward

to the initial time.

In other words, we construct the forward ﬂow map on the ﬂy. This is

computationally more natural and convenient.

The second Eulerian algorithm can eﬃciently and systematically compute the ISLE ﬁeld.

Typical challenge is that the choice of the separation factor r is in general ﬂow dependent. One

has to vary r to extract the necessary information. Usual Lagrangian methods unfortunately

require shooting diﬀerent sets of initial rays for each individual separation factor r. This is

computationally very ineﬃcient. The proposed Eulerian formulation requires either some simple

interpolations or only one single level surface extraction which can be easily implemented using

any well-developed contour extraction function such as isosurface in MATLAB.

3.1 A forward time marching PDE approach for constructing the forward

ﬂow map

One disadvantage about the previous Eulerian approach for forward ﬂow map computation as

discussed in Section 2.2 and [20, 21, 32] is that the level set equation

∂Ψ(x, t)

∂t

+ (u · ∇)Ψ(x, t) = 0

(8)

has to be ﬁrst solved backward in time from t = T to t = 0. Once we have the ﬁnal solution

at the time level t = 0, one can then identity the ﬂow map ΦT

0 (x) by Ψ(x, 0). This could be

inconvenient especially when we need to access the intermediate forward ﬂow map.

In this

section, we propose a new algorithm to construct the forward ﬂow map on the ﬂy.

Consider the forward ﬂow map from t = 0 to t = T . Suppose the time domain [0, T ] is

discretized by N + 1 discrete points tn, where t0 = 0 and tN = T . Then on each subinterval
[tn, tn+1] for n = 0, 1,··· , N−1, we use the same method as described in Section 2.2 to construct
the forward ﬂow map Φtn+1
In particular, we solve the level set equation (8) backward in

.

tn

time from t = tn+1 to t = tn with the terminal condition Ψ(x, tn+1) = x imposed on the

10

time level t = tn+1. Then the forward ﬂow map is given by Φtn+1
have obtained this one step forward ﬂow map Φtn+1

tn

tn
t = T can be obtained using the composition Φtn+1

, the forward ﬂow map from t = 0 to

= Φtn+1

tn

◦ Φtn

0 . And this can be easily

0

(x) = Ψ(x, tn). Once we

done by typical numerical interpolation methods. To prevent extrapolation, we could enforce

tn ⊆ [xmin, xmax] × [ymin, ymax].
Φtn+1

Here we emphasize that even though we solve equation (8) backward in time for each subin-

terval, we access the velocity ﬁeld data un prior to un+1 and therefore the forward ﬂow map

is indeed obtained on the ﬂy. In particular, if we use the TVD-RK2 method in the temporal

direction [25], we can compute the forward ﬂow map Φtn+1

tn

by

i,j

i,j − Ψn+1
Ψ∗
∆t
i,j − Ψ∗
Ψ∗∗
∆t
Ψn

i,j =

i,j

i,j

i,j

− un+1
− un
1
2

(cid:0)Ψ∗

· ∇Ψn+1
i,j · ∇Ψ∗
i,j + Ψ∗∗

(cid:1)

i,j

= 0

i,j = 0

with the terminal condition Ψn+1

i,j = xi,j. Then the ﬂow map from the time level t = tn to

t = tn+1 is given by Φtn+1

tn

(xi,j) = Ψn

i,j.

It is rather natural to decompose the ﬂow map ΦT

0 into a composition of maps ΦT

0 =

ΦtN

tN−1

◦ ··· ◦ Φt2

t1

◦ Φt1

0 . For example, such idea has been used recently in [5] to improve the

computational eﬃciency of the Lagrangian FTLE construction between various time levels.
Deﬁning the interpolation operator by I, the ﬂow map can be rewritten as ΦtN
◦ ··· ◦
IΦt2
◦Φt2
= IΦtN +1
.
for k = 1,··· , N are all stored once they are computed, one can form Φt1+T
If the maps Φtk+1

0 . Then the ﬂow map Φt1+T

0 = ΦtN
tN−1
◦···◦IΦt3

can be decomposed into Φt1+T

◦IΦt1

tN

t2

t1

t1

t1

t1

t1

tk

by determining only ΦtN +1

tN

. The idea in this work shares some similarities with what we are

implementing. Our approach can also re-use all intermediate ﬂow maps, the work [5] however

has concentrated only on improving the computational eﬃciency of the Lagrangian approach.

We are using the idea of ﬂow map decomposition to propose a forward computational strategy

for the Eulerian formulation.

To obtain a stable evolution in the ﬂow map constructions, theoretically we require the

interpolation scheme between two local ﬂow maps to be monotone, i.e. the interpolation scheme

should preserve the monotonicity of the given data points [21]. This is especially important in

the context of the phase ﬂow maps for autonomous ﬂows [6, 21] since the overshooting due to

11

the interpolation could be signiﬁcantly ampliﬁed in the time doubling strategy

(cid:16)

(cid:17)2

(cid:20)(cid:16)

Φ

t2k
0 =

t2k−1
0

Φ

=

t2k−2
Φ
0

(cid:17)2(cid:21)2

.

3.2 An Eulerian approach to ISLE

In this section, we propose an eﬃcient Eulerian approach to compute the ISLE function for an

arbitrary separation factor r based on the techniques developed in the previous section.

(cid:113)

λτr(x)
0

To compute the ISLE at x, one has to determine the minimum time τr(x) at each location

x for which

(x) = r. It is, therefore, necessary to keep track of all intermediate values

λtn
0 (x) for all n’s during the ﬂow map construction. At each grid point xi,j and each intermediate
time step tn, we construct a quantity stn

0 (xi,j) by

(cid:20)(cid:113)

(cid:21)

stn
0 (xi,j) = max

0 (xi,j), stn−1
λtn

0

(xi,j)

0(xi,j) = 0. Once we determine the ﬂow map ΦtN

with s0
sequence at each grid point xi,j in time {stn

0 (xi,j) : n = 0, 1, . . . , N}, i.e.

0 , we have also constructed an increasing

0 = s0

0(xi,j) ≤ st1

0 (xi,j) ≤ ··· ≤ stN

0 (xi,j)

for each xi,j. Now, we interpret this quantity as a spatial-temporal volumetric data in the x− t
space. Due to such monotonicity property in the temporal direction, the isosurface

forms a graph of x, i.e. for each x we have a unique t∗ = t∗(x) so that st∗(x)
importantly, the value t∗(x) gives the shortest time so that
τr(xi,j) = t∗(xi,j) and so the level surface in the extended phase space, i.e.

λt∗(x)

0

0

(x) = r. And more

(x) = r. This implies that

(cid:110)

(x, t∗) : st∗

0 (x) = r

(cid:111)

(cid:113)

(cid:111)

(cid:110)

(x, τ∗

r (x)) : sτ∗

r (x)
0

(x) = r

,

can be used to deﬁne τr(xi,j). Finally, the ISLE function can then be computed using

γr(xi,j, 0) =

1

|τr(xi,j)| ln r .

12

The computational algorithm is summarized in Algorithm 2.

Algorithm 2 (Our Proposed Eulerian Method for Computing the ISLE):

1. Discretize the computational domain

xi = xmin + (i − 1)∆x, ∆x =
yj = ymin + (j − 1)∆y, ∆y =

xmax − xmin
ymax − ymin

I − 1
J − 1
, n = 0, 1, ..., N .

,

,

tn = n∆t, ∆t =

T
N

2. Set s0

0(x) = 0.

3. For n = 0, 1,··· , N − 1,

i = 1, 2,··· , I,
j = 1, 2,··· , J,

(a) Solve the level set equation (8) for Ψn

i,j with the condition Ψn+1

i,j = (xi, yj).

(b) Deﬁne Φtn+1

tn = Ψn
i,j.

(c) Interpolate the solutions to obtain Φtn+1

0 = Φtn+1

tn

◦ Φtn
0 .

(cid:113)

(d) Compute

λtn+1
0

(xi,j) and determine

stn+1
0

(xi,j) = max

(cid:20)(cid:113)

λtn+1
0

(cid:21)

.

(xi,j), stn

0 (xi,j)

4. Given an arbitrary separation factor r. For each xi,j, search for a time step tn such that

0 (xi,j) ≤ r ≤ stn+1
stn
lation using the values stn

0

0 (xi,j) and stn+1

0

(xi,j).

(xi,j). Then determine τr(xi,j) by applying the piecewise linear interpo-

The ISLE function is computed as

γr(xi,j, 0) =

1

|τr(xi,j)| ln r.

There are several major advantages of the proposed Eulerian approach.

It provides an

eﬃcient yet simple numerical implementation of γr(x, 0) for multiple separation factors r. The

construction of the quantity st

0 can be ﬁrst done in the background. For each particular given

13

value of r, one has to perform only one single isosurface extraction in the extended phase space,
i.e. the x− t space. Unlike the typical Lagrangian implementation where one has to repeatedly
keep track of all particle trajectories for the constraint st

0 = r, the proposed Eulerian algorithm

provides a systematic way based on a simple thresholding strategy.

Remark 3.1. Note that in our implementation, if it happens that stn

0 (xi, yj) < r for all tn, we

simply set γr(xi, yj, 0) = 0.

3.3 Computational complexity

We conclude this section by discussing the computational complexity of our proposed algorithm

for a two dimensional ﬂow, i.e. d = 2. Let N and M be the discretization size of one spatial

dimension and time dimension respectively. Since the Liouville equation is a hyperbolic equa-

tn

tion, we have M = O(N ) by the CFL condition. At each time step tn, a short time ﬂow map
Φtn+1

is obtained by solving the Liouville equations from tn+1 to tn, the computational eﬀort is
◦ Φtn
takes O(N 2) operations. Therefore the construction of ﬂow map at each time step requires

O(N 2). Then in computing the long time ﬂow map Φtn+1

, an interpolation Φtn+1

0 = Φtn+1

tn

0

0

(cid:113)

O(N 2) + O(N 2) = O(N 2) operations. Computing

0 (xi,j) and stn+1
λtn

0

(xi,j) also needs O(N 2)

operations, the complexity order is kept at O(N 2). Summing up this procedure in all time
steps, the overall computational complexity is M · O(N 2) = O(N 3). The proposed algorithm

has kept the optimal complexity of the previous Eulerian approach.

4 A relationship between FTLE and ISLE

The FTLE and the ISLE (or the FSLE) are indeed measuring diﬀerent properties of a given

ﬂow, even though both quantities depend on the same function λt

0(x) which relates the growth

of an inﬁnitesimal perturbation. In particular, FTLE measures how much λt

0(x) grows over a

ﬁnite time span [0, t], while the ISLE measures the time required for the quantity λt

0(x) to reach

a threshold value prescribed by the separation factor. They are two diﬀerent tools to study how

rapid λt

0(x) grows. A careful comparison of these two quantities can be found in, for example,

[26].

In many numerical experiences, on the other hand, numerical experiments suggest that the

FTLE ﬁelds can show striking visual resemblance with the ISLE ﬁelds of certain separation

factors. In this section, we are going to demonstrate how these two quantities relate to each

14

other by considering their corresponding ridges. Of course, the way to deﬁne a ridge is not

unique and one can pick a convenient deﬁnition for a particular application [28, 1].

In this

work, we adapt the following simple deﬁnition.

Deﬁnition 4.1. For a given scalar function f (x), we deﬁne a f -ridge to be a codimension-
one compact and C1 surface, denoted by M, such that for every point x ∈ M, f (x) is a local
maximum along the normal direction to M at x.

At these locations, f (x) is also called a generalized maximum in some literatures. Next, we

deﬁne a particular neighbourhood of a ridge for later discussion.

Deﬁnition 4.2. Suppose S is a codimension-one, compact and smooth surface. We deﬁne
ΓS(ρ), the tubular neighbourhood of S with radius ρ > 0, as the collection of any point y that
can be uniquely expressed as x + snx, for some point x ∈ S, a real number s ∈ (−ρ, ρ), and nx
is an unit normal vector of S at x.

Remark 4.1. To ensure that any point y on ΓS(ρ) can be uniquely expressed as such, one can

equivalently require that the boundary of ΓS(ρ) does not intersect itself. For a smooth surface,

this can always be guaranteed by choosing a small enough positive number ρ.

The deﬁnitions of both the FTLE and the ISLE involve λt

0(x). It is therefore natural to

link them through this particular quantity. The following simple proposition which identiﬁes

the σt

0-ridges with the λt

0-ridges, will be the very ﬁrst step in building up our analysis.

Proposition 4.1. Let σt

0 and λt

0 be the FTLE function and the largest eigenvalue of the Cauchy-

Green deformation tensor from time 0 to time t, respectively. Then, a σt

0-ridge is also a λt

0-ridge.

Proof. Since (2|t|)−1 is a just a scaling factor and the natural logarithm function is strictly
increasing, all generalized maxima of σt

0 as deﬁned in (2) and λt

0 coincide.

For convenience, we impose γr(x, 0) = 0 whenever τr(x) = ∞.

If an ISLE function
γr(x, 0) ≡ 0 on an open set Ω of the spatial domain, there is obviously no visible ISLE feature
on Ω, corresponding to this separation factor r. The following proposition establishes a funda-

mental result that for certain choices of r, the ISLE function γr can be positive on a tubular

neighbourhood of a λt

0-ridge. This explains the non-trivial ISLE features around the location

of a FTLE ridge, when one chooses a suitable separation factor r.

15

Proposition 4.2. Let λt

from time 0 to time t. Suppose λt

0 be the largest eigenvalue of the Cauchy-Green deformation tensor
0 is continuous everywhere in the spatial domain, and M is
0(x) > 0. Then for any positive number r ∈ (0, m), there is a

(cid:112)λt

a λt

0-ridge with m = min
x∈M

continuity of λt

tubular neighbourhood ΓM(ρ) such that the ISLE function is positive on ΓM(ρ).

Proof. For each x ∈ M, using the deﬁnition of m, we have (cid:112)λt
(cid:112)λt

0(x) ≥ m > r. Then by the
0 at x, we can ﬁnd an open ball B(x, ρx) with center x and radius ρx such that
0(y) ≥ r for all y ∈ B(x, ρx). Collect all these open balls at every point on M into F,
which is clearly an open cover of M. By the compactness of M, we can ﬁnd a ﬁnite subcover
F(cid:48) = {B(x1, ρx1), . . . , B(xn, ρxn)} from F. Take ρ = min
1≤i≤n
assume ρ is small enough such that the tubular neighbourhood ΓM(ρ) is contained in the union
0(y) ≥ r. By the Intermediate
0(y) must have reached r at some τ = τr(y) ∈ (0, t].

of sets in F(cid:48). Now for any y ∈ ΓM(ρ), it is clear that (cid:112)λt
Value Theorem, the function Λ(τ ) :=(cid:112)λτ

ρxi. Without loss of generality,

Therefore γr(y, 0) is positive.

The next proposition is to identify a λt

0-ridge with a γr-ridge of a certain ISLE function γr.

To justify the condition, the points on the location of a λt

0-ridge, are expected to exhibit highly

chaotic behavior. It is reasonable to assume that we can ﬁnd a tubular neighbourhood of a
0 holds for τ ∈ [0, t], and that no other points reach

λt
0-ridge, where the time monotonicity of λτ
the minimum value of λ0, except those on M.

Proposition 4.3. Let λt
from time 0 to time t. Suppose M is a λt
tubular neighbourhood ΓM(ρ) of M such that

0 be the largest eigenvalue of the Cauchy-Green deformation tensor

0-ridge with m = min
x∈M

0(x) > 0. If there exists a

(cid:112)λt

1. for any ﬁxed y ∈ ΓM(ρ), the quantity λτ

0(y) is increasing in τ ∈ [0, t], and

2. {x ∈ ΓM(ρ) : λt

0(x) ≥ m2} = M,

then M is also a γm-ridge for the ISLE function γm.

second condition, we have(cid:112)λt
(cid:112)λτ

Proof. Let x ∈ M, and y ∈ ΓM(ρ)−{x} be a point in the normal direction of M at x. By the
0(y) is increasing with τ , it follows that
0(y) < m for τ ∈ [0, t]. Therefore γm(y, 0) = 0 by our convention. We can conclude that no
other points on the normal direction of M at x has positive value of γm, except x itself. This
makes x a generalized maximum of γm.

0(y) < m. And since λτ

16

Proposition 4.3 is a restricted result, in the sense that the whole λt

0-ridge is preserved for a

particular γr function. But it is straightforward to extend it to the following corollary, which

looks for a certain portion of a λt

0-ridge that can be conserved in a larger class of ISLE functions.

Corollary 4.1. Let λt
time 0 to time t. Suppose M is a λt
subset of M with m(cid:48) = min
x∈M(cid:48)
a tubular neighbourhood ΓM(cid:48)(ρ) of M(cid:48) such that

0 be the largest eigenvalue of the Cauchy-Green deformation tensor from
0(x) > 0, and M(cid:48) is a connected
0(x) > 0. For any positive number r ∈ [m, m(cid:48)], if there exists

0-ridge with m = min
x∈M

(cid:112)λt

(cid:112)λt

1. for any ﬁxed y ∈ ΓM(cid:48)(ρ), the quantity λτ

0(y) is increasing in τ ∈ [0, t], and

2. {x ∈ ΓM(cid:48)(ρ) : λt

0(x) ≥ r2} = M(cid:48),

then M(cid:48) is a γr-ridge for the ISLE function γr.

Proof. The proof is parallel to that of Proposition 4.3, with M and m being substituted by M(cid:48)

and r, respectively.

Through Proposition 4.2 to Corollary 4.1, we have obtained a close relationship between

the λt

0-ridges and the ISLE ridges. By the equivalence of the FTLE ridges and the λt

0-ridges as

proved in Proposition 4.1, we can then link the FTLE ridges and the ISLE ridges. In practice,

the estimated location of the ISLE ridges can be inferred by the location of the FTLE ridges,

while λt
0 plays an important role for estimating a suitable separation factor deﬁned in the ISLE
ridge. To demonstrate this, suppose that there is a FTLE ridge M satisfying all conditions
in Proposition 4.3. Then M is an ISLE ridge with the separation factor m = min
x∈M

(cid:112)λt

0(x).

Although the value of m is actually an unknown, we can determine a number l that is slightly

less than min

x∈M σt

0(x) manually. From the deﬁnition of the FTLE, we have

(cid:113)

(cid:20)

(cid:21)

m = min
x∈M

λt
0(x) = exp

x∈M σt
t min

0(x)

> elt .

Now, with any separation factor r ∈ [elt, m), Proposition 4.2 implies that there is a tubular
neighborhood around M with positive ISLE values. We can then increase the separation factor
from elt approaching to m, so that the tubular neighborhood containing M becomes narrower,
and thus leads to a better approximation of M.

17

5 Numerical examples

5.1 The double gyre ﬂow

This example is taken from [29] to describe a periodically varying double-gyre. The ﬂow is

modeled by the following stream-function

where

ψ(x, y, t) = A sin[πg(x, t)] sin(πy) ,

g(x, t) = a(t)x2 + b(t)x ,

a(t) =  sin(ωt) ,
b(t) = 1 − 2 sin(ωt) .

In this example, we follow [29] and use A = 0.1, ω = 2π/10. We discretize the domain
[0, 2]× [0, 1] using 513 grid points in the x-direction and 257 grid points in the y-direction. This

gives ∆x = ∆y = 1/256.

In Figure 2, we compare the FTLE ﬁeld σ10

0 (x) of the double-gyre ﬂow with  = 0.1 computed

using the Lagrangian approach and our proposed Eulerian approach, respectively. These two

solutions match extremely well.

Figures 3 shows the ISLE ﬁelds γr(x, 0) with several separation factors r. In the implemen-

tations, the ﬂow map is computed from t = 0 up to t = 10. Recall that we impose zero ISLE

value at points whose local separation rate is less than the given separation factor. With the

increasing separation factor, the regions with non-zero ISLE values, get smaller. Nevertheless,

the regions with non-zero or high ISLE values, always concentrate near the location of the
FTLE ridges shown in Figure 2. We denote by M the most prominent ridge originating from

the central bottom of the domain. Note that a rough estimate of the minimum FTLE value on
0(x) ≥ e0.3×10 = e3 > 20. Using
M is approximately 0.3. And so we have the estimate min
x∈M
Proposition 4.2, we can always ﬁnd a tubular neighborhood near M of non-zero ISLE using a

(cid:112)λt

separation factor r smaller than approximately 20. In Figure 3, we have computed the ISLE

using various separation factors from r = 3 to r = 20. As r increases, we can see that there are
indeed non-zero ISLE regions around the major ridge M. And evidently, the ISLE ridges lie

18

(a)

(b)

Figure 2: (Section 5.1) The FTLE ﬁeld σ10
and (b) our proposed Eulerian approach.

0 (x) computed using (a) the Lagrangian approach

within these regions.

To better compare the FTLE ﬁeld and the ISLE ﬁeld, we plot these two solutions together

in Figure 4. The x- and the y- axis represent the computational domain Ω while the z axis

denotes the temporal direction. In (a), we plot the FTLE ﬁeld σ10/3

0

(x) at t = 10/3 and σ20/3

0

(x)

at t = 20/3.

In (b-d), we plot the isosurfaces of the ISLE ﬁeld λr(x, 0) with r = 1.5, 3, 4,

respectively. The z-values denote the time required for the local separation ratio to achieve r

for the ﬁrst time, i.e. the z-values are the τr(x) we deﬁned before. Near the major FTLE ridge,

we can see the values of τr(x) are signiﬁcantly lower than the remaining part of the domain.

Therefore the corresponding ISLE values are generalized maxima. This shows us the ISLE

ridges match with the FTLE ridges very well.

5.2 A simple analytic ﬁeld

We consider a simple analytical ﬁeld [31] given by u = x − y2 and v = −y + x2 in this example.
The computational domain is [−6, 6]2 and we discretize the domain with ∆x = ∆y = 12/256.

19

(a)

(b)

(c)

Figure 3: (Section 5.1) The ISLE ﬁelds γr(x, 0) computed using our proposed Eulerian approach
with (a) r = 3, (b) r = 10 and (c) r = 20. It is clear that the FTLE ridges in Figure 2 are
located inside some narrow regions of the ISLE ridges.

(a)

(b)

(c)

(d)

Figure 4: (Section 5.1 with  = 0.1) (a) The FTLE ﬁeld σt
of the ISLE ﬁeld γr(x, 0) with (b) r=1.5, (c) r=3 and (d) r=4.

0 for t = 10

3 and t = 20

3 . The isosurfaces

We impose the ﬁxed inﬂow boundary condition and non-reﬂective outﬂow boundary condition

as in [20]. Figure 5 shows the FTLE ﬁeld σ5

0(x) computed using our original Eulerian approach

and the proposed Eulerian approach. It is clear that the new approach can successfully handle

20

(a)

(b)

Figure 5: (Section 5.2) The FTLE ﬁeld σ5
and (b) our proposed Eulerian approach.

0(x) computed using (a) the original Eulerian approach

the inﬂow and outﬂow of particles on the boundaries, just like the previous approach does. Next,

we are going to apply the results in Section 4 to analyze the ISLE ridges. Figure 5 suggests

that there is only one FTLE ridge. And the minimum value of σ5

0 on the ridge is close to 0.8.

By the deﬁnition of FTLE, we have(cid:113)

λ5

0(x) = exp(cid:2)σ5

0(x) × 5(cid:3) .

Therefore we can conclude that e0.8×5 = e4 is a reasonable estimate of the minimum value of

(cid:112)λ5

0(x) on the ridge. We have tested with several separation factors that are near e4, and

the results can be plotted in Figure 6. To better visualize the ISLE ﬁeld, we plot in Figure 7

the time τr(x) required for diﬀerent separation factors r. The shorter the time, the bigger the

corresponding ISLE.

5.3 The forced-damped Duﬃng van der Pol equation

We consider the dynamical system governed by a Duﬃng and a van der Pol oscillator, as in

[13]. The system is given by

u = y , v = x − x3 + 0.5y(1 − x2) + 0.1 sin t .

The computational domain is [−2, 2] × [−1.5, 1.5], with mesh size ∆x = ∆y = 0.01. We

simulate the ﬂow from t = 0 to t = 10. The discretization size is rather coarse for such

a complicated dynamics, but our new approach can still demonstrate the ﬁne details of the

transport barrier as shown in Figure 8. There are several major FTLE ridges that are easily

21

(a)

(b)

(c)

Figure 6: (Section 5.2) The outline of the ISLE ridge becomes clearer with increasing the
separation factor around e4.

0(x) ≥
spotted. The minimum value of σt
e0.4×10 = e4. Proposition 4.2 implies that the separation factor r = e4 can approximately single

0(x) on those FTLE ridges are very close to 0.4. So(cid:112)λt

out the ISLE ridges. We pick several separation factors that are close to e4, and we ﬁnd that the

ISLE ridges corresponding to r = e4.1, as shown in Figure 9(c), have the greatest resemblance

to the FTLE ridges in Figure 8.

22

(a)

(b)

(c)

(d)

Figure 7: (Section 5.2) The isosurfaces of the ISLE ﬁeld γr(x, 0) with (a) r=1, (b) r=2, (c) r=3
and (d) r=4.

Figure 8: (Section 5.3) The FTLE ﬁeld σ10
For better comparison with the ISLE in Figure 9, we replace negative FTLE values by 0.

0 (x) computed using our proposed Eulerian approach.

Acknowledgment

The work of You was supported by the Talents Introduction Project of Nanjing Audit University

and the work of Leung was supported in part by the Hong Kong RGC.

23

(a)

(b)

(c)

Figure 9: (Section 5.3) The ISLE ﬁeld γr(x) computed using our proposed Eulerian approach
with (a) r = e3, (b) r = e4 and (c) r = e4.1. For r = e4.1, the ISLE ridges coincide with FTLE
ridges in the Figure 8.

References

[1] M.R. Allshouse and T. Peacock. Reﬁning ﬁnite-time Lyapunov exponent ridges and the

challenges of classifying them. Chaos, 25:087410, 2015.

[2] V. Artale, G. Boﬀetta, A. Celani, M. Cencini, and A. Vulpiani. Dispersion of passive tracers

in closed basins: Beyond the diﬀusion coeﬃcient. Phys. Fluids, 9(11):3162–3171, 1997.

[3] E. Aurell, G. Boﬀetta, A. Crisanti, G. Paladin, and A. Vulpiani. Predictability in the large:

an extension of the concept of lyapunov exponent. J. Phys. A: Math. Gen., 30:1–26, 1997.

[4] G. Boﬀetta, G. Lacorata, G. Redaelli, and A. Vulpiani. Detecting barriers to transport: a

review of diﬀerent techniques. Physica D, 159(58-70), 2001.

24

[5] S.L. Brunton and C.W. Rowley. Fast computation of ﬁnite-time Lyapunov exponent ﬁelds

for unsteady ﬂows. Chaos, 20:017503, 2010.

[6] E.J. Cand`es and L. Ying. Fast geodesics computation with the phase ﬂow method. J.

Comput. Phys., 220:6–18, 2006.

[7] M. Cencini and A. Vulpiani. Finite size Lyapunov exponent: review on applications. J.

Phys. A: Math. Theor., 46:254019, 2013.

[8] C. Garth, F. Gerhardt, X. Tricoche, and H. Hagen. Eﬃcient computation and visualization

of coherent structures in ﬂuid ﬂow applications. IEEE Transactions on Visualization and

Computer Graphics, 13:1464–1471, 2007.

[9] S. Gottlieb and C.-W. Shu. Total variation diminishing Runge-Kutta schemes. Mathematics

of Computation, 67:73–85, 1998.

[10] G. Haller. Distinguished material surfaces and coherent structures in three-dimensional

ﬂuid ﬂows. Physica D, 149:248–277, 2001.

[11] G. Haller. Lagrangian structures and the rate of strain in a partition of two-dimensional

turbulence. Phys. Fluids A, 13:3368–3385, 2001.

[12] G. Haller. A variational theory of hyperbolic Lagrangian Coherent Structure. Physica D,

240:574–598, 2011.

[13] G. Haller and T. Sapsis. Lagrangian coherent structures and the smallest ﬁnite-time Lya-

punov exponent. Chaos, 21, 2011.

[14] G. Haller and G. Yuan. Lagrangian coherent structures and mixing in two-dimensional

turbulence. Physica D, 147:352–370, 2000.

[15] I. Hermandez-Carrasco, C. Lopex, E. Hernansez-Garcia, and A. Turiel. How reliable are

ﬁnite-size lyapunov exponents for the assessment of ocean dynamics? Ocean Modelling,

36(3-4):208–218, 2011.

[16] D. Karrasch and G. Haller. Do ﬁnite-size Lynapunov exponents detect coherent structures?

Chaos, 2013.

[17] F. Lekien and S.D. Ross. The computation of ﬁnite-time Lyapunov exponents on unstruc-

tured meshes and for non-Euclidean manifolds. Chaos, 20:017505, 2010.

25

[18] F. Lekien, S.C. Shadden, and J.E. Marsden. Lagrangian coherent structures in n-

dimensional systems. Journal of Mathematical Physics, 48:065404, 2007.

[19] T. Letz and H. Kantz. Characterization of sensitivity to ﬁnite perturbations. Phys. Rev.

E., 61:2533, 2000.

[20] S. Leung. An Eulerian approach for computing the ﬁnite time Lyapunov exponent. J.

Comput. Phys., 230:3500–3524, 2011.

[21] S. Leung. A backward phase ﬂow method for the ﬁnite time Lyapunov exponent. Chaos,

23(043132), 2013.

[22] S. Leung and J. Qian. Eulerian Gaussian beams for Schr¨odinger equations in the semi-

classical regime. J. Comput. Phys., 228:2951–2977, 2009.

[23] X. D. Liu, S. J. Osher, and T. Chan. Weighted Essentially NonOscillatory schemes. J.

Comput. Phys., 115:200–212, 1994.

[24] S. J. Osher and J. A. Sethian. Fronts propagating with curvature dependent speed: algo-

rithms based on Hamilton-Jacobi formulations. J. Comput. Phys., 79:12–49, 1988.

[25] S. J. Osher and C. W. Shu. High-order Essentially NonOscillatory schemes for Hamilton-

Jacobi equations. SIAM J. Num. Anal., 28:907–922, 1991.

[26] R. Peikert, A. Pobitzer, F. Sadlo, and B. Schindler. A comparison of ﬁnite-time and ﬁnite-

size Lyapunov exponents. Topological Methods in Data Analysis and Visualization III,

2014.

[27] F. Sadlo and R. Peikert. Eﬃcient visualization of Lagrangian coherent structures by ﬁl-

tered AMR ridge extraction. IEEE Transactions on Visualization and Computer Graphics,

13:1456–1463, 2007.

[28] B. Schindler, R. Peikert, R. Fuchs, and H. Theisel. Ridge concepts for the visualization of

Lagrangian coherent structures. TopoInVis 2011, pages 1–14, 2011.

[29] S.C. Shadden, F. Lekien, and J.E. Marsden. Deﬁnition and properties of Lagrangian co-

herent structures from ﬁnite-time Lyapunov exponents in two-dimensional aperiodic ﬂows.

Physica D, 212:271–304, 2005.

26

[30] C. W. Shu. Essentially non-oscillatory and weighted essentially non-oscillatory schemes for

hyperbolic conservation laws. In B. Cockburn, C. Johnson, C.W. Shu, and E. Tadmor,

editors, Advanced Numerical Approximation of Nonlinear Hyperbolic Equations, volume

1697, pages 325–432. Springer, 1998. Lecture Notes in Mathematics.

[31] W. Tang, P.W. Chan, and G. Haller. Accurate extraction of Lagrangian coherent structures

over ﬁnite domains with application to ﬂight data analysis over Hong Kong international

airport. Chaos, 20:017502, 2010.

[32] G. You and S. Leung. An Eulerian method for computing the coherent ergodic partition

of continuous dynamical systems. J. Comp. Phys., 264:112–132, 2014.

[33] G. You and S. Leung. VIALS: An Eulerian tool based on total variation and the level set

method for studying dynamical systems. J. Comp. Phys., 266:139–160, 2014.

27

