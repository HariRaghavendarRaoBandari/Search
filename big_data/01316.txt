6
1
0
2

 
r
a

M
4

 

 
 
]
F
P
.
s
c
[
 
 

1
v
6
1
3
1
0

.

3
0
6
1
:
v
i
X
r
a

Performance Assessment of WhatsApp and IMO on
Android Operating System (Lollipop and KitKat)

during VoIP calls using 3G or WiFi

R.C. de Oliveira1, H.M. de Oliveira2, R.A. Ramalho and L.P.S. Viana3

1 Computer Engineering – Amazon State University (UEA)

Manaus, AM – Brazil

2Statistics Department – Federal University of Pernambuco (UFPE)

Recife, PE – Brazil

3Escola Superior de Tecnologia, Amazon State University (UEA)

Manaus, AM – Brazil

rcoliveira@uea.edu.br, {ronaldorar,lohana.anaiv}@gmail.com

http://arxiv.org/a/deoliveira_h_1.html

Abstract. This paper assesses the performance of mobile messaging and VoIP
connections. We investigate the CPU requirements of WhatsApp and IMO under
different scenarios. This analysis also enabled a comparison of the performance
of these applications on two Android operating system (OS) versions: KitKat or
Lollipop. Two models of smartphones were considered, viz. Galaxy Note 4 and
Galaxy S4. The applications behavior was statistically investigated for both
sending and receiving VoIP calls. Connections have been examined over 3G
and WiFi. The handset model plays a decisive role in CPU requirements of the
application. t-tests showed that IMO has a statistical better performance that
WhatsApp whatever be the Android at a signiﬁcance level 1%, on Galaxy Note 4.
In contrast, WhatsApp requires less CPU than IMO on Galaxy S4 whatever be
the OS and access (3G/WiFi). Galaxy Note 4 using WiFi always outperformed
S4 in terms of processing efﬁciency.

1. Introduction
Instant messaging and VoIP (voice over IP) for mobile phones are growing importance in
the contemporary society. Instant messaging (IM) is a set of communication technologies
used for text-based communication between two or more participants usually over the
Internet [2], [8].
In particular, IM for mobile phones is becoming a worldwide fever
[12], [1], [10]. In performance evaluation of electronic devices is commonplace to build
a base for comparison (baseline, [4]). Usually this database is constructed by applying
tools that collect performance metrics (e.g. CPU, disk, memory and network statistics).
Through such a baseline, the analyst can pinpoint where the drawbacks are, and carry
out performance adjustments so as to improve the throughput of a given application. The
choice of performance metrics, how performing the data collection, and data analysis are
common steps of performance evaluation. We conducted a performance assessment of the
WhatsApp as compared with the performance of IMO through 3G and Wiﬁ, on different
Android operating systems [15], [5]. The performance of such applications remains still

rather unexplored both from the theoretical viewpoint as well as in academia. See [3] for
a comparison between WhatsApp and standard SMS.

2. Materials and Methods
The analysis delimited in this study is just VoIP on smartphones. The analysis carried out
in this study is limited to monitoring the processing when instant messaging or voice call
applications. The universe of study of this investigation is characterized by the scope of
mobile devices operation. The ﬁeld of study covered the transmission by wireless LAN
(WiFi) or 3G networks [14]. It was not taken into account the coding, nor programming
logic or source code of applications. The Android OS is a multitasking operating system
for for mobile devices, including smartphones and tablets, which have different versions
[9], [5]. The main purpose is the analysis of cross-platform instant messaging for smart-
phones, viz. WhatsApp and IMO, with versions of Android, KitKat and Lollipop. For
the present experiment we used an analysis tool, measurement techniques and statisti-
cal methods. The scope of the study was carefully designed to avoid interference from
outside or assumptions that were not linked to the analysis. Moreover, for the proper
“background collecting” of logs on mobile applications is essential to select software that
is able to perform the performance data capture. Sampling tests were performed by select-
ing an appropriate tool to collect speciﬁc logs. Our choice fell upon the Little Eye and
thereafter it was possible to analyze the resources and ways processing [7]. Test devices
were Samsung Galaxy S4 (S4) and Samsung Galaxy Note 4 (N4), both with different
hardware and which have been installed Android. To build the environment, it was also
required to install and conﬁgure a wireless network as well as the availability of carrier
chip with 3G transmission. The tests involved the following steps: (i) Install the OS on
the test device; (ii) Set up, install and operate software for testing; (iii) Set up, install
and operate application software; (iv) Perform the collection of logs; (v) Handling the
collected data; (vi) statistically analyze the data collected. “Little Eye” is a performance
analysis and monitoring tool that can help to identify and ﬁx bug in an application with
Android versions from 2.3 [7]. It is a tool that supports metrics related to CPU, network
resources, RAM, disk space, GPS and battery consumption. Its main features are:

each feature used the device generating detailed statistics for each resource;

• Measure: measuring the performance of applications gathering information about
• Analyze: It brings information about the background of the data collected creating
• Optimize: Suggest improvements in resource consumption by optimizing the op-

graphs and statistics for analysis;

erating system.

For tool installation the following requirements is necessary:

Java JRE or SDK - V 1.6 + (Java 6 or higher) and Android SDK;
USB debugging is enabled on the phone;
Set the device to connect to as “camera (PTP)” rather than “media device

(MTP)”;

Test device drivers are required when using Windows OS.

With everything set (hardware and software environments), Little Eye starts. Once started,
it loads applications under test on the device. After listing all applications, simply select
the application to be tested (WhatsApp or IMO), and then conﬁgure the measurements of
interest, as illustrated in the following screen (Fig. 1).

Figure 1. Data Collection Interface in Little Eye (Source: Little Eye).

CASE STUDY: The application under test is monitored with VoIP call duration of 1
minute, 5 minutes and 10 minutes. Data were collected during these periods. In a prelim-
inary analysis, 30 calls with WhatsApp and IMO were refereed. The same test environ-
ment is applied to both Android KitKat (KK) and Lollipop (LL) systems, i.e., the same
test conditions and analysis are adhered so there is no bias in results. Standard hypothesis
tests were conducted to ascertain a performance difference between IMO and WhatsApp
applications. Two-tailed t-test for the population mean of IMO under a cornucopia of
scenarios. Let µ be the mean of CPU requirements of the application during a 10 minutes
VoIP call (mode sending or receiving). The statistical hypothesis at 1% signiﬁcance level
(α = 0.01) were:

null − hypothesis H0 : µIM O = µW hatsapp
alternative − hypothesis H1 : µIM O (cid:54)= µW hatsapp.

(1)

Also, left-tailed t-test showed evidence that IMO performance was higher than What-
sApp. Bean plot is also used to visualize performance data http://boxplot.
tyerslab.com/.

(a) smartphone (Galaxy Note 4), OS (KitKat),
transmission medium (3G)

(b) smartphone (Galaxy Note 4), OS (KitKat),
transmission medium (WiFi)

Figure 2. VoIP connection 10 minutes (WhatsApp / IMO), with smartphone
transmitting messages.

3. Performance of WHATSAPP and IMO

Data collection was conducted using the Little Eye software as application performance
analysis tool [7]. In this software, it is possible to collect smartphone application logs
and analyze the processing consumption. This tool has a number of resources available
to perform the analysis of applications, ranging from battery consumption to processing
overhead. In these experiments, however, the scope has been narrowed to the study of be-
havior around the CPU. The test was carried out by collecting 30 calls lasting 10 minutes
and the logs generated took the average for all sampling measures. These graphs show
the applications are processed for use in receiving (also transmitting) a VoIP call through
WhatsApp and the IMO using a WiFi connection as communication in both versions of
Android [15]. Figure 2, illustrates two instances of selected CPU requirements measures
for achieving 30 calls, lasting 10 minutes. Each point is the average calculated from 30
samples. All correlations between performances in different scenarios were calculated:
Higher performance correlations were obtained for the handset Galaxy S4 than for the
Galaxy Note 4. The highest correlation coefﬁcient among all tested scenarios was ob-
tained for the Galaxy S4 with WhatsApp for transmitting/receiving text messages. Even
requiring a memory load of roughly twice, the wiﬁ operation under the android LL had a
similar behavior to a 3G transmission with the android version KK. For WhatsApp using
the KitKat OS, the smartphone Galaxy S4 presented some correlation between 3G and
wiﬁ. The KK android version yielded performance results not so sensitive to the selected
network (3G or wiﬁ operation) and their memory requirements were pretty close. Still
handling with WhatsApp on the device S4 operating on WiFi, there is a performance cor-
relation between the two android OS version, but the KK performance is roughly twice
more efﬁcient than the operation with LL. Considering now the IMO application, in the
3G operation under Galaxy S4 smartphone, the general performance behavior is weakly
sensitive to the selected version of the android system. Nevertheless, the performance
of KK OS was approximately twofold more efﬁcient than LL, as concerning 3G trans-
mission. In contrast, the lowest correlation coefﬁcient was found for KitKat in the two
handset models, where the WhatsApp and IMO application performance for 3G calling
were non correlated. Low correlations were also achieved for 3G connections on the
smartphone Galaxy Note 4: the performance for KitKat and Lollipop were also uncorre-
lated.

Table 1. Average CPU requirements for different scenarios. Smartphone
Galaxy Models: N4 and S4. The calls were all made lasting 10 minutes. In
each case, they were considered N = 30 samples (each is an average ob-
tained from 600 measurements). Values in parenthesis refer to the sample
standard deviation. Signiﬁcance level of t-test: α = 0.01

.

3G

handset WApp
Galaxy N4 15.97a
(0.48)
10.15a
(1.64)

Galaxy S4

3G

KitKat
IMO WApp
15.64a
7.66b
(0.56)
(0.10)
23.69a
20.67b
(0.52)
(0.68)

Lollipop WiFi KitKat WiFi
IMO WApp
16.18a
8.68a
(3.84)
(1.00)
18.74a
19.90b
(0.57)
(7.80)

IMO WApp
7.40a
6.51b
(0.29)
(1.80)
11.87a
34.25b
(3.07)
(1.11)

Lollipop

IMO
8.42b
(0.44)
46.78b
(1.19)

Figure 3. Beanplot of CPU requirements for the following scenario: An-
droid OS KitKat, mobile device Samsung Galaxy Note 4 and transmitting
calls mode. For 3G operating mode: a) Whatsapp and b) Imo. For WiFi
operating mode: c) Whatsapp and d) IMO.

It was observed that a few speciﬁc moment, the processing occupation reached to zero.
Sometimes this is expressed by display off (device screen hibernated,) it reduced the ker-
nel processing consumption. It was noticed that the tester there are three or more CPUs
and the WhatsApp test has shown the using of a single CPU. This led to the idea that
some features of the devices were being processed by other CPUs. In some cases it was
perceived that the application falls under Lollipop, but it is emphasized that troubles may
have occurred during the collection of logs. An example is the Internet itself, both 3G
and WiFi, communication tool with the device or operating failures. In the beanplot (a
variant of Tukey boxplot) shown in Fig. 3, one can see the behavior of CPU requirements
for measurements comparing the transmission medium (3G × WiFi) for WhatsApp and
IMO. For 3G, a marked performance difference is observed between Whatsapp and IMO
in the Samsung Note 4, showing a superior performance of IMO. In contrast, under WiFi,
these differences are not so remarkable. Table 1 (tx) and 2 (rx) present the statistics of av-
erage CPU requirements obtained in the pairwise measurements in order to compare the
performance of WhatsApp and IMO. A marking with different letters (e.g. a and b) indi-
cates that the average CPU requirements were different at a signiﬁcance level of 1% (so
the hypothesis H0 can be rejected). A pairwise comparison with the same letter (a and a)
indicates that the null hypothesis cannot be discarded at 1%, i.e. there is no statistical ev-
idence of performance difference between the two compared scenarios. In the ﬁrst table,
only the operating system version is changed (KitKat × Lollipop). In the second one, it is
varied just the transmission medium (3G × WiFi). Null hypothesis (Eqn. (1)) is rejected
at 1% signiﬁcance level in all cases, but {KK,N4,wiﬁ} where the performance of the IMO
and WhatsApp is statistically indistinguishable (t=1.826, p-value=0.078). p-values were
p < 10−5 in most cases. Also, left-tailed test have shown evidence to accept the hypothe-
sis µIM O < µW hatsApp (or µW hatsApp < µIM O). t-tests on Galaxy Note 4 have shown that
IMO app has a statistical better performance that WhatsApp whatever the Android, at a
signiﬁcance level 1%. In contrast, WhatsApp requires less CPU than IMO on Galaxy S4
at the same signiﬁcance level, whatever the OS and the access network (3G/Wiﬁ). Finally,
Galaxy Note 4 using WiFi outperforms Galaxy S4 in terms of processing.

Table 2. Average CPU requirements for different scenarios. Smartphone
Galaxy Models: N4 and S4. Receiving message calls lasting 10 minutes.
In each case, they were considered N = 30 samples (each is an average
obtained from 600 measurements). Values in parenthesis refer to the sam-
ple standard deviation. Signiﬁcance level of t-test: α = 0.01

3G

handset WApp
Galaxy N4 15.81a
(1.20)
11.57a
(1.50)

Galaxy S4

3G

KitKat
IMO WApp
15.86a
7.90b
(1.06)
(0.10)
23.41a
19.75b
(0.25)
(0.49)

Lollipop WiFi KitKat WiFi
IMO WApp
15.37a
6.43a
(0.19)
(1.04)
22.17a
19.89b
(0.30)
(2.18)

IMO WApp
7.22a
8.13b
(0.29)
(0.47)
10.61a
34.92b
(2.68)
(1.20)

Lollipop

IMO
8.33b
(0.55)
31.85b
(5.76)

4. Conclusions

There is a marked increase in processing engendered by the version Lollipop as com-
pared to the KitKat version. However, both on WiFi and 3G connections, there is
insufﬁcient data here to unveil the very reason, but we know that changes made to the
KitKat to Lollipop are focused on managing resources, such as energy consumption [13].
Based on the results we can say that the operating system indirectly affects in the re-
sponse in terms of CPU processing, although it may not be decisive. When comparing
the same operating system on different chipsets we realize that the application the way
it was developed directly contributes to the device performance. This claim comes from
the realization that IMO on Galaxy S4 requires more CPU than WhatsApp, but on the
other hand, this does not occur in the Galaxy Note 4. It is also observed that WiFi un-
der Galaxy Note 4 has better performance than the Galaxy S4 in terms of processing,
for both operating systems.
It is quite likely to happen due to the CPU management,
since each chip has its own managing way. In the 3G scenario, more CPU is required
in both IMO and WhatsApp. It is assumed that the chipset combination, application de-
velopment, Android OS and the network technology (WiFi/3G) is crucial in the CPU
performance. The total processing using this application be given by the sum of CPU
usage by the user (application) and CPU usage by the kernel generated by the applica-
tion itself. Nevertheless, ﬁndings suggest the need for a more speciﬁc analysis from the
perspective of resources exploited by each application. Ascertain the impact of energy
consumption with the device update to the Android Lollipop version should also be care-
fully examined, since it is one of the notes issued for this release. It is so recommended
as future research a deep investigation on energy consumption [11], [6] achieved with
the device to update the version Lollipop. (http://cs.gmu.edu/˜astavrou/research/
Android_Power_Measurements_Analysis_SERE_12.pdf ). Applications should have
the chipset/OS as a key observance with a view on battery consumption.

Acknowledgment

The authors thank to Samsung Ocean, Manaus, by valuable hardware support as well as
to its general coordinator, Prof. Antenor Ferreira Filho for many interesting suggestions.

References

[1] Butler, M. Android: Changing the Mobile Landscape,

IEEE Pervasive Computing,

vol.10, no.1, pp.4-7, Jan.-March 2011. doi: 10.1109/MPRV.2011.1

[2] Cherry, S. M. Talk is cheap; text is cheaper [mobile messaging], IEEE Spectrum, vol.39,

no.5, pp.55, May 2002. doi: 10.1109/6.999798

[3] Church, K. and de Oliveira, R. What’s up with whatsapp?: comparing mobile instant
messaging behaviors with traditional SMS. Proceedings of the 15th international
conference on Human-computer interaction with mobile devices and services. ACM,
2013. doi: 10.1145/2493190.2493225

[4] Ghosh, A., Zhang, J., Andrews, J. G. and Muhamed, R. Fundamentals of LTE. Pearson

Education, 2010.

[5] Google Inc., Android, the world’s most popular mobile platform, [Online]. Available:
http://developer.android.com/about/index.html. [Accessed 29
February 2016].

[6] Kundu, T. K. and Kolin, P. Improving Android Performance and energy efﬁciency, IEEE
24th International Conference on VLSI Design, (VLSI Design),pp. 256-261, 2011.
doi: 10.1109/VLSID.2011.63

[7] Little Eye Labs, Performance Analysis and Monitoring Tools for Android Developers,
[Online]. Available: http://www.littleeye.co/. [Accessed 29 February
2016].

[8] Mattsson, V. Instant Messaging in Mobile Phones: Changes in the user interface to en-

hance the user experience, Master Thesis, Stockholm, 61p., Sweden, 2006.

[9] Mehrotra, P., Pradhan, T. and Jain, P. Instant Messaging Service on Android Smartphones
International Journal of Information and Computation

and Personal Computers.
Technology. v. 4, p. 265-272, 2014.

[10] Montag, C., Blaszkiewicz, K., Sariyska, R., Lachmann, B., Andone, I., Trendaﬁlov, B ...
and Markowetz, A. Smartphone usage in the 21st Century: who is active on What-
sApp? BMC research notes, 8(1), pp. 331. 2015. doi: 10.1186/s13104-015-1280-z

[11] Murmuria, R., Medsger, J., Stavrou, A. and Voas, J. M. Mobile application and device
power usage measurements. IEEE Sixth International Conference on Software Se-
curity and Reliability (SERE), pp. 147-156, 2012. doi: 10.1109/SERE.2012.19

[12] O’Hara, K., Kenton, P. et al. Everyday dwelling with WhatsApp. Proceedings of the
17th ACM conference on Computer supported cooperative work & social comput-
ing. ACM, 2014. doi: 10.1145/2531602.2531679

[13] Saksonov, A. Method to Derive Energy Proﬁles for Android Platform. University of Old-

enburg, 2014.

[14] Tanenbaum, A. S. and David, J. W. Computer Network, Pearson, ISBN: 978-0132126953,

2011.

the Why

and What

of Android

[15] Understanding
Available
understanding-the-why-and-what-of-android-performance/
index.html [Accessed 29 February 2016].

[Online]
http://www.littleeye.co/blog/2013/05/28/

Performance.

