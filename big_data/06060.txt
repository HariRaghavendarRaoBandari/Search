DASA: Domain Adaptation in Stacked Autoencoders using Systematic Dropout

Department of Electrical Engineering, Indian Institute of Technology Kharagpur, India

Abhijit Guha Roy and Debdoot Sheet

abhi4ssj@gmail.com, debdoot@ee.iitkgp.ernet.in

6
1
0
2

 
r
a

 

M
9
1

 
 
]

V
C
.
s
c
[
 
 

1
v
0
6
0
6
0

.

3
0
6
1
:
v
i
X
r
a

Abstract

Domain adaptation deals with adapting behaviour of
machine learning based systems trained using samples in
source domain to their deployment in target domain where
the statistics of samples in both domains are dissimilar. The
task of directly training or adapting a learner in the target
domain is challenged by lack of abundant labeled samples.
In this paper we propose a technique for domain adaptation
in stacked autoencoder (SAE) based deep neural networks
(DNN) performed in two stages: (i) unsupervised weight
adaptation using systematic dropouts in mini-batch train-
ing, (ii) supervised ﬁne-tuning with limited number of la-
beled samples in target domain. We experimentally evaluate
performance in the problem of retinal vessel segmentation
where the SAE-DNN is trained using large number of la-
beled samples in the source domain (DRIVE dataset) and
adapted using less number of labeled samples in target do-
main (STARE dataset). The performance of SAE-DNN mea-
sured using logloss in source domain is 0.19, without and
with adaptation are 0.40 and 0.18, and 0.39 when trained
exclusively with limited samples in target domain. The area
under ROC curve is observed respectively as 0.90, 0.86,
0.92 and 0.87. The high efﬁciency of vessel segmentation
with DASA strongly substantiates our claim.

1. Introduction

The under-performance of learning based systems during
deployment stage can be attributed to dissimilarity in distri-
bution of samples between the source domain on which the
system is initially trained and the target domain on which it
is deployed. Transfer learning is an active ﬁeld of research
which deals with transfer of knowledge between the source
and target domains for addressing this challenge and en-
hancing performance of learning based systems [6], when
it is challenging to train a system exclusively in the target
domain due to unavailability of sufﬁcient labeled samples.
While domain adaptation (DA) have been primarily devel-
oped for simple reasoning and shallow network architec-
tures, there exist few techniques for adapting deep networks

with complex reasoning [4].
In this paper we propose a
systematic dropout based technique for adapting a stacked
autoencoder (SAE) based deep neural network (DNN) [2]
for the purpose of vessel segmentation in retinal images [1].
Here the SAE-DNN is initially trained using ample number
of samples in the source domain (DRIVE dataset1) to eval-
uate efﬁcacy of DA during deployment in the target domain
(STARE dataset2) where an insufﬁcient number of labeled
samples are available for reliable training exclusively in the
target domain.

Related Work: Autoencoder (AE) is a type of neural
network which learns compressed representations inherent
in the training samples without labels. Stacked AE (SAE) is
created by hierarchically connecting hidden layers to learn
hierarchical embedding in compressed representations. An
SAE-DNN consists of encoding layers of an SAE followed
by a target prediction layer for the purpose of regression
or classiﬁcation. With increase in demand for DA in SAE-
DNNs different techniques have been proposed including
marginalized training [3], via graph regularization [7] and
structured dropouts [10], across applications including rec-
ognizing speech emotion [4] to fonts [9].

Challenge: The challenge of DA is to retain nodes com-
mon across source and target domains, while adapting the
domain speciﬁc nodes using fewer number of labeled sam-
ples. Earlier methods [3, 7, 10] are primarily challenged by
their inability to re-tune nodes speciﬁc to the source domain
to nodes speciﬁc for target domain for achieving desired
performance, while they are able to only retain nodes or a
thinned network which encode domain invariant hierarchi-
cal embeddings.

Approach: Here we propose a method for DA in SAE
(DASA) using systematic dropout. The two stage method
adapts a SAE-DNN trained in the source domain follow-
ing (i) unsupervised weight adaptation using systematic
dropouts in mini-batch training with abundant unlabeled
samples in target domain, and (ii) supervised ﬁne-tuning
with limited number of labeled samples in target domain.
The systematic dropout per mini-batch is introduced only

1http://www.isi.uu.nl/Research/Databases/DRIVE
2http://www.ces.clemson.edu/ ahoover/stare

1

Figure 1. Overview of the process of DASA. It start with learning a SAE-DNN model Hsource using ample labeled samples in Dsource.
Limited number of labeled samples in Dtarget are used to transform Hsource
DA→ Htarget. Results of vessel segmentation with domain
adaptation are compared with (BL1) SAE-DNN trained in Dsource and deployed in Dtarget without DASA and (BL2) SAE-DNN trained
in Dtarget. The shifts in distribution of color statistics across samples in Dsource and Dtarget are also illustrated.

in the representation encoding (hidden) layers and is guided
by a saliency map deﬁned by response of the neurons in the
mini-batch under consideration. Error backpropagation and
weight updates are however across all nodes and not only
restricted to the post dropout activated nodes, contrary to
classical randomized dropout approaches [8]. Thus hav-
ing different dropout nodes across different mini-batches
and weight updates across all nodes in the network, as-
certains reﬁnement of domain speciﬁc hierarchical embed-
dings while preserving domain invariant ones.

The problem statement is formally introduced in Sec. 2.
The methodology is explained in Sec. 3. The experiments
are detailed in Sec. 4, results are presented and discussed in
Sec. 5 with conclusion in Sec. 6.

2. Problem Statement

Let us consider a retinal image represented in the RGB
color space as I, such that the pixel location x ∈ I has the
color vector c(x) = {r(x), g(x), b(x)}. N (x) is a neigh-
borhood of pixels centered at x. The task of retinal vessel
segmentation can be formally deﬁned as assigning a class
label y ∈ {vessel, background} using a hypothesis model
H(I, x, N (x);{I}train). When the statistics of samples in
I is signiﬁcantly dissimilar from Itrain, the performance of
H(·) is severely affected. Generally {I}train is referred to

as the source domain and I or the set of samples used dur-
ing deployment belong to the target domain. The hypothe-
sis H(·) which optimally deﬁnes source and target domains
are also referred to as Hsource and Htarget. DA is formally
deﬁned as a transformation Hsource
DA−→ Htarget as detailed
in Fig. 1.

3. Exposition to the Solution

Let us consider the source domain as Dsource with abun-
dant labeled samples to train an SAE-DNN (Hsource ) for
the task of retinal vessel segmentation, and a target domain
Dtarget with limited number of labeled samples and am-
ple unlabeled samples, insufﬁcient to learn Htarget reliably
as illustrated in Fig. 1. Dsource and Dtarget are closely
related, but exhibiting distribution shifts between samples
of the source and target domains, thus resulting in under-
performance of Hsource in Dtarget as also illustrated in
Fig. 1. The technique of generating Hsource using Dsource,
and subsequently adapting Hsource to Htarget via system-
atic dropout using Dtarget is explained in the following sec-
tions.
3.1. SAE-DNN learning in the source domain

AE is a single layer neural network that encodes the car-
dinal representations of a pattern p = {pk} onto a trans-

formed spaces y = {yj} with w = {wjk} denoting the
connection weights between neurons, such that

y = fNL([w b].[p ; 1])

(1)
where the cardinality of y denoted as |y| = J × 1, |p| =
K×1, |w| = J ×K, and b is termed as the bias connection
with |b| = J × 1. We choose fNL(·) to be a sigmoid func-
tion deﬁned as fNL(z) = 1/(1 + exp(−z)). AE is charac-
teristic with another associated function which is generally
termed as the decoder unit such that

ˆp = fNL([w(cid:48) b(cid:48)].[y ; 1])

(2)
where |ˆp| = |p| = K × 1, |w(cid:48)| = K × J and |b(cid:48)| = K × 1.
When |y| << |{pn}|, this network acts to store com-
pressed representations of the pattern p encoded through the
weights W = {w, b, w(cid:48), b(cid:48)}. However the values of ele-
ments of these weight matrices are achieved through learn-
ing, and without the need of having class labels of the pat-
terns p, it follows unsupervised learning using some opti-
mization algorithm [5], viz. stochastic gradient descent.

{w, b, w(cid:48), b(cid:48)} = arg min
{w,b,w(cid:48),b(cid:48)}

(3)
such that J(·) is the cost function used for optimization over
all available patterns pn ∈ {p(x), x ∈ I}

(J(W))

J(W) =

(cid:107)pn − ˆpn(cid:107) + β|ρ − ˆρn|

(4)

(cid:88)

n

where β regularizes the sparsity penalty, ρ is the imposed
sparsity and ˆρn is the sparsity observed with the nth pattern
in the mini-batch.

The SAE-DNN consists of L = 2 cascade connected
AEs followed by a softmax regression layer known as the
target layer with t as its output. The number of output nodes
in this layer is equal to the number of class labels such that
|t| = |Ω| and the complete DNN is represented as

t = fNL ([w3 b3]. [fNL ([w2 b2]. [fNL ([w1 b1].

[p 1]T(cid:17)

(cid:105)T(cid:19)

(cid:21)T(cid:33)

1

1

(5)
where {W1 = {w1, b1}, W2 = {w2, b2}} are the pre-
trained weights of the network obtained from the earlier
section. The weights W3 = {w3, b3} are randomly ini-
tialized and convergence of the DNN is achieved through
supervised learning with the cost function
(cid:107)tm − Ωm(cid:107)

(6)
the weights W = {W1 =
during which all
{w1, b1}, W2 = {w2, b2}, W3 = {w3, b3}} are updated
to completely tune the DNN.

(cid:88)

J(W) =

m

Figure 2. Illustration of the technique for unsupervised adaptation
of SAE weights using systematic dropout.

3.2. SAE-DNN adaptation in the target domain

Unupervised adaptation of SAE weights using sys-
tematic dropouts: The ﬁrst stage of DA utilizes abun-
dant unlabeled samples available in target domain to retain
nodes which encode domain invariant hierarchical embed-
dings while re-tuning the nodes speciﬁc in source domain
to those speciﬁc in target domain. We follow the concept of
systematic node drop-outs during training [8]. The number
of layers and number of nodes in the SAE-DNN however
remains unchanged during domain adaptation. Fig. 2 illus-
trates the concept.
Weights connecting each of the hidden layers is imported
from the SAE-DNN trained in Dsource are updated in this
stage using an auto-encoding mechanism. When each mini-
batch in Dtarget is fed to this AE with one of the hidden
layers from the SAE-DNN; some of the nodes in the hidden
layer exhibit high response with most of the samples in the
mini-batch, while some of the nodes exhibit low response.
The nodes which exhibit high-response in the mini-batch
are representative of domain invariant embeddings which
need to be preserved, while the ones which exhibit low-
response are speciﬁc to Dsource and need to be adapted
to Dtarget. We set a free parameter τ ∈ [0, 1] deﬁned
as the transfer coefﬁcient used for deﬁning saliency metric
({sl

j} ∈ s) for the jth node in the lth layer as

(cid:40)

sl
j =

if yl

j ≥ τ .
1,
0, otherwise.

(7)

j ∈ y as in (1), and we redeﬁne (2) while preserving

where yl
(4) and the original learning rules.

ˆp = fNL([w(cid:48) b(cid:48)].[y.s ; 1])

(8)
Supervised ﬁne tuning with limited number of la-
beled samples: The SAE-DNN with weight embeddings
updated in the previous stage is now ﬁne tuned using limited
number of labeled samples in Dtarget following procedures
in (5) and (6).

4. Experiments

SAE-DNN architecture: We have a two-layered archi-
tecture with L = 2 where AE1 consists of 400 nodes and
AE2 consists of 100 nodes. The number of nodes at input
is 15 × 15 × 3 corresponding to the input with patch size of
15 × 15 in the color retinal images in RGB space. AEs are
unsupervised pre-trained with learning rate of 0.3, over 50
epochs, β = 0.1 and ρ = 0.04. Supervised weight reﬁne-
ment of the SAE-DNN is performed with a learning rate of
0.1 over 200 epochs. The training conﬁguration of learning
rate and epochs were same in the source and target domains,
with τ = 0.1.
Source and target domains: The SAE-DNN is trained
in Dsource using 4% of the available patches from the 20
images in the training set in DRIVE dataset. DA is per-
formed in Dtarget using (i) 4% of the available patches in
10 unlabeled images for unsupervised adaptation using sys-
tematic dropout and (ii) 4% of the available patches in 3
labeled images for ﬁne tuning.

Baselines and comparison: We have experimented with
the following SAE-DNN baseline (BL) conﬁgurations and
training mechanisms for comparatively evaluating efﬁcacy
of DA: BL1: SAE-DNN trained in source domain and
deployed in target domain without DA; BL2: SAE-DNN
trained in target domain with limited samples and deployed
in target domain.
5. Results and Discussion

The results comparing performance of the SAE-DNN are
reported in terms of logloss and area under ROC curve as
presented in Table 1, and DA aspects in Fig. 3.

Source domain

BL1
BL2
DASA

logloss
0.19 ± 0.05
0.40 ± 0.31
0.39 ± 0.68
0.18 ± 0.02

Area under ROC

0.90 ± 0.02
0.86 ± 0.03
0.87 ± 0.01
0.92 ± 0.02

Table 1. Comparison of Performance with the baselines

Hierarchical embedding in representations learned
across domains: AEs are typically characteristic of learn-
ing hierarchical embedded representations. The ﬁrst level
of embedding represented in terms of w1 in Fig. 3(g) is
over-complete in nature, exhibiting substantial similarity
between multiple sets of weights which promotes sparsity in
the nature of w2 in Fig. 3(h). Some of these weight kernels
are domain invariant, and as such remain preserved after DA
as observed for w1 in Fig. 3(i) and for w2 in Fig. 3(j). Some
of the kernels which are domain speciﬁc, exhibit signiﬁ-
cant dissimilarity in w1 and w2 between source domain in
Figs. 3(g) and 3(h) vs. target domain in Figs. 3(i) and 3(j).
These are on account of dissimilarity of sample statistics in

the domains as illustrated earlier in Fig. 1 and substantiates
DASA of being able to retain nodes common across source
and target domains, while re-tuning domain speciﬁc nodes.
Accelerated learning with DA: The advantage with DA
is the ability to transfer knowledge from source domain
to learn with fewer number of labeled samples and ample
number of unlabeled samples available in the target domain
when directly learning in the target domain does not yield
desired performance. Figs. 3(k) and 3(l) compare the learn-
ing of w1 and w2 using ample unlabeled data in source and
target domain exclusively vs. DA. Fig. 3(m) presents the ac-
celeration of learning with DA in target domain vs. learning
exclusively with insufﬁcient number of labeled samples.

Importance of transfer coefﬁcient: The transfer coef-
ﬁcient τ drives quantum of knowledge transfer from the
source to target domains by deciding on the amount of
nodes to be dropped while adapting with ample unlabeled
samples. This makes it a critical parameter to be set in
DASA to avoid over-ﬁtting and negative transfers as il-
lustrated in Table. 2 where optimal τ = 0.1. Generally
τ ∈ [0, 1] with τ → 0 being associated with large margin
transfer between domains when they are not very dissimilar,
and τ → 1 being associated otherwise.

τ

0

logloss

0.39

0.05
0.24

0.1
0.18

0.15
0.21

0.2
0.32

Table 2. Variation of logloss in DA with variation of τ

6. Conclusion

We have presented DASA, a method for knowledge
transfer in an SAE-DNN trained with ample labeled sam-
ples in source domain for application in target domain with
less number of labeled samples insufﬁcient to directly train
to solve the task in hand. DASA is based on systematic
droupout for adaptation being able to utilize (i) ample un-
labeled samples and (ii) limited amount of labeled samples
in target domain. We experimentally provide its efﬁcacy to
solve the problem of vessel segmentation when trained with
DRIVE dataset (source domain) and adapted to deploy on
STARE dataset (target domain). It is observed that DASA
outperforms the different baselines and also exhibits accel-
erated learning due to knowledge transfer. While systematic
drouput is demonstrated on an SAE-DNN in DASA, it can
be extended to other deep architectures as well.

Acknowledgement

We acknowledge NVIDIA for partially supporting this

work through GPU Education Center at IIT Kharagpur.

(a) Source domain
sample.

(b) Source domain
labels.

(c) Source domain
prediction.

(d) Target domain sam-
ple.

(e) Target domain labels. (f) Target domain predic-

tion with DA.

(g) Over complete representation
in w1 in source domain.

(h) Sparse representation in w2 in
source domain

(i) DA representation in w1

(j) DA representation in w2

(k) J(W) vs. epochs in training AE1

(l) J(W) vs. epochs in training AE2

(m) J(W) vs. epochs in training SAE-DNN

Figure 3. Performance of the vessel segmentation with (a-c) SAE-DNN on sample 01 (Test) in Dsource (DRIVE), (d-f) DASA on sample
0163 in Dsource (STARE), (g, h) representation learned by the SAE-DNN in Dsource, (i, j) DA representations using Dtarget, learning
dynamics vs. epochs in (k, l) AEs and (m) SAE-DNN indicating the higher efﬁcacy of DASA compared to direct learning with limited
samples in Dtarget.

References

[1] M. D. Abr`amoff, M. K. Garvin, and M. Sonka. Retinal imag-
ing and image analysis. IEEE Rev. Biomed. Engg., 3:169–
208, 2010. 1

[2] Y. Bengio. Learning deep architectures for AI. Found.,

Trends, Mach. Learn., 2(1):1–127, 2009. 1

[3] M. Chen, Z. Xu, K. Weinberger, and F. Sha. Marginalized
denoising autoencoders for domain adaptation. In Proc. Int.
Conf. Mach. Learn., pages 767–774, 2012. 1

[4] J. Deng, Z. Zhang, F. Eyben, and B. Schuller. Autoencoder-
based unsupervised domain adaptation for speech emotion
IEEE Signal Process. Let., 21(9):1068–1072,
recognition.
2014. 1

[5] S. Haykin. Neural Networks and Learning Machines. Pear-

son Education, 2011. 3

[6] S. J. Pan and Q. Yang. A survey on transfer learning. IEEE
Trans. Knowledge., Data Engg., 22(10):1345–1359, 2010. 1
[7] Y. Peng, S. Wang, and B.-L. Lu. Marginalized denoising
autoencoder via graph regularization for domain adaptation.
In Proc. Neural Inf. Process. Sys., pages 156–163, 2013. 1

[8] N. Srivastava, G. Hinton, A. Krizhevsky, I. Sutskever, and
R. Salakhutdinov. Dropout: A simple way to prevent neural
networks from overﬁtting. J. Mach. Learn. Res., 15(1):1929–
1958, 2014. 2, 3

[9] Z. Wang, J. Yang, H. Jin, E. Shechtman, A. Agarwala,
J. Brandt, and T. S. Huang. Real-world font recognition us-
ing deep network and domain adaptation. In Proc. Int. Conf.
Learning Representations, page arXiv:1504.00028, 2015. 1
[10] Y. Yang and J. Eisenstein. Fast easy unsupervised domain
adaptation with marginalized structured dropout. Proc. As-
soc., Comput. Linguistics, 2014. 1

