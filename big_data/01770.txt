An Argument-based Creative Assistant for Harmonic Blending

Paper type: System Description Paper

Maximos Kaliakatsos-Papakostasa, Roberto Confalonierib, Joseph Cornelic,

Asterios Zacharakisa and Emilios Cambouropoulosa
aDepartment of Music, Aristotle University of Thessaloniki, Greece

bArtiﬁcial Intelligence Research Institute, IIIA-CSIC, Bellaterra (Barcelona), Spain

cDepartment of Computing, Goldsmiths, University of London, UK

a{max,aszachar,emilios}@mus.auth.gr

bconfalonieri@iiia.csic.es

cj.corneli@gold.ac.uk

Abstract

6
1
0
2

 
r
a

M
6

 

 
 
]

D
S
.
s
c
[
 
 

1
v
0
7
7
1
0

.

3
0
6
1
:
v
i
X
r
a

Conceptual blending is a powerful tool for computational cre-
ativity where, for example, the properties of two harmonic
spaces may be combined in a consistent manner to produce
a novel harmonic space. However, deciding about the impor-
tance of property features in the input spaces and evaluating
the results of conceptual blending is a nontrivial task. In the
speciﬁc case of musical harmony, deﬁning the salient features
of chord transitions and evaluating invented harmonic spaces
requires deep musicological background knowledge. In this
paper, we propose a creative tool that helps musicologists to
evaluate and to enhance harmonic innovation. This tool al-
lows a music expert to specify arguments over given transi-
tion properties. These arguments are then considered by the
system when deﬁning combinations of features in an idiom-
blending process. A music expert can assess whether the new
harmonic idiom makes musicological sense and re-adjust the
arguments (selection of features) to explore alternative blends
that can potentially produce better harmonic spaces. We con-
clude with a discussion of future work that would further au-
tomate the harmonisation process.

Introduction

The invention of new harmonic spaces in this paper is con-
ceived as a computational creative process according to
which a new harmonic idiom is created by means of blend-
ing the ‘atoms’ of harmony, i.e., transitions between chords.
The blended transitions are created by combining the fea-
tures characterising pairs of transitions belonging to two id-
ioms (expressed as sets of potentially learned transitions) ac-
cording to an amalgam-based algorithm (Confalonieri et al.,
2015; Eppe et al., 2015b) that implements Fauconnier and
Turner (2002)’s theory of conceptual blending. The transi-
tions are then used in an extended harmonic space that ac-
commodates the two initial harmonic spaces, linked with the
new blended transitions.

When modeling creative processes computationally, one
of the key questions is how good are the created artefacts.
The approach to evaluation that has been applied most fre-
quently within computational creativity requires a human to
evaluate attributes of the created work or the system’s op-
eration. Basic measures consider the typicality of a gener-
ated artefact within a particular genre, or the quality of the
generated work according to the users’ aesthetic judgement
(Ritchie, 2007).

α

γ

β

ι

ζ



Figure 1: A schematic diagram of the system’s workﬂow.

In music blending, the evaluation of artefacts is not a triv-
ial matter. This is due not only to the time evolving nature
of the ﬁnal output, but also to the lack of clearly deﬁned
criteria for their assessment. In the particular case of transi-
tion blending, the evaluation of the blends is of key impor-
tance, in order to produce musically meaningful extended
harmonic spaces. To evaluate the set of blended transitions
and the corresponding generated extended harmonic space,
several musical features need to be taken into account ac-
cording to indications by musicologists. The importance of
each particular feature, however, is not known in advance
and musicologists need to make adjustments by experiment-
ing with a large set of test cases.

To ease this task, in this paper, we propose a creative tool
(Figure 1) that assists a musicologist with the evaluation of
harmonic blends. The system allows a musicologist to spec-
ify arguments — abstracting the properties of chords and
transitions — and to use them for iterative evaluation of the
blended outcome, based on the transitions that the system
proposes in order to connect two (potentially remote) har-
monic spaces.

Using arguments to make and explain decisions has been
proposed and explored in Artiﬁcial Intelligence (?), where
an argument is a reason for believing a statement, choosing

Transition blending systemBlends imported to extended matricesUser evaluationGraphical User InterfaceDisplay of extended matrix of transitions. Does it make musical sense?User deﬁnesinput idiomsQuestions to user / argumentationTransitions from idioms as blending inputsMap answers to blending featuresan option, or doing an action. In most existing works on ar-
gumentation, an argument is either considered as an abstract
entity whose origin and structure are not deﬁned (Dung,
1995), or it is a logical proof for a statement where the proof
is built from a knowledge base (Amgoud and Prade, 2009).
In our approach, arguments encapsulate desirable proper-
ties that the user would like to have in the resulting transition
blends. Arguments are speciﬁed by the user by ‘answering’
speciﬁc questions over the features of the idioms selected
as input for the transition blending process. Providing some
higher level arguments as inputs to the system is equivalent
to allowing a musical expert to interact with it in a language
he/she understands. This offers the user a ﬂexible way to
adjust the harmonic blending properties according to dif-
ferent input scenarios in order to improve the creativity of
the system. Extended experimentation with the system —by
making use of the available arguments— can enable music
experts to provide valuable feedback regarding the function-
ality of transition features, thus directly intervening in the
blending process by answering simple questions. In a fu-
ture scenario, the assessment of the system will be based
on merely musicological criteria that should be more clearly
deﬁned.

The paper is organised as follow. In the next section, we
describe the harmonic blending creative process embedded
in a creative assistant tool we implemented. Next, we de-
scribe the methodology of transition blending and extending
harmonic spaces. We show how user arguments are used
to evaluate transition blends based on two criteria resem-
bling two of the optimality principles of conceptual blend-
ing. Then, we present a process-based system evaluation
that focuses on the creative acts of programmers (Colton et
al., 2014). This evaluation is helpful in guiding further de-
velopments of the system. These are discussed in a conclud-
ing section.

System overview and test cases

Figure 1 illustrates a diagram of the presented system. The
user (music expert) interacts with the system through the
Graphical User Interface (GUI), where she/he selects two
initial idioms (harmonic spaces) in γ and deﬁnes the im-
portant features used in conceptual blending by answering
to speciﬁc questions (argumentation) in β. The selected
initial idioms are described as sets of chord transitions,
while the provided answers to questions are mapped to en-
abling/disabling features of transitions (see Section ‘Chord
transitions description and blending’) that deﬁne the out-
come of transition blending (see Section ‘Evaluation of tran-
sition blending via arguments’).

Afterwards, pairs of transition in the two initial harmonic
spaces are given as inputs to the transition blending sys-
tem in  where new transitions are invented through con-
ceptual blending. These transitions are then integrated into
an extended musical idiom that includes the initial idioms
selected by the user, while the role of the new transitions
is to provide musically meaningful connections between the
initial harmonic spaces. The created extended idiom is dis-
played to the user in the GUI in terms of a transition matrix
(see Section ‘From transition blends to transition matrices’).

By observing the matrix, the music expert evaluates (ι) the
results produced by the current blending setup, i.e., the given
questions to the argumentation module (β), and re-adjusts
her/his answers in β accordingly.

Several scenarios for initial idiom combinations are avail-
able to the user. The system included several harmonic
blending test cases according to which the user could blend
simple ‘artiﬁcial’ harmonic spaces as well as harmonic
spaces trained from data in different tonalities. The artiﬁ-
cial harmonic spaces are constructed to include simple tran-
sitions in order to allow clear interpretations of the results,
e.g., a C major space included the chords C, F and G7.
Among the trained idioms that have been examined, there
are sets of Bach chorales in major and minor mode, and sets
of modal chorales in several modes.

The test cases, in which harmonic spaces in different
tonalities are blended, resemble the musical task of ﬁnd-
ing transition paths for tonality modulations (changing the
tonality of a given harmonic space). This task allowed mu-
sic experts to identify arguments for deﬁning the features
of transition blending that connect potentially remote har-
monic spaces (e.g., C major with F(cid:93) major) in a manner that
is explainable in music theory in terms of tonality modu-
lations. Through the processes offered by the system, the
music experts were able to come to conclusions about what
transition features are important for constructing meaning-
ful connections between different combinations of pairs of
initial harmonic spaces.
Methodological aspects of transition blending

and extending harmonic spaces

The cognitive theory of conceptual blending by Faucon-
nier and Turner (2002) has been extensively used in lin-
guistics, music composition (Zbikowski, 2002), music cog-
nition (Antovic, 2009, 2011) and other domains mainly as
an analytical tool, which is useful for explaining the cogni-
tive process that humans undergo when engaged in creative
acts. According to this theory, human creativity is modeled
as a process by which a new concept is constructed by tak-
ing the commonalities among two input spaces into account,
to form a so-called generic space, and by projecting their
non-common structure in a selective way to a novel blended
space, called a blend.

In computational creativity, conceptual blending has been
modeled by Goguen (2006) as a generative mechanism, ac-
cording to which input spaces are modeled as algebraic
speciﬁcations and a blend is computed as a categorical col-
imit. A computational framework that extends Goguen’s ap-
proach has been developed in the context of the COncept
INVENtion Theory1 (COINVENT) project (Schorlemmer et
al., 2014) based on the notion of amalgams (?). Accord-
ing to this framework, input spaces are described as sets
of features, properties and relations, and an amalgam-based
workﬂow ﬁnds the blends (Confalonieri et al., 2015; Eppe
et al., 2015b). The amalgam-based workﬂow generalises in-
put concepts until a generic space is found and ‘combines’
generalised versions of the input spaces to create blends that

1http://www.coinvent-project.eu

Figure 2: Conceptual blending based on amalgam. The
generic space is computed (1) and the input spaces are suc-
cessively generalised (2), while new blends are constantly
created (3). Some blends might be inconsistent or purely
evaluated according to blending optimality principles or do-
main speciﬁc criteria.

are consistent or satisfy certain properties that relate to the
knowledge domain (Figure 2).2

Amalgam-based conceptual blending has been applied
to invent chord cadences (Eppe et al., 2015a; Zacharakis,
Kaliakatsos-Papakostas, and Cambouropoulos, 2015).
In
this setting, cadences are considered as special cases of
chord transitions—pairs of chords, where the ﬁrst chord is
followed by the second one— that are described by means
of features such as the roots or types of the involved chords,
or intervals between voice motions, among others. When
blending two transitions, the amalgam-based algorithm ﬁrst
ﬁnds a generic space between them (point 1 in Figure 2).
For instance, in the case of blending the perfect with the
Phrygian cadences (Figure 3)—described by the transitions
I1: G7 → C and I2: B(cid:91)m → C5 respectively— their generic
space consists of any transition that has a second chord with
the root note C, since this is the root note of both inputs’
second chords (C and C5).

After a generic space is found, the amalgam-based pro-
cess computes the amalgam of two input spaces by unifying
their content. If the resulting amalgam is inconsistent, then
it iteratively generalises the properties of the inputs (point
2 in Figure 2), until the resulting uniﬁcation is consistent
(point 3 in Figure 2). For instance, trying to directly unify
the transitions I1: G7 → C and I2: B(cid:91)m → C5 would yield an
inconsistent amalgam, since a transition cannot both include
and not include a leading note to the second chord’s tonic
(which is a property of I1 and the I2 respectively). There-
fore, the amalgam-based process generalises the clashing
property in one of the inputs (e.g., the property describing
the absence of leading note would be left empty in I2) and
tries to unify the generalised versions of the inputs again.
After a number of generalisation steps are applied (point 2

2In the process of blending through amalgams, the notions of
‘amalgam’ and ‘blend’ are the same. Therefore, in the following
paragraphs they are used interchangeably.

Figure 3: Example of blending cadences, which are special
case of transitions, where blending the perfect and the Phry-
gian produce the tritone substitution cadence blend.

in Figure 2), the resulting blend is consistent (point 3 in Fig-
ure 2). However, it may be the case that the blend is not
complete, in the sense that this process may have generated
an over-generalised term.

Blending completion (Fauconnier and Turner, 2002) is a
domain-speciﬁc process that uses background knowledge to
consistently assign speciﬁc properties to generalised terms.
In the hitherto discussed example, blend completion is used
for completing the A(cid:91) note as the chord’s ﬁfth in blending
the perfect and Phrygian cadence in order to obtain the tri-
tone substitution cadence (Figure 3).

After several blends have been computed, an evaluation
process ranks them according to some optimality princi-
ples (Fauconnier and Turner, 2002, Chapter 16). These prin-
ciples are a necessary aspect of conceptual blending since
they allow to ﬁlter interesting blends from the (potentially
too) many possible ones3. A complete description of opti-
mality principles is out of the scope of this paper and the
reader is referred to Goguen and Harrell (2010) for appli-
cations of such principles in the Alloy algorithm. We give,
however, two extreme examples of ‘bad blends’ for clarify-
ing the importance of using optimality principles in concep-
tual blending.
• Example 1, violating the symmetry principle: Each of the
input spaces is a trivial form of a blend. This is a bad
blend, because no information from the other input spaces
is considered.
• Example 2, violating the web principle: Consider a blend
that includes all properties of the generic space, but all
other information are ﬁlled by properties that are not in-
cluded in any of the input spaces. This blend has the least
possible connections with the input spaces and therefore,
the least amount of information from the inputs is identi-
ﬁable in this blend.

These examples suggest two criteria for ranking the blends;
we provide a computational characterisation of them below.
Chord transitions description and blending
Individual chord transitions are the ‘atoms’ of the method-
ology followed herein to construct new transition matrices.
Speciﬁcally, transition sets from two musical idioms provide
input transitions for blending, producing a list of blended

3The amalgam-based algorithm produces many blends by fol-

lowing alternative generalisation paths.

input 1input 2genericspaceblendgen. input 2gen.input 11122322consistency check and evaluationtransitions that are afterwards embeded in an extended har-
monic space. This methodology is described brieﬂy in the
next section while some deﬁnitions regarding chord transi-
tions follow.
Deﬁnition 1. A chord transition c is described by a set of
features F.
In this work a transition is represented by 17 features. Fea-
tures 1-6 refer to the involved chords. Features 8 to 10 indi-
cate changes during the transitions and are based on the Di-
rected Interval Class (DIC) vector (Cambouropoulos, Katsi-
avalos, and Tsougras, 2013; Cambouropoulos, 2012). Fea-
ture 7 accounts for the change that occurred regarding the
chords’ root notes. The features considered important in this
work are the following:
1. fromRoot: the root pitch class of the ﬁrst chord,
2. toRoot: the root pitch class of the second chord,
3. fromType: the type of the ﬁrst chord (GCT base),
4. toType: the type of the second chord (GCT base),
5. fromPCs: the pitch classes included in the ﬁrst chord,
6. toPCs: the pitch classes included in the second chord,
7. DICinfo: the DIC vector of the transition,
8. DIChas0: Boolean value indicating whether the DIC of

the transition has 0,

9. DIChas1: Boolean value indicating whether the DIC of

10. DIChasMinus1: Boolean value indicating whether the

the transition has 1,
DIC of the transition has −1,

11. ascSemZero: Boolean value indicating whether the ﬁrst

chord has the relative pitch class value 11,

12. descSemZero: Boolean value indicating whether the ﬁrst

chord has the relative pitch class value 1,

13. semZero: Boolean value indicating whether the ﬁrst chord

has the relative pitch class value 11 or 1,

14. ascSemNextRoot: Boolean value indicating whether the
ﬁrst chord has a pitch class with ascending semitone rela-
tion with the pitch class of the second chord’s root,

15. descSemNextRoot: Boolean value indicating whether the
ﬁrst chord has a pitch class with descending semitone re-
lation with the pitch class of the second chord’s root,

16. semNextRoot: Boolean value indicating whether the ﬁrst
chord has a pitch class with ascending or descending
semitone relation with the pitch class of the second
chord’s root, and

17. 5thRootRelation: Boolean value indicating whether the

ﬁrst chord’s root note is a ﬁfth above of the second’s.
Each feature can be considered as a function that assigns
a value to a chord transition c. Features’ values are deﬁned
differently depending on the properties they represent. For
instance, features 3 to 8 are set-value functions that assign
a set of values to a chord. We refer to them as Fi(c). The
value of the feature 7 is a vector and we refer to it as (cid:126)f (c).
Finally, all the other features are binary functions and we
refer to them as fi(c).

From transition blends to transition matrices
In the literature, an effective and common way to describe
chord progressions in a music idiom in a statistical manner
is by using Markov models (see Kaliakatsos-Papakostas and
Cambouropoulos (2014); Simon, Morris, and Basu (2008),
among others). Such models reﬂect the probabilities of each
chord following other chords in the idiom, as trained or sta-
tistically measured throughout all the pieces in the examined
idiom. First-order Markov models, speciﬁcally, indicate the
probability of transitions from one chord to another, disre-
garding information about previous chords. Therefore, indi-
vidual transitions play an important role on indicating par-
ticular characteristics of an idiom.

A convenient way to represent a ﬁrst order Markov model
is through transition matrices, which include one respective
row and column for each chord in the examined idiom. The
probability value in the i-th row and the j-th column ex-
hibits the probability of the i-th chord going to the j-th —
the probabilities of each row sum to unit. The utilised chords
are actually represented by chord group exemplars, obtained
by the method described in Kaliakatsos-Papakostas et al.
(2015), while transitions between chords that pertain to the
same chord group are disregarded (this neutralises the diag-
onal). The representation of chords is based on the General
Chord Type representation (Cambouropoulos, Kaliakatsos-
Papakostas, and Tsougras, 2014).

Then, an important question is: How would a blended id-
iom be expressed in terms of a transition matrix, provided
that the transition matrices of two initial idioms are avail-
able?

Among many possible answers, the idea examined in the
present system is to create an extended transition matrix that
includes not only an altered version of the initial ones, but
also new transitions that allow moving across chords of the
initial idioms by potentially using new chords. The exam-
ined methodology uses transition blending to create new
transitions that: (a) maximally preserve the common parts
of transitions between the two initial spaces, and (b) incor-
porate blended characteristics for creating a smooth ‘morph-
ing’ harmonic effect when moving from chords of one space
to chords of the other. An abstract illustration of an extended
matrix is given in Figure 4.

By analysing the graphical representation of an extended
matrix as depicted in Figure 4 the following facts are high-
lighted:
1. By using transitions in Ii, only chords of the i-th idiom
are used. When using the transition probabilities in Ii, the
resulting harmonisations preserve the character of idiom
i.

2. Transitions in Ai−j create direct jumps from chords of
the i-th to chords of the j-th idiom.
If a blended tran-
sition happens to be in Ai−j there is no need for further
considerations – such a transition can be included in the
extended matrix.

3. Transitions in Bi−X constitute harmonic motions from a
chord of idiom i to a newly created chord by blending.
Similarly, transitions in the BX−j arrive at chords in idiom
j from new chords. For moving from idiom i to idiom j

Question Chord Properties Transition Changes

fromRoot
toRoot
fromType
toType
fromRelPCs
toRelPCs

DIChas0
DIChas1
DIChasN1
DIChas2
DIChasN2
DICinfo
ascSemZero
descSemZero
semZero
ascSemNextRoot
descSemNextRoot
semNextRoot
5thRootRel

Q1

Q2
Q3
Q4

Q5

Q6
Q7

Q8

Q9

Figure 4: Graphical description of an extended matrix that
includes transition probabilities of both initial idioms and of
several new transitions generated through transition blend-
ing. These new transitions allow moving across the initial
idioms, creating a new extended idiom that is a superset of
the initial ones.

using one external chord cx that was produced by blend-
ing, a chain of two transitions is needed: ci → cx followed
by a transition cx → cj, where ci in idiom i and cj in id-
iom j respectively. A chain of two consecutive transitions
with one intermediate external chord from chords of i to
chords of j will be denoted as Bi−X−j.

4. Sector C transitions incorporate pairs of chords that ex-
ist outside the i-th and j-th idioms. Having two external
chords, transitions in C violate our hypothesis for moving
from one known chord sets to the other using one new
chord at most; therefore, blends resulting to C-type blends
are disregarded.
Based on this analysis of the extended matrix, a method-
ology is proposed for using blends between transitions in I1
and I2. Thereby, transitions in I1 are blended with ones in
I2 and a number of the best blends is stored for further inves-
tigation, creating a pool of best blends. Based on multiple
simulations, a large number of the best blends (i.e. 100) in
each blending simulation should be inserted in the pool of
best blends (B), so that several commuting scenarios can be
created between the initial transition spaces. Thus, a greater
number of blends in the pool of best blends introduces a
larger number of possible commuting paths in Ai−j or in
Bi−X−j.

Evaluation of transition blending via arguments
By applying the aforementioned blending process a pool
of best blends is created that is afterwards used for con-
necting the transition blocks of two initial idioms, through
forming an extended matrix. When a music expert is us-
ing the system, she/he is able to select pairs of initial in-
put idioms, choose which aspects of blending are important
through arguments (analysed in the following paragraphs)

Table 1: Abstraction of chords’ and transition changes’ fea-
tures.

and evaluate/re-adjust this choice by observing the produced
results in the extended matrix.

The user evaluates the importance of several transition
features by answering questions based on the connecting
transitions produced by blending in the extended matrix.
The features related to the transitions and their constituent
chords are classiﬁed into 9 questions (Table 1).
Q1: Are roots and types of chords important?
Q2: Are individual pitch classes of chords important?
Q3: Are repeating pitch classes in transitions important?
Q4: Are semitone steps in transitions important?
Q5: Are tone steps in transitions important?
Q6: Are the intervalic contents of transitions important?
Q7: Are semitone motions to the tonic important?
Q8: Are semitones to the second chord’s root important?
Q9: Are motions of the chord roots by 5th important?
The ﬁrst two questions concern characteristics of the chords
that constitute the transition, mapping the user answers to
features from 1 to 6, while the remaining seven questions
concern intervalic changes that occur within the transition,
mapping the user answers to features from 7 to 17. Relat-
ing questions to transition features was performed with the
involvement of music experts, to ensure that the mapping is
as accurate and as informative to the user as possible.
We denote the set of questions available to the user as Q.
When a user selects a question, an argument is automatically
generated. For the sake of this paper, an argument is deﬁned
as follows.
Deﬁnition 2. An argument A is a tuple (cid:104)q, F(cid:105), where q ∈ Q
and F ⊂ F.

A1-2A2-1B1-XB2-XBX-1BX-2CI2I1I1chordsI2chordsNewchordsI1chordsI2chordsNewchordsThe user can specify at most 9 arguments, each of them is
mapped to a set of properties. The set of user arguments
{A1, . . . , A9} corresponding to answers to Q will be de-
noted by A. We assume to have a function ψ : A → F
that returns the set of chord and transition properties associ-
ated with an argument (e.g, for the purposes of the current
analysis, Table 1 speciﬁes ψ as a look-up function). The ar-
guments are used to compute two criteria in order to rate a
blend: total association and symmetry.

The total association indicates the total number of prop-
erties that a blend inherits from the inputs. A blend with
higher input associations is preferable since it is structurally
more deeply related with the inputs. The total association
is calculated by taking the individual association of a blend
w.r.t. the input chord transitions into account. The individ-
ual association of a blend b w.r.t. to an input I, denoted as
a(b, I), is deﬁned as:

(cid:88)

Ai∈A

a(b, I) =

Val(Ai, b, I)

where Val : A → R is a function that takes an argument as
input and aggregates the values of the chord and transition
change properties associated with the argument, by inter-
preting them according to some music background knowl-
edge. Depending on the type of argument, Val is deﬁned in
different ways.

When an argument refers to the roots and types of chords

(A1), Val is deﬁned as:

Val(A1, b, I) =

equals(Fj(I), Fj(b))

(cid:88)

Fj∈ψ(A1)

The value of A1 is calculated by counting how many proper-
ties —among fromRoot, toRoot, fromType and toType— are
equals between a blend b and an input I. equals is a function
that returns 1 when two sets are equals and 0 otherwise.

When an argument refers to the individual pitch classes of

chords (A2), Val is deﬁned as:

Val(A2, b, I) =

|Fj(I) ∩ Fj(b)|

(cid:88)

Fj∈ψ(A2)

The value of A2 is calculated as the number of elements
that are common in the set-value properties fromRelPCs and
toRelPCs of a blend b and an input I.

When an argument refers to the intervalic contents of tran-

sitions (A6), Val is deﬁned as:

Val(A6, b, I) = norm[0,1](ρ (cid:126)f (I), (cid:126)f (b))

The value of A6 is calculated as the Pearson’s correlation
coefﬁcient of the vector-value property DICinfo of a blend b
and an input I. Higher correlations in the DIC vectors of two
transitions indicate higher resemblance; norm is a function
that normalises the Pearson’s coefﬁcient from the interval
[−1, 1] to the interval [0, 1].
For all the other types of arguments, Val is deﬁned as:
1 − (fj(I) − fj(b))

Val(Ai, b, I) =

(cid:88)

fj∈ψ(Ai)

Based on the above deﬁnitions, the total association value is
the sum of the individual associations.

(cid:88)

Ii∈I

assoc(b) =

a(b, Ii)

where I is the set of input spaces, containing in this speciﬁc
case, I1 and I2.

Symmetry, on the other hand, reﬂects the balance of prop-
erties that a blend inherits from both input spaces. A blend
has a high symmetry when it inherits an almost equal pro-
portion of properties from both input spaces. Blends having
higher symmetry are preferred to those with lower symme-
try, since a high symmetry reﬂects a stronger hybridisation
of structural characteristics. Hybridisation is an important
principle to evaluate transition blends.

The blend symmetry is deﬁned in terms of its ‘asymme-
try’. The asymmetry of a blend w.r.t. the inputs, denoted as
asym(b), is calculated as:

(cid:12)(cid:12)(cid:12)(cid:12) a(b, I1)2 + a(b, I1)a(b, I2)

a(b, I1)2 + a(b, I2)

− a(b, I2)2 + a(b, I1)a(b, I2)

a(b, I2)2 + a(b, I1)

(cid:12)(cid:12)(cid:12)(cid:12)

The value of asym(b) is deﬁned in [0, 1], where 0 stands
for a perfect symmetry (equal association with both inputs)
and 1 stands for total asymmetry (association only with one
input). Additionally, the non-absolute version of the above
equation suggests the prevailing input, with a negative value
indicating dominating association of the blend with the ﬁrst
input and a positive value contrarily.

The total rate of a blend is computed by taking the input

association and asymmetry values into account.
assoc(b)(1 − asym(b))
assoc(b) + (1 − asym(b))

rate(b) =

Finally, a decision making criterion to compare any pair

The above expression promotes pairs of association and
symmetry that are both high, while a simple sum would al-
low a low value of the one to be covered by the other.
of blends b1, b2 ∈ B can be deﬁned as follows.
Deﬁnition 3 (Decision criterion). A blend b1 is preferred to
a blend b2 if and only if rate(b1) ≥ rate(b2).

It is worthy to notice that the above criterion guarantees
that any pair of blends is comparable, and, consequently, it
allows to decide which blends are the best ones. This is an
important property for blend evaluation and, generally, for
approaches to argumentation-based decision making (Am-
goud and Prade, 2009; Bonet and Geffner, 1996).

System evaluation

Referring to Figure 1, via the interface α, the user has access
to modules γ, and β which can be used to specify concepts
that will inform the resulting product, namely, the input id-
ioms and arguments that impose constraints on the gener-
ated blend. These are translated by the system into process-
friendly formats. Module  embodies the (process-level)
concept of a system that make use of the supplied idioms
and the blending properties to generate example transition

matrices, ζ. In the current version of the system, these transi-
tions are evaluated by the user (music expert) in step ι using
sophisticated harmonic knowledge that reﬂects historically
established musical aesthetic. The user can then return to
the GUI α, and adjust the settings of γ and β to regenerate
the transitions.

This is illustrated in Figure 5 in box P1, using the dia-
grammatic extension to the FACE model by Colton et al.
(2014). Here, capital letters F , A, C, or E are creative
acts that generate a framing, aesthetic, concept, or exam-
ple, respectively. Administrative acts S and T denote selec-
tion and translation. Lower-case letters denote the generated
artefact in each case (e.g., the concept c corresponding to
the concept-creation act C). Subscripts p, g, or m indicate
whether the act takes place at the process, ground, or meta
level. Inside each box, stacks show the dependence in devel-
opment epochs, and arrows show run-time message passing.
Acts taken by the programmer or user are decorated with a
bar, whereas acts taken by the system itself receive no extra
decoration.

In the current version of the system, apart from the pro-
grammer’s creative acts specifying the modules and their in-
terconnections, and the algorithm C 
p that turns inputs into
blends, the user, who is assumed to be a music expert, must
intervene in the system in two places.

g , C β

First, the user deﬁnes system settings C γ

g that cor-
respond to the selection of input idioms and of arguments
respectively. Second, after the run completes, he or she eval-
g.
uates the system output via Aι

g, which generate blends,

](e∗), in which the aesthetic Aβ,γ

The system’s primary responsibilities take place through
and
the creative acts E
(a uniﬁed label for
S[aβ,γ
assoc and asym, which are deﬁned anew in each run, based
on a ﬁxed translation of the user’s arguments, as speciﬁed in
the previous section) is applied to rate the possible blends,
and select to a ﬁnal extended transition matrix.

g

g

g

Therefore, the key idea behind what has been imple-
mented so far is an ‘automated ranking/evaluation’ step that
](e∗) according to
guides the selection of blends, S[aβ,γ
the arguments deﬁned by the user. The development of the
programmatic components that operationalise this process
has relied on both computer science and musicological in-
sights. This approach has been characterised as meaningful
per se through informal feedback provided by musical ex-
perts – but is perhaps especially valuable because it consti-
tutes a prototype for more involved automated evaluation of
computer-generated harmonic spaces.

Indeed, the next step towards the development of a more
autonomously creative system using the same architecture is
fairly clear: future work would need to ‘close the loop’ com-
putationally, connecting the evaluation of generated tran-
sition matrices with the parameter-setting (i.e., argumenta-
tion) stage, and making this run autonomously to reﬁne the
system’s behavior. This as-yet hypothetical situation is il-
lustrated in the box P2.

Here, the programmer has translated some of the user-
g], and invented a meta-
m deﬁning a system component that can au-

speciﬁed aesthetics into code T [Aι
level concept C α

g )(cid:105)
g , C γ

g = (cid:104)T (C β
Aβ,γ
(cid:104)E
g(cid:105)∗ = C 
g = (cid:104)S[aβ,γ
eζ

g

g

p(aβ,γ
)
](e∗)(cid:105)

P1

(cid:104)Aι

g)(cid:105)
g(eζ

C ι

g)(eζ

p(t(aι
g = (cid:104)T (C β
Aβ,γ
(cid:104)E
g(cid:105)∗ = C 
g = (cid:104)S[aβ,γ
eζ

g)) = (cid:104)C α
m(cid:105)
g )(cid:105)
g , C γ
p(aβ,γ
)
](e∗)(cid:105)

p

g

P2

(cid:104)T [Aι

g)(cid:105)
g](eζ

Figure 5: The current implementation P1 prototypes auto-
mated evaluation of blends according to user’s arguments;
this points to a proposed future implementation P2 with fur-
ther automation.

tomatically apply these aesthetics to the generated transition
g as in order to automatically generate new system
matrices eζ
g , C β
settings C γ
g .

Conclusion, Discussion and Future Work

In this paper, we described a methodology for harmonic
blending and we proposed a creative system that assists
musicologists with the evaluation and enhancement of har-
monic innovation. We deﬁned some harmonic features of
chord transitions utilised for evaluating blends of transitions,
leading to the invention of novel harmonic spaces. The sys-
tem allows a musicologist to specify arguments over these
features that are taken into account in the generation of new
harmonic spaces. The music expert can then assess whether
the new harmonic idiom makes musicological sense and re-
adjust the arguments to explore alternative blends that can
potentially produce better harmonic spaces.

The main advantage of the current system is the agile in-
teraction through which the user can express desirable prop-
erties over the transition blends and their argument-based
evaluation in order to produce musically meaningful results.
The added value of argumentation is the ranking/evaluation
of blended transition – obtained by conceptual blending of
two input transition belonging to two musical idioms – by
answering questions which abstract several properties of
chord transitions. On the other hand, the evaluation of the
creative output of the system, i.e., an extended harmonic
space that includes blended transitions, is carried out by the
user via an introspective argumentative dialogue.

In a future work we intent to use the argumentation-based
process for evaluating the blended harmonisations of user
deﬁned melodies, i.e., actual music output. Additionally,
mapping the properties of the blended idiom or, at a latter
stage of a harmonised melody, back to the parameter-setting
stage opens an interesting direction for future research and
further improvements of the system. The added value of
argumentation can be stressed, for instance, by letting the
system suggest possible reﬁnements of the initial user ar-
guments, progressively converting part of the introspective
user evaluation into a more explicit format. For example,
a future version of the system would be based on identify-
ing harmonic features of the input spaces that automatically
suggest an ‘optimal’ set of initial arguments. The current
version of the system is an already-usable prototype on the
way towards the development of a more autonomous cre-
ative system.

References

Amgoud, L., and Prade, H. 2009. Using arguments for
making and explaining decisions. Artiﬁcial Intelligence
173(3-4):413–436.

Antovic, M. 2009. Musical Metaphors in Serbian and Ro-
mani Children: An Empirical Study. Metaphor and Sym-
bol 24(3):184–202.

Antovic, M. 2011. Musical metaphor revisited: Primitives,
universals and conceptual blending. Universals and Con-
ceptual Blending (February 17, 2011).

Atkinson, K.; Bench-Capon, T.; and McBurney, P. 2004.
In Proc. of the Fourth
Justifying practical reasoning.
Workshop on Computational Models of Natural Argument
(CMNA’04), 87–90.

Bench-Capon, T. J. M. 2003. Persuasion in practical argu-
ment using value-based argumentation frameworks. Jour-
nal of Logic and Computation 13(3):429–448.

Bonet, B., and Geffner, H. 1996. Arguing for decisions:
A qualitative model of decision making. In Proc. of the
12th Conference on Uncertainty in Artiﬁcial Intelligence
(UAI’96), 98–105.

Cambouropoulos, E.; Kaliakatsos-Papakostas, M.; and
Tsougras, C. 2014. An idiom-independent representa-
tion of chords for computational music analysis and gen-
eration. In Proceeding of the joint 11th Sound and Mu-
sic Computing Conference (SMC) and 40th International
Computer Music Conference (ICMC), ICMC–SMC 2014.
Cambouropoulos, E.; Katsiavalos, A.; and Tsougras, C.
Idiom-independent harmonic pattern recognition
2013.
In In
based on a novel chord transition representation.
Proceedings of the 3rd International Workshop on Folk
Music Analysis (FMA2013), FMA 2013.

Cambouropoulos, E. 2012. A Directional Interval Class
Representation of Chord Transitions. In In Proceedings
of the Joint Conference ICMPC-ESCOM 2012 (12th In-
ternational Conference for Music Perception and Cogni-
tion, & 8th Conference of the European Society for the
Cognitive Sciences of Music), ICMPC-ESCOM 2012.

Colton, S.; Pease, A.; Corneli, J.; Cook, M.; and Llano, T.
2014. Assessing progress in building autonomously cre-
ative systems.
In Ventura, D.; Colton, S.; Lavrac, N.;
and Cook, M., eds., Proceedings of the Fifth International
Conference on Computational Creativity.

Colton, S.; Pease, A.; Corneli, J.; Cook, M.; Hepworth, R.;
and Ventura, D. 2015. Stakeholder groups in computa-
tional creativity research and practice. In Besold, T. R.;
Schorlemmer, M.; and Smaill, A., eds., Computational
Creativity Research: Towards Creative Machines, Think-
ing Machines: Studies in Computational Cognition. At-
lantis - Springer.

Confalonieri, R.; Schorlemmer, M.; Plaza, E.; Eppe, M.;
Kutz, O.; and Pe˜naloza, R. 2015. Upward Reﬁnement
for Conceptual Blending in Description Logic – An ASP-
In Interna-
based Approach and Case Study in EL++.
tional Workshop on Ontologies and Logic Programming

for Query Answering, International Joint Conference on
Artiﬁcial Intelligence (IJCAI) 2015.

Corneli, J.; Pease, A.; Colton, S.; Jordanous, A.; and Guck-
elsberger, C. 2015. Modelling serendipity in a computa-
tional context.

Dung, P. M. 1995. On the acceptability of arguments and its
fundamental role in nonmonotonic reasoning, logic pro-
gramming and n-person games. Artiﬁcial Intelligence
77(2):321 – 357.

Eppe, M.; Confalonier, R.; Maclean, E.; Kaliakatsos-
Papakostas, M.; Cambouropoulos, E.; Schorlemmer, M.;
Codescu, M.; and K¨uhnberger, K.-U. 2015a. Compu-
tational invention of cadences and chord progressions by
In International Joint Con-
conceptual chord-blending.
ference on Artiﬁcial Intelligence (IJCAI) 2015.

Eppe, M.; Maclean, E.; Confalonieri, R.; Kutz, O.; Schor-
lemmer, M.; and Plaza, E. 2015b. ASP, Amalgamation,
and the Conceptual Blending Workﬂow. In Calimeri, F.;
Ianni, G.; and Truszczynski, M., eds., Logic Program-
ming and Nonmonotonic Reasoning, volume 9345 of Lec-
ture Notes in Computer Science. Springer International
Publishing. 309–316.

Fauconnier, G., and Turner, M. 2002. The Way We Think:
Conceptual Blending And The Mind’s Hidden Complexi-
ties. Basic Books.

Goguen, J., and Harrell, D. F. 2010. Style: A Computational
and Conceptual Blending-Based Approach. In Argamon,
S., and Dubnov, S., eds., The Structure of Style: Algorith-
mic Approaches to Understanding Manner and Meaning.
Berlin: Springer. 147–170.

Goguen, J. 2006. Mathematical Models of Cognitive Space
In Andler, D.; Ogawa, Y.; Okada, M.; and
and Time.
Watanabe, S., eds., Reasoning and Cognition, volume 2 of
Interdisciplinary Conference Series on Reasoning Stud-
ies. Keio University Press.

Jordanous, A. 2010. A ﬁtness function for creativity in jazz
improvisation and beyond. In Proceedings of the Interna-
tional Conference on Computational Creativity, 223–227.
Kaliakatsos-Papakostas, M., and Cambouropoulos, E. 2014.
Probabilistic harmonisation with ﬁxed intermediate chord
In Proceeding of the joint 11th Sound and
constraints.
Music Computing Conference (SMC) and 40th Interna-
tional Computer Music Conference (ICMC), ICMC–SMC
2014.

Kaliakatsos-Papakostas, M.; Zacharakis, A.; Tsougras, C.;
and Cambouropoulos, E. 2015. Evaluating the General
Chord Type representation in tonal music and organising
GCT chord labels in functional chord categories. In Pro-
ceedings of the 4th International Conference on Music In-
formation Retrieval (ISMIR 2015).

Pollock, J. 1992. How to reason defeasibly. Artiﬁcial Intel-

ligence Journal 57:1–42.

Ritchie, G. D. 2007. Some empirical criteria for attributing
creativity to a computer program. Minds and Machines
17:67–99.

Schorlemmer, M.; Smaill, A.; K¨uhnberger, K.-U.; Kutz, O.;
Colton, S.; Cambouropoulos, E.; and Pease, A. 2014.
Coinvent: Towards a computational concept invention
theory. In 5th Int. Conf. on Computational Creativity.

Simon, I.; Morris, D.; and Basu, S. 2008. Mysong: Auto-
matic accompaniment generation for vocal melodies. In
Proceedings of the SIGCHI Conference on Human Fac-
tors in Computing Systems, CHI ’08, 725–734. New York,
NY, USA: ACM.

Zacharakis, A.; Kaliakatsos-Papakostas, M.; and Cam-
bouropoulos, E. 2015. Conceptual blending in music
cadences: A formal model and subjective evaluation. In
Proceedings of the 4th International Conference on Music
Information Retrieval (ISMIR 2015).

Zbikowski, L. M. 2002. Conceptualizing Music: Cognitive
Structure, Theory, and Analysis. Oxford University Press.

