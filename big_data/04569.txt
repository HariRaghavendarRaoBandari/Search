6
1
0
2

 
r
a

 

M
5
1

 
 
]

C
C
.
s
c
[
 
 

1
v
9
6
5
4
0

.

3
0
6
1
:
v
i
X
r
a

Projective cofactor decompositions of Boolean functions and the

satisﬁability problem

Madhav Desai

madhav@ee.iitb.ac.in

Virendra Sule

vrs@ee.iitb.ac.in

Department of Electrical Engineering

Indian Institute of Technology Bombay, India

March 16, 2016

Abstract

Given a CNF formula F , we present a new algorithm for deciding the satisﬁability (SAT)
of F and computing all solutions of assignments. The algorithm is based on the concept of
cofactors known in the literature. This paper is a fallout of the previous work by authors
on Boolean satisﬁability [11, 12, 13], however the algorithm is essentially independent of the
orthogonal expansion concept over which previous papers were based. The algorithm selects
a single concrete cofactor recursively by projecting the search space to the set which satisﬁes
a CNF in the formula. This cofactor is called projective cofactor. The advantage of such
a computation is that it recursively decomposes the satisﬁability problem into independent
sub-problems at every selection of a projective cofactor. This leads to a parallel algorithm
for deciding satisﬁability and computing all solutions of a satisﬁable formula.

Category: cs.CC, cs.SC, ms.RA
ACM class: I.1.2, F.2.2, G.2
MSC class: 03G05, 06E30, 94C10.

1

Introduction

In this paper we consider the problem of deciding satisﬁability of a Boolean equation

F (x1, . . . , xn) = 1

and that of computing all satisfying assignments of variables xi in the Boolean algebra B0 =
{0, 1}. This is a celebrated problem of computer science with vast applications [2, 7, 5]. We
shall denote by B(n) the Boolean algebra of all Boolean functions f : Bn → B of n variables
over a Boolean algebra B. For all other notations on Boolean functions we refer to [3] and to
[6] for satisﬁability literature.

Although this paper is a sequel to previous papers [11, 12, 13] in which the satisﬁability of
the Boolean equation F = 0 was also considered, the central issue addressed in these papers
was that of representation of Boolean functions F in several variables in the Boole-Shannon
expansion form and to express the satisﬁability and all solutions of a satisﬁable equation in

1

terms of the expansion co-eﬃcient functions with respect to orthonormal functions. In [13] it
was shown that actually the orthonormality itself was not necessary for such an expansion and
the expansion formula was vastly generalized. To recapitulate the ideas we shall re-state these
results of [13] in a comprehensive form as follows [13, theorem 1,2, corollary 1].

Theorem 1. Let G = {g1, g2, . . . gm} be a set of non-zero Boolean functions and a Boolean
function f be such that

f ≤ g1 + g2 + . . . + gm

Then,

1. f can be expressed as

f = α1.g1 + α2.g2 + . . . + αm.gm

(1)

where each αi, i = 1, 2, . . . m, is a Boolean function, called cofactor of f wrt gi, which
can be chosen freely in the interval [f.gi, f + g′

i].

2. f = 0 is consistent iﬀ for some i the system of equations αi = 0 and gi = 1 is consistent,
(i.e. αi = 0 has a solution on the set of satisfying assignments of gi for some i) for an
arbitrary choice of cofactor αi in its interval of existence.

3. All solutions of f = 0 arise as the union of all solutions of systems αi = 0, gi = 1

whenever the later systems are consistent.

Hence this expansion of f in terms of gi gives decomposition of the set of all satisfying
assignments for f = 0 in terms of independent problems. Such a decomposition is thus of great
importance for computation. In fact as the later result [13, corollary 2] shows an algorithm
for satisﬁability of a CNF formula F and computation of all satisfying solutions does not
require actual computation of the cofactors αi. The algorithm developed requires generation of
independent reduced formulas fi at the satisfying assignments of gi. This algorithm can thus
be called (using terminology from logic) as the symantic decomposition algorithm.

1.1 Transformational algorithm for satisﬁability

In this paper we also take up the problem of describing all satisfying assignments of a CNF
formula F

m

F =

Ci

Yi=1

(2)

where Ci are clauses, from the point of view of transformation of variables. The central idea
of the algorithm proposed in this paper is to transform variables so that they successively map
to the satisfying set of the partial clauses. This leads to yet another type of a decomposition
of F which gives an algorithm for satisﬁability and computation of all solutions. This may be
called a transformational decomposition. Using this central idea we propose in this paper a
new algorithm for satisﬁability of CNF formulas.

2

2 Properties of cofactors and construction

In [13] several properties of cofactors of Boolean functions f relative to a base set {gi} were
derived. For completeness these are summarized again here along with new properties. The
cofactors αi in the expansion shown in Eq. (1) can be thought of as kind of quotients and their
interval of existence is given in the above theorem. We continue with the notation Ξ(f, g) to
denote the members of the set of cofactors of f with respect to g. From the basic deﬁnition
of a cofactor [13, Deﬁnition 1] it follows that elements of Ξ(f, g) are those functions which are
restrictions of f on gON (i.e. match exactly with f for all points on gON ). Algebraically all
such cofactors belong to the interval [f g, f + g′] and conversely every function in this interval
is a cofactor. We call f g the minimal cofactor and f + g′ as the maximal cofactor.

2.1 Algebra of co-factors

Some of the additional algebraic properties of cofactors are given below. For any two subsets
of Boolean functions A, B, we deﬁne

A + B = {u + v : u ∈ A, v ∈ B}

A.B = {u.v : u ∈ A, v ∈ B}

A′ = {u′ : u ∈ A}

Proposition 1. Let f , g, h be arbitrary Boolean functions. Then

1. Ξ(f, g) + Ξ(f, h) = Ξ(f, g + h).

2. Ξ(f, g).Ξ(f, h) = Ξ(f, g.h) as sets.

3. If g ≤ h then Ξ(f, h) ⊂ Ξ(f, g).

4. Ξ(f + h, g) = Ξ(f, g) + Ξ(h, g).

5. Ξ(f.h, g) = Ξ(f, g).Ξ(h, g).

6. Ξ(f ′, g) = Ξ(f, g)′.

The following identity also holds

Proposition 2.

Ξ(f, g.h) = {u.v|u ∈ Ξ(f, g), v ∈ Ξ(u, h)}

Proof :By the deﬁnition of u, v, we see that u.g = f.g and v.h = u.h. Thus,

(u.v).(g.h) = (u.g).(v.h)

= (f.g).(u.h)

= (u.g).(f.h)

= (f.g).(f.h)

= f.(g.h)

3

so that u.v ∈ Ξ(f, g.h).

✷
The expansion shown in Equation 1 expresses f in terms of cofactors wrt a base set {gi}.

We ﬁrst show an example for computation of minimal and maximal cofactors.

Example 1. Consider f = x′

1x2 + x2x3 + x1x′

3 and C = (x′

1 + x3) then

f C = x′

1x2 + x2x3 = x2C

which is the minimal cofactor in Ξ(f, C) while

f + C ′ = f

hence maximal Ξ(f, C) is f itself. A general cofactor in Ξ(f, C) is

f C + pC ′ = x2(x′

1 + x3) + p(x1x′

3)

where p is an arbitrary Boolean function.

3 Projective cofactors

Suppose that f and g 6= 0 are Boolean functions in B0(n). We introduce a special class of
cofactors called projective cofactors in Ξ(f, g). Consider a projection transformation Pg : Bn
0 →
Bn

0 onto gON (the set of elements on which g evaluates to 1) deﬁned as follows:

Pg(x) = (cid:26) x

yx ∈ gON

if g(x) = 1
if g(x) = 0

where yx is an arbitrary element in gON (the element yx ∈ gON may be chosen independently
for each x). One possible choice is to select a ﬁxed y ∈ gON and to set yx = y for all x. Thus
Pg projects the entire space onto the ON -set of g. With respect to g and Pg, we can deﬁne a
function

ζ[f, g, Pg](x) = (cid:26) f (x)

f (Pg(x))

if g(x) = 1
if g(x) = 0

Thus ζ[f, g, Pg] depends on Pg which in turn depends on the choice of elements yx in gON .
Hence this is a set of functions parametrized by the choice of elements yx. Further, this function
matches with the restriction of f on gON and every such ζ is a cofactor in Ξ(f, g) and also
belongs to the interval [f g, f + g′]. We call all such cofactors, the projective cofactors of g in
f . (Note that g is always non-zero). This concept of a projective cofactor is a generalization of
the restrict and constrain operators described by Coudert and Madre in [4].

Some properties of projective cofactors are easy to establish.

1. If g ≤ f , then ζ[f, g, Pg] = 1 for all Pg.

2. If f 6= 0 and f ≤ g, then it is possible to ﬁnd a projection Pg such that ζ[f, g, Pg] = 1.

3. If f.g = 0, then ζ[f, g, Pg] = 0 for any projection Pg.

4

Further,

ζ[f1.f2, g, Pg] = ζ[f1, g, Pg].ζ[f2, g, Pg]

ζ[f1 + f2, g, Pg] = ζ[f1, g, Pg] + ζ[f2, g, Pg]

ζ[f ′, g, Pg] = ζ[f, g, Pg]′

(3)

(4)

(5)

The importance of projective co-factors lies in the following lemma.

Lemma 1. Let f, g, h be Boolean functions with f = g.h. Then f is satisﬁable if and only if,

1. g is satisﬁable and

2. for any projection Pg, ζ[f, g, Pg] is satisﬁable.

Proof :Suppose that f is satisﬁable and f (z) = 1. Then g(z) = 1. Hence z belongs to
gON . Let Pg be any projection on gON then ζ[f, g, Pg](z) = f (Pg(z)) = f (z) = 1. This proves
necessity.

Conversely, suppose that g(x) = 1 for some x and for some z and Pg, ζ[f, g, Pg](z) = 1. But
ζ[f, g, Pg](z) = f (Pg(z)) = g(Pg(z))h(Pg (z)) = h(Pg(z)) since Pg(z) is in gON . Let u = Pg(z),
then it follows that as u belongs to gON , g(u) = 1 and h(u) = 1 from the previous statement.
Hence f (u) = g(u)h(u) = 1 and so f is satisﬁable.
✷

From this result, we infer the following:

Corollary 1. Let f = g.h. Choose an arbitrary projection Pg onto g.

1. If g and ζ[f, g, Pg] are independently satisﬁable then f is satisﬁable.

2. If ζ[f, g, Pg](x) = 1, then if x∗ = Pg(x), we observe that f (x∗) = 1. That is, from a

solution of ζ[f, g, Pg] = 1, we can ﬁnd a solution of f = 1.

3. The full set of solutions to f = 1 is entirely described by

{Pg(x) : ζ[f, g, Pg](x) = 1}

4. If one of g, ζ[f, g, Pg] is identically 0, then f is identically 0.

Thus, to check satisﬁability of f , it is enough to independently check the satisﬁability of g and
ζ[f, g, Pg] for any choice of Pg. Further, from Equation 3, it follows that ζ[f, g, Pg] = ζ[h, g, Pg].
This leads to a decomposition technique in which the satisﬁability of f can be determined in
terms of simpler functions g and ζ[h, g, Pg].

The following result follows directly from Lemma 1.

Theorem 2. Let f = h1.h2. . . . hk, with hi 6= 0 for each i. For i = 1, 2, . . . k, let Pi be an
arbitrary projection on to hi. Then f is satisﬁable, if and only if the following functions are
satisﬁable:

f1 = h1

f2 = ζ[h2, f1, P1]

f3 = ζ[ζ[h3, f1, P1], f2, P2]

. . .

fk = ζ[ζ[. . . ζ[hk, f1, P1], f2, P2] . . .], fk−1, Pk−1]

5

where, for j = 1, 2, . . . (k − 1), Pj is a projection onto fj. Further, if fk(x) = 1, then we can
ﬁnd an x∗ such that f (x∗) = 1 by setting

x∗ = P1(P2(P3(. . . Pk−1(x)))..)

(6)

Proof :For j = 1, 2, . . . k, let uj = Πk

i=j hi. Then f = h1.u2 and ui = hi.ui+1 for i =
1, 2, . . . , k − 1. We observe that f is satisﬁable if and only if h1 is satisﬁable and if ζ[u2, h1, P1]
is satisﬁable. But ζ[u2, h1, P1] = ζ[h2, h1, P1].ζ[u3, h1, P1]. Thus ζ[u2, h1, P1] is satisﬁable if and
only if f2 = ζ[h2, h1, P1] is satisﬁable and ζ[ζ[u3, h1, P1], f2, P2] is satisﬁable for a projection P2
onto f2. Continuing in this fashion gives us the result. The conclusion of Eq (6) follows from
Corollary 1.
✷
This result leads to a parallel algorithm to solve the satisﬁability problem. This algorithm

is described in Section 4.

4 An algorithm for SAT using projective co-factors

From Theorem 2, we obtain the algorithm shown in Figure 1. The algorithm starts with a
function deﬁned as a product C1.C2. . . . Cn. At each step of the algorithm, we obtain a set of
potentially simple active functions out of which we select one and check its satisﬁability. In
going from one step to the next, we form projective cofactors of the remaining elements in the
set with the selected function (these can be performed in parallel). The algorithm stops when
the set of elements has only one element whose satisﬁability needs to be checked.

We observe the following:

• The inner loop can be parallelized.

• Satisﬁability checking is performed only on the functions fi. This step can be very eﬃcient

if each fi depends on a small set of variables.

• The main reduction step is the computation of ζ[wj , fi, Pi], which can be eﬃcient if wj

and fi depend on a small number of variables.

• The projections P1, P2, . . . Pk−1 can be chosen arbitrarily.

In practice, the choice of

projections may have an impact on the eﬀort involved in computing ζ[wj, fi, Pi].

4.1 Choosing a projection P onto a function g, and the calculation of ζ[f, g, P ]

The critical step in the algorithm described in Figure 1 is the computation of ζ[f, g, P ] given
functions f, g and a projection P onto g. In general, f and g are available as Boolean formulas,
and we are interested in obtaining a formula for ζ[f, g, P ]. Given g 6= 0, there can, in general, be
many projections P onto g. We illustrate a simple technique to select a projection and express
it as a set of boolean formulas. Once the projection is available as a set of boolean formulas,
the actual calculation of a formula for ζ[f, g, P ] can then be carried out easily.

First, we consider the case that g is a clause. Suppose that

g = x + y + z

6

Given f = h1.h2. . . . hk, return SAT status, and assignment A
status = true, A ← empty
Set w1 ← h1, w2 ← h2, . . . wk ← hk
for i = 1; i ≤ k; i = i + 1 do

fi ← wi
if fi is not SAT then

status = false
break

end if
if i = k then

break

end if
select projection Pi onto fi
for j = i + 1; j ≤ k; j = j + 1 do

wj ← ζ[wj , fi, Pi]

end for

end for
if status then

A ← P1(P2(. . . Pk−1( SAT-assignment for fk))..)

end if
return (status, A)

Figure 1: A simple parallel algorithm for SAT based on projective decomposition

7

We ﬁrst pick a variable which appears in the clause as a pivot variable. Lets say we pick z
as the pivot variable. Now the projection must take the point x = 0, y = 0, z = 0 and map
it to some element in the on-set of g. We achieve this by mapping x = 0, y = 0, z = 0 to
x = 0, y = 0, z = 1, that is, by ﬂipping the value taken by the pivot variable when C = 0. Thus,
the projection P chosen in this fashion maps

Note that

x → x

y → y
z → z ⊕ g′

z ⊕ g′ = z ⊕ (x′y′z ′)

= z + x′y′

For this choice of P , we see that

ζ[f, g, P ](x, y, z) = f (x, y, z + x′y′)

If g is a product of clauses, say g = C1.C2. . . . Cm, then a projection onto g can be constructed

as a composition of projections onto C1, C2, . . . Cm. That is,

so that for x,

Pg = PC1 o PC2 o . . . o PCm

Pg(x) = PC1(PC2 (PC3 (. . . PCm(x)))

For example, if g = (x + y + z).(x′ + y′ + z ′), and if we choose the pivot variable to be z for the
projections onto C1 = (x + y + z) and C2 = (x′ + y′ + z ′), then the ﬁnal projection is

where Px′+y′+z ′ with pivot at z is given by

Px+y+z(Px′+y′+z ′(x))

x → x

y → y
z → z ⊕ (x′ + y′ + z ′)′ = z ⊕ x.y.z = z.(x′ + y′)

and Px+y+z with pivot at z is (as derived above)

x → x

y → y
z → z ⊕ (x + y + z)′ = z ⊕ x′.y′.z ′ = z + x′.y′

8

Composing these two, we get Pg as

x → x

y → y
z → z.(x′ + y′) + x′y′

Another interesting case is when g is an XOR clause. Suppose that

g = x ⊕ y ⊕ z

and we choose z as the pivot variable. Then the projection operator is deﬁned by

x → x

y → y
z → g′ ⊕ z = 1 ⊕ x ⊕ y

That is, z is replaced by an XOR-clause. For such a projection, we observe that the projective
cofactoring step in the algorithm in Figure 1 reduces to variable elimination in the XOR-sat
case.

For an arbitrary function g, we assume that an element of the onset of g is known. Let this
element be (u1, u2, . . . un). Note that if g does not depend on variable xi, then we may choose
ui = xi. Then a projection onto g can be determined as follows: map the point (x1, x2, . . . , xn)
to itself when it is in the on-set of g, and onto (u1, u2, . . . un) when it is not in the on-set of g.
The projection then becomes

x1 → g.x1 + g′.u1
x2 → g.x2 + g′.u2

. . .
xn → g.xn + g′.un

This can be simpliﬁed further. For each xi which does not appear in g, we set ui = xi. If, for
some q, uq = 0, then g.xq + g′.uq can be simpliﬁed to g.xq, and when uq = 1, then g.xq + g′.uq
can be simpliﬁed to g′ + xq. Thus, this projection takes

when g does not depend on xi
xi
when ui = 0
g.xi
g′ + xi when ui = 1

xi → 


This is not the only way to generate projections onto a function g. The most general
procedure would be to select, for each element x such that g(x) = 0, an element ux such that
g(ux) = 1. The resulting Boolean functions would then need to be simpliﬁed to obtain formulas
describing the projection. Finding the projection with the simplest representation formula is
an unsolved problem.

9

5 Some Examples

We will illustrate the use of Theorem 2 and the algorithm shown in Figure 1 on two simple
examples.

5.1 A satisﬁable function

Consider f deﬁned by

f = C1C2C3C4 = (x′ + y + w)(y′ + z + w′)(x + z + w′)(x + z ′ + w′)

This function is satisﬁable. We use Theorem 2 to conﬁrm that this is so.

• Let f1 = C1. We choose y as the pivot variable to determine the projection P1 onto C1 to
be the one which maps x = 1, y = 0, w = 0 to x = 1, y = 1, w = 0. In this case, we choose
y to be the pivot because it is the variable that occurs least frequently across C2, C3, C4.
Thus P1 maps

• We compute

x → x
y → y + x.w′
z → z

w → w

f2 = ζ[C2, f1, P1]

= ((y + xw′)′ + z + w′)
= (y′ + w′ + z) = C2

Also, since y does not appear in C3, C4, we see that

ζ[C3, f1, P1] = C3

ζ[C4, f1, P1] = C4

• For the projection P2 onto f2, we once again choose y as the pivot since it is the least

frequently occurring variable in C3, C4. Thus, P2 maps

• Using P2, we obtain

x → x

y → y.(w + z)

z → z

w → w

f3 = ζ[ζ[C3, f1, P1], f2, P2]

= ζ[C3, f2, P2]

= C3

because y does not occur in C3. Similarly, ζ[C4, f2, P2] = C4.

10

• For the projection P3 onto f3, choose w as the pivot variable to get a projection which

maps

• Finally, using P3

x → x

y → y

z → z

w → w.(x + z)

f4 = ζ[ζ[ζ[C4, f1, P1], f2, P2], f3, P3]

= ζ[ζ[C4, f2, P2], f3, P3]

= ζ[C4, f3, P3]

= C4

Thus, by Theorem 2, we observe that since f1, f2, f3 and f4 are satisﬁable, f is satisﬁable.

5.2 A non-satisﬁable example

Let

f = C1C2C3C4 = (x + y)(x + y′)(x′ + y)(x′ + y′)

In this case the function f is not satisﬁable. Let us proceed with the algorithm implied by
Theorem 2 to conﬁrm this.

• Let f1 = C1 = (x + y). Choose P1 to be the projection that maps x = 0, y = 0 to

x = 1, y = 1. We ﬁnd that

Choose P2 to be the projection that maps x = 0, y = 1 to x = 1, y = 0.

f2 = ζ[C2, f1, P 1] = (x + y′)

• Using f1, P1, f2, P2:

and

ζ[C3, f1, P1] = (x′ + y)

f3 = ζ[ζ[C3, f1, P1], f2, P2]

= ζ[x′ + y, f2, P2]
= (x ⊕ y)′

Choose P3 to map x = 0, y = 1 and x = 1, y = 0 to x = 1, y = 1. This projection maps
both x and y to x + y.

• Using f1, P1, f2, P2, f3, P3, we get

f4 = ζ[ζ[ζ[C4, f1, P1], f2, P2], f3, P3]

= ζ[ζ[x ⊕ y, f2, P2], f3, P3]

= ζ[x ⊕ y, f3, P3]

= 0

Thus, f is not satisﬁable.

11

6 Conclusions

Given a Boolean function f (x1, x2, . . . , xn) of n variables, the satisﬁability question asks if there
is a point at which f evaluates to 1. Analogous consistency problem is to determine whether
f = 0 has a solution. Decompositions of f can help in solving such problems.

If f satisﬁes

f ≤ g1 + g2 + . . . gm

where g1, g2, . . . gm are non-zero functions, then f can be written as

f = α1.g1 + α2.g2 + . . . αm.gm

where αi is an arbitray Boolean function in the interval [f.gi, f + g′
i] [13]. Such an αi is termed
a co-factor of gi in f . For this decomposition, f is satisﬁable if and only if αi.gi is satisﬁable
for some i ∈ {1, 2, . . . , m}. Thus, the original satisﬁability problem can be solved as m parallel
and independent problems. If the functions αi.gi are simpler than f , there can be substantial
reduction in computational eﬀort.

In this paper, we have introduced the notion of a projective co-factor: This is described
by g a non-zero Boolean function of n variables and a projection Pg from Bn
0 mapping
elements of Bn
0 to the ON-set of g which is identity map for elements in the ON-set of g. With
respect to such a projection, we can deﬁne, for any function f , a projective co-factor of g in
f (denoted by ζ[f, g, Pg] which maps x to f (Pg(x)). We have shown that if f = g.h, then f
is satisﬁable if and only if g, and ζ[h, g, Pg] are independently satisﬁable for any projection Pg
onto g. This result enables us to check the satisﬁability of f by separately (hence, in parallel)
checking the satisﬁability of two potentially simpler functions g and ζ[h, g, Pg].

0 → Bn

From the projective decomposition result, we obtain a new easily parallelizable transfor-
mational algorithm for the solution of a general satisﬁability problem: check the satisﬁability
of f = g1.g2. . . . gm where each gi is a clause (or in the case of XOR-sat, an XOR-clause).
Further algorithmic development and heuristics need to be incorporated for eﬀective practical
implementation of this algorithm.

References

[1] George Boole. An Investigation of the Laws of thought. Walton, London, 1854.

[2] D. Knuth. Art of Computer Programming vol. 4.

[3] F. M. Brown. Boolean reasoning. The logic of Boolean equations. Dover, 2006.

[4] O. Coudert, J. Madre, A Uniﬁed Framework for the Formal Veriﬁcation of Sequential

Circuits, Proceedings of ICCAD, pp. 126-129, IEEE Press 1990.

[5] Sergiu Rudeanu. Boolean functions and equations. North Holland, Amsterdam, 1974.

[6] A. Biere, M. Heule, Hans van Maaren, T. Walsh (Eds). Handbook of Satisﬁability. IOS

Press, 2009.

[7] Yves Crama and Peter Hammer. Boolean functions. Theory, algorithms and applica-

tions. Encyclopedia of Mathematics and its applications, vol.142. Cambridge, 2011.

12

[8] Marc Mezard and Andrea Montanari. Information, Physics and Computation. Oxford

University Press, 2009.

[9] Youssef Hammadi and C. M. Wintersteiger. Seven challenges in parallel SAT solving.
Challenge paper AAAI 2012 Sub-Area spotlights track. Association of Advancement of
Artiﬁcial Intelligence.

[10] Kohavi and Jha, Switching and automata theory, Cambridge 2008.

[11] Virendra Sule, Generalization of Boole-Shannon expansion, consistency of Boolean equa-
tions and elimination by orthonormal expansion, arXiv.org/cs.CC/1306.2484v3, Decem-
ber 6, 2013.

[12] Virendra Sule, An algorithm for Boolean satisﬁability based on generalized orthonormal

expansion, arXiv.org/cs.DS/1406.4712v3, July 16, 2014.

[13] M.P. Desai and Virendra Sule, Generalized cofactors and decomposition of Boolean

satisﬁability problems. arXiv.org/cs.DS/1412.2341v1, Dec 7, 2014.

13

