Real-time 3D scene description using Spheres, Cones and Cylinders

Kristiyan Georgiev, Mo’taz Al-Hami, Rolf Lakaemper

1

6
1
0
2

 
r
a

 

M
2
1

 
 
]

V
C
.
s
c
[
 
 

1
v
6
5
8
3
0

.

3
0
6
1
:
v
i
X
r
a

Abstract—The paper describes a novel real-time algorithm for
ﬁnding 3D geometric primitives (cylinders, cones and spheres)
from 3D range data. In its core, it performs a fast model ﬁtting
with a model update in constant time (O(1)) for each new data
point added to the model. We use a three stage approach. The ﬁrst
step inspects 1.5D sub spaces, to ﬁnd ellipses. The next stage uses
these ellipses as input by examining their neighborhood structure
to form sets of candidates for the 3D geometric primitives. Finally,
candidate ellipses are ﬁtted to the geometric primitives. The
complexity for point processing is O(n); additional time of lower
order is needed for working on signiﬁcantly smaller amount of
mid-level objects. This allows the approach to process 30 frames
per second on Kinect depth data, which suggests this approach
as a pre-processing step for 3D real-time higher level tasks in
robotics, like tracking or feature based mapping.

Index Terms—3D Features, Robot Vision, Segment, Circle,

Ellipse, Sphere, Cylinder, Cone, Object Detection, Real-Time.

I. INTRODUCTION

In recent years, most range-sensing based algorithms in
robotics, e.g. SLAM and object recognition, were based on a
low-level representation, using raw data points. The drawbacks
of such a representation (high amount of data, low geometric
information) limits the scalability when processing 3D data. In
3D cases, it is more feasible to base algorithms on mid-level
geometric structures. Mid-level geometric structures, such as
planar patches, spheres, cylinders and cones can be used to
efﬁciently describe a 3D scene. A recent case of how planar
patches can describe a 3D scene is presented in ([4],[9]).
Inspired by these approaches, this paper explains how to ﬁnd
conic features of a scene using cylinders, cones and spheres.
The goal of our work is to extract conic objects from
3D data-sets in real time. Such extraction can be used as a
real-time pre-processing module for 3D feature based tasks
in robotics. This includes scene analysis, SLAM, etc. based
on 3D data. For example, in a recent work which deals with
automatic reconstruction of buildings, [15] expresses the need
for fast geometric primitive recognition algorithm that goes
beyond planes but includes cylinders and spheres, for a more
accurate building representation.

We use a model ﬁtting approach; the speed is gained by a
O(1) model update and dimensionality reduction of 2.5D to
1.5D (a 1D height-ﬁeld, i.e. a single scan row of a range scan).
In total, this achieves a complexity of O(N) + O(M), with N
number of data points and M being number of 2D ellipses,
√
which in average is a low constant k times the number of scan
√
lines, i.e. M = k
N. This totals to a complexity of O(N) +
N) = O(N). The speed achieved by this algorithm allows
O(k

All authors are with the Department of Computer and Information Science,

Temple University, Philadelphia, PA, 19107, USA.
The project is sponsored by the grant ARRA-NIST-10D012 of the National
Institute of Standards and Technology (NIST). Email: lakamper@temple.edu

for processing 30 frames per second on 320x240 Kinect data
on a 2.8GHz desktop computer, implementation in Java.

The paper is organized as follows: after comparison to
related work (Sec.II), we give an overview of the approach
(Sec. III), followed by the ellipse extraction (Sec. IV). Sec. V
covers the computation of the ellipse-neighborhood structure,
followed by the 3D conic object detection. We prove the
applicability to higher level robotic tasks and highlight some
properties of the algorithm with experiments (Sec. VII).

Fig. 1: Flow diagram showing: 1) Input data, 2) Result of ellipse ﬁtting,
3) After removal of elongated ellipses, 4) Ellipse candidate sets based on
proximity. The blue line shows connected components. 5) Resulting sets of
ellipses forming different conical objects 6) Fitted 3D models.

II. RELATED WORK

Object detection and tracking has been long performed in
robot-vision, yet most approaches process 2D RGB images.
We will not compare to these approaches, but limit the related
work to detection based on range data. The problem of sphere
detection has been solved in various ways and to the best
of our knowledge, all previous approaches work on point
clouds directly. None of these approaches make use of a
two step solution (points to ellipses, ellipses to spheres),

978-1-4799-2722-7/13/$31.00 c(cid:13) 2013 IEEE

2

Fig. 2: Intersection between scanning planes (marked green) and geometric primitive (cylinder, cone and sphere) produces conic curves (ellipses, marked
green) with co-linear center points.

which reduces dimensionality of the problem from 3D to 1.5D
subsets (horizontal scan lines with distance data).

transform [16], [14], RANSAC [13], Kalman ﬁltering [10],
fuzzy clustering [3], to least squares approach [7]. In principle
they can be divided into two main groups: voting/clustering
and optimization methods. The methods belonging to the ﬁrst
group (Hough transform, RANSAC, and fuzzy clustering) are
robust against outliers yet they are relatively slow, require large
memory but have a low accuracy. The second group of ﬁtting
methods are based on optimization of an objective function,
which characterizes a goodness of a particular ellipse with
respect to the given set of data points. The main advantages
of these methods are their speed and accuracy. On the other
hand, the methods can ﬁt only one primitive at a time (i.e. the
data should be pre-segmented before the ﬁtting). In addition,
the sensitivity to outliers is higher than in the clustering
methods. An analysis of the optimization approaches was
done in [2]. There were many attempts to make the ﬁtting
process computationally effective and accurate. Fitzgibbon
et al. proposed a direct least squares based ellipse-speciﬁc
method in [2].

Our approach to ellipse extraction belongs to the second
group as a type of optimization, yet with the advantage of
ﬁnding multiple objects at one time. It was motivated by
the work of [4], [9]. In there, a region growing algorithm is
proposed on point clouds, testing an optimal ﬁt of updated
planes to the current region. This paper extends the work of [4]
from planes to spheres, cylinders and cones and overcomes the
drawbacks, because of the use of a numerically stable ellipse
ﬁtting and the fast O(1) model update.

III. METHOD OVERVIEW

The guiding principal of our work is to look for mid-level
geometric elements (MLEs) in lower dimensional subspaces
and then to extend the data analysis to the missing dimensions
using these MLEs. The advantage is, that the number of MLEs
is signiﬁcantly smaller than the number of data points. In
addition modeling of mid level elements in lower dimensions
is an easier task. In our speciﬁc case of ﬁnding spheres,
cylinders and cones, we are traversing 1.5-dimensional subsets
(horizontal scan lines with distance data) of 3D data. The
modeling of geometric primitives reduces to ﬁnding ellipses.
The intersection of such primitives with the scanning plane
consists of ellipses, see Fig. 2. Therefore, for each scan line,
we traverse its data points iteratively, and try to ﬁt ellipses.
We determine maximal connected subsets of each scan line,

The advantage of the two step solution is, that the higher
amount of data, that comes e.g. with 3D data, is immediately
reduced: the data is decomposed into sets of lower dimensional
spaces, analysis is performed in this lower dimensionality. The
transition to higher dimensions is then performed on mid-level
representation, here: ellipses, signiﬁcantly reducing the data
elements to be analyzed.

An approach that works directly on 3D point data, described
in [11], uses surface normal vectors and forms clusters of
points with similar direction. The clustering decomposition in
[11] stays in the 3D space of the original data, which is a
major difference to our approach.

In general, data modeling with pre-deﬁned structures can
also be solved by the Expectation Maximization (EM) ap-
proach. The system in [8] uses a split-and-merge extended
version of EM to segment planar structures (not conic ele-
ments) from scans. It works on arbitrary point clouds, but it is
not feasible for real time operation. This is due to the iterative
nature of EM, including a costly plane-point correspondence
check in its core. An extension to conic elements would
increase the complexity even further.

A popular solution to ﬁt models to data is Random Sample
Consensus (RANSAC, [1]). Being based on random sampling,
it achieves near-optimal results in many applications, includ-
ing linear ﬁtting (which is the standard RANSAC example).
However, RANSAC fails to model detailed local structures
if applied to the entire data set, since, with small local data
structures, nearly the entire point set appears as outliers to
RANSAC. [12] applies RANSAC on regions created by a
divide and conquer algorithm. The environment is split into
cubes (a volume-gridding approach). If precise enough, data
inside each volume is approximated by planes, and coplanar
small neighboring planes are merged. This approach has sim-
ilarities to ours, in the sense that it ﬁrst builds small elements
to create larger regions. However, their split stays in the third
dimension, while our split reduces the dimensionality from
3D to 1.5D, which makes the small-element generation, i.e.
ellipse, a faster operation. We have a more detailed comparison
to RANSAC in section VII-F.

Ellipse extraction is a crucial step in our solution. There are
many different methods for detection and ﬁtting ellipses. [5]
has done an extensive overview of different methods for de-
tection and ﬁtting ellipses. These methods range from Hough

which ﬁt ellipses within a certain radius interval, and under
an error threshold Tε. This process is performed in an iterative
way, updating currently found ellipses in O(1) by adding the
next candidate point. The ellipses Es
i = (c,r1,r2) in scan line
s are stored as center point c and radius r1 and radius r2.
Traversing each scan line therefore leaves us with a set of
ellipses E = {Es
i }. The set of all ellipses E is decomposed
into subsets of connected components based on ellipse center
proximity.

After ellipse detection, it holds for cylinders and cones,
that the center points of participating ellipses’ center points
are collinear, see Fig. 2, and concyclic for spheres. It
is
therefore sufﬁcient, to scan the connected components for
being collinear or concyclic in order to ﬁnd model candidates.
Please note, that this approach reduces the effort, again, to a
simple line or ellipse ﬁtting, yet now even in the signiﬁcantly
smaller space of center points. Such lines and ellipses from
the center point space are again found with an iterative O(1)
update approach.

Cones, spheres and cylinders are characterized by the
change of radius along the vertical axis. Hence we can
determine, if a connected component of ellipses constitutes
one of the models.

In conclusion, we ﬁnd simple geometric models, ellipses, in
a subspace of reduced dimensionality (1.5D), then perform low
dimensional ﬁtting again in a 1.5D space determined by the
model. This split leads to an addition instead of multiplication
of run times of the sub-tasks, which makes the approach fast.
Please see Fig. 1 for an illustration of the approach.

IV. ELLIPSE EXTRACTION

A well-known non-iterative approach for ﬁtting ellipses on
segmented data (all points belong to one ellipse) is Fitzgib-
bon’s approach described in [2]. It is an optimization approach,
which uses a (6x6) scatter matrix S as shown in Eq. 1,
to solve the problem of ﬁnding the six parameters which
describe an ellipse. A more detailed explanation can be found
in [2] and is out of the scope of this paper. However, it is
important that S has entries Sxpyq = ∑N
i , where p and
q are integers. S has to be decomposed into eigenvalues and
eigenvectors. The 6D vector-solution to describe an ellipse
is the eigenvector corresponding to the smallest eigenvalue.
Though the algorithm is robust and effective, it has two major
ﬂaws. First, the computation of the eigenvalues of Eq. 1 is
numerically unstable. Second, the localization of the optimal
solution is not correct all the time as described by [5].

i=1 xp

i yq

To overcome the drawbacks [5] splits S into three ma-
trices (S1,S2,S3), which are (3x3), see Eq. 2a,b. With this
decomposition, [5] achieves the same theoretical result, but
with improved numerical stability and without the localization
problem.

However, both algorithms, [5] and [2] only ﬁnd a single
ellipse ﬁt on a given set of pre-segmented points. We propose
a solution based on Fitzgibbon’s approach and the numerical
improvement made by [5] to be able to handle non segmented
data, i.e. data containing points not necessarily belonging to
an ellipse and possibly containing disjoint subsets of points

3

Algorithm 1 extractEllipses(Points, THRESHOLD)
while (nextPoint = Points.next()) (cid:54)= NULL do

addPoint(nextPoint)
f itModel()
calculateError()
if error > T HRESHOLD then

removeLastPoint()
saveCurrentModel()
startNewModel()

end if
end while

belonging to different ellipses. Our approach ﬁnds multiple
ellipses in a single pass. We achieve this by performing an
ellipse model update in O(1) and making use of the natural
point order deﬁned by the range sensor, see Algorithm 1. To
perform the O(1) update we store each component of the sum
(Sxpyq) required to form matrices S1,S2,S3. This means when
adding a new point to the existing model, we only have to
perform addition to each of the sum terms, which is a constant
time operation. For a set of N points the model update will
be executed exactly N times, our algorithm can ﬁnd multiple
ellipses in non segmented data in O(N).



Sx4
Sx3y
Sx2y2
Sx3y
Sx2y
Sx2

S = DT D =

(cid:21)

(cid:20)S1S2
 Sx3

ST
2 S3

Sx2y
Sx2

S =

S2 =

Sx3y
Sx2y2
Sxy3
Sx2y
Sxy2
Sxy

Sx2y2
Sxy2
Sy4
Sxy2
Sy3
Sy2

Sx3
Sx2y
Sxy2
Sx2
Sxy
Sx

Sx2y
Sxy2
Sy3
Sxy
Sy2
Sy

Sx2
Sxy
Sy2
Sx
Sy
S1

 Sx4
Sx2

Sx3y
Sx2y2

Sxy
Sx

Sx2y2
Sxy3
Sy4

Sx3y
Sx2y2
Sxy3

Sxy
Sy2
Sy

Sx
Sy
S1



S1 =

 S3 =

Sx2y
Sxy2
Sxy

Sxy2
Sy3
Sy2

(1)


 (2a)

(2b)

A. System Limitations

Being based on ﬁnding ellipses from the conical intersection
of a scanning plane with cylinders, cones and spheres it is
limited with respect to tilting angles that lead to non-elliptical
intersection patterns. The appearance of such patterns depend
on the size of the object (cylinder) and the size and internal
angle (cone). In practice, our system performs robustly on
tilting angles of > 45 degrees, see Fig. 3, yet is naturally
limited when the angle becomes signiﬁcantly larger. One
remedy of this problem (for tilts resulting from rotation around
the z axis, is to also use ellipses found by intersection of
vertical instead of horizontal scanning planes, i.e a 90 degree
rotated sight of the scene, which turns tilts of > 45 into tilts
of < 45. An example of tilted objects is illustrated in Fig. 4
and Fig. 3.

4

Fig. 4: A tilted (rotation around x-axis, tilted towards camera) parking cone,
and ellipses detected (red). Top Left: tilt=5 degrees, Top Right: tilt=20 degrees,
Bottom: tilt=40 degrees. In all cases, the algorithm is able to ﬁt a cone model
(not explicitly shown in ﬁgure).

points using the O(|E |) line/ellipse ﬁtting algorithm, which in
its core again has an O(1) update. For details on incremental
O(n) line detection, please see [4]. Similarly, ellipse models
ﬁtting the center points are extracted, using the method de-
scribed in Sec. IV.

Once sequences of collinear center-points S j are extracted,
the corresponding radii r1i,r22 can be analyzed to detect conic
objects. It is sufﬁcient to examine the radius orthogonal to
scan-lines, r2. Hence, object detection is performed in the
(z,r2), or short: (z,r), space, see Fig. 5.

Fig. 3: Object detection. Top to bottom: RGB image(not used); 3D point
cloud from MS Kinect (307200 points); extracted ellipses after the pre-ﬁlter;
to the right are the ﬁtted conic objects; at the bottom are ﬁtted conic objects
and 3D point cloud. The cylinder in the picture is a cylindrical trash can.

Fig. 5: The three curves represent ellipse radii (R-axis) along the center
lines (Z-axis) of a cylinder (blue), cone (red) and sphere (green half circle)
in (z,r) space.

V. 3D OBJECT EXTRACTION

A. Cylinder

√
n times, where

Once all ellipses are extracted, further processing is per-
formed on these ellipses only; the original point data is not
√
used any longer. This signiﬁcantly reduces the amount of data
used (usually about k
n results from the
number of scan lines vs. the number n of data points in the
entire image, assuming for simplicity a square sized image).
The ellipses are used to form 3D objects, such that centers
of supporting ellipses are co-linear and the centers lie inside
of an error margin φ, the maximum allowed distance between
neighboring ellipses. Only the ﬁrst k neighbors are compared
to eliminate outlier ellipses due to noise. This allows for
selective skipping vertically and choosing better supporting
ellipses for the object.
More formally: The 1.5D ellipse extraction creates a set
E = {Ei}, Ei = (xi,yy,zy,r1i,r2i) of ellipses, with center point
ci = (xi,yi,zi). For our target objects, conic 3D objects, we
are looking for sequences S j = (ci1,ci2, ..,cik) of collinear or
concyclic centerpoints ci. The order of extraction imposes
an order on ellipses Ei ∈ S j ⊂ E , they are ordered in the z-
dimension:

i1 < i2 ⇒ zi1 < zi2

(3)

Due to this order, we can extract collinear/concyclic center-

For a cylinder, r is constant:

fcylinder(z) = r

(4)

In Fig. 5, this is the straight line parallel to the Z-axis. In
practical application, we allow for 5 degrees deviation from
parallel due to noise. Please see also Fig. 2, Left.

B. Cone

For a cone, there is a linear dependency between r and z:

fcone(z) = αz

(5)

In the practical application, the slope of the line should be
greater than a small angular threshold θ (for Kinect data θ =
5deg). See Fig. 5 and Fig. 2, Center.

C. Sphere

For a sphere, the radii describe a circle:
r2 − (z− zi)2

fcircle(z) =

(cid:113)

(6)

The detection of objects and collinear sequences is per-
formed in parallel, again using incremental line (and ellipse)

ﬁtting procedures, yet in different spaces: while the center-
collinearity is detected by a line ﬁtting algorithm in the (x,y,z)
space, the detection of 3D objects is performed by a line ﬁtting
(for cylinders and cones) and ellipse ﬁtting (for spheres) in the
(z,r) space. The incremental order in z reduces the collinearity
ﬁnding to a 1.5D problem. Please note that the same concept
of incremental line/ellipse ﬁtting is utilized to solve tasks not
only in different phases of the algorithm (ﬁrst, ellipse ﬁnding
in scan rows, then line/ellipse ﬁnding on ellipse center points),
but also in different spaces, the decomposed 1.5D data space,
and the (z,r) space. Using the O(1) update principle in all cases
is the main reason for the fast performance of the algorithm.
In addition, the nature of the ﬁtting procedures automatically
separates objects in composed scenes, see e.g. Fig. 6, cylinder
and sphere.

Fig. 6: Results of the algorithm showing ﬁtted 3D geometric models. The
sphere placed on top of a cylinder is successfully recognized as a separate
object.

VI. IMPROVING THE SYSTEM USING KALMAN FILTERING
The data from the Microsoft Kinect sensor suffers from
limited accuracy. The work in [6] shows that there is a direct
relation between the sensor error and the measured distance
ranging from few millimeters (at low range about 1m) up to 4
cm (at far range, about 5m). To improve the data accuracy, we
use a Kalman ﬁlter as a supporting tool to reducing the amount
of errors in the measurement observations. Kalman ﬁltering
is a well known approach to reduce noise from a series of
measurements observed over time for a dynamic linear system.
In our experiments, we utilize the Kalman ﬁlter to increase
precision, and to be able to do object tracking. Please note that
a Kalman ﬁlter takes a series of measurements. Our system,
due to its real-time behavior, is able to feed data into the
Kalman ﬁlter at a high frequency (about 30Hz), which makes
the combination of Kalman ﬁltering with our approach feasible
and useful.

VII. EXPERIMENTS

A. Basic Test: Object detection, detection speed

We acquire 3D range data from a Microsoft Kinect sen-
sor to demonstrate the algorithms basic functionality, object
recognition, using the methods described in Sec. V. The scene
consist of a trash can (cylinder), parking cone and exercise
ball (sphere) on the ﬂoor next to each other, see Fig. 3. The
algorithm successfully ﬁnds the correct conical objects in the

5

Fig. 7: Result of ellipse extraction in noisy, simulated data. Blue dots are
input data, the ﬁtted ellipse and its center (marked red) and supporting points
(marked black). Starting from top to bottom, random noise is added with σ:
0.00, 1.0, 2.0.

scene with a rate of 30fps for 320× 240 Kinect depth data,
implementation in JAVA on Dell 2.8GHz desktop with 8GB
Ram.

B. Robustness of Mid-Level Geometric Features to Noise

Robustness to noise is tested towards noise by generating a
data set (see ﬁg. 7), and changing the amount σ of Gaussian
noise. For each σ, a series of 50 data sets is generated and
analyzed by our algorithm to detect the ellipse. The results, see
Fig. 8, show a benign behavior towards noise, even with a very
high noise level. The variance in radius matches the variance
in noise as expected (the ﬁgure shows the results without
Kalman ﬁltering. With Kalman ﬁltering, the ellipses converge
to the ground truth ellipse, as expected). Note that even with
noise of σ = 2.0 the ellipse (Rma jor = 40,Rminor = 20) is still
detected. The error threshold for each noise experiments is
set proportional to the amount of noise. In real world data,
this parameter can be determined by the sensor’s technical
speciﬁcations, and is therewith ﬁxed.

Fig. 8: Result of ellipse extraction in noisy, simulated data. Amount of added
random noise to the data (x-axis) vs standard deviation of ﬁtted ellipse model
over 50 trials.

DG
1.0
1.5
2.0
2.5
3.0

DM
1.03
1.52
2.02
2.47
3.05

(a) No Kalman
Dσ
1.08e-3
1.15e-3
2.11e-3
2.62e-3
5.16e-3

RM
0.20
0.17
0.16
0.16
0.15

Rσ
1.08e-3
7.76e-4
1.25e-3
1.29e-3
3.00e-3

N
56
54
57
63
54

DG
1.0
1.5
2.0
2.5
3.0

DK
1.03
1.52
2.02
2.47
3.05

(b) With Kalman
DKσ
1.29e-4
5.94e-5
8.08e-5
4.46e-4
1.31e-3

RK
0.20
0.17
0.16
0.16
0.16

RKσ
1.47e-7
1.27e-7
7.43e-7
6.84e-7
1.91e-6

N
56
54
57
63
54

6

TABLE I: Accuracy test. Left table: without Kalman ﬁlter. DG: ground truth distance, DM: mean measured distance, Dσ :
standard deviation of distance measurements, RM: mean measured radius, Rσ : standard deviation of radius measurements, N:
number of measurements. Right table: with Kalman ﬁlter, labels accordingly.

DG
1.0
1.0
1.0
1.0
1.5
1.5
1.5
1.5
2.0
2.0
2.0
2.0

R

O%
10% 0.20
20% 0.17
30% 0.14
40% 0.11
10% 0.16
20% 0.16
30% 0.16
40% 0.13
10% 0.16
20% 0.16
30% 0.13
40% 0.13

Rσ
9.89e-4
7.39e-4
6.58e-4
3.16e-3
5.72e-4
4.03e-2
3.26e-2
1.27e-2
9.03e-4
7.08e-4
1.21e-2
1.77e-2

RK
0.20
0.17
0.14
0.11
0.16
0.16
0.17
0.13
0.16
0.16
0.14
0.13

RKσ
1.78e-4
2.17e-4
1.11e-4
3.71e-4
1.10e-4
4.59e-3
4.21e-3
1.88e-3
4.74e-4
2.60e-4
2.88e-4
3.02e-3

N
61
57
61
61
58
67
63
62
57
59
68
52

TABLE II: Occlusion experiment of a cylinder(R = 0.2m) at
different distances (DG), with and without Kalman ﬁltering. O:
occlusion percentage (10-40), the algorithm does not handle
occlusions ≥ 50%. R: measured radius, Rσ : standard deviation
radius, RK, RKσ : with Kalman ﬁlter, N: number of measure-
ments.

VG
0.21
0.65
0.71
1.09
1.54
1.64
2.66

V M
0.22
0.64
0.72
0.84
1.25
1.61
2.51

Vσ
7.79e-2
3.18e-1
2.19e-1
4.46e-1
5.71e-1
9.41e-1
8.79e-1

VK
0.21
0.61
0.72
0.93
1.45
1.36
2.38

VKσ
4.17e-2
1.81e-1
1.23e-1
4.08e-1
4.69e-1
9.25e-1
8.35e-1

N
97
63
27
22
13
6
6

TABLE III: Observations of a moving cylinder. Estimated
velocity VM is computed using the observed change in distance
over time and is compared to the ground truth velocity (VG),
Vσ denotes standard deviation in velocity. Similar computation
is shown using the Kalman ﬁlter (VK, VKσ). N: number of
measurements.

C. Accuracy

The accuracy of the used approach is measured by placing
a cylinder (trash can) in front of the Kinect sensor at different
distances. Several observations (N) were made to compute the
mean and standard deviation (Dσ ) for the cylinder distance
to the sensor, see Table I. The results in Table I(a) show a
relatively close measured (DM) to the ground truth distance
with a small amount of uncertainty, and at the same time
as the distance from the cylinder to kinect sensor increase,
the error in observing the radius (RM) increase. Table I(b)
shows the effect of Kalman ﬁltering on the observations,
the distance with Kalman ﬁltering (DK) is close to the one
obtained by observations only but with lower variation (Rσ ).

The same situation occurs for the radius. The Kalman ﬁlter
in this experiment reduces the standard deviation, making the
observations more certain.

D. Occlusion

A cylinder of radius r = 20cm was obstructed by different
amounts at various distances to measure the robustness of
this approach w.r.t. distance and occlusion, see Table II. As
the occlusion amount (O%) increases, the observed radius R
decreases for the observations with and without Kalman. This
is due to the limited and noisy ellipse data, naturally ﬁtting
slightly smaller ellipses. In this experiments, the Kalman ﬁlter
effects the results by reducing the variation amount of the
observed radius, as expected.

E. Object Tracking

This section includes three experiments. Two simple qualita-
tive experiments, tracking a bouncing ball, and a quantitative
experiment to measure object speeds. In the ﬁrst qualitative
experiment, we tested if the algorithm can track a bouncing
ball (radius = 10cm) see Fig. 10. Our system was able to track
the ball’s trajectory. For the second qualitative experiment,
we mounted a Microsoft Kinect sensor on a Pioneer mobile
robot to enable navigation towards conical objects (Cylinder,
Cone and Sphere). All computations were done on a note-
book (2.3GHz, 2GB Ram) on the robot. The setup for the
experiment is as follows: the robot has to track a ball and
navigate towards it until the sphere is a meter away. In the
ﬁrst test the ball was held by a walking human. During the
second test the ball was thrown over the robot bouncing in the
desired direction. In both tests the robot detected and navigated
towards the ball while moving, see Fig. 11.

In the quantitative test, we placed the Kinect perpendicular
to a moving cylinder on a Pioneer robot, see Fig. 9 (low speed,
<= 1m/s ) and a moving platform dragged by a human (higher
speed, > 1m/s), see Table III. The experiment shows promising
results with an increase in error at high velocity. The higher
amount of error in high velocity is due to the low amount
of observations (limited range of stationary Kinect). Using
the Kalman ﬁlter, we could, naturally, reduce uncertainty in
observations, but not necessarily improve accuracy.

F. Comparison to RANSAC for Ellipse Fitting

In this section, our approach for ﬁnding ellipses (in 2D)
is compared to the popular RANSAC algorithm. We perform

7

Fig. 9: Experiment setup to measure speed of a moving cylinder mounted
on a robot using a Kinect sensor.

Fig. 11: A Pioneer DX robot tracking a ball in real-time, using 3D range
data from MS Kinect.

12(a), center. This is a RANSAC-inherent problem,
since the approach does not
take into account data
point neighborhood constraints. To constrain RANSAC
to choose points from smaller neighborhoods leads in
turn to less robustness to noise. In comparison, our
approach is able to ﬁnd ellipses with minimal constraints
on ratio of radii, and is more robust to noise. Naturally,
RANSAC improves when the ratio of radii is speciﬁed
with stronger constraints, see Figure 12(a), bottom.

In summary, the basic RANSAC approach is less feasible for
the purpose of ﬁnding ellipses in data for reasons of real time
performance and parameter ﬂexibility.

Fig. 10: Results of tracking a ball. The blue line connects center points of
spheres.

the test on a simulated data set that represents a 2D slice of a
stretched cylinder in front of a wall. We compared the results
with no prior assumptions (i.e. with ﬁxed parameters). As a
stop criterion for RANSAC, we chose the number of iterations
k giving us a p = 0.95 conﬁdence of ﬁnding the correct model.
In our data set, the inlier/datapoints ratio w is w = 0.3, n = 4
points are chosen to deﬁne an ellipse. As derived in [1], this
results in a number of iterations is k = log(1−p
log(1−wn) < 369. We
observed two issues with RANSAC:

1) RANSAC is signiﬁcantly slower than our approach, due
to the number of attempts to ﬁnd inliers(although being
a kO(n) = O(n) algorithm, the constant k in this case is
signiﬁcant (in our approach, k = 1).

2) in our data set, the outliers are not strictly randomly
distributed, but they are structured (wall), which is a
valid assumption for indoor and outdoor environments.
Without restricting RANSAC to speciﬁc ellipses with
constrained ratio of radii (minor/major axis), it ﬁnds
ellipse support in the outliers (in our case, the linear
structures), leading to degenerated results, see Figure

(a) Our Approach

(b) RANSAC 0.2

(c) RANSAC 0.4

Fig. 12: Simulated data points (black) with ﬁtted ellipse (red), supporting
points (green). Top: Our Approach; Middle: RANSAC with constraint for
≥ 0.2; Bottom: RANSAC with stronger radii ratio constraint
radii ratio rminor
rma jor
rminor
rma jor

≥ 0.2.

8

VIII. CONCLUSION AND FUTURE WORK

We presented an algorithm for real-time extraction of coni-
cal objects from 3D range data using a three step approach
(points to ellipses to objects). It provides fast and robust
performance for extracting all 2D best ﬁt ellipses in O(n), n
number of points. The algorithm is well behaved towards noise
and can aid higher level tasks, for example, autonomous robot
navigation by providing robust and fast landmark features. To
improve robustness, the algorithm can be augmented using a
Kalman ﬁlter, which is feasible due to the algorithm’s fast
performance. Future work consist of improving the algorithm
to predict models when conical objects are signiﬁcantly oc-
cluded.

REFERENCES

[1] M. A. Fischler and R. C. Bolles. Random sample consensus: A paradigm
for model ﬁtting with applications to image analysis and automated
cartography. Communications of the ACM, 24(6):381–395, 1981.

[2] A. Fitzgibbon, M. Pilu, and R. Fisher. Direct least square ﬁtting of
ellipses. Pattern Analysis and Machine Intelligence, IEEE Transactions
on, 21(5):476 –480, may 1999.

[3] I. Gath and D. Hoory. Fuzzy clustering of elliptic ring-shaped clusters.

Pattern Recognition Letters, 16(7):727 – 741, 1995.

[4] K. Georgiev, R. Creed, and R. Lakaemper. Fast plane extraction in 3d
range data based on line segments. In In Proceedings of the IEEE/RSJ
International Conference on Intelligent Robots and Systems (IROS),
2011.

[5] R. Halir and J. Flusser. Numerically stable direct least squares ﬁtting

of ellipses, 1998.

[6] K. Khoshelham and S. Elberink. Accuracy and resolution of kinect depth
data for indoor mapping applications. Journal of sensors, 12(1):1437 –
1454, 2012.

[7] F. L. and Bookstein. Fitting conic sections to scattered data. Computer

Graphics and Image Processing, 9(1):56 – 71, 1979.

[8] R. Lakaemper and L. Jan Latecki. Using extended em to segment planar
In ICPR ’06: Proceedings of the 18th International
structures in 3d.
Conference on Pattern Recognition, pages 1077–1082, Washington, DC,
USA, 2006. IEEE Computer Society.

[9] J. Poppinga, N. Vaskevicius, A. Birk, and K. Pathak. Fast plane detection
and polygonalization in noisy 3d range images. pages 3378 –3383, sep.
2008.

[10] P. Rosin and G. West. Nonparametric segmentation of curves into
various representations. Pattern Analysis and Machine Intelligence,
IEEE Transactions on, 17(12):1140 –1153, dec 1995.

[11] R. Rusu, N. Blodow, Z. Marton, and M. Beetz. Close-range scene
segmentation and reconstruction of 3d point cloud maps for mobile
In Intelligent Robots and
manipulation in domestic environments.
Systems, 2009. IROS 2009. IEEE/RSJ International Conference on,
pages 1 –6, oct. 2009.

[12] J. Weingarten and G. Gruener. A fast and robust 3d feature extraction
algorithm for structured environment reconstruction. In Reconstruction,
11th International Conference on Advanced Robotics (ICAR), 2003.

[13] M. Werman and Z. Geyzel. Fitting a second degree curve in the presence
of error. Pattern Analysis and Machine Intelligence, IEEE Transactions
on, 17(2):207 –211, feb 1995.

[15] J. Xiao and Y. Furukawa. Reconstructing the world’s museums.

[14] W.-Y. Wu and M.-J. J. Wang. Elliptical object detection by using its
geometric properties. Pattern Recognition, 26(10):1499 – 1509, 1993.
In
Proceedings of the 12th European Conference on Computer Vision,
ECCV ’12, 2012.

[16] R. K. Yip, P. K. Tam, and D. N. Leung. Modiﬁcation of hough transform
for circles and ellipses detection using a 2-dimensional array. Pattern
Recognition, 25(9):1007 – 1022, 1992.

