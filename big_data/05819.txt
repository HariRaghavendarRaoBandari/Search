6
1
0
2

 
r
a

 

M
8
1

 
 
]

C
S
.
s
c
[
 
 

1
v
9
1
8
5
0

.

3
0
6
1
:
v
i
X
r
a

ANDRZEJ WOSZCZYNA∗, PIOTR PLASZCZYK†,

WOJCIECH CZAJA‡, ZDZISŁAW A. GOLDA§

SYMBOLIC TENSOR CALCULUS — FUNCTIONAL

AND DYNAMIC APPROACH

A b s t r a c t

In this paper, we brieﬂy discuss the dynamic and functional approach to computer symbolic tensor
analysis. The ccgrg package for Wolfram Language/Mathematica is used to illustrate this approach.
Some examples of applications are attached.
Keywords: computer algebra, symbolic tensor calculus, functional programming, dynamic program-
ming, Mathematica, Wolfram Language

1 Introduction

Cartesian tensors are identiﬁed with matrices. In contrast, in curved coordinates, even more
so in a curved space, viewing the tensor matrix in extenso is not instructive. The subject of
interpretation are equations, invariants, symmetries, and observables, while the tensor compo-
nents values — except for certain privileged frames of reference — are of minor importance.
This follows directly from the general principle of covariance, which states that the physical
sense is independent of the choice of coordinate system, whereby each coordinate choice is
allowed.

The vast majority of the computer tensor tools — including those build in Wolfram
Language/Mathematica, the symbolic language which we use here — identify tensors with
matrices, providing them with procedures for tensor contraction, tensor product and the rules
of symmetry. Objects of such a class require the evaluation of complete tensor matrices.
A sequence of intermediate steps evaluates quantities, most of which are irrelevant to the
actual goal of the calculation, and are an unnecessary burden. A few tensor packages can
operate on abstract level, where the differential manifold is not speciﬁed. They cover the
entire tensor algebra, and essentially, form the sophisticated programming languages [8, 12,
13]. On the other hand, all of them depend on the primary computer algebra languages they
employ (Mathematica, Mapple) — the languages which constantly develop. The risk of losing
compatibility between the primary language and the computer algebra package is greater the
more complex the package.

The project we realized in 2013–2014 was aimed at constructing an open source pack-
age [1] for Mathematica, which deﬁnes some basic concepts and rules, and is open to devel-
opment by users. The syntax is kept as close as possible to standard textbook notation [2] and

∗Institute of Physics, Cracow University of Technology; Copernicus Center for Interdisciplinary Studies;

uowoszcz@cyf-kr.edu.pl

†Astronomical Observatory, Jagiellonian University; piotr.plaszczyk@uj.edu.pl
‡Copernicus Center for Interdisciplinary Studies; wojciech.czaja@gmail.com
§Astronomical Observatory, Jagiellonian University; Copernicus Center for Interdisciplinary Studies;

zdzislaw.golda@uj.edu.pl

1

typical scheme of manual calculations. On the other hand, we employ dynamic programming
with modern computational techniques, a call-by-need strategy and memoization. The ques-
tion is not how much can be computed, but how ﬂexible the software can be? The results are
discussed in this paper.

We have taken into account that physicists have in mind co- and contravariant tensor
components, rather than individual tensors of a precised valence (covariant or contravariant
tensors). Rising and lowering tensor indices is a basic manual technique which comes directly
from the Einstein convention. What physicist actually do is they aggregate tensors of arbitrary
valence (all combinations of upper and lower indices) into a single object. The choice of
particular valence is left for the future, and decided upon later. In order to stick to that, while
the matrix representation is employed, one would need to evaluate and store all the co- and
contravariant index combinations. In the case of the Riemann tensor in four dimensions, this
gives 84 expressions, while only a small proportion of them will probably be used further on.
Although they are not independent as subjects to tensor symmetries, the beneﬁts of this fact
are not straightforward. Modern techniques of differentiation, and reducing terms are quick
enough, while the evaluation of conditions If still cost time. As a result, computing the same
component twice may cost only slightly more than retrieving it from another matrix element.
But there still remains the problem of memory. In the matrix approach, thousands of array’s
components are build of long algebraic expressions.

The functional representation of tensors allows one to avoid some of these problems.
In this paper, we focus on the ccgrg-package (the open source code written for Mathematica
9–10, and distributed from Wolfram Library [3]). The goal of the article is to argue for some
particular computation technique. We do not give here the precise tutorial to the package. The
same approach to tensors in Python is presented in [4].

2 Dynamic paradigm of programming

The idea is not new, as it dates back to the famous Richard Bellman book Dynamic Pro-
gramming (1957). Bellman introduces the concept of the goal function. This means that the
starting point is identical to the ﬁnal expression in the search. To evaluate this expression,
the algorithm automatically splits tasks into sub tasks down to elementary level. The tree of
calls is not explicitly known to programmers, and the computational process does not require
any intelligent interference. For tensors, this means that the subroutines do not evaluate all
the components but some of them, acting on demands of routines from a higher level. Most
tensor components remains unknown. Only these are computed which contribute to the ﬁ-
nal expression. This process is known as lazy evaluation or call-by-need strategy [5, 6]. To
evaluate Ricci scalar for Schwarzschild metrics (33), ccgrg calls 16 Riemann components.
40 Riemann components are needed for full Ricci tensor, and 808 Riemann components for
Carminati–McLenaghan W1 invariant [7] W1 = 1
8 (Cabcd + i ∗Cabcd)Cabcd build of the Weyl
C and dual Weyl ∗C contractions. In each case, the appropriate components are selected auto-
matically and the rest of components remains unevaluated.

Tensors form a class of functions, where the tensor indices are the innermost group of

2

arguments. For instance, the covariant derivative we denote as:

Ti j;m → (cid:209)
Ti jk;mn → (cid:209)

[T][i, j, m],
[T][i, j, k, m, n].

(1)
(2)

The outer argument contains the tensor name, while the inner argument lists the tensor in-
dices. In the case of Lie derivative

£UVi → LieD[U][V][i],
£U Ti j → LieD[U][T][i, j],

(3)
(4)

the outermost argument U is the vector ﬁeld that generates the dragging ﬂow, the middle (V
or T) is the tensor name, and the innermost, according to the general rule, specify indices.
The grouping of arguments, and the appropriate ordering of groups allows one to work with
headers (cid:209)
[T], LieD[U][T], etc., treating them as operators. Inserting new groups of outer ar-
guments does nor affect the methods governing tensor index operations. Indexes run through
{1, . . . ,dim} for covariant components and through {−dim, . . . , −1} for contravariant com-
ponents (the inverse Parker–Christensen notation [8]). Thus we write:

Ti j → T[i, j],
T j
i → T[i, −j],
T i j → T[−i, −j],
T i j

k → T[−i, −j, k],

(5)

(6)
(7)
(8)

and so on. Tensor valence operations (conversions from covariant to contravariamt compo-
nents, and vice versa), and the covariant differentiation are the only methods of the object.
Other tensor operations like contractions, products, etc. are realized by elementary algebra
and the Einstein convention. Conversions are called just by placing or removing the sign
“minus” in front of selected tensor indices.

3 The manifold

Tensors live on a manifold. This manifold is declared in the opening procedure open[x,g],
where the list of coordinate names x and metric tensor g are the arguments. When the man-
ifold is ‘opened’, tensors are evaluated on this particular manifold. The metric tensor can be
uniquely deﬁned, or may contain arbitrary functions of coordinates. In the last case, open
indicates the class of manifolds distinguished by the speciﬁed structure of the metric tensor.
Tensors are created by setting object data in the form of the pair: tensor matrix, and the
associated tensor valence
a default). By calling
tensorExt[matrix, valence] one creates a tensor object which can return components
for arbitrary valence, on demand. Tensors which are in frequent use (Ricci, Riamann, Weyl,
the ﬁrst and the second fundamental forms on hypersurfaces), as well as covariant and Lie
derivatives are predeﬁned in the ccgrg-package. Tensor components are not evaluated in ad-
vance, only when called for the ﬁrst time. This is guaranteed by the SetDelayed (:=) com-

covariant components as

(all

3

mand. For instance, when calling the Riemann curvature tensor in the Schwarzschild space-
time one obtains:

R1212 → In[1] := tRiemann[1, 2, 1, 2]

Out[1] := −

2M
r3

R121

2 → In[2] := tRiemann[1, 2, 1, −2]

Out[2] := −

2M(2M − r)

r4

Ri jmnRi jmn → In[3] := Sum[tRiemannR[i, j, m, n]tRiemannR[−i, −j, −m, −n]

{i, dim}, {j, dim}, {m, dim}, {n, dim}]

Out[3] := 48

M2
r6

(9)

(10)

(11)

The tensor rank is ﬁxed, except for the covariant derivative, where each differentiation rises
the rank by one. Covariant differentiation is realized by header (cid:209)
(or its full name, cov-
ariantD), and by extending the list of indices by one. Extension of this list by more than one
returns derivatives of a higher order.

R121

2

;2 → In[1] := (cid:209)

Out[1] := −
;22 → In[2] := (cid:209)

2

R121

[tRiemannR][1, 2, 1, −2, 2]
6M(2M − r)

[tRiemannR][1, 2, 1, −2, 2, 2]
6M(9M2 − 4Mr)

Out[2] := −

r5

r6

(12)

(13)

Rising the tensor rank by differentiation does not affect the general ability to rise or lower
indices by choosing appropriate signs, both for the original and the differentiation indices.
The ﬂexibility of tensor indexes stems directly from the functional representation of tensor
and the call-by-need strategy.

4 Memoization and symmetries

Trees of calls for different tasks may have nonempty intersections (and typically this is the
case). The SetDelayed function which enables call-by-need strategy at the same time forces
the multiple evaluation of components whenever trees of calls overlap. To avoid unwilling
effects, one needs to store computed values, and to have a mechanism that can recognize
known and unknown components. This process is called memoization. The term memoization
was introduced by Donald Michie in 1968 [9] and refers to the class of functions that can learn
what they found in past calls. In C or Python, the memoization tools are usually constructed by
programmers (see [4]). Wolfram Mathematica provides dedicated tool in the core language.
The construction consists in the recursive deﬁnition of the form

f [x ] := f [x] = expr[x, . . .]

(14)

4

where the same name of the function appears twice, ﬁrst followed by SetDelayed and next,
by Set. The deﬁnition of f which is initially equivalent to expr[x, . . .], is successfully sup-
plemented by the values found during each function call. The memoized (memorized) values
form cache. The cache is searched ﬁrst; therefore, no tensor component is evaluated twice.
This means that each of the expressions in the examples (10)–(14) is evaluated only once.
Whenever called again, the values are instantly retrieved from the cache. The same refers
to expressions called by subroutines. In the Schwarzschild space time (33), the Carminati–
McLenaghan invariants W1 and W2, when evaluated separately, call 808 and 552 Riemann
components, respectively. Jointly, they call 1046 Riemann components which means that 296
components are taken from the cache.

Calls appeal to tensor symmetries. The symmetry rules are the argument conditions

within the same memoizing function scheme

f[x ]/; htest[x]i := f[x] = expr[x, . . .]

For instance, for the Ricci tensor Ri j, the conditional deﬁnition takes the form

tRicciR[i , j ]/; i > j := tRicciR[i, j] = tRicciR[j, i]
tRicciR[i , j ] := tRicciR[i, j] = Sum[tRiemannR[−s, i, s, j], {s, dim}]

(15)

(16)

with positive i, j (covariant components). The rules of symmetry are introduced directly in the
deﬁnition of the tensor. In order to recognize Ricci symmetries, the kernel does not refer to
the symmetries of the Riemann tensor. Subsequently, the Riemann tensor symmetries are not
the result of the evaluation of Christoffel symbols, etc. Symmetries deﬁned as the argument
conditions in lazy-evaluated functions put constraints directly on computational processes.

5 The conﬁdence of results in dynamic programming

Dynamic programming allows one to reach the goal at a minimal cost of time and memory.
The call-by-need strategy avoids computing unnecessary components. Memoization protects
against multiple evaluations. The cost we pay, however, is conﬁdence in the results. Functions
that can learn and remember are reluctant to forget. The user must not change the tensor
deﬁnition during the same session. The cache has priority over evaluation. A new deﬁnition
does not affect the values which are already found. If deﬁnitions change, one may readily
collect a mixture of results belonging to different deﬁnitions.

The content of the cache together with the general tensor deﬁnition can be viewed by the
Mathematica
command,
cacheview[tensorname] returns the list of the memorized tensor components. For instance

Definition[tensorname]. Based

command

on

this

In[26] := cacheview[tRiemannR]
Out[26] := {{tRiemannR, {−4, 1, 4, 1}}, {tRiemannR, {−3, 1, 3, 1}}}

(17)

means that R4
cache. To view all the memoized quantities which refer to tRiemannR, one writes

131 Riemann components have been already called and stored in the

141 and R3

In[27] := associated[tRiemannR]

5

Out[27] := {{tRiemannR, {−4, 1, 4, 1}}, {tRiemannR, {−3, 1, 3, 1}}

{covariantD[tRiemannR], {1, 2, 1, 2, 2}}}}

Commands

In[31] := retreat[tRiemannR]
In[32] := retreat[tRiemannR, associated]

(18)

(19)

clear the stored values displayed in (17) and (18), respectively. In contrast to the core-languge
Mathematica commands Clear and Unset, thr command retreat does not affect the gen-
eral deﬁnition of a tensor. Calling cacheview after retreat returns the empty list.

For sake of safety,

the name of each memoizind tensor shall be appended to
memRegistry. This is realized by erasable[tensorname]. memRegistry allows the au-
tomatic erasing of the whole cache content whenever open[x, g] is called. User may safely
redeﬁne the manifold with no risk of unwanted remnants from the past computations. ccgrg
is equipped with extensive random tests of memory clearance. The above mentioned security
tools do not prevent some incidental mistakes such as those shown below

In[41] := f[k ] := f[k] = k; f/@Range[8];
In[42] := f[k ] := f[k] = 1/k; f/@Range[8];

To effectively implement memoization to algorithms, minimal training and discipline are in-
dispensable.

6 Tensor deﬁnition scheme

This is the place to show the typical construction of a tensor. We choose the induced metrics
(the ﬁrst fundamental form) hi j = gi j − viv j on the hypersurface orthogonal to the vector ﬁeld
vi in the space with the metric gi j.

erasable/@{hcov, h};
hcov[v ][j , i ]/; i < j := hcov[v][j, i] = hcov[v][i, j];
hcov[v ][i , j ] := g[i, j] − v[i]v[j]/vectorsquared[v]//simp[];
h[v ][i , j ]/; indeX[i, j] := h[v][i, j] = tensorExt[hcov[v]][i, j]//simp[];

(20)

In the ﬁrst line we append memRegistry. The next line contains the symmetry settings. The
third line deﬁnes the matrix of the covariant tensor (hcov is not a tensor in the meaning of the
ccgrg package and will be invisible in the general context.) The last line creates the tensor h
as an object containing data (hcov), methods to control the index values (condition indeX),
and methods to rise or lower indices (provided by the tensorExt procedure).

Following the scheme above, users may deﬁne their own tensors and append to the pack-
age, or just use them in notebooks. Summation, multiplying tensors by numbers or functions
(not containing indices as arguments!), and covariant differentiation return tensors which not
need to be separately deﬁned as in (20). Yet, even in these cases, the deﬁnition scheme (20)
is strongly recommended to assure effectiveness.

6

7 Examples of use

7.1 Differential operators in an arbitrary coordinate system

In technical sciences there is a need to express differential operators in some particular curved
coordinates or on curved surfaces. The task may appear as a part of the heat transport or dif-
fusion problems for systems of more complex geometry. Many typical gradient or Laplacian
expressions are catalogued in the literature, but still the range of geometries that can be en-
countered in nature is much richer. Below, we choose a catenoid — one of the best known
minimal surfaces — for which, we hope, Laplacian is not published in print.

The family of catenoids numbered by r and parametrized by u and v deﬁne a curved
coordinate system in the Euclidean space. The ﬁrst step is to ﬁnd the Euclidean metric form
in coordinates r,u,v (the core Wolfram Language)

In[1] := Needs[”ccgrg‘”];
In[2] := x[r , u , v ] = rCosh[v/r]Cos[u];
In[3] := y[r , u , v ] = rCosh[v/r]Sin[u];
In[4] := z[r , u , v ] = v;
In[5] := crd = {r, u, v};
In[6] := form = Dt[x[r, u, v]]2 + Dt[y[r, u, v]]2 + Dt[z[r, u, v]]2//FullSimplify

Out[6] := Cosh[

v
r

]2(r2Dt[u]2 + Dt[v]2) +

Dt[r]2(rCosh[ v
r ] − vSinh[ v
r2

r ])2

+

Dt[r]Dt[v](v − vCosh[ 2v

r ] + rSinh[ 2v

r ])

r

(21)

The second step is to evaluate the covariant differentiation f,i
the manifold with the metric form (21):

;i of an arbitrary function f on

In[7] := open[crd, toMatrix[form, crd]];
In[8] := Sum[(cid:209)

[f[r, u, v]][i, −i], {i, dim}]//FullSimplify

Out[8] :=

r2f(2,0,0)[r, u, v]

Sech2(cid:2) v
r(cid:3)(cid:1)2 +
(cid:0)r − vTanh(cid:2) v
− (cid:0)rSinh(cid:2) 2v
v − rCoth(cid:2) v
r(cid:3)

2rf(1,0,1)[r, u, v]

r2

+ f(0,0,2)[r, u, v] +

r(cid:3) f(0,2,0)[r, u, v]
r (cid:3) + 2v(cid:1)2
r(cid:3) f(1,0,0)[r, u, v]
Sech4(cid:2) v
r(cid:3)(cid:1)3
4(cid:0)r − vTanh(cid:2) v

(22)

The only time-consuming operations are simpliﬁcations FullSimplify, which are inevitable
in this code. Similar computations can be easily performed for an arbitrary transformation
deﬁned by inputs the In[2]−In[4].

7

7.2 Riemann curvature invariants: the case of spherical symmetry

Carminati–McLenaghan invariants [7] form a complete set of Riemann invariants for the
spacetime which obey the Einstein equations with the hydrodynamic energy-momentum ten-
sor. These invariants read

R1 =

1
4

bSb

a,

Sa
1
8
Sa

e f Ce f

ab,

Sa

bSb

cSc

a,

a,

bSb

cSc

dSd

W1 =

R3 =

R2 = −
1
16
1
(Cabcd + i∗Cabcd)Cabcd,
8
1
16
SadSbc(−i∗Cabcd +Cabcd),

W2 = −
1
8
1
i∗CabcdSbcSe fCae f d +
8
1
16

1
16
1
16

cd + i∗Ce f

ab)Ccd

(Cab

M1 =

M2 =

M3 =

SbcSe f

SbcSe f CabcdCae f d +
1
32
SbcSe f (i∗Caghd +Caghd)(∗Cabcd

d bCbe f g −

dSe f Cac

SagSc

1
32

M4 = −
1
32

M5 =

SbcSe f (CabcdCae f d − ∗Cabcd

∗Cae f d),

∗Cabcd

∗Cae f d,

SagSc

dSe f ∗Cac

d b∗Cbe f g,

∗Cge f h +CabcdCge f h).

(23)

(24)

(25)

(26)

(27)

(28)

(29)

(30)

(31)

(32)

Sab stands for the Plebanski tensor (the traceless Ricci tensor Sab = Rab − 1
4 Rgab). Invariants
W1 and W2 are complexes, which are deﬁned by means of contractions of the Weyl C and the
dual Weyl ∗C tensors.

In the case of vacuum and spherically symmetric spacetime (Black Hole)

ds2 = −(cid:18)1 −

2M

r (cid:19)dt2 +(cid:18)1 −

2M

r (cid:19)−1

dr2 + r2(cid:0)dJ 2 + sin2 J dj 2(cid:1) ,

(33)

the complete computation appears as follows:

In[1] := Needs[”ccgrg‘”];
In[2] := x = {t, r,J ,j };
In[3] := g := DiagonalMatrix[−(1 − 2M/r), (1 − 2M/r)−1, r2, r2Sin[J ]]2];
In[4] := $Assumptions = And@@{0 < t, 0 < r, 0 < J < p , 0 < j < 2p , 0 < M};
In[5] := open[x, g];
In[6] := {CMinvR1, CMinvR2, CMinvR3}
Out[6] := {0, 0, 0}
In[7] := {CMinvW1, CMinvW2}

8

Out[7] := {6M2/r6, −6M2/r6}
In[8] := {CMinvM1, CMinvM2, CMinvM3, CMinvM4, CMinvM5}
Out[8] := {0, 0, 0, 0, 0}
In[9] := {TimeUsed[],$MachineType,$Version,$ProcessorType,

$ProcessorCount}

Out[9] := {8.80264, PC, 10.0forLinuxx86(64-bit)(December4, 2014), x86-64, 2}

(34)

As see result of these operations, two nonvanishing invariants were found, while 1320 of
4096 components of the Riamann tensor object were evaluated and memorized. For the PC
computer with AMD64 processor and Linux Mint x86 (64-bit), the whole operation took
8.80264 seconds CPU.

8 Final remarks

The degree of complexity in a symbolic programming is much less predictable than in numer-
ical computation. This is due to the fact that the quantity of algebraic terms in an expression
is not a uniquely determined number. This number signiﬁcantly depends on the ability of
the algorithm to recognize mathematical identities, and for the same function, may differ in
orders of magnitude. In this circumstance, the economic style of the dynamic programming
(call-by-need strategy, memoization) may take the ﬁrst rank role.

The research supported by grant from the John Templeton Foundation.

References

[1] Woszczyna A., Kycia R. A., Golda Z. A., Functional Programming in Symbolic Tensor
Analysis, Computer Algebra Systems in Teaching and Research, Vol. IV, No 1, pp. 100–
106, 2013.

[2] Synge J. L., Schild A., Tensor Calculus, University of Toronto Press, 1959.

[3] Woszczyna A., et al.: ccgrg — The symbolic tensor analysis package, with tools for

general relativity, 2014, http://library.wolfram.com/infocenter/MathSource/8848/.

[4] Czaja W., GraviPy, https://pypi.python.org/pypi/GraviPy/0.1.0.

[5] Hudak P., Conception, Evolution, and Application of Functional Programming Lan-

guages, ACM Computing Surveys 21, pp. 383–385, 1989.

[6] Reynolds J. C., Theories of programming languages, Cambridge University Press, 1998.

[7] Carminati J., McLenaghan R. G., Algebraic invariants of the Riemann tensor in a four-

dimensional Lorentzian space, J. Math. Phys. 32, 3135, 1991.

9

[8] Parker L., Christensen S. M., MathTensor: A System for Doing Tensor Analysis by Com-

puter, Reading, MA: Addison-Wesley, 1994.

[9] Michie D., Memo Functions and Machine Learning, Nature, No. 218, 1968, pp. 19–22.

[10] Wald R. M., General Relativity, The University of Chicago Press, 1984.

[11] [Tensorial homepage] http://home.comcast.net/˜djmpark/TensorialPage.html.

[12] [GRTensor homepage] http://grtensor.phy.queensu.ca/.

[13] [xAct homepage] http://www.xact.es/.

[14] Korol’kova A. V., Kulyabov D. S., Sevastyanov L. A., Tensor computations in computer

algebra systems, Programming and Computer Software, 39 (3), 2013, pp. 135–142.

10

