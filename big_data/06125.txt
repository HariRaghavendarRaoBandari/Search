6
1
0
2

 
r
a

 

M
9
1

 
 
]
I

A
.
s
c
[
 
 

1
v
5
2
1
6
0

.

3
0
6
1
:
v
i
X
r
a

The Computational Power of Dynamic Bayesian

Networks

Joshua Brulé∗

Abstract

This paper considers the computational power of constant size, dy-
namic Bayesian networks. Although discrete dynamic Bayesian networks
are no more powerful than hidden Markov models, dynamic Bayesian
networks with continuous random variables and discrete children of con-
tinuous parents are capable of performing Turing-complete computation.
With modiﬁed versions of existing algorithms for belief propagation, such
a simulation can be carried out in real time. This result suggests that
dynamic Bayesian networks may be more powerful than previously con-
sidered. Relationships to causal models and recurrent neural networks are
also discussed.

1 Introduction

Bayesian networks are probabilistic graphical models that represent a set of ran-
dom variables and their conditional dependencies via a directed acyclic graph.
Explicitly modeling the conditional dependencies between random variables per-
mit eﬃcient algorithms to perform inference and learning in the network. Causal
Bayesian networks have the additional requirement that all edges in the network
model a causal relationship.

Dynamic Bayesian networks are the time-generalization of Bayesian net-
works and relate variables to each other over adjacent time steps. Dynamic
Bayesian networks unify and extend a number of state-space models including
hidden Markov models, hierarchical hidden Markov models and Kalman ﬁlters.
Dynamic Bayesian networks can also be seen as the natural extension of acyclic
causal models to models that permit cyclic causal relationships, while avoiding
problems with causal models that try to model temporal relationships with an
atemporal description [1].

A natural question is what is the expressive power of such networks. The
result in this paper shows that although discrete dynamic Bayesian networks are
sub-Turing in computational power, introducing continuous random variables
with discrete children is suﬃcient to model Turing-complete computation. In

∗Department of Computer Science, University of Maryland, College Park, MD 20742.

jbrule@cs.umd.edu

1

addition, the distributions used in the construction are such that the marginal
posterior probabilities of random variables in the network can be eﬀectively
computed with modiﬁed versions of existing algorithms. Ignoring the overhead
from arbitrary precision arithmetic, the simulation can be conducted with only
a constant time penalty.

2 The Model and Main Results

A Bayesian network [2] consists of a directed-acyclic graph, G over a set V =
{V1, . . . , Vn} of vertices and a probability distribution P (v) over the set of vari-
ables that correspond to the vertices in G. A Bayesian network “factorizes” the
probability distribution over its variables, by requiring that each variable, vi,
is conditionally independent of its non-descendants, given its parents (denoted
pa(vi)). This is the Markov condition [3]:

P (x1, . . . , xn) = Y
i

P (xi|pai)

Dynamic Bayesian networks (DBN) extend Bayesian networks to model a
probability distribution over a semi-inﬁnite collection of random variables, with
each collection of random variables modeling the system at a point in time
[4]. Following the conventions in [5], the collections are denoted Z1, Z2, . . . and
variables are partitioned Zt = (Ut, Xt, Yt) to represent input, hidden and output
variables of a state space model. Such a network is “dynamic” in the sense that
it can model a dynamic system, not that the network topology changes over
time.

A DBN is deﬁned as a pair (B1, B→), where B1 is a Bayesian network that
deﬁnes the prior P (Z1) and B→ is a two-slice temporal Bayes net (2TBN) that
deﬁnes P (Zt|Zt−1) via a directed acyclic graph:

P (Zt|Zt−1) =

N
Y
i=1

P (Z i

t|pa(Z i
t ))

t is the ith node at time t, and pa(Z i

where Z i
t in the graph.
The parents of a node can either be in the same time slice or in the previous
time slice (i.e. the model is ﬁrst-order Markov).

t) are the parents of Z i

The semantics of a DBN can be deﬁned by “unrolling” the 2TBN until there

are T time-slices; the joint distribution is then given by:

P (Z1:T ) =

T
Y
t=1

N
Y
i=1

P (Z i

T|pa(Z i
t))

Analyzing the computational power of a DBN requires deﬁning what it
means for a DBN to accept (and halt) or reject an input. Deﬁne an input
sequence, {Ut} of Bernoulli random variables to model the (binary) input. Sim-
ilarly, deﬁne an output sequence {Yt} (Yt ∈ {run, halt0, halt1}) to represent

2

whether the machine has halted and the answer that it gives. Given an input,
in1, in2, . . . , int, to a decision problem, the machine modeled by the DBN to has
halted and accepted at time t, if and only if P (Yt = halt1|U1 = in1, . . . , Un =
int) > 0.5 and halted and rejected if and only if P (Yt = halt0|U1 = in1, . . . , Un =
int) > 0.5.

2.1 Discrete dynamic Bayesian networks are not Turing-

complete

“Discrete” Bayesian networks are Bayesian networks where all random variables
have some ﬁnite number of outcomes, i.e. Bernoulli or categorical random vari-
ables. If dynamic Bayesian networks are permitted to increase the number of
random variables over time, then simulating a Turing-machine becomes trivial:
simply add a new variable each time step to model a newly reachable cell on
the Turing machine’s tape. However, this requires some ‘ﬁrst-order’ features in
the language used to specify the network and the computational eﬀort required
at each step of the simulation will grow without bound.

With a ﬁxed number of random variables at each time step and the property
that DBNs are ﬁrst-order Markov, the computational eﬀort per step remains
constant. However, discrete DBNs have sub-Turing computational power. In-
tuitively, a discrete DBN cannot possibly simulate a Turing machine since there
is no way to store the contents of the machine’s tape.

More formally, any discrete Bayesian network can be converted into a hidden
Markov model [5]. This is done by ‘collapsing’ the hidden variables (Xt) of the
DBN into a single random variable by taking the Cartesian product of their
sample space. The ‘collapsed’ DBN models a probability distribution over a
exponentially larger, but still ﬁnite sample space. Hidden Markov models are
equivalent to probabilistic ﬁnite automata [6] which recognize the stochastic
languages. Stochastic languages are in the RP-complexity class and thus discrete
DBNs are not Turing complete.

2.2 A dynamic Bayesian network with continuous and dis-

crete variables

A 2TBN can be constructed to simulate the transitions of a two stack push-
down automaton (PDA), which is equivalent to the standard one tape Turing
machine. A two stack PDA consists of a ﬁnite control, two unbounded binary
stacks and an input tape. At each step of computation, the machine reads and
advances the input tape, reads the top element of each stack and can either push
a new element, pop the top element or leave each stack unchanged. The state of
the control can change as function of previous state and the read symbols. When
the control reaches one of two possible halt states ({halt0, halt1}), the machine
stops and its output to the decision problem it was computing is deﬁned which
of the halt states it stops on.

A key part of the construction is using a Dirac distribution to simulate a
stack. A Dirac distribution centered at µ can be deﬁned as the limit of normal

3

distributions:

δ(µ) ≡ lim

σ↓0

1

σ√2π

2

−x

2

2σ

e

A single Dirac distributed random variable is suﬃcient to simulate a stack.
The stack construction adapted from [7] encodes a binary string ω = ω1ω2 . . . ωn
into the number:

q =

n
X
i=1

2ωi + 1

4i

Note that if the string begins with the value 1, then q has a value of at least
3/4 and if the string begins with 0, then q is less than 1/2 - there is never a
need to distinguish among two very close numbers to read the most signiﬁcant
digit. In addition, the empty string is encoded as q = 0, but any non-empty
string has value at least 1/4.

All random variables, except for the stack random variables, are categorically
distributed - thus, the conditional probabilities densities between them can be
represented using standard conditional probability tables.

Extracting the top value from a stack requires a conditional probability
distribution for a Bernoulli random variable (T op ∈ {0, 1}), given a Dirac
(Stack ∈ R) distributed parent. The Heavyside step function meets this re-
quirement and is deﬁned as the limit of logistic functions (or, more generally,
softmax functions), centered at 1/2:

H(x) ≡ lim

k→∞

1

1 + e−k(x−1/2)

The linear operation 4q − 2 transfers the range of q to at least 1 when the
top element of the stack is 1 and no more than 0 when the top element of the
stack is 0. Then, the conditional probability density function:

P (T op|Stack = q) = H(4q − 2)

yields P (T op) = 1 whenever the top element of the stack is 1 and P (T op) = 0
whenever the top element of the stack is 0.

Similarly, a conditional probability distribution can be deﬁned for Bernoulli

random variable Empty ∈ {0, 1}, as:

P (Empty|Stack = q) = 1 − H(4q)

to check if a stack is empty.

Finally, the linear operations q

and 4q − (2b + 1) push and pop b,
respectively, from a stack. The conditional probability density for a stack at
time t+1, given a stack at time t, the top of the stack at time t, and action to be
performed on the stack (Actiont ∈ {push0, push1, pop, noop}) is fully described
as follows:

4 + 2b+1

4

4

P (Stackt+1|T opt = p, Stackt = q, Actiont = push0) = δ(q/4 + 1/4)
P (Stackt+1|T opt = p, Stackt = q, Actiont = push1) = δ(q/4 + 3/4)
P (Stackt+1|T opt = p, Stackt = q, Actiont = pop) = δ(4q − (2p + 1))

P (Stackt+1|T opt = p, Stackt = q, Actiont = noop) = δ(q)

Since there are two stacks in the full construction, they are labeled, at time t,
as Stacka,t and Stackb,t. The rest of the construction is straightforward. Statet,
Actiona and Actionb are functions of Statet−1, T opa,t, Emptya,t, T opb,t, Emptyb,t
and int. Since all of these are discrete random variables, the conditional prob-
ability densities is simply the transition function of the PDA, written as a (0,
1) stochastic matrix. As expected P (Y = halti|State) = 1 if State is that halt
state, and 0 otherwise.
Finally, the priors for the dynamic Bayesian network are simply P (Stacka,1) =

P (Stackb,1) = δ(0), P (State1 = q0) = 1, where q0 is the initial state.

As described, this construction is somewhat of an abuse of the term ‘prob-
abilistic graphical model’ - all probability mass is concentrated into a single
event for every random variable in the system, for every time step. However, it
is easy to see this construction faithfully simulates a two stack machine, as each
random variable in the construction corresponds exactly to a component of the
simulated automaton.

2.3 Exact inference in continuous-discrete Bayesian net-

works

This construction requires continuous random variables, which raise concerns as
to whether the marginal posterior probabilities can be eﬀectively computed. The
original junction tree algorithm [8] and cut-set conditioning [9] approaches to
belief propagation compute exact marginals for arbitrary DAGs, but require dis-
crete random variables. Lauritzen’s algorithm [10] conducts inference in mixed
graphical models, but is limited to conditional linear Gaussian (CLG) continu-
ous random variables. In a CLG model, let X be a continuous node, A be its
discrete parents, and Y1, . . . , Yk be continuous parents. Then

p(X|a, y) = N (wa,0 +

k
X
i=1

wa,iyi; σ2
a)

Lauritzen’s algorithm can only conduct approximate inference, since the
true posterior marginals may be some multimodal mix of Gaussians, while the
algorithm itself only supports CLG random variables. However, the algorithm
is exact in the sense that it computes exact ﬁrst and second moments for the
posterior marginals which is suﬃcient for the Turing machine simulation.

5

Laurientz’s algorithm does not permit discrete random variables to be chil-
dren of continuous random variables. Lerner’s algorithm [11] extends Lau-
ritzen’s algorithm to support softmax conditional probability densities for dis-
crete children of continuous parents. Let A be a discrete node with the possible
values a1, . . . , am and let Y1, . . . , Yk be its parents. Then:

P (A = ai|y1, . . . , yk) =

Pm

exp(bi + Pn
l=1 wi
j=1 exp(bj + Pn

l yl)
l=1 wi

l yl)

Like Lauritzen’s algorithm, Lerner’s algorithm computes approximate pos-
terior marginals - relying on the observation that the product of a softmax and
a Gaussian is approximately Gaussian - but exact ﬁrst and second moments,
up to errors in the numerical integration used to compute the best Gaussian
approximation of the product of a Gaussian and a softmax. This calculation is
actually simpler in the case where the softmax is replaced with a Heavyside and
the Lerner algorithm can run essentially unmodiﬁed with a mixture of Heavyside
and softmax conditional probability densities. In the case of Dirac-distributed
parents, with Heavyside conditional probability densities, numeric integration
is unnecessary and no errors are introduced in computing the ﬁrst and second
moments of the posterior distribution.

Any non-zero variance for the continuous variables will ‘leak’ probability to
other values for the ‘stack’ random variables in the Turing machine simulation,
eventually leading to errors. Lauritzen’s original algorithm assumes positive-
deﬁnite covariance matrices for the continuous random variables, but can be
extend to handle degenerate Gaussians [12]. In summary: posterior marginals
for the Turing machine simulation can be computed exactly, using a modiﬁed
version of the Lerner algorithm when restricted to Dirac distributed continuous
random variables with Heavside conditional probability densities. If Gaussian
random variables and softmax conditional probability densities are also intro-
duced, then the ﬁrst and second moments of the posterior marginals can be
computed ‘exactly’, up to errors in numerical integration, although this will
slowly degrade the quality of the Turing machine simulation in later time steps.
Inference in Bayesian networks is NP-hard [13]. However, assuming that
arithmetic operations can be computed in unit time over arbitrary-precision
numbers (e.g.
the real RAM model), the work necessary at each time step
is constant. Thus, dynamic Bayesian networks can simulate Turing-machines
with only a constant time overhead in the real RAM model, and slowdown
proportional to the time complexity of arbitrary precision arithmetic otherwise.

3 Discussion

This result suggests that causal Bayesian networks may be a richer language for
modeling causality than currently appreciated. Halpern [14] suggests that for
general causal reasoning, a richer language, including some-ﬁrst order features
may be needed. First-order features will likely be very useful for causal model-

6

ing in practice, but the Turing-complete power of dynamic Bayesian networks
suggests that ﬁrst-order features may be unnecessary.

This result for dynamic Bayesian networks is analogous to Siegelmann and
Sontag’s proof that a recurrent neural network can simulate a Turing machine
in real time [7]. In fact, neural networks and Bayesian networks turn out to
have very similar expressive power:

1. Single perceptron ≈ Gaussian naive Bayes (Logistic regression) [15]
2. Multilayer perceptron ≈ Full Bayesian network (Universal function ap-

proximation) [16] [17]

3. Recurrent neural network ≈ Dynamic Bayesian network (Turing complete)
There is an interesting gap in decidability - it takes very little to turn a
sub-Turing framework for modeling into a Turing-complete one.
In the case
of neural networks, a single recurrent layer, with arbitrary-precision rational
weights and a saturating linear transfer function is suﬃcient. With dynamic
Bayesian networks, two time-slices, continuous-valued random variables with
a combination of linear and step function conditional probability densities is
suﬃcient.

Although such a simple recurrent neural network is theoretically capable
of performing arbitrary computations, practical extensions include higher-order
connections, [18], ‘gates’ in long short-term memory [19], and even connections
to an ‘external’ Turing machine [20]. These additions enrich the capabilities of
standard neural networks and make it easier to train them for complex algo-
rithmic tasks.

An interesting question is to what degree dynamic Bayesian networks can
be similarly extended and how the ‘core’ dynamic Bayesian network being ca-
pable of Turing-complete computation aﬀects the overall performance of such
networks.

Acknowledgements

I would like to thank James Reggia, William Gasarch and Brendan Good for
their discussions and helpful comments on early drafts of this paper.

References

[1] D. Poole and M. Crowley, “Cyclic causal models with discrete variables:
Markov chain equilibrium semantics and sample ordering,” in Proceed-
ings of the Twenty-Third international joint conference on Artiﬁcial In-
telligence, pp. 1060–1068, AAAI Press, 2013.

[2] J. Pearl, “Bayesian networks: A model of self-activated memory for evi-
dential reasoning,” in Proceedings of the 7th Conference of the Cognitive
Science Society, University of California, Irvine, pp. 329–334, Aug. 1985.

7

[3] E. Bareinboim, C. Brito, and J. Pearl, Graph Structures for Knowledge Rep-
resentation and Reasoning: Second International Workshop, GKR 2011,
Barcelona, Spain, July 16, 2011. Revised Selected Papers, ch. Local Char-
acterizations of Causal Bayesian Networks, pp. 1–17. Berlin, Heidelberg:
Springer Berlin Heidelberg, 2012.

[4] T. Dean and K. Kanazawa, “A model for reasoning about persistence and

causation,” Comput. Intell., vol. 5, pp. 142–150, Dec. 1989.

[5] K. Murphy, Dynamic Bayesian Networks: Representation, Inference and

Learning. PhD thesis, University of California, Berkeley, 2002.

[6] P. Dupont, F. Denis, and Y. Esposito, “Links between probabilistic au-
learning
tomata and hidden markov models: probability distributions,
models and induction algorithms,” Pattern Recognition, vol. 38, no. 9,
pp. 1349 – 1371, 2005. Grammatical Inference.

[7] H. T. Siegelmann and E. D. Sontag, “On the computational power of neural
nets,” Journal of computer and system sciences, vol. 50, no. 1, pp. 132–150,
1995.

[8] S. L. Lauritzen and D. J. Spiegelhalter, “Local computations with prob-
abilities on graphical structures and their application to expert systems,”
Journal of the Royal Statistical Society. Series B (Methodological), pp. 157–
224, 1988.

[9] J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of Plau-

sible Inference. Morgan Kaufmann Publishers Inc., 1988.

[10] S. L. Lauritzen, “Propagation of probabilities, means, and variances in
mixed graphical association models,” Journal of the American Statistical
Association, vol. 87, no. 420, pp. 1098–1108, 1992.

[11] U. Lerner, E. Segal, and D. Koller, “Exact inference in networks with dis-
crete children of continuous parents,” in Proceedings of the seventeenth
conference on uncertainty in artiﬁcial intelligence, pp. 319–328, Morgan
Kaufmann Publishers Inc., 2001.

[12] C. Raphael, “Bayesian networks with degenerate gaussian distributions,”
Methodology and Computing in Applied Probability, vol. 5, no. 2, pp. 235–
263, 2003.

[13] G. F. Cooper, “The computational complexity of probabilistic inference us-
ing bayesian belief networks,” Artiﬁcial intelligence, vol. 42, no. 2, pp. 393–
405, 1990.

[14] J. Y. Halpern, “Axiomatizing causal reasoning,” Journal of Artiﬁcial In-

telligence Research, pp. 317–337, 2000.

8

[15] A. Ng and M. Jordan, “On discriminative vs. generative classiﬁers: A com-
parison of logistic regression and naive bayes,” Advances in neural infor-
mation processing systems, vol. 14, p. 841, 2002.

[16] G. Cybenko, “Approximation by superpositions of a sigmoidal function,”
Mathematics of control, signals and systems, vol. 2, no. 4, pp. 303–314,
1989.

[17] G. Varando, C. Bielza, and P. Larrañaga, “Expressive power of binary
relevance and chain classiﬁers based on bayesian networks for multi-label
classiﬁcation,” in Probabilistic Graphical Models, pp. 519–534, Springer,
2014.

[18] F. J. Pineda, “Generalization of back propagation to recurrent and higher
order neural networks,” in Neural information processing systems, pp. 602–
611, 1988.

[19] S. Hochreiter and J. Schmidhuber, “Long short-term memory,” Neural com-

putation, vol. 9, no. 8, pp. 1735–1780, 1997.

[20] A. Graves, G. Wayne, and I. Danihelka, “Neural turing machines,” arXiv

preprint arXiv:1410.5401, 2014.

9

