6
1
0
2

 
r
a

 

M
1
1

 
 
]
T
C
h
t
a
m

.

[
 
 

1
v
1
2
6
3
0

.

3
0
6
1
:
v
i
X
r
a

Classical and Relative Realizability

Jaap van Oosten∗

Tingxiang Zou†

March 8, 2016

Abstract

We show that every abstract Krivine structure in the sense of Streicher can
be obtained, up to equivalence of the resulting tripos, from a ﬁltered opca
(A, A′) and a subobject of 1 in the relative realizability topos RT(A′, A);
the topos is always a Booleanization of a closed subtopos of RT(A′, A).
We exhibit a range of non-localic Boolean subtoposes of the Kleene-Vesley
topos.

Keywords: realizability toposes, partial combinatory algebras, geometric mor-
phisms, local operators, abstract Krivine structures, non-localic Boolean topo-
ses.

Introduction

In an impressive series of papers, Jean-Louis Krivine has been emplying ex-
tensions of the untyped λ-calculus to create “realizability interpretations” for
classical ZF set theory. He has been working on this project for roughly the last
20 years.

For a long time, this work seemed to have no connections with other inter-
pretations, also called ‘realizability’, in the Kleene-Troelstra-Hyland tradition
(for an overview of which, see e.g. [21]). And disjoint research groups worked
either in ‘Krivine realizability’ or with notions of realizability related to the
eﬀective topos or similar toposes.

This situation has recently undergone a drastic change: the series of ‘realiz-
ability’ meetings at Chamb´ery has brought researchers from diﬀerent traditions
together, and in particular Thomas Streicher, who published [19], has built an
important bridge.

After reformulating Krivine’s ‘abstract machine’ as an ‘abstract Krivine
structure’ (aks), Streicher proves that from each aks one may construct a so-
called ﬁltered order-pca (a structure for what is called “relative realizability” in

∗Corresponding author. Department of Mathematics, Utrecht University. E-mail address:

j.vanoosten@uu.nl

†presently at Universit´e de Lyon 1, groupe de Logique

1

Birkedal’s thesis [2] and in [3]), and hence a topos; the special features of the
ﬁltered opca constructed from an aks ensure that this will be a Boolean topos.
In a series of papers from 2013–2015 ([5, 4, 6]) Walter Ferrer Santos, Jonas
Frey, Mauricio Guillermo, Octavio Malherbe and Alexandre Miquel develop
theory of ordered pcas whose associated Set-indexed preorders are Boolean tri-
poses. Frey, moreover, investigated variations corresponding to diﬀerent ﬂavours
of Krivine realizability ([7]).

All this work is, however, essentially syntactic. The focus of the present

paper is on a mathematical construction of abstract Krivine structures.

We start with the concept of a Basic Combinatorial Object from Pieter
Hofstra’s elegant paper [8]. BCOs form a preorder-enriched category with a
KZ-monad D (we rehearse the material we need in section 1.1). Every BCO Σ
induces a Set-indexed preorder [−, Σ].

Among BCOs, ﬁltered opcas are characterized as those BCOs for which the
Set-indexed preorder [−, DΣ] is a tripos. What then might be termed a ‘com-
plete ﬁltered opca’, a BCO Σ such that [−, Σ] is a tripos, is characterized (by
our proposition 1.13 and theorem 1.15) as a D-algebra whose algebra structure
preserves ﬁnite meets. This generalizes the characterization of locales among
meet-semilattices. We also give a characterization in terms of one of the deﬁ-
nitions of Ferrer Santos et al, sharpening their result (theorem 1.21). Moreover
we descrive ‘dense’ morphisms of ﬁltered opcas, and recover a suitable analogue
of Peter Johnstone’s simple criterion in [11].

Then, we embark on classical realizability. We prove that for every ﬁltered
opca A, A′) and downwards closed subset U ⊂ A such that U ∩ A′ = ∅, we
have an abstract Krivine structure. Moreover, the tripos arising from this aks
(by Streicher’s construction) represents a topos which is the Booleanization of
a closed subtopos of the standard realizability topos RT(A′, A): that is, for a
subobject U of 1 in RT(A′, A) we get the sheaf subtopos corresponding to the
local operator ((−) → U ) → U . And, every tripos resulting from an aks is of
this form.

Finally, we investigate when our Boolean triposes are localic. We compare
criteria independently given by Hofstra and Krivine, and ﬁnd them, reassuringly,
to be equivalent.

Our ﬁnal theorem specializes to the ﬁltered pca K2 of functions N → N with
ﬁlter the set of recursive functions. We exhibit a range of non-localic Boolean
subtoposes of the Kleene-Vesley topos (theorem 2.12).

1 BCOs, Filtered OPCAs and Triposes

1.1 BCOs

This section rehearses what we shall need from Hofstra’s paper [8].

Deﬁnition 1.1 A Basic Combinatorial Object (BCO) consists of a poset (Σ, ≤)
and a set FΣ of partial endofunctions on Σ, which structure satisﬁes the following
requirements:

2

i) Every f ∈ FΣ has downwards closed domain, and is order-preserving on

its domain.

ii) There is a total map i ∈ FΣ such that i(a) ≤ a for all a ∈ Σ.

iii) For every pair f, g ∈ FΣ there is some h ∈ FΣ such that whenever g(f (a))

is deﬁned, h(a) ≤ g(f (a)).

Deﬁnition 1.2 Let (Σ, ≤, FΣ) and (Θ, ≤, FΘ) be BCOs. A morphism from
(Σ, ≤, FΣ) to (Θ, ≤, FΘ) is a total function φ : Σ → Θ satisfying the conditions:

i) There is an element u ∈ FΘ such that for every inequality a ≤ a′ in Σ we
have u(φ(a)) ≤ φ(a′) in Θ (in particular, u is deﬁned on all elements in
the image of φ).

ii) For every f ∈ FΣ there is a g ∈ FΘ such that for all a in the domain of f ,

φ(a) is in the domain of g, and g(φ(a)) ≤ φ(f (a)).

Given two morphisms φ, ψ : Σ → Θ we say φ ≤ ψ if there is an element g ∈ FΘ
satisfying g(φ(a)) ≤ ψ(a) for all a ∈ Σ.

It is readily veriﬁed that with these deﬁnitions, we have a preorder-enriched
category BCO. This category has a terminal object 1 and binary products.
Therefore, as in any cartesian 2-category, one can speak of objects which have
ﬁnite internal products: a BCO has internal terminal object (or:
internal top
element) if the BCO-morphism Σ → 1 has a right adjoint (denoted ⊤); and Σ
has internal binary products (binary meets) if the diagonal map Σ → Σ × Σ has
a right adjoint. Such a right adjoint, if it exists, will be denoted (−) ∧ (−).

If a BCO has ﬁnite internal meets, we deﬁne the set TV(Σ) of designated

truth-values as

TV(Σ) = {a ∈ Σ | for some f ∈ FΣ, f (⊤) ≤ a}

Clearly, TV(Σ) is an upwards closed subset of Σ, and one can show that for
all a, b ∈ TV(Σ), also a ∧ b ∈ TV(Σ). Therefore we think of TV(Σ) as a ﬁlter.
However, bear in mind that a ∧ b is in general not the meet of a and b in the
poset (Σ, ≤).

Deﬁnition 1.3 An order-pca or opca is a poset (A, ≤) with a partial binary
function (called application) A × A → A, written a, b 7→ ab, which has the
following properties:

i) Whenever ab is deﬁned and a′ ≤ a, b′ ≤ b, then a′b′ is deﬁned and a′b′ ≤ ab.

ii) There are elements k and s in A such that for all x, y ∈ A we have (kx)y ≤
x, and for all x, y, z ∈ A, whenever (xz)(yz) is deﬁned, so id ((sx)y)z, and
((sx)y)z ≤ (xz)(yz).

3

From now on, when we work in an order-pca, we associate to the left and write
abc instead of (ab)c.

Opcas were deﬁned in [9], and Longley’s deﬁnition of applicative morphism
for pcas ([17]) was extended there to opcas. For more theory of opcas and
unexplained notions and notations, the reader is referred to [22].

Every opca (A, ≤) is a BCO (A, ≤, FA) where FA consists of the partial
maps φa : b 7→ ab given by the opca structure. Moreover, as BCO every opca
has ﬁnite internal meets (for the map a ∧ b we can take pab, where p is a pairing
combinator in A; every element of A can serve as top element, and TV(A) = A).

Theorem 1.4 (Hofstra, 5.1) Let A and B be opcas. A function f : A → B
is an applicative morphism of opcas precisely when it is a ﬁnite internal meet-
preserving morphism of BCOs.

Deﬁnition 1.5 A ﬁltered opca is an opca A together with a subset A′ which
is closed under application of A and contains choices for k and s (for A). The
subset A′ is called the ﬁlter.

It is immediate that, in deﬁnition 1.5, A′ itself is an opca; however, not every
subset of an opca A which is closed under the application of A and is an opca
with this restricted application, is a ﬁlter: see [23], 5.4 for a counterexample.

Every ﬁltered opca (A, A′) is a BCO (A, A′, FA′) where FA′ consists of the
partial maps φa : b 7→ ab with a ∈ A′. Every opca A is of course trivially
a ﬁltered opca with A′ = A. Another example of ﬁltered opcas are meet-
semilattices (with top element ⊤): application is the meet operation, and the
ﬁlter is {⊤}. Many pcas, considered as opcas with the discrete order, contain
nontrivial ﬁlters: Scott’s graph model with the ﬁlter of r.e. (or, more generally,
Σn) subsets of N; Kleene’s second model K2 of functions N → N, with the ﬁlter
consisting of the total recursive functions (or, more generally, ∆n-functions).

We need two further notions about BCOs: the downset monad D, and the
Set-indexed preorder [−, Σ] (for a BCO Σ).

For any BCO (Σ, ≤, FΣ) we can consider the poset DΣ of downwards closed
subsets of Σ, ordered by inclusion, and system of maps FDΣ which consists of
those partial maps F : DΣ → DΣ for which there is some f ∈ FΣ such that, for
all U ∈ DΣ, F U is deﬁned if and only if U is a subset of the domain of f , in
which case F U is the downwards closure of {f (a) | a ∈ U }.

The operation D is the object part of a 2-monad on BCO: the unit Σ → DΣ
is given by the principal downset map ↓(−) sending a ∈ Σ to {b | b ≤ a}, and
multiplication is union. The monad D is a so-called KZ-monad; this means that
any object carries at most one algebra structure DΣ → Σ, and this structure,
when it exists, is left adjoint to the unit map.

We note that if Σ is a ﬁltered opca, so is DΣ:

if Σ = (A, A′) then DΣ =

(DA, Φ) where Φ consists of those downsets of A that meet the ﬁlter A′.

Every BCO Σ gives rise to a Set-indexed preorder [−, Σ]: for a set X, we
have the set of (total) functions X → Σ, and for two such functions φ, ψ we

4

have φ ≤ ψ if and only if there exists f ∈ FΣ such that for all x ∈ X, f (φ(x))
is deﬁned and f (φ(x)) ≤ ψ(x). If Σ is a ﬁltered opca (A, A′), we shall abuse
language and write [−, A] for the induced Set-indexed preorder, even though
one should be aware that the preorder involves A′.

We shall be interested in conditions under which the preorder [−, Σ] is a

tripos.

We note that the assignment Σ 7→ [−, Σ] gives a full 2-embedding of BCO
into the 2-category of Set-indexed preorders. We also note, that the indexed
preorder [−, Σ] has indexed ﬁnite meets if and only if the BCO Σ has internal
ﬁnite meets. Moreover, a map h between BCOs with internal ﬁnite meets pre-
serves those meets if and only if the corresponding transformation between the
indexed preorders preserves indexed ﬁnite meets.

The following pretty theorem characterizes the ﬁltered opcas among BCOs,

in terms of the two notions just discussed:

Theorem 1.6 (Hofstra, 6.9) A BCO Σ is (equivalent to) a ﬁltered opca, pre-
cisely when the indexed preorder [−, DΣ] is a tripos.

Theorem 1.7 (Hofstra, 6.13) Let Σ be a BCO with internal ﬁnite meets.
Then [−, Σ] is a tripos, precisely when Σ is a ﬁltered opca (A, A′) which has a

(∗) There is an element v ∈ A′ such that whenever we have an α ∈ DA and

pseudo-D-algebra structure W : DΣ → Σ which satisﬁes the following condition:
b, c ∈ A for which, for each a ∈ α, ab is deﬁned and ≤ c, then v(W α)b is

deﬁned and ≤ c.

See our theorem 1.15 for a more elegant formulation of the condition (∗).

We conclude this overview of Hofstra’s results with some material on geometric
morphisms.

Deﬁnition 1.8 (Hofstra, 7.1) A morphism φ : Σ → Θ of BCOs is called
(computationally) dense if there is some h ∈ FΘ and a function H : FΘ → FΣ
satisfying the following property: for a ∈ Σ and g ∈ FΘ, if φ(a) is in the domain
of g then H(g)(a) and h(φ(H(g)(a))) are deﬁned, and h(φ(H(g)(a))) ≤ g(φ(a)).

Theorem 1.9 (Hofstra, 7.2) BCOs with dense maps form a sub-preorder-
enriched category of BCO, to which the monad D restricts.

Theorem 1.10 i)

[Hofstra, 7.3] For a morphism φ of BCOs we have: φ

is dense precisely when Dφ has a right adjoint.

ii)

[Hofstra, 7.8] If φ is a map between D-algebras, then φ is dense if and
only if it has a right adjoint.

Theorem 1.11 (Hofstra, 7.9) Let Σ be a BCO such that [−, Σ] is a tripos.
Then this tripos is localic if and only if the preorder TV(Σ) has a least element.

5

1.2 Filtered opcas, triposes and dense morphisms

In this section we present some notions Hofstra did not explicitly give in his
paper. In particular, we need an appropriate deﬁnition of morphism between
ﬁltered opcas, as well as a characterization of the dense ones among these.
Moreover, we have some reﬁnements and generalizations.

Deﬁnition 1.12 Let (A, A′) , (B, B′) be ﬁltered opcas. An applicative mor-
phism (A, A′) → (B, B′) is a function f : A → B satisfying the following
conditions:

i) For all a ∈ A′ there is a b ∈ B′ with b ≤ f (a) (so, f maps A′ into the

upwards closure of B′).

ii) There is an element r ∈ B′ such that for all a′ ∈ A′ and a ∈ A, whenever

a′a is deﬁned in A, rf (a′)f (a) is deﬁned in B and rf (a′)f (a) ≤ f (a′a).

iii) There is an element u ∈ B′ such that for every inequality x ≤ y in A,

uf (x) is deﬁned and uf (x) ≤ f (y).

The following result corresponds to theorem 1.4:

Proposition 1.13 For ﬁltered opcas (A, A′) and (B, B′), a function f : A → B
is an applicative morphism precisely when it is a ﬁnite-meet preserving map of
BCOs.

Proof. Let φ : (A, A′) → (B, B′) be an applicative morphism. Then φ is a
map of BCOs: requirement i) of deﬁnition 1.2 is identical to requirement iii) of
1.12, and for ii) of 1.2, given f ∈ A′, pick b ∈ B′ such that b ≤ φ(f ) (by i) of
1.12) and let g ≡ hyirby, where r is from ii) of 1.12. If f a is deﬁned in A, then
rφ(f )φ(a) ≤ φ(f a), so gφ(a) ≤ rbφ(a) ≤ rφ(f )φ(a) ≤ φ(f a).

We need to show that φ preserves internal ﬁnite meets. Since φ maps A′
into the upwards closure of B′, φ preserves the terminal object. Binary internal
meets are given by the pairing combinators in the respective opcas. If we denote
pairing and unpairing in A by p, p0, p1 and in B by q, q0, q1, then for

t = hxiq(rφ(p0)x)(rφ(p1)x)

we have tφ(paa′) ≤ qφ(a)φ(a′) for all a, a′ ∈ A; for

u = hxir(rφ(p)(q0 x))(q1x)

we have u(qφ(a)φ(a′)) ≤ φ(paa′) for all a, a′ ∈ A. So φ preserves internal ﬁnite
meets.

Conversely, suppose φ : (A, A′) → (B, B′) is a morphism of BCOs which
preserves internal ﬁnite meets. Requirement i) of 1.12 is satisﬁed because φ
preserves top elements. Requirement iii) is satisﬁed because φ is a map of
BCOs. As for requirement ii), let α ∈ B′ be such that for all a, a′ ∈ A,

α(qφ(a)φ(a′)) ≤ φ(paa′)

6

(since φ preserves ﬁnite meets). There is an element d ∈ A′ such that whenever
aa′ is deﬁned in A, d(paa′) ≤ aa′. Since φ is a map of BCOs, there is e ∈ B′
such that when aa′ is deﬁned in A, eφ(paa′) ≤ φ(aa′). Combining, we have for
a, a′ ∈ A such that aa′ is deﬁned,

eα(qφ(a)φ(a′)) ≤ φ(aa′)

so if r = hxyieα(qxy) then r satisﬁes requirement ii) of 1.12.

Next, we look at ﬁltered opcas (A, A′) for which the indexed preorder [−, A] is
a tripos. By Hofstra’s theorem 1.7, (A, A′) carries the structure of a pseudo D-
algebra satisfying the condition (∗). In order to be explicit and to ﬁx notation,
let us deﬁne what we mean by “pseudo D-algebra”:

Deﬁnition 1.14 A pseudo D-algebra structure on a BCO Σ is a function

downwards closure of α, and ↓a for ↓{a}:

W : DΣ → Σ satisfying the following conditions, where we write ↓α for the
1) There is u ∈ FΣ such that for every inclusion α ⊆ α′ in DΣ, u(W α) is

deﬁned and u(W α) ≤ W α′.
for all x ∈ α f (x) is deﬁned, then g2(W α) is deﬁned and g2(W α) ≤
W(↓{f (x) | x ∈ α}).

2) For all f ∈ FΣ there is some g2 ∈ FΣ such that for all α ∈ DΣ:

if

3) There are elements g3, h3 ∈ FΣ such that for all A ∈ D2Σ:

g3(W(↓{W α | α ∈ A})) ≤ W(S A)
h3(W(S A)) ≤ W(↓{W α | α ∈ A})

opcas.

and h4(a) ≤ W(↓a).

4) There are elements g4, h4 ∈ FΣ such that for all a ∈ Σ, g4(W(↓a)) ≤ a
Theorem 1.15 A ﬁltered opca (A, A′) with pseudo D-algebra structure W satis-
ﬁes condition (∗) of 1.7, precisely when W is an applicative morphism of ﬁltered
Proof. First suppose W is an applicative morphism. So, we have r ∈ A′ such
that whenever αβ is deﬁned in D(A, A′), r(W α)(W β) is deﬁned and r(W α)(W β) ≤
W ↓{ab | a ∈ α, b ∈ β}.

Now suppose for all a ∈ α that ab is deﬁned and ab ≤ c. Then α(↓b) is

deﬁned and

α(↓b) ⊆ ↓{ab | a ∈ α, b ∈ β} ⊆ ↓c

We have r(W α)(W ↓b) ≤ W(α(↓b)). We have u ∈ A′ such that
u(r(_ α)(_ ↓b)) ≤ u(_(α(↓b))) ≤ _ ↓c

7

Let g4, h4 ∈ A′ be as given by deﬁnition 1.14 4). Then since h4b ≤ W ↓b,

g4(u(r(W α)(W ↓b))) ≤ g4(W ↓c) ≤ c
g4(u(r(W α)(h4b))) ≤ g4(W ↓c) ≤ c

Now let v = hxyig4(u(rx(h4y))). It is easy to verify that v ∈ A′ and that v
satisﬁes the condition (∗).

is in the upwards closure of A′. The ﬁlter of D(A, A′) consists of those downsets

Conversely, suppose v satisﬁes (∗). We have to prove that W is an applicative
morphism. For i) of 1.12, we have to prove that for α in the ﬁlter of D(A, A′), W α
of A which intersect A′. Pick a ∈ α ∩ A′. Then ↓a ⊆ α so u(W ↓a) ≤ W α (where
u is from 1) of 1.14). And h4a ≤ W ↓a, so

u(h4a) ≤ u(_ ↓a) ≤ _ α

Since u and h4 are in A′, we see that i) is satisﬁed.

Condition iii) of 1.12 holds because W is supposed to be a map of BCOs.

For 1.12 ii), suppose αβ is deﬁned, so for all a ∈ α, b ∈ β, ab is deﬁned in A.

Note that u(W ↓ab) ≤ W αβ for a ∈ α, b ∈ β. Also, h4(ab) ≤ W ↓(ab), so

u(h4(ab)) ≤ u(_ ↓(ab)) ≤ _(αβ)

Let ξ = hxyiu(h4(xy)), then ξ ∈ A′ and for a ﬁxed b ∈ β we have for all a ∈ α,
ξab ≤ W(αβ). By (∗) we have that v(W{ξa | a ∈ α})b is deﬁned and

Let η = hyxivxy. Then η ∈ A′ and

v(_{ξa | a ∈ α})b ≤ _(αβ)

ηb(_{ξa | a ∈ α}) ≤ v(_{ξa | a ∈ α})b ≤ _(αβ)

This holds for all b ∈ β, so by (∗) we have

Hence,

v(_{ηb | b ∈ β})(_{ξa | a ∈ α}) ≤ _(αβ)
η(_{ξa | a ∈ α})(_{ηb | b ∈ β}) ≤ _(αβ)

By 2) of 1.14, choose ξ′, η′ ∈ A′ such that for all α, β,

and let z = hxyiη(ξ′x)(η′y). Then z ∈ A′ and

ξ′(W α) ≤ W{ξa | a ∈ α}
η′(W β) ≤ W{ηb | b ∈ β}

z(W α)(W β) ≤ η(ξ′(W α))(η′(W β))

≤ η(W{ξa | a ∈ α})(W{ηb | b ∈ β}) ≤ W(αβ)

so z realizes condition ii) of 1.12.

8

Remark 1.16 1. Note that one may reformulate theorem 1.15 thus:
for a
ﬁltered opca (A, A′), the Set-indexed preorder [−, A] is a tripos precisely when
(A, A′) is a pseudo D-algebra in the subcategory (of BCO) of ﬁltered opcas and
applicative morphisms.

2. Theorem 1.15 is, in view of proposition 1.13, the generalization to the
context of ﬁltered opcas, of the condition of inﬁnite distributivity for locales.

Indeed, a suplattice L is a locale precisely when the supremum map W : DL → L
preserves ﬁnite meets: W(α ∩ β) = (W α) ∧ (W β).

Let us draw an immediate inference from theorem 1.15:

Corollary 1.17 Suppose Σ is a BCO such that [−, Σ] is a tripos. Then [−, Σ]
is a subtripos of [−, DΣ].

Proof. The assumption implies, by 1.7, that Σ is a ﬁltered opca, and, by 1.15
and 1.13, that the transformation of indexed preorders [−, DΣ] → [−, Σ] induced

by W, preserves ﬁnite meets. Hence the pair W ⊣ ↓(−) deﬁnes a geometric

inclusion of [−, Σ] into [−, DΣ].

At this point we would like to relate our notion of ﬁltered opcas satisfying the
condition of 1.7, to the notion of implicative oca discussed in [4].

Deﬁnition 1.18 (Ferrer Santos et al) An implicative ordered combinatory
algebra (ioca) is a ﬁltered opca (A, A′) satisfying the following conditions:

a) The application map is total.

b) The poset (A, ≤) has inﬁma of arbitrary subsets.

c) There is an operation called implication, a, b 7→ (a ⇒ b), order-reversing
in the ﬁrst argument and order-preserving in the second, such that for all
a, b, c ∈ A we have: a ≤ (b ⇒ c) if and only if ab ≤ c.

d) There is an element e ∈ A′ such that for all a, b, c ∈ A:

if ab ≤ c then

ea ≤ (b ⇒ c).

Ferrer Santos et al prove the following result:

Theorem 1.19 (Ferrer Santos et al, 5.8) If (A, A′) is an implicative oca,
then [−, A] is a tripos.

However, the requirements for an ioca are too strong for the conclusion. We
reformulate the notion so that we obtain an equivalence.

Deﬁnition 1.20 A pre-implicative opca is a ﬁltered opca (A, A′) satisfying the
following conditions:

i) There is a map V : P(A) → A and there are constants i, i′ ∈ A′ such that

for all α ⊆ A:

for all a ∈ α, i(V α) ≤ a
for all b ∈ A, if b ≤ a for all a ∈ α, then i′b ≤ V α

9

ii) There is a binary implication a, b 7→ (a ⇒ b) on A and there are constants

e, e′ ∈ A′ satisfying, for all a, b, c ∈ A:

if ab ≤ c then ea ≤ (b ⇒ c)
if a ≤ (b ⇒ c) then e′ab ≤ c

Note that in particular, the application on A need not be total.

Theorem 1.21 Let Σ be a BCO. Then [−, Σ] is a tripos if and only if Σ is a
pre-implicative opca.

Proof. First, suppose that [−, Σ] is a tripos. By Hofstra’s theorem 1.7, we
know that Σ is a ﬁltered opca (A, A′) which carries a pseudo D-algebra structure

W : DA → A, which satisﬁes condition (∗).

For α, β ∈ DA we deﬁne I(α, β) as

I(α, β) = {a ∈ A | for all a′ ∈ α, aa′ is deﬁned and an element of β}

Clearly, I(α, β) ∈ DA. Deﬁne the operation ⇒ by

(b ⇒ c) = _ I(↓b, ↓c)

Now if ab ≤ c then clearly a ∈ I(↓b, ↓c), so ↓a ⊆ I(↓b, ↓c) so with u as in 1)

of 1.14 we have u(W ↓a) ≤ (b ⇒ c) and since with h4 from 4) in 1.14 we have
h4a ≤ W ↓a, we ﬁnd

u(h4a) ≤ (b ⇒ c)

So if e is deﬁned as hxiu(h4x) then e satisﬁes the ﬁrst condition in ii) of deﬁni-
tion 1.20.

For the second condition of 1.20 ii), we note that for a ∈ I(b, c) we have
ab deﬁned and ab ≤ c; by (∗) we see that v(b ⇒ c)b is deﬁned and ≤ c; so if
a ≤ (b ⇒ c) then vab ≤ c. Hence we can take v as our e′, and we conclude that
the operation ⇒ and the constants e, e′ satisfy 1.20 ii).

For the map V, deﬁned on arbitrary subsets α ⊆ A, let O(α) be the set of

lower bounds of α (then O(α) ∈ DA) and put

^ α = _ O(α)

If a ∈ α is arbitrary, then for all b ∈ O(α), skkb ≤ a. So if g2 is as in 1.14 2) for

skk, then g2(V α) ≤ a. Hence we can take g2 as our i.
The second condition reads: for all b ∈ O(α), i′b ≤ V α = W O(α). But we
have a combinator w ∈ A′ such that whenever β ∈ DA and a ∈ β, wa ≤ W β.

So it is clear how to pick i′. We conclude that (A, A′) has the structure of a
pre-implicative opca.

Conversely, suppose (A, A′) is a ﬁltered opca endowed with operations V and ⇒

and elements i, i′, e, e′ satisfying the conditions for a pre-implicative opca. For

10

an indexed family {Φx | x ∈ X} of elements of A, we shall also write Vx∈X Φx
for V{Φx | x ∈ X}.

Deﬁne W : DA → A by

_ α = ^b∈A

(a ⇒ b) ⇒ b)

(^a∈α

We prove that this map W provides (A, A′) with a pseudo D-algebra structure

which satisﬁes condition (∗) of theorem 1.7.

We deﬁne a number of elements of A′:

η = hxii′(ix)
ξ = hxie(e′x)
H = hxyie′(ξx)(ηy)
K = hxii′(e(H(ix)))
P = huvie′(iv)(i′(eu))

And we note the following facts concerning these elements:

a) For α ∈ DA, a family {Φa | a ∈ α} and α′ ⊆ α, we have

η(^a∈α

Φa) ≤ ^a∈α′

Φa

b) For inequalities b ≤ b′, c ≤ c′ in A we have

ξ(b′ ⇒ c) ≤ (b ⇒ c)
ξ(b ⇒ c) ≤ (b ⇒ c′)

c) For α ⊆ α′ in DA we have

d)

If f ∈ A, α ∈ DA and f a ≤ b for every a ∈ α, then

K(_ α) ≤ _ α′

P f (_ α) ≤ b

By way of example, we spell out the proof of c); the proof of the other statements

is left to the reader. Assume α ⊆ α′. Then by a), η(Va∈α′(a ⇒ b)) ≤ Va∈α(a ⇒
b), so by b), ξ(Va∈α(a ⇒ b) ⇒ b) ≤ η(Va∈α′ (a ⇒ b)) ⇒ b, hence e′(ξ(Va∈α(a ⇒
b) ⇒ b))(η(Va∈α′(a ⇒ b))) ≤ b. Therefore, by deﬁnition of H, H(Va∈α(a ⇒
b) ⇒ b)(Va∈α′ (a ⇒ b)) ≤ b, hence e(H(Va∈α(a ⇒ b) ⇒ b)) ≤ Va∈α′(a ⇒
b) ⇒ b. Since i(W α) ≤ Va∈α(a ⇒ b) ⇒ b and application is downwards
closed and order-preserving, we get e(H(i(W α))) ≤ Va∈α′ (a ⇒ b) ⇒ b, so
i′(e(H(i(W α)))) ≤ W α′, which is K(W α) ≤ W α′ as desired.
Now to prove that W is a pseudo D-algebra map, requirement 1) of deﬁni-

tion 1.14 follows at once from property c). For requirement 4) we deﬁne the
element

Q = hxii′(e(huvie′(iv)u)x)

11

and we claim that whenever a ∈ α, Qa ≤ W α. Indeed,

i(Va′∈α(a′ ⇒ b)) ≤ (a ⇒ b), so e′(i(Va′∈α(a′ ⇒ b)))a ≤ b, hence

(huvie′(iv)u)a(Va′∈α(a′ ⇒ b)) ≤ b, i.e.
e(huvie′(iv)u)a ≤ Va′∈α(a′ ⇒ b) ⇒ b, hence
i′(e(huvie′(iv)u)a) ≤ W α, which is

For requirement 3),

For requirement 2) we use statement d). Suppose f a is deﬁned for all a ∈

For the other inequality of 1.14 4), we claim that for R = hxie′(ix)(i′(e(skk)))

Qa ≤ W α
we have R(W ↓a) ≤ a; the veriﬁcation is easy.
α. Then Q(f a) ≤ W ↓{f a | a ∈ α} for all a ∈ α, hence P (hxiQ(f x))(W α) ≤
W ↓{f a | a ∈ α} as desired.
let A ∈ D2A, α ∈ A. Since α ⊆ S A we have
K(W α) ≤ W(S A) by c). Hence Kx ≤ W(S A) for all x ∈ ↓{W α | α ∈ A},
so P K(W ↓{W α | α ∈ A} ≤ W(S A). The other inequality of 3) is realized by
the element P (hxiQ(Qx)): for a ∈ S A, there is α ∈ A such that a ∈ α. Then
Qa ≤ W α, so Qa ∈ ↓{W α | α ∈ A} whence Q(Qa) ≤ W ↓{W α | α ∈ A}. By d),
we have P (hxiQ(Qx))(WS A) ≤ W ↓{W α | α ∈ A}. We conclude that W is a
It remains to show that the map W satisﬁes condition (∗) of 1.7. This also
and ab ≤ c. Then for all a ∈ α, (hxixb)a ≤ c, whence P (hxixb)(W α) ≤ c. Hence
if v = huwiP (hxixw)u, then v(W α)b ≤ c as required. And obviously, v ∈ A′.

readily follows from statement d) above. Suppose for all a ∈ α, ab is deﬁned

pseudo D-algebra structure on (A, A′).

We now turn to computationally dense maps between ﬁltered opcas. The fol-
lowing deﬁnition is a direct translation of Hofstra’s general notion of a dense
map between BCOs (1.8).

Deﬁnition 1.22 Suppose f : (A, A′) → (B, B′) is an applicative morphism of
ﬁltered opcas. Then f is called computationally dense if there is an element
m ∈ B′ with the following property:

(cd)

For every b′ ∈ B′ there is an a′ ∈ A′ such that for all a ∈ A,
if b′f (a) is deﬁned then so is a′a, and mf (a′a) ≤ b′f (a)

In Skolemized form, condition (cd) reads:

(cd − sk)

There is a function g : B′ → A′ such that for all b′ ∈ B′ and a ∈ A,
if b′f (a) is deﬁned then so is g(b′)a, and mf (g(b′)a) ≤ b′f (a)

Peter Johnstone, in [11], has given a simpliﬁcation of the deﬁnition of a com-
putationally dense applicative morphism for pcas. A similar simpliﬁcation can
also be obtained here:

Proposition 1.23 Let f : (A, A′) → (B, B′) be an applicative morphism. Then
f is computationally dense if and only if there is a function h : B′ → A′ and an
element t ∈ B′ such that for all b′ ∈ B′,

tf (h(b′)) ≤ b′

12

Proof. Suppose f is applicative, with elements r, u ∈ B′ satisfying ii) and iii)
of deﬁnition 1.12, respectively.

For the ‘only if’ part, assume g : B′ → A′ and m ∈ B′ satisfy (cd-sk). Pick
a′ ∈ A′ arbitrary, and ﬁx some v ∈ B′ with v ≤ f (a′) (by i) of 1.12). Deﬁne
h(b′) = g(kb′), then h maps B′ into A′. Let t = hxim(rxv), then t ∈ B′.

Now for an arbitrary b′ ∈ B′, we have kb′f (a′) deﬁned, so by (cd-sk) we
have mf (g(kb′)a′) ≤ kb′f (a′) ≤ b′. In other words, mf (h(b′)a′) ≤ b′. Since in
particular h(b′)a′ is deﬁned, we have rf (h(b′))f (a′) deﬁned and rf (h(b′))f (a′) ≤
f (h(b′)a′), so m(rf (h(b′))v) is deﬁned and m(rf (h(b′))v) ≤ mf (h(b′)a′) ≤ b′.
We see that tf (h(b′)) is deﬁned and tf (h(b′)) ≤ b′, as desired.

For the ‘if’ part, assume h : B′ → A′ and t ∈ B′ satisfy tf (h(b′)) ≤ b′ for
all b′ ∈ B′. Let p, p0, p1 be pairing and unpairing operators in A′. Choose
q0, q1 ∈ B′ with qi ≤ f (pi) (by 1.12 i)). Suppose b′ ∈ B′, b′f (a) deﬁned. Then
tf (h(b′))f (a) ≤ b′f (a). Since p0(ph(b′)a) ≤ h(b′) we have

rf (p0)f (ph(b′)a) ≤ f (p0(ph(b′)a))

and hence

u(rq0f (ph(b′)a)) ≤ uf (p0(ph(b′)a)) ≤ f (h(b′))

Let N = hxiu(rq0x), so N f (ph(b′)a) ≤ f (h(b′)). Then

t(N f (ph(b′)a))f (a) ≤ tf (h(b′))f (a) ≤ b′f (a)

Also, since p1(ph(b′)a) ≤ a we have, in a similar way,

u(rq1f (ph(b′)a)) ≤ uf (p1(ph(b′)a)) ≤ f (a)

Let M = hxiu(rq1x). We see that for m = hxit(N x)(M x), we have

mf (ph(b′)a) ≤ b′f (a)

So if we deﬁne g(b′) as ph(b′) then mf (g(b′)a) ≤ b′f (a), as desired.

Now suppose Σ and Θ are BCOs such that [−, Σ] and [−, Θ] are triposes. Then
by 1.7, Σ and Θ are ﬁltered opcas which are also pseudi D-algebras.

Every geometric morphism [−, Σ] → [−, Θ] arises (by fullness of the embed-
ding of BCO into the 2-category of Set-indexed preorders) from an adjoint pair of
maps between Σ and Θ which preserve internal ﬁnite meets; that is, by 1.13, an
adjoint pair of applicative morphisms. Since a map between D-algebras is dense
precisely when it has a right adjoint, we see that such geometric morphisms are
uniquely determined by computationally dense applicative morphisms Θ → Σ.

2 Krivine structures and triposes, and ﬁltered

opcas

Thomas Streicher ([19]) has reformulated Krivine’s classical realizability (as
presented in, e.g., [14, 15]) in a style reminiscent of combinatory logic, and

13

therefore susceptible to an analysis with notions from the theory of pcas. He
formulates the notion of an abstract Krivine structure. Out of an abstract
Krivine structure one constructs a ﬁltered opca Σ (in fact, an implicative oca
in the terminology of Ferrer Santos et al–see1.18) such that the tripos [−, Σ] is
Boolean. This provides a link between Krivine’s interpretations of Set Theory
and Topos Theory. It is an interesting question whether in the topos resulting
from [−, Σ] one can build (using the ideas of algebraic set theory, for which see
[12]) internal models which would faithfully reﬂect Krivine’s interpretations; as
was done, for example, in Hyland’s eﬀective topos, for the Friedman-McCarty
realizability interpretation for IZF, in [13].

The ﬁrst author discovered that, given a ﬁltered opca (A, A′) and a nontriv-
ial subterminal object in the relative realizability topos RT(A, A′), one can con-
struct an abstract Krivine structure ([20]). A similar idea appeared in Wouter
Stekelenburg’s PhD thesis ([18]). This section provides the details and also
shows that, up to equivalence of the resulting toposes, every abstract Krivine
structure arises in this way.

This means we have a pretty concrete way to present toposes arising out of
abstract Krivine structures; but we still have to ﬁlter out the non-localic toposes.
These are the ones of interest, as the set theory of Boolean localic toposes is
basically forcing (see [1] for an exposition). It turns out that Hofstra’s condition
1.11 (which we shall compare with a criterion given by Krivine) gives rise to
some recursion-theoretic calculations in our pet example: Kleene’s second model
of functions N → N, with the total recursive functions as ﬁlter.

Deﬁnition 2.1 (Streicher) An abstract Krivine structure (aks) consists of the
following data:

i) A set Λ of terms, together with a binary operation t, s 7→ t·s : Λ × Λ → Λ,

and distinguished elements K, S, cc.

ii) A subset QP of Λ (the set of quasi-proofs), which contains K, S and cc, and

is closed under the binary operation of i).

iii) A set Π of stacks together with a ‘push’ operation

t, π 7→ t.π : Λ × Π → Π

(when we iterate this operation, we associate to the right, and write t.s.π
for t.(s.π)), as well as an operation

π 7→ kπ : Π → Λ

iv) A subset ⊥⊥ (the pole) of Λ × Π, which satisﬁes the following requirements:

(S1) If (t, s.π) ∈⊥⊥ then (t·s, π) ∈⊥⊥

(S2) If (t, π) ∈⊥⊥ then (K, t.s.π) ∈⊥⊥ (for any term s)

(S3) If ((t·u)·(s·u), π) ∈⊥⊥ then (S, t.s.u.π) ∈⊥⊥

14

(S4) If (t, kπ.π) ∈⊥⊥ then (cc, t.π) ∈⊥⊥
(S5) If (t, π) ∈⊥⊥ then (kπ, t.π′) ∈⊥⊥ (for any π′)

Given a set U of terms and a set α of stacks, we deﬁne

U ⊥⊥ = {π ∈ Π | for all t ∈ U , (t, π) ∈⊥⊥}
α⊥⊥ = {t ∈ Λ | for all π ∈ α, (t, π) ∈⊥⊥}

Clearly, we have closure operators (−)⊥⊥⊥⊥ on both P(Λ) and P(Π). For α ⊆ Π,
we also write |α| for α⊥⊥.

Let P⊥⊥(Π) be {β ⊆ Π | β⊥⊥⊥⊥ = β}, ordered by reverse inclusion. We deﬁne

an application • on P⊥⊥(Π) by putting

α•β = {π ∈ Π | for all t ∈ |α| and s ∈ |β|, (t, s.π) ∈⊥⊥}⊥⊥⊥⊥

Moreover, let Φ ⊆ P⊥⊥(Π) be the set

Φ = {α ∈ P⊥⊥(Π) | |α| ∩ QP 6= ∅}

Theorem 2.2 (Streicher) The set P⊥⊥(Π) forms, together with the given ap-
plication, a total order-ca, and Φ is a ﬁlter in it. The Set-indexed preorder
[−, P⊥⊥(Π)] is a Boolean tripos.

Ferrer Santos et al ([4]) observe that, in fact, the order-ca P⊥⊥(Π) is an implica-
tive order-ca (see deﬁnition 1.18), with implication deﬁned by

α ⇒ β = {t.π | t ∈ |α|, π ∈ β}⊥⊥⊥⊥

and that the element {cc}⊥⊥ realizes ‘Pierce’s Law’:

{cc}⊥⊥ ≤ ((α ⇒ β) ⇒ α) ⇒ α

Consequently, the deﬁne a Krivine order-ca as an implicative order-ca with a
distinguished element in the ﬁlter, which realizes Pierce’s Law.

They give a recipe for constructing, from each Krivine order-ca A, an ab-
stract Krivine structure KA. And it turns out that the tripos constructed from
KA in Streicher’s way, is equivalent to the tripos [−, A] (theorem 5.15 in [4]).
We call such triposes Krivine triposes.

We follow a diﬀerent approach, which in our view leads to a simpler represen-
tation of Krivine triposes. Let us recall (see [22] for details) that in any opca one
has a representation of the natural numbers {¯n | n ∈ N}; since ¯n is ks-deﬁnable,
it will be in any ﬁlter. Moreover, we have a coding of sequences [a0, . . . , an−1]
(which, again, is k, s-deﬁnable so in the ﬁlter whenever a0, . . . , an−1 are). Let
us summarize the properties we need in the following lemma:

Lemma 2.3 Let (A, A′) be a ﬁltered opca. Then for a standard coding of natural
numbers and sequences from A, there are elements b, c, d, t ∈ A′ which satisfy:

15

i) For all n ∈ N and k ≥ n, b¯n[a0, . . . , ak] ≤ an

ii) For all n ∈ N and k ≥ n, c¯n[a0, . . . , ak] ≤ [an, . . . , ak]

iii) For all a ∈ A, da[a0, . . . , an−1] ≤ [a, a0, . . . , an−1]

iv ) For all a ∈ A, ta ≤ [a]

We can now deﬁne an aks out of a ﬁltered opca (A, A′) together with a down-
wards closed subset U ⊆ A which does not meet the ﬁlter: U ∩ A′ = ∅.

Deﬁnition 2.4 Given (A, A′) and U as above, we deﬁne an aks K(A, A′, U ) as
follows:

1) Λ = A, QP = A′, Π is the set of coded sequences [a0, . . . , an−1] of A.

2) The push operation Λ × Π → Π sends a, π to daπ where d is as in 2.3 iii).

We write a.π for this.

3) The total binary operation Λ × Λ → Λ sends a, b to hπia(b.π). We write
a·b for this. Note, that the operation a, b 7→ a·b is total and should not
be confounded with the partial operation on A which forms the opca
structure; the latter is written a, b 7→ ab, as we have been doing all along.

4) Using the elements b and c from 2.3 i),ii), and writing πi for b¯iπ and π≥j

for c¯jπ, we put:

K = hπiπ0π≥2
S = hπi((π0·π2)·(π1·π2))π≥3
kπ = hρiρ0π
cc = hπiπ0(kπ≥1 .π≥1)

5) Finally, the pole ⊥⊥ is deﬁned by

⊥⊥ = {(t, π) | tπ is deﬁned and tπ ∈ U }

Theorem 2.5 The structure deﬁned in 2.4 is indeed an abstract Krivine struc-
ture.

Proof. We have to check that the pole satisﬁes properties (S1)–(S5) from
deﬁnition 2.1.

For (S1), suppose (t, s.π) ∈⊥⊥, so t(s.π) ∈ U . Then (t·s)π ∈ U since (t·s)π ≤

t(s.π); hence (t·s, π) ∈⊥⊥.

For (S2), suppose (t, π) ∈⊥⊥ so tπ ∈ U . Note that (t.s.π)0 ≤ t and (t.s.π)≥2 ≤

π, hence

K(t.s.π) ≤ (t.s.π)0((t.s.π)≥2) ≤ tπ

so K(t.s.π) ∈ U and therefore (K, t.s.π) ∈⊥⊥.

For (S3), suppose ((t·u)·(s·u), π) ∈⊥⊥, so ((t·u)·(s·u))π ∈ U . Now

S(t.s.u.π) ≤ ((t·u)·(s·u))π

16

so S(t.s.u.π) ∈ U , hence (S, t.s.u.π) ∈⊥⊥.

For (S4), suppose (t, kπ.π) ∈⊥⊥ so t(kπ.π) ∈ U . Then cc(t.π) ∈ U since

cc(t.π) ≤ t(kπ.π). Therefore (cc, t.π) ∈⊥⊥.

For (S5), suppose (t, π) ∈⊥⊥ so tπ ∈ U . We have kπ(t.π′) ≤ tπ; hence

kπ(t.π′) ∈ U , so (kπ, t.π′) ∈⊥⊥.

Let us denote the aks constructed from A, A′, U by KU
ﬁltered opca constructed from KU
wish to compare the tripos [−, P(Π)U
recall a standard topos-theoretic construction.

A,A′ and let us call the
A,A′ . We
A,A′] to the tripos [−, D(A, A′)]. First we

A,A′ by Streicher’s construction, P(Π)U

For a subset α of A we write α → U for the set

{a ∈ A | for all b ∈ α, ab is deﬁned and ab ∈ U}

Note that since U ∈ DA, (α → U ) ∈ DA. For φ : I → DA we write φ → U for
the function taking i ∈ I to φ(i) → U .

Deﬁnition 2.6 The Booleanization of the tripos [−, D(A, A′)] with respect to
U is the Boolean subtripos of [−, D(A, A′)] which can be deﬁned in any of the
following three equivalent ways:

1) For any set I, we have the set of functions φ : I → DA which are isomor-

phic in [−, D(A, A′)] to (φ → U ) → U (as sub-preorder of [I, D(A, A′)]);

2) For any set I, all functions φ : I → DA but ordered by: φ ≤ ψ if and only

if φ ≤ ((ψ → U ) → U ) in [I, D(A, A′)];

3) For any set I, all functions φ : I → DA but ordered by: φ ≤ ψ if and only

if (ψ → U ) ≤ (φ → U ) in [I, D(A, A′)].

Theorem 2.7 The tripos [−, P(Π)U
[−, D(A, A′)] with respect to U .

A,A′] is equivalent to the Booleanization of

Proof. Streicher has characterized the preorder in the tripos [−, P⊥⊥(Π)] arising
from an aks, as follows ([19], Lemma 5.5): for φ, ψ : I → P⊥⊥(Π), φ ≤ ψ if and
only if there is an element t ∈ QP satisfying:

for all i ∈ I, all u ∈ |φ(i)| and all π ∈ ψ(i), (t, u.π) ∈⊥⊥

The ﬁrst thing to notice is that this preorder extends to [I, P(Π)] and that in
the latter preorder, every φ is isomorphic to φ⊥⊥⊥⊥ (both inequalities are realized
by (S·K)·K); therefore, the tripos [−, P⊥⊥(Π)] is equivalent to [−P(Π)] (this was
also noticed by Ferrer Santos et al; see 5.15 of [4]). In our case of P(Π)U
A,A′ we
can therefore consider all functions φ : I → P(Π), ordered as follows: φ ≤ ψ if
and only if for some a ∈ A′ we have

(◦) for all i ∈ I, all u ∈ φ(i) → U and all π ∈ ψ(i), a(u.π) is deﬁned and in U

17

Now if a ∈ A′ satisﬁes (◦) then for all i ∈ I, huπia(u.π) is an element of A′ which
is in (φ(i) → U ) → (ψ(i) → U ); hence a ∈ A′ realizes (φ → U ) ≤ (ψ → U ) in
[I, D(A, A′)]. Conversely, if a ∈ A′ realizes (φ → U ) ≤ (ψ → U ) in [I, D(A, A′)],
then hρiaρ0ρ≥1 is an element of A′ satisfying (◦).

Furthermore we notice that any element of [I, D(A, A′)] is isomorphic to a
function φ : I → D(A, A′) of the form i 7→ ↓Xi where Xi is a set of coded
sequences: this is easy.

We conclude that any φ ∈ [I, D(A, A′)] of the form φ′ → U is, up to isomor-

phism, in the image of the map

[I, P(Π)U

A,A′] → [I, D(A, A′)]

given by φ 7→ (φ → U ).

Hence, we see that [−, P(Π)U

A,A′] is equivalent to the opposite of the Booleaniza-

tion of [−, D(A, A′)] with respect to U . However, since the latter is an indexed
pre-Boolean algebra and since every Boolean algebra is isomorphic to its oppo-
site (by the negation map), we have the claimed result.

Theorem 2.8 Every Krivine tripos is the Booleanization of [−, D(A, A′)] with
respect to U , for some ﬁltered opca (A, A′) and a downset U of A′ which does
not meet A′.

Proof. By Streicher’s result, a Krivine tripos is of the form [−, A] for some
ﬁltered oca (A, A′). By 1.17, it is therefore a subtripos of [−, D(A, A′)], and in
particular a Boolean subtripos. But now by standard topos theory (see Lemma
A4.5.21 in [10]), it must be the Booleanization of [−, D(A, A′)] with respect to
some U , as required.

2.1 When is a Krivine tripos localic?

Recall that Hofstra had characterized, for a BCO Σ such that [−, Σ] is a tripos,
when this tripos is localic: TV(Σ) must have a least element (theorem 1.11).

Krivine ([16] formulated a condition for an aks to lead to an interpretation

of set theory which is a forcing interpretation: the set

|⊤ → (⊥ → ⊥)| ∩ |⊥ → (⊤ → ⊥)|

must contain an element of the set QP of quasi-proofs.

Taking into account the way logic is interpreted in an aks, this means the

following: for some a ∈ QP we have:

(Kr) ∀s ∈ Π⊥⊥∀t, π((a, t.s.π) ∈⊥⊥ and (a, s.t.π) ∈⊥⊥)

Theorem 2.9 Let K be an aks, an ΣK be the ﬁltered oca resulting from K by
Streicher’s construction. Then K satisﬁes (Kr) if and only if TV(ΣK) has a
least element.

18

Proof. For the only if part, suppose K satisﬁes (Kr). Krivine proved already
(see p. 16 of [16] that there is a quasi-proof t with the property that for every
if b ∈ |X|, then t ∈ |X|. Since t ∈ QP, {t}⊥⊥ ∈ Φ
X ⊆ Π and every b ∈ QP:
(where Φ is the ﬁlter of ΣK). And for every β ∈ Φ we have t ∈ |β|, so

β ⊆ β⊥⊥⊥⊥ ⊆ {t}⊥⊥

which, given that the order in Σ is reverse inclusion, tells us that TV(Σ) has a
least element.
Conversely, suppose α ∈ Φ is the least element of Φ. Then for all β ∈ Φ, β ⊆ α,
so for every b ∈ QP, {b}⊥⊥ ⊆ α. If a ∈ |α| ∩ QP, then α ⊆ {a}⊥⊥, so for all b ∈ QP
we have {b}⊥⊥ ⊆ {a}⊥⊥.

Let K′ be K·((S·K)·K); then it is easy to verify that if (t, π) ∈⊥⊥, then

(K′, s.t.π) ∈⊥⊥, for any term s.

Now for s ∈ Π⊥⊥, π ∈ Π we have (s, π) ∈⊥⊥ and hence, for any term t, we
have (K, s.t.π) ∈⊥⊥ and (K′, t.s.π) ∈⊥⊥, whence s.t.π ∈ {K}⊥⊥ and t.s.π ∈ {K′}⊥⊥.
Since both K and K′ are quasi-proofs, by the property of a we ﬁnd that both
s.t.π and t.s.π are elements of {a}⊥⊥, i.e. (a, s.t.π) ∈⊥⊥ and (a, t.s.π) ∈⊥⊥, as
desired.

Let us spell out what it means for the tripos [−, P(Π)U
ﬁlter consists of those α ⊆ A for which (α → U ) ∩ A′
there is a least such α; keeping in mind that the order on P(Π)U
inclusion, we need an α such that

A,A′] to be localic. The
6= ∅. We require that
A,A′ is reverse

i)

(α → U ) ∩ A′ 6= ∅

ii) Whenever (β → U ) ∩ ∅, β ⊆ α

The following proposition simpliﬁes this somewhat:

Proposition 2.10 The tripos [−, P(Π)U
A,A′] is localic if and only if there exists
an element e ∈ A′ with the property that whenever b ∈ A′, a ∈ A and ba ∈ U ,
then ea ∈ U .

Proof. Obvious.

Example 2.11 1) For U = A − A′, the tripos [−, P(Π)U

A,A′] is localic, since

e = skk satisﬁes criterion 2.10

2) Every ﬁlter A′ on an opca A induces a preorder ≤T on A which is analogous
to Turing reducibility: a1 ≤T a2 if and only if for some b ∈ A′ we have
ba2 ≤ a1. Note, that a1 ≤ a2 implies a2 ≤T a1, so for any a ∈ A the set
{b ∈ A | a ≤T b} is downwards closed w.r.t. ≤.

Now suppose that the set U is upwards closed w.r.t. ≤T (hence downwards
closed w.r.t. ≤). Then whenever b ∈ A′ and ba ∈ U , we have ba ≤T a and
skka ≤ a hence a ≤T skka, so we get skka ∈ U , which means that again,
skk satisﬁes criterion 2.10 and [−, P(Π)U

A,A′] is localic.

19

We conclude this paper with a family of examples where [−, P(Π)U
A,A′ ] is non-
localic. We consider the pca K2, which is the set of functions N → N. Given
two such functions α, β, we deﬁne the relation αβ(n) = k as: there is a number
N ∈ N satisfying:

α([n, β(0), . . . , β(N − 1)]) = k + 1
for all l < N, α([n, β(0), . . . , β(l − 1)]) = 0

Here, [...] refers to some computable coding of sequences of natural numbers.
We then say: αβ is deﬁned, if and only if for each n ∈ N there is some k such
that αβ(n) = k, and αβ is then the corresponding function N → N. This is a
partial combinatory algebra.

The pca K2 has a ﬁlter: the set of total recursive (computable) functions N →
N. We write (K2, Rec) for the corresponding ﬁltered opca. We are interested in
choices for U such that the tripos [−, P(Π)U

K2,Rec] is non-localic.

We remind the reader of the natural topology on K2: basic open sets are of

the form

Vσ = {α ∈ K2 | α(0) = σ0, . . . , α(n) = σn}

for some ﬁnite sequence σ = (σ0, . . . , σn).

Theorem 2.12 Let U be a set of nonrecursive functions. If U is discrete as a
subspace of K2, then the tripos [−, P(Π)U

K2,Rec] is non-localic.

Proof. Suppose, for a contradiction, that α is some recursive function with the
property that for every recursive β and arbitrary γ, if βγ ∈ U then αγ ∈ U .
First we note that for τ ∈ U and skk ∈ K2, which is recursive, (skk)τ = τ ∈ U ,
so ατ ∈ U . Therefore we can ﬁx some π ∈ K2 and some τ ∈ U such that
απ = τ .

Since U is discrete, there is some number N such that the basic neighbour-

hood

U(τ (0),...,τ (N ))

contains no element of U except τ . Let N ′ be a natural number big enough so
that for every i, 0 ≤ i ≤ N , there is some k < N ′ such that α([i, π(0), . . . , π(k −
1)]) = τ (i) + 1.

Claim. Let π′ ∈ U(π(0),...,π(N ′)). Then for every j ∈ N, either απ′(j) = τ (j) or
there is no k such that απ′(j) = k.
Proof of Claim: suppose π′ as in the Claim, and j0 such that for some k 6= τ (j0)
we have απ′(j0) = k. Let t be least such that

α([j0, π′(0), . . . , π′(t − 1)]) = k + 1

and let M = max(N ′, t). Deﬁne π′′ ∈ K2 as follows:

π′′(i) = (cid:26)

π′(i)

if i ≤ M

τ (i − (M + 1)) otherwise

20

Clearly, there is some recursive function β such that βπ′′ = τ ∈ U ; hence,
απ′′ ∈ U , but by construction we must have απ′′ = τ , but this contradicts the
fact that απ′′(j0) 6= τ (j0). This proves the claim.

But now, with α recursive and the ﬁnite sequence (π(0), . . . , π(N ′)) given, we
for any input j, either there is some k ≤ N ′
have a recipy to compute τ :
such that α([j, π(0), . . . , π(k)] > 0 (and then for the least such k, this must be
τ (j) + 1); or there is some sequence (n0, . . . , nm) which is minimal such that

α([j, π(0), . . . , π(N ′), n0, . . . , nm]) > 0

and then, by the claim, the result must be τ (j) + 1. This algorithm contradicts
the assumption that τ ∈ U , and hence non-computable.

References

[1] John L. Bell. Set Theory – Boolean-Valued Models and Independence Proofs,

volume 47 of Oxford Logic Guides. Clarendon Press, Oxford, 2005.

[2] L. Birkedal. Developing theories of types and computability via realizability. Elec-
tronic Notes in Theoretical Computer Science, 34:viii+282, 2000. Book version of
PhD-thesis.

[3] L. Birkedal and J. van Oosten. Relative and modiﬁed relative realizability.

Ann.Pure Appl.Logic, 118:115–132, 2002.

[4] W. Ferrer Santos, J. Frey, M. Guillermo, O. Malherbe, and A. Miquel.
Preprint, available at

Ordered Combinatory Algebras and Realizability.
arXiv:1410.5034v1, October 2014.

[5] W. Ferrer Santos, M. Guillermo, and O. Malherbe. A Report on Realizability.

Preprint, available at arXiv:1309.0706v1, September 2013.

[6] W. Ferrer Santos, M. Guillermo, and O. Malherbe. Realizability in OCAs and

AKSs. Preprint, available at arXiv:1512.07879v1, December 2015.

[7] J. Frey. Realizability Toposes from Speciﬁcations. Preprint, available at

arXiv:1504.06565v1, April 2015.

[8] P. Hofstra. All realizability is relative. Math. Proc. Camb. Phil. Soc., 141:239–264,

2006.

[9] P. Hofstra and J. van Oosten. Ordered partial combinatory algebras. Math. Proc.

Camb. Phil. Soc., 134:445–463, 2003.

[10] P.T. Johnstone. Sketches of an Elephant (2 vols.), volume 43 of Oxford Logic

Guides. Clarendon Press, Oxford, 2002.

[11] P.T. Johnstone. Geometric Morphisms of Realizability Toposes. Theory and

Applications of Categories, 28(9):241–249, 2013.

[12] A. Joyal and I. Moerdijk. Algebraic Set Theory, volume 220 of London Math-
ematical Society Lecture Note Series. Cambridge University Press, Cambridge,
1995.

[13] C. Kouwenhoven-Gentil and J. van Oosten. Algebraic set theory and the eﬀective

topos. Journal of Symbolic Logic, 70 (3):879–890, 2005.

21

[14] Jean-Louis Krivine. Typed lambda-calculus in classical Zermelo-fraenkel set the-

ory. Archive for Mathematical Logic, 40:189–205, 2001.

[15] Jean-Louis Krivine. Dependent choice, ‘quote’ and the clock. Theoretical Com-

puter Science, 308:259–276, 2003.

[16] J.L. Krivine. Some properties of realizability models. Slides of a talk given at

Chamb´ery.
Available at
http://www.lama.univ-savoie.fr/∼hyvernat/Realisabilite2012/Files/
Krivine-slides.pdf, 2012.

[17] J. Longley. Realizability Toposes and Language Semantics. PhD thesis, Edinburgh

University, 1995.

[18] W. Stekelenburg. Realizability categories. PhD thesis, Utrecht University,

January 2013.
Available electronically at
http://www.staff.science.uu.nl/∼ooste110/realizability/wouterthesis.pdf.

[19] Thomas

Streicher.

Classical

Realizability

Categorical
Computer

a
in
http://www.mathematik.tu-darmstadt.de/∼streicher/ClRe.pdf.

Perspective,
Science,

Mathematical

Available

electronially

Krivine’s
2012.
appear.

to

from
Structures
at

[20] J. van Oosten.

Slides of
Cambridge Category Seminar, March 2012. Available
http://www.staff.science.uu.nl/∼ooste110/talks/cambr060312.pdf.

Classical Realizability.

invited talk at
electronically at

[21] J. van Oosten. Realizability: a historical essay. Math. Struct. in Comp. Science,

12:239–263, 2002.

[22] J. van Oosten. Realizability: an Introduction to its Categorical Side, volume 152

of Studies in Logic. North-Holland, 2008.

[23] J. van Oosten. Partial Combinatory Algebras of Functions. Notre Dame Journ.

Formal Logic, 52(4):431–448, 2011.

22

