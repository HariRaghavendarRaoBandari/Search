6
1
0
2

 
r
a

 

M
7
1

 
 
]
h
p
-
t
n
a
u
q
[
 
 

1
v
3
7
4
5
0

.

3
0
6
1
:
v
i
X
r
a

Szegedy’s quantum walk with queries

Raqueline A. M. Santos

Faculty of Computing - University of Latvia

Raina bulv. 19, Riga, LV-1586, Latvia

rsantos@lu.lv

Abstract

When searching for a marked vertex in a graph, Szegedy’s usual search
operator is deﬁned by using the transition probability matrix of the random
walk with absorbing barriers at the marked vertices. Instead of using this
operator, we analyze searching with Szegedy’s quantum walk by using re-
ﬂections around the marked vertices, that is, queries. We show we can boost
the probability to 1 of ﬁnding a marked vertex in the complete graph. Nu-
merical simulations suggests that the success probability can be improved
for other graphs, like the two-dimensional grid. We also prove that, for a
certain class of graphs, we can express Szegedy’s search operator, obtained
from the absorbing walk, using the query model.

1

Introduction

Since the introduction of the ﬁrst quantization of a random walk, quantum walks
have been used in the development of quantum algorithms that outperform their
classical versions [13, 4, 2, 3, 7, 9]. The ﬁrst model was the coined discrete time
quantum walk on the line by Aharonov et al. [1], followed by the continuos time
quantum walk model by Farhi et al. [6]. In 2004, Szegedy [14] proposed a coinless
quantum walk model which is driven by reﬂection operators in a bipartite graph.
The evolution operator depends directly on the transition probability matrix of
the Markov chain associated to the graph. Szegedy showed that the problem
of detecting can be solved quadratically faster than classically for ergodic and
symmetric Markov chains. The problem of spatial searching was also analyzed
in this model by Refs. [8, 7]. Santos and Portugal [12] analyzed the analytical
details of the search on the complete graph.

For searching with quantum walks we need to ﬁnd a way to diﬀerentiate
between marked and non-marked vertices. Szegedy described in his model an
evolution operator which acts diﬀerently on the marked vertices by using the
transition probability matrix of the absorbing walk on the graph. In this way,

1

Szegedy was able to deﬁne a quantum hitting time which is analogous to the
classical deﬁnition. Searching with the coined quantum walk model is usually
done by applying a diﬀerent coin operator which ﬂips the phase of the marked
vertices [13, 3]. Inspired by that, we analyze what happens in Szegedy’s model
when we add a reﬂection that ﬂips the phase of the marked vertices, that is,
queries. We show that the success probability of ﬁnding a marked vertex in the
complete graph boosts from 1/2 to 1. The analysis is also done for multiple
marked vertices. Numerical simulations suggests that Szegedy’s quantum walk
with queries can also improve the success probability for other graphs. We use
the two-dimensional lattice as an example. Diﬀerent operators, with diﬀerent
combinations of reﬂections around the marked vertices, are also analyzed. By
identifying a similar behavior between two of these operators, we prove that
for any connected graph with symmetric transition probability matrix and one
marked vertex, we can write Szegedy’s search operator, obtained from the ab-
sorbing walk, by using queries.

Recently, Portugal et al. [11] showed the connection between Szegedy’s model
and the staggered quantum walk model. They showed that Szegedy’s quantum
walk can be cast into the staggered model, including its search operator. Later
Portugal [10] also showed the connection between the coined discrete-time quan-
tum walk model and Szegedy’s model. The standard ﬂip-ﬂop quantum walks
with Hadamard or Grover coin can be translated into Szegedy’s model. In this
process, we obtain a Szegedy’s quantum walk on a bipartite graph (X, Y ), where
the set of vertices Y have degree two and the weights associated with the edges
incident on those vertices must be equal. It is not yet known if by removing the
condition of having Y with degree two it would be possible to ﬁnd its equivalent
in the coined model. In this paper, we deal with the case which its not yet known
the equivalence. The search operators that will be here described using Szegedy’s
model can still be cast in the staggered model.

The paper is organized as follows. In Sec. 2, we review Szegedy’s quantum
walk and its way of doing search. The results for the complete graph [12] are
resumed. In Sec. 3, we introduce the Szegedy’s quantum walk with queries and
we analyze its behavior on the complete graph for one marked vertex and multiple
marked vertices. In Sec. 4, we numerically analyze the behavior of other operators
and we show that Szegedy’s operator can be written using queries for some class
of graphs. The conclusions and discussions are drawn in Sec. 5.

2 Szegedy’s Quantum Walk

Let Γ(X, E) be a connected and undirected graph, where X is the set of vertices
and E is the set of edges. Consider that P is the stochastic matrix associated
to the graph and pxy are its components. Szegedy [14] has proposed a quantum

2

where

and

(1)

(2)

RA = 2

RB = 2

(cid:88)
(cid:88)

x∈X

y∈X

UP := RB RA,

walk driven by reﬂection operators. We associate with the graph a Hilbert space

Hn2 = Hn ⊗Hn, where n = |X|. The computational basis of Hn2 is(cid:8)(cid:12)(cid:12)x, y(cid:11) : x ∈
X, y ∈ X(cid:9). The evolution operator UP is given by
(cid:12)(cid:12) − In2,
(cid:12)(cid:12)Φx
(cid:11)(cid:10)Φx
(cid:12)(cid:12) − In2,
(cid:12)(cid:12)Ψy
(cid:11)(cid:10)Ψy
are reﬂections around the subspaces generated by (cid:12)(cid:12)Φx
(cid:11) and (cid:12)(cid:12)Ψy
(cid:88)
(cid:12)(cid:12)y(cid:11) ,
(cid:11) = (cid:12)(cid:12)x(cid:11) ⊗
(cid:12)(cid:12)Φx
(cid:12)(cid:12)x(cid:11)(cid:33)
(cid:32)(cid:88)
⊗(cid:12)(cid:12)y(cid:11).
(cid:12)(cid:12)Ψy
(cid:11) =
(cid:11) and(cid:12)(cid:12)Ψy
We can see the states(cid:12)(cid:12)Φx
(cid:11) as superpositions over the edges that start
the graph, where(cid:12)(cid:12)x, y(cid:11) is the edge which represents the walker being in vertex x

Szegedy’s quantum walk can be interpreted as a quantum walk on the edges of

from vertex x and vertex y, respectively.

(3)

(cid:11), respectively,

y∈Y

pyx

√

(4)

(5)

√

pxy

x∈X

coming from vertex y. Or according to [11], it can also be seen as a quantum walk
on the linegraph of the bipartite graph obtained after the duplication process.
Szegedy’s quantum walk was originally designed for a bipartite graph, with two
sets of vertices X and Y . If we have a graph with only one set of vertices X,
we can duplicate it, by doing Y = X and making the connections between the
two sets as in the original graph. See Fig. 1(a) for an example. So, the Hilbert
space Hn ⊗ Hn is associated to the obtained bipartite graph or to the edges of
the original graph, as you may prefer.

2.1 Searching

When dealing with the problem of detecting or ﬁnding marked vertices, it is im-
portant to diﬀerentiate the behavior of the evolution operator on these special
vertices. Instead of using the stochastic matrix P , Szegedy used a modiﬁed evo-
lution operator UP (cid:48) associated with a modiﬁed stochastic matrix. P (cid:48) represents
the classical absorbing random walk in the marked vertices and is given by

(6)

(cid:26) pxy, x (cid:54)∈ M ;

δxy, x ∈ M ,

p(cid:48)
xy =

3

where M is the set of marked vertices. The initial condition of the quantum walk
is a superposition over all edges of the graph,
√

(cid:88)

(cid:12)(cid:12)x, y(cid:11).

pxy

(cid:12)(cid:12)ψ(0)(cid:11) =

(7)

1√
n

x,y∈X

The operator UP (cid:48) acts diﬀerently on the marked vertices. It makes the probability
on the marked vertices grow in the beginning of the evolution, but it will not
make the walker stay put on it as in the classical case. As we are dealing with a
unitary operator, the probability will oscillate through time.
For example, consider the complete graph with n vertices and m = |M|
marked vertices. In Fig. 1 we can see the graphs associated to P and P (cid:48). The

1

2

3

4

5

1

2

3

4

5

1

5

2

4

3

1

2

3

4

5

1

2

3

4

5

1

5

2

4

3

(a) n = 5

(b) n = 5 and m = 1

Figure 1: Complete graphs with 5 vertices and their associated bipartite graphs. (a) The
graphs associated to P . (b) The graphs associated to P (cid:48) with one marked vertex.

Let

initial condition for the complete graph is

n(cid:88)
(cid:12)(cid:12)x(cid:11)(cid:12)(cid:12)y(cid:11).
(cid:12)(cid:12)ψ(t)(cid:11)
(cid:12)(cid:12)x(cid:11)(cid:10)x(cid:12)(cid:12) ⊗ In
be the probability of ﬁnding a marked vertex, where (cid:12)(cid:12)ψ(t)(cid:11) = U t
(cid:18) n − m − 1

(cid:12)(cid:12)ψ(0)(cid:11) =
1(cid:112)n(n − 1)
pM (t) =(cid:10)ψ(t)(cid:12)(cid:12)(cid:88)
(cid:18)

cording to [12], we can write

n − 1

x,y=1
x(cid:54)=y

x∈M

pM (t) =

m(m − 1)
n(n − 1)

(cid:18) n − m − 1

+

(cid:19)

m(n − m)
n(n − 1)

U2t−1

n − 1

n − m − 1
2n − m − 2

+

(cid:19)2

,

2 n − m − 2

T2t

n − 1

(8)

(9)

P (cid:48)(cid:12)(cid:12)ψ(0)(cid:11). Ac-
(cid:19)

+

(10)

4

where Tn and Un are the n-th Chebyshev polynomial of the ﬁrst and second kind,
respectively. The graph of pM (t) is depicted in Fig. 2 when n = 1000 and m = 1.

Figure 2: Probability of ﬁnding a marked vertex on the complete graph with n = 1000
and m = 1. The maximum probability of ≈ 0.52 is achieved at time t = 17.

The ﬁrst point of maximum occurs at time

arctan

tmax =

2 arccos

(cid:18)√
(cid:18) n − m − 1

2n − m − 2

√

m

n − 1

π
4

(cid:19)
(cid:19) =
(cid:114) m

and by doing a measurement at this time give us the probability

(cid:114) n

2 m

(cid:19)

(cid:18) 1√

n

− 1
4

+ O

,

(11)

pM (tmax) =

1
2

+

+ O

2 n

.

(12)

(cid:18) 1

(cid:19)

n

3 Szegedy’s quantum walk with queries

An oracle is a black box which gives the algorithm information about the marked
vertices or the solution of the problem we are trying to solve. It has been used
for searching in the coined quantum walk model [13, 3]. An oracle query maps

(cid:12)(cid:12)x(cid:11) to −(cid:12)(cid:12)x(cid:11), if x ∈ M , and(cid:12)(cid:12)x(cid:11) to(cid:12)(cid:12)x(cid:11), otherwise. We can represent this oracle

query as a reﬂection around the marked vertices, that is,

RM = In − 2

(cid:12)(cid:12)x(cid:11)(cid:10)x(cid:12)(cid:12).

(cid:88)

x∈M

(13)

Szegedy’s quantum walk uses a Hilbert space which has two registers. We will
denote RM 1 = RM ⊗ In the reﬂection around the marked vertices acting in the

5

ﬁrst register. Instead of using UP (cid:48), let us use the following evolution operator

UM = UPRM 1 = RB RARM 1

(14)

which is simply Szegedy’s quantum walk with queries. Next we will see how the
operator UM behaves on the complete graph.

3.1 Search on the complete graph

Due to the symmetry of the complete graph we can identify edges which will
present the same behavior during the evolution of the quantum walk, that means
they will have the same amplitudes. Some of the ideas used here are analogous
from the ones used in the analysis of the complete graph in the coined model by
Ref. [15]. For one marked vertex, label it as b and the other non-marked vertices
as a, see Fig. 3. We can see that there are three types of edges: {a, a},{a, b} and
{b, a}. Therefore, the set of the following vectors

a

a

a

a

b

a

a

a

a

b

a

b

a

a

a

Figure 3: Complete graph with 5 vertices and 1 marked vertex and its associated bipartite
graph. The marked vertex is labeled as b and the non-marked vertices as a.

1

(cid:112)(n − 1)(n − 2)
(cid:88)
(cid:88)

1√
n − 1
1√
n − 1

x∈X\M,y∈M

x∈M,y∈X\M

(cid:12)(cid:12)x, y(cid:11),

x,y∈X\M

x(cid:54)=y

(cid:88)
(cid:12)(cid:12)x, y(cid:11),
(cid:12)(cid:12)x, y(cid:11),

(cid:12)(cid:12)a, a(cid:11) :=
(cid:12)(cid:12)a, b(cid:11) :=
(cid:12)(cid:12)b, a(cid:11) :=

(15)

(16)

(17)

forms an invariant subspace where the quantum walk takes place, that is, if we
apply the evolution operator UM to any linear combination of these vectors, the
result will be another linear combination of them.

6

By applying the evolution operator to the vectors in the invariant subspace

(cid:12)(cid:12)ψy(cid:48)(cid:11) − 2

√
pxy

(cid:12)(cid:12)ψy

(cid:11) − 2

√

(cid:12)(cid:12)φx

(cid:11) +(cid:12)(cid:12)x, y(cid:11), (18)

√

pxy(cid:48)py(cid:48)x

and using that
√

(cid:12)(cid:12)x, y(cid:11) = 4

UP

pxy

(cid:88)

y(cid:48)∈X

we obtain the reduced operator Ur

 cos2 φ

sin φ

cos φ sin φ

Ur =

cos φ sin φ − sin φ
− cos φ
sin2 φ

0

where

cos φ =

n − 3
n − 1

,

and

sin φ =

pxy

 ,

cos φ
√
n − 2
n − 1

2

.

(19)

Thanks to the invariant subspace, we reduced our problem to a 3-dimensional
one. Now it becomes easier to ﬁnd the spectrum of the reduced operator, so we
can have a complete description of the system. The orthonormalized eigenvectors
of Ur associated with eigenvalues λ = −1, eiθ, e−iθ are, respectively,

1

√

n − 2
2 − n

n2 − 3n + 3

 √
 ,
(cid:12)(cid:12)v−1
(cid:11) =
 −1+i
(cid:112)(n − 2)(n − 1)
(cid:12)(cid:12)v+
(cid:11) =
(cid:112)2(n2 − 3n + 3)
(cid:12)(cid:12)v−(cid:11) = (cid:12)(cid:12)v+
(cid:11)∗
stands for the complex conjugate of(cid:12)(cid:12) ·(cid:11),

n−2−i

1

,

cos θ =

1 + cos2 φ

2

,

and

sin θ =

sin φ

√
(n−2)(n2−3n+3)
(n−1)
√

√
n−1

(n−2)(n2−3n+3)

n−2

1

 ,

(20)

(21)

(22)

(cid:112)

4 − sin2 φ
2

.

where(cid:12)(cid:12) ·(cid:11)∗

The behavior of UM is depicted in Fig. 4. We can see that the probability of
obtaining a marked vertex after measurement goes to 1 which is higher than the
maximum probability for the evolution using UP (cid:48), as described in Sec. 2.1. Our
goal is to prove that. The main idea is to show that the initial state is roughly

(cid:12)(cid:12)a, a(cid:11) and from there, by applying the evolution operator a certain number of
times, we can get to the state (cid:12)(cid:12)b, a(cid:11), which is our target state. Note that if we
measure the system which is in the state(cid:12)(cid:12)b, a(cid:11), it will return us a marked vertex

with probability 1.

7

Figure 4: Probability of ﬁnding a marked vertex on the complete graph with n = 2000
and m = 1 for 100 steps of the walk. For UM (solid line), the maximum probabil-
ity is approximately 1 at t = 35. For UP (cid:48) (dashed line), the maximum probability is
approximately 0.52 at t = 25.

The initial condition(cid:12)(cid:12)ψ(0)(cid:11), given by Eq. (8), is a uniform superposition over
For large n,(cid:12)(cid:12)ψ(0)(cid:11) ≈(cid:12)(cid:12)a, a(cid:11). And(cid:12)(cid:12)a, a(cid:11) can be expressed as a combination of the
eigenvectors(cid:12)(cid:12)v+

all edges of the graph. We can express it as

(cid:12)(cid:12)ψ(0)(cid:11) =
(cid:0)√
(cid:11) and(cid:12)(cid:12)v−(cid:11), that is,
 ≈ i√
 1
(cid:12)(cid:12)a, a(cid:11) =
(cid:12)(cid:12)v+
(cid:12)(cid:12)ψ(0)(cid:11) ≈ i√
(cid:0)−U t

n − 2(cid:12)(cid:12)a, a(cid:11) +(cid:12)(cid:12)a, b(cid:11) +(cid:12)(cid:12)b, a(cid:11)(cid:1) .
 √
 .
(cid:11) + e−iθt(cid:12)(cid:12)v−(cid:11)(cid:17)
(cid:16)−eiθt(cid:12)(cid:12)v+

(cid:0)−(cid:12)(cid:12)v+
(cid:11) + U t

n−1√
n−2
1√
n−1
0

1√
n

(23)

(24)

0
0

Then, the state of the system at time t is

(cid:11) +(cid:12)(cid:12)v−(cid:11)(cid:1) =
(cid:12)(cid:12)v−(cid:11)(cid:1) =
(cid:12)(cid:12)ψ(t)(cid:11) = U t
Our goal is to obtain the target state(cid:12)(cid:12)b, a(cid:11). By doing
we get that our ﬁnal state will be roughly(cid:12)(cid:12)b, a(cid:11), that is,
 ≈
(cid:12)(cid:12)ψ(tf )(cid:11) ≈ 1√

(cid:11) +(cid:12)(cid:12)v−(cid:11)(cid:1) =

 −

(cid:0)(cid:12)(cid:12)v+

n−1
n−1

≈ π
4

i√
2

√
√

π
2θ

(25)

(26)

(27)

 =(cid:12)(cid:12)b, a(cid:11).

 0

0
1

√

n,

tf =

2

r

r

r

2

.

2

√

√
1
n2−3n+3
n−2
√
n2−3n+3
√
√
n−2
n−1
√
n2−3n+3

8

√
Note that the ﬁnal complexity of the algorithm will be O(

n), according to
Eq. (26). The same as in the algorithm using UP (cid:48), see Sec. 2.1 for comparison.

3.2 Multiple marked vertices

The analysis for multiple marked vertices is similar to the analysis with one
marked vertex. The diﬀerence, in this case, is that multiple marked vertices imply
we have edges between two marked vertices, see Fig. 5 for instance. Therefore,
there are four types of edges {a, a},{a, b},{b, a} and {b, b} and we end up dealing
with a 4-dimensional problem. Our invariant subspace is now described by the

a

a

a

b

b

a

a

a

b

b

a

b

a

b

a

Figure 5: Complete graph with 5 vertices and 2 marked vertices and its associated
bipartite graph. The marked vertices are labeled as b and the non-marked vertices as a.

x,y∈X\M

x(cid:54)=y

(cid:88)
(cid:12)(cid:12)x, y(cid:11)
(cid:12)(cid:12)x, y(cid:11)

(cid:12)(cid:12)x, y(cid:11)

(28)

(29)

(30)

1

(cid:112)(n − m)(n − m − 1)
(cid:88)
1(cid:112)m(n − m)
(cid:88)
1(cid:112)m(n − m)
(cid:88)
(cid:12)(cid:12)x, y(cid:11)
1(cid:112)m(m − 1)

x∈M,y∈X\M

x∈X\M,y∈M

following vectors:(cid:12)(cid:12)a, a(cid:11) :=
(cid:12)(cid:12)a, b(cid:11) :=
(cid:12)(cid:12)b, a(cid:11) :=
(cid:12)(cid:12)b, b(cid:11) :=
 cos2 φ

Ur =

Note that states(cid:12)(cid:12)a, a(cid:11),(cid:12)(cid:12)a, b(cid:11),(cid:12)(cid:12)b, a(cid:11) are the same as in the one marked vertex case,

x,y∈M
x(cid:54)=y

by substituting m = 1. The reduced operator is given by

(31)

(32)

 ,

cos θ sin φ − cos θ cos φ
cos φ sin φ
sin θ sin φ − sin θ cos φ

cos φ sin φ − cos θ sin φ − sin θ sin φ
cos θ sin θ
sin θ cos φ
− cos2 φ

− sin2 θ
cos θ cos φ
cos θ sin θ

sin2 φ

9

where

cos φ =

,

and

sin φ =

n − 2m − 1

n − 1

n − 2m + 1

n − 1

2(cid:112)m(n − m − 1)
2(cid:112)(n − m)(m − 1)

n − 1

;

n − 1

.

cos θ =

,

and

sin θ =

The behavior for multiple marked vertices is the same as for the one marked
vertex case. Fig. 6 shows that the probability of obtaining a marked vertex goes
to 1 diﬀerently from what happens to the evolution using UP (cid:48), as described in
Sec. 2.1.

Figure 6: Probability of ﬁnding a marked vertex on the complete graph with n = 2000
and m = 7 for 100 steps of the walk. For UM (solid line), the maximum probabil-
ity is approximately 1 at t = 13. For UP (cid:48) (dashed line), the maximum probability is
approximately 0.54 at t = 9.



√
1 − cos φ

sin2 φ cos φ[(3−2 cos φ) cos φ−i sin φ(3−cos φ)]

In order to analyze this case, we need to ﬁnd some approximations. Note
that cos θ ≈ cos φ for large n. By doing cos θ = cos φ, two of the eigenvalues of
Ur reduce to e±iφ associated to the following approximated eigenvectors

2

(cid:12)(cid:12)v+
(cid:11) =
and (cid:12)(cid:12)v−(cid:11) = (cid:12)(cid:12)v+
(cid:12)(cid:12)ψ(0)(cid:11) =

(1−cos φ)2[cos φ(3+2 cos φ−cos2 φ)−i sin φ(1+cos φ−2 cos2 φ)]

 , (33)
(cid:16)(cid:112)(n − m)(n − m − 1)(cid:12)(cid:12)a, a(cid:11) +(cid:112)m(n − m)(cid:12)(cid:12)a, b(cid:11)+

(cid:11)∗
1(cid:112)n(n − 1)
+(cid:112)m(n − m)(cid:12)(cid:12)b, a(cid:11) +(cid:112)m(m − 1)(cid:12)(cid:12)b, b(cid:11)(cid:17)

.

(34)

, which are going to be useful as we can express the initial

The initial condition written in the invariant basis is

condition by a linear combination of them.

2 cos φ+i sin φ
sin φ−2i cos φ

sin φ
1−cos φ

1

10

2

(cid:11) +(cid:12)(cid:12)v−(cid:11)(cid:1) .
(cid:11) + e−iφt(cid:12)(cid:12)v−(cid:11)(cid:17)

(35)

.

(36)

0
0
0

The state of the system at time t is

(cid:12)(cid:12)a, a(cid:11) =
(cid:12)(cid:12)ψ(t)(cid:11) = U t

Again,(cid:12)(cid:12)ψ(0)(cid:11) is roughly(cid:12)(cid:12)a, a(cid:11) and
 ≈ i√
 1
(cid:0)−(cid:12)(cid:12)v+
(cid:16)−eiφt(cid:12)(cid:12)v+
(cid:12)(cid:12)ψ(0)(cid:11) ≈ i√
(cid:114) n
our ﬁnal state will be roughly(cid:12)(cid:12)b, a(cid:11), that is,


(cid:12)(cid:12)ψ(tf )(cid:11) ≈ 1√

(cid:0)(cid:12)(cid:12)v+

(cid:11) +(cid:12)(cid:12)v−(cid:11)(cid:1) =

At time

tf =

π
2φ

≈ π
4

,

m

r

2

2

 ≈

 0

0
1
0

 =(cid:12)(cid:12)b, a(cid:11).

(37)

(38)

0
0√
n−m−1
√
n−1√
m√
n−1

4 Other search operators

Recently, Portugal et al. [11] have shown that Szegedy’s quantum walk is con-
tained into the staggered quantum walk model. The latter model also uses queries
for searching. Originally, Falk [5] used the operator RMRBRMRA to search in
the two-dimensional lattice, which was later shown by [11] that it was in fact
the non-planar regular graph of degree 6. Inspired by Falk [5], we numerically
analyze the behavior of diﬀerent operators, by making diﬀerent combinations
with the reﬂections around the marked vertices. The following operators will be
compared:

U1 = UM = RBRARM 1,
U2 = UP (cid:48) = RB(cid:48)RA(cid:48),
U3 = RBRM 2RARM 1,
U4 = RBRM 1RARM 1,
U5 = RM 1RBRM 1RA.

(39)

(40)

(41)

(42)

(43)

Fig. 7 shows the probability pM for these evolution operators for one and two
marked vertices in the two-dimensional lattice with torus-like boundary condi-
tions. We decided to apply these operators to other graph than the complete

11

graph, to show that the operator UM can achieve higher probability than the
operator UP (cid:48) for other graphs. However, for the two-dimensional lattice, UM and
UP (cid:48) will act the same if the number of vertices is even, the diﬀerence between
them only occur when n is odd, as we can clearly see in Fig. 7.

(a) m = 1

(b) m = 2

Figure 7: Probability of ﬁnding a marked vertex on the two-dimensional lattice with
53 × 53 vertices for 200 steps. (a) With one marked vertex (m = 1). (b) With two
marked vertices (m = 2).

RM 1RARM 1 = RA. Therefore, U4 = RBRA = UP and(cid:12)(cid:12)ψ(0)(cid:11) is its 1-eigenvector.

The value of pM is constant for U4. It is easy to show that, for any graph,

Diﬀerently from U4, the behavior of U5 varies a little bit and its probability stays
very close to the initial one, which we can only identify by looking at the resulting
data as the scale in the ﬁgure does not allow us to see it.

Moreover, we can see that there is a superposition of the curves for U3 and
UP (cid:48) in Fig 7(a). They will have the same behavior, independent on the parity
of n, but dependent on the value of m. If m > 1 the curves will be diﬀerent,
as shown in Fig. 7(b). Those operators are not the same when m = 1 but their
action on the initial condition is. We will prove below that this is valid for some
class of graphs.

For a connected graph with P symmetric and only one marked vertex (m = 1),

4.1 Equivalence between U3 and UP (cid:48)

the action of U3 on(cid:12)(cid:12)ψ(0)(cid:11) is the same as UP (cid:48), that is,
(cid:12)(cid:12)ψ(0)(cid:11) = UP (cid:48)(cid:12)(cid:12)ψ(0)(cid:11).
That also means that(cid:12)(cid:12)ψ(0)(cid:11) is a 0-eigenvector of UP (cid:48) − U3.
only in the row related to the marked vertex b. Let us call(cid:12)(cid:12)Φ(cid:48)

(cid:12)(cid:12)ψ(0)(cid:11) = RBRM 2RARM 1

U3

x

First, let us write the operator UP (cid:48). Note that matrix P (cid:48) will diﬀer from P

(44)

(cid:11) and(cid:12)(cid:12)Ψ(cid:48)

y

(cid:11) the

12

y(cid:54)=b

x(cid:54)=b

x,y(cid:54)=b

x

y

b

b

UP (cid:48) = 4

pyxpxy

Note that,

(cid:11) and(cid:12)(cid:12)Ψ(cid:48)
(cid:88)

√

From these observations, we obtain that

(cid:11) and(cid:12)(cid:12)Ψy
states obtained from P (cid:48) and(cid:12)(cid:12)Φx
(cid:11) the states obtained from P . Note that
(cid:11) =(cid:12)(cid:12)b, b(cid:11).
(cid:11) =(cid:12)(cid:12)Ψ(cid:48)
(cid:11) for all x, y (cid:54)= b. Moreover,(cid:12)(cid:12)Φ(cid:48)
(cid:11) =(cid:12)(cid:12)Ψy
(cid:12)(cid:12)Φ(cid:48)
(cid:11) =(cid:12)(cid:12)Φx
(cid:88)
(cid:88)
(cid:12)(cid:12) + I.
(cid:12)(cid:12)Φx
(cid:12)(cid:12) − 2
(cid:12)(cid:12)Ψy
(cid:12)(cid:12) − 2
(cid:12)(cid:12)Ψy
(cid:11)(cid:10)Φx
(cid:11)(cid:10)Φx
(cid:11)(cid:10)Ψy
(cid:88)
(cid:12)(cid:12) − 2(cid:12)(cid:12)Φb
(cid:12)(cid:12)Φx
(cid:12)(cid:12) − RM 1,
(cid:11)(cid:10)Φb
(cid:11)(cid:10)Φx
(cid:88)
(cid:12)(cid:12) − RM 2.
(cid:12)(cid:12) − 2(cid:12)(cid:12)Ψb
(cid:12)(cid:12)Ψy
(cid:11)(cid:10)Ψy
(cid:11)(cid:10)Ψb
(cid:88)
(cid:88)
(cid:12)(cid:12) + 4
(cid:12)(cid:12)Ψb
(cid:12)(cid:12)Ψy
(cid:12)(cid:12) − 4
(cid:11)(cid:10)Φx
(cid:11)(cid:10)Φb
(cid:12)(cid:12) − RM 2RM 1.
(cid:12)(cid:12) − 2(cid:12)(cid:12)Φb
(cid:12)(cid:12) − 2(cid:12)(cid:12)Ψb
(cid:12)(cid:12)x, b(cid:11)(cid:10)Φx
(cid:11)(cid:10)Φb
(cid:11)(cid:10)Ψb

Now, we can obtain the diﬀerence between the two interested operators:
√
UP (cid:48) − U3 = I + 4
y(cid:54)=b
√

RBRM 2 = 2
(cid:88)

RARM 1 = 2

and analogously,

√

pbypyb

√

pbxpxb

x(cid:54)=b

y(cid:54)=b

− 4

pxb

(45)

(46)

(47)

(cid:88)

x(cid:54)=b

(cid:12)(cid:12)Ψy

(cid:11)(cid:10)b, y(cid:12)(cid:12)−

pyb

x(cid:54)=b

y(cid:54)=b

some simple algebraic calculation can easily show that (UP (cid:48) − U3)(cid:12)(cid:12)ψ(0)(cid:11) = 0.

Then, from the fact that P is symmetric and stochastic (its rows add up to 1),

(48)

5 Conclusions and Discussions

Queries are usually used to diﬀerentiate marked vertices when searching with
quantum walks. Here we analyzed, for the ﬁrst time, its behaviour when search-
ing with Szegedy’s quantum walk model.
Instead of using the usual way of
searching, by the operator UP (cid:48) obtained from the absorbing walk, we take the
usual evolution operator, UP (without marked vertices), and we add a reﬂection
around the marked vertices acting in the ﬁrst register. In this way, we can change
Szegedy’s way of searching and boost the success probability to 1 for ﬁnding a
marked vertex on the complete graph. The analysis is done for one and multiple
marked vertices. Note that the complexity of the algorithm remains the same.

Numerical simulations in the two-dimensional lattice, with torus-like bound-
ary conditions, showed that the new operator can achieve higher probability
than UP (cid:48) for other graphs than the complete graph. We also tried to use more
than one reﬂection around the marked vertices, similar to the search operator by
Falk [5] for the staggered model, and that didn’t make any improvement. Re-
cently, Wong [15] showed a similar result, boosting the probability to 1 for the

13

coined model by adding self-loops to each vertex in the complete graph. Adding
self-loops in Szegedy’s model, which means making the walk lazy, doesn’t seem to
improve searching when using UP (cid:48) or UM , according to some numerical results.
We showed that the operator UP (cid:48) can be written using a combination of
reﬂections around the marked vertex acting in the ﬁrst and second register with
the condition that P is symmetric and that we have only one marked vertex. For
the operator UP (cid:48), we have a partial description of its eigenvalues and eigenvectors
obtained from Szegedy’s spectral theorem [14]. Unfortunately, we can’t use the
same description for UM as it is not a product of two reﬂections. Therefore we
should ﬁnd its eigenvalues and eigenvectors using other methods. Note that all
operators described in this paper can be cast into the staggered quantum walk
model, since the reﬂections RM 1 and RM 2 are partial orthogonal reﬂections,
see [11, 10].

Acknowledgments

The author thanks R. Portugal for useful comments on the paper. This work
was supported by the EU FP7 project QALGO (Grant Agreement No. ESRTD-
7IP-13).

References

[1] Y. Aharonov, L. Davidovich, and N. Zagury. Quantum random walks. Phys-

ical Review A, 48(2):1687–1690, 1993.

[2] A. Ambainis. Quantum walk algorithm for element distinctness. In Pro-
ceedings of the 45th Annual IEEE Symposium on Foundations of Computer
Science, 2004.

[3] A. Ambainis, J. Kempe, and A. Rivosh. Coins make quantum walks faster.
In Proceedings of the 16th ACM-SIAM Symposium on Discrete Algorithms,
pages 1099–1108, 2005.

[4] A. Childs and J. Goldstone. Spatial search by quantum walk. Physical

Review A, 70(022314), 2004.

[5] M. Falk. Quantum search on the spatial grid, 2013. arXiv:quant-ph/1303.

4127.

[6] E. Farhi and S. Gutmann. Quantum computation and decision trees. Phys-

ical Review A, 58:915–928, 1998.

14

[7] H. Krovi, F. Magniez, M. Ozols, and J. Roland. Finding is as easy as
detecting for quantum walks. In Proceedings of the 37th International Col-
loquium Conference on Automata, Languages and Programming, pages 540–
551, 2010.

[8] F. Magniez, A. Nayak, J. Roland, and M. Santha. Search via quantum walk.

SIAM J. Comput., 40(1):142–164, 2011.

[9] R. Portugal. Quantum walks and search algorithms. Springer, New York,

2013.

[10] R. Portugal. Establishing the equivalence between szegedy’s and coined
quantum walks using the staggered model. Quantum Information Process-
ing, pages 1–23, 2016.

[11] R. Portugal, R. A. M. Santos, T. D. Fernandes, and D. N. Gon¸calves. The
staggered quantum walk model. Quantum Information Processing, 15(1):85–
101, 2015.

[12] R. A. M. Santos and R. Portugal. Quantum hitting time on the complete
graph. International Journal of Quantum Information, 8(5):881–894, 2010.

[13] N. Shenvi, J. Kempe, and K. B. Whaley. A quantum random walk search

algorithm. Physical Review A, 67(052307), 2003.

[14] M. Szegedy. Quantum speed-up of markov chain based algorithms. In Pro-
ceedings of the 45th Symposium on Foundations of Computer Science, pages
32–41, 2004.

[15] T. G. Wong. Grover search with lackadaisical quantum walks. Journal of

Physics A: Mathematical and Theoretical, 48(43):435304, 2015.

15

