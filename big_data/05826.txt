A multi-step quantum algorithm for solving the 3-bit exact cover

problem

Hefeng Wang∗

Department of Applied Physics, Xi’an Jiaotong University, Xi’an 710049, China

Key Laboratory of Quantum Information and Quantum

Optoelectronic Devices, Shaanxi Province, China

Abstract

We present a multi-step quantum algorithm for solving the 3-bit exact cover problem, which is

one of the NP-complete problems. In this algorithm, the clauses of the boolean formula are applied

sequentially to project out the state that satisﬁes the clauses. In each round of the algorithm, the

state that satisﬁes the clauses can be obtained and veriﬁed in ﬁnite number of trials. The runtime

of the algorithm is proportional to the number of clauses, therefore scales polynomial to the size

of the problem. Our results indicate that quantum computers may be able to outperform classical

computers in solving NP-complete problems.

6
1
0
2

 
r
a

 

M
8
1

 
 
]
h
p
-
t
n
a
u
q
[
 
 

1
v
6
2
8
5
0

.

3
0
6
1
:
v
i
X
r
a

∗Correspondence to wanghf@mail.xjtu.edu.cn

1

I.

INTRODUCTION

The mechanism of nature selection has produced the whole of Life on earth in a surpris-

ingly short time of about three and half billion years. A computational question inspired by

this phenomena is [1] “what algorithm could possibly achieve all this in such a short time?”

and can we develop algorithms to solve some diﬃcult mathematical problems using this

mechanism? The 3-bit exact cover problem (EC3) is a hard problem in computer science

and mathematics. In this problem, one has to ﬁnd out if there exists an assignment(s) of

an n-bit string that satisﬁes a boolean formula of clauses. The EC3 problem shares similar

property as the evolution of life: lives/assignments have to ﬁt to the environments/clauses to

survive. In this paper we propose a multi-step quantum algorithm for solving this problem.

Quantum computing oﬀers speedup in solving a number of problems [2–6]: factorizing

large integers, searching unsorted databases, and simulating quantum systems, etc. Clas-

sically problems can be divided into two groups, those can be solved in polynomial time

and the nondeterministic polynomial (NP) for which no polynomial algorithms are known.

NP-complete (NPC) problems are a subclass of NP problems. Solving one NPC problem in

polynomial time means all other NPC problems can be solved in polynomial time. The ques-

tion of whether there are polynomial algorithms for NPC problems is an unsolved problem

in mathematics [7, 8]. The 3-bit Exact Cover problem (EC3) is one of the NPC prob-

lems. The EC3 problem is a restricted version of the 3-bit satisﬁability problem [9] and no

algorithm has been found that can solve this problem in polynomial time on a classical com-

puter. In Ref. [9, 10], a quantum adiabatic algorithm (QAA) for solving the EC3 problem

has been proposed. It has been found later that the QAA cannot solve the EC3 problem

eﬃciently [11–15].

The EC3 problem on a quantum computer can be formulated as follows [9, 10]: the 3-bit

instance of satisﬁability is a Boolean formula with M clauses

C1 ∧ C2 ∧ · · · ∧ CM ,

(1)

where each clause Cl is true or false depending on the values of a subset of the n bits, and

each clause contains three bits. The clause is true if and only if one of the three bits is 1 and

the other two are 0. The task is to determine whether one (or more) of the 2n assignments

satisﬁes all of the clauses, that is, makes formula (1) true, and ﬁnd the assignment(s) if it

2

exists. Let iC, jC and kC be the 3 bits associated with clause C, for each clause C, we deﬁne

a function

hC(ziC , zjC , zkC ) =(0, if (ziC , zjC , zkC ) satisﬁes clause C

1, if (ziC , zjC , zkC ) violates clause C

The Hamiltonian for clause C is

HC|z1z2 · · · zni = hC (ziC , zjC , zkC ) |z1z2 · · · zni,

(2)

(3)

where |zji is the j-th bit and has a value 0 or 1. If the ground state energy of the Hamiltonian
HC is zero, the ground state is a superposition of |z1z2 · · · zni, where the bit string z1z2 · · · zn
satisﬁes the clause C. The dimension of computational basis states (CBS) |z1z2 · · · zni is
N = 2n. A solution to the problem is a state which is a superposition of CBS that satisﬁes

all the clauses, the eigenenergy of the state is zero for every Hamiltonian HC for all of the

clauses. Details of the algorithm are shown below.

II. THE ALGORITHM

In this algorithm, we prepare an equal superposition of all CBS of the n bits as initial

state of the problem, and the clauses are applied in M steps sequentially. In each step, the

state that satisﬁes the corresponding clause is projected out from the previous state, and is

veriﬁed. This procedure is based on the resonance phenomena.

The eigenstates of the Hamiltonian HC for clause C have eigenenergies of either 0 or 1,

the ground state energy of HC is 0 if it satisﬁes clause C. For a probe qubit coupled to a

system, the probe qubit exhibits a dynamical response when it resonates with a transition

in the system. The system can be guided to evolve to its ground state with eigenvalue 0 by

inducing a resonance between the probe qubit and a transition in the system [16, 17]. This

can be achieved by setting a reference state such that the transition frequency between the

reference state and the ground state with eigenvalue 0 of the Hamiltonian HC equals the

frequency of the probe qubit. The ground state is an equal superposition of basis states

that satisfy the clause C. And the ground state with eigenvalue of 0 can be veriﬁed through

decay dynamics of the probe qubit [18].

Detailed procedures of the algorithm for solving the EC3 problem on a quantum computer

is described below.

3

A. Procedures of the algorithm

We construct a quantum register R of (n + 1) qubits, which contains one ancilla qubit

and an n-qubit quantum register that represents the EC3 problem of dimension N. A probe

qubit is coupled to R and the Hamiltonian of the entire (n + 2)-qubit system is

H = −

1
2

ωσz ⊗ I⊗(n+1)

2

+ I2 ⊗ HR + cσx ⊗ σx ⊗ IN ,

(4)

where I2 and IN are two- and N-dimensional identity operators, respectively, σx and σz are

the Pauli matrices. The ﬁrst term in the above equation is the Hamiltonian of the probe

qubit, the second term is the Hamiltonian of the register R, and the third term describes

the interaction between the probe qubit and R. Here, ω is the frequency of the probe
qubit ( = 1), and c is the coupling strength between the probe qubit and R, and c ≪ ω.
The Hamiltonian of R is in the form

HR = −1 × |0ih0| ⊗ IN + |1ih1| ⊗ HC,

(5)

where HC is the Hamiltonian of clause C.

We set the frequency of the probe qubit ω = 1. The procedures of the algorithm is as

follows:

j=0 |ji where |ji are the CBS of the n qubits. For k = 0:

Let |ϕ0i = 1√N PN−1
(i) Prepare the probe qubit in its excited state |1i and the register R in state |0i|ϕki.
The state |0i|ϕki is the eigenstate of HR with eigenvalue of −1.

(ii) Construct Hamiltonian HCk+1 for clause Ck+1, and Hamiltonian H for the algorithm
as shown in Eq. (4). Then implement time evolution operator U(τ ) = exp (−iHτ ) on the
(n + 2)-qubit system.

(iii) Read out the state of the probe qubit by performing a measurement on the probe

qubit in its computational basis.

(iv) Repeat steps (i) – (iii) until a decay of the probe qubit to its ground state is observed.

(v) Take the state of the last n qubits obtained from step (iv), check if it is the ground

state of the Hamiltonian HCk+1 with eigenvalue 0 using the veriﬁcation procedure described

below.

(vi) If the state is veriﬁed to be the ground state of the Hamiltonian HCk+1 with eigenvalue
0, set it as the input state |ϕk+1i of the problem, and set the (n + 2) qubits of the algorithm
in state |1i|0i|ϕk+1i.

4

probe

1

ancilla

0

k 

! "#U

FIG. 1: Quantum circuit for solving the EC3 problem. The ﬁrst line represents a probe qubit.

U (τ ) is a time evolution operator driven by a Hamiltonian in Eq. (4). The last n qubits represent

the EC3 problem.

(vii) Set k = k + 1, repeat steps (i)-(vi), until run over all M clauses of the problem. The
state |ϕMi of the last n qubits encodes the solution to the problem, that is, all assignments
of the n bits that satisfy all of the M clauses.

The quantum circuit for the (k + 1)-th round of the algorithm is shown in Fig. 1.

B. Veriﬁcation of the ground state

We have to check that in the k-th round of the algorithm, whether the state we obtained

from step (iv) of the algorithm is the ground state of the Hamiltonian HCk with eigenvalue 0.

This can be achieved using the circuit in Fig. 1. As shown in [18], the probe qubit exhibits

resonance dynamics when the input state is the ground state of HCk with eigenvalue 0. The
initial state of the entire (n + 2)-qubit system is set as |1i|0i|ϕki, evolve the entire system
with Hamiltonian H for time t, then perform a measurement on the probe qubit in its

computational basis. Run this procedure a number of times to obtain decay probability of

the probe qubit. Repeat the above steps for diﬀerent evolution time t to obtain the decay
dynamics of the probe qubit. Only when the state |ϕki is the ground state of HCk with
eigenenergy 0, the probe qubit exhibits resonance dynamics. The decay probability of the

probe qubit oscillates between zero and one periodically with evolution time. The ground
state of the Hamiltonian HCk with eigenvalue 0 can be veriﬁed in time t ∼ 1/c.

5

III. EFFICIENCY OF THE ALGORITHM

We now analyze the eﬃciency of the algorithm. In the ﬁrst round of the algorithm, the
eigenstate |ϕ1i obtained from the algorithm is the ground state of the Hamiltonian HC1
with eigenvalue 0, which is an equal superposition of all CBS that satisfy clause C1. The
probability for obtaining the state |ϕ1i is p1 = d1/N = 3/8, where d1 is the number of CBS
that satisfy clause C1. Therefore |ϕ1i can be obtained in O(1/p1) trials. In this round, the
state space of the problem is reduced to N1 = p1 × N.

In the second round of the algorithm, we set the state |ϕ1i as input state of the problem,
construct Hamiltonian HC2 for clause C2, and run the algorithm. The eigenstate |ϕ2i, which
is the ground state of the Hamiltonian HC2, is projected out from the state |ϕ1i that satisﬁes
clause C1, therefore |ϕ2i is an equal superposition of basis states that satisfy clauses C1∧C2.
The probability for obtaining state |ϕ2i is p2 = d2/N1 where d2 is the number of CBS that
satisfy clauses C1 ∧ C2.
It depends on clause C2, and can be one of the three values of
{3/8, 5/12, 1/2}, which corresponds to the cases where clause C2 has zero, one, or two bits
same as clause C1. The state |ϕ2i can be obtained in O(1/p2) trials. In the second round,
the state space of the problem is reduced to N2 = p2 × N1 = p2p1 × N.

In the third round of the algorithm, the state |ϕ2i is set as input state of the problem,
the Hamiltonian HC3 is constructed for clause C3. The ground state |ϕ3i of the Hamiltonian
HC3 with eigenvalue 0 can be projected out from the state |ϕ2i. Since the state |ϕ2i satisﬁes
clauses C1 ∧ C2, the state |ϕ3i is an equal superposition of basis states that satisfy clauses
C1∧ C2∧ C3. The probability p3 = d3/N2 where d3 is the number of CBS that satisfy clauses
C1 ∧ C2 ∧ C3. In the following we discuss possible values of p3.

We deﬁne a function S(Ck), which gives the number of bits in clause Ck that are same
as that of in clause set {C1, C2,· · · , Ck−1} and k > 3. The function S(Ck) can be 0, 1, 2,
or 3. We now discuss the possible values of pk = dk/Nk−1 for obtaining the state |ϕki from
state |ϕk−1i when S(Ck) takes diﬀerent values. It is obvious that pk = 3/8 when S(Ck) = 0.
For S(Ck) = 1, the smallest value that pk can be is pk = 1/4. In the case of S(Ck) = 2,

the smallest value for pk is 0, while the next smallest value of pk > 1/18. For S(Ck) = 3,

the smallest value of pk = 0, and the next smallest value of pk > 1/27. These estimations

consider the maximal dimension of the state space that the bits in clause Ck associated with
the clauses in the clause set {C1, C2,· · · , Ck−1}.

6

From the above analysis, we can see that the smallest possible value of pk is 0, while

the next smallest value of pk is a ﬁnite number. This means we can conclude whether the
probability pk for obtaining the state |ϕki is zero or not in ﬁnite number of trials in each
round of the algorithm.

In the following, we discuss the evolution time required for obtaining the ground state

of a clause Hamiltonian in each round of the algorithm. We take the k-th round of the
algorithm for obtaining state |ϕki with probability pk for instance.
In the k-th round, the input state of the problem is |ϕk−1i,
in basis of {|Ψ0i =
|1i|0i|ϕk−1i, |Ψ1i = |0i|1i 1√dk Pdk
r2=dk+1 |jr2i}, where
states
r2=dk+1 |jr2i are the eigenstates of HCk with eigenval-
ues 0 and 1, respectively, where |jr1i are the CBS that satisfy clauses C1∧C2∧· · ·∧Ck−1∧Ck,
and the number of |jr1i is dk, |jr2i are the CBS that satisfy clauses C1 ∧ C2 ∧ · · ·∧ Ck−1 but
do not satisfy clause Ck, the Hamiltonian H of the algorithm in Eq. (4) can be written as

1√Nk−1−dk PNk−1

1√Nk−1−dk PNk−1

r1=1 |jr1i, |Ψ2i = |0i|1i

1√dk Pdk

r1=1 |jr1i and

.

(6)

H =


2

− 1
c√pk
c√1 − pk

c√pk c√1 − pk
− 1
2
0

0

1
2




Let |Ψ (t)i = c0 (t) |Ψ0i + c1 (t) |Ψ1i + c2 (t) |Ψ2i, the Schr¨odinger equation with the above
Hamiltonian can be solved exactly and

c1 (t) = 2c√pkXx

where x satisﬁes equation

ext − 2ixext

12x2 − 4ix + 4c2 + 1

,

8x3 − 4ix2 + 2(4c2 + 1)x + i(8c2pk − 4c2 − 1) = 0.

(7)

(8)

The probability of the system being evolved to state |Ψ1i is P res
decay(t) = |c1 (t) |2. As long as
pk is a ﬁnite number, the state |Ψ0i can be evolved to state |Ψ1i with probability of one at
time t = π
, and as we have discussed above, for each case of the function S(Ck), pk is
2
a ﬁnite number when pk 6= 0. In Fig. 2, we show the variation of P res
evolution time t by setting c = 0.02 and pk = 1/27.

decay(t) with respect to

c√pk

1

In the

case
|1i|0i|ϕk−1i,|0i|1i

of

pk

= 0,

the Hamiltonian H in basis

of

1√Nk−1 PNk−1−1

j=0

|ji} can be written as
H =

 .


− 1
2 c
1
c
2

7

{|Ψ0i =

(9)

s
e
r
 

y
a
c
e
d
P
 
y
t
i
l
i

b
a
b
o
r
P
 
y
a
c
e
D

1.0

0.5

0.0

0

 

 

800

1600

Evolution time t

FIG. 2: (Color online) Decay probability of the probe qubit vs. evolution time t in the k-th round

of the algorithm as pk = 1/27 and c = 0.02.

With the initial state being set as |Ψ0i, the decay probability of the probe qubit is

P non-res

decay (t) =

4c2 sin2p1/4 + c2t

1 + 4c2

.

(10)

The decay probability is very small for c ≪ 1, and oscillates between 0 and 4c2/(1 + 4c2).
The amplitude is very small and the dynamics of the probe qubit in this case can be well

distinguished from that of the probe qubit in the resonance case.

In the algorithm, the total number of trials is proportional to the number of clauses M

1
pk

k=1,pk6=0

as ∝PM
3(cid:1), and in each
round of the algorithm, the evolution time of the algorithm is ﬁnite when pk 6= 0, and the
case when pk = 0 can be veriﬁed in ﬁnite number of trials. Therefore the runtime of the

. The maximum number of clauses for an n-bit string is (cid:0)n

algorithm scales polynomially with the number of bits of the EC3 problem.

The time evolution operator U(τ ) = exp (−iHτ ) in the algorithm can be implemented

8

eﬃciently through the Trotter formula [19] on a quantum computer.

The cost of the algorithm will be diﬀerent if we apply the clauses in diﬀerent order. We
use an 8-bit EC3 problem as an example. The 3-bit sets of the 6 clauses C1, C2,· · · , C6
are applied in the order of {1, 2, 8}, {2, 3, 6}, {2, 3, 7}, {2, 4, 5}, {2, 5, 6}, and {3, 5, 8}. In
this case, the corresponding probabilities of p1, p2,· · · , p6 are {3/8, 5/12, 1/2, 9/20, 5/9, 1/5},
respectively. The solution to the EC3 problem is |00010111i. If we set the order of the 6
clauses as {2, 3, 6}, {2, 3, 7}, {2, 5, 6}, {2, 4, 5}, {3, 5, 8}, and {1, 2, 8}, the corresponding
probabilities of p1, p2,· · · , p6 are {3/8, 1/2, 1/2, 1/2, 1/3, 1/4}. The cost of the algorithm is
less in the second case.

IV. DISCUSSION

For an n-bit EC3 problem, classically the probability p for obtaining a solution to the

problem is p = dM /2n, where dM is the number of the assignments that satisfy all of the M

clauses according to the algorithm. In this algorithm, the probability p is decomposed into
M steps p = p1p2 · · · pM , and each pk is ﬁnite. In each round of the algorithm, a state that
satisﬁes the current clause and all of the clauses in previous rounds of the algorithm can be

obtained with ﬁnite success probability and can be veriﬁed in ﬁnite time. The dimension

of the state space of the computational basis states can be reduced exponentially in each

round of the algorithm. This makes the runtime of the algorithm scales linearly with the

number of clauses, thus scales polynomially with the number bits of the problem.

Acknowledgments

This work was supported by the National Nature Science Foundation of China (Grants

No. 11275145).

[1] E. Chastain, A. Livnat, C. Papadimitriou and U. Vazirani, Algorithms, games, and evolution.

Proc Natl Acad Sci. 111, 10620 (2014).

9

[2] P. Shor, Algorithms for quantum computation: discrete logarithms and factoring. Proc. 35th

Ann. Symp. on Found. of Comp. Sci., 124-134 (IEEE Comp. Soc. Press, Los Alamitos, CA,

1994).

[3] L. K. Grover, Quantum mechanics helps in searching for a needle in a haystack. Phys. Rev.

Lett. 79, 325-328 (1997).

[4] A. M. Childs, W. van Dam, Quantum algorithms for algebraic problems. Rev. Mod. Phys.

82(1), 1-52 (2010).

[5] I. Buluta, F. Nori, Quantum simulators. Science 326, 108-111 (2009).

[6] S. Lloyd, Universal quantum simulators. Science 273, 1073 (1996).

[7] S. A.

Cook, Millennium Problems

(Clay Mathematics

Institute,

2000),

http://www.claymath.org/millennium.

[8] C. Seife, What are the limits of conventional computing? Science 309, 96 (2005).

[9] E. Farhi, J. Goldstone, S. Gutmann, A numerical study of the performance of a quantum

adiabatic evolution algorithm for satisﬁability. e-print quant-ph/0007071v1 (2000)

[10] E. Farhi, J. Goldstone, S. Gutmann, J. Lapan, A. Lundgren, D. Preda, A quantum adiabatic

evolution algorithm applied to random instances of an NP-Complete problem. Science 292,

472-475 (2001).

[11] W. van Dam, M. Mosca, U. Vazirani, in Proceedings of the 42th IEEE Symposium on Founda-

tions of Computer Science (FOCS 2001 ) (IEEE Computer Society, Washington, DC, 2001),

p. 279-287.

[12] ˇZnidariˇc, M. Horvat, Exponential complexity of an adiabatic algorithm for an NP-complete

problem, Phys. Rev. A 73, 022329 (2006).

[13] E. Farhi, J. Goldstone, S. Gutmann, Quantum adiabatic evolution algorithms with diﬀerent

paths. e-print quant-ph/0208135 (2002).

[14] E. Farhi, How to make the quantum adiabatic algorithm fail. Int. J. Quantum. Inform. 6,

503-516 (2008).

[15] I. Hen, A. P. Young, Exponential complexity of the quantum adiabatic algorithm for certain

satisﬁability problems. Phys. Rev. E 84, 061152 (2011).

[16] H. Wang, H. Fan and F. Li, Quantum algorithm for solving some discrete mathematical

problems by probing their energy spectra. Phys. Rev. A 89, 012306 (2014).

[17] H. Wang, Quantum algorithm for obtaining the eigenstates of a physical system. e-print arXiv:

10

1510.00820v1 (2015).

[18] H. Wang, Determining Ramsey numbers on a quantum computer. Phys. Rev. A 93,

032301 (2016).

[19] M. A. Nielsen, I. L. Chuang, Quantum computation and quantum information. (Cambridge

Univ. Press, Cambridge, England, 2000).

11

