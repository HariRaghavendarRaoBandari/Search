Colored Spanning Graphs for Set Visualization∗

Ferran Hurtado† Matias Korman‡ Marc van Kreveld§ Maarten L¨oﬄer§

Vera Sacrist´an†

Akiyoshi Shioura¶

Rodrigo I. Silveira†

Bettina Speckmann(cid:107)

Takeshi Tokuyama‡

Abstract

We study an algorithmic problem that is motivated by ink minimization for sparse set
visualizations. Our input is a set of points in the plane which are either blue, red, or purple.
Blue points belong exclusively to the blue set, red points belong exclusively to the red set, and
purple points belong to both sets. A red-blue-purple spanning graph (RBP spanning graph)
is a set of edges connecting the points such that the subgraph induced by the red and purple
points is connected, and the subgraph induced by the blue and purple points is connected.

We study the geometric properties of minimum RBP spanning graphs and the algorithmic
problems associated with computing them. Speciﬁcally, we show that the general problem can
be solved in polynomial time using matroid techniques. In addition, we discuss more eﬃcient
algorithms for the case in which points are located on a line or a circle, and also describe a
fast ( 1

2 ρ + 1)-approximation algorithm, where ρ is the Steiner ratio.

In memoriam: Ferran Hurtado (1951–2014)

This paper was initiated during a research visit hosted by Ferran and his group in Barcelona.
Following tradition, hours of research were complemented by relaxing evenings with great food
and wine. The authors would like to thank Ferran for being a supportive mentor, an inspiring
colleague, and a great friend.

1

Introduction

Visualizing sets and their elements is a recurring theme in information visualization (see the recent
state-of-the-art report by Alsallakh et al. [5]). Sets arise in many application areas, as varied as
social network analysis (grouping individuals into communities), linguistics (related words), or
geography (related places). Among the oldest representations for sets are Venn diagrams [15]
and their generalization, Euler diagrams. These representations are natural and eﬀective for a
small number of elements and sets. However, for larger numbers of sets and more complicated
intersection patterns more intricate solutions are necessary. The last years have seen a steady
stream of developments in this direction, both for the situation where the location of set elements
can be freely chosen and for the important special case that elements have to be drawn at particular
ﬁxed positions (for example, restaurant locations on a city map).

6
1
0
2

 
r
a

M
2

 

 
 
]

G
C
.
s
c
[
 
 

1
v
0
8
5
0
0

.

3
0
6
1
:
v
i
X
r
a

Drawing [19].
Matem`atiques,
{vera.sacristan|rodrigo.silveira}@upc.edu

Our paper is motivated by some recent approaches that use very sparse enclosing shapes
when depicting sets. LineSets [4] are the most minimal of all, reducing the geometry to a single
∗A preliminary version of this paper appeared in the proceedings of the 21st International Symposium on Graph
†Dept.
‡Tohoku University, Japan {mati|tokuyama}@dais.is.tohoku.ac.jp
§Dept.
¶Dept. of Social Engineering, Tokyo Institute of Technology, Japan shioura.a.aa@m.titech.ac.jp
(cid:107)Dept.

of Mathematics and Computer Science, Technical University Eindhoven,

{m.j.vankreveld|m.loffler}@uu.nl

of Computing

Utrecht University,

and

Information

Sciences,

the Netherlands

the Netherlands

de

Universitat

Polit`ecnica

de

Catalunya,

Spain

b.speckmann@tue.nl

1

continuous line per set which connects all elements. Both Kelp Diagrams [14] and its successor
KelpFusion [22] are based on sparse spanning graphs, essentially variations of minimal spanning
trees for diﬀerent distance measures. These methods attempt to reduce visual clutter by reducing
the amount of “ink” (see Tufte’s rule [31]) necessary to connect all elements of a set. However,
although the results are visually pleasing, neither method does use the optimal amount of ink. In
this paper we explore the algorithmic questions that arise when computing spanning graphs for
set visualization which are optimal with respect to ink usage.
Problem statement. Our input is a set of n points in the plane. Each point is a member of one
or more sets. We mostly consider the case where there are exactly two sets, namely a red and a
blue set. A point is red if it is part only of the red set and it is blue if it is part only of the blue
set. A point that is part of both the red and the blue set is purple.

Figure 1: A minimum RBP spanning graph.

A red-blue-purple spanning graph (RBP
spanning graph) for a set of points that are
red, blue, and purple is a set of edges connect-
ing the points such that the subgraph induced
by the red and purple points is connected, and
the subgraph induced by the blue and purple
points is connected (see Figure 1). A minimum
RBP spanning graph for a set of points that are
red, blue, and purple is a red-blue-purple span-
ning graph that has minimum weight (total edge
length). In this paper we consider the algorithmic problems associated with computing minimum
RBP spanning graphs.
Results and organization. We ﬁrst review related work. In Section 2 we describe and prove
various useful properties of (minimum) RBP spanning graphs. Then, in Section 3, we consider the
two special cases where the points are located on a line or on a circle. This setting is meaningful
if the elements of the sets are not associated with a speciﬁc location (for example, social networks
or software systems). Here visualizations frequently choose to arrange elements in simple conﬁg-
urations such as lines or circles. We give an O(n) time algorithm for points on a line, assuming
that the input is already sorted. For points on a circle we exploit a structural result which allows
us to use dynamic programming in O(k3 + n) time, where k is the number of purple points. In
Section 5 we turn to approximations. We describe an O(n log n) time algorithm that computes
a ( 1
2 ρ + 1)-approximation of the minimum RBP spanning graph, where ρ is the Steiner ratio. In
Section 4 we give a general algorithm for computing a minimum RBP spanning graph. The algo-
rithm runs in O(n4) time and is based on matroid optimization techniques1. Finally, in Section 6
we discuss various extensions for situations with more than two sets.
Related work. In recent years a number of papers explored the problem of automatically drawing
Euler diagrams, for example, Simonetto and Auber [28], Stapleton et al. [29], and Henry Riche and
Dwyer [18]. These methods assume that the locations of the set elements can be freely chosen. An
important variation is the case that elements have to be drawn at ﬁxed positions. Collins et al. [13]
presented Bubble Sets, a method based on isocontours. A similar approach was suggested by Byelas
and Telea [11]. LineSets, by Alper et al. [4], attempt to improve the overall readability by the
minimalist approach of drawing a single line per set. Dinkla et al. [14] introduced Kelp Diagrams,
which use a sparse spanning graph, essentially a minimum spanning tree with some additional
edges. Kelp Diagrams were extended by Meulemans et al. [22] to a hybrid technique named
KelpFusion which uses a mix of hulls and lines to generate ﬁtted boundaries.

Sets deﬁned over points in the plane can be interpreted as an embedding of a hypergraph
where the points are vertices and each set is a hyperedge connecting an arbitrary number of ver-
tices. Drawings of hypergraphs have been discussed in several papers, for example, by Kaufmann
et al. [21], Buchin et al. [10], and Brandes et al. [8].

1We note that in the conference version of this paper [19], we claimed that the problem was NP-hard. However,

our NP-hardness reduction turned out to be incorrect.

2

Also in the area of discrete and computational geometry many problems on colored point sets
have been studied. Possibly the most famous example is the Ham-Sandwich Theorem: given a set
of 2n red points and 2m blue points so that no three points are aligned, there is always a line (cid:96) such
that each open halfplane bounded by (cid:96) contains exactly n red points and m blue points. There
have been many variations on this theorem and also many other results on ﬁnding conﬁgurations
or geometric graphs with constraints depending on colors. We refer the interested reader to the
survey by Kaneko and Kano [20], and to Chapter 8 in the collection of research problems [9].

From an algorithmic point of view, many problems have been considered, here we mention
only a few of them. The bichromatic closest pair (e.g., see Preparata and Shamos [26] Section 5.7,
Agarwal et al. [2], and Graf and Hinrichs [17]), the chromatic nearest neighbor search (see Mount
[25]), the problems on ﬁnding smallest color-spanning objects (see Abellanas et al. [1]),
et al.
the colored range searching problems (see Agarwal et al. [3]), and the group Steiner tree problem
where, for a graph with colored vertices, the objective is to ﬁnd a minimum weight subtree that
covers all colors (see Mitchell [23], Section 7.1). Borgelt et al. [7] discuss computing planar red-blue
minimum spanning trees where edges may connect red and blue points only, and the tree must be
planar. Finally, Tokunaga [30] considers a set of red or blue points in the plane and computes two
geometric spanning trees of the blue and the red points such that they intersect in as few points
as possible.

2 Properties of RBP spanning graphs

For any set S of points, let M ST (S) denote a Euclidean minimum spanning tree of S. Given a
graph G on vertex set S, and a set S(cid:48) ⊆ S, we denote by G[S(cid:48)] the subgraph of G induced by S(cid:48).
Given two graphs G1 = (S1, E1), and G2 = (S2, E2) with possibly diﬀerent vertex sets, we deﬁne
their intersection as G1 ∩ G2 = (S1 ∩ S2, E1 ∩ E2). Given three sets R, B, and P of respectively
red, blue, and purple points, let G∗(R, B, P ) denote a minimum RBP spanning graph. When the
tuple (R, B, P ) is clear from the context, we simply denote it by G∗.

We say that an edge of G∗ is red if it connects two red points or a red and a purple point.
We call an edge blue if it connects two blue points or a blue and a purple point. We call an edge
purple if it connects two purple points. A minimum RBP spanning graph G∗ does not contain
edges between a red and a blue point. The subgraph induced by the red and purple points in
a minimum RBP spanning graph is a spanning tree (since otherwise we could remove an edge
from G∗ and reduce its weight). Naturally, the analogous statement holds for the blue and purple
points. Figure 2 (a) illustrates the trade-oﬀ between red, blue, and purple edges in a minimum
RBP spanning graph.

When there are no ties (e.g., if no two edges of the same color have the same length), every
red edge in a minimum RBP spanning graph also occurs in a minimum spanning tree of only the
red and purple points (since otherwise we could replace it by another red edge of smaller weight).
The corresponding statement is true also for the blue edges, but not for the purple edges. That
is, there can be purple edges in a minimum RBP spanning graph that do not occur in a minimum
spanning tree of only the purple points. In fact, in the upcoming Proposition 1 we show something
stronger: we give a problem instance whose RBP spanning graph has a purple edge that crosses
several other purple edges.

Just as with standard minimum spanning trees, the degree of the points in a minimum RBP

spanning graph is bounded.

Lemma 1. The maximum degree of a point in a minimum RBP spanning graph is at most 18.

Proof. We now proceed to prove the statement by contradiction. Assume that there exists a
problem instance with a solution G∗ in which a point p is adjacent to more than 18 points. By
the pigeonhole principle, we conclude that p is adjacent to at least 7 points of the same color. Let
N be the set of such vertices, and observe that the edges in G∗[N ∪ {p}] form a star. Thus, if we
replace these edges by those in M ST (N ∪ {p}) we obtain a diﬀerent graph that spans exactly the
same vertices and has smaller weight.

3

Figure 2: (a) Two examples of minimum RBP spanning graphs of similar conﬁgurations of points.
(b) A minimum RBP spanning graph with a purple edge crossing. (c) A minimum RBP spanning
graph with a vertex of degree 18.

We also note that the above bound is tight: let p be a purple point located in the center of a
regular hexagon with radius 3 and two more regular hexagons with radius 1, one slightly rotated.
Place a purple point on each corner of the large hexagon, place red points on the corners of one of
the smaller hexagons, and blue points on the corners of the other one. Then the star graph with
p at the center (with degree 18) is a minimum RBP spanning graph (see Figure 2 (c)).

It is worth mentioning that the degree-18 vertex in the previous example can be avoided, since
the same point set has other RBP spanning graphs where the maximum degree is 15. In fact, a
degree higher than 15 is never necessary: even if we allow degeneracies, there is a way to break
ties so that no vertex of a minimum spanning tree has degree larger than 5 [32]. Thus, if a vertex
is adjacent to more than 5 vertices of the same color, we can remove one of the edges and replace
it by one of equal or smaller length, preserving connectivity. Similarly, we can show that a red
or blue point can have degree 6 in a minimum RBP spanning graph, but for any point set there
exists a minimum RBP spanning graph in which no red or blue point has degree larger than 5. At
the same time, a vertex of degree 15 may be sometimes necessary: if we replace the hexagons in
the previous construction by pentagons, we obtain a similar construction whose unique minimum
RBP spanning graph has a point of degree 15.

It is easy to see that a minimum RBP spanning graph is not necessarily planar. Red and blue
edges are mostly independent and they can easily cross. Moreover, a red and a purple edge can
cross, a blue and a purple edge can cross, and even two purple edges can cross in a minimum RBP
spanning graph, as shown in Figure 2 (b). In fact, a single purple edge can cross arbitrarily many
purple edges.

Proposition 1. A purple edge in an optimal RBP spanning graph can cross Θ(n) other purple
edges.

The proof of this statement is constructive: we create a problem instance whose (unique) RBP
spanning graph has a purple edge crossed by all other purple edges. Due to its length, the exact
details of the construction and the additional observations necessary to prove this statement are
relegated to the appendix. A sketch of the construction is shown in Figure 3.

3 Points on a line or on a circle

In this section we describe eﬃcient algorithms to ﬁnd a minimum RBP spanning graph if the points
lie on a line or on a circle. In the circle case, we ﬁrst present additional geometric observations
that allow us to use dynamic programming.

3.1 Points on a line

We now consider the case in which the points of S lie on a line. We number the purple points
p1, . . . , pk from left to right. For every 1 ≤ i ≤ k − 1, let Si be the set of points between pi and
pi+1 (this set will have both pi and pi+1, and possibly some blue and/or red points). We also

4

(a)(b)(c)Figure 3: Schematic view of a set of points whose minimum RBP spanning graph has a purple
edge crossing a linear number of other purple edges. The ﬁgure is not to scale; see the appendix
for details.

Figure 4: A minimum RBP spanning graph of points on a line, and its partition into sets Si (some
edges are depicted by curved arcs for clarity).

deﬁne S0 to contain p1 and all red/blue points to its left, and Sk to contain pk and all red/blue
points to its right (see Figure 4). First, we show that each such subset of points can be treated
independently.

Lemma 2. Let S be a set of red, blue, and purple points located on a line, and let G∗ be a
minimum RBP spanning graph of S. Then for every edge qq(cid:48) of G∗, the points q and q(cid:48) are in Sj,
for some j ∈ {0, . . . k}.
Proof. Let qq(cid:48) be an edge of G∗ such that q ∈ Si, q(cid:48) ∈ Sj, and i (cid:54)= j. Then qq(cid:48) goes through a
purple point p. It is straightforward to verify that we can replace such edge by the pair qp and pq(cid:48).
The new construction has the same weight and also is a RBP spanning graph. Moreover, since it
contains one extra edge, it must contain a cycle. Therefore, there is an edge that can be removed
while preserving the RBP spanning property. This removal will decrease the total weight of the
tree, in contradiction with the optimality of G∗.

Using this lemma it is straightforward to obtain an eﬃcient algorithm.

Theorem 1. Let S be a set of n red, blue, and purple points located on a line, given in sorted
order. A minimum RBP spanning graph of S can be computed in O(n) time.

Proof. Note that each set Si has at most two purple points. Thus, there can be at most one purple
edge connecting points within each set. We consider two cases: either the edge is present or not.
For each case, both the red and blue subproblems can be easily solved in time proportional to the
size of Si (if the edge is not present, pi and pi+1 must be connected both by red and blue paths.
Otherwise, the longest edge in each path could be removed, while preserving connectivity). Out
of both possible solutions, we keep the one with minimum weight and proceed to the next value
of i. By Lemma 2, each subproblem Si can be solved independently, thus the minimality of each
Si implies that the resulting RBP spanning graph has minimum weight.

3.2 Points on a circle

Recall that, by Proposition 1, when the points are in the plane, a purple edge may cross many
other purple edges. This fact holds even if the points lie in convex position (see an example with

5

S0S1Sk...p1pkFigure 5: The three cases in the proof of Lemma 3, local transformations are shown by dashed
purple edges. No assumptions are made on the number of crossings between πR, πB, vv(cid:48), and
ww(cid:48). Note that the red and blue paths are drawn schematically—in the actual paths all vertices
must lie on the circle.

a single crossing in Figure 2 (b); a similar example with more crossings is given in the Appendix).
However, below we prove that for points on a circle the situation is structurally diﬀerent, and
purple edges cannot cross any other edges.

Lemma 3. Let S be a set of red, blue, and purple points located on a circle. A minimum RBP
spanning graph of S cannot have a purple edge crossing any other edge.

Proof. Let G be a minimum RBP spanning graph in which two edges e1 = vv(cid:48) and e2 = ww(cid:48)
cross. We will perform a local transformation that will reduce the weight of G, contradicting the
minimality of G.

First assume that both e1 and e2 are purple, and consider the four paths in G[R ∪ P ] starting
at either v or v(cid:48) and ending at w or w(cid:48). Without loss of generality, we can assume that the
minimum-link path among the four (i.e., the path with smallest number of edges) connects v and
w (illustrated in Figure 5). Let πR be such path; note that, by deﬁnition of minimum-link path,
πR cannot use edge vv(cid:48), since then the red path connecting v(cid:48) and w would be one link shorter.
Analogously, πR cannot use edge ww(cid:48) neither. Let πB be the minimum-link blue path among
those that connect v or v(cid:48) with w or w(cid:48). We now distinguish three cases depending on the number
of shared endpoints between πR and πB:

Paths πR and πB share both endpoints. This case is depicted in Figure 5, left. We replace
edges vv(cid:48) and ww(cid:48) with edges vw(cid:48) and v(cid:48)w. Since we replaced two diagonals of a quadrilateral
by two sides, the resulting graph G(cid:48) has smaller weight than G. We now prove that G(cid:48)
is indeed spanning. First consider the red tree in G(cid:48): the removal of edge ww(cid:48) creates
two connected components. Moreover, points v and w(cid:48) must belong to diﬀerent connected
components (otherwise, the edge ww(cid:48) together with πR and the path from v to w(cid:48) would
create a cycle in G). Thus, by adding the edge vw(cid:48) we reconnect the two components again.
Likewise, the removal of edge vv(cid:48) creates two red connected components that are reconnected
with the edge wv(cid:48). That is, graph G(cid:48) also spans red. We repeat the same reasoning for blue
and obtain that G(cid:48) is a RBP spanning graph with smaller weight than G, a contradiction.

Paths πR and πB share no endpoints. This case is depicted in Figure 5, center. We proceed
as in the previous case, replacing edges vv(cid:48) and ww(cid:48) by vw(cid:48) and v(cid:48)w. The argumentation is
identical to the previous case.

Paths πR and πB share one endpoint. This case is depicted in Figure 5, right. Without loss
of generality, v is the shared endpoint and the other endpoint of πB is w(cid:48). In this case, the
red path in G from v(cid:48) to w, and the blue path in G from v(cid:48) to w(cid:48), both use the edge vv(cid:48). We
can replace this edge by either v(cid:48)w or v(cid:48)w(cid:48) while maintaining the spanning property. Using
the fact that the four vertices lie on a circle, it is easy to see that either ||v(cid:48)w|| < ||v(cid:48)v|| or
||v(cid:48)w(cid:48)|| < ||v(cid:48)v|| must hold, thus one of the two resulting graphs will have smaller weight.

6

vv0ww0wvv0w0vv0ww0If one of the edges is not purple the situation is easier, since we need to consider only one
color. Assume that edge e2 = ww(cid:48) is red, and that the red path from v to w uses neither e1 nor
e2. Then we can replace edge e2 by either vw(cid:48) or v(cid:48)w(cid:48) to obtain a graph of smaller weight. Note
that, since we are replacing a red edge by another red edge, the spanning property of blue cannot
be altered, and the lemma is proved.

Next we present another crossing property that will be useful for our algorithm.

Corollary 1. Let S be a set of red, blue, and purple points located on a circle. In a minimum
RBP spanning graph G of S, no red or blue edge of G can cross any segment between two purple
points.

Proof. Let p, p(cid:48) be any two purple points of S (not necessarily connected by an edge in G), and
assume that a red edge rr(cid:48) of G crosses segment pp(cid:48). As in the proof of Lemma 3, assume that
the red path from p to r uses neither p(cid:48) nor r(cid:48). Then, edge rr(cid:48) can be replaced by either r(cid:48)p or
r(cid:48)p(cid:48) to obtain a RBP spanning graph of smaller weight.

Analogously to the 1-dimensional case of points on a line, we number the purple points
p1, . . . , pk in clockwise order. For any 1 ≤ i ≤ k, let Si be the set of red and blue points between
pi and pi+1. We assume that all indices are taken modulo k, thus pk+1 = p1. As a consequence of
Corollary 1, we have the following.

Corollary 2. Let S be a set of red, blue, and purple points located on a circle, and let G be a
minimum RBP spanning graph of S. No edge of G incident to a point in Si can cross segment
pipi+1, for 1 ≤ i ≤ k.

We have proved that each subset Si can be treated independently when computing a minimum

RBP spanning graph of S.

Lemma 4. Let S be a set of red, blue, and purple points located on a circle, and let G be a
minimum RBP spanning graph of S. For any purple point pi ∈ S, let p∗i be the point on the
circle diametrically opposite to pi, and let C be any of the two closed semicircles containing both
pi and p∗i . It holds that pi has at most one purple neighbor in G ∩ C, and thus at most two purple
neighbors in total.

Proof. Assume without loss of generality that C is the semicircle to the right of the oriented
segment pip∗i . Suppose, for the sake of contradiction, that pi has at least two purple neighbors
in C. Let p1 and p2 be any two of them, as encountered in counterclockwise order from pi to p∗i
along C. Since pi, p1, p2, and p∗i are lie in the same semicircle, pip2 is longer than p1p2. Then
G can be improved by replacing pip2 by p1p2, leading to a smaller total length and providing the
same connectivity. It follows that pi can have at most one purple neighbor in C.

Using these geometric observations we can now present an algorithm to compute a minimum

RBP spanning graph of points on a circle.

Theorem 2. Let S be a set of n red, blue, and purple points located on a circle, and angularly
sorted. A minimum RBP spanning graph of S can be computed in O(k3 + n) time, where k is the
number of purple points.

Proof. Analogous to the 1-dimensional case, we number the purple points p1, . . . , pk in clockwise
order. For any 1 ≤ i ≤ k, let Si be the set of red and blue points between pi and pi+1. We assume
that all indices are taken modulo k, thus pk+1 = p1.
We present an algorithm based on dynamic programming. By Corollary 2, we can ﬁnd the
solution for each set Si independently. This is a 1-dimensional problem that can be solved in linear
time using the approach of Theorem 1. Thus, we solve all subproblems Si in a preprocessing phase,
in overall O(n) time (assuming the points are circularly sorted).

The algorithm uses four tables indexed by pairs of purple points, of size O(k2), deﬁned as

follows:

7

Figure 6: Proof of Theorem 2: cases that appear when ﬁlling in entry ΛC[i, j] (for some Λ ∈
{P, R, B, C}.

• P C[i, j] contains the length of a minimum RBP spanning graph for the subproblem deﬁned
by all the points on and to the left of the oriented segment pipj (including pi and pj),
assuming that pi and pj are already connected in both the red and the blue subgraphs using
points to the right of the oriented segment pipj. In other words, the minimum RBP spanning
graph whose length is stored in P C[i, j] does not need to connect pi and pj in neither red
nor blue.

• RC[i, j] contains the length of a minimum RBP spanning graph for the subproblem deﬁned
by all the points on and to the left of the oriented segment pipj (including pi and pj), now
assuming that pi and pj are already connected in the red subgraph and disconnected in the
blue subgraph. Therefore, the solution associated with RC[i, j] must connect pi and pj in
its blue subgraph (but not in the red subgraph).

• BC[i, j] is analogous to RC[i, j], where the roles of red and blue are exchanged.
• N C[i, j] assumes that pi and pj are not connected in any color. Therefore, the solution
associated with N C[i, j] must connect pi and pj in both red and blue (either using edge pipj
or in some other way).

With the tables above we can ﬁnd the length of an optimal solution as

min

j≤k{P C[1, j] + N C[j, 1], N C[1, j] + P C[j, 1], RC[1, j] + BC[j, 1], BC[1, j] + RC[j, 1]}.

(1)

That is, if an optimal solution contains an edge of the form p1pj (for some j ≤ k), Lemma 3 guar-
antees that p1pj cannot be crossed by any other edge, giving rise to two independent subproblems,
one to the left of the oriented segment p1pj, and one to the right, of types P C and N C.

Otherwise, p1 cannot have an adjacency with other purple points in an optimal solution.
By Corollary 1, no segment p1pj can be crossed. Therefore, each value of j gives rise to two
independent subproblems, which now can be of any of the types considered in Formula 1.

Thus, it remains to show how to ﬁll in the four tables. All four tables are ﬁlled in a very similar
fashion, so in the following we focus on how to compute ΛC[i, j] (for some Λ ∈ {P, R, B, N}). As
is standard in dynamic programming, we ﬁll in the table entries in order, so that when it is
time to compute the value of an entry (i, j), all the entries corresponding to smaller problems,
i.e., corresponding to purple pairs to the left of the oriented segment pipj, have already been
computed.

The simplest entries are those of the form (i, i + 1). To the left of the oriented edge pipi+1
there are no purple points, thus only red and blue points may be present. A table entry of this
kind can be computed using the approach of Theorem 1, since each solution is independent of the
rest. Note that some entries may have no solution (e.g., if there are only red points to the left
of the oriented edge pipi+1, there cannot be a solution for subproblem RC[i, i + 1]). Whenever
no solution exists, the corresponding entry of the table can be ﬁlled in with +∞. Note that all
entries of the form P C[i, i + 1], RC[i, i + 1], BC[i, i + 1], and N C[i, i + 1] can be computed in
overall O(n) time, since no red or blue point can appear in more than one set Si.

Without loss of generality, assume 1 ≤ i < j ≤ k. In order to ﬁll in entry ΛC[i, j] we consider

the following cases, and store the one with minimum cost.

8

pipjphpipi+1pj• Case I: pi is connected to some purple point in an optimal solution of the subproblem
associated to (i, j). Let h be the largest such index, see Figure 6 (left). Recall that vertices
are indexed in clockwise order.
In this case, no purple edge can cross segment phpj: by
deﬁnition of h, no edge connects pi to a vertex with index larger than h in any solution.
Hence, by Lemma 3, no edge can cross piph. Since pi and ph are connected in both red and
blue, ph and pj must be connected in the same way as pi and pj. Thus, it follows that in
this case ΛC[i, j] = P C[i, h] + ΛC[h, j] + ||piph||.
Since we do not know the value of h, we try all possible candidates for ph, and keep the one
minimizing the cost.

• Case II: pi is not connected to other purple points in any optimal solution of the subproblem
associated to (i, j). By Corollary 2, in an optimal solution no edge can cross pipi+1.
In
addition, since no purple edge is incident to pi, segment pi+1pj cannot be crossed either, see
Figure 6 (right). Therefore, an optimal solution can be found by combining the solutions
associated to the pairs (i, i + 1) and (i + 1, j). The exact cases to consider depend on the
value of Λ:

Λ = N In this case it is assumed that pi and pj are not connected in any color. Point pi+1
must then connect to both pi and pj in each of the subproblems. Thus, N C[i, j] =
N C[i, i + 1] + N C[i + 1, j].

Λ = R In this case pi and pj are assumed to be already connected in red. Thus, pi+1 can
only connect to one of them in red, and must connect to both of them in blue. That
is, RC[i, j] = min{N C[i, i + 1] + RC[i + 1, j], RC[i, i + 1] + N C[i + 1, j]}

Λ = B This case is analogous to the previous one: BC[i, j] = min{N C[i, i + 1] + BC[i +

1, j], BC[i, i + 1] + N C[i + 1, j]}

Λ = P In this case pi and pj are assumed to be already connected in both colors. Point pi+1
must then connect to either pi or pj (but not both) in each of the two colors. Thus,
P C[i, j] = min{N C[i, i + 1] + P C[i + 1, j], P C[i, i + 1] + N C[i + 1, j], RC[i, i + 1] +
BC[i + 1, j], BC[i, i + 1] + RC[i + 1, j]}.

Based on the description above, in order to ﬁll in one entry it is necessary to consider up to
O(k) possible subproblems, each taking constant time to evaluate. Therefore, the total running
time of the algorithm is O(k3 + n).

4 General-case algorithm

In this section we give a polynomial time algorithm for computing a RBP spanning graph,
regardless of the position of the points in the plane. Our solution is based on standard tools from
matroid theory [27]. The main result that we use is the existence of an eﬃcient algorithm for
the weighted matroid intersection problem, deﬁned as follows: given two matroids with the same

ground set M and independent set families Ir and Ib, and a weight function w : M → R, the
aim is to ﬁnd the common independent set Ir ∩ Ib of maximum weight. The algorithm runs in
time polynomial on |M|, and more importantly, does not depend on the size of Ir or Ib (for more
information on the weighted matroid intersection problem see [27, Section 41.3]).
We claim that any minimum RBP spanning graph problem instance can be transformed to
a matroid intersection problem instance, and thus it can be solved in polynomial time on the
number of points. In order to show this, we consider alternative deﬁnition of matroids via base
families. For more information on the base families deﬁnition of matroids and its equivalence to
the independent set formulation see [27]. We start by viewing the red blue purple spanning tree
problem from a graph perspective.

Let R, B, and P denote the sets of red, blue, and purple points, respectively. Let S = R∪B∪P ,
and G = (S, E) be the complete undirected graph whose ground set is R ∪ B ∪ P . We also deﬁne
the weight w(e) of an edge e ∈ E as its Euclidean length.

9

We denote by Br ⊆ 2E the family of edge sets of trees in G that span R ∪ P . Similarly, we
denote by Bb ⊆ 2E the family of edge sets of trees in G that span B ∪ P . It is well-known that
(E,Br) and (E,Bb) are matroids (known as graphic matroids, see [27, Section 39.4]).

We also deﬁne the following “basis supersets”:

Qr = {X ⊆ E | X contains some B ∈ Br},
Qb = {X ⊆ E | X contains some B ∈ Bb}.

Then, the minimum RBP spanning graph problem is formulated as follows:

(P0) Minimize

w(e)

subject to X ∈ Qr ∩ Qb,

(cid:88)

e∈X

(cid:88)

e∈Y

This formulation is not exactly a matroid intersection problem, but its complement is. Thus, we
deﬁne Qr = {Y ⊆ E | E \ Y ∈ Qr} and Qb = {Y ⊆ E | E \ Y ∈ Qb}, and consider the following
maximization problem:

(P1) Maximize

w(e)

subject to Y ∈ Qr ∩ Qb.

Since the complement of a solution for (P0) is a solution for (P1) and vice versa, both problems
are equivalent. In this setting, Qr and Qb are independent set families of some matroids:
Proposition 2 ([27, Section 39.2]). For any matroid (E,B) with basis family B ⊆ 2E, deﬁne

Q = {X ⊆ E | Xcontains some B ∈ B},
Q = {Y ⊆ E | E \ Y ∈ Q}.

Then, (E,Q) is also a matroid with independent set family Q; such a matroid is called the dual
matroid of (E,B).
In particular, both Qr and Qb are independent set families of dual matroids of (E,Br) and (E,Bb),
respectively. From Proposition 2 it follows that (P1) is an instance of the matroid intersection
problem, for which a polynomial-time algorithm exists.

Theorem 3. Let S be a set of n red, blue, and purple points located in the plane. A minimum
RBP spanning graph of S can be computed in O(n4) time.

Proof. Given set S, we construct the equivalent (P1) problem instance and solve it using the
augmenting algorithm (see [27, Theorem 41.7]). We note that this is well-known result, thus its
correctness is already established. In the following we present an interpretation of the algorithm
in terms of the original problem (P0) and bound the running time.

Since any RBP spanning graph is connected, it must have at least n−1 edges. Since the addition
of edges maintains the RBP spanning property, we conclude that for every i ∈ {n − 1, . . . ,|E|}
there exists an RBP spanning graph with exactly i edges. Recall that, in our setting, two points
are connected in E if and only if they have the same color or one of the two is purple. In particular,

we have |E| =(cid:0)|R|+|P|

2

(cid:1) +(cid:0)|B|+|P|

(cid:1)

2

Starting from i = |E| and continuing with smaller values of i, the algorithm ﬁnds an RBP
connected subgraph Xi with i edges that minimizes the weight w(Xi) (among those that contain
exactly i edges). Then, the subgraph Xi of overall minimum weight will be a minimum RBP
spanning subgraph.
Step 0: Set i = |E| and Xi := E.

(cid:0)|P|2
(cid:1)

−

≤

(cid:0)|S|2
(cid:1)

∈ O(n2).

10

Step 1: Take a sequence of edges e1, e2, . . . , e2h+1 (h ≥ 0) such that
e1, e3, . . . , e2h+1 ∈ Xi,
e2, e4, . . . , e2h ∈ E \ Xi,
Xi − e1 induces a connected subgraph for the blue and purple points,
Xi − e2j−1 + e2j induces a connected subgraph for the red and purple points j = 1, 2, . . . , h,
Xi + e2j − e2j+1 induces a connected subgraph for the blue and purple points for j = 1, 2, . . . , h,
Xi − e2h+1 induces a connected subgraph for the red and purple points.

Such a sequence will exist provided that i ≥ n (i.e., we can remove an edge in a cycle or add
a purple edge and remove both a red and a blue edge). Among such sequences, take the one with
the minimum value of −
j=1 w(e2j). If there exist many such sequences, then
take the one with the minimum number of edges.
Step 2: Set Xi−1 := Xi \ {e1, e3, . . . , e2h+1} ∪ {e2, e4, . . . , e2h} and i := i − 1. Go to Step 1.

(cid:80)h
j=0 w(e2j+1) +(cid:80)h

Due to the choice of a sequence in Step 1, we can show that if Xi is an RBP connected subgraph
with |Xi| = i with the minimum weight among those with exactly i edges, then Xi−1 will be an
RBP connected subgraph with i − 1 edges having the minimum weight among those with i − 1
edges (see [27, Section 41.3]). Step 0 initializes with the unique subgraph of |E| edges. Since
it is unique, it has the minimum weight, and thus each Xi is an RBP connected subgraph with
minimum weight among those containing i edges.

We analyze the time complexity of the algorithm above. Let n = |V | and m = |E|. The
number of iterations of the algorithm is m − (n − 1) ∈ O(n2). The sequence of edges in Step 2
can be computed by solving a single-source shortest path problem on an auxiliary edge-weighted
graph. Thus, overall the algorithm terminates in O(m· SSP(n, m)) time, where SSP(n, m) denotes
the time complexity for solving a single-source shortest path problem on a graph with n vertices
and m edges. In our case, m ∈ O(n2), and we can solve the shortest path problem using Dijsktra’s
algorithm in O(m + n log n) time.2 Thus, the overall running time is bounded by O(n4), as
claimed.

5 Approximation

Given the high running time of the exact algorithm presented in the previous section, it is worth
considering more eﬃcient approximation algorithms. A simple approximation algorithm deter-
mines the red-purple minimum spanning tree and the blue-purple minimum spanning tree inde-
pendently, and takes the union of their edges. It is easy to see that this is a 2-approximation
algorithm that requires O(n log n) time.

Another approximation algorithm, A, starts by computing the minimum spanning tree of the
purple edges, and then adds the red and blue points in an optimal manner in the style of Kruskal’s
algorithm for minimum spanning trees. Algorithm A can also be implemented to run in O(n log n)
time by computing the Delaunay triangulation of the red and purple points and of the blue and
purple points. It is easy to argue that A also is a 2-approximation algorithm but interestingly,
we can prove a better bound (close to 1.6) by expressing the approximation factor in the Steiner
ratio ρ (the ratio between the length of a minimum spanning tree and the length of a minimum
Steiner tree). Gilbert and Pollak [16] conjectured that ρ = 2√3 ≈ 1.15, but this conjecture has
not been proved yet.3 Chung and Graham [12] showed a bound of ≈ 1.21, which is currently the
best-known upper bound on ρ.

2Note that in the auxiliary graph some edges may have negative weight. Thus, the straightforwards Dijkstra’s
approach cannot be used. Nevertheless, this diﬃculty can be avoided by assigning a potential to each node. For
more details see [27].

3A proof of the conjecture by Du and Hwang, “A proof of Gilbert-Pollak Conjecture on the Steiner ratio”,

Algorithmica 7:121–135 (1992), turned out to be incorrect.

11

Theorem 4. Approximation algorithm A is a ( 1
spanning graph, where ρ is the Steiner ratio.

2 ρ + 1)-approximation of the minimum RBP

Proof. Let R, B, and P be sets of red, blue, and purple points. Let G∗ be a minimum RBP
spanning graph. Let R∗ be the red edges, B∗ the blue edges, and P ∗ the purple edges in G∗.
Recall that A computes a spanning graph by taking the minimum spanning tree of the purple
points, and then adding the red and blue points optimally. We denote the resulting graph on
R ∪ B ∪ P by G(cid:48), and its red, blue, and purple edges by R(cid:48), B(cid:48), and P (cid:48).
Suppose ﬁrst that G∗ has no purple edges. Then algorithm A gives extra length in terms of
purple edges equal to the MST of the purple points, denoted ||P (cid:48)||. The optimal graph G∗ must
connect all purple points through a red spanning tree and through a blue spanning tree whose
lengths are ||R∗|| and ||B∗||. Algorithm A has a total length of red edges of ||R(cid:48)|| ≤ ||R∗|| and a
total length of blue edges of ||B(cid:48)|| ≤ ||B∗||. Hence the approximation ratio of A in case of absence
of purple edges in the optimal solution is

||P (cid:48)|| + ||R(cid:48)|| + ||B(cid:48)||

||R∗|| + ||B∗||

≤ ||P (cid:48)|| + ||R∗|| + ||B∗||

||R∗|| + ||B∗||

.

Since R∗ connects all purple points, ||R∗|| ≥ S M T (P ), and similarly, ||B∗|| ≥ S M T (P ), where
S M T (P ) is the length of the Steiner Minimum Tree of P . The ratio is maximized when ||R∗||
and ||B∗|| are as small as possible, so the ratio is upper-bounded by
ρ · S M T (P ) + 2 · S M T (P )

M ST (P ) + 2 · S M T (P )

ρ + 1 ,

ρ + 2

=

2

=

1
2

2 · S M T (P )

≤

2 · S M T (P )

where M ST (P ) is the length of the Minimum Spanning Tree of P .

Next, suppose that G∗ has a set P ∗ of purple edges, and assume them ﬁxed. We will reason
about sets of red, blue, and purple points for which the algorithm A performs as poorly as possible
in terms of approximation ratio.

If G∗ has any red point r that has a single red edge incident to it in R∗, then this edge will
connect r to the closest red or purple point, otherwise G∗ is not optimal. Algorithm A will choose
exactly the same edge in its solution. Hence, the approximation ratio of A for the points R \ {r},
B, and P is higher than for the points R, B, and P . The same is true for a blue or purple point
that has a single incident edge in G∗. So we can restrict ourselves to analyzing point sets whose
optimal solution does not have any leafs in G∗.

The edges of P ∗ partition the purple points of P into a number of purple components which
are connected by a red spanning forest and a blue spanning forest, and by the observations above,
there are no other red or blue points in G∗. We have

||P (cid:48)|| ≤ ||P ∗|| + ρ||R∗|| and ||P (cid:48)|| ≤ ||P ∗|| + ρ||B∗|| ,

because in G∗ the red (blue) connections between the purple components cannot be shorter than
the Steiner Minimum Forest of the purple components. We can assume by symmetry that ||R∗|| ≤
||B∗||. The approximation ratio then is
||P (cid:48)|| + ||R(cid:48)|| + ||B(cid:48)||
||P ∗|| + ||R∗|| + ||B∗|| ≤ ||P (cid:48)|| + ||R∗|| + ||B∗||
This ratio is maximal when ||P ∗|| = 0, in which case we get exactly the same ratio as above, when
no purple edges are present.

||P ∗|| + ||R∗|| + ||B∗|| ≤ ||P (cid:48)|| + 2||R∗||

||P ∗|| + 2||R∗|| ≤ ||P ∗|| + (2 + ρ)||R∗||
||P ∗|| + 2||R∗||

.

We note that A cannot be a c-approximation for any c < 1 + 1√3 ≈ 1.58 (a counterexample is
shown in Figure 7). Hence our approximation analysis is tight if the Gilbert-Pollak conjecture is
true. It is possible that a PTAS exists for our problem, but it is not clear whether the techniques
of Arora [6] or Mitchell [24] for the Euclidean traveling salesperson problem can be applied, since
RBP spanning graphs are not planar, and the number of crossings of a single edge can be large.

12

Figure 7: A minimum RBP spanning graph and the RBP spanning graph on the same points
obtained by approximation algorithm A, resulting in an approximation factor that tends to 1+ 1√3
.

6 Extensions and Future Work

Line drawings. Motivated by LineSets [4], we could extend the ideas of this paper as follows:
given the set of red, blue, and purple points, we now wish to compute a minimum RBP spanning
graph such that the subgraphs induced by the red and blue sets contain a spanning paths. That
is, the red and purple edges form a path connecting all red and purple points, and the blue and
purple edges form a path connecting all blue and purple points (see Figure 8 (a)).

If we are interested in minimizing the total length, the problem becomes NP-hard, since it can
be seen as a generalization of the traveling salesman problem (TSP). Nonetheless, we can obtain a
(2 + ε)-approximation by independently computing an approximate TSP for the blue and purple
points and for the red and purple points, and simply taking the union. An approach similar to
the spanning tree case seems to fail and hence a better solution remains an open problem. The
question also remains open for points on a line or a circle.
Beyond purple. In this paper we considered the case where there are exactly two types of points,
leading to an input with red, blue, and purple points. In general, we might have k diﬀerent sets,
all denoted by primary colors. For instance, for k = 3 we could have red, blue, and yellow sets,
which leads to three secondary colors (purple, orange, green) and one tertiary color (black). The
objective is again to minimize the total length of a multi-colored spanning graph that has the
property that the subgraphs induced by the red, blue, and yellow sets are connected (see Figure 8
(b)).

The 2-approximation immediately generalizes to a 3-approximation (or a k-approximation for k
primary colors). We can improve on this by incorporating our (1+ 1
2 ρ)-approximation algorithm to
obtain a (2+ 1
2 ρ)-approximation
for k sets. Interestingly, our algorithms for points on a line or on a circle are not straightforward
to generalize; these problems remain open.

2 ρ)-approximation for three sets, or more generally a ((cid:100) 1

2 k(cid:101)+(cid:98) 1

2 k(cid:99) 1

(a)

(b)

Figure 8: (a) A set of red, blue, and purple points, and a graph that connects all red points in a
path and all blue points in a path. (b) A set of multicolored points representing red, blue, and
yellow sets, and a corresponding spanning graph.

Acknowledgements

F. H., M. K., V. S., and R. I. S. were partially supported by ESF EUROCORES programme
EuroGIGA, CRP ComPoSe: grant EUI-EURC-2011-4306, and by project MINECO MTM2012-

13

30951. F. H., V. S., and R.I. S. were supported by projects Gen. Cat. DGR 2009SGR1040 and
DGR 2014SGR46. M. K. was supported by ELC project (MEXT KAKENHI No. 24106008). M.L.
and B.S. were supported by the Netherlands Organisation for Scientiﬁc Research (NWO) under
project numbers 639.021.123 and 639.023.208, respectively. A. S. is supported by JSPS/MEXT
KAKENHI Grant Numbers 24500002, 25106503. R. I. S. was funded by Portuguese funds through
CIDMA and FCT, within project PEst-OE/MAT/UI4106/2014, by FCT grant SFRH/BPD/
88455/2012, and by Spanish MINECO through the Ram´on y Cajal program. T. T. is supported
by ELC project of Grant-in-Aid for Scientiﬁc Research on Innovative Areas 24106007, Grant-in-
Aid for Scientiﬁc Research (B) 40312631, Grant-in-Aid for Exploratory Research 24650001, JSPS
Grant Scientiﬁc Research (B) 15H02665, MEXT Japan, and Kawarabayashi Big Graph ERATO
project, Japan Science and Technology Agency.

References

[1] M. Abellanas, F. Hurtado, C. Icking, R. Klein, E. Langetepe, L. Ma, B. Palop, and V. Sacrist´an.
Smallest color-spanning objects. In Proc. 9th European Symposium on Algorithms, LNCS 2161, pages
278–289, 2001.

[2] P. K. Agarwal, H. Edelsbrunner, and O. Schwarzkopf. Euclidean minimum spanning trees and bichro-

matic closest pairs. Discrete Comput. Geom, 6:407–422, 1991.

[3] P. K. Agarwal, S. Govindarajan, and S. Muthukrishnan. Range searching in categorical data: Colored
range searching on grid. In Proc. 10th European Symposium on Algorithms, LNCS 2461, pages 17–28,
2002.

[4] B. Alper, N. Riche, G. Ramos, and M. Czerwinski. Design study of LineSets, a novel set visualization

technique. IEEE T Vis Comput Gr, 17(12):2259–2267, 2011.

[5] B. Alsallakh, L. Micallef, W. Aigner, H. Hauser, S. Miksch, and P. Rodgers. Visualizing sets and set-
typed data: State-of-the-art and future challenges. In Proc. Eurographics Conference on Visualization,
2014.

[6] S. Arora. Polynomial time approximation schemes for euclidean traveling salesman and other geo-

metric problems. J. ACM, 45(5):753–782, 1998.

[7] M. G. Borgelt, M. van Kreveld, M. L¨oﬄer, J. Luo, D. Merrick, R. I. Silveira, and M. Vahedi. Planar

bichromatic minimum spanning trees. J. Discrete Algorithms, 7(4):469–478, 2009.

[8] U. Brandes, S. Cornelsen, B. Pampel, and A. Sallaberry. Path-based supports for hypergraphs. J.

Discrete Algorithms, 14:248–261, 2012.

[9] P. Brass, W. O. J. Moser, and J. Pach. Research Problems in Discrete Geometry. Springer, 2005.

[10] K. Buchin, M. van Kreveld, H. Meijer, B. Speckmann, and K. Verbeek. On planar supports for

hypergraphs. J. Graph Algorithms Appl., 14(4):533–549,, 2011.

[11] H. Byelas and A. Telea. Towards realism in drawing areas of interest on architecture diagrams. Visual

Languages and Computing, 20(2):110–128, 2009.

[12] F. Chung and R. Graham. A new bound for Euclidean Steiner minimum trees. Ann. N.Y. Acad.

Sci., 440:328–346, 1986.

[13] C. Collins, G. Penn, and S. Carpendale. Bubble Sets: Revealing set relations with isocontours over

existing visualizations. IEEE T Vis Comput Gr, 15(6):1009–1016, 2009.

[14] K. Dinkla, M. van Kreveld, B. Speckmann, and M. A. Westenberg. Kelp Diagrams: Point set

membership visualization. Comput. Graph. Forum, 31(3):875–884, 2012.

[15] A. W. F. Edwards. Cogwheels of the Mind. John Hopkins University Press, 2004.
[16] E. Gilbert and H. Pollak. Steiner minimal trees. SIAM J. Appl. Math., 16:1–29, 1968.
[17] T. Graf and K. H. Hinrichs. Algorithms for proximity problems on colored point sets. In Proc. 5th

Canadian Conference on Computational Geometry, pages 420–425, 1993.

[18] N. Henry Riche and T. Dwyer. Untangling Euler diagrams. IEEE T Vis Comput Gr, 16(6):1090–1099,

2010.

[19] F. Hurtado, M. Korman, M. van Kreveld, M. L¨oﬄer, V. Sacrist´an, R. I. Silveira, and B. Speckmann.
In Graph Drawing, 21st International Symposium,

Colored spanning graphs for set visualization.
LNCS 8242, pages 280–291. 2013.

14

[20] A. Kaneko and M. Kano. Discrete geometry on red and blue points in the plane–a survey. In Discrete

Comput. Geom: The Goodman-Pollack Festschrift, pages 551–570, 2003.

[21] M. Kaufmann, M. van Kreveld, and B. Speckmann. Subdivision drawings of hypergraphs. In Graph

Drawing, 16th International Symposium, LNCS 5417, pages 396–407, 2009.

[22] W. Meulemans, N. Henry Riche, B. Speckmann, B. Alper, and T. Dwyer. KelpFusion: a hybrid set

visualization technique. IEEE T Vis Comput Gr, 19(11):1846–1858, 2013.

[23] J. S. B. Mitchell. Geometric shortest paths and network optimization. In Handbook of Computational

Geometry, pages 633–701, 1998.

[24] J. S. B. Mitchell. Guillotine subdivisions approximate polygonal subdivisions: A simple polynomial-
time approximation scheme for geometric TSP, k-MST, and related problems. SIAM J. Comput.,
28(4):1298–1309, 1999.

[25] D. M. Mount, N. S. Netanyahu, R. Silverman, and A. Y. Wu. Chromatic nearest neighbor searching:

A query sensitive approach. Comput. Geom. Theory Appl., 17(3–4):97–119, 2000.

[26] F. P. Preparata and M. I. Shamos. Computational Geometry: An Introduction. Springer, 1985.

[27] A. Schrijver. Combinatorial Optimization - Polyhedra and Eﬃciency. Springer, 2003.

[28] P. Simonetto and D. Auber. Visualise undrawable Euler diagrams.

In Proc. 12th Conference on

Information Visualisation, pages 594–599, 2008.

[29] G. Stapleton, P. Rodgers, J. Howse, and L. Zhang. Inductively generating Euler diagrams. IEEE T

Vis Comput Gr, 17(1):88–100, 2011.

[30] S. Tokunaga.

Intersection number of two connected geometric graphs.

Inform. Process. Lett.,

59(6):331–333, 1996.

[31] E. R. Tufte. The Visual Display of Quantitative Information. Graphics Press, 1983.

[32] W. Wu, H. Du, X. Jia, Y. Li, and S. C.-H. Huang. Minimum connected dominating sets and maximal

independent sets in unit disk graphs. Theoret. Comput. Sci., 352(1–3):1–7, 2006.

15

A Proof of Proposition 1

In this section, we present a problem instance for which the optimal solution contains a purple
edge that is crossed by Θ(n) other purple edges. Before giving the exact construction, we present
a relation between MST and RBP spanning trees, which we ﬁnd interesting on its own. Then
we describe the construction, we argue about parts of it, and ﬁnally prove that this construction
indeed satisﬁes our claim.

For simplicity in the exposition, in this section we assume that the points are in general
position: we require that there exist no two distinct pairs of points whose distances are equal
(i.e., ∀u, v, u(cid:48), v(cid:48) ∈ R ∪ B ∪ P it holds that d(u, v) = d(u(cid:48), v(cid:48)) ⇔ {u, v} = {u(cid:48), v(cid:48)}). This general
position assumption implies uniqueness of minimum spanning trees, and thus greatly simpliﬁes
the statements below. To satisfy the general position requirement, it suﬃces to do a symbolic
perturbation of the input. Alternatively, the general position requirement can be dropped if the
statement of Lemma 5 is slightly weakened to existence (rather than universality).

Given a problem instance (R, B, P ), let TR = M ST (R ∪ P ), and TB = M ST (B ∪ P ). Clearly,
not all edges of TR or TB need to be present in G∗ (see examples in Figure 2). However, in the
next lemma we show that most of them will.

We say that a subset S(cid:48) of R ∪ P is red-maximal if the subgraph of TR induced by S(cid:48), denoted

TR[S(cid:48)], satisﬁes the following properties:

1. TR[S(cid:48)] is connected,

2. all purple points of S(cid:48) are leaves of TR[S(cid:48)],

3. any leaf of TR[S(cid:48)] that is not purple is also a leaf of TR.

Intuitively speaking, a red-maximal subset S(cid:48) is a maximal subset in which all points are
connected in TR[S(cid:48)] through paths that never traverse purple points. The deﬁnition of blue-
maximal is analogous.

Lemma 5. If S(cid:48) is a red-maximal (resp. blue-maximal) subset with k purple points of a problem
instance, then the number of edges of TR[S(cid:48)] (resp. TB[S(cid:48)]) that are not in G∗ is less than k.

Proof. We prove the lemma for red-maximal subsets. Let E be the set of edges that are present
in TR[S(cid:48)] but not in G∗. In the following we give a process to reduce the size of E whenever it
has k or more edges. Since TR[S(cid:48)] is a tree, the removal of all edges in E will create at least k + 1
components. In particular, there must be a component C that has no purple edge. Let p ∈ C,

Figure 9: Proof of Lemma 5: if many edges of TR are missing in G∗, we can replace one edge and
obtain a RBP spanning graph of smaller weight. Edges of G∗ ∩ TR[S(cid:48)] are marked in solid, edges
of E are dashed, C is the gray region.

16

pqCFigure 10: Schematic view of the construction (left) and its optimal solution (right), with three
levels. Note that this is not to scale. The actual proportions are shown in Figure 11.

q ∈ S(cid:48) \ C be the two vertices that minimize the distance between points of C and those in S(cid:48) \ C.
It is well known [26] that pq ∈ TR[S(cid:48)]. Moreover, by deﬁnition of q, the edge pq cannot be in G∗,
thus pq ∈ E (see Figure 9).
Our aim is to replace some edge of G∗ by the edge pq. Recall that G∗[R ∪ P ] forms a tree,
hence there exists a unique path π = (p = v0, . . . , vm = q) connecting p and q in the red subgraph
of G∗. Let i be the smallest index such that vi (cid:54)∈ C (note that i < m since pq (cid:54)∈ G∗). We claim
that replacing edge vi−1vi by edge pq in G∗, we obtain another RBP spanning graph of smaller
weight, giving a contradiction.
By deﬁnition of p and q, and using the general position assumption, we have ||pq|| < ||vi−1vi||.
Thus, it remains to prove that this modiﬁcation indeed preserves the RBP spanning property.
Recall that, by hypothesis, all points of C are red, thus the removal of edge vi−1vi can only aﬀect
the spanning property of the red subgraph of G∗. By removing this edge, p and q must belong to
two diﬀerent components (since that edge was part of the only path connecting them). Thus, by
adding the edge pq we reconnect the two components as desired.

Description of the construction. The construction has two parts. At a global level it consists
of points located as illustrated in Figure 10 (left).

Let pN = (x0, y0) be any point in the plane, let C0 be the unit circle centered at pN , and let
pc be the bottom-most point of C0 (i.e., pc = (x0, y0 − 1)). Now deﬁne another unit circle C, with
center (x0, y0 − ε0), for a suﬃciently small ε0 > 0. We give more details on how to choose ε0
later in this section. Note that the lower semicircle of C lies outside C0. We place most points on
the lower semicircle of C, as shown in the ﬁgure. Let pW and pE be two points with the same
y-coordinate on the lower semicircle of C. Their exact position is not really important, although
some remarks about it are given later.
In the construction we place 2(m+1) purple points on C, in pairs with the same y-coordinate, for
any odd value of m ≥ 1. On the arc of C going counterclockwise from pW towards pc, purple points
are named pW = q0, q1, . . . , qm, while on the opposite arc, they are named pE = r0, r1, . . . , rm.
Four “consecutive” purple points qi, ri, qi+1, ri+1 form a trapezoid deﬁning what we call a level.
There are m levels in total. For each level, on the circular arc of C going counterclockwise from qi
to qi+1 (and, respectively, from ri+1 to ri) we place a chain of red or blue points, one color per side
(see Figure 10). Each chain has its points very close to each other, so that in any optimal solution
they will be connected by edges of their same color. For the sake of simplicity, it is possible to
think of the two chains as having the same number of points, although this is not necessary for
the construction to work. Colors between consecutive levels alternate sides.

The exact location of qi and ri needs to be chosen carefully to guarantee that the optimal
RBP spanning tree is as needed. The main properties of the construction are the following: (i)
pN is closer to qi and ri than to qi+1 and ri+1, and (ii) edge qiqi+1 is longer than half of the edge

17

pNpSpEr1q2r2q1pWr3q3pcCpNpSpEr1q2r2q1pWr3q3qiri. To guarantee the latter, qi+1 is placed at the intersection of two circles: C and the circle
centered at qi with radius half of the length of qiri plus ε, for a small constant ε > 0. This latter
property is essential to argue about the optimal spanning graph of a single level. Figure 11 shows
the construction with proportions that satisfy these requirements. More precisely, it shows the
ﬁrst level. Additional levels are nested recursively in the bottom side of the trapezoid, using line
segment q1r1 instead of pW pE.

Figure 11: One single level of the main construction drawn with the right proportions. The key
properties of the construction are shown on the right. More levels can be added recursively below
line segment q1r1.

In this way, if ε0 is small enough it holds that pc lies below all the four points of the trapezoids

of all levels.

Once the m levels have been added, we insert an additional purple point pS located vertically
below pc, so that ||pcpS|| = ||pN pc||, i.e., at position (x0, y0 − 2 − 2ε0). By construction of the
points qi and ri, we have ||pN νi|| + ||pSηj|| > ||pN pS|| for any ν, η ∈ {q, r} and 0 ≤ i, j ≤ m. We
complete the construction with two chains of red and blue points connecting pN to pE, and qm to
pS, respectively.

One last technical detail concerns the choice of ε0. The only condition on this value is that it
should be small enough as to guarantee that y(qm) > y(pc). Given that by construction ε0 = 0
always leaves a gap between y(qm) and y(pc), it is always possible to choose a suitable ε0 > 0
maintaining that condition.

Figure 10 (right) shows a RBP spanning tree that, we claim, is the only optimal solution for
this conﬁguration of points. Note that the vertical purple edge is crossed by all the other horizontal
purple edges, thus proving Proposition 1.

In order to prove Proposition 1, we ﬁrst argue about the optimal RBP spanning graph for the

subproblem of the points within the levels.

Lemma 6. The optimal solution for all points with y-coordinates between those of pW and qm
consists of all horizontal purple edges qiri plus all chains of short red/blue edges, as shown in
Figure 10 (right).

Proof. First we argue about one single level, deﬁned by points qi, ri, qi+1, ri+1. Refer to Figure 10
(right). One of the properties of the construction is that ||qiqi+1|| > 1
2||qiri||, implying ||qiqi+1|| +
||riri+1|| > ||qiri||. It is easy to verify that the shortest RBP spanning tree for one level is as
claimed: it uses both horizontal purple edges and connects all red/blue points on the circular arcs.

18

pNA)||qiqi+1||>12||qiri||B)||pNq0||+||pSqm||>||pNpS||pcC1)||pNqi||<||pNqi+1||,foralliC2)||pNri||<||pNri+1||,foralliMainproperties:pW=q0q1pE=r0r1pSD1)||pSpc||<||pSqi||,foralliD2)||pSpc||<||pSri||,foralliE)||pNpc||=||pSpc||CFigure 12: If ri−1 does not connect to qi−1 in G∗, then qi−1 must also be incident to a long edge
e that is useful only in the red tree. Thus, we can replace both edges by qi−1ri−1 and obtain a
tree of smaller weight.

To argue about all the levels, we apply an inductive argument bottom-up. Suppose the claimed
solution is optimal from level m up to level i. Now consider the problem from level m up to one
more level, i.e., i − 1. Assume that the points between qi and qi−1 are blue, and the ones between
ri and ri−1 are red.
Let S(cid:48) be the set containing qi−1, qi, and all blue points in between. By construction, the MST
of S(cid:48) is a path whose endpoints are qi−1 and qi, and in particular S(cid:48) is blue-maximal. By Lemma 5,
all of the edges of the path (except for at most one) will be present in any RBP spanning graph.
Thus, we can connect qi and qi−1 in blue by adding at most one edge whose length is arbitrarily
small. Likewise, we can assume that ri and ri−1 are connected through their intermediate red
points. If the resulting solution does not need one of those edges, then we can remove it, but the
total cost will only change by an arbitrarily small amount. Consider an optimal solution G∗ up
to level i − 1. We analyze two cases, depending on whether segment qiri is crossed by some edge
in G∗.
If qiri is not crossed in G∗, then we can partition the problem into two independent subprob-
lems: the trapezoid deﬁned by the four purple points qi, ri, qi−1, ri−1, and the points located on or
below the segment qiri. Since in both sub-problems the solution has the desired shape, we derive
that the union will also have the desired shape.

Thus, it remains to consider the case in which segment qiri is indeed crossed in G∗. By
Corollary 1, it can only be crossed by a purple edge, which must connect ri−1 or qi−1 to some
purple point below qiri. Assume without loss of generality that the crossing edge is of the form
νjri−1, where ν is either q or r, and j > i (see Figure 12). Recall that all points in the construction
(other than pN and pS) lie on a semicircle. Thus, by Lemma 4, ri−1 cannot be adjacent to another
purple point in G∗. Moreover, by Corollary 1, ri−1 cannot be adjacent to any red points other
than those between ri−1 and ri, and cannot be adjacent to any blue point.
In particular, the path connecting qi−1 with ri−1 must use edge νjri−1 on both red and blue
trees of G∗. Since G∗ is connected in the red subgraph, there must be an edge e in G∗ that
connects qi−1 to some other red vertex. In principle, the other vertex of e could also be purple,
but notice that such edge would only be needed for the red path (since we assumed that qi−1
can connect to qi through the blue points in between). The nearest possible vertex is qi, thus we
conclude that the length of e is at least ||qi−1qi||. Similarly, we have ||νjri−1|| > ||ri−1ri|| by the
way in which points qi and ri were placed.
Recall that one of the key properties of our construction is that ||qi−1qi|| + ||ri−1ri|| >
||qi−1ri−1||. Hence, if we replace those two edges by qi−1ri−1 we obtain a graph of smaller weight.
Moreover, this change cannot aﬀect the RBP spanning property: after we removed the edge νjri−1,
vertices qi−1 and ri−1 belong to diﬀerent components in both red and blue subtrees. The new
purple edge reintroduces the connectivity, thus we would obtain a RBP spanning graph of smaller
weight (a contradiction with the fact that the edge qiri is not used in a RBP spanning graph).

To complete the proof of Proposition 1, we consider now the full construction, including pN ,

pS, and the red and blue points between them and pE and qm, respectively.

Proof. (of Proposition 1) Consider the complete construction, as shown in Figure 10 (left). Recall
that C is a unit disk. We show below that the extra points do not aﬀect the optimal solution for

19

ri−1νjriqiqi−1ethe central construction. Note that in the construction, we can choose the y-coordinates of pW
and pE as low as desired provided that they are above y(pc). Moreover, notice that the cost of
the main construction associated with our solution (i.e. disregarding points pN , pS, and the two
paths connecting these points) decreases monotonically as we lower the y-coordinate of pW and
pE. Thus, by placing pW and pE with a suﬃciently low y-coordinate, the cost of our construction
can become arbitrarily small.

Now consider the extra points: observe that the cheapest way to connect all red points in the
path from pN to pE is to form a (red) path between them. Likewise, we obtain the same result
for the blue points from pS to qm. The cost of each of these paths is roughly 1 (slightly larger due
to ε0). Since we placed all points on the lower semicircle of C, outside C0, the purple points with
highest y-coordinates, pW and pE, are the ones closest to pN . Therefore pN must be incident to
an edge of length at least ||pN pE|| (or pN will not be connected in the blue subgraph). Further,
notice that pN must be a leaf in the blue subgraph (and pS in the red subgraph). This is due to
the fact that all other points are at distance less than 1 from each other, thus if pN had degree
two or more, one of the adjacencies could be replaced to obtain a graph of smaller length.

Recall that we placed our purple points so that ||pN ν|| + ||pSη|| > ||pN pS|| for any two purple
points η, ν, thus the edge pN pS is shorter than any other combination of edges emanating from
pN and pS. Any solution that adds extra edges to pN cannot be of minimal weight, since has extra
purple edges. Now we apply Lemma 5 to the set containing pE, pN , and all red points in between
(similarly, to qm, pS, and all blue points in between). These sets are red- and blue-maximal,
respectively, hence by Lemma 5 any optimal solution must connect them in red and blue paths,
respectively. As before, at most one edge may be missing in each of the paths; for simplicity in
the explanation, we keep such edge, since this can only create an arbitrarily small increase in the
total cost. That is, pN and pS must have exactly one additional edge (if the red and blue paths
are connected) or two edges (otherwise), and the cheapest way of doing so is by connecting pN to
pS directly. This construction has minimal weight, and is RBP spanning, thus the statement is
shown.

20

