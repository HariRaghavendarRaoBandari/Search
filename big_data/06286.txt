A GENERALIZED LDPC FRAMEWORK FOR ROBUST

AND SUBLINEAR COMPRESSIVE SENSING

Xu Chen and Dongning Guo

Department of Electrical Engineering and Computer Science

Northwestern University, Evanston, IL, 60208, USA

6
1
0
2

 
r
a

M
 
0
2

 
 
]
T
I
.
s
c
[
 
 

1
v
6
8
2
6
0

.

3
0
6
1
:
v
i
X
r
a

Abstract—Compressive sensing aims to recover a high-dimensional
sparse signal from a relatively small number of measurements. In this
paper, a novel design of the measurement matrix is proposed. The design
is inspired by the construction of generalized low-density parity-check
codes, where the capacity-achieving point-to-point codes serve as subcodes
to robustly estimate the signal support. In the case that each entry of
the n-dimensional k-sparse signal lies in a known discrete alphabet, the
proposed scheme requires only O(k log n) measurements and arithmetic
operations. In the case of arbitrary, possibly continuous alphabet,
an error propagation graph is proposed to characterize the residual
estimation error. With O(k log2 n) measurements and computational
complexity, the reconstruction error can be made arbitrarily small with
high probability.

I. INTRODUCTION

Compressive sensing aims to recover a high-dimensional sparse
signal from a relatively small number of measurements [1], [2].
There are two different designs of the measurement matrices: random
construction and deterministic construction. Convex optimization
approaches have been ﬁrst proposed to recover the noiseless signal
with O(k log(n/k)) random measurements [3]. Greedy algorithms
that involve lower complexity have been proposed [4]–[6]. However,
most of the algorithms that are based on random measurement matrix
design inevitably involve a complexity of poly(n).

error

control

Inspired by the

code designs, deterministic
structured measurement matrices have been proposed to reduce the
computational complexity to (near) linear time O(n) [7], [8]. In
practice, when the signal dimension is many thousands or millions,
even linear time complexity often becomes prohibitive. In response,
sublinear compressive sensing based on second order Reed-Muller
codes has been proposed, but
the reconstruction error was not
characterized [9], [10].

[12].

In those schemes,

the noiseless setting [11],

Recently, compressive sensing schemes with a novel design of
measurement matrix and sublinear recovery algorithms have been
developed, requiring O(k) measurements and arithmetic operations
under
the
into multiple groups and each group
measurements are split
is a sub-vector, which are linear combinations of
the same
set of signal components. Treating the measurement groups as
bins,
the design matrix basically hashes the signals to different
measurement bins, which is similar to the bipartite graph induced by
low-density parity-check (LDPC) code structure. In [11] and [12], the
measurement vector in each bin is designed to carry the signal support
information by leveraging the discrete Fourier transform (DFT)
matrix. The design has been extended to the noisy case, involving

O(cid:0)k log1.3 n(cid:1) measurements and computational complexity, with the

limitation that the signal entries must lie in a known discrete alphabet.
In this paper, we propose a generalized LDPC code inspired
compressive sensing scheme to further reduce the the number of
measurements required and computation complexity. The scheme

This work was supported in part by the National Science Foundation under

Grant No. CCF-1423040.

adopts the sublinear recovery algorithm framework in [11]. For
the measurement matrix design, the scheme also adopts the LDPC
structure to disperse the signal into measurement bins. The main
difference is that each measurement bin is a subcode, where some
recently developed capacity-achieving codes are utilized to encode
the signal support.

Speciﬁcally, this paper makes the following contributions. First, our
scheme is the ﬁrst to achieve nearly order optimal O(k log n) noisy
measurements and computational complexity for the case of known
discrete alphabet. Second, the previous design based on DFT matrix
is susceptible to quantization errors, while the proposed measurement
matrix consists of only {0, ±1} entries, which are easier and more
robust in practice. Third, we propose an error propagation graph
with error message passing rules to capture the error propagation
for the case of arbitrary signals with unknown alphabet. Analysis

shows that with O(cid:0)k log2 n(cid:1) measurements and complexity the

signal estimation error can be made arbitrarily small as k increase.
The proposed design and error propagation graph have potential
applications in sparse Fourier transform [13] and Walsh-Hadamard
transform with arbitrary signal alphabet [14].

II. SYSTEM MODEL

Suppose x ∈ Rn is a k-sparse vector. The problem is to recover

x from the m-dimensional (m ≪ n) measurement vector

y = Ax + z

(1)
where A ∈ Rm×n is the measurement matrix and z is the noise
vector with each entry being independently and identically distributed
(i.i.d.) Gaussian variables with zero mean and variance σ2.

Throughout the paper, we use bold capital letter and bold normal
letter to denote a matrix and a vector, respectively. Given a matrix
A, Aij denotes the entry located at the i-th row and j-th column,
and ai denotes the i-th column. Given i ∈ {0, ··· n − 1}, (i)2 is
the log n-bit binary representation of i with 0 and 1 mapped to 1
and −1, respectively. For example, n = 3, (2)2 = [1, −1, 1]. Let
sgn(x) = 1 if x ≥ 0 and sgn(x) = −1 otherwise.

III. MEASUREMENT MATRIX DESIGN

The LDPC inspired design of the measurement matrix is proposed
in [11], [12]. In particular, the measurement matrix is constructed as

(2)
where H ∈ {0, 1}b×n, G ∈ Rc×n and the ⊙ operator is deﬁned as

A = H ⊙ G

H0,0g0

H ⊙ G = 




The number of measurements is thus m = b × c. For example,

···
···
··· Hb−1,(n−1)gn−1

H0,(n−1)gn−1

Hb−1,0g0

...

...

.

(3)

y

0

x 
1

g + z
0

1

y

1

 

y

2

 

x
1

g + g

x

3 3

1

x
1

g + g

x

3 3

1

!

z

1

!

z

2

x y

3

g + z

3 3

3

x
1

x
3

Fig. 1: Example of the bipartite graph. Left nodes correspond to
signals and right nodes correspond to measurement bins. The left
nodes marked in red are nonzero signal components.

(cid:20)1

0

0
1

1

1(cid:21) ⊙(cid:2)g0

g1

g2(cid:3) = (cid:20)g0

0

0
g1

g2

g2(cid:21) .

(4)

In fact, H is inspired by the parity-check matrix of LDPC codes.
The relationship between the signal entries and the measurements
can be represented by a bipartite graph. In the bipartite graph, there
are n left nodes with xi corresponding to the i-th left nodes, and
b right nodes, which are also referred to as bins. The i-th left node
is connected with the j-th bin if Hij = 1. The measurement vector
, where

is thus grouped into b sub-vectors as y = hy†
yj ∈ Rc is the j-th bin value given by

0,··· , y†

b−1i†

yj =

n−1

Xi=0

Hijxigi + zj.

(5)

Fig. 1 illustrates the bipartite representation between signals and
measurements. In this paper, we construct H from the ensemble
is
of left d-regular bipartite graph Gd(k, b), where every signal
connected to d measurement bins uniformly at random.

The recovery algorithms adopts the framework proposed in [15].
The recovery algorithm calls for a robust bin detection, which can
1) identify if a measurement bin is connected to no nonzero signal
component (zeroton), to a single nonzero component (singleton) or
to multiple nonzero components (multiton); 2) robustly estimate the
signal index and value from singleton bins. It can be proved that by
some proper b = O(k), the recovery algorithm can correctly estimate
x with high probability if we have a robust bin detection. The key
challenge is how to design G to achieve robust bin detection.

In previous works [11], [12], [15], G is constructed based on the
DFT matrix. The signal index information i is embedded in the phase
difference between the entries of gi. In this paper, we propose a new
design of G, which only consists of {±1} entries and is more robust
to noise and quantization errors.
We motivate the design using a simpliﬁed setting. Assume 1) a
measurement bin j is known to be a singleton, 2) there is no noise,
and 3) the sign of the signal xi that is hashed to bin j is known.
The question is how can we design G to detect the signal index i
and its value? Let (i)2 be the log n-bit binary representation of i. If
gi = (i)2, then the signal index can be easily recovered based on the
signs of each entry in sgn(xi)yj = |xi|gi. A robust design of G
is to overcome the challenges posed by the three assumptions. First,
we let ¯gi to be an all-one vector such that the signs of xi can be
estimated. Second, ˜g is designed to be coded bits of (i)2 for robust
estimation of (i)2 under the noisy setting. The sub-vector length is
⌈log n⌉/R, where R is the code rate of the applied low-complexity
error-control code [16]. Third, we let
˙gi be a binary vector with

each entry generated according to i.i.d. Rademacher distribution for
singleton veriﬁcation.

In all, the i-th column of G consists of three sub-vectors:

gi = h˜g†

i , ¯g†

ii†
i , ˙g†

(6)

where ˜gi ∈ {±1}c0 , ¯gi ∈ {±1}c1 , and ˙gi ∈ {±1}c2 . Accordingly,
the measurement vector for bin j can be split into three sub-vectors:

yj = 


˜yj
¯yj
˙yj


 = 


i=0 Hijxi˜gi
i=0 Hijxi¯gi
i=0 Hijxi ˙gi

Pn−1
Pn−1
Pn−1


 +


˜zj
¯zj
˙zj


 .

(7)

In our design, we choose b = O(k), c = O(log n) and c =
O(log2 n) for signals with known discrete alphabet and arbitrary
alphabet, respectively.

In the bipartite graph, each measurement bin can be regarded as
a super check node where a subcode is further used to encode the
index information of the signals. The structure is similar to that of
generalized LDPC codes [17]. The well-established low-complexity
capacity-approaching point-to-point codes can serve as subcodes to
enhance the robust design.

IV. RECOVERY ALGORITHM DESIGN

We adopt the recovery algorithm framework proposed in [11].
The algorithm is implemented in an iterative “peeling” process. In
every iteration, a singleton bin is identiﬁed. The index and value
of the signal that is hashed to the singleton bin are estimated. The
contribution of the estimated signal to the other connected bins are
cancelled out (peeled off).

The main difference of our work lies in the signal support
estimation from a singleton bin, referred to as the singleton test,
which is described in Algorithm 1. In particular, for some xi that
is hashed to a singleton bin j, ˜gi ∈ {±1}c0 encodes the support
information (i)2. Suppose the signal sign estimation is correct, i.e.,
s = sgn(xi). Without noise, s˜yj = |xi|˜gi and thus sgn(s˜yi) is
exactly ˜gi. Under the noisy setting, some of the signs are ﬂipped
due to noise, which can be regarded as transmission over the
binary symmetric channel (BSC). With low-complexity codes used
as subcodes, (i)2 can be recovered by inputting sgn(s˜yi) to the
corresponding decoder with complexity O(c0) [16].

The overall recovery algorithm is described as follows.
First, run the singleton test on every bin using Algorithm 1. Let
L denote the set of estimated signal indices. Remove the declared
singleton bins.

Then, repeat the following until L = ∅:
• Select arbitrary i ∈ L and remove i from set L.
• For every remaining bin j with Hij = 1, perform the following:
1) Subtract the signal node i value from bin j: yj ← yj − ˆxigi.
2) Run the singleton test on the bin using Algorithm 1. If it is

a singleton, add the output index to L and remove bin j.

Algorithm 1 has a computational complexity of O(c), where
c = c0 + c1 + c2. Performing the singleton test on all b bin
takes complexity O(bc). In each subsequent iteration, we perform
Algorithm 1 only on every (remaining) connected bin of a recovered
signal component. Since the left-node degree is constant, each
iteration involves computational complexity of O(c). It will be
proved that
the algorithm terminates after O(k) iterations with
high probability. The computational complexity of all the iterations
involved is thus O(kc). With the choice of b and c,
the total

complexity is O(k log n) and O(cid:0)k log2 n(cid:1) for signals with discrete

alphabet and arbitrary alphabet, respectively.

Algorithm 1 Singleton test

Claim bin is a zeroton and return (i, zi) ← (∅, 0).

Input: Bin measurements, y = [˜y† ¯y† ˙y†]†.
Output: index and estimate, (i, zi).
if || ˙y||2 < c2(1 + τ )σ2 then
end if
Signal sign estimation: s ← sgn(¯g† ¯y).
Signal index estimation: i ← BSC-Decoder(sgn(s · ˜y)).
Singleton veriﬁcation:
˙g†
z′ ← 1
i ˙y.
if || ˙y − z′ ˙gi||2
Return i and

2 ≤ (c2 − 1)(1 + τ )σ2 then

c2

zi ← (cid:26)

else

1

c g†
i y

arg minz′∈X || ˙y − z′ ˙gi||2

arbitrary alphabet
discrete alphabet

Claim bin is multiton and return (i, zi) ← (∅, 0).

end if

e
2

"

e
1

#

 
$
&

g g

†
2 1

c

!
%
’

"

e
0

 
$
&

g g g g

†
1 0

†
2 1

c

c

g

!
%
’
 
#$
&

e

g

1 1

"

e
0

†
g g
1 0

#

c

 
$
&

"

e
0

e
1

e

0g

0

g g

†
2

0

#

c

!
%
’

"

1

e
0

g

0

†

1 0g g

c

!
%
’

e

0

e

0

0

Let m(i) be the measurement bin used to recover the signal index i.
Deﬁne the point error of xi as

ei = −c−1g†

i zm(i).

(9)

Then ei is a Gaussian variable with zero mean and variance σ2/c.
We will keep track of pi using the error propagation graph.

Let S(t) denote the signal indices that are recovered in the t-th
iteration. Consider the estimation of xi, i ∈ S(1). The measurement
vector of bin m(i) and the residual estimation error are given by

ym(i) = xigi + zm(i)

(10)
(11)
Consider the estimation for xi, i ∈ S(2). With the peeling of ˆxℓ,
ℓ ∈ S(1), the updated measurement vector of m(i) and the estimation
error become

pi = ei.

ym(i) = xigi + zm(i) + Xℓ∈S(1):Hℓ,m(i)=1
eℓ(cid:16)−c−1g†

pi = ei + Xℓ∈S(1):Hℓ,m(i)=1

eℓgℓ

i gℓ(cid:17) ,

(12)

(13)

i gℓ/c| ≤ 1 for every realization of G.

where |g†
The estimation error can be calculated recursively according to
some message passing rules over the graph. In particular, let pi be
the estimation error propagated from signal node i and qj ∈ Rc be
the error vector propagated from the measurement bin j. The errors
can be calculated according to the following rules:

pi = ei + Xj∈in(i)(cid:16)−c−1g†
qj = Xi∈in(j)

pigi,

i qj(cid:17)

(14)

(15)

Fig. 2: Error propagation graph for signal x2.

V. MAIN RESULTS AND PROOF

Theorem 1: Given any ǫ > 0, there exists k0 > 0 such that for
every k > k0 and every n-dimensional k-sparse signal x whose
entries take their values in a known discrete alphabet, the proposed
scheme achieves P{ˆx 6= x} < ǫ. The number of measurements
required is O(k log n). The computational complexity is O(k log n)
arithmetic operations.

Theorem 2: Given any δ, ǫ > 0, there exists k0 > 0 such that
for every k > k0 and every n-dimensional k-sparse signal x with
|xi| ≥ δ for every i ∈ supp(x), the proposed scheme achieves
P{supp(ˆx) 6= supp(x)} < ǫ and P{|ˆxi − xi|2 ≥ ǫ} < ǫ for every
i ∈ supp(x). The number of measurements required is O(k log2 n).
The computational complexity is O(k log2 n) arithmetic operations.
We focus on the proof of Theorem 2 due to space limitations.
Theorem 1 follows as a special case. Unlike signals from discrete
alphabet, the signal estimates have residual errors, which propagate
to later iterations due to the peeling process. In this paper, we propose
an error propagation graph to keep track of the accumulated errors.
An error propagation graph for xi is a subgraph induced by the
recovery algorithm, which contains the signal nodes that are estimated
in the previous iterations and have paths to xi. Fig. 2 illustrates the
the error propagation graph for x2.

Deﬁne the estimation error of xi as

pi = xi − ˆxi.

(8)

where in(i) denotes the indices of the measurement bins (signal
nodes) incoming to signal node (measurement bin) i.

By induction and the error message passing rules (14) and (15),
the error propagation effect is characterized by the following lemma.

Lemma 1: The estimation error of xi, i ∈ S(t), is calculated as

pi = ei + Xℓ∈∪t−1

j=1S(j)∩D(i)

P (ℓ,i)

Xp=1

eℓdℓ,p,

(16)

1g0g†

2g0 and d0,2 = c−2g†

where D(i) be the connected subgraph of
the bipartite graph
containing i, P(ℓ, i) is the number of paths from ℓ to i in D(i), and
dℓ,p is some coefﬁcient depending on both G and the path satisfying
|dℓ,p| ≤ 1.
Fig. 2 illustrates an example. The number of paths from x0 to x2
is P(0, 2) = 2, with the corresponding coefﬁcients being d0,1 =
−c−1g†
2g1. The number of paths from x1
to x2 is P(1, 2) = 1, with the coefﬁcients being d1,1 = −c−1g†
2g1.
We further bound the errors by leveraging results on random
hypergraph. The bipartite graph induced by H corresponds to a
hypergraph where the left nodes and right nodes represent hyperedges
and vertices. The hyperedge i is incident on vertex j if Hij = 1. Then
the random bipartite graph Gd(k, b) induces a d-uniform random
hypergraph.
[18] Suppose b/k is some constant large enough, then
Lemma 2:
with probability 1−O(1/k), Gd(k, b) contains only trees or unicyclic
components, and the largest component contains O(log k) signal
nodes.

that

Let EH denote the event

the bipartite graph satisﬁes the
condition as described in Lemma 2 with P{EH} = 1 − O(1/k).
We ﬁrst bound the detection error probability conditioned on EH.
Suppose EH holds, then P(i, j) ≤ 2, otherwise the component is not
unicyclic. Moreover the largest component D(j) contains O(log k)
signal nodes. Therefore, conditioned on G, pi is Gaussian distributed
with zero mean and the variance of can be upper bounded as

= O(cid:18)log k

σ2

c (cid:19) .

(17)

σ2
c

1 + Xℓ∈D(i)

P 2(ℓ, j)


var(pi) ≤ 
Lemma 3: Conditioned on that EH holds, given any δ > 0 and
|xi| ≥ δ, ∀i ∈ supp(x), the recovery algorithm can correctly
identity the signal support with probability 1 − O(1/n) with some
c = O(log2 n).
Proof: The support detection may be subject to zeroton, multiton
and singleton detection errors. The error probability of detecting
zerotons and multitons can be upper bounded by O(1/n) following
similar steps in [15] and is omitted due to space limitation. We focus
on the singleton detection.

Suppose the measurement vector of a singleton is given by

yj = xigi + wj ,

(18)

where the entries in wj are i.i.d. Gaussian variable with zero mean
and variance ˜σ2. Then the error probability of sign estimation is
calculated as

P{sgn(1† ¯y) 6= sgn(xi)} = P{1† ¯w/c1 ≥ |xi|}

= Q(√c1|xi|/˜σ),

(19)
(20)

where Q(x) is the Q-function for standard normal distribution.

Suppose the signs of xi is correctly detected and we want to detect
(i)2 by recovering the signs of ˜gi. By compensating the signs of xi
as sgn(xi)yj, the random transformation

sgn(|xi|˜gi) → sgn(|xi|˜gi + ˜wj )

(21)

From the recovery process, wj is the noise plus residual estimate

is equivalent to transmission over a BSC with crossover probability
less than Q(|xi|/˜σ) [14].
errors given by wj = zj + Pℓ∈in(j) pℓgℓ. According to (17), for
some c = O(cid:0)log2 n(cid:1) and a large enough n, the variance of wj
is dominated by that of zj. The entries of wj have a variance ˜σ2
bounded by some constant. Therefore, given that |xi| ≥ δ for some δ,
the worst-case SNR for every singleton estimation is lower bounded
by some constant. The error probability of sign estimation (19) is
O(1/n3) with some c1 = O(log n). Applying an error control code
of length c0 = log n/R with a low enough code rate R, (i)2 can be
decoded correctly with probability 1 − O(1/n3).
Note that if EH holds and the singleton, multiton and zeroton bins
are correctly estimated, the peeling decoder terminates by recovering
every nonzero signal entry [19]. Since there are at most O(k)
iterations and every iteration involves at most O(k) singletons, the
error probability can be upper bounded by O(k2/n3) = O(1/n)
using the union bound. Moreover, conditioned on that i is correctly
estimated, the probability that the singleton veriﬁcation is not passed
is equivalent to a zeroton detection error, which can be upper bounded
by O(1/n). The lemma is hence established.

Support recovery fails only if either EH does not hold or that a
bin detection error occurs conditioned on EH holds. By Lemma 2
and Lemma 3, the overall error probability of support recovery is
O(cid:0) 1

k(cid:1), vanishing as k increases.

n + 1

y
r
e
v
o
c
e
r
 
t
r
o
p
p
u
s
 
f

o

 
y
t
i
l
i

b
a
b
o
r
p

 
r
o
r
r

E

1

0.9

0.8

0.7

0.6

0.5

0.4

0.3

0.2

0.1

0

 
8

 

k= 30
k= 50
k=100
k=200

10

12

14

SNR (dB)

16

18

20

Fig. 3: Error probability of support recovery.

 

k= 30
k= 50
k=100
k=200

x 10−5

8

7

6

5

4

3

2

1

r
o
r
r
e

 

e
r
a
u
q
s
 

n
a
e
m
e
v
i
t

 

l

a
e
R

 
0
10

12

14

16

SNR (dB)

18

20

22

Fig. 4: Relative mean square error.

The error probability can be upper bounded as

P(cid:8)|xi − ˆxi|2 ≥ ǫ(cid:9) ≤ P{E c
≤ P{E c

H} + P(cid:8)|pi| ≥ √ǫ|EH(cid:9)
H} + 2Q(cid:18)r ǫc
log kσ2(cid:19)

(22)

(23)

where (23) follows because pi is Gaussian variable with zero mean
and variance upper bounded by (17) conditioned on EH and every
realization of G. By Lemma 2, the error probability (23) is smaller
than any ǫ with a large enough k and some c = O(cid:0)log2 n(cid:1). Hence,

Theorem 2 is established.

VI. SIMULATION

Throughout the simulation, we assume that the nonzero signal
amplitude is taken uniformly at random from [1, 10] and deﬁne
SNR = 1/σ2, which is the worst-case SNR. The signal dimension is
n = 1010. The number of measurement bins is chosen to be b = 3k.
We adopt a regular random LDPC code with rate 1/2 as subcode
to encode the signal support information, and thus c0 = 2 log n.
We let c1 = log n and c2 = 2 log n. Fig. 3 and Fig. 4 plot the
error probability of support recovery and relative mean square error,
respectively. The relative mean square error is only calculated and
averaged over the signals with their support correctly estimated. We
run 200 simulations for each SNR. In the simulation, for every
sparsity level k, the error-control code and nonzero signal entries
are generated once and ﬁxed.

Although analysis shows that c = O(cid:0)log2 n(cid:1) is sufﬁcient to

guarantee vanishing error probability, choosing c = O(log n) also
gives a good performance. The error probability of support recovery
and relative mean square error decreases as SNR increases. In order
to achieve more reliable signal recovery, we can adopt a more
sophisticated error-control code or a code with lower code rate.

REFERENCES

[1] D. L. Donoho, “Compressed sensing,” IEEE Transactions on Information

Theory, vol. 52, no. 4, pp. 1289–1306, 2006.

[2] E. Candes and T. Tao, “Near-optimal signal recovery from random
projections: Universal encoding strategies?” IEEE Transactions on
Information Theory, vol. 52, no. 12, pp. 5406–5425, 2006.

[3] E. J. Candes and T. Tao, “Decoding by linear programming,” IEEE
Transactions on Information Theory, vol. 51, no. 12, pp. 4203–4215,
2005.

[4] J. Tropp and A. C. Gilbert, “Signal recovery from random measurements
via orthogonal matching pursuit,” IEEE Transactions on Information
Theory, vol. 53, no. 12, pp. 4655–4666, 2007.

[5] D. Needell and J. A. Tropp, “CoSaMP:

recovery
from incomplete and inaccurate samples,” Applied and Computational
Harmonic Analysis, vol. 26, no. 3, pp. 301–321, 2009.

Iterative signal

[6] D. L. Donoho, Y. Tsaig, I. Drori, and J.-L. Starck, “Sparse solution of
underdetermined systems of linear equations by stagewise orthogonal
matching pursuit,” IEEE Transactions on Information Theory, vol. 58,
no. 2, pp. 1094–1121, 2012.

[7] W. Xu and B. Hassibi, “Efﬁcient compressive sensing with deterministic
guarantees using expander graphs,” in IEEE Information Theory
Workshop, 2007, pp. 414–419.

[8] P. Indyk and M. Ruˇzi´c, “Near-optimal sparse recovery in the l1 norm,”
in Annual IEEE Symposium on Foundations of Computer Science, 2008,
pp. 199–207.

[9] L. Applebaum, S. D. Howard, S. Searle, and R. Calderbank, “Chirp
sensing codes: Deterministic compressed sensing measurements for fast
recovery,” Applied and Computational Harmonic Analysis, vol. 26, no. 2,
pp. 283–290, 2009.

[10] R. Calderbank, S. Howard, and S. Jafarpour, “Construction of a large
class of deterministic sensing matrices that satisfy a statistical isometry
property,” IEEE Journal of Selected Topics in Signal Processing,, vol. 4,
no. 2, pp. 358–374, 2010.

[11] S. Pawar and K. Ramchandran, “A hybrid DFT-LDPC framework for
fast, efﬁcient and robust compressive sensing,” in Proc. Annual Allerton
Conference on Commun., Control, and Computing, Monticello, IL, 2012,
pp. 1943–1950.

[12] M. Bakshi, S. Jaggi, S. Cai, and M. Chen, “Sho-fa: Robust compressive
sensing with order-optimal complexity, measurements, and bits,” arXiv
preprint arXiv:1207.2335, 2012.

[13] S. Pawar and K. Ramchandran, “Computing a k-sparse n-length discrete
Fourier transform using at most 4k samples and o (k log k) complexity,”
in Proc. IEEE Int. Symp. Information Theory, Istanbul, 2013, pp.
464–468.

[14] X. Chen and D. Guo, “Robust sublinear complexity Walsh Hadamard
transform with arbitrary sparse support,” in Proc. IEEE Int. Symp.
Information Theory, Hong Kong, June 2015.

[15] X. Li, S. Pawar, and K. Ramchandran, “Sub-linear time support recovery
for compressed sensing using sparse-graph codes,” arXiv preprint
arXiv:1412.7646, 2014.

[16] A. Barg and G. Z´emor, “Error exponents of expander codes under
linear-complexity decoding,” SIAM Journal on Discrete Mathematics,
vol. 17, no. 3, pp. 426–445, 2004.

[17] N. Miladinovic and M. P. Fossorier, “Generalized LDPC codes and
generalized stopping sets,” IEEE Transactions on Communications,
vol. 56, no. 2, pp. 201–212, 2008.

[18] M. Karo´nski and T. Łuczak, “The phase transition in a random
hypergraph,” Journal of Computational and Applied Mathematics, vol.
142, no. 1, pp. 125–135, 2002.

[19] E. Price, “Efﬁcient sketches for the set query problem,” in Proceedings
the Twenty-Second annual ACM-SIAM Symposium on Discrete

of
Algorithms, 2011, pp. 41–56.

