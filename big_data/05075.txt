6
1
0
2

 
r
a

 

M
6
1

 
 
]

M
D
.
s
c
[
 
 

1
v
5
7
0
5
0

.

3
0
6
1
:
v
i
X
r
a

A linear complementarity based characterization of the

weighted independence number and the independent

domination number in graphs

Parthe Pandit

Ankur A. Kulkarni∗

Abstract

The linear complementarity problem is a continuous optimization problem that generalizes convex
quadratic programming, Nash equilibria of bimatrix games and several such problems. This paper
presents a continuous optimization formulation for the weighted independence number of a graph by
characterizing it as the maximum weighted ℓ1 norm over the solution set of a linear complementarity
problem (LCP). The minimum ℓ1 norm of solutions of this LCP is a lower bound on the independent
domination number of the graph. Unlike the case of the maximum ℓ1 norm, this lower bound is in
general weak, but we show it to be tight if the graph is a forest. Using methods from the theory of
LCPs, we obtain a few graph theoretic results. In particular, we provide a stronger variant of the
Lovász theta of a graph. We then provide suﬃcient conditions for a graph to be well-covered, i.e.,
for all maximal independent sets to also be maximum. This condition is also shown to be necessary
for well-coveredness if the graph is a forest. Finally, the reduction of the maximum independent set
problem to a linear program with (linear) complementarity constraints (LPCC) shows that LPCCs
are hard to approximate.

1 Introduction

This paper concerns a new continuous optimization formulation for the independence number of a graph.
An undirected graph G is given by the pair (V, E) where V is a ﬁnite set of vertices and E is a set of
unordered pairs of vertices called edges. Two vertices i, j ∈ V are said to be connected if there exists an
edge (i, j) ∈ E between them. Connected vertices are also called neighbours. An independent set of G
is a set of pairwise disconnected vertices and an independent set of largest cardinality called a maximum
independent set. The cardinality of the maximum independent set is called the independence number of
G denoted α(G).

Closely related are the concepts of maximality and domination. An independent set is said to be
maximal
if it is not a subset of any larger independent set. Clearly a maximum independent set is
maximal but the converse not true in general. A set S ⊆ V is a dominating set if every v ∈ V \S has
a neighbour u ∈ S. One can show that every vertex not in a maximal independent set has at least one
neighbour in the set, whereby maximal independent sets are also dominating sets.

Computing the independence number of a general graph is NP-complete, although it is known to
be solvable in polynomial time for some subclasses, such as claw-free graphs and perfect graphs [16, 6].
Computing the independence number is clearly a discrete optimization problem. However there are
several continuous optimization formulations for this quantity. Perhaps the most well known amongst
them is the result by Motzkin and Strauss [17] which shows that for a graph G with n vertices,

1

α(G)

= min{x⊤(A + I)x | e⊤x = 1; x ≥ 0},

where e is the vector1 of 1’s in Rn, A = [aij] is the adjacency matrix of G (i.e., aij = 1 if (i, j) ∈ E and
= 0 otherwise), and I is the n × n identity matrix. Among other continuous formulations, the ones by
Harant are noteworthy [9, 8]. Speciﬁcally, [8, Theorem 7] shows,

∗Parthe and Ankur are with the Systems and Control Engineering group at the Indian Institute of Tech-
They can be contacted at parthe.pandit@iitb.ac.in and

nology Bombay Mumbai,
kulkarni.ankur@iitb.ac.in, respectively.

India 400076.

1Throughout this paper, vectors are column vectors

1

α(G) = max{e⊤x −

x⊤Ax | 0 ≤ x ≤ e}.

1
2

For a given weight vector w ∈ Rn, the weight of a set S ⊆ V is the quantityPi∈S wi. The weighted

independence number denoted αw(G) is the maximum of the weights over all the independent sets, i.e.,

αw(G) := max(Xi∈S

wi | S ⊆ V is independent) .

Clearly α(G) is αe(G). This paper characterizes the weighted independence number of a graph in
terms of the linear complementarity problem (LCP). Given a matrix M ∈ Rn×n and q ∈ Rn, LCP(M, q)
is the following problem:

Find x = (x1, x2 · · · xn) ∈ Rn

such that

(1) x ≥ 0,
(2)

y = M x + q ≥ 0,
y⊤x = 0.

(3)

LCP(M, q)

Notice that due to the nonnegativity of x and y, the last condition is equivalent to requiring xiyi = 0 for
all i. This requirement is referred to as the complementarity condition. A vector x is said to be a solution
of LCP(M, q) if it satisﬁes the above three conditions. LCPs arise naturally in the characterization of
equilibria in bimatrix games and several other problems in operations research. We discuss this problem
class later in this paper.

For a simple graph2 G = (V, E) with |V | = n vertices, consider the LCP(A + I, −e), i.e.,

LCP(G)

Find x ∈ Rn such that x ≥ 0, (A + I)x ≥ e, x⊤(cid:0)(A + I)x − e(cid:1) = 0.

We refer to this as LCP(G) and its solution set as SOL(G). Let the characteristic vector of a set S ⊆ V
be denoted by 1S; it is the vector in {0, 1}n whose ith element is 1 iﬀ i ∈ S. It is easy to show that if
S∗ ⊆ V is a maximum independent set in G then 1S ∗ solves LCP(G). Consequently, we always have,

α(G) ≤ max{e⊤x | x solves LCP(G)}.

(1)

Our main result in this paper shows that the inequality in (1) is always tight, even for the weighted

independence number.

Theorem 1 For any simple graph G and weight vector w ≥ 0,

αw(G) = max{w⊤x | x solves LCP(A + I, −e)},

where A is the adjacency matrix of G, I is the identity matrix and e is the vector of 1’s in Rn.

To note why the above result is not obvious, consider the quantity β(G) deﬁned as the smallest size
of a maximal independent set in G (also known as minimum independent dominating set). One can show
that the characteristic vector of every maximal independent set solves LCP(G) (Lemma 4 in the next
section). Hence, analogous to (1),

β(G) ≥ min{e⊤x | x solves LCP(A + I, −e)}.

(2)

We show in Section 3.2 that this inequality is in general strict, however, equality is achieved when the
graph is a forest (i.e., graph that is a union of disjoint trees). Indeed we have the following theorem.

Theorem 2 For a forest G,

β(G) = min{e

⊤x | x solves LCP(A + I, −e)},

where A is the adjacency matrix of G, I is the identity matrix and e is the vector of 1’s in Rn.

2We consider only simple graphs, i.e., graphs without self loops which means aii = 0 for all i ∈ V .

2

1.1 Contributions

Our main contribution in this paper are centered around Theorem 1 and its consequences. We also
consider the analogous problem of the minimum ℓ1 norm of points in SOL(G) and its relation to β(G).
As mentioned above, unlike for the maximum ℓ1 (i.e. Theorem 1), the inequality in (2) is in general
strict; in fact the right hand side in (2) need not even be an integer. However, as indicated by Theorem
2, we show that this inequality is tight for forest graphs.

We perform a semideﬁnite programming (SDP) relaxation for the optimization problem resulting from
Theorem 1 to give a tighter version of the Lovász theta [15]. The optimization problem in Theorem 1
results in a more compact integer linear program (ILP) formulation for α(G) than previous edge-based
ILP formulations. The feasible lattice of this new ILP characterizes only the maximal independent sets
of the graph. An application of lift-and-project relaxations gives our improved Lovász theta variant.
Numerically we have veriﬁed that our variant is in general stronger than other Lovász theta variants that
employ the same number of constraints.

Graphs for which all maximal independent sets are of the same cardinality are called well-covered
graphs [20]. Using Theorem 1 and Theorem 2 we derive a new characterization for the well-coveredness
for forests: speciﬁcally, a forest G is well-covered if and only if e⊤x is constant for x ∈ SOL(G) (here too
the “if” direction is easy to see; the “only if” needs a proof).

Theorem 1 gives a characterization of the weighted independence number of a graph via a linear
program with (linear) complementarity constraints (LPCC). An LPCC in its most general form is written
as,

LPCC

maximize

x,y

c⊤x + d⊤y

subject to

Bx + Cy ≥ b,
M x + N y + q ≥ 0,
x ≥ 0,
x⊤(M x + N y + q) = 0.

Notice that a feasible pair (x, y) for the LPCC comprises of an x, that solves LCP(M, N y + q), and
another variable y that parametrizes this LCP, and the pair (x, y) must also satisfy an additional aﬃne
constraint Bx + Cy ≥ b. Clearly, taking N, C, B, b, d to be 0 vectors or matrices of appropriate dimension
gives a special case of the LPCC in which a linear function is maximized over the solution set of an LCP.
This precisely the structure of Theorem 1.

LPCCs generalize several problem classes including linear programming, and ﬁnding sparse (minimum
ℓ0 norm) solutions of linear equations. Their study is gathering momentum in the operations research
literature [11, 12] as new applications get discovered. Theorem 1 reveals weighted independence number
as another application. LCPs on the other hand are a widely and deeply studied problem class; see,
e.g., [18] and [4]. Theorem 1 brings in the possibility of using results from the theory of LCPs and
LPCCs to develop algorithms or bounds on the independence number. Indeed our results are obtained
by appealing to properties of LCPs.

Finally, the reduction of the independence number problem to an LPCC shows that for an LPCC
with n variables, it is NP-hard to approximate it within a factor of n1−ǫ of its optimal value (assuming
P 6= N P ) even for a strong class of problems with only binary data. This follows from the fact that
approximating the independence number is NP-hard due to a result by Håstad [10].

1.2 Organization of the paper

The rest of the paper is organized as follows. Section 2 elaborates on a few properties of LCP(G) and
recounts some background about LCPs. It is followed by the proof of Theorem 1 in Section 3. Section 4
derives results pertaining to our SDP relaxation, well-covered graphs and the complexity of LPCCs. The
paper concludes in Section 5.

2 Preliminaries

2.1 Background on LCPs

Much of what follows is standard and well-documented [4]; we recount it here for the beneﬁt of the
reader. Linear complementarity problems arise naturally through the modeling of several problems in

3

optimization and allied areas. As an example, consider a convex quadratic program:

QP

minimize

x

subject to

1

2 x⊤Qx + c⊤x
Ax ≥ b,
: λ
x ≥ 0,

where Q is symmetric and positive semideﬁnite matrix, and A and b are a matrix and a vector of
appropriate dimension. If λ denotes the vector of Lagrange multipliers corresponding to the constraint
“Ax ≥ b", from the Karush-Kuhn-Tucker conditions it is easy to derive that x solves QP if and only if
there exists λ such that,

(cid:18)x
λ(cid:19) ≥ 0, (cid:18)Qx + c − A⊤λ

Ax − b

(cid:19) ≥ 0, (cid:18)x

λ(cid:19)⊤(cid:18)Qx + c − A⊤λ

Ax − b

(cid:19) = 0.

This is clearly an LCP in the (x, λ)-space.

Another, famous, example comes from Nash equilibria of two person games. Consider a simultaneous
move game with two players and loss matrices A, B ∈ Rm×n. A Nash equilibrium [19] is a pair of vectors
(x∗, y∗) ∈ ∆n × ∆m such that,

(x∗)⊤Ay∗ ≤ x⊤Ay∗,

∀ x ∈ ∆n,

(x∗)⊤By∗ ≤ (x∗)⊤By,

∀ y ∈ ∆m,

where ∆k is the probability simplex in Rk, ∆k := {x ∈ Rk|Pi xi = 1, x ≥ 0}. Assuming A, B have

positive entries, by suitable transformations (see, e.g., [4, p. 6]), it can be shown that if (x∗, y∗) is a Nash
equilibrium, then (x′, y′), where,

x′ = x∗/(x∗)⊤By∗

y′ = y∗/(x∗)⊤Ay∗,

solves LCP(M, q) with,

M =(cid:18) 0 A
B⊤ 0(cid:19) ,

q = −e,

where e denotes a vector of 1’s in Rm+n. Conversely, if (x′, y′) solves LCP(M, q) then x∗ = x′/(Pi x′
and y∗ = y′/Pj y′

i)
j is a Nash equilibrium. More generally, certain equilibria of games involving coupled

constraints [14] also reduce to LCPs. For more applications, we refer the reader to [4].

LCPs may have unique, ﬁnitely many, inﬁnitely many or no solutions. In the case where it has a
solution, we say that the LCP is solvable. LCPs with rational inputs are known to be NP-complete [2]
(Theorem 1 also yields this as a corollary). Without the complementarity condition, i.e., requirement
(3) in the deﬁnition of LCP(M, q), an LCP amounts only to ﬁnding a feasible point for a set of linear
inequalities. Since the complementarity condition is equivalent to asking that ‘for all i, either xi = 0 or
(M x + q)i = 0’, one can equivalently reformulate the LCP as asking for an x that is feasible for at least
one out of 2n systems of linear inequalities. Speciﬁcally, if for some subset of indices S ⊆ {1, . . . , n}, if
x ∈ Rn satisﬁes the following linear inequalities,

x ≥ 0, y = M x + q ≥ 0,

xj = 0, ∀j /∈ S and yj = 0, ∀j ∈ S,

then clearly x solves LCP(M, q). Conversely, if x solves LCP(M, q) then one may take S = {i | xi > 0}
to verify the above inequalities. The hardness of an LCP arises from the exponential number of possible
choices for S. This also demonstrates that although an LCP is ostensibly a continuous optimization
problem, it implicitly encodes a problem of combinatorial character.

Results on LCPs concern questions such as existence, uniqueness, and boundedness of solutions, and
their stability to changes in the vector q, in addition to computation. A typical line of attack has been
to characterize classes of matrices M and vectors q for which the LCP(M, q) has the desired properties.
A vast variety of matrix classes have been analyzed; we refer the reader to [4] more on this topic.

2.2 LCP(A + I, −e) and its properties

For a graph G = (V, E) with vertices V = {1, . . . , n} we now study a few properties of LCP(G), i.e.,
LCP(A + I, −e) where A is the adjacency matrix of G, I is the n × n identity matrix, and e is the vector
of 1’s. We deﬁne the support of a vector x ∈ Rn as

σ(x) := {i ∈ V | xi > 0}.

4

For S, S′ ⊆ V , we denote by NS(S′) := {j ∈ S | ∃i ∈ S′ such that aij = 1}, the neighbourhood of set
S′ relative to S. For a singleton S′ = {u} we denote it by NS(u) and the subscript is dropped if S = V .
For x ∈ Rn, we deﬁne C(x) := (A + I)x and denote by Ci(x) the ith component of C(x). We call Ci(x)
the sum of the closed neighbourhood of i with respect to x. Clearly,

Ci(x) := xi +Xj∈V

aijxj = xi + Xj∈N (i)

xj.

Observe that vector x solves LCP(G) is equivalent to

(2)

(3)
(4)

(5)

x ≥ 0,
(AG + I)x ≥ e,

x⊤(cid:0)(A + I)x − e(cid:1) = 0.

⇔
⇔

⇔

xi ≥ 0,
Ci(x) ≥ 1,

∀ i ∈ V,

∀ i ∈ V,

xi(Ci(x) − 1) = 0,

∀ i ∈ V.

For the rest of the paper, the constraint xi = 0 or Ci(x) = 1 is called the complementarity constraint
for vertex i. Note that LCP(G) may have fractional solutions. For example if G is regular with degree
d, then x = e/(d + 1) solves LCP(G). We now study a few additional properties of the structure of the
LCP(A + I, −e). For a graph G, let V (G) denote the vertex set of G, and for a set S ⊆ V (G), let
GS denote the subgraph induced by S. For a vector x of size |V (G)|, denote by xS the corresponding
subvector of x indexed by vertices in S.

Lemma 3 Consider a graph G = (V, E) and the LCP(G) = LCP(A + I, −e), where A is the adjacency
matrix of G, I is the n × n identity matrix, and e is the vector of 1’s. Then,

(a) 0 /∈ SOL(G),

(b) C(x) ≥ x, ∀ x ∈ SOL(G),

(c) SOL(G) ⊆ [0, 1]n,

(d) If a graph G is a disjoint union of graphs G1 and G2, then, SOL(G) = SOL(G1) × SOL(G2).

(e) For a graph G, if x ∈ SOL(G), σ(x) is a dominating set of G.

(f ) For a graph G, if x ∈ SOL(G), then ˆx := xσ(x) ∈ SOL(Gσ(x)) and σ(ˆx) = V (Gσ(x)).

Proof :

(a) Clearly, Ci(0) = 0 for all i ∈ V , which violates (3). Thus 0 /∈ SOL(G).

(b) Let x ∈ SOL(G), then xj ≥ 0, ∀ j ∈ V . By deﬁnition Ci(x) = xi +Pj∈N (i) xj. Hence Ci(x) ≥ xi

for all i ∈ V with equality occurring only when xi = 1.

(c) Let x ∈ SOL(G) then xi ≥ 0. Now suppose xi > 1 for some i, then Ci(x) > 1 and (4) is violated.

Hence 0 ≤ xi ≤ 1.

(d) Let A, A1 and A2 be the adjacency matrices of G, G1 and G2 respectively. Let x ∈ SOL(G) and
let for i = 1, 2, x(i) and e(i) respectively denote the subvectors of x and e indexed by vertices in
Gi. Observe that since G is a disjoint union of two graphs, A is a block diagonal matrix with A1
and A2 as diagonal blocks.

Since x ∈ SOL(G), we have x ≥ 0, (A + I)x ≥ e and x⊤(cid:0)(A + I)x − e(cid:1) = 0. This means for i = 1, 2,
x(i) ≥ 0, (A + I)x(i) ≥ e(i) and x(i)⊤(cid:0)(A + I)x(i) − e(i)(cid:1) = 0, whereby x(i) ∈ SOL(Gi). Conversely,

if x(i) ∈ SOL(Gi) for i = 1, 2 then x = (x(1), x(2)) ∈ SOL(G). This proves the lemma.

(e) If x ∈ SOL(G), then by Lemma 3 (c) we have, 0 ≤ xi ≤ 1, ∀ i ∈ V . Hence 1

σ(x) ≥ x for all
σ(x)) ≥ Ci(x) ≥ 1. This means that every vertex not in σ(x) has at least one

i ∈ V , whereby Ci(1
neighbour in σ(x). This proves that σ(x) is a dominating set.

(f) Let x ∈ SOL(G) and ˆx := xσ(x), whereby ˆxi > 0 for all i ∈ σ(x). Hence for the graph Gσ(x),
σ(ˆx) = V (Gσ(x)) = σ(x). Moreover, notice that for a vertex i in Gσ(x), the sum of closed
neighbourhoods denoted by ˆCi(ˆx) = Ci(x), since all vertices i ∈ V (G)\σ(x) have xi = 0. Hence
for i in V (Gσ(x)) we have, ˆxi ≥ 0, ˆCi(ˆx) ≥ 1 and ˆxi( ˆCi(ˆx) − 1) = xi(Ci(x) − 1) = 0. Hence
ˆx ∈ SOL(Gσ(x)).

5

We now study a property associated with the integer solutions of LCP(A + I, −e).

Lemma 4 For a graph G = (V, E), a vector x is an integral solution of LCP(G) if and only if it is the
characteristic vector of a maximal independent set of G.

Proof : From Lemma 3 (c), we know that integer solution to LCP(G) is necessarily a binary vector and
hence it is the characteristic vector of some set contained in V .

Consider such a binary vector 1S for some set S ⊆ V . It always satisﬁes 1S ≥ 0. We ﬁrst show that
1S satisfying the complementarity constraint (5) is equivalent to S being an independent set. Next, we
show that, if S is independent, then 1S satisfying (4) is equivalent to S being a maximal independent
set. These claims together complete the proof.

First we note that S ⊆ V is an independent set if an only if the sum Pi∈SPj∈S aij = 0: If S
an independent set. Observe that this sum is in factPi∈V Pj∈V aij(1S)i(1S)j = 1⊤

is an independent set then aij = 0 for all i, j ∈ S and hence this sum is 0. Conversely, if this sum
vanishes, then all the terms aij appearing in it, being non-negative are necessarily zero whereby S is
S A1S. Since 1S is

1S = e⊤1S and hence 1S((A + I)1S − e) = 1⊤

S A1S. Hence,

binary, 1⊤
S

S is independent

⇐⇒

1⊤
S ((A + I)1S − e) = 0

⇐⇒

1S satisﬁes (5).

Finally, if S is an independent set, then Ci(1S) = 1, ∀ i ∈ S. Moreover Ci(1S) ≥ 1 for all i /∈ S
means every vertex not in S has at least one neighbour in S. Recall that this is a property of maximal
independent sets. Hence,

If S is independent and (A + I)1S ≥ e ⇐⇒ S is a maximal independent set.

This concludes the proof of the lemma.

As a consequence of Lemma 4, we have,

α(G) = max {e⊤x | x ∈ {0, 1}n ∩ SOL(G)}

and

β(G) = min {e⊤x | x ∈ {0, 1}n ∩ SOL(G)}.

The next lemma provides an upper bound on the ℓ1-norm of a solution of LCP(A + I, −e) if the support
of the solution contains a maximal independent set.

Lemma 5 If a maximal independent set of a graph G is contained in the support of a solution to LCP(G),
then the ℓ1 norm of the solution is upper bound by the cardinality of the set.

Proof : Let x be a solution of the LCP(G) such that ∃ S ⊂ σ(x), and S is a maximal independent set.
We have to show e⊤x ≤ |S|. Let U := σ(x)\S. Then, ∀ i ∈ σ(x),

Summing over i ∈ σ(x) gives,

Ci(x) =Xj∈V

aijxj + xi = 1.

e⊤x + Xi∈σ(x)Xj∈V

aijxj = |σ(x)| = |S| + |U |.

Thus,

|S| − e⊤x

(a)

(b)

= Xi∈SXj∈U
= Xj∈U
= Xj∈U

aij xj +Xi∈UXj
|NS(j)|xj +Xi∈UXj
|NS(j)|xj −Xi∈U

xi.

(c)

aijxj − |U |.

aij xj − |U |.

The equality in (a) follows from splitting the ﬁrst summation and applying aij = 0 for all i, j ∈ S.
To obtain the equality in (b) the order of summation in the ﬁrst term is interchanged. Equality (c) is
obtained by adding constraints Ci(x) = 1, ∀ i ∈ U .

6

Recall that for a maximal independent set S, every vertex not in S has at least 1 neighbour in S.

Hence |NS(x)| ≥ 1 for all i ∈ U . Hence we have,

e⊤x ≤ |S|,

∀ S ⊆ σ(x), such that S is maximally independent.

This proves the lemma.

Lemma 5 describes an upper bound for solutions containing a maximal independent set in their
support. If the graph G is a forest, i.e., a collection of trees then for every solution of the LCP(G) there
exists a maximal independent set in its support. This is proved later in Lemma 9.

The following lemma states a few results regarding SOL(G) when G belongs to a few speciﬁc classes

of graphs namely regular graphs, cliques and trees.

Lemma 6

(a) For a complete graph Kn over n vertices, SOL(Kn) = ∆n := {x ≥ 0 | e⊤x = 1}.

(b) For a forest G, if x ∈ SOL(G) and σ(x) = V (G) then G is a disjoint union of K1 or K2.

(c) For a forest G, if x ∈ SOL(G) then Gσ(x) is a union of K1’s and K2’s.

(d) For a regular graph Rn,d over n vertices with degree d, β(Rn,d) ≥ n

d+1 .

Proof :

(a) For a complete graph A + I = ee⊤, the matrix of all ones. Let x ∈ SOL(Kn), then the comple-
mentarity constraint simpliﬁes to x⊤e(e⊤x − 1) = 0. Since x ≥ 0 and 0 /∈ SOL(Kn) by Lemma 3
(a), x⊤e > 0. This implies x ∈ ∆n.
Observe that if the graph is Kn, Ci(x) = e⊤x for all x ∈ Rn. Let x ∈ ∆n, then x ≥ 0, C(x) = e,
whereby x ∈ SOL(Kn). Hence SOL(Kn) = ∆n.

(b) We ﬁrst show that if the graph is a tree and there exists a solution to the LCP with full support,
then the tree must be either K1 or K2. Consider a tree T 6= K1 or K2, and let x ∈ SOL(T ) with
σ(x) = V (T ), i.e., xi > 0 for all i ∈ V (T ). Then Ci(x) = 1 for all i due to the complementarity
constraint. Consider a leaf vertex i∗ of T and its neighbour j∗. Since T 6= K2, degree of j∗ ≥ 2.

Hence(cid:8)N (i∗) ∪ {i∗}(cid:9) ⊂(cid:8)N (j∗) ∪ {j∗}(cid:9), a strict subset. Hence we have, Ci∗ (x) < Cj∗ (x) which is

a contradiction. This proves the claim.
Now consider a forest G, and let T (i) be its ith connected component. Let x ∈ SOL(G) such that
σ(x) = V (G), and let x(i) denote the subvector of x indexed by vertices in T (i). By Lemma 3 (d),
we know that x(i) ∈ SOL(T (i)). Moreover σ(x(i)) = V (T (i)) for all components T (i) of G. Hence
T (i) is either K1 or K2, and (b) stands proven.

(c) For a forest G, let x ∈ SOL(G). From Lemma 3 (f ) we have, xσ(x) ∈ SOL(Gσ(x)) and σ(xσ(x)) =
V (Gσ(x)). Observe that Gσ(x) is also a forest. Hence it follows from Lemma 6 (b), that Gσ(x) is a
union of K1s and K2s.

(d) For a regular graph, (d, e) is an eigenvalue-eigenvector pair of the adjacency matrix. Hence

d+1 ∈
d+1 . Using Lemma 5 proves (d) since β(Rn,d) is

e

SOL(Rn,d) with σ( e
the cardinality of the smallest maximal independent set of Rn,d.

d+1 ) = V (Rn,d) and e⊤ e

d+1 = n

3 Main results

3.1 Proof of Theorem 1

For a vector of non-negative3 weights w ∈ Rn, let,

Mw(G) := max {w⊤x | x solves LCP(A + I, −e)}.

(6)

3It can be easily shown that for unconstrained w, αw(G) = α

w+ (G+) where G+ is the subgraph of G over vertices with

non-negative weights w+. Thus we only consider non-negative weight vectors w for the rest of the paper.

7

To reiterate the statement of the theorem – For a simple graph G,

αw(G) = Mw(G).

Proof of Theorem 1: We prove Theorem 1 by showing inequalities in both directions. From Lemma
4, for a simple graph G, the characteristic vector of every maximal independent set is a solution to the
LCP(G). The maximum weighted independent set S∗ being a maximal independent set4 gives a feasible
vector for the maximization problem (6). Hence,

αw(G) = w⊤1S ∗ ≤ Mw(G).

We show αw(G) ≥ Mw(G) by induction on the number of vertices n of G. For the graph G1 consisting
of a single vertex, the adjacency matrix is the scalar 0 and SOL(G1) = {1}. Thus the statement holds
for the base case n = 1.

Let us assume the induction hypothesis for all graphs with n < k vertices, i.e.,

αw(G) ≥ Mw(G), ∀ G = (V, E), such that |V | < k and ∀ w ≥ 0.

Let G∗ = (V ∗, E∗) be a graph with k vertices labelled V ∗ = {1, 2, · · · k}. Let x∗ ∈ SOL(G∗) be the
maximizer of (6), i.e., Mw(G∗) = w⊤x∗.

Case I: σ(x∗) = V ∗. Let the maximum weighted independent set be S, i.e., αw(G) = Pi∈S wi. Let

Sc = V ∗\S be its complement. The complementarity constraint on x∗ dictates (A + I)x∗ = e, i.e.,
∀ i ∈ V,

aijx∗

j + x∗

i = 1.

(7)

Ci(x∗) =Xj∈V

Hence,

wix∗

(d)

(e)

wix∗

wj x∗

wix∗
i

wiaijx∗
j ,

wiaij x∗
j ,

i +Xi∈S

Mw(G∗) = Xi∈S c

wi −Xi∈SXj∈V
j −Xi∈S Xj∈S c
j · Xi∈S

= Xi∈S c
i +Xi∈S
= αw(G∗) + Xj∈S c
= αw(G∗) − Xj∈S c
then substituting the resulting resulting expression for Pi∈S wix∗
i, j ∈ S andPi∈S wi = αw(G∗).
We now show an intermediate inequalityPi∈S wiaij − wj ≥ 0, ∀ j ∈ Sc. To prove this suppose the
contrary holds for some j∗ ∈ Sc, i.e.,Pi∈S wiaij∗ − wj∗ < 0. Now consider the set S′ = {S\NS(j∗)} ∪
wj∗ −Pi∈S wiaij∗ , a positive quantity, by assumption. This contradicts that S is a weighted maximum
independent set. HencePi∈S wiaij − wj ≥ 0, ∀ j ∈ Sc whereby, from (8),

Here (d) is obtained by multiplying each equation (7) by wi and adding these equations for i ∈ S, and
i . (e) follows from using aij = 0 for

{j∗}. Clearly S′ is an independent set. Moreover, the weight of S′ is greater than the weight of S by

wiaij − wj! .

(8)

x∗

Mw(G∗) ≤ αw(G∗),

as required.
Case II: σ(x∗) ⊂ V ∗, a strict subset. Let x∗

k = 0 without loss of generality. Let G∗

U be the subgraph of

Clearly y ≥ 0. Also for all i ∈ U ,

G∗ induced by U := V ∗\{k}. Let y,ew be vectors in Rk−1 such that yi = x∗

i and ewi = wi for all i ∈ U .

Ci(y) =Xj∈U

aij yj + yi =Xj∈U

i = Xj∈V ∗

aijx∗

j + x∗

aijx∗

j + x∗

i = Ci(x∗) ≥ 1.

Moreover for all i ∈ U ,

yi(Ci(y) − 1) = x∗

i (Ci(x∗) − 1)

(f )
= 0,

4This is true only since wi ≥ 0. One can easily construct a graph with unconstrained vertex weights such that the

maximum weighted independent set is not a maximal independent set.

8

where (f ) follows due to x∗ ∈ SOL(G∗). Hence y ∈ SOL(G∗

U ) and we have,

The inequality above holds since y is a feasible vector for the maximization program deﬁning M ew(G∗
U ) ≤ αw(G∗

U is a graph with < k vertices, the induction hypothesis dictates that M ew(G∗

U ).
U ).
U is an independent set in G∗ and

U is a subgraph of G∗, every independent set in G∗

Now since G∗
Moreover, since G∗
hence we have αw(G∗

Mw(G∗) = w⊤x∗ = ew⊤y ≤ M ew(G∗

U ).

U ) ≤ αw(G∗). Hence we have,

After considering two exhaustive cases, the inequality Mw(G∗) ≤ αw(G∗) is proved. This concludes

Mw(G∗) ≤ αw(G∗).

the proof of Theorem 1.

The uniform weighted version of Theorem 1 is stated below.

Theorem 7 For any simple graph G,

α(G) = max {e

⊤x | x ∈ SOL(G)} = max
x∈Zn

{e

⊤x | x ∈ SOL(G)},

where A is the adjacency matrix of G, I is the identity matrix and e is the vector of 1’s in Rn.

Recall that from Lemma 4, for a graph G = (V, E), with adjacency matrix A, the integer solutions
of LCP(A + I, −e) are characteristic vectors of maximal independent sets of G, whereby α(G) is the
maximum ℓ1 norm of binary vectors in SOL(G). The next section discusses the minimum ℓ1 norm of
points in SOL(G).

3.2 Minimum ℓ1 norm solution of LCP(G) and the independent domination

number

We now study a few properties of the minimum ℓ1 norm of vectors in SOL(G). We deﬁne,

m(G) := min {e⊤x | x ∈ SOL(G)}.

(9)

Interestingly, unlike the maximum ℓ1 norm, the minimum ℓ1 norm is not necessarily an integer. Recall
that for a simple graph G, β(G) is the size of the smallest maximal independent set. Hence by Lemma
4 we have,

β(G) = min {e⊤x | x ∈ SOL(G) ∩ {0, 1}n} ≥ m(G).

(10)

The inequality above is strict in general and we show that the gap is strict even for bipartite and
regular graphs. However equality is guaranteed if the graph is a forest (this is the claim of Theorem 2
we prove below).

Lemma 8 For a regular graph Rn,d with n vertices and degree d,

m(Rn,d) =

n

d + 1

.

Proof : Observe that n
Rn,d, then (d, e) is an eigenvalue-eigenvector pair and hence

d+1 is the ℓ1 norm of the vector

e

d+1 . Recall that if A is the adjacency matrix of

e

d+1 ∈ SOL(Rn,d). Hence,

m(Rn,d) ≤

n

d + 1

.

(11)

It can also be veriﬁed that

e

d+1 ∈ {x | x ≥ 0; (A + I)x ≤ e}. Hence,

n

d + 1

≤ max {e⊤x | x ≥ 0; (A + I)x ≤ e}

(g)
≤ min {e⊤x | x ≥ 0; (A + I)x ≥ e},

where (g) follows from LP duality. It is easy to see that m(Rn,d) ≥ min {e⊤x | x ≥ 0; (A + I)x ≥ e},
the LP relaxation of m(Rn,d) obtained after omitting the complementarity constraint. Hence we have,

m(Rn,d) ≥

n

d + 1

.

9

(12)

Equations (11) and (12) together prove the lemma.

Notice that Lemma 8 along with (10) gives an alternate proof for Lemma 6 (d). We now look at an

example where there is a non-zero gap between β(G) and the smallest ℓ1 norm of vectors in SOL(G).

Example 1. For k ∈ N, consider the cycle C6k+2, with vertex set V = {1, 2, . . . , 6k + 2} and edges
(i, i + 1) for 1 ≤ i ≤ 6k + 1, and (1, 6k + 2). This graph is a regular bipartite graph with degree 2. Using
Lemma 8 we have m(C6k+2) = 2k + 1/3. We now show that β(C6k+2) = 2k + 1.

Since β(C6k+2) is an integer lower bounded by 2k + 1/3 (by equation (10)), it suﬃces to show that
there is a maximal independent set of C6k+2 of size 2k + 1. Consider the set {1} ∪ {3i|1 ≤ i ≤ 2k}. It
can be veriﬁed that this set is maximally independent with cardinality 2k + 1. Hence we have,

β(C6k+2) = 2k + 1 > 2k + 1/3 = m(C6n+2).

(cid:3)

The above example shows that the gap between β and m is non-zero even for bipartite and regular

graphs.

3.3 Proof of Theorem 2

Theorem 2 says that the independent domination number of the graph, β(G), is indeed the minimum
ℓ1 norm of vectors in SOL(G), provided that the graph G is a forest. Before proving the theorem,
we ﬁrst state and prove an intermediate lemma that examines the structure of the solution set of the
LCP(A + I, −e) for forests.

Lemma 9 For a forest G = (V, E), if x ∈ SOL(G), then there exists a maximal independent set of G
contained in σ(x).

1), (u2, u′

Proof : Let G = (V, E) be a forest and x ∈ R|V |. Denote by Gσ(x) the subgraph of G induced by σ(x).
By Lemma 6 (c) we know that if x ∈ SOL(G), Gσ(x) is a union of K1’s and K2’s. Let the graph induced
by these resulting K1’s be denoted by G1 = (V1, ∅) and the graph induced by the K2’s be denoted by
G2 = (V2, E2) with edges E2 = {(u1, u′
m)}. Let U = {ui | i = 1, 2 . . . , m} and
U ′ = {u′
i | i = 1, 2 . . . , m}, whereby V2 = U ∪ U ′. For J ⊆ {1, 2, . . . , m} we denote UJ := {ui | i ∈ J}
and similarly for U ′
J .

Let W = V \(cid:8)V1 ∪ N (V1)(cid:9). And GW = (VW , EW ) be the subgraph of G induced by W . Observe

that GW is also a forest and VW is the disjoint union of U, U ′ and W ′, where W ′ is the set of vertices
in V with neighbours only in V2 but not in V1. Notice that 0 < xu < 1, ∀ u ∈ U ∪ U ′ since any such u
has exactly one neighbour that is also in σ(x). But since Cu(x) ≥ 1, ∀ u ∈ W ′, every vertex u ∈ W ′ has
at least two neighbours in U ∪ U ′. This implies that the number of edges in GW is at least m + 2|W ′|.
Since GW is a forest, m + 2|W ′| ≤ |W ′| + |U | + |U ′| − 1 = |W ′| + 2m − 1 which proves W ′ has at most
m − 1 vertices.

2), . . . , (um, u′

It is easy to see that if for some J ⊆ {1, 2, . . . , m}, UJ ∪ U ′

then(cid:8)V1 ∪ UJ ∪ U ′

constructing a maximal independent set of GW which is contained in V2 = U ∪ U ′. All neighbourhoods
in the rest of the proof are with respect to the forest GW .

J c(cid:9) is a maximal independent set of G contained in σ(x). Thus we prove the former by

J c is a maximal independent set of GW ,

Let u′

m−1(cid:9), where Um−1 := U \{um} and U ′

W in {Um−1 ∪ U ′

W (1) :=(cid:8)W ′\NW ′(um)(cid:9) ∪(cid:8)Um−1 ∪ U ′

For the forest GW , there exists a leaf vertex in V2 since every vertex in W ′ has degree at least two.
W of GW induced by
m}. Observe

m be the leaf vertex without loss of generality. Now consider the subgraph G(1)

W is now a forest with the property that vertices in (cid:8)W ′\NW ′ (um)(cid:9) have degree at least two,

that G(1)
whereby there exists a leaf vertex of G(1)
m−1}. Moreover, by construction, if M (1) is a
maximal independent set in G(1)
W then {um} ∪ M (1) is a maximal independent set in GW . Thus it now
suﬃces to ﬁnd a maximal independent set of G(1)
m−1. We can proceed in a similar
manner for k steps (say, k ≤ m − 1) by picking the neighbour of some leaf node at every step until the
induced subgraph of GW we are left with, G(k)
W , is a subgraph of G2. Choosing any maximal independent
set of G(k)
W and the previously chosen neighbours of leaf vertices gives a maximal independent set of GW
contained in V2. This concludes the proof.

W contained in Um−1 ∪U ′

m−1 = U ′\{u′

We now prove Theorem 2 which says that – For a forest G,

m(G) = β(G).

10

Let x∗ be the minimizer of (9). From Lemma 6 (c), since G is a forest,
Proof of Theorem 2:
Gσ(x∗) is a union of K1’s and K2’s. Let the graph induced by these K1’s be G1 = G1(x∗) and the graph
induced by K2’s be G2 = G2(x∗). We have that for all i in V (G1(x∗)), x∗
i = 1 and for all edges (i, j)
in G2(x∗), since Ci(x∗) = Cj(x∗) = 1 we must have 0 < x∗
j = 1. Hence
m(G) = e⊤x∗ = |V (G1(x∗))| + 1

i < 1, 0 < x∗

j < 1 and x∗

i + x∗

2 |V (G2(x∗))|

But from Lemma 9, we know that there exists a maximal independent set of G contained in σ(x∗)
2 |V (G2(x∗))|, whereby m(G) ≥ β(G). This along with (10) proves

such that its size is |V (G1(x∗))| + 1
the theorem.

4 Applications

Theorem 1 expresses the independence number as a linear program with complementarity constraints
(LPCC). In this section we use methods from the theory of LCPs to provide an upper bound for the
independence number and also give a suﬃcient condition for a graph to be a well-covered.

4.1 A strengthening of the Lovász theta

The Lovász theta [15], denoted ϑ(G), for a graph G is a polynomially computable upper bound on the
independence number obtained via semideﬁnite programming. The bound is tight for perfect graphs.
In this section we introduce a new quantity ϑ∗(G) that improves on ϑ(G). We ﬁrst brieﬂy introduce
semideﬁnite programming, then describe the Lovász theta bound. To achieve a strengthening of the
bound, we ﬁrst characterize the independence number using a more compact 0-1 ILP, and then obtain a
variant of the Lovász theta using semideﬁnite relaxations of the ILP.

For a graph G = (V, E) the traditional 0-1 ILP for the independence number α(G) maximizes the ℓ1

norm of characteristic vectors of all independent sets in a graph.

α(G) = max

x∈{0,1}n

e⊤x,

s.t. xi + xj ≤ 1,

∀ (i, j) ∈ E.

(edge-ILP)

It is easy to see that characteristic vectors of all independent sets including the empty set are feasible
for (edge-ILP). The convex hull of these characteristic vectors is called the stable set polytope of G and
is denoted by STAB(G).

Semideﬁnite programs (SDP) are convex optimization problems which generalize linear programs and
are eﬃciently solvable. They have been studied in detail [1, 23] and often result in tighter bounds for
ILPs than those obtained via LP relaxation. Lovász [15] provided a semideﬁnite relaxation for α(G). We
now brieﬂy describe semideﬁnite programs in their most general form and then state the SDP relaxation
by Lovász.

Let S n be the cone of symmetric positive semideﬁnite matrices in Rn×n. For n × n matrices X = [xij ]
j=1 xij yij. A semideﬁnite program in

and Y = [yij], their dot product is deﬁned as(cid:10)X, Y(cid:11) :=Pn

its most general form is the following convex optimization problem,

i=1Pn

max

X∈S n (cid:10)C, X(cid:11)
(cid:10)A⊤
i , X(cid:11) = bi

s.t.

i = 1, 2, . . . m,

(SDP)

where C and Ai are symmetric matrices in Rn×n, and bi are scalars. Given a vector x ∈ Rn and matrix

W ∈ Rn×n, let L(x, W ) :=(cid:20)1 x⊤

x W(cid:21) and diag(W ) := (w11, w22, · · · , wnn), the vector of diagonal elements

of W . The Lovász theta is given by the semideﬁnite program below,

ϑ(G) = max
X∈S n
s.t.

(cid:10)ee⊤, X(cid:11)
(cid:10)I, X(cid:11) = 1,

Xij = 0, (i, j) ∈ E(G),

(ϑ-SDP)

where I is the n × n identity matrix.
maximum ℓ1 norm over the following set,

It can be shown (see Chapter 3 in [7]) that ϑ(G) is also the

TH(G) :=nx | ∃ W ∈ S n, diag(W ) = x, L(x, W ) (cid:23) 0, wij = 0, ∀ (i, j) ∈ Eo.

(13)

11

This set is called the theta body of a graph G.

It is well known that TH(G) is convex and that
STAB(G) ⊆ TH(G) whereby α(G) ≤ ϑ(G). Variants of ϑ(G) have been explored ([7, Chapter 3] and [5])
where additional constraints are added to the semideﬁnite program to obtain stronger upper bounds than
ϑ(G) via SDP relaxations. One such modiﬁed theta body TH′(G) is obtained by adding constraints X ≥ 0
to (ϑ-SDP) (this constraint corresponds to W ≥ 0 in (13) [7]). The corresponding Lovász theta variant
is ϑ′(G). One can easily show that STAB(G) ⊆ TH′(G) ⊆ TH(G) and hence α(G) ≤ ϑ′(G) ≤ ϑ(G).

4.1.1 Compact 0-1 ILP for independence number

We now look at an new ILP formulation for the independence number of a graph G using properties of
LCP(G). The formulation maximizes the ℓ1 norm over maximal independent sets only unlike (edge-ILP)
where all independent sets are considered. For this we characterize the maximal independent sets of G
using linear inequalities. Recall that maximal independent sets of G are integer solutions of LCP(G). An
LCP(M, q) with a bounded solution set can be characterized by the following mixed integer linear pro-
gram (MILP) [13]. Speciﬁcally, if one knows a priori bounds r, r′ on kxk∞ and kM x + qk∞, respectively,
for all x in the solution set of LCP(M, q), this LCP is equivalent to:

Find x ∈ Rn

such that ∃ z ∈ {0, 1}n such that

(1) 0 ≤ x ≤ rz,
(2) 0 ≤ M x + q ≤ r′(e − z). MILP(M,q)

The next lemma modiﬁes this MILP characterization for LCP(G).

Lemma 10 For a graph G = (V, E), a vector x ∈ {0, 1}|V | solves LCP(G) if and only if,

0 ≤ (A + I)x − e ≤ (D − I)(e − x),

where A is the adjacency matrix of the graph, D is the diagonal matrix of degrees of G, I is the n × n
identity matrix and e is the vector of 1’s.

Proof : Observe that the inequalities in the statement of the lemma are in fact,

0 ≤ Ci(x) − 1 ≤ (di − 1)(1 − xi),

for all i ∈ V. Let x ∈ {0, 1}|V | satisfy the inequalities in the statement of the lemma. Clearly xi ≥ 0 and
Ci(x) ≥ 1. Moreover since xi ∈ {0, 1}, xi > 0 implies xi = 1 whereby the second inequality above forces
Ci(x) = 1. Hence we can conclude that xi(Ci(x) − 1) = 0. This implies x solves the LCP(G).

For the only if part of the lemma, let 1S ∈ SOL(G) implying S is a maximal independent set of G by
Lemma 4. By Lemma 3 (e) S is a dominating set whereby C(1S) ≥ e. Moreover since S is a maximal
independent set, it can be easily seen Ci(1S) − 1 ≤ (di − 1) for all i. This proves the lemma.

For the convenience of notation, let

MAXIS(G) := {x ∈ R|V | | 0 ≤ x ≤ e, 0 ≤ (A + I)x − e ≤ (D − I)(e − x)}

and

MAXISZ(G) := MAXIS(G) ∩ Z|V |.

Binary vectors in MAXISZ(G) are characteristic vectors of maximal independent sets of the graph and
vice versa from Lemma 4 and 10. After characterizing maximal independent sets by linear inequalities,
the following theorem states the 0-1 ILP formulation for computing the independence number.

Theorem 11 For a graph G with adjacency matrix A,

α(G) = max

x∈{0,1}n

⊤x,

e

s.t.

0 ≤ (A + I)x − e ≤ (D − I)(e − x),

(ILP*)

where D is the diagonal matrix of the degrees of the vertices, I is the n × n identity matrix and e is the
vector of 1’s.

Note that the above 0-1 ILP for α(G) is eﬃcient since it has O(n) constraints (independent of the
number of edges) as compared to O(|E|) constraints in (edge-ILP). The above ILP is now convexiﬁed
using lift-and-project method to obtain an upper bound on the independence number via SDP relaxations.

12

4.1.2 Lovász Schrijver relaxations

Given a binary lattice, the Lovasz Schrijver relaxation (Section 10.3 [3]) is a lift and project method to
approximate its convex hull. Let P = {x | F x ≥ b} for some matrix F and vector b and PZ := {0, 1}n ∩P .
First the linear inequalities F x ≥ b are converted to second order inequalities by performing the following
multiplications for i = 1, 2, · · · , n,

xi(F x − b) ≥ 0

and

(1 − xi)(F x − b) ≥ 0.

The second order terms in these inequalities are then replaced by new variables resulting in linear
inequalities in a higher dimensional space. This step is called the lifting step.

in a Rn+ n(n−1)

2

In the second order inequalities above, replacing x2

i by xi, and xixj by wij gives linear inequalities
dimensional space from the lifting step. The linearized inequalities are denoted by

W = [wij ] is a symmetric matrix. Now consider the two sets derived from P ,

(cid:10)eF , L(x, W )(cid:11) ≥ eb and the resulting linearized polytope by eP = {(x, W ) | (cid:10)eF , L(x, W )(cid:11) ≥ eb} where
M+(P ) = {(x, W ) ∈ eP | diag(W ) = x, L(x, W ) ∈ S n+1} and N+(P ) = {x | ∃ W ∈ S n, (x, W ) ∈ M+(P )}.

It is easy to see that M+(P ) is convex and N+(P ) being the projection of M+(P ) on the space of x is
also convex. This step is hence called the projection step. One can show the following (Section 10.3 [3]),

Let TH∗(G) := N+(MAXIS(G)) be obtained using the Lovasz Schrijver relaxation on (ILP*), i.e.,

conv (PZ) ⊆ N+(P ) ⊆ P.

(14)

TH∗(G) = {x | ∃ W ∈ S n, diag(W ) = x, L(x, W ) (cid:23) 0, (x, W ) ∈ P ∗},

where P ∗ is the linearized polytope derived from MAXIS(G) given by the inequalities,

xi(xj ) ≥ 0, =⇒ wij ≥ 0,

(1 − xi)(xj ) ≥ 0,

xi(1 − xj) ≥ 0,) =⇒ xi ≥ wij ,
xi(Cj(x) − 1) ≥ 0, =⇒ wij − xi +Xk∈V

(1 − xi)(1 − xj) ≥ 0, =⇒ wij + 1 ≥ xi + xj,

wikajk ≥ 0,

(15)

(16)

(17)

(18)

(19)

(20)

(1 − xi)(Cj(x) − 1) ≥ 0, =⇒ xj + xi − wij − 1 +Xk∈V
xi(dj(1 − xj ) − Cj(x) + 1) ≥ 0, =⇒ (dj + 1)(xi − wij ) −Xk∈V

(1 − xi)(dj (1 − xj ) − Cj(x) + 1) ≥ 0, =⇒ (dj + 1)(1 + wij − xj − xi) +Xk∈V

for all i, j in V . That is, P ∗ = {(x, W ) | diag(W ) = x, (15) − (21) hold}.

ajk(xk − wik) ≥ 0,

aikwik ≥ 0,

aik(wik − xk) ≥ 0,

(21)

Let ϑ∗(G) be the maximum ℓ1 norm on TH∗(G). We show in the following theorem that this Lovász

theta variant is a better upper bound for α(G) than ϑ′(G).

Theorem 12 For a graph G,

α(G) ≤ ϑ∗(G) ≤ ϑ′(G).

Proof : It suﬃces to show that conv (MAXISZ(G)) ⊆ TH∗(G) ⊆ TH′(G) since the quantities compared
in the statement of the theorem are the maximum ℓ1 norms on these sets.

From equation (14), we have,

conv (MAXISZ(G)) ⊆ N+(MAXIS(G)) := TH∗(G).

Now consider x ∈ TH∗(G), and a W such that (x, W ) ∈ M+(MAXIS(G)), i.e., diag(W ) = x, L(x, W ) (cid:23) 0
and (x, W ) ∈ P ∗.

Now, substituting j = i in (20) givesPk∈V aikwik ≤ 0, since wii = xi. Also, from (15) have wik ≥ 0.

This means,

wik = 0,

∀ (i, k) ∈ E

13

Thus x ∈ TH(G) with W having all entries non-negative whereby x ∈ TH′(G) implying

TH∗(G) ⊆ TH′(G).

This proves that ϑ∗(G) is a stronger upper bound of α(G) than ϑ′(G) and hence ϑ(G).

A similar convexiﬁcation of STAB(G) has been studied previously under the name N+(FRAC(G))
[3], where FRAC(G) is the LP relaxation of STAB(G). However it is computationally more expensive
since the linearized polytope has O(n3) constraints in the SDP as against O(n2) for TH∗(G). It remains
an open problem to compare N+(FRAC(G)) and TH∗(G).

4.1.3 Simulation results comparing Lovász theta variants

Denote by ϑFRAC(G) the maximum ℓ1 norm over the convex set N+(FRAC(G)). We computed ϑFRAC(G),
ϑ∗(G), ϑ′(G) and ϑ(G) for Erdős–Rényi graphs G(n,p); we were able to perform these simulations only
for n ≤ 25. In this model, a random graph over n vertices is chosen such that each edge is included
in the graph with probability p independent from every other edge. Table 1 shows the values of α(G),
ϑFRAC(G), ϑ∗(G), ϑ′(G) and ϑ(G) computed for twelve randomly chosen graphs against the parameters
of the distribution from which they were drawn. The simulations verify that indeed ϑ∗(G) ≤ ϑ′(G). They
also indicate ϑFRAC(G) ≥ ϑ∗(G). However, no comparison is known between the sets N+(FRAC(G))
and TH∗(G), and hence no conclusions can be drawn regarding the ordering of ϑFRAC(G) and ϑ∗(G) in
general. The simulations were performed using the MATLAB-SDPT3 package [21, 22].

Table 1: Comparison of variants of Lovász theta. G ∼ G(n,p).

(n, p)

(15,0.2)
(15,0.4)
(15,0.6)
(15,0.8)
(20,0.2)
(20,0.4)
(20,0.6)
(20,0.8)
(25,0.2)
(25,0.4)
(25,0.6)
(25,0.8)

α(G)

ϑFRAC(G)

7
7
6
5
9
8
8
9
11
11
10
11

7.0000
7.0006
6.0290
5.2650
9.1798
8.6916
8.4051
9.0412
11.2714
11.2339
10.2903
11.5396

ϑ∗(G)
7.0187
7.3052
6.0723
5.5226
9.3323
8.9087
8.5759
9.3934
11.6478
11.3933
10.3012
11.7890

ϑ′(G)
7.0669
7.3153
6.0993
5.5350
9.3496
8.9206
8.6100
9.4858
11.7194
11.3997
10.3120
11.8351

ϑ(G)
7.0771
7.3402
6.1320
5.5768
9.3863
8.9459
8.6306
9.4871
11.7337
11.4134
10.3457
11.9137

4.2 Well covered graphs

Recall that a graph is well-covered [20] if all its maximal independent sets are of the same cardinality.
A suﬃcient condition for a graph G to be well-covered is that e⊤x is constant for all x ∈ SOL(G) since
this means that all integral solutions of the LCP(G) have the same ℓ1 norm, i.e., the cardinality of all
maximal independent sets of G is equal. In general this is not a necessary condition for the graph to
well covered due to the gap in m(G) and β(G) – an example is the cycle C5 which is well-covered but
has ℓ1 norm = 2 for all integral solutions (all maximal independent sets are of size two). However since
C5 is also regular with degree two, LCP(C5) has a fractional solution e

3 , with ℓ1 norm = 5
3 .

However, if the graph is a forest, we have the following theorem.

Theorem 13 A forest G is well-covered if and only if e⊤x is constant for x ∈ SOL(G). Moreover, if G
has no isolated vertices e⊤x = 1

2 |V (G)| for all x ∈ SOL(G).

Proof : The if part of the theorem is easy and was discussion in the previous paragraph. For the only
if part of the theorem, let G be a well-covered forest, which implies α(G) = β(G). From Theorem 2 we
know that β(G) = m(G) and hence we have,

max{e⊤x | x ∈ SOL(G)} = min{e⊤x | x ∈ SOL(G)}.

This means the ℓ1 norm over the solution set of LCP(G) is a constant for a forest G to be well-covered.

14

A forest without isolated vertices is a bipartite graph. Both the partite sets of a bipartite graphs are
maximal independent sets. Hence a well-covered bipartite graph G is necessarily a balanced bipartite
graph and the cardinality of every maximal independent set is |V (G)|

. This proves the theorem.

2

We remark that well-covered graphs G for which each maximal independent set is of size 1
known as very well-covered graphs [20].

2 |V (G)| are

An LCP(M, q) is said to be w-unique if the vector w = M x + q is invariant over the solution set of
the LCP. We give a further suﬃcient condition for a graph to be well-covered based on the w-uniqueness
of LCP(G).

Lemma 14 If LCP(G) is w-unique, then e⊤x is constant for all x ∈ SOL(G), whereby G is well-covered.

Proof : Let LCP(G) be w-unique. Let x1 and x2 be solutions of LCP(G). Then by the complementarity
constraint, e⊤x1 − (x1)⊤(A + I)x1 = 0 and e⊤x2 − (x2)⊤(A + I)x2 = 0. Moreover, if LCP(G) is indeed
w-unique, then we have (A + I)x1 − e = (A + I)x2 − e. Consequently, (x1)⊤(A + I)x2 = e⊤x1 and
(x2)⊤(A + I)x1 = e⊤x2, implying that e⊤x1 = e⊤x2. This proves the suﬃciency of w-uniqueness for
e⊤x is constant for all x ∈ SOL(G).

4.3 Complexity of LPCCs

Theorem 7 characterizes the independence number problem as an LPCC. This reduction proves that
solving a bounded LPCC with binary inputs is at least as hard as computing the independence number
in a simple undirected graph. Hence solving LPCCs are NP-hard in general. The theorem below uses
inapproximability results known for the independence number to comment on the inapproximability of
LPCCs. Given data vectors c, d, b, q ∈ Rn and matrices B, C, N, M ∈ Rn×n, consider an instance of an
LPCC as deﬁned in Section 1.1.

Theorem 15 For any ǫ > 0, unless P = N P , there is no polynomial time algorithm to approximate a
bounded binary LPCC over n variables within a factor of n1−ǫ of its optimal value.

Proof : Suppose that there exists a polynomial time algorithm to approximate a general LPCC given
to obtain a value larger than n1−ǫOPT where OPT is the optimal value of this LPCC. Consider the
LPCC with a single variable, i.e., x ∈ Rn and let c = e, q = −e and M = A + I for some graph G,
where A is the adjacency matrix of G, and all other parameters taken as 0. Then we have OPT = α(G).
This means that the assumed algorithm would give an approximation of the independence number of
the graph within the interval [n1−ǫα(G), α(G)] in polynomial time for any simple undirected graph. By
the theorem of Håstad [10], this means P = N P . Hence under the assumption P 6= N P there exists no
such algorithm and the statement of the theorem stands proven.

5 Conclusion

In this paper, a continuous optimization formulation for the weighted independence number of a graph
is studied. The weighted independence number is expressed as a linear program with complementarity
constraints, speciﬁcally, the maximization of a linear objective function over the solution set of a linear
complementarity problem (LCP).

We show that the maximum ℓ1 norm over all solutions of LCP(A+I, −e), where for a graph G, A is the
adjacency matrix, I is the identity matrix and e is the vector of ones in R|V |, is the independence number
of G. Integral solutions of this LCP correspond to characteristic vectors of maximal independent sets of
the graph. The minimum ℓ1 norm on the other hand is a lower bound of the independent domination
number of the graph. Although the bound is not tight in general, we show that the bound is tight if the
graph is a forest.

We then studied a few applications. The LCP provides a new ILP formulation for the independence
number and for the independent domination number of a graph which is more eﬃcient than the previously
known edge-based ILP. Performing semideﬁnite programming relaxations on this ILP, gives a stronger
variant of the Lovász theta. The characterization indicates a new suﬃcient condition for a graph to be
well-covered, i.e., a graph with all maximal independent sets of the same cardinality. Moreover, this
condition is shown to be necessary in the case of a forest. It is also inferred that solving LPCCs remains
not only hard to solve but also hard to approximate within a factor n1−ǫ of the solution for any ǫ > 0
even if the problem data is binary.

15

References

[1] S. Boyd and L. Vandenberghe. Convex Optimization. Cambridge University Press, New York, NY,

USA, 2004.

[2] S.-J. Chung. Np-completeness of the linear complementarity problem. Journal of Optimization

Theory and Applications, 60(3):393–399, 1989.

[3] M. Conforti, G. Cornuéjols, and G. Zambelli. Integer programming, volume 271. Springer, 2014.

[4] R. W. Cottle, J.-S. Pang, and R. E. Stone. The Linear Complementarity Problem. Academic Press,

Inc., Boston, MA, 1992.

[5] I. Dukanovic and F. Rendl. Semideﬁnite programming relaxations for graph coloring and maximal

clique problems. Mathematical Programming, 109(2-3):345–365, 2007.

[6] M. Grötschel, L. Lovász, and A. Schrijver. Relaxations of vertex packing. Journal of Combinatorial

Theory, Series B, 40(3):330–343, 1986.

[7] N. Gvozdenovic. Approximating the stability number and the chromatic number of a graph. 2008.

[8] J. Harant. Some news about the independence number of a graph. Discussiones Mathematicae

Graph Theory, 20(1):71–79, 2000.

[9] J. Harant, A. Pruchnewski, and M. Voigt. On dominating sets and independent sets of graphs.

Combinatorics, Probability and Computing, 8(06):547–553, 1999.

[10] J. Håstad. Clique is hard to approximate within n1−ǫ. In Foundations of Computer Science, 1996.

Proceedings., 37th Annual Symposium on, pages 627–636. IEEE, 1996.

[11] J. Hu, J. E. Mitchell, and J.-S. Pang. An LPCC approach to nonconvex quadratic programs.

Mathematical programming, 133(1-2):243–277, 2012.

[12] J. Hu, J. E. Mitchell, J.-S. Pang, and B. Yu. On linear programs with linear complementarity

constraints. Journal of Global Optimization, 53(1):29–51, 2012.

[13] M. Kojima and L. Tunçel. Some fundamental properties of successive convex relaxation methods

on lcp and related problems. Journal of Global Optimization, 24(3):333–348, 2002.

[14] A. A. Kulkarni and U. V. Shanbhag. On the variational equilibrium as a reﬁnement of the generalized

Nash equilibrium. Automatica, 48(1):45–55, 2012.

[15] L. Lovász and A. Schrijver. Cones of matrices and set-functions and 0-1 optimization. SIAM Journal

on Optimization, 1(2):166–190, 1991.

[16] G. J. Minty. On maximal independent sets of vertices in claw-free graphs. Journal of Combinatorial

Theory, Series B, 28(3):284–304, 1980.

[17] T. S. Motzkin and E. G. Straus. Maxima for graphs and a new proof of a theorem of Turán. Canad.

J. Math, 17(4):533–540, 1965.

[18] K. G. Murty and F.-T. Yu. Linear complementarity, linear and nonlinear programming. Citeseer,

1988.

[19] J. Nash. Non-cooperative games. The Annals of Mathematics, 54(2):286–295, September 1951.

[20] M. D. Plummer. Well-covered graphs: a survey. Quaestiones Mathematicae, 16(3):253–287, 1993.

[21] K.-C. Toh, M. J. Todd, and R. H. Tütüncü. SDPT3—a matlab software package for semideﬁnite

programming, version 1.3. Optimization methods and software, 11(1-4):545–581, 1999.

[22] R. H. Tütüncü, K. C. Toh, and M. J. Todd. Solving semideﬁnite-quadratic-linear programs using

sdpt3. Mathematical programming, 95(2):189–217, 2003.

[23] L. Vandenberghe and S. Boyd. Semideﬁnite programming. SIAM review, 38(1):49–95, 1996.

16

