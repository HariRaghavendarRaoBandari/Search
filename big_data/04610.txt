Time-optimal Coordination of Mobile Robots along Speciﬁed Paths

Florent Altché2,1, Xiangjun Qian1 and Arnaud de La Fortelle1

6
1
0
2

 
r
a

 

M
5
1

 
 
]

O
R
.
s
c
[
 
 

1
v
0
1
6
4
0

.

3
0
6
1
:
v
i
X
r
a

Abstract— In this paper, we address the problem of time-
optimal coordination of mobile robots under kinodynamic
constraints along speciﬁed paths. We propose a novel approach
based on time discretization that leads to a mixed-integer linear
programming (MILP) formulation. This problem can be solved
using general-purpose MILP solvers in a reasonable time,
resulting in a resolution-optimal solution. Moreover, unlike
previous work found in the literature, our formulation allows
an exact linear modeling (up to the discretization resolution)
of second-order dynamic constraints. Extensive simulations are
performed to demonstrate the effectiveness of our approach.

I. INTRODUCTION

The deployment of autonomous mobile robots is expected
to bring major beneﬁts in many applications, and their
number is likely to grow dramatically in the next decades.
Therefore, the need to coordinate these robots, which means
ﬁnding a way for each robot to reach its target without
colliding with another, will become increasingly important.
A vast literature on motion planning, which generalizes the
problem of coordination, already exists (see e.g. [1]).

We consider the problem of optimally coordinating mul-
tiple robots along speciﬁed paths with variable speed under
kinodynamic constraints. The ﬁxed path assumption is no-
tably suited for structured environments, for instance traf-
ﬁc intersections or warehouses, where robots are generally
bound to navigate inside lanes or aisles. Various methods
exist to quickly ﬁnd a feasible solution to this problem,
and many of these (see e.g. [2]) make use of the so-called
coordination (or conﬁguration) space introduced in [3]. How-
ever, the optimal coordination problem is known to be NP-
hard [4], even in the absence of dynamic constraints, and few
methods exist to provide a good solution with a high number
of robots. As shown in [5],
this algorithmic complexity
stems from the implicit decision of choosing which of any
two potentially colliding robots should be ﬁrst, making the
problem inherently combinatorial with complexity scaling as
2N (N−1)/2 for N robots. Exhaustive enumeration could be
used for small instances (see e.g. [6], [7]), but would be
difﬁcult to scale up with a larger number of robots.

A possible way of handling this complexity is to prune
the corresponding decision tree by removing provably non-
optimal branches. Mixed-integer programming (MIP) is a
widely-used framework that allows efﬁcient handling of such
combinatorial problems. General MIP problems involving

1 MINES ParisTech, PSL Research University, Centre for robotics,
60 Bd St Michel 75006 Paris, France [florent.altche,
xiangjun.qian, arnaud.de_la_fortelle]
@mines-paristech.fr

2 École des Ponts ParisTech, Cité Descartes, 6-8 Av Blaise Pascal, 77455

Champs-sur-Marne, France

arbitrary functions are very hard, but good techniques ex-
ist for a subclass of these problems, called mixed-integer
second-order cone programming, or MISOCP [8]. In these
problems, a convex quadratic objective function is minimized
with quadratic positive semi-deﬁnite or afﬁne constraints. A
better-known subclass of MISOCP is mixed-integer linear
programming (MILP), where the objective function and
constraints are linear. These techniques have already been
applied to trajectory planning in general, and to the coordi-
nation problem in particular.

In [9], a MILP formulation is used to compute fuel-
optimal trajectories for multiple spacecrafts, while avoiding
collisions and exhaust gases from other crafts. However,
this model is inherently different from ours as paths are
not speciﬁed in advance in this formulation, leading to a
much higher computational complexity. On the opposite end
of the spectrum, Wang et al. [10] use MILP to ﬁnd an
optimal velocity proﬁle under piecewise-constant dynamic
constraints for a train on a ﬁxed path, but do not consider
conﬂicts with other trains.

In [11], a mixed-integer nonlinear program is used to
ensure safe separation of aircrafts evolving along ﬁxed paths,
with minimal deviation from an original ﬂight plan. Even
though dynamic constraints are not considered, nonlinearities
stemming from the euclidean distance constraints render
the problem very hard to solve in reasonable time, with a
practical limit of 4 aircrafts.

Peng and Akella [12] consider a problem almost identical
to ours. They propose to ﬁrst discretize robot paths into
collision-free and conﬂicting segments. In a second step,
by identifying the time instants when robots can enter and
exit collision segments, they formulate collision avoidance
constraints for every pair of robots into a nonlinear mixed-
integer problem. However, the dynamic constraints are non-
convex in this formulation, rendering the problem unsuitable
for general-purpose solvers. To handle this difﬁculty, addi-
tional constraints are introduced to transform the problem
into two linear subproblems that are solved as MILPs and
give an upper and lower bound for the solution, but the actual
optimal value is only approximated.

The problem of non-convexity of the dynamic constraints
is also encountered in [7], where authors propose a convex-
iﬁcation method using linearization along a reference speed.
However, this approximation underestimates the maximum
and overestimates the minimum acceleration, leading to a
sub-optimal solution.

Our main contribution in this paper is the introduction of
a new formulation of the optimal coordination problem as a
MILP by discretizing over time instead of space, and using

and bounded, such that vi ∈ [0, vi]. The state of robot i
is noted xi = (si, vi); we call trajectory of robot i the
(continuous) function mapping a given time t to the state of
i at time t, noted xi(t) = (si(t), vi(t)). Boldface x denotes
the vector (x1, x2, ...), representing the state of the multi-
robot system and x(t) is the system trajectory. To account
for the dynamic constraints on the robots, we assume that
the longitudinal acceleration ai of robot i is bounded to an

(cid:3) with ai < 0 < ai.

interval(cid:2)ai, ai

i with speed vin

We assume that robot i enters the coordination region at
i ∈ [0, vi], and is required to leave the
time tin
denote the
coordination region with speed vout
corresponding exit time. Note that vout
should be properly
chosen to avoid collisions outside of the coordination region.
For a pair of distinct robots i and j, we call collision set

; we let tout

i

i

i

j

] ×

between i and j, noted Cij ⊂ [0, sout
of positions (si, sj) inside the coordination region where i
and j would collide; we say that i and j are conﬂicting if
Cij (cid:54)= ∅.
To simplify the rest of the presentation, we assume that
the collision set between two vehicles is connected. If this
is not the case, all our results still hold provided every
connected component Cp
ij of Cij is considered individually.
Moreover, we approximate the exact collision set by a
(minimal) bounding polygon with edges either parallel to the
horizontal or vertical axis, or to the si = sj line. Under our
hypotheses, four possible types of conﬂicts can exist: robots
can follow one another throughout the coordination region
(a), or have crossing (b), merging (c) or diverging (d) paths,
as illustrated in Fig. 2. Note that cases (c) and (d) are not
mutually exclusive, and paths can merge and then diverge.

i

(cid:2)0, sout

(cid:3) the set

(a) Following paths

(b) Crossing paths

(c) Merging paths

(d) Diverging paths

Fig. 2.
Possible cases for the collision set between two conﬂicting
rectangular robots i and j (assuming paths intersect orthogonally). The
edges of Cij are straight lines with equations si = A, sj = B or
|si − sj| = C where A, B, C are constants.

We now deﬁne the time-optimal coordination problem as

follows.

Deﬁnition 1: The time-optimal coordination problem is
that of ﬁnding the optimal system trajectory x∗(t) minimiz-
ing the mean sojourn time 1
i ), under the
N
following constraints for every robot i:

(tout
i − tin

i∈N

(cid:80)

Fig. 1. Example of paths inside and outside the coordination region for a
two-lanes road intersection.

bounding polygons to transcribe safety requirements as linear
constraints. This formulation allows an exact linear modeling
of second-order dynamics up to the discretization resolution;
solving this problem gives optimal velocity proﬁles for the
robots under these constraints. For illustration purposes, we
use the mean sojourn time as the minimization objective, but
other optimization criteria could be chosen.

The paper is articulated as follows. In Section II, we
describe the modeling of the system of robots and the general
coordination problem, and we give some theoretical insights
on the problem from previous work in Section III. In Sec-
tion IV, we present our formulation of a MILP problem for
time-optimal coordination. This formulation is then validated
using computer simulation on the example of automated
vehicles in an intersection, as presented in Section V. Finally,
Section VI concludes the study.

II. PROBLEM STATEMENT

We consider a set N of N robots evolving on prede-
termined paths, and we assume that coordination between
robots is only needed inside a bounded region, which we call
the coordination region. In the case of automated driving,
for instance, coordination is mostly needed in the middle
of road intersections, as illustrated in Fig. 1, while vehicles
only need to keep a safe distance with the vehicle in front of
them when they are not in the intersection. In this example,
the coordination region would be chosen as the center of the
intersection, including a portion of the roads leading to, and
exiting from this center.

Each robot i ∈ N is supposed to follow a predetermined
path γi inside the coordination region. Using this assumption,
we need only consider the longitudinal comportment of the
robots. The dynamics of robot i are described as a double
integrator:

˙si = vi,
˙vi = ai,

(1)

where si the curvilinear position of robot i along its path, vi
its longitudinal velocity and ai its acceleration.

The origin of si is chosen so that si = 0 when the front of
the robot enters the coordination region, and si = sout
i > 0
when it fully exits the coordination region. si can therefore
be interpreted as the distance traveled by robot i inside the
coordination region. The velocity is assumed non-negative

CoordinationregionNorthWestEastSouthsisjCijsisjCijsisjCijsisjCiji ) = (0, vin
i )

˙si = vi ∈ [0, vi]
˙vi = ai ∈ [ai, ai]

• initial conditions: xi(tin
• kinematics:
• dynamics:
• safety: for all t ≥ tin
(si(t), sj(t)) /∈ Cij
• liveness: there exists tout
• exit speed: vi(tout

) = vout

.

i

i

i

and for every robot j (cid:54)= i,
) = sout

i < +∞ so that si(tout

i

i

in the above deﬁnition,

Note that
xi(tin
replaced by a ﬁxed initial state constraint xi(0) = (s0

the initial condition
i ) corresponding to a ﬁxed entry time can be
i ).

i ) = (0, vin

i , v0

III. THEORETICAL ANALYSIS

For an arbitrary pair of robots with non-empty collision
set, one necessarily passes before the other to avoid col-
lisions. For two conﬂicting robots i and j and a given
collision-free system trajectory, we say that i has priority
over j if i goes before j, and we note i (cid:31) j. The collection
of all priorities for all pairs of robots can be encoded as a
priority graph where robots are the nodes and priorities are
directed edges. It has been shown in [5] that such priority
graphs can be bijectively mapped to homotopy classes of
trajectories for the multi-robot system. For a given continu-
ous optimization criterion, there exists at least one optimal
trajectory in any non-empty homotopy class. The global
optimal trajectory x∗(t) can then be found by enumerating
all optimal trajectories for all priority graphs.

Therefore, the time-optimal coordination problem has both
a discrete (enumerating all priority graphs) and a continu-
ous part (optimizing the trajectories of every robots under
assigned priorities, which is a continuous optimal control
problem). The discrete part of the problem is combinatorial
since, for N robots inducing p pairs of conﬂicts, there are up
to 2p possible priority graphs. In general, p can be as high
as 1
2 N (N − 1); however, many of these graphs can be dis-
carded for poor performance or for being incompatible with
the robots entry times. For this reason, branch-and-bound
algorithms seem particularly well-suited to our problem as
they ﬁnd exact optima without needing to explore the whole
decision tree.

IV. TIME-OPTIMAL COORDINATION

Using the above theoretical results, we formulate the
time-optimal coordination problem as a mixed-integer linear
program (MILP) which can be solved by widely-available
solvers using branch-and-bound techniques.

A. Completed Collision Set

For conﬂicting robots i and j, we call completed collision
set Ci(cid:31)j
the set of conﬁgurations (si, sj) leading to a
collision or violation of priority i (cid:31) j; mathematically,
− × R+). Since we have approximated
Ci(cid:31)j = Cij + (R
each collision set Cij by a minimal bounding polygon with
edges parallel to the coordinate axes or to the si = sj lines,
the completed set Ci(cid:31)j is also a polygon with the same
properties. Note that if Cij is not connected, a completed
collision set has to be deﬁned for each connected component.

(a) Merging paths

(b) Corresponding collision set

Fig. 3.
case, and the corresponding values of S⊥
S⊥
ij (j) when j reaches B in Fig. 3a, and si = S
Similarly, si = S⊥
the lower-right boundary of the collision set is si ≥ sj + S

Illustration of the completed collision set Ci(cid:31)j in the merging
(cid:107)
ij (i), S
ij (i). sj =
(cid:107)
ij (i) when i reaches C.
ji(i) when i reaches B(cid:48). Also note that the equation for
ij (j).

(cid:107)
ij (i) and S

(cid:107)
ij (i) − S⊥

ij , S⊥

j

]

(cid:17)

(cid:111)

S⊥ij (i), sj

: sj ∈ [0, sout

To formulate safety requirements as linear constraints, we
ﬁrst deﬁne a partition of Ci(cid:31)j as C(cid:107)i(cid:31)j ∪ C⊥i(cid:31)j. C(cid:107)i(cid:31)j is the
subset of Ci(cid:31)j with boundary parallel to si = sj, and C⊥i(cid:31)j
the subset with boundary parallel to the si axis as illustrated
for the merging case in Fig. 3. Subset C(cid:107)i(cid:31)j is the set of
priority violations (or collisions) that could happen when j
should follow i, and C⊥i(cid:31)j is that of violations (or collisions)
that could happen when j should wait for i to pass. In
what follows, we note S(cid:107)ij(·) and S(cid:107)ij(·) the lower and upper
bounds of the projection of C(cid:107)i(cid:31)j on the s· axis (for · = i
(cid:110)(cid:16)
or j), and we deﬁne S⊥ij (·) and S⊥ij (·) similarly. However,
to ensure those subsets have empty intersection, we exclude
from C⊥i(cid:31)j. If either C(cid:107)i(cid:31)j or
C⊥i(cid:31)j is empty, we let the corresponding lower and upper
bounds be equal to 0; note that in this particular case, those
subsets formally do not form a partition.
An important remark is that C(cid:107)i(cid:31)j and C⊥i(cid:31)j are both
connected and left invariant by translation of a vector from
{0} × R+. Therefore, with this decomposition, if S(cid:107)ij(i) ≤
si ≤ S(cid:107)ij(i), condition (si, sj) /∈ Ci(cid:31)j is equivalent
to
sj ≤ si − aij where aij is a constant corresponding to
a following distance and a potential offset of curvilinear
abscissa. If S⊥ij (i) ≤ si < S⊥ij (i), condition (si, sj) /∈ Ci(cid:31)j
is equivalent to sj ≤ S⊥ij (j). If si is not in either of these
intervals, collisions or priority violations cannot occur. Note
that, if needed, a ﬁner decomposition could be used to better
approximate the exact shape of the collision set, by using
bounding convex polygons with edges having slopes different
than 0 or 1, and deﬁning one subset of Ci(cid:31)j per edge.
B. Discretization

If priorities have been chosen, ﬁnding the best trajectories
in continuous time and space is equivalent to a nonlinear
time-optimal control problem in a non-convex space, which
is usually difﬁcult to solve. Several authors, among which
[12] and [7], have used spatial discretization to overcome
this difﬁculty and formulate a simpler problem. In this setting

ijB0BCDS⊥ij=SkijsisjC⊥i(cid:31)jCki(cid:31)jCi(cid:31)jS⊥ij(i)S⊥ij(i)=Skij(i)Skij(i)S⊥ij(j)paths are divided into segments, and the average speed vavg
and occupancy time tocc for each robot in each segment are
chosen as variables. One of the major issues arising from
this discretization is that the second-order dynamics of the
robot imply nonlinear (and non-convex) relations between
the length (cid:96) of a segment and these two variables. Indeed,
these constraints are written as (cid:96) = vavgtocc which translates
to (cid:96) ≤ vavgtocc ∧ (cid:96) ≥ vavgtocc; one of those inequalities
deﬁnes a non-convex set in the (vavg, tocc) plane that has to
be approximated in order to be treated in most optimization
frameworks, thus degrading solution quality.

Instead of using spatial segments, we propose a temporal
discretization which, to the best of our knowledge, has not
yet been used to solve the coordination problem with a ﬁxed-
paths assumption. In what follows, we note τ > 0 the ﬁxed
duration of a time step; for an integer k ≥ 0 and a robot i,
we note sk
i = si(kτ ), and use similar notations for vi. We
note K the maximum number of time steps allowed in the
computation.

C. Variables

i and vk

Besides variables sk

i , we need to introduce a
few supplementary variables, all of them binary. For two
conﬂicting robots i and j, we let πij = 1 if and only if (iff)
i (cid:31) j, and for all time steps k we deﬁne several variables εij
that indicate if, at time step k, robots i and j have entered
and/or exited C⊥i(cid:31)j and C(cid:107)i(cid:31)j.
Speciﬁcally, we let ε•,in
ε•,out
ij
and we deﬁne similarly ε•,in
ε•,out
ij
We also introduce, for every robot, the variables µk
i ≥ 0 and σk

i ≥ S•ij(i) and
i ≥ S•ij(i), where • is either (cid:107) or ⊥,
j ≥ S•ij(j) and

i = 1
iff sk
, respectively indicating
if the robot has entered and exited the coordination region
at time step k.

j ≥ S•ij(j).

(i, k) = 1 iff sk

(i, k) = 1 iff sk

(j, k) = 1 iff sk

(j, k) = 1 iff sk

i = 1 iff sk

i ≥ sout

ij

ij

i

D. Objective function

As stated earlier, we wish to minimize the average sojourn
time, which is equivalent (since entry times are prescribed)
to minimizing the average exit times. Since our formulation
does not use time as a variable, we use

σk
i

(2)

(cid:88)

i=1...N
k=0...K

O =

1
N

for our objective function. O is the average number of time
steps spent after exiting the coordination region, which ap-
proximates (to the duration of a time step τ) the total amount
of time spent after exiting the coordination region, divided by
τ. More precisely, O = 1
i + 1) where
is the time step at which robot i exits the coordination
kout
i
region, and thus maximizing O is equivalent to minimizing
the average value of kout

i=1...N (K − kout

(cid:80)

N

.

i

E. Constraints

Many of the constraints needed for the coordination prob-
lem are conjunctions (noted ∧), or logical implications (⇒);

we use the binary variables introduced in the previous section
as indicators, and use a “big-M” formulation [13] to enforce
those constraints. In what follows, left-hand side terms are
variables, and right-hand side terms are problem parameters.
a) Binary variables: To ensure the additional binary
variables are set to the correct value, the following helper
conditions are enforced for all 0 ≤ k ≤ K, every robot
i ∈ N and every robot j ∈ N conﬂicting with i:

µk
i = 0 ⇒ sk
i = 1 ⇒ sk
µk
σk
i = 0 ⇒ sk
σk
i = 1 ⇒ sk
πij+πji = 1

i ≤ 0
i ≥ 0
i ≤ sout
i ≥ sout

i

i

(h1)
(h2)
(h3)
(h4)
(h5)

ij

ij

ij

(j, k), ε•,out

(i, k) and ε•,out

Constraints similar to (h1)-(h2) are used for ε•,in
(i, k),
ε•,in
(j, k), where • is either
ij
⊥ or (cid:107). Constraint (h5) ensures that exactly one of the
variables πij and πji is set to 1. Note that strict inequalities
cannot be enforced in a MILP framework; therefore, the
value of indicator variables is not speciﬁed at their point
of discontinuity with the above constraints. This limitation,
however, has little effect on the solutions.

b) Initial and terminal values, bounds: To account
for the values of the variables at the ﬁrst time step and
the different bounds on the problem, we use the following
boundary constraints for all 0 ≤ k ≤ K − 1 and every robot
i:

i = 0 ⇒ vk+1
µk
σk+1
i = 1 ⇒ vk

i = vin
i
i = vout
i
i tin
i

s0
i = − vin
sK
i ≥ sout
i
v0
i = vin
i
vk
i ∈ [0; vi]

(b1)
(b2)
(b3)
(b4)
(b5)
(b6)

i ) = (0, vin

Conditions (b1), (b3) and (b5) enforce the initial constraint
i ), (b2) the ﬁnal speed constraint, (b6)
xi(tin
enforces the bounds on speed and (b4) the liveness constraint.
c) Kinodynamic constraints: We assume that robots use
a constant acceleration during each time step. Under this
assumption, we enforce the kinodynamic constraints using
the conditions, for all 0 ≤ k ≤ K − 1 and every robot i:

τ(cid:0)vk+1

i + vk
i

(cid:1) = 0

1
2

i = 0 ⇒ sk+1
σk
i = 0 ⇒ vk+1
σk
i = 0 ⇒ vk+1
σk

i − sk
i − vk
i − vk

i −
i ≤ aiτ
i ≥ aiτ

(k1)

(k2)
(k3)

Condition (k1) enforces the kinematic constraints (under the
constant acceleration assumption); (k2) and (k3) account for
the dynamic constraints. Note that the constant acceleration
hypothesis could be relaxed in future work using more

general second-order cone programming, as

i − vk
xk

i τ +

yk
i −

2(ai − ai)

1

1

2

yk
i

≤

2

ai aiτ 2
2(ai − ai)
ai aiτ 2
2(ai − ai)

aiτ
ai − ai
aiτ
ai − ai
i −sk

ij

ij

yk
i

≥

i τ +

i = sk+1

yk
i −
i and yk

2(ai − ai)
i = vk+1

xk
i − vk
i . A justiﬁcation for
where xk
this extension can be found in [14] which shows that these
constraints exactly describe the set of reachable positions and
speeds under second-order integrator dynamics with bounded
acceleration in a given time τ.

i −vk

(s1)

πij = 1 ∧ ε(cid:107),in

(i, k) = 0 ⇒ ε⊥,in
(j, k) = 1 ∧ ε(cid:107),out

(j, k) = 1 ∧ ε(cid:107),out
sk+1
i − sk+1

d) Safety constraints: Using the previously-deﬁned in-
dicator variables ε and the results from Section IV-A, we
translate the safety constraints as follows: for every pair of
conﬂicting robots (i, j) and for all 0 ≤ k ≤ K − 1:
πij = 1 ∧ ε⊥,out
(j, k + 1) = 0
πij = 1 ∧ ε(cid:107),in
(i, k) = 0 ⇒
i − sk+1
sk+1
j ≥ aij (s2)
(cid:1)
(i, k) = 0 ⇒
i − vk+1

≥ aij (s3)
with aij = d(cid:107)+S(cid:107)ij(i)−S⊥ij (j), d(cid:107) being a following distance
(from front of the follower to rear of the leader) between
two robots. The term S(cid:107)ij(i)− S⊥ij (j) in aij accounts for the
potential offset in curvilinear position between two robots in
the case of merging paths (and vanishes in other cases), as
illustrated in Fig. 3. Condition (s1) can be phrased as “if i
has priority and has not yet passed the collision set, then j
cannot go in”. The additional condition (s3) is used to ensure
that no collision occurs between two time steps; for the same
reason, (s1) involves ε⊥,out

(cid:0)vk+1

(i, k) and ε⊥,in

(j, k + 1).

j +

ij
τ
2

ij

ij

ij

j

ij

ij

Note that the above formulation can be used in the case
of a collision set with multiple connected components, by
introducing a set of variables π and ε, and of parameters S
and S for each of these components. This method allows
simultaneous resolution over multiple conﬂict areas, thus
ensuring the solution is a global optimum and not comprised
of several local optima, which would be the case by consid-
ering each connected component in a separate optimization
problem.

F. Optimization problem

To simplify notations, we note X the tuple of all the
variables described above. The optimization problem (in
which indices have been omitted for readability) of ﬁnding

max

X

O(X)

(h1) − (h5), (b1) − (b6), (k1) − (k3), (s1) − (s3)

s.t.

(3)

either gives a solution to the discretized time-optimal coor-
dination problem, or is infeasible. Speciﬁcally, infeasibilities
can either be caused by the choice of a too small value for the
number of time steps K, or because the initial states of the
robots do not allow a safe passage through the intersection.

The sub-optimality caused by the time discretization van-
ishes as the time step goes to zero. Since the limit on
computation time effectively sets a lower bound on the time
step duration, it is desirable to choose a value providing
good quality solutions in reasonable time. This issue will be
discussed in Section V. However, an additional artifact arises
from time discretization with a ﬁnite resolution, as objective
function O does not distinguish solutions with sojourn times
differing by less than the duration of a time step for at least
one robot. To correct this issue, we make use of the fact that
maximizing the speed of a robot allows to minimize its (non-
discretized) sojourn time. Therefore, adding an “averaged
normalized speed” term 1
to function O allows
N K
to choose, among all solutions of (3), the one with highest
average speed and thus smallest average sojourn time. Note
that the weighting of the added term ensures this solution
is still optimal for problem (3), and the modiﬁed objective
function has been used in our simulations.

(cid:80)

vk
i
vi

i,k

Moreover, our formulation could also be used for continu-
ous arrivals of robots in real-time. Let T be an upper bound
for the computation time for NT robots: at a given time t
we consider the set Nt of robots entering the coordination
region between times t and t+T , and we assume |Nt| ≤ NT .
If optimal trajectories have been assigned for the robots of
Nt−T and taking those as constraints for the robots of Nt, we
can compute optimal trajectories for those robots before they
reach the entry of the coordination region. Constraint (b1)
ensures those trajectories remain feasible by that time and
can therefore be assigned to the robots of Nt. Note that this
time-receding method may, however, cause sub-optimalities
compared to considering all robots at once.

V. SIMULATION RESULTS

The use of the above optimization problem to ﬁnd a
time-optimal coordination has been validated by computer
simulation on the example of autonomous vehicles in the
intersection of Fig. 1. The simulation is based on the free
trafﬁc modeling tool SUMO [15] and uses its path generation
algorithm to compute collisions sets.

Vehicles are generated either deterministically (ﬁrst simu-
lation), or using random Poisson arrival times with normally-
distributed entry speeds truncated to a minimum and a max-
imum speed (second and third simulations). Optimization
problem (3) (with modiﬁed objective function) is then run
into the commercial MILP solver Gurobi [16], using its
Python interface to generate the constraints. Lastly, if the
problem is feasible, the solution trajectories are simulated in
SUMO using the TraCI interface to verify that they do not
generate collisions.

In all simulations, vehicles are modeled as rectangles of
5 m length by 2 m width, with [ai, ai] = [−3, +4] m s−2.
i = v = 15 m s−1.
The exit speed for all i ∈ N is set as vout
The entry speed vin
is deterministically chosen in the ﬁrst
i
simulation and is normally distributed with average 12 m s−1
and standard deviation 3 m s−1, truncated to [10, 15] m s−1
in the second and third simulations.

(a) Optimal priorities

(b) Suboptimal priorities

Fig. 4. Optimal trajectories within given priority classes, corresponding to
a global (left) and local (right) optimum

Average relative optimality loss (compared to a 0.25 s time
Fig. 6.
step), depending on time step duration, for 85 instances of 15 vehicles with
reference parameters (red), lower maximum speed of 10 m s−1 (blue) and
higher absolute values of accelerations [ai, ai] = [−6, +8] m s−2 (green).

initial conﬁgurations of 15 vehicles. For each instance, the
resolution-optimal average time tτ
opt is computed for time
step durations τ ranging from 0.125 s to 5 s. The relative
loss of optimality is computed as tτ
. Interestingly,
the averaged values ﬁt closely to an afﬁne function with slope
7.2% per second for the above set of parameters. The loss
of optimality remains less than 6% when the time step is
smaller than 1 s; moreover, the solution of (3) converges as
the time step duration vanishes.
The kinodynamic parameters,

opt−t0.125

opt
t0.125
opt

the maximum speed
v and the acceleration bounds ai and ai
inﬂuence the
magnitude of the optimality loss. Fig. 6 shows a comparison
of the losses of optimality for three different scenarios,
namely “reference”, “lower speed” and “higher accelera-

tion”. Reference parameters are, as before, (cid:0)v, ai, ai
(cid:1) =
is chosen as (cid:0)v, ai, ai
(cid:1) = (10 m s−1,−3 m s−2, 4 m s−2)
(cid:1) =
and the “higher acceleration” scenario as (cid:0)v, ai, ai

(15 m s−1,−3 m s−2, 4 m s−2);

the lower speed scenario

i.e.

(15 m s−1,−6 m s−2, 8 m s−2). The same set of 85 initial
conﬁgurations is used for those three scenarios, and we
only vary the kinodynamic parameters; in the lower speed
scenario, initial speeds are also reduced by 33%. We ﬁnd
that an increase of time step duration causes higher losses
of optimality in instances with more dynamic robots (higher
speeds or higher absolute values of acceleration bounds) than
those with less dynamic ones. As a result, the time step dura-
tion can be chosen according to the dynamic characteristics
of robots; for instance, a longer time step duration can be
chosen for slower robots.

C. Computation time

Fig. 5. Average relative optimality loss (compared to a 0.125 s time step),
depending on time step duration, for 85 instances of 15 vehicles. Error bars
correspond to 1 standard deviation for instances above or below average.

Simulations were performed on a personal computer run-
ning on a 3.60 GHz Intel Core i7-4790 CPU with 16 GB of
RAM. A replay of some of our simulations is available in
the accompanying video submission1.

A. Microscopic simulation

We ﬁrst demonstrate the ability of our method to ﬁnd the
global optimum on a simple example with three vehicles in
the case of the intersection displayed in Fig. 1: vehicle 1 goes
from south to west, vehicle 2 from west to east and vehicle 3
from north to south. Vehicles initially start at (s0
3) =
3 ) = (5, 15, 10) m s−1.
(0, 0, 25) m with speeds (vin
2 , vin
Fig. 4a shows the globally optimal
trajectories for each
vehicle, which lies in the homotopy class represented by
priorities 3 (cid:31) 2, 2 (cid:31) 1, 3 (cid:31) 1. For comparison purposes,
Fig. 4b shows the (locally) optimal trajectories when sub-
optimal priorities 1 (cid:31) 3, 3 (cid:31) 2, 1 (cid:31) 2 are enforced. The
optimum average sojourn time found by our algorithm is
6.5 s, and the example sub-optimal one is 8.4 s.

1 , vin

1, s0

2, s0

B. Inﬂuence of time step duration

The discretization time step has a double effect on the
solution: ﬁrst, we assume constant acceleration during one
time step. Second, the safety constraints require that one
robot of each conﬂicting pair leaves the conﬂict area one
time step before the other can enter.

In Fig. 5 we show the average optimality loss caused by
choosing larger time step durations for a random set of 85

1Also available at https://youtu.be/RiW2OFsdHOY

To measure the computation time required to solve prob-
lem (3) for the intersection displayed in Fig. 1, we run
the simulator for different numbers of vehicles with a ﬁxed
time step of 1 s (Fig. 7). Computation time remains below
1 s for up to 8 vehicles, which would make our approach
suitable for real-world applications. Note that the same 30 s
time horizon is considered across all simulations to provide
fair comparison, while a shorter horizon could be used for
problems involving fewer vehicles, thus reducing computa-
tion time; moreover, the presented MILP problem has been

02468100204060800246810020406080Time(s)Position(m)s1s2s302468100204060800246810020406080Time(s)Position(m)s1s2s30123450%20%40%60%Timestepduration(s)Optimalityloss(%)AverageAvg.(lin.ﬁt)0123450%20%40%Timestepduration(s)Optimalityloss(%)ReferenceHigheracc.Lowerspeed[3] T. Lozano-Perez, “Spatial planning: A conﬁguration space approach,”

IEEE Transactions on Computers, vol. 100, pp. 108–120, 1983.

[4] P. Dasler and D. M. Mount, “On the complexity of an unregulated

trafﬁc crossing,” CoRR, vol. abs/1505.00874, 2015.

[5] J. Gregoire, “Priority-based coordination of mobile robots,” arXiv

preprint, vol. arXiv:1306.0785, 2013.

[6] H. Chitsaz, J. O’Kane, and S. LaValle, “Exact Pareto-optimal
robots on an acyclic
and

coordination of
roadmap,”
Automation., pp. 3981–3986 Vol.4, 2004.

IEEE International Conference

two translating polygonal

on Robotics

[7] N. Murgovski, G. R. de Campos, and J. Sjoberg, “Convex modeling of
conﬂict resolution at trafﬁc intersections,” in IEEE Conf. on Decision
and Control (CDC), Dec 2015, pp. 4708–4713.

[8] F. Alizadeh and D. Goldfarb, “Second-Order Cone Programming,”

Math. Programming - Ser. B., vol. 95, no. 3 – 51, pp. 3–51, 2003.

[9] A. Richards, T. Schouwenaars, J. P. How, and E. Feron, “Spacecraft
Trajectory Planning with Avoidance Constraints Using Mixed-Integer
Linear Programming,” Journal of Guidance, Control, and Dynamics,
vol. 25, no. 4, pp. 755–764, 2002.

[10] Y. Wang, B. D. Schutter, B. Ning, N. Groot, and T. J. J. V. D.
Boom, “Optimal Trajectory Planning for Trains Using Mixed Integer
Linear Programming,” International IEEE conference proceedings on
intelligent transportation systems, pp. 1598–1603, 2011.

[11] S. Caﬁeri and N. Durand, “Aircraft deconﬂiction with speed regulation:
New models from mixed-integer optimization,” Journal of Global
Optimization, vol. 58, no. 4, pp. 613–629, 2014.

[12] J. Peng, “Coordinating Multiple Robots with Kinodynamic Constraints
Along Speciﬁed Paths,” The International Journal of Robotics
Research, vol. 24, no. 4, pp. 295–310, apr 2005.

[13] A. Richards and J. How, “Mixed-integer programming for control,”

Proceedings of the American Control Conf., pp. 2676–2683, 2005.

[14] J. Johnson and K. Hauser, “Optimal acceleration-bounded trajectory
planning in dynamic environments along a speciﬁed path,” Proceed-
ings - IEEE International Conference on Robotics and Automation,
pp. 2035–2041, 2012.

[15] D. Krajzewicz, J. Erdmann, M. Behrisch, and L. Bieker, “Recent devel-
opment and applications of SUMO - Simulation of Urban MObility,”
International Journal On Advances in Systems and Measurements,
vol. 5, no. 3&4, pp. 128–138, December 2012.

[16] Gurobi Optimization, Inc., “Gurobi optimizer reference manual,”

2015.

Fig. 7. Averaged computation time over 100 instances for a time step
duration of 1 s and a varying number of vehicles.

formulated for clarity rather than execution speed, notably
by introducing redundant variables. As a result, performance
can likely be further improved to process more robots in the
same time frame.

VI. CONCLUSION

This article presents a new approach to compute time-
optimal trajectories for the coordination of mobile robots in
a structured environment, taking into account kinodynamic
constraints. Assuming each robot follows a predetermined
path and using well-chosen bounding polygons, it is possible
to formulate this problem as a mixed-integer linear program.
By using temporal instead of spatial discretization, our ap-
proach allows an exact modeling of second-order integrator
dynamics with piecewise-constant acceleration. The formu-
lated problem mixes the discrete choice of relative priorities
between conﬂicting robots with the continuous optimization
of speed proﬁles respecting these priorities.

Extensive computer simulations have been run, on the
example of a road intersection with autonomous vehicles,
using the open-source trafﬁc simulator SUMO and commer-
cial MILP solver GUROBI. These simulations demonstrate
the ability of our approach to compute optimal, collision-free
trajectories in reasonable time.

Using consumer-grade hardware, the proposed method can
treat up to 8 robots in less than a second. It is therefore
suitable for real-time use, for instance for robots in an auto-
mated warehouse or autonomous vehicles at an intersection.
In situations where computation time is more important than
optimality, our formulation could also be used to design
more efﬁcient heuristics, with provable performance bounds,
or to assess potentially dangerous situations where no safe
trajectories exist. More general quadratic programming tech-
niques could allow to use more complex objective functions,
and relax the constant acceleration assumption while still
providing an exact modeling of the dynamic constraints,
opening many perspectives for future research.

REFERENCES

[1] J.-C. Latombe, Robot motion planning. Springer Science & Business

Media, 2012, vol. 124.

[2] T. Siméon, S. Leroy, and J. P. Laumond, “Path coordination for mul-
tiple mobile robots: A resolution-complete algorithm,” IEEE Transac-
tions on Robotics and Automation, vol. 18, no. 1, pp. 42–49, 2002.

0510152005101520NumberofvehiclesComputationtime(s)AverageExp.ﬁt