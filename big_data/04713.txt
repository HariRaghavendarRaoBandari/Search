Modeling Time Series Similarity with Siamese Recurrent Networks

6
1
0
2

 
r
a

 

M
5
1

 
 
]

V
C
.
s
c
[
 
 

1
v
3
1
7
4
0

.

3
0
6
1
:
v
i
X
r
a

Wenjie Pei
David M.J. Tax
Delft University of Technology, Mekelweg 4, 2628 CD Delft, THE NETHERLANDS
Laurens van der Maaten
Facebook AI Research, 770 Broadway 8th Floor, New York NY 10003, USA

W.PEI-1@TUDELFT.NL
D.M.J.TAX@TUDELFT.NL

LVDMAATEN@FB.COM

Abstract

Traditional techniques for measuring similari-
ties between time series are based on hand-
crafted similarity measures, whereas more recent
learning-based approaches cannot exploit exter-
nal supervision. We combine ideas from time-
series modeling and metric learning, and study
siamese recurrent networks (SRNs) that mini-
mize a classiﬁcation loss to learn a good simi-
larity measure between time series. Speciﬁcally,
our approach learns a vectorial representation for
each time series in such a way that similar time
series are modeled by similar representations,
and dissimilar time series by dissimilar represen-
tations. Because it is a similarity prediction mod-
els, SRNs are particularly well-suited to chal-
lenging scenarios such as signature recognition,
in which each person is a separate class and very
few examples per class are available. We demon-
strate the potential merits of SRNs in within-
domain and out-of-domain classiﬁcation exper-
iments and in one-shot learning experiments on
tasks such as signature, voice, and sign language
recognition.

1. Introduction
Successful classiﬁcation, veriﬁcation, or retrieval of time
series requires the deﬁnition of a good similarity measure
between time series. Classical approaches to time-series
analysis handcraft such similarity measures (Vintsyuk,
1968; Sakoe & Chiba, 1978), which limits their ability to
incorporate information on the relative scale of features in
the similarity measure. Other approaches use unsupervised
learning in order to deﬁne the similarity measure (Rabiner,

1989; Jaakkola & Haussler, 1998), which has the disadvan-
tage that it cannot exploit class label information in deter-
mining which features are most relevant for the underlying
similarity structure.
In this paper, we study a novel model for time-series anal-
ysis that learns a similarity measure over pairs of time se-
ries in a supervised manner. The proposed model combines
ideas from metric learning with that of learning embed-
dings for time series using recurrent networks. The model
takes as input two time series, which are both processed
by the same recurrent network to produce a representation
for each of time series. The similarity between the time
series is deﬁned as a weighted inner product between the
resulting representations. All parameters of the model are
learned jointly by minimizing a classiﬁcation loss on pairs
of similar and dissimilar time series. We refer to the result-
ing model as siamese recurrent network (SRN). The struc-
ture of the SRN is illustrated in Figure 1. We evaluate the
performance of two variants of the SRN in within-domain
classiﬁcation and out-of-domain classiﬁcation experiments
representing a range of different machine-learning tasks.
The model we study in this paper is of particular interest
in challenging learning settings in which the number of
classes is large and the number of training examples per
class is limited. An example of such a setting is an on-
line signature veriﬁcation task. Here each person who pro-
vided one or more signatures is considered to be a separate
class, and the number of training examples per person is
extremely limited. Such a task may beneﬁt from sharing
parameters between classes by learning a global similarity
measure over the set of all pairs of time series, which is
what the SRN does. We perform one-shot learning exper-
iments to illustrate the potential merits of the global simi-
larity measure over time series learned by our models.

Modeling Time Series Similarity with Siamese Recurrent Networks

s

v

v

h(1)

h(2)

z(1)
1

A

z(1)
2

A

. . .

A

z(1)
T

z(2)
1

A

z(2)
2

A

. . .

A

W

W

W

W

W

x(1)
1

x(1)
2

x(1)
T

x(2)
1

x(2)
2

z(2)
T

W

x(2)
T

Figure 1. Graphical representation of the Siamese Recurrent Net-
work (SRN). For the SRN-L model, the feature representations
h are obtained by taking the hidden unit activations at the last
timestep, zT (solid line). For the SRN-A model, the feature repre-
sentations h are obtained by averaging the hidden unit activations
z over all timesteps (solid and dashed lines). The SRN outputs a
scalar similarity measure s.

2. Related Work
Traditional approaches to measuring time-series similarity
such as dynamic time warping (DTW; Vintsyuk (1968);
Sakoe & Chiba (1978)) use handcrafted similarity mea-
sures that are not adapted to the observed data distribu-
tion. This shortcoming was addressed by the introduction
of similarity measures that ﬁrst ﬁt a generative model to
the data, such as Fisher, TOP, marginalized, and product-
probability kernels (Jaakkola & Haussler, 1998; Tsuda
et al., 2002a; Jebara et al., 2004; Tsuda et al., 2002b). In
particular, Fisher kernels have seen widespread adoption in
computer vision (Perronnin et al., 2010). While these meth-
ods beneﬁt from modeling the data distribution before the
computation of pairwise similarities, they are limited in that
they cannot exploit available supervised class or similarity
information, which may hamper their performance in clas-
siﬁcation problems. By contrast, the time-series similar-
ity approach we study in this work is based on supervised
learning. It combines ideas from modeling time series us-
ing recurrent networks with those from metric learning. We
discuss related work on both topics separately below.
Recurrent networks learn a representation for each
timestep that is inﬂuenced by both the observation at that
time step and by the representation in the previous timestep
(Werbos, 1988; Schmidhuber, 1989). The recurrent nature
of the models equips them with a memory that is capable
of preserving information over time. This has made them
popular for tasks such as language (Mikolov et al., 2011;
Vinyals et al., 2015), handwriting (Graves, 2013), and im-
age generation (Theis & Bethge, 2015), and music predic-
tion (Bengio et al., 2013). SRNs employ a pair of standard
recurrent networks, the parameters of which are shared be-
tween the two networks. It differs from prior work in the
loss that it minimizes: instead of minimizing a “generative”
loss such as negative log-likelihood, it minimizes a loss that
encourages representations to be close together for similar

time series and far apart for dissimilar time series.
Metric learning techniques learn a similarity measure on
data that lives in a vectorial space. While several stud-
ies have explored learning non-linear “metrics” by back-
propagating pairwise losses through feedforward networks
(Bromley et al., 1993; Chopra et al., 2005; Salakhutdinov
& Hinton, 2007; Koch et al., 2015; Min et al., 2010; Had-
sell et al., 2006; Hu et al., 2014), most prior work on metric
learning focuses on learning Mahalanobis metrics; promi-
nent examples of such studies include Goldberger et al.
(2004); Weinberger & Saul (2009); Davis et al. (2007); and
Xing et al. (2002). Our work is most similar to latent coin-
cidence analysis (LCA; Der & Saul (2012)) in terms of the
loss it is minimizing, but it differs substantially from LCA
in that it backpropagates the loss through the recurrent net-
work that is modeling the time series.

3. Siamese Recurrent Networks
A time-series similarity model produces a single similarity
value for each input pair of time series (with potentially dif-
ferent lengths). Similarly to a siamese network, our time-
series similarity model employs two neural networks that
share their network parameters in order to extract compara-
ble hidden-unit representations from the inputs. The result-
ing hidden-unit representations are compared to compute
the similarity between the two time series. The parame-
ters of the neural networks and the comparison function are
learned jointly in a supervised manner to predict whether
two time series are similar or not. We use recurrent net-
works as the basis for our siamese architecture, leading to
the siamese recurrent network (SRN) depicted in Figure 1.
The advantage of using recurrent networks is that they al-
low our model (1) to extract relevant features for the simi-
larity computation and (2) to remember these relevant fea-
tures over time when needed. The resulting features have
the same size irrespective of the time series length.
Suppose we are given two time series X (1) =
whose
lengths are respectively T1 and T2. The hidden-unit rep-
resentations z(1)
in the SRN model are deﬁned as:

x(1)
1 , . . . , x(1)
T1

x(2)
1 , . . . , x(2)
T2

and X (2) =

(cid:110)

(cid:111)

(cid:110)

and z(2)

t

t

(cid:111)

(cid:17)

(cid:16)

z(i)
t = g

Wx(i)

t + Az(i)

t−1 + b

.

(1)

We use a rectiﬁed linear unit (ReLU) function g(x) =
max(0, x) as this activation function eliminates potential
vanishing-gradient problems.
The hidden-unit representations obtained from the two sub-
networks for the corresponding input time series, h(1) and
h(2), are combined to compute the SRN’s prediction for
the similarity of the two time series. We consider two ap-
proaches for comparing hidden-unit representations.

Modeling Time Series Similarity with Siamese Recurrent Networks

In the ﬁrst approach, the element-wise product between the
hidden representations on the last time steps T1 and T2 is
computed and the output is a weighted sum of the resulting
products. This approach encourages the recurrent networks
to remember relevant features over time, thereby making
these features available for the ﬁnal similarity computation.
In the second approach, all the hidden-unit representations
for each of the two time series are averaged over time to
construct a single feature representation for both time se-
ries, and the resulting feature representations are combined
in the same way as before to compute the time-series sim-
ilarity. This approach removes the burden on the recurrent
networks to memorize all important features over time, but
may potentially pollute the time-series features by averag-
ing over time.
Mathematically, the two approaches compute the following
latent representations h for each time series:

• The SRN-L (last timestep) model:

(cid:16)

X (i)(cid:17)

h(i) = h

= z(i)
T .

(2)

The recurrent connections in recurrent networks allow
it to memorize the previous inputs in the hidden states
in a recursive way. Consequently, the hidden units in
the last time step should be able to store the infor-
mation accumulated in the time domain for the whole
time series. Therefore, we conjecture it is capable of
modeling the entire time series.
• The SRN-A (average) model:

(cid:16)

X (i)(cid:17)

T(cid:88)

t=1

=

1
T

h(i) = h

z(i)
t

.

(3)

By averaging the hidden units z over time,
this
model treats the information of each time step equally
and avoids the potential memory-vanishing problem
whilst still considering the temporal information in the
previous time steps when computing hidden-unit rep-
resentations.

Denoting the latent representations obtained from the two
recurrent networks as h(1) and h(2), the SRN model deﬁnes
the similarity of the two time series as:
1

X (1), X (2)(cid:17)

(cid:16)

(4)

=

s

.

1 + e−v(cid:62)[diag(h(1)h(2)(cid:62))]+c

Herein, the similarity between two time series is deﬁned
as a weighted inner product between the latent represen-
tations h(1) and h(2). Such similarity measures between
hidden-units activations have previously been used as part
of attention mechanisms in speech recognition (Chorowski
et al., 2014), machine translation (Bahdanau et al., 2014),
and handwriting generation (Graves, 2013).

3.1. Parameter Learning
Suppose we are given a training set T containing two sets
of in total N pairs of time series, a set with pairs of similar
time series S and a set with pairs of dissimilar time series
D. We learn all parameters Θ = {A, W, v, c, b} of the
SRN jointly by minimizing the binary cross-entropy of pre-
dicting to which set each pair of time series belongs with
respect to the parameters. This is equivalent to maximizing
the conditional log-likelihood of the training data:

L(Θ;T ) = −

(cid:20) (cid:88)
(cid:88)

+

(n1,n2)∈S

(n1,n2)∈D

(cid:16)
(cid:16)

X (n1), X (n2)(cid:17)
(cid:16)

X (n1), X (n2)(cid:17)(cid:17)(cid:21)

1 − s

,

log s

log

where n1 and n2 indicate the indices of the ﬁrst and second
time series in a training pair. The loss function is back-
propagated through both recurrent networks (the weights
of which are shared) using a variant of the backpropaga-
tion through time algorithm (Werbos, 1988) with gradient
clipping between −5 and 5 (Bengio et al., 2013).
The sets S and D of similar and dissimilar time series can
be constructed in various ways, for instance, by asking hu-
man annotators for similarity judgements. When class la-
bels yn are available for time series X (n), the sets can be
deﬁned as S = {(n1, n2) : yn1 = yn2} and D = {(n1, n2) :
yn1 (cid:54)= yn2}. In contrast to time-series classiﬁcation models
(Eddy et al., 1995; Kim & Pavlovic, 2006; van der Maaten,
2011; Quattoni et al., 2010), this allows SRNs to be used
on objects from unknown classes as well. For instance,
the SRN may be trained on the signatures of a collection
of people, and like any classiﬁcation model, it can then be
used within-domain to verify new signatures of the same
people. However, the SRN can also be used out-of-domain
to verify the signatures from people that were not present in
the training set. The SRN only needs one genuine, veriﬁed
signature to compute the similarity to a new, unknown sig-
nature (one-shot learning). The underlying assumption is
that the inter-person variation of the signatures is modeled
well by the SRN because it was trained on signatures from
many other people.

4. Experiments
We performed experiments with SRNs on three different
datasets in three different learning settings:
(1) within-
domain similarity prediction, (2) out-of-domain similarity
prediction, and (3) one-shot learning. Before presenting the
setup and results of our experiments, we ﬁrst introduce the
three datasets below.

Modeling Time Series Similarity with Siamese Recurrent Networks

Table 1. Characteristics of the ﬁve datasets considered in our ex-
periments: dimensionality of features, number of classes, number
of samples, and the minimum, mean, and maximum length of the
time series.

Dataset
Arabic (digit)
Arabic (voice)
MCYT (without forgery)
MCYT (with forgery)
Sign

Dimens. Classes
13×2
13×2
5×3
5×3
77×2

10
88
100
100
19

Time series length
Samples Min. Mean Max.
92
92
1161
2687
198

8800
8800
2500
5000
40

3
3
34
34
760

39
39
349
438
112

4.1. Datasets

We performed experiments on three different datasets.
The Arabic Spoken Digit dataset (Hammami & Sellami,
2009) comprises 8, 800 utterances of digits produced by
88 different speakers. Each speaker uttered each digit ten
times. The data is represented as a time series of 13-
dimensional MFCCs that were sampled at 11, 025Hz and
16 bits using a Hamming window. We use two different
versions of the spoken digit dataset: (1) a digit version in
which the uttered digit is the class label and (2) a voice
version in which the speaker of a digit is the class label.
The MCYT signature dataset (Ortega-Garcia et al., 2003)
contains online signature data collected from 100 subjects.
For each subject, the data comprises 25 authentic signa-
tures and 25 skilled forgeries. The signatures are repre-
sented as time series of ﬁve features: the x-coordinate, y-
coordinate, pressure, azimuth, and elevation of the pen. We
consider two different versions of the dataset, namely, a
version without forged data and a version with forged data.
The American sign language dataset (Aran et al., 2006)
contains eight manual signs that represent different words
and eleven non-manual signs such as head or shoulder mo-
tions. The data thus comprises nineteen classes. Each sign
was produced ﬁve times by eight different subjects, leading
to a total of 760 samples. The time series are represented
using a hand-crafted feature representation that contains a
total of 77 hand motion, hand position, hand shape, and
head motion features (Aran et al., 2006).
Following common practice in time series analysis, we pre-
processed all three datasets by applying a sliding window
(with stride 1) to the time series, concatenating the fea-
tures in the frames under the window into a single frame.
This enriches the feature representation, making it easier
for the models to capture feature gradients. For the Arabic,
MCYT, and Sign datasets, we used a window size of 2, 3,
and 2, respectively. In Table 1, the main characteristics of
all ﬁve datasets are summarized.

4.2. Experimental setup

In our experiments, the model parameters of the SRNs were
initialized by sampling them from a uniform distribution
within an interval [−0.1, 0.1]. Training of the model is
performed using a RMSprop (Tieleman & Hinton, 2012)
stochastic gradient descent procedure using mini-batches
of 50 pairs of time series. To prevent the gradients from
exploding, we clip all gradients (Bengio et al., 2013) to lie
in the interval [−5, 5]. We decay the learning rate during
training by multiplying it by 0.4 every time the AUC on
the validation set stops increasing. We applied dropout on
the hidden-unit activations of our model: the dropout rate
was tuned to maximize the AUC on a small held-out vali-
dation set. Code reproducing the results of our experiments
is available on http://www.anonymized.com.
In all experiments except for those on the MCYT (with
forgery) dataset, we deﬁned the sets of similar and dissim-
ilar time series as suggested in Section 3, that is, we deﬁne
similar time series to be those with the same class label and
dissimilar time series to be those with different class labels:
S ={(n1, n2) : yn1 = yn2} and D ={(n1, n2) : yn1 (cid:54)= yn2}.
Herein, yn represents the class label of the time series as
described in section 4.1. On the MCYT (with forgery)
dataset, we deﬁne the positive pairs in the same way but
we deﬁne the set of negative pairs D slightly differently:
the negative pairs are pairs of a genuine signature and a
forged version of the same signature. These negative pairs
are more difﬁcult to distinguish, as a result of which train-
ing on them will likely lead to better models.
We compare the performance of our SRNs with that of
three variants of our model, and with three baseline mod-
els. The three variants of our model we consider are: (1) a
feedforward variant of SRN-A, called SN-A, that removes
all recurrent connections from the model, i.e., in which
A = 0 but which still averages the hidden representation
over time; (2) a feedforward variant of SRN-L, called SN-
L, that removes all recurrent connections from the model
and uses the hidden representation of the last time step;
and (3) a naive logistic model that removes all hidden units
from the model and that predicts similarities by averaging
all features over time and computing a weighted sum of the
element-wise product of the resulting feature representa-
tions. These three variants of SRNs allow us to investigate
the effect of the recurrent connections and non-linearities
on the prediction performance of our models.
The three time-series similarity models we use as baseline
models are: (1) dynamic time warping (Vintsyuk, 1968);
(2) Fisher kernels (Jaakkola & Haussler, 1998); and (3)
Fisher vectors (Perronnin et al., 2010). Details of these
three baseline models are given below.
Dynamic time warping (DTW; Vintsyuk (1968)) mea-

Modeling Time Series Similarity with Siamese Recurrent Networks

Figure 2. Area under the receiving-operator curve curve (AUC) of our two variants of Siamese Recurrent Networks (SRN-A and SRN-L)
on ﬁve datasets as a function of the number of hidden units (higher is better). For reference, the performance of SRNs without recurrent
connections (SNs) is also shown. All results were obtained by averaging over ﬁve repetitions. The standard deviation of the results is
typically smaller than 0.01.

sures time series similarities by aligning both time series
and summing the pairwise distances between all corre-
sponding frames, minimized over the set of all possible
alignments between the two time series. An alignment is
a set of (potentially many-to-many) correspondences be-
tween frames, with the restriction that correspondences
cannot be crossing each other in time. DTW similarities
can be computed efﬁciently using a dynamic-programming
algorithm. Despite its simplicity, DTW has been quite suc-
cessful, in particular, on problems in which the time series
are already relatively well aligned and the time series show
some clear salient features in time. We leave comparisons
with approaches that combine dynamic time warping and
metric learning (Garreau et al., 2014) to future work.
Fisher kernels measure the similarity between two time se-
ries by the inner product of the log-likelihood gradients that
are induced by the time series with respect to the param-
eters of a generative model (Jaakkola & Haussler, 1998).
Our generative model of choice for time series is the hid-
den Markov model (HMM). Mathematically, we denote
the gradient of the log-likelihood L(X (n)) of a time se-
ries X (n) with respect to the parameters of the HMM as
. We deﬁne the Fisher kernel
gn =
similarity κ between two time series as an inner product

(cid:104)∀θ ∈ Θ : ∂L(X (n))

(cid:105)

∂θ

between their corresponding gradients:

(cid:16)

X (i), X (j)(cid:17)

κ

= g(cid:62)

i U−1gj.

(5)

Herein, the matrix U is the Fisher information metric,
which is replaced with identity matrix I in our experiments.
The number of hidden states of our HMMs is tuned by max-
imizing the AUC on a small, held-out validation set.
Fisher vectors compute the same gradients gn as before,
but instead of computing their inner products, we concate-
nate the gradients gi and gj to obtain a feature representa-

tion of the time-series pair(cid:0)X (i), X (j)(cid:1). Such Fisher vec-

tor representation are commonly used in computer vision
(Perronnin et al., 2010). Because the concatenated Fisher
vectors cannot directly measure time-series similarity, we
perform 1-nearest classiﬁcation on the collection of similar
and dissimilar pairs to predict whether a pair of time se-
ries is similar. (In other words, the time series similarity is
the negative Euclidean distance between the example and
its nearest pair of similar time series in the concatenated
Fisher vector space.)

4.3. Results

Below, we separately present the results for the three learn-
ing settings we considered: (1) within-domain similarity

Number of hidden units8163264128256512AUC0.60.70.80.91Arabic (digit)SRN-ASRN-LSN-ASN-LNumber of hidden units8163264128256512AUC0.750.80.850.90.951Arabic (voice)Number of hidden units8163264128256512AUC0.70.750.80.850.90.951MCYT (without forgery)Number of hidden units8163264128256512AUC0.750.80.850.90.951MCYT (with forgery)Number of hidden units8163264128256512AUC0.850.90.951SignModeling Time Series Similarity with Siamese Recurrent Networks

In our experiments, we did not observe much overﬁtting,
although overﬁtting is likely to occur when the number of
hidden units is increased much further.
Second, we observe that there is no clear winner between
averaging hidden unit activations over time (SRN-A) and
using the activations at the last timestep (SRN-L). This sug-
gests that the recurrent networks in the SRN-L models are
at least partly successful in remembering relevant features
over time.
Third, we observe that the recurrent connections in the
SRN models are, indeed, helpful:
the SRN models out-
perform their counterparts without recurrent connections
(SNs) in nearly all experiments1. This result underlines the
hypothesis that recurrent connections can preserve features
relevant for time-series similarity computations over time.
Somewhat surprisingly, the performance of the SN-L mod-
els is not as bad as one may expect. It should be noted that
the windowing of features makes the feature representation
of the last timestep richer, which is sufﬁcient to obtain ac-
ceptable performances on some of the datasets.
Comparison with baseline models. Next, we compare
the performance between of SRNs with the naive logistic
model and three other baseline time-series similarity learn-
ing models: (1) dynamic time warping, (2) Fisher kernels,
and (3) Fisher vectors (see section 4.2 for details). We used
the same experimental setup as in the previous experiment,
but we tuned the main hyperparameters of the models (the
number of hidden units in SRNs and SNs; the number of
HMM hidden states for Fisher kernels and Fisher vectors)
on a small held-out validation set. Figure 3 presents the
results of these experiments.
The results of these experiments show that, indeed, the
SRN can be a very competitive time-series similarity
model, even when trained on relatively small datasets.
In particular, SRNs substantially outperform the baselines
models on the Arabic (digit), Arabic (voice), and MCYT
(without forgery) datasets. On most datasets, the Fisher
vectors are the best baseline model (they perform substan-
tially better than standard Fisher kernels), which is line
with results in the literature (Perronnin et al., 2010). The
naive logistic model performs substantially worse than the
SRN models, which suggests that hidden units are essential
in solving difﬁcult similarity assessment problems.
Dynamic time warping (DTW) performs reasonably well
on relatively simple datasets such as the Sign dataset, but
its performance deteriorates on more challenging datasets
in which the similarity labels are not aligned with the main

1It should be noted that because we preprocess the time-series
data by windowing features, the SN is actually a convolutional
network that is very similar to the time-delay neural networks of
Bromley et al. (1993).

Figure 3. Area under the receiving-operator curve curve (AUC)
on ﬁve different datasets using eight different time-series similar-
ity learning models in a within-domain similarity prediction set-
ting (higher is better). See text for details.

prediction, (2) out-of-domain similarity prediction, and (3)
one-shot learning. We also present t-SNE visualizations of
the learned time-series representations.

4.3.1. WITHIN-DOMAIN SIMILARITY PREDICTION

We ﬁrst evaluate the within-domain similarity prediction
performance of the SRN: we randomly split the time series
into a training and a test set, and we measure the ability
of the models to accurately predict whether pairs of time
series in the test set are similar or not in terms of the area
under the receiving-operator curve (AUC). We opt for the
AUC as a performance measure because it naturally deals
with the potential imbalance in the sizes of S and D. We re-
fer to this experiment as within-domain because all classes
in the test data were also observed during training.
Figure 2 presents the within-domain similarity prediction
performance of SRNs as a function of the number of hid-
den units in the model on ﬁve different datasets. We present
results for both the variant that averages all hidden-unit ac-
tivations over time (SRN-A) and the variant that uses only
the hidden unit activations at the last timestep (SRN-L).
The reported results were averaged over ﬁve repetitions,
randomly initializing the parameter of the models in each
repetition. The ﬁgure also reports the performance of mod-
els without recurrent connections, called a Siamese net-
work (SN, where SN-A is a Siamese network with aver-
aged hidden activations and SN-L is a network that uses
the last time step activations). From the results presented
in Figure 2, we make three main observations.
First, the results show that the performance of SRNs tends
to increase with the number of hidden units, in particular,
on challenging datasets such as the Arabic speech datasets.
This shows that SRNs effectively use the additional capac-
ity that is provided by additional hidden units to learn more
informative features for the time-similarity measurements.

Arabic (digit)Arabic (voice)MCYT (without forgery)MCYT (with forgery)SignAUC0.60.650.70.750.80.850.90.951SRN-ASRN-LSN-ASN-LLogisticFisher-kernelFisher-vectorDTWModeling Time Series Similarity with Siamese Recurrent Networks

Table 2. Area under the receiving-operator curve curve (AUC) of eight time-series similarity models on ﬁve datasets in an out-of-domain
similarity prediction setting (higher is better). The standard deviation of the ﬁve repetitions we performed is typically smaller than 0.01.
The best performance per dataset is boldfaced. See text for details.

Dataset

Training
classes

Arabic (digit)
Arabic (voice)
MCYT (without forgery)
MCYT (with forgery)
Sign

1-7
1-60
1-70
1-70
1-14

Test
classes
8-10
61-88
71-100
71-100
15-19

Model

SRN-A SRN-L SN-A SN-L Logist. DTW Fisher K. Fisher V.
0.681
0.849
0.914
0.888
0.862

0.768 0.539
0.802 0.684
0.816 0.760
0.828 0.668
0.748 0.565

0.561
0.630
0.844
0.813
0.566

0.714
0.788
0.920
0.876
0.670

0.761
0.730
0.824
0.782
0.836

0.725
0.640
0.952
0.894
0.729

0.600
0.698
0.752
0.805
0.770

sources of variation in the data, such as the Arabic (voice)
dataset:
the main sources of variation in this dataset are
likely due to the differences in the digits being uttered,
whereas the similarity labels we are interested in concern
the speaker of the digit and not the digit itself. DTW (as
well as Fisher vectors and kernels) cannot exploit this in-
formation, which explains its inferior performance on the
Arabic (voice) dataset.

4.3.2. OUT-OF-DOMAIN SIMILARITY PREDICTION

In the next set of experiments, we measure the performance
of SRNs on out-of-domain similarity prediction: we use
the same experimental setup as before, however, we split
the training and test data in such a way that the set of class
labels appearing in the training set and the set of class la-
bels appearing in the test set are disjoint. This is a more
challenging learning setting, as it relies on the time-series
similarity model exploiting structure that is shared between
classes in order to produce good results. We obtain the test
data by selecting 3 out of 10 classes on the Arabic (digit)
dataset, 28 out of 88 classes on the Arabic (voice) dataset,
30 out of 100 classes on the MCYT datasets, and 5 out of
19 classes on the Sign dataset. As before, we measure the
performance of our models in terms of AUC, and we tune
the hyperparameters of the models on a validation set. The
results of these experiments are presented in Table 2.
From the results presented in the table, we observe that
the strong performance of SRNs on difﬁcult datasets such
as the Arabic (voice) datasets generalizes to the out-of-
domain prediction setting. This suggests that, indeed, the
SRN models are able to learn some structure in the data
that is shared between classes. On the (much smaller)
MCYT datasets, however, dynamic time warping outper-
forms SRNs. Most likely, this result is caused by the SRNs
(which have high capacity) overﬁtting on the classes that
are observed during training.

Table 3. Classiﬁcation accuracy of one-shot learning models of an
1-nearest neighbor classiﬁer using three different similarity mea-
sures on four different datasets (higher is better). The best perfor-
mance per dataset is boldfaced. See text for details.

Dataset
Arabic (digit)
Arabic (voice)
MCYT (without forgery)
Sign

SRN-A SRN-L DTW
0.801
0.618
0.273
0.151
0.913
0.418
0.599
0.531

0.613
0.228
0.548
0.381

4.3.3. ONE-SHOT LEARNING

To further explore the potential of SRNs in out-of-domain
settings, we performed an experiment in which we mea-
sured the performance of SRNs in one-shot learning. We
adopt the same dataset splits as in 4.3.2 to obtain train and
test data. On the training data, we train the SRNs to learn
a similarity measure for time series. This similarity mea-
sure is used to train and evaluate a nearest-neighbor clas-
siﬁer on the test set. We use only a single time series per
class from the test set to train the nearest-neighbor classi-
ﬁer, and use the remaining time series in the test set for
evaluation. We measure the classiﬁcation accuracy using
leave-one-per-class-out validation.
The results are presented in Table 3. For datasets that have
clear salient features, like the MCYT, and to a lesser de-
gree the Sign dataset, DTW performs well. For more com-
plex data, the SRN performs well provided that sufﬁcient
training data is available. For the Arabic (digit) dataset,
the seven classes used in training are insufﬁcient for the
SRN, and the SRN overﬁts on those classes. On the Arabic
(voice) dataset 60 classes are available, which allows the
SRN to fully exploit its potential.

Modeling Time Series Similarity with Siamese Recurrent Networks

4.3.4. VISUALIZING THE REPRESENTATIONS

The one-shot learning experiment presented above exploits
an interesting property of the SRN model, namely, that it
learns a single embedding for a time series. An advan-
tage of this is that the resulting time-series embeddings can
be used in a wide variety of other learning algorithms that
operate on vectorial data, such as alternative classiﬁcation
techniques, clustering models, etc. To obtain more insights
into what the SRN models have learned, we apply t-SNE
(van der Maaten & Hinton, 2008) on embeddings obtained
by a SRN-L on the MCYT (without forgery) test set. Fig-
ure 4 shows a map of the 2500 signatures in the test set; the
signatures were drawn by integrating the pen movements
over time. The color indicates the pen pressure. We refer
the reader to the supplemental material for a full-resolution
version of this map. The t-SNE visualization shows that,
indeed, the SRN-L is capable of grouping similar signa-
tures together very well.
In Figure 5, we show a t-SNE map of the Arabic (voice)
test set constructed on SRN-L embeddings. For compar-
ison, we also show a t-SNE map of the same data, based
on pairwise distances computed with DTW. The two maps
clearly show the potential advantage of SRN: it has used
the supervised similarity information to group all the utter-
ances corresponding to a single class together, something
that DTW is unable to do due to its unsupervised nature.

5. Conclusions
We have investigated models for learning similarities be-
tween time series based on supervised information. Our
study shows that a combination of ideas from metric learn-
ing and deep time-series models has the potential to im-
prove the performance of models for time-series classiﬁ-
cation, retrieval, and visualization. The proposed siamese
recurrent networks (SRNs) are particularly effective com-
pared to alternative techniques in settings in which the sim-
ilarity function that needs to be learned is complicated, or
when the number of labeled time series for some of the
classes of interest is limited. When a reasonably large
collection of examples of similar and dissimilar time se-
ries is available to train the models, the siamese recurrent
networks can produce representations that are suitable for
challenging problems such as one-shot learning or extreme
classiﬁcation of time series. This result is in line with ear-
lier results for siamese convolutional networks by, for in-
stance, Kamper et al. (2016).
This study is an initial investigation into learning similari-
ties between time series, and we foresee several directions
for future work. In particular, we intend to explore vari-
ants of our model architecture: (1) that employ a bilinear
model to measure the similarity of the RNN representa-

(a) SRN-L.

(b) DTW.

Figure 5. t-SNE maps of the Arabic (voice) test data from ﬁve
randomly selected classes, constructed based on (a) siamese re-
current network (last timestep) embeddings of the time series and
(b) pairwise similarities computed using dynamic time warping.

tions; (2) that employ long-term short-term units (Hochre-
iter & Schmidhuber, 1997) or gated recurrent units (Cho
et al., 2014) instead of the simple rectiﬁed linear units
we are currently using; (3) that employ multiple layers
of recurrent units; and (4) that have a tree structure or
generic (planar) graph structure instead of the current se-
quential structure. The latter extension would make our
models applicable to problems such as molecule classiﬁ-
cation (Riesen & Bunke, 2008). We also plan to explore
improvements to our learning algorithm. In particular, our
current implementation selects negative pairs of time se-
ries in a somewhat arbitrary manner:
in all our experi-
ments, we select negative examples uniformly at random
for the set of all candidate negative pairs. We plan to in-
vestigate approaches that perform a kind of “hard nega-
tive mining” during learning, akin to some modern met-
ric learning (Weinberger & Saul, 2009) and multi-modal
learning (Weston et al., 2011) approaches. We also plan to
study applications of SRNs in, for instance, learning word-
discriminative acoustic features (Synnaeve et al., 2014).

Acknowledgments
This work was supported by AAL SALIG++.

Modeling Time Series Similarity with Siamese Recurrent Networks

Figure 4. t-SNE map of the 2, 500 signatures in the MCYT test set (100 subjects) data based on embeddings computed by an SRN-L.
The signatures were drawn by integrating the pen movements over time, and colors indicate the pen pressure (red indicates high pressure
and blue indicates low pressure). A full-resolution version of this map is presented in the supplemental material.

References
Aran, O., Ari, I., Benoit, A., Campr, P., Carrillo, A. Huerta,
Fanard, F.-X., Akarun, L., Caplier, A., Rombaut, M., and
Sankur, B. Sign language tutoring tool. In Proceedings
of eNTERFACE 2006, The Summer Workshop on Multi-
modal Interfaces, pp. 23–33, 2006.

Bahdanau, D., Cho, K., and Bengio, Y. Neural machine
translation by jointly learning to align and translate. In
arXiv:1409.0473, 2014.

Bengio, Y., Boulanger-Lewandowski, N., and Pascanu, R.
Advances in optimizing recurrent networks. In Proceed-
ings of the IEEE Conference on Acoustics, Speech and
Signal Processing, 2013.

Bromley, J., Guyon, I., LeCun, Y., Sackinger, E., and Shah,
R. Signature veriﬁcation using a siamese time delay neu-
ral network. In Advances in Neural Information Process-
ing Systems, volume 6, 1993.

Cho, K., van Merrienboer, B., Bahdanau, D., and Ben-
gio, Y. On the properties of neural machine translation:
Encoder-decoder approaches. In Proceedings of SSST-8,
Eighth Workshop on Syntax, Semantics and Structure in
Statistical Translation, pp. 103–111, 2014.

the International Conference on Machine Learning, pp.
209–216, 2007.

Der, M.F. and Saul, L.K. Latent coincidence analysis: a
hidden variable model for distance metric learning. In
Advances in Neural Information Processing Systems 25,
pp. 3239–3247, 2012.

Eddy, S.R., Mitchison, G., and Durbin, R. Maximum dis-
crimination hidden Markov models of sequence consen-
sus. Journal of Computational Biology, 2(1):9–24, 1995.

Garreau, D., Lajugie, R., Arlot, S., and Bach, F. Metric
learning for temporal sequence alignment. In Advances
in Neural Information Processing Systems, 2014.

Goldberger, J., Roweis, S., Hinton, G.E., and Salakhutdi-
nov, R.R. Neighbourhood component analysis. In Neu-
ral Information Processing Systems, 2004.

Graves, A. Generating sequences with recurrent neural net-

works. In arXiv:1308.0850, 2013.

Hadsell, R., Chopra, S., and LeCun, Y. Dimensionality
In IEEE
reduction by learning an invariant mapping.
Conference on Computer Vision and Pattern Recogni-
tion, 2006.

Chopra, S., Hadsell, R., and LeCun, Y. Learning a simi-
larity measure discriminatively with applications to face
In IEEE Conference on Computer Vision
veriﬁcation.
and Pattern Recognition, 2005.

Hammami, N. and Sellami, M. Tree distribution classi-
ﬁer for automatic spoken Arabic digit recognition.
In
Proceedings of the IEEE ICITST09 Conference, pp. 1–4,
2009.

Chorowski, J., Bahdanau, D., Cho, K., and Bengio, Y. End-
to-end continuous speech recognition using attention-
based recurrent NN: First results. In Deep Learning and
Representation Learning Workshop: NIPS, 2014.

Davis, J.V., Kulis, B., Jain, P., Sra, S., and Dhillon, I. S.
Information-theoretic metric learning. In Proceedings of

Hochreiter, S. and Schmidhuber, J. Long short-term mem-

ory. Neural Computation, 9(8):1735–1780, 1997.

Hu, J., Lu, J., and Tan, Y.-P. Discriminative deep metric
In IEEE In-
learning for face veriﬁcation in the wild.
ternational Conference on Computer Vision and Pattern
Recognition, 2014.

LowHighModeling Time Series Similarity with Siamese Recurrent Networks

Jaakkola, T. and Haussler, D. Exploiting generative models
In In Advances in Neural
in discriminative classiﬁers.
Information Processing Systems 11, pp. 487–493, 1998.

Jebara, T., Kondor, R., and Howard, A. Probability product
kernels. Journal of Machine Learning Research, 5(Dec):
819–844, 2004.

Kamper, H., Wang, W., and Livescu, K. Deep convolu-
tional acoustic word embeddings using word-pair side
information. In Proceedings of the IEEE Conference on
Acoustics, Speech and Signal Processing, 2016.

Kim, M. and Pavlovic, V. Discriminative learning of mix-
ture of Bayesian network classiﬁers for sequence clas-
In Proceedings of the IEEE Conference on
siﬁcation.
Computer Vision and Pattern Recognition, pp. 268–275,
2006.

Koch, G., Zemel, R., and Salakhutdinov, R. Siamese neural
networks for one-shot image recognition. In ICML 2015
Deep Learning Workshop, 2015.

Langley, P. Crafting papers on machine learning. In Lan-
gley, Pat (ed.), Proceedings of the International Confer-
ence on Machine Learning, pp. 1207–1216, 2000.

Mikolov, T., Kombrink, S., Burget, L., Cernock, J., and
Khudanpur, S. Extensions of recurrent neural network
In ICASSP, pp. 5528–5531. IEEE,
language model.
2011.

Min, R., van der Maaten, L.J.P., Yuan, Z., Bonner, A., and
Zhang, Z. Deep supervised t-distributed embedding. In
Proceedings of the International Conference on Machine
Learning, pp. 791–798, 2010.

Ortega-Garcia, J., Fierrez-Aguilar, J., Simon, D., Gonza-
lez, J., Faundez-Zanuy, M., Espinosa, V., Satue, A., Her-
naez, I., Igarza, J.-J., Vivaracho, C., Escudero, D., and
Moro, Q.-I. MCYT baseline corpus: A bimodal bio-
metric database. IEE Proceedings on Vision, Image and
Signal Processing, 150(6), 2003.

Perronnin, F., S´anchez, J., and Mensink, T. Improving the
Fisher kernel for large-scale image classiﬁcation. In Pro-
ceedings of the European Conference on Computer Vi-
sion, pp. 143–156, 2010.

Quattoni, A., Wang, S., Morency, L.-P., Collins, M., and
IEEE
Darrell, T. Hidden conditional random ﬁelds.
Transactions on Pattern Analysis and Machine Intelli-
gence, 29(10), 2010.

Rabiner, L. A tutorial on hidden markov models and se-
lected applications in speech recognition. Proceedings
of the IEEE, 77(2):257–286, 1989.

Riesen, K. and Bunke, H. Iam graph database repository for
graph based pattern recognition and machine learning.
In Lecture Notes in Computer Science, volume 5342, pp.
287–297, 2008.

Sakoe, H. and Chiba, S. Dynamic programming algorithm
optimization for spoken word recognition. IEEE Trans-
actions on Acoustics, Speech, and Signal Processing, 26:
43–49, 1978.

Salakhutdinov, R.R. and Hinton, G.E. Learning a nonlinear
embedding by preserving class neighbourhood structure.
In Proceedings of the International Conference on Arti-
ﬁcial Intelligence and Statistics, volume 11, 2007.

Schmidhuber, J. A local learning algorithm for dynamic
feedforward and recurrent networks. Connection Sci-
ence, 1(4):403–412, 1989.

Synnaeve, G., Schatz, T., and Dupoux, E. Phonetics em-
bedding learning with side information. In IEEE Spoken
Language Technology Workshop, pp. 106–111, 2014.

Theis, L. and Bethge, M. Generative image modeling using
In Advances in Neural Information Pro-

spatial lstms.
cessing Systems 28, Jun 2015.

Tieleman, T. and Hinton, G.E. Lecture 6.5 - rmsprop,
coursera: Neural networks for machine learning, 2012.

Tsuda, K., Kawanabe, M., R¨atsch, G., Sonnenburg, S., and
M¨uller, KR. A new discriminative kernel from prob-
abilistic models. Neural Computation, 14(10):2397–
2414, 2002a.

Tsuda, K., Kin, T., and Asai, K. Marginalized kernels for
biological sequences. Bioinformatics, 18(Suppl 1):268–
275, 2002b.

van der Maaten, L.J.P. Learning discriminative Fisher ker-
nels. In Proceedings of the International Conference on
Machine Learning, pp. 217–224, 2011.

van der Maaten, L.J.P. and Hinton, G.E. Visualizing high-
Journal of Machine

dimensional data using t-SNE.
Learning Research, 9(Nov):2579–2605, 2008.

Vintsyuk, T.K. Speech discrimination by dynamic pro-

gramming. Kibernetika, 4:81–88, 1968.

Vinyals, O., Kaiser, L., Koo, T., Petrov, S., Sutskever, I.,
and Hinton, G.E. Grammar as a foreign language.
In
Advances in Neural Information Processing Systems 28,
pp. 2755–2763, 2015.

Weinberger, K.Q. and Saul, L.K. Distance metric learn-
ing for large margin nearest neighbor classiﬁcation. The
Journal of Machine Learning Research, 10:207–244,
2009.

Modeling Time Series Similarity with Siamese Recurrent Networks

Werbos, P.J. Generalization of backpropagation with appli-
cation to a recurrent gas market model. Neural Networks,
1, 1988.

Weston, J., Bengio, S., and Usunier, N. Wsabie: Scaling
In Proceed-
up to large vocabulary image annotation.
ings of the International Joint Conference on Artiﬁcial
Intelligence, 2011.

Xing, E.P., Ng, A.Y., Jordan, M.I., and Russell, S. Distance
metric learning, with application to clustering with side-
In Advances in Neural Information Pro-
information.
cessing Systems 16, pp. 521–528, 2002.

