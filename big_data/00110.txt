Robust Multi-body Feature Tracker: A Segmentation-free Approach

Pan Ji1, Hongdong Li1, Mathieu Salzmann2, and Yiran Zhong1

1ANU, Canberra; 2EPFL, Switzerland

6
1
0
2

 
r
a

 

M
5
1

 
 
]

V
C
.
s
c
[
 
 

2
v
0
1
1
0
0

.

3
0
6
1
:
v
i
X
r
a

Abstract

Feature tracking is a fundamental problem in computer
vision, with applications in many computer vision tasks,
such as visual SLAM and action recognition. This paper
introduces a novel multi-body feature tracker that exploits
a multi-body rigidity assumption to improve tracking ro-
bustness under a general perspective camera model. A
conventional approach to addressing this problem would
consist of alternating between solving two subtasks: mo-
tion segmentation and feature tracking under rigidity con-
straints for each segment. This approach, however, requires
knowing the number of motions, as well as assigning points
to motion groups, which is typically sensitive to the motion
estimates. By contrast, here, we introduce a segmentation-
free solution to multi-body feature tracking that bypasses
the motion assignment step and reduces to solving a series
of subproblems with closed-form solutions. Our experi-
ments demonstrate the beneﬁts of our approach in terms of
tracking accuracy and robustness to noise.

1. Introduction

Feature tracking is a prerequisite for many computer
vision tasks, such as visual SLAM and action recognition.
Among all the feature tracking methods, the Kanade-Lucas-
Tomasi (KLT) tracker [18, 23, 21], although developed
30 years ago, still remains one of the most widely used
techniques. One of the reasons for this popularity is its
computational efﬁciency; the KLT tracker is local, in the
sense that it treats each local region independently of the
others, which makes it highly parallelizable. This local-
ity, however, comes at a cost in tracking robustness:
the
tracking of each feature cannot beneﬁt from intrinsic scene
constraints, and thus often suffers from drift.

The real-world scenes, however, are often strongly con-
strained. For example, in autonomous driving, most of
the moving objects (cars, vehicles, pedestrian) are rigid,
or quasi-rigid if seen from afar. Several methods have
therefore been proposed to exploit this scene rigidity to
improve feature tracking [24, 3, 20]. Unfortunately, these
methods all assume an afﬁne camera model and are thus

ill-suited to handle strong perspective effects. More im-
portantly, they work either as a post-processing step on an
entire sequence [24], which is sensitive to initial tracking
results and does not apply to online feature tracking, or
within a temporal sliding window [3, 20], which is sensitive
to initialization in the ﬁrst few frames.

By contrast, in this paper, we introduce a novel feature
tracker that takes advantage of multi-body scene rigidity
to improve tracking robustness under a general perspective
camera model. A conventional approach to addressing this
problem would consist of alternating between two subtasks:
motion segmentation and feature tracking under rigidity
constraints for each segment. This, however, suffers from
the following drawbacks: First, it requires knowing the
number of observed motions; and, second, it relies on as-
signing points to individual motions, which is very sensitive
to the initial motion estimates.

Here, we introduce a segmentation-free multi-body fea-
ture tracker that overcomes these drawbacks. Speciﬁcally,
our approach bypasses the motion assignment step by mak-
ing use of subspace constraints derived directly from the
epipolar constraints of multiple motions. As a result, our
algorithm does not require prior knowledge of the number
of motions. Furthermore, this allows us to formulate track-
ing as an optimization problem whose subproblems all have
closed-form solutions.

We demonstrate the effectiveness of our method on both
feature point tracking and frame-by-frame motion segmen-
tation on real world sequences. Our experiments show
that, by incorporating multi-motion constraints, our tracker
yields better accuracies and is more robust to noise than
the standard KLT tracker and the state-of-the-art tracking
algorithm of [20].

2. Related Work

The KLT tracker [23, 21] was derived from the Lucas-
Kanade algorithm for image alignment [18]. Feature track-
ing was achieved by optimizing the sum of squared dif-
ferences between a template patch and an image patch
with the Gauss-Newton method. It was later extended to
handle relatively large displacements by the use of image
pyramids [1].

1

Instead of using the whole sequence,

Global rigidity constraints have been incorporated in
feature point tracking to improve robustness. For instance,
Torresani and Bregler [24] proposed to regularize tracking
with a global low-rank constraint on the trajectory matrix of
the whole sequence. They relied on the original KLT tracker
to get a set of reliable tracks, and explicitly factorized the
reliable trajectory matrix into two low-rank matrices with
the rank given a priori. One of the low-rank matrices, called
the motion parameter matrix, was then used to rectify the
unreliable tracks. In short, this method can be viewed as a
post-processing step on the results of the KLT tracker, and
is therefore not suitable for online frame-to-frame tracking.
low-rank con-
straints [3] and similar subspace priors [20] were applied
within a temporal sliding window. Speciﬁcally, Buchanan
and Fitzgibbon [3] exploited the low-rank constraints within
a Bayesian tracking framework, making predictions of the
new location of a particular point using a low rank approxi-
mation obtained from the previous frames. Recently, Poling
et al. [20] proposed a better feature tracker by adding soft
subspace constraints to the original KLT tracker and jointly
solving for the displacement vectors of all feature points.
These methods, however, assume an afﬁne camera model
within a temporal window, and are therefore ill-suited to
handle strong perspective effects. Moreover, since the low-
rank constraints are enforced in a temporal sliding window,
these methods are sensitive to initialization in the ﬁrst few
frames.

By contrast, [19] exploits perspective projection by mak-
ing use of epipolar constraints to track edgels in two con-
secutive frames. This method, however, was speciﬁcally
designed to model a single motion, and thus does not easily
extend to the multi-body case.

In the closely related optical ﬂow literature, several
methods have been devoted to improving robustness via
rigidity constraints. For instance, Valgaerts et al. [26] intro-
duced a variational model to jointly recover the fundamental
matrix and the optical ﬂow; Wedel et al. [30, 29] leveraged
the fundamental matrix prior as an additional weak prior
within a variational framework. These methods, however,
assume that the scene is mostly stationary (and thus a single
fundamental matrix is estimated), and treat the dynamic
parts as outliers [29]. Garg et al. [7, 8] proposed to make
use of subspace constraints to regularize the multi-frame
optical ﬂow within a variational approach. This approach,
however, assumes an afﬁne camera model and works over
entire sequences.

While, to the best of our knowledge, explicitly modeling
multi-body motion has not been investigated in the context
of feature tracking and optical ﬂow estimation, a large body
of work [5, 27, 31, 15, 16, 28, 6, 12, 14, 13] has been
devoted to multi-body motion segmentation given good
point trajectories in relatively long sequences. Typically,

these tracks are ﬁrst obtained with the KLT tracker, and then
manually cleaned up, e.g., the Hopkins155 dataset [25]. In
a sense, the lack of better tracking algorithms that can incor-
porate the intrinsic constraints of dynamic scenes prevents
the practical use of these motion segmentation algorithms.
In this paper, we seek to track feature points in dy-
namic scenes where multiple motions are present. In this
scenario, a single fundamental matrix is not sufﬁcient to
express the epipolar constraints any more. While one
could think of alternating between estimating multiple fun-
damental matrices, motion assignments and displacement
vectors, the resulting algorithm would typically be very
sensitive to initialization, since the motion assignments
strongly depend on the motion estimates. By contrast,
we introduce a segmentation-free approach that bypasses
the motion assignment problem by exploiting subspace
constraints derived from epipolar geometry. This yields a
robust multi-body tracking algorithm that, as demonstrated
by our experiments, opens up the possibility to perform
motion segmentation in realistic scenarios.

3. Multi-body Feature Tracker

We now introduce our approach to multi-body feature
tracking. Formally, let I(x) denote the current image,
T (x) the previous image (or template image), and xij =
[xij , yij]T the jth image point in the ith patch Ωi of the
template image. Our goal is to estimate the displacement
N ]T ∈ R2×N for all N tracked fea-
vector u = [uT
ture points. To this end, we rely on the standard brightness
constancy assumption [22], which lets us derive the data
term

i , · · · , uT

D(u) =

N

X

i=1

X

xij ∈Ωi

ψ(cid:0)I(xij + ui) − T (xij)(cid:1) ,

(1)

where, typically, ψ(x) = x2 or ψ(x) = |x|. In particular,
we use the ℓ1 norm, which provides robustness to outliers.
Estimating the displacements from this data term only is
typically sensitive to noise and may be subject to drift. A
general approach to making the process more robust con-
sists of introducing a regularizer R(u) to form an energy
function of the form

F (u) = γD(u) + R(u) .

(2)

As mentioned above, several attempts at designing such
a regularizer have been proposed. For example, under
an afﬁne camera model, R(u) can encode a low-rank
prior [24, 20]; with a general projective camera model,
R(u) can represent epipolar constraints (i.e., a fundamental
matrix prior) [30, 26, 19]. In the latter case, the fundamental
matrix can be either pre-computed via an existing feature
matching method [19], or re-computed iteratively.

When multiple motions are present, however, a single
epipolar constraint is not sufﬁcient. Instead, multiple fun-
damental matrices should be estimated so as to respect the
assignments of the tracked points to individual motions. A
straightforward way to addressing this problem consists of
adding a motion segmentation step in the tracking algo-
rithm, so that the fundamental matrices can be iteratively
re-estimated. This leads to the simple segmentation-based
approach to multi-body feature tracking as described below.

3.2. Our Segmentation-free Approach

In this section, we introduce our segmentation-free
multi-body feature tracker, which is the key contribution
of this paper. We ﬁrst show how the epipolar constraints
can be converted to subspace constraints, and incorporated
into our tracking formalism. We then derive the solution to
the resulting optimization problem by decomposing it into
several convex subproblems all with closed-form solutions.

3.1. A First Attempt: Segmentation-based Tracking

3.2.1 Epipolar Subspace Constraints

To derive a segmentation-based approach, we rely on
epipolar constraints. Recall that, in epipolar geometry [10],
i, 1)T and ¯xi =
the homogeneous coordinates ¯x′
(xi, yi, 1)T of two corresponding image points in two
frames are related by a fundamental matrix F, such that

i = (x′

i, y′

¯x′T

i F¯xi = 0 .

(3)

It is therefore natural to exploit these constraints to regu-
larize tracking according to the motion assignments of the
different points.

More speciﬁcally, in the segmentation-based approach,
three types of variables must be estimated: the displacement
vector u, the fundamental matrices {Fk}k=1,··· ,K (where
K is the number of motions), and the motion label of
each tracked point. Let us denote by ¯xk
i the homogeneous
coordinate of the ith feature point (i.e., the center of the
patch Ωi) assigned to motion k. We can deﬁne a multi-body
regularization term as

R1(u, Fk) = X

k

X

i

(cid:2)(¯xk

i (cid:3)2
i + ¯ui)T Fk ¯xk

,

(4)

where ¯ui = [uT

i , 0]T .

The energy function can then be approximately mini-

mized by iterating over the three following steps:

1. Update u by ﬁrst-order gradient descent [20];
2. Estimate Fk for each motion given the current point

assignments;

3. Re-assign the motion labels of the feature points to the

nearest Fk.

This segmentation-based approach suffers from several
drawbacks. First,
the number of motions needs to be
known a priori, which is typical hard for general-purpose
tracking. Second, and more importantly, the quality of
solution obtained with this approach will strongly depend
on the initializations of Fk and of the motion labels. This, in
a sense, is a chicken-and-egg problem, since good initializa-
tion for these variables could be obtained from good motion
estimates.
Instead, in the remainder of this section, we
introduce a new segmentation-free approach that bypasses
the need to explicitly compute the fundamental matrices and
the motion assignments.

As in the segmentation-based approach, we seek to rely on
epipolar geometry. To this end, we make use of the con-
straint expressed in Eq. 3. We ﬁrst note that this constraint
can be re-writen as

f T vec(¯x′

i ¯xT

i ) = 0 ,

(5)

where f ∈ R9 is the vectorized fundamental matrix F, and

vec(¯x′

i ¯xT

i ) = (xix′

i, xiy′

i, xi, yix′

i, yiy′

i, yi, x′

i, y′

i, 1)T .

i ¯xT

(6)
Let us deﬁne wi = vec(¯x′
i ). Then, wi lies in the
orthogonal complement of f T , which is a subspace of
dimension up to eight1, and which we call the epipolar
subspace. Since image points undergoing the same motion
share the same fundamental matrix, all wis corresponding
to points belonging to the same rigid motion lie on the same
subspace [16].

Therefore, in our multi-body feature tracking scenario,
if the feature points are correctly tracked, the data vectors
deﬁned as

wi = vec(cid:0)(¯xi + ¯ui)¯xT

i (cid:1) ,

∀ 1 ≤ i ≤ N ,

(7)

should lie in a union of linear subspaces. This subspace
constraint can be characterized by the self-expressiveness
property [6, 12], i.e., a data point drawn from one subspace
in a union of subspaces can be represented as a linear
combination of the points lying in the same subspace.

In our case,

this self-expressiveness property can be

expressed as

W(u) = W(u)C ,

(8)
where W(u) = [w1 · · · wN ]2, and C is the coefﬁcient
matrix encoding the linear combinations. On its own, this
term has a trivial solution for C (i.e., the identity matrix).
To avoid this solution, C needs to be regularized. In the
subspace clustering literature, C is encouraged to be either

1Note that, in practice, this dimension is typically smaller than 8, since,
in real scenes, the motion of objects, such as cars or people, is not arbitrary,
and thus corresponds to degenerate (i.e., low-rank) motion [16].

2In the following, we make use of subscript (u), i.e., W(u), to indicate
that W depends on the variable u. For compactness, and without causing
confusion, we drop this explicit dependency in Section 3.2.3.

sparse [6] by minimizing kCk1, low rank [17] by mini-
mizing kCk∗, or dense block diagonal [12] by minimizing
F . Here, we choose the Frobenius norm, which has
kCk2
proven effective and is easy to optimize. Furthermore, we
explicitly model noise and outliers, which are inevitable in
real-world sequences.

More speciﬁcally, we write our regularization term for

multi-body tracking as

1
2

kCk2

R2(u, C) =

F +λkEk1 , s.t. W(u) = W(u)C+E ,
(9)
where E accounts for noise and outliers, and is thus en-
couraged to be sparse. Note that, for a given displacement
u, and ignoring noise, the optimal value of this regularizer
depends on the intrinsic dimension of the motion [12].
Since here we optimize u, this regularizer therefore tends
to favor degenerate rigid motions over purely arbitrary rigid
motions. This actually reﬂects reality, since, in real scenes,
cars, people and other objects typically move in a well-
constrained manner.

Importantly, this regularization term requires explicitly
computing neither the fundamental matrices, nor the motion
assignments. As such, it therefore yields a segmentation-
free approach.

Altogether, the energy function of our multi-body track-

ing framework can be written as

F (u, C) = γD(u) + R2(u, C) .

(10)

Our goal is to minimize F (u, C) w.r.t. u and C. We next
show how to solve this optimization problem.

where Aij = ▽Iij ui − τij.

For convenience of optimization, we introduce an aux-
iliary variable Z = A(u). Then, (13) can be equivalently
written as

min

u,C,E,Z

γkZk1 +

1
2

kCk2

F + λkEk1

(14)

s.t. Z = A(u) , W(u) = W(u)C + E .

The main hurdle in optimizing (14) now lies in the term with
W(u) due to its seemingly complicated dependency on u.
However, we show below that this term can be simpliﬁed
by a few matrix derivations.

First, note that, by deﬁnition, we have

vec(W(u)) =

...

¯xN ⊗ I3×3

(¯x + ¯u) ,



}

¯x1 ⊗ I3×3



|
1 · · · ¯xT

¯P

{z
N ]T , ¯u = [¯uT

1 · · · ¯uT

(15)
N ]T , I3×3 is the 3-
where ¯x = [¯xT
by-3 identity matrix and ⊗ denotes the Kronecker product.
Let us deﬁne b = ¯P¯x (or equivalently bi = vec(¯xi ¯xT
i ) )
and introduce another auxiliary variable m = Pu (where
P is obtained by removing every 3ith column of ¯P)3. Our
optimization problem then becomes

min

u,C,E,Z,m

γkZk1 +

1
2

kCk2

F + λkEk1

s.t. Z = A(u) , W(m) = W(m)C + E , m = Pu ,

(16)

3.2.2 Approximation and Problem Reformulation

To optimize Eq. 10, we ﬁrst approximate the data term in
the same manner as the original KLT. In other words, given
i for patch i, we approximate the
an initial displacement u0
intensity values I(xij + ui) with their ﬁrst-order Taylor
expansion at xij + u0

i . This can be written as

where now vec(W(m)) = b + m.

The above optimization problem involves a large number
of variables. We propose to solve it via the Alternating
Direction Method of Multipliers (ADMM) [2], which de-
composes a big optimization problem into several small
subproblems. Below, we show how this can be achieved
for our problem.

I(xij +ui) ≈ I(xij +u0

i )+ ▽I(xij +u0

i )(ui −u0

i ) . (11)

For notational convenience, let ▽Iij = ▽I(xij + u0
τij = ▽Iij u0
can be expressed as

i ), and
i ). Then, the data term

i + T (xij ) − I(xij + u0

D(u) = X

i,j

|▽Iij ui − τij | .

(12)

By combining this data term with our regularizer, we get the
optimization problem

min
u,C,E

γkA(u)k1 +

1
2

kCk2

F + λkEk1

s.t. W(u) = W(u)C + E ,

(13)

3.2.3 ADMM Solution

To apply the ADMM, we ﬁrst need to derive the aug-

mented Lagrangian of (16), which can be expressed as

Lρ = γkZk1 +

1
2

kCk2

F + λkEk1 + yT (m − Pu) +

(17)

hY1, W − WC − Ei + hY2, Z − A(u)i +

ρ

F + kZ − A(u)k2

2(cid:0)kW − WC − Ek2
where h·, ·i denotes the matrix inner product, Y1,Y2, y are
Lagrange multipliers, and ρ is the penalty parameter. The
ADMM then works by alternatively minimizing Lρ w.r.t.

F + km − Puk2
2(cid:1) ,

3Note that Pu = ¯P¯u, since ¯ui = [uT

i , 0]T .

Algorithm 1 Solving (16) via the ADMM
Input:

Image I and template T , positions of the feature points x
in T , initial displacement vector u0, parameters γ, λ.

Initialize: C = 0, Y1 = 0, Y2 = 0, y = 0, A(u0), W(u0),

ρ0, ρm, η, ǫ
while not converged do

1. Update Z, E, C, u and m in close-form via Eqs. 18-
22, respectively;
2. Update A(u) and W(m) with updated u and m;
3. Update the Lagrange multipliers and penalty param-
eter via Eqs. 23- 26;
4. Check the convergence conditions km − Puk∞ ≤
ǫ, kW(m)−W(m)C−Ek∞ ≤ ǫ, and kZ−A(u)k∞ ≤
ǫ;

end while

Output: Displacement vector u, coefﬁcient matrix C.

one of the ﬁve variables u, C, E, Z, m while keeping the
remaining four ﬁxed.

As shown in appendix, the ﬁve subproblems derived
from the augmented Lagrangian are all convex problems
that can be solved efﬁciently in closed-form. These closed-
form solutions can be written as

Z = T γ
ρ

E = T λ
ρ

[A(u) − Y2/ρ] ,

[W − WC + Y1/ρ] ,

C = (I + ρWT W)−1[ρWT (W − E + Y1/ρ)] ,
u = (ρPT P + ρH)−1(g + PT y + ρPT m) ,
M = −(ρG + BQ + T)(λQ + ρI)−1 ,

(18)

(19)

(20)

(21)

(22)

where m = vec(M) is the vectorized form of M, Tα[x] =
sign(x) · max(|x| − α, 0) is the soft-thresholding operator,
and the deﬁnitions of g, H, Q, T are given in appendix.

Finally, the Lagrange multipliers and penalty parameter

can be updated as

Y1 = Y1 + ρ(W − WC − E) ,
Y2 = Y2 + ρ(Z − A(u)) ,
y = y + ρ(m − Pu)

ρ = min(ηρ, ρm) ,

(23)
(24)
(25)
(26)

where η > 1, and ρm is the predeﬁned maximum of ρ.

Our approach to solving (16) is outlined in Algorithm 1.
Note that the problem we are trying to solve is non-convex
in that i) the intensity function I(x; u) is non-convex w.r.t.
u; ii) the optimization problem 16 involves a bilinear term
in an equality constraint. While the ADMM does not
guarantee convergence to the global optimum, it has proven
effective in practice [11].

Algorithm 2 Our Multi-body Feature Tracker
Input:

Image I and template T , positions of the feature points x
in T , initial displacement vector u0, number of pyramid
levels L, parameters γ, λ, ρ, ρm, maxi, ǫ
for ℓ = L − 1 : 0 do

Update u0 ← u0/2ℓ, x ← x0/2ℓ and compute ▽I at
current image pyramid level;
for i = 1 : maxi do

1. Approximate the image intensities with Eq. 11,
and compute τ, P, H according to their deﬁnitions;
2. Update u with Algorithm 1;
3. Check the convergence condition ku − u0k < ǫ;
4. If not converged, update u0 = u.

end for
Update u ← 2ℓu, u0 ← 2ℓu0, and x ← 2ℓx.

end for

Output: Displacement vector u, coefﬁcient matrix C.

3.2.4 Our Complete Multi-body Feature Tracker

In the same spirits as [1], we make use of an image pyramid
to handle large displacements and avoid local optima. The
results obtained at a coarser level ℓ of the pyramid are used
as initialization for the next (ℓ − 1, ﬁner) level. Within each
pyramid level, the initial displacement u0 , where the ﬁrst-
order Taylor approximation is performed, is updated with
the displacement vector of the previous iteration. We iterate
over successive Taylor approximations until the displace-
ment vector does not change signiﬁcantly. Our complete
segmentation-free multi-body feature tracker is outlined in
Algorithm 2.

4. Experiments

To show the beneﬁts of our multi-body feature tracker,
we performed extensive experiments on different se-
quences. In the remainder of this section, we present both
qualitative and quantitative results.

In these experiments, we compare our approach with the
following baselines:
the original KLT tracker (KLT), the
L1-norm KLT tracker (L1-KLT), and the more recent Better
Feature Tracker (BFT) through Subspace Constraints [20].
For the original KLT, we used the Matlab built-in vision
toolbox vision.PointTracker; we implemented the L1-norm
KLT tracker using the same framework as our method by
just disabling the regularization term; and for BFT, we used
the code released by the authors.

Due to the lack of benchmark datasets for feature track-
ing, we make use of motion segmentation datasets where
both the ground-truth tracks and the original videos are

KLT

L1-KLT

BFT

Our Method

Figure 1: Performance of different trackers on the 1RT2TC checkerboard sequence: The red points denote the current
positions of the feature points, and the green lines the motion since the previous frame. Best viewed on screen with zoom-in.

available. Since those videos are typically only provided for
illustration purpose, they are generally highly compressed
and not ideal for reliable feature tracking. This, however,
is not really a problem when one seeks to evaluate feature
tracking methods, since (i) it essentially represents a chal-
lenging scenario; and (ii) all algorithms are evaluated on
the same data. In particular, here, we employed 10 checker-
board (indoor) sequences and 12 cars-and-people (outdoor)
sequences from the well-known Hopkins155 dataset [25].
Moreover, we used another 8 outdoor sequences from the
more recent MTPV dataset [16]. To test the robustness of
the different methods, we added different levels of Gaussian
noise (with variance σ2 = 0.01, 0.02, 0.03, or 0.04)4
to the images. Altogether, this results in 150 evaluation
sequences. The values of the parameters (γ = 1.8 × 104
and λ = 1.0 × 104) were tuned on a separate validation set
and kept unchanged for all our experiments.

To compare the algorithms, we measure the number of
tracking errors, i.e., the number of points that drift from the
ground-truth by more than a certain error tolerance ε. Note
that, in the sequences that we use, the ground-truth was
obtained by the standard KLT tracker and then manually
cleaned up, so the ground-truth itself contains some noise
whose level depends on the scene itself. In particular, we
observed that the ground-truth of the indoor checkerboard
sequences generally has more noise than that of the outdoor
sequences. Therefore, we set a larger error tolerance for
the checkerboard sequences (ε = 10) than for the outdoor
ones (ε = 5). For every sequence, we compute the average
number of incorrectly tracked feature points over all the
frames, and then average this number over the sequences.

4.1. Hopkins Checkerboard Sequences

We ﬁrst evaluated our method and the baselines on the
Hopkins checkerboard sequences, which depict controlled
indoor scenes with multiple rigidly moving objects. The
average number of tracks in this dataset is 202.9 .Gener-
ally, the repetitive texture in these sequences makes feature

4Note that the intensities of the images are normalized to [0, 1]. So the
2 = 0.04 is already big noise and more noise may

Gaussian noise with σ
never occur in practice.

Table 1: Average number of tracking errors (ε = 10) on
the Hopkins checkerboard sequences with noise of different
variances σ2. The lower, the better.

Methods

2 = 0.00
2 = 0.01
2 = 0.02
2 = 0.03
2 = 0.04

σ

σ

σ

σ

σ

KLT
47.63
46.92
45.95
46.59
47.19

L1-KLT
34.69
30.86
29.69
30.16
31.16

BFT
39.68
39.30
38.84
39.16
39.35

Ours
27.77
27.32
27.13
28.18
27.21

tracking more ambiguous and thus harder. However, in this
experiment, we show that our multi-body feature tracker is
more robust to this ambiguity. To provide a fair comparison,
we used the same patch size (7 × 7) and the same number of
image pyramid levels (4) for all the methods. Furthermore,
we initialized all the tracking methods with the ground-truth
locations of the feature points in the ﬁrst frame.

From Table 1, we can see that the L1-KLT tracker
consistently achieves better results than the original KLT
tracker and than BFT. Our algorithm, however, consistently
outperforms L1-KLT, which clearly evidences the beneﬁts
of incorporating our multi-body prior. We observed that
BFT generally fails to track moving objects, as illustrated
in Fig.1. This is mainly because BFT heavily relies on a
good estimate of the global motion, obtained by registering
the entire current image to the previous one. For scenes
with multiple motions, however, global motion estimation
becomes unreliable, thus causing BFT to fail to track the
moving objects. Note that the performance of all the
trackers remain relatively unaffected as the noise level in-
creases. This is mainly due to the fact that the corners in the
checkerboard, while resembling each other, are very strong
features that are robust to noise.

4.2. Hopkins Car-and-People Sequences

We then evaluated the algorithms on the Hopkins Car-
and-People sequences, depicting real-world outdoor scenes
with multiple rigid motions. The number of tracks provided
by the ground-truth ranges from 147 to 548 with an average
of 369. Here, for all the methods, we used the same patch
size and image pyramid levels as in the previous experi-

Table 2: Average number of tracking errors (ε = 5) on the
Hopkins Car-and-People sequences with noise of different
variances σ2. The lower, the better.

Methods

2 = 0.00
2 = 0.01
2 = 0.02
2 = 0.03
2 = 0.04

σ

σ

σ

σ

σ

KLT
21.71
34.59
54.95
76.02
95.17

L1-KLT
24.28
29.31
36.32
46.49
56.92

BFT
49.13
51.69
54.63
57.57
58.36

Ours
16.14
18.82
26.56
33.80
42.43

ment, and initialized the feature points with their ground-
truth locations in the ﬁrst frame. The average number of
tracking errors for the different methods under different
image noise level is reported in Table 2. Again, our multi-
body feature tracker achieves the lowest tracking error
compared to the baselines, which conﬁrms the robustness
of our method.

4.3. MTPV Sequences

We further tested our method on the MTPV sequences,
which provide images of higher quality and resolution5 than
the Hopkins dataset and contains sequences with strong
perspective effects. By contrast, however,
this dataset
contains some outliers and missing data. For evaluation
purpose, i.e., to create a complete and accurate ground-
truth, we discarded the outliers and missing data. Since
the image resolution is higher in this dataset, we used a
larger patch size of 13 × 13 for all the methods. The results
of all the algorithms are provided in Table 3. Note that
we still outperform all the baselines for most noise levels,
with the exception of BFT for σ2 = 0.04. We believe that
the slightly less impressive gap between our approach and
the baselines, in particular BFT, is due to the fact that the
feature points in this dataset are often dominated by the
background. See Fig. 2 for typical examples of this dataset.

Table 3: Average number of tracking errors (ε = 5) on the
MTPV sequences with noise of different variances σ2. The
lower, the better.

Methods

2 = 0.00
2 = 0.01
2 = 0.02
2 = 0.03
2 = 0.04

σ

σ

σ

σ

σ

KLT
3.07
17.76
28.39
40.61
47.69

L1-KLT
13.34
22.12
27.26
35.53
38.93

BFT
6.83
8.84
11.17
11.26
12.34

Ours
2.34
3.87
6.94
9.92
13.22

4.4. KITTI Sequence

To evaluate the algorithms on realistic, high-quality
images, we employed four sequences6 from KITTI [9],

5Note, however, that they are still highly compressed and not well-

suited for tracking, as pointed out in the readme ﬁle of the dataset.

62011 09 26 drive 0018, 2011 09 26 drive 0051, 2011 09 26 drive

0056, and 2011 09 28 drive 0016.

Figure 2: The MAN and MONK sequences of the MTPV
dataset: The feature points are marked as red. Note that
the number of points on the walking man and monk is much
smaller than on the background.

depicting a street/trafﬁc scene with multiple motions. Since
no ground-truth trajectories are provided with this data, to
obtain quantitative results, we took 10 consecutive frames
from each sequence, applied the KLT tracker to them, and
manually cleaned up the results to get ground-truth trajec-
tories with an average 177 points per sequence. The results
of this experiments for different levels of noise added to the
input are reported in Table 4, and Fig. 3 shows a qualitative
comparison of the algorithms. Note that our method also
outperforms the baselines on this data.

Table 4: Average number of tracking errors (ε = 5) on the
KITTI sequences with different noise variances σ2. The
lower, the better.

Methods

2 = 0.01
2 = 0.02
2 = 0.03
2 = 0.04

σ

σ

σ

σ

KLT
21.43
24.35
31.15
34.43

L1-KLT
22.05
22.85
26.88
29.23

BFT
27.48
27.80
27.85
27.75

Ours
14.18
16.70
17.70
20.33

4.5. Frame-by-Frame Motion Segmentation

In our formulation, we optimize our energy function
w.r.t. two variables: the displacement vector u and the self-
expressiveness coefﬁcients C. While the vector u provides
the tracking results, the matrix C, as in the subspace clus-
tering literature, can be used to build an afﬁnity matrix for
spectral clustering, and thus, if we assume that the number
of motions is known a priori,
lets us perform motion
segmentation. In other words, our method can also be inter-
preted as simultaneous feature tracking and frame-by-frame
motion segmentation.
In this experiment, we therefore
aim to evaluate the frame-by-frame motion segmentation
accuracy of our method. Since, To the best of our knowl-
edge, no existing motion segmentation methods perform
feature tracking and frame-by-frame motion segmentation
jointly, we compare our results with the following two-steps
baselines: ﬁrst, we ﬁnd the tracks by KLT or L1-KLT and
form the epipolar subspaces as in Eq. 7; second, we apply a
subspace clustering method, i.e., Sparse Subspace Cluster-

KLT

BFT

L1-KLT

Our Method

Figure 3: Performance of different trackers on the KITTI sequence: The red points denote the current positions of the
feature points, and the green lines the motion since the previous frame. As evidenced by the regions highlighted with a blue
rectangle, L1-KLT and BFT make more tracking errors than our approach. Best viewed on screen with zoom-in.

Table 5: Average error rate (in %) of two-frame motion
segmentation on the 22 Hopkins sequences with noise of
different variances σ2. The lower, the better.

Methods
σ2 = 0.00
σ2 = 0.01
σ2 = 0.02
σ2 = 0.03
σ2 = 0.04

KLT+SSC

KLT+EDSC

L1+SSC

L1+EDSC

19.76
19.76
19.21
20.63
20.38

20.57
20.61
20.99
20.69
19.82

18.71
19.61
21.02
22.21
21.35

19.11
20.41
21.92
20.48
20.80

Ours
8.97
9.35
9.33
9.89
11.26

ing (SSC) or Efﬁcient Dense Subspace Clustering (EDSC),
to perform motion segmentation. This results in four base-
lines denoted by KLT+SSC, KLT+EDSC, L1+SSC [16] and
L1+EDSC. The results of motion segmentation on the 22
Hopkins sequences used previously are shown in Table 5.
These results clearly evidence that our method outperforms
the baselines signiﬁcantly in terms of motion segmentation.

5. Conclusion and Future Work

In this paper, we have introduced a novel feature tracker
that incorporates a multi-body rigidity prior into feature
tracking. To this end, we have derived epipolar subspace
constraints that prevent us from having to compute funda-
mental matrices and motion assignments explicitly. Our
formulation only involves a series of convex subproblems,
all of which have closed-from solutions. We have demon-
strated the effectiveness of our method via extensive exper-
iments on indoor and outdoor sequences.

While adding global rigidity constraints (be it the low-
rank or the epipolar subspace constraints) to the local KLT
tracker improves robustness, it comes with some compu-
tational overhead. The current Matlab implementation of
our method runs at about 1 frame per second for 200 points
on a single core CPU (3.4GHZ), which is on par with

BFT [20], but slower than the original KLT tracker.
In
the future, we will therefore study how to speed up our
approach, for instance by exploiting the GPU. Furthermore,
our current model assumes that each patch undergoes only
translation between consecutive frames. We therefore plan
to investigate the use of more accurate models, such as
afﬁne transformations.

Appendix: ADMM Derivations

Given the augmented Lagrangian in Eq. 18, the ADMM

subproblems can be derived as follows:
(1) Computing Z can be expressed as the convex program

min

Z

γ
ρ

kZk1 +

1
2

kZ − (A(u) − Y2/ρ)k2

F ,

(27)

which can be solved in closed-form by element-wise thresh-
olding [4], which directly yields Eq. 18.
(2) Similarly, computing E translates to

min

E

λ
ρ

kEk1+

1
2

kE−(W(m)−W(m)C+Y1/ρ)k2

F , (28)

which again can be solved by element-wise thresholding,
thus yielding Eq. 19.
(3) To compute C, we have the least-squares problem

min

C

1
2

kCk2

F +

ρ
2

kW(m)C−W(m) +E−Y1/ρk2

F , (29)

which can easily be solved in closed-form as in Eq. 20.
(4) Computing u requires solving the problem

min

u

ρ
2

kPu − m − y/ρk2

2 − gT u +

ρ
2

uT Hu ,

(30)

where g is a column vector deﬁned as

g = (cid:18) · · · ,Xj (cid:0)Y2ij + ρ(τij + Zij)(cid:1)▽Iij , · · ·(cid:19)T

∈ R2N ,

and H is a sparse block-diagonal matrix expressed as

H =

...





▽I T
ij

▽Iij

Pj





...

∈ R2N ×2N .

This subproblem has again a closed-form solution given by
Eq. 21. Note that P and H are sparse matrices, so u can be
computed efﬁciently by sparse matrix techniques.
(5) While solving for m may not seem straightforward, we
show below that it is nothing but a least-squares problem.
The subproblem w.r.t. m can be written as

min

m

λ
2

kW(m) −W(m)Ck2

F +

ρ
2

km−Pu+y/ρk2

2 . (31)

Let M, B, G ∈ R9×N be the matrix forms of m, b, y/ρ −
Pu, respectively. Then, (31) can be equivalently written as

min

M

λ
2

kM(I − C) + B(I − C)k2

F +

ρ
2

kM + Gk2

F . (32)

This again leads to a closed-form solution for M given by
Eq. 22, where Q = (I − C)(I − C)T and T = (Y1/ρ −
E)(I − CT ).

References

[1] J.-Y. Bouguet. Pyramidal implementation of the afﬁne lucas
kanade feature tracker description of the algorithm. Techni-
cal Report, Intel Microprocessor Research Labs, 2001. 1,
5

[2] S. Boyd, N. Parikh, E. Chu, B. Peleato, and J. Eckstein.
Distributed optimization and statistical learning via the al-
ternating direction method of multipliers. Foundations and
Trends R(cid:13) in Machine Learning, 3(1):1–122, 2011. 4

[3] A. Buchanan and A. Fitzgibbon. Combining local and global
motion models for feature point tracking. In CVPR, 2007. 1,
2

[4] J.-F. Cai, E. J. Cand`es, and Z. Shen. A singular value
thresholding algorithm for matrix completion. SIAM Journal
on Optimization, 20(4):1956–1982, 2010. 8

[5] J. P. Costeira and T. Kanade. A multibody factorization
method for independently moving objects. IJCV, 29(3):159–
179, 1998. 2

[6] E. Elhamifar and R. Vidal. Sparse subspace clustering:
Algorithm, theory, and applications. PAMI, 35(11):2765–
2781, 2013. 2, 3, 4

[7] R. Garg, L. Pizarro, D. Rueckert, and L. Agapito. Dense
multi-frame optic ﬂow for non-rigid objects using subspace
constraints. In ACCV, 2010. 2

[8] R. Garg, A. Roussos, and L. Agapito. A variational ap-
proach to video registration with subspace constraints. IJCV,
104(3):286–314, 2013. 2

[9] A. Geiger, P. Lenz, and R. Urtasun. Are we ready for
In

autonomous driving? the kitti vision benchmark suite.
CVPR, 2012. 7

[10] R. I. Hartley and A. Zisserman. Multiple View Geometry
in Computer Vision. Cambridge University Press, ISBN:
0521540518, second edition, 2004. 3

[11] P. Ji, H. Li, M. Salzmann, and Y. Dai. Robust motion
In ECCV.

segmentation with unknown correspondences.
2014. 5

[12] P. Ji, M. Salzmann, and H. Li. Efﬁcient dense subspace

clustering. In WACV, 2014. 2, 3, 4

[13] P. Ji, M. Salzmann, and H. Li. Shape interaction matrix
revisited and robustiﬁed: Efﬁcient subspace clustering with
corrupted and incomplete data. In ICCV, 2015. 2

[14] P. Ji, Y. Zhong, H. Li, and M. Salzmann. Null space
clustering with applications to motion segmentation and face
clustering. In ICIP, 2014. 2

[15] H. Li. Two-view motion segmentation from linear program-

ming relaxation. In CVPR, 2007. 2

[16] Z. Li, J. Guo, L.-F. Cheong, and S. Z. Zhou. Perspective
motion segmentation via collaborative clustering. In ICCV,
2013. 2, 3, 6, 8

[17] G. Liu, Z. Lin, S. Yan, J. Sun, Y. Yu, and Y. Ma. Robust
recovery of subspace structures by low-rank representation.
PAMI, 35(1):171–184, 2013. 4

[18] B. D. Lucas, T. Kanade, et al. An iterative image registration
In IJCAI,

technique with an application to stereo vision.
volume 81, pages 674–679, 1981. 1

[19] T. Piccini, M. Persson, K. Nordberg, M. Felsberg, and
R. Mester. Good edgels to track: Beating the aperture
problem with epipolar geometry. In ECCV Workshops, 2014.
2

[20] B. Poling, G. Lerman, and A. Szlam. Better feature tracking

through subspace constraints. In CVPR, 2014. 1, 2, 3, 5, 8

[21] J. Shi and C. Tomasi. Good features to track. In CVPR, 1994.

1

[22] R. Szeliski. Computer vision: algorithms and applications.

Springer Science & Business Media, 2010. 2

[23] C. Tomasi and T. Kanade. Detection and tracking of point
features. School of Computer Science, Carnegie Mellon
Univ. Pittsburgh, 1991. 1

[24] L. Torresani and C. Bregler. Space-time tracking. In ECCV,

2002. 1, 2

[25] R. Tron and R. Vidal. A benchmark for the comparison of

3-d motion segmentation algorithms. In CVPR, 2007. 2, 6

[26] L. Valgaerts, A. Bruhn, and J. Weickert. A variational model
for the joint recovery of the fundamental matrix and the
optical ﬂow. In Pattern Recognition, pages 314–324. 2008.
2

[27] R. Vidal, Y. Ma, and S. Sastry. Generalized principal com-
ponent analysis (GPCA). PAMI, 27(12):1945–1959, 2005.
2

[28] R. Vidal, S. Soatto, Y. Ma, and S. Sastry. Segmentation of
dynamic scenes from the multibody fundamental matrix. In
CVPR, 2001. 2

[29] A. Wedel, D. Cremers, T. Pock, and H. Bischof. Structure-
and motion-adaptive regularization for high accuracy optic
ﬂow. In ICCV, 2009. 2

[30] A. Wedel, T. Pock, J. Braun, U. Franke, and D. Cremers.
In

Duality TV-L1 ﬂow with fundamental matrix prior.
IVCNZ, 2008. 2

[31] J. Yan and M. Pollefeys. A general framework for motion
segmentation: Independent, articulated, rigid, non-rigid, de-
generate and non-degenerate. In ECCV, 2006. 2

