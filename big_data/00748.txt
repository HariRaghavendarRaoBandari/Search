Continuous Deep Q-Learning with Model-based Acceleration

Shixiang Gu1 2 3
Timothy Lillicrap4
Ilya Sutskever3
Sergey Levine3
1University of Cambridge 2Max Planck Institute for Intelligent Systems 3Google Brain 4Google DeepMind

SG717@CAM.AC.UK
COUNTZERO@GOOGLE.COM
ILYASU@GOOGLE.COM
SLEVINE@GOOGLE.COM

6
1
0
2

 
r
a

M
2

 

 
 
]

G
L
.
s
c
[
 
 

1
v
8
4
7
0
0

.

3
0
6
1
:
v
i
X
r
a

Abstract

Model-free reinforcement learning has been suc-
cessfully applied to a range of challenging prob-
lems, and has recently been extended to han-
dle large neural network policies and value func-
tions. However, the sample complexity of model-
free algorithms, particularly when using high-
dimensional function approximators,
tends to
limit their applicability to physical systems. In
this paper, we explore algorithms and repre-
sentations to reduce the sample complexity of
deep reinforcement learning for continuous con-
trol tasks. We propose two complementary tech-
niques for improving the efﬁciency of such algo-
rithms. First, we derive a continuous variant of
the Q-learning algorithm, which we call normal-
ized adantage functions (NAF), as an alternative
to the more commonly used policy gradient and
actor-critic methods. NAF representation allows
us to apply Q-learning with experience replay to
continuous tasks, and substantially improves per-
formance on a set of simulated robotic control
tasks. To further improve the efﬁciency of our
approach, we explore the use of learned models
for accelerating model-free reinforcement learn-
ing. We show that iteratively reﬁtted local lin-
ear models are especially effective for this, and
demonstrate substantially faster learning on do-
mains where such models are applicable.

1. Introduction
Model-free reinforcement learning (RL) has been success-
fully applied to a range of challenging problems (Kober
& Peters, 2012; Deisenroth et al., 2013), and has recently
been extended to handle large neural network policies and

value functions (Mnih et al., 2015; Lillicrap et al., 2016;
Wang et al., 2015; Heess et al., 2015; Hausknecht & Stone,
2015; Schulman et al., 2015). This makes it possible to
train policies for complex tasks with minimal feature and
policy engineering, using the raw state representation di-
rectly as input to the neural network. However, the sample
complexity of model-free algorithms, particularly when us-
ing very high-dimensional function approximators, tends to
be high (Schulman et al., 2015), which means that the ben-
eﬁt of reduced manual engineering and greater generality
is not felt in real-world domains where experience must be
collected on real physical systems, such as robots and au-
tonomous vehicles. In such domains, the methods of choice
have been efﬁcient model-free algorithms that use more
suitable, task-speciﬁc representations (Peters et al., 2010;
Deisenroth et al., 2013), as well as model-based algorithms
that learn a model of the system with supervised learning
and optimize a policy under this model (Deisenroth & Ras-
mussen, 2011; Levine et al., 2015). Using task-speciﬁc
representations dramatically improves efﬁciency, but limits
the range of tasks that can be learned and requires greater
domain knowledge. Using model-based RL also improves
efﬁciency, but limits the policy to only be as good as the
learned model. For many real-world tasks, it may be easier
to represent a good policy than to learn a good model. For
example, a simple robotic grasping behavior might only re-
quire closing the ﬁngers at the right moment, while the cor-
responding dynamics model requires learning the complex-
ities of rigid and deformable bodies undergoing frictional
contact. It is therefore desirable to bring the generality of
model-free deep reinforcement learning into real-world do-
mains by reducing their sample complexity.
In this paper, we propose two complementary techniques
for improving the efﬁciency of deep reinforcement learn-
ing in continuous control domains: we derive a variant of
Q-learning that can be used in continuous domains, and
we propose a method for combining this continuous Q-
learning algorithm with learned models so as to accelerate
learning while preserving the beneﬁts of model-free RL.
Model-free reinforcement learning in domains with contin-

Continuous Deep Q-Learning with Model-based Acceleration

uous actions is typically handled with policy search meth-
ods (Peters & Schaal, 2006; Peters et al., 2010). Integrat-
ing value function estimation into these techniques results
in actor-critic algorithms (Hafner & Riedmiller, 2011; Lil-
licrap et al., 2016; Schulman et al., 2015), which combine
the beneﬁts of policy search and value function estimation,
but at the cost of training two separate function approxi-
mators. Our proposed Q-learning algorithm for continu-
ous domains, which we call normalized advantage func-
tions (NAF), avoids the need for a second actor or policy
function, resulting in a simpler algorithm. The simpler op-
timization objective and the choice of value function pa-
rameterization result in an algorithm that is substantially
more sample-efﬁcient when used with large neural network
function approximators on a range of continuous control
domains.
Beyond deriving an improved model-free deep reinforce-
ment learning algorithm, we also seek to incorporate ele-
ments of model-based RL to accelerate learning, without
giving up the strengths of model-free methods. One ap-
proach is for off-policy algorithms such as Q-learning to in-
corporate off-policy experience produced by a model-based
planner. However, while this solution is a natural one, our
empirical evaluation shows that it is ineffective at accelerat-
ing learning. As we discuss in our evaluation, this is due in
part to the nature of value function estimation algorithms,
which must experience both good and bad state transitions
to accurately model the value function landscape. We pro-
pose an alternative approach to incorporating learned mod-
els into our continuous-action Q-learning algorithm based
on imagination rollouts: on-policy samples generated un-
der the learned model, analogous to the Dyna-Q method
(Sutton, 1990). We show that this is extremely effective
when the learned dynamics model perfectly matches the
true one, but degrades dramatically with imperfect learned
models. However, we demonstrate that iteratively ﬁtting
local linear models to the latest batch of on-policy or off-
policy rollouts provides sufﬁcient local accuracy to achieve
substantial improvement using short imagination rollouts
in the vicinity of the real-world samples.
Our paper provides three main contributions: ﬁrst, we de-
rive and evaluate a Q-function representation that allows
for effective Q-learning in continuous domains. Second,
we evaluate several na¨ıve options for incorporating learned
models into model-free Q-learning, and we show that they
are minimally effective on our continuous control tasks.
Third, we propose to combine locally linear models with
local on-policy imagination rollouts to accelerate model-
free continuous Q-learning, and show that this produces a
large improvement in sample complexity. We evaluate our
method on a series of simulated robotic tasks and compare
to prior methods.

2. Related Work
Deep reinforcement learning has received considerable at-
tention in recent years due to its potential to automate the
design of representations in RL. Deep reinforcement learn-
ing and related methods have been applied to learn policies
to play Atari games (Mnih et al., 2015; Schaul et al., 2015)
and perform a wide variety of simulated and real-world
robotic control tasks (Hafner & Riedmiller, 2011; Lillicrap
et al., 2016; Levine & Koltun, 2013; de Bruin et al., 2015;
Hafner & Riedmiller, 2011). While the majority of deep
reinforcement learning methods in domains with discrete
actions, such as Atari games, are based around value func-
tion estimation and Q-learning (Mnih et al., 2015), con-
tinuous domains typically require explicit representation of
the policy, for example in the context of a policy gradient
algorithm (Schulman et al., 2015). If we wish to incorpo-
rate the beneﬁts of value function estimation into contin-
uous deep reinforcement learning, we must typically use
two networks: one to represent the policy, and one to rep-
resent the value function (Schulman et al., 2015; Lillicrap
et al., 2016). In this paper, we instead describe how the
simplicity and elegance of Q-learning can be ported into
continuous domains, by learning a single network that out-
puts both the value function and policy. Our Q-function
representation is related to dueling networks (Wang et al.,
2015), though our approach applies to continuous action
domains. Our empirical evaluation demonstrates that our
continuous Q-learning algorithm achieves faster and more
effective learning on a set of benchmark tasks compared
to continuous actor-critic methods, and we believe that the
simplicity of this approach will make it easier to adopt in
practice. Our Q-learning method is also related to the work
of Rawlik et al. (2013), but the form of our Q-function up-
date is more standard.
As in standard RL, model-based deep reinforcement learn-
ing methods have generally been more efﬁcient (Li &
Todorov, 2004; Watter et al., 2015; Li & Todorov, 2004;
Wahlstr¨om et al., 2015; Levine & Koltun, 2013), while
model-free algorithms tend to be more generally applica-
ble but substantially slower (Schulman et al., 2015; Lilli-
crap et al., 2016). Combining model-based and model-free
learning has been explored in several ways in the literature.
The method closest to our imagination rollouts approach
is Dyna-Q (Sutton, 1990), which uses simulated experi-
ence in a learned model to supplement real-world on-policy
rollouts. As we show in our evaluation, using Dyna-Q
style methods to accelerate model-free RL is very effective
when the learned model perfectly matches the true model,
but degrades rapidly as the model becomes worse. We
demonstrate that using iteratively reﬁtted local linear mod-
els achieves substantially better results with imagination
rollouts than more complex neural network models. We
hypothesize that this is likely due to the fact that the more

Continuous Deep Q-Learning with Model-based Acceleration

expressive models themselves require substantially more
data, and that otherwise efﬁcient algorithms like Dyna-Q
are vulnerable to poor model approximations.

error, where we ﬁx the target yt:
L(θQ) = Ext∼ρβ ,ut∼β,rt∼E[(Q(xt, ut|θQ) − yt)2]

yt = r(xt, ut) + γQ(xt+1, µ(xt+1))

(2)

3. Background
In reinforcement learning, the goal is to learn a policy to
control a system with states x ∈ X and actions u ∈ U
in environment E, so as to maximize the expected sum of
returns according to a reward function r(x, u). The dy-
namical system is deﬁned by an initial state distribution
p(x1) and a dynamics distribution p(xt+1|xt, ut). At each
time step t ∈ [1, T ], the agent chooses an action ut ac-
cording to its current policy π(ut|xt), and observes a re-
ward r(xt, ut). The agent then experiences a transition to a
new state sampled from the dynamics distribution, and we
can express the resulting state visitation frequency of the
i=t γ(i−t)r(xi, ui),
the goal is to maximize the expected sum of returns, given
by R = Eri≥1,xi≥1∼E,ui≥1∼π[R1], where γ is a discount
factor that prioritizes earlier rewards over later ones. With
γ < 1, we can also set T = ∞, though we use a ﬁnite hori-
zon for all of the tasks in our experiments. The expected re-
turn R can be optimized using a variety of model-free and
model-based algorithms. In this section, we review several
of these methods that we build on in our work.

policy π as ρπ(xt). Deﬁne Rt = (cid:80)T

Model-Free Reinforcement Learning. When the sys-
tem dynamics p(xt+1|xt, ut) are not known, as is often
the case with physical systems such as robots, policy gra-
dient methods (Peters & Schaal, 2006) and value function
or Q-function learning with function approximation (Sut-
ton et al., 1999) are often preferred. Policy gradient meth-
ods provide a simple, direct approach to RL, which can
succeed on high-dimensional problems, but potentially re-
quires a large number of samples (Schulman et al., 2015;
2016). Off-policy algorithms that use value or Q-function
approximation can in principle achieve better data efﬁ-
ciency (Lillicrap et al., 2016). However, adapting such
methods to continuous tasks typically requires optimizing
two function approximators on different objectives. We in-
stead build on standard Q-learning, which has a single ob-
jective. We summarize Q-learning in this section. The Q
function Qπ(xt, ut) corresponding to a policy π is deﬁned
as the expected return from xt after taking action ut and
following the policy π thereafter:

Qπ(xt, ut) = Eri≥t,xi>t∼E,ui>t∼π[Rt|xt, ut]

(1)

learns

a

greedy

policy
Q-learning
to
µ(xt) = arg maxu Q(xt, ut), which corresponds
π(ut|xt) = δ(ut = µ(xt)).
Let θQ parametrize the
action-value function, and β be an arbitrary exploration
policy, the learning objective is to minimize the Bellman

deterministic

For continuous action problems, Q-learning becomes difﬁ-
cult, because it requires maximizing a complex, nonlinear
function at each update. For this reason, continuous do-
mains are often tackled using actor-critic methods (Konda
& Tsitsiklis, 1999; Hafner & Riedmiller, 2011; Silver et al.,
2014; Lillicrap et al., 2016), where a separate parame-
terized “actor” policy π is learned in addition to the Q-
function or value function “critic,” such as Deep Determin-
istic Policy Gradient (DDPG) algorithm (Lillicrap et al.,
2016).
In order to describe our method in the following sections, it
will be useful to also deﬁne the value function V π(xt, ut)
and advantage function Aπ(xt, ut) of a given policy π:

V π(xt) = Eri≥t,xi>t∼E,ui≥t∼π[Rt|xt, ut]
Aπ(xt, ut) = Qπ(xt, ut) − V π(xt).

(3)

Model-Based Reinforcement Learning.
If we know the
dynamics p(xt+1|xt, ut), or if we can approximate them
with some learned model ˆp(xt+1|xt, ut), we can use
model-based RL and optimal control. While a wide range
of model-based RL and control methods have been pro-
posed in the literature (Deisenroth et al., 2013; Kober &
Peters, 2012), two are particularly relevant for this work:
iterative LQG (iLQG) (Li & Todorov, 2004) and Dyna-
Q (Sutton, 1990). The iLQG algorithm optimizes tra-
jectories by iteratively constructing locally optimal lin-
ear feedback controllers under a local linearization of the
dynamics ˆp(xt+1|xt, ut) = N (fxtxt + futut, Ft) and a
quadratic expansion of the rewards r(xt, ut) (Tassa et al.,
2012). Under linear dynamics and quadratic rewards, the
action-value function Q(xt, ut) and value function V (xt)
are locally quadratic and can be computed by dynamics
programming. The optimal policy can be derived ana-
lytically from the quadratic Q(xt, ut) and V (xt) func-
tions, and corresponds to a linear feedback controller
g(xt) = ˆut + kt + Kt(xt − ˆxt), where kt is an open-
loop term, Kt is the closed-loop feedback matrix, and ˆxt
and ˆut are the states and actions of the nominal trajectory,
which is the average trajectory of the controller. Employing
the maximum entropy objective (Levine & Koltun, 2013),
we can also construct a linear-Gaussian controller, where
c is a scalar to adjust for arbitrary scaling of the reward
magnitudes:

πiLQG
t

(ut|xt) = N ( ˆut + kt + Kt(xt − ˆxt),−cQ−1

u,ut)
(4)

When the dynamics are not known, a particularly effective
way to use iLQG is to combine it with learned time-varying

Continuous Deep Q-Learning with Model-based Acceleration

linear models ˆp(xt+1|xt, ut). In this variant of the algo-
rithm, trajectories are sampled from the controller in Equa-
tion (4) and used to ﬁt time-varying linear dynamics with
linear regression. These dynamics are then used with iLQG
to obtain a new controller, typically using a KL-divergence
constraint to enforce a trust region, so that the new con-
troller doesn’t deviate too much from the region in which
the samples were generated (Levine & Abbeel, 2014).
Besides enabling iLQG and other planning-based algo-
rithms, a learned model of the dynamics can allow a model-
free algorithm to generate synthetic experience by perform-
ing rollouts in the learned model. A particularly relevant
method of this type is Dyna-Q (Sutton, 1990), which per-
forms real-world rollouts using the policy π, and then gen-
erates synthetic rollouts using a model learned from these
samples. The synthetic rollouts originate at states visited
by the real-world rollouts, and serve as supplementary data
for a variety of possible reinforcement learning algorithms.
However, most prior Dyna-Q methods have focused on rel-
atively small, discrete domains. In Section 5, we describe
how our method can be extended into a variant of Dyna-Q
to achieve substantially faster learning on a range of con-
tinuous control tasks with complex neural network policies,
and in Section 6, we empirically analyze the sensitivity of
this method to imperfect learned dynamics models.

4. Continuous Q-Learning with Normalized

Advantage Functions

We ﬁrst propose a simple method to enable Q-learning in
continuous action spaces with deep neural networks, which
we refer to as normalized advantage functions (NAF). The
idea behind normalized advantage functions is to represent
the Q-function Q(xt, ut) in Q-learning in such a way that
its maximum, arg maxu Q(xt, ut), can be determined eas-
ily and analytically during the Q-learning update. While a
number of representations are possible that allow for ana-
lytic maximization, the one we use in our implementation
is based on a neural network that separately outputs a value
function term V (x) and an advantage term A(x, u), which
is parameterized as a quadratic function of nonlinear fea-
tures of the state:
Q(x, u|θQ) = A(x, u|θA) + V (x|θV )
A(x, u|θA) = − 1
2

(u − µ(x|θµ))T P (x|θP )(u − µ(x|θµ))

a

is

state-dependent,

P (x|θP )
positive-deﬁnite
square matrix, which is parametrized by P (x|θP ) =
L(x|θP )L(x|θP )T , where L(x|θP ) is a lower-triangular
matrix whose entries come from a linear output layer of
a neural network, with the diagonal terms exponentiated.
While this representation is more restrictive than a general
neural network function, since the Q-function is quadratic

in u, the action that maximizes the Q-function is always
given by µ(x|θµ). We use this representation with a deep
Q-learning algorithm analogous to Mnih et al. (2015),
using target networks and a replay buffers as described
by (Lillicrap et al., 2016). NAF, given by Algorithm 1, is
considerably simpler than DDPG.

Algorithm 1 Continuous Q-Learning with NAF

Randomly initialize normalized Q network Q(x, u|θQ).
Initialize target network Q(cid:48) with weight θQ(cid:48) ← θQ.
Initialize replay buffer R ← ∅.
for episode=1, M do

Initialize a random process N for action exploration
Receive initial observation state x1 ∼ p(x1)
for t=1, T do

Select action ut = µ(xt|θµ) + Nt
Execute ut and observe rt and xt+1
Store transition (xt, ut, rt, xt+1) in R
for iteration=1, I do

(cid:80)
Sample a random minibatch of m transitions from R
Set yi = ri + γV (cid:48)(xi+1|θQ(cid:48)
i(yi −
Update θQ by minimizing the loss: L = 1
Q(xi, ui|θQ))2
N
Update the target network: θQ(cid:48) ← τ θQ + (1 − τ )θQ(cid:48)

)

end for

end for

end for

Decomposing Q into an advantage term A and a state-
value term V was suggested by Baird III (1993); Harmon
& Baird III (1996), and was recently explored by Wang
et al. (2015) for discrete action problems. Normalized
action-value functions have also been proposed by Raw-
lik et al. (2013) in the context of an alternative temporal
difference learning algorithm. However, our method is the
ﬁrst to combine such representations with deep neural net-
works into an algorithm that can be used to learn policies
for a range of challenging continuous control tasks.
In
general, A does not need to be quadratic, and exploring
other parametric forms such as multimodal distributions is
an interesting avenue for future work. The appendix pro-
vides details on adaptive exploration rule derivation with
experimental results, and a variational interpretation of Q-
learning which gives an intuitive explanation of the behav-
ior of NAF that conforms with empirical results.

5. Accelerating Learning with Imagination

Rollouts

While NAF provides some advantages over actor-critic
model-free RL methods in continuous domains, we can
improve their data efﬁciency substantially under some ad-
ditional assumptions by exploiting learned models. We
will show that incorporating a particular type of learned
model into Q-learning with NAFs signiﬁcantly improves

Continuous Deep Q-Learning with Model-based Acceleration

sample efﬁciency, while still allowing the ﬁnal policy to be
ﬁnetuned with model-free learning to achieve good perfor-
mance without the limitations of imperfect models.

5.1. Model-Guided Exploration

One natural approach to incorporating a learned model into
an off-policy algorithm such as Q-learning is to use the
learned model to generate good exploratory behaviors us-
ing planning or trajectory optimization. To evalaute this
idea, we utilize the iLQG algorithm to generate good tra-
jectories under the model, and then mix these trajectories
together with on-policy experience by appending them to
the replay buffer.
Interestingly, we show in our evalua-
tion that, even when planning under the true model, the im-
provement obtained from this approach is often quite small,
and varies signiﬁcantly across domains and choices of ex-
ploration noise. The intuition behind this result is that off-
policy iLQG exploration is too different from the learned
policy, and Q-learning must consider alternatives in order
to ascertain the optimality of a given action. That is, it’s not
enough to simply show the algorithm good actions, it must
also experience bad actions to understand which actions are
better and which are worse.

5.2. Imagination Rollouts

As discussed in the previous section, incorporating off-
policy exploration from good, narrow distributions, such
as those induced by iLQG, often does not result in signif-
icant improvement for Q-learning. These results suggest
that Q-learning, which learns a policy based on minimizing
temporal differences, inherently requires noisy on-policy
actions to succeed. In real-world domains such as robots
and autonomous vehicles, this can be undesirable for two
reasons: ﬁrst, it suggests that large amounts of on-policy
experience are required in addition to good off-policy sam-
ples, and second, it implies that the policy must be allowed
to make “its own mistakes” during training, which might
involve taking undesirable or dangerous actions that can
damage real-world hardware.
One way to avoid these problems while still allowing for
a large amount of on-policy exploration is to generate syn-
thetic on-policy trajectories under a learned model. Adding
these synthetic samples, which we refer to as imagina-
tion rollouts, to the replay buffer effectively augments the
amount of experience available for Q-learning. The par-
ticular approach we use is to perform rollouts in the real
world using a mixture of planned iLQG trajectories and on-
policy trajectories, with various mixing coefﬁcients evalu-
ated in our experiments, and then generate additional syn-
thetic on-policy rollouts using the learned model from each
state visited along the real-world rollouts. This approach
can be viewed as a variant of the Dyna-Q algorithm (Sut-

ton, 1990). However, while Dyna-Q has primarily been
used with small and discrete systems, we show that using
iteratively reﬁtted linear models allows us to extend the ap-
proach to deep reinforcement learning on a range of con-
tinuous control domains. In some scenarios, we can even
generate all or most of the real rollouts using off-policy
iLQG controllers, which is desirable in safety-critic do-
mains where poorly trained policies might take dangerous
actions. The algorithm is given as Algorithm 2, and is an
extension on Algorithm 1 combining model-based RL.

Algorithm 2 Imagination Rollouts with Fitted Dynamics
and Optional iLQG Exploration

Randomly initialize normalized Q network Q(x, u|θQ).
Initialize target network Q(cid:48) with weight θQ(cid:48) ← θQ.
Initialize replay buffer R ← ∅ and ﬁctional buffer Rf ← ∅.
Initialize additional buffers B ← ∅, Bold ← ∅ with size nT .
Initialize ﬁtted dynamics model M ← ∅.
for episode = 1, M do

Initialize a random process N for action exploration
Receive initial observation state x1
Select µ(cid:48)(x, t) from {µ(x|θµ), πiLQG
bilities {p, 1 − p}
t
for t = 1, T do

Select action ut = µ(cid:48)(xt, t) + Nt
Execute ut and observe rt and xt+1
Store transition (xt, ut, rt, xt+1, t) in R and B
if mod (episode · T + t, m) = 0 and M (cid:54)= ∅ then

(ut|xt)} with proba-

Sample m (xi, ui, ri, xi+1, i) from Bold
Use M to simulate l steps from each sample
Store all ﬁctional transitions in Rf

end if
Sample a random minibatch of m transitions I · l times
from Rf and I times from R, and update θQ, θQ(cid:48)
as in
Algorithm 1 per minibatch.

end for
if Bf is full then

M ← FitLocalLinearDynamics(Bf ) (see Section 5.3)
πiLQG ← iLQG OneStep(Bf ,M) (see appendix)
Bold ← Bf , Bf ← ∅

end if
end for

Imagination rollouts can suffer from severe bias when the
learned model is inaccurate. For example, we found it very
difﬁcult to train nonlinear neural network models for the
dynamics that would actually improve the efﬁciency of Q-
learning when used for imagination rollouts. As discussed
in the following section, we found that using iteratively re-
ﬁtted time-varying linear dynamics produced substantially
better results. In either case, we would still like to preserve
the generality and optimality of model-free RL while deriv-
ing the beneﬁts of model-based learning. To that end, we
observe that most of the beneﬁt of model-based learning is
derived in the early stages of the learning process, when the
policy induced by the neural network Q-function is poor.
As the Q-function becomes more accurate, on-policy be-

Continuous Deep Q-Learning with Model-based Acceleration

havior tends to outperform model-based controllers. We
therefore propose to switch off imagination rollouts after a
given number of iterations.1 In this framework, the imag-
ination rollouts can be thought of as an inexpensive way
to pretrain the Q-function, such that ﬁne-tuning using real
world experience can quickly converge to an optimal solu-
tion.

5.3. Fitting the Dynamics Model

In order to obtain good imagination rollouts and improve
the efﬁciency of Q-learning, we needed to use an effec-
tive and data-efﬁcient model learning algorithm. While
prior methods propose a variety of model classes, including
neural networks (Heess et al., 2015), Gaussian processes
(Deisenroth & Rasmussen, 2011), and locally-weighted re-
gression (Atkeson et al., 1997), we found that we could ob-
tain good results by using iteratively reﬁtted time-varying
linear models, as proposed by Levine & Abbeel (2014). In
this approach, instead of learning a good global model for
all states and actions, we aim only to obtain a good local
model around the latest set of samples. This approach re-
quires a few additional assumptions: namely, it requires the
initial state to be either deterministic or low-variance Gaus-
sian, and it requires the states and actions to all be continu-
ous. To handle domains with more varied initial states, we
can use a mixture of Gaussian initial states with separate
time-varying linear models for each one. The model itself
is given by pt(xt+1|xt, ut) = N (Ft[xt; ut]+ft, Nt). Ev-
ery n episodes, we reﬁt the parameters Ft, ft, and Nt by
ﬁtting a Gaussian distribution at each time step to the vec-
t+1], where i indicates the sample index, and
tors [xi
conditioning this Gaussian on [xt; ut] to obtain the param-
eters of the linear-Gaussian dynamics at that step. We use
n = 5 in our experiments. Although this approach intro-
duces additional assumptions beyond the standard model-
free RL setting, we show in our evaluation that it produces
impressive gains in sample efﬁciency on tasks where it can
be applied.

t; ui

t; xi

6. Experiments
We evaluated our approach on a set of simulated robotic
tasks using the MuJoCo simulator (Todorov et al., 2012).
The tasks were based on the benchmarks described by Lil-
licrap et al. (2016). Although we attempted to replicate
the tasks in previous work as closely as possible, discrep-
ancies in the simulator parameters and the contact model
produced results that deviate slightly from those reported
in prior work. In all experiments, the input to the policy
consisted of the state of the system, deﬁned in terms of joint

1In future work, it would be interesting to select this iteration
adaptively based on the expected relative performance of the Q-
function policy and model-based planning.

angles and root link positions. Angles were often converted
to sine and cosine encoding.
For both our method and the prior DDPG (Lillicrap et al.,
2016) algorithm in the comparisons, we used neural net-
works with two layers of 200 rectiﬁed linear units (ReLU)
to produce each of the output parameters – the Q-function
and policy in DDPG, and the value function V , the advan-
tage matrix L, and the mean µ for NAF. Since Q-learning
was done with a replay buffer, we applied the Q-learning
update 5 times per each step of experience to accelerate
learning (I = 5). To ensure a fair comparison, DDPG also
updates both the Q-function and policy parameters 5 times
per step.

6.1. Normalized Advantage Functions

In this section, we compare NAF and DDPG on 10 repre-
sentative domains from Lillicrap et al. (2016), with three
additional domains: a four-legged 3D ant, a six-joint 2D
swimmer, and a 2D peg (see the appendix for the de-
scriptions of task domains). We found the most sensitive
hyperparameters to be presence or absence of batch nor-
malization, base learning rate for ADAM (Kingma & Ba,
2014) ∈ {1e−4, 1e−3, 1e−2}, and exploration noise scale
∈ {0.1, 0.3, 1.0}. We report the best performance for each
domain. We were unable to achieve good results with
the method of Rawlik et al. (2013) on our domains, likely
due to the complexity of high-dimensional neural network
function approximators.
Figure 1b, Figure 1c, and additional ﬁgures in the appendix
show the performances on the three-joint reacher, peg in-
sertion, and a gripper with mobile base. While the nu-
merical gap in reacher may be small, qualitatively there is
also a very noticeable difference between NAF and DDPG.
DDPG converges to a solution where the deterministic pol-
icy causes the tip to ﬂuctuate continuously around the tar-
get, and does not reach it precisely. NAF, on the other hand,
learns a smooth policy that makes the tip slow down and
stabilize at the target. This difference is more noticeable in
peg insertion and moving gripper, as shown by the much
faster convergence rate to the optimal solution. Precision is
very important in many real-world robotic tasks, and these
result suggest that NAF may be preferred in such domains.
On locomotion tasks, the performance of the two meth-
ods is relatively similar. On the six-joint swimmer task
and four-legged ant, NAF slightly outperforms DDPG in
terms of the convergence speed; however, DDPG is faster
on cheetah and ﬁnds a better policy on walker2d. The loss
in performance of NAF can potentially be explained by
downside of the mode-seeking behavior as analyzed in the
appendix, where it is hard to explore other modes once the
quadratic advantage function ﬁnds a good one. Choosing
a parametric form that is more expressive than a quadratic

Continuous Deep Q-Learning with Model-based Acceleration

(a) Example task domains.

(b) NAF and DDPG on multi-target reacher.

(c) NAF and DDPG on peg insertion.

Figure 1. (a) Task domains: top row from left (manipulation tasks: peg, gripper, mobile gripper), bottom row from left (locomotion
tasks: cheetah, swimmer6, ant). (b,c) NAF vs DDPG results on three-joint reacher and peg insertion. On reacher, the DDPG policy
continuously ﬂuctuates the tip around the target, while NAF stabilizes well at the target.

could be used to address this limitation in future work.
The results on all of the domains are summarized in Ta-
ble 1. Overall, NAF outperformed DDPG on the major-
ity of tasks, particularly manipulation tasks that require
precision and suffer less from the lack of multimodal Q-
functions. This makes this approach particularly promising
for efﬁcient learning of real-world robotic tasks.

Domains
Cartpole
Reacher

Peg

Gripper
GripperM
Canada2d
Cheetah
Swimmer6

Ant

Walker2d

-

-2.1
-2.3
-11
-29
-90
-12
-0.3
-325
-4.8
0.3

DDPG episodes
-0.601
-0.509
-0.950
1.03
-20.2
-4.64
8.23
-174
-2.54
2.96

420
1370
690
2420
1350
1040
1590
220
2450
850

NAF
-0.604
-0.331
-0.438
1.81
-12.4
-4.21
7.91
-172
-2.58
1.85

episodes

190
1260
130
1920
730
900
2390
190
1350
1530

Table 1. Best test rewards of DDPG and NAF policies, and the
episodes it requires to reach within 5% of the best value. “-” de-
notes scores by a random agent.

6.2. Evaluating Best-Case Model-Based Improvement

with True Models

In order to determine how best to incorporate model-based
components to accelerate model-free Q-learning, we tested
several approaches using the ground truth dynamics, to
control for challenges due to model ﬁtting. We evaluated
both of the methods discussed in Section 5:
the use of
model-based planning to generate good off-policy rollouts
in the real world, and the use of the model to generate on-
policy synthetic rollouts.
Figure 2a shows the effect of mixing off-policy iLQG expe-
rience and imagination rollouts on the three-joint reacher.
It is noticeable that mixing the good off-policy experience
does not signiﬁcantly improve data-efﬁciency, while imagi-
nation rollouts always improve data-efﬁciency or ﬁnal per-
formance signiﬁcantly. In the context of Q-learning, this

result is not entirely surprising: Q learning must experi-
ence both good and bad actions in order to determine which
actions are preferred, while the good model-based rollouts
are so far removed from the policy in the early stages of
learning that they provide little useful information. Fig-
ure 2a also evaluates two different variants of the imag-
ination rollouts approach, where the rollouts in the real
world are performed either using the learned policy, or us-
ing model-based planning with iLQG. In the case of this
task, the iLQG rollouts achieve slightly better results, since
the on-policy imagination rollouts sampled around these
off-policy states provide Q-learning with additional infor-
mation about alternative action not taken by the iLQG plan-
ner. In general, we did not ﬁnd that off-policy rollouts were
consistently better than on-policy rollouts across all tasks,
but they did consistently produce good results. Perform-
ing off-policy rollouts with iLQG may be desirable in real-
world domains, where a partially learned policy might take
undesirable or dangerous actions. Further details of these
experiments are provided in the appendix.

6.3. Guided Imagination Rollouts with Fitted

Dynamics

In this section, we evaluated the performance of imagina-
tion rollouts with learned dynamics. As seen in Figure 2b,
we found that ﬁtting time-varying linear models follow-
ing the imagination rollout algorithm is substantially better
than ﬁtting neural network dynamics models for the tasks
we considered. There is a fundamental tension between ef-
ﬁcient learning and expressive models like neural nets. We
cannot hope to learn useful neural network models with a
small number of samples for complex tasks, which makes it
difﬁcult to acquire a good model with fewer samples than
are necessary to acquire a good policy. While the model
is trained with supervised learning, which is typically more
sample efﬁcient, it often needs to represent a more complex
function (e.g. rigid body physics). However, having such
expressive models is more crucial as we move to improve
model accuracy. Figure 2b presents results that compare

Continuous Deep Q-Learning with Model-based Acceleration

(a) NAF on single-target reacher.

(b) NAF on single-target reacher.

(c) NAF on single-target gripper.

Figure 2. Results on NAF with iLQG-guided exploration and imagination rollouts (a) using true dynamics (b,c) using ﬁtted dynamics.
“ImR” denotes using the imagination rollout with l = 10 steps on the reacher and l = 5 steps on the gripper. “iLQG-x” indicates mixing
x fraction of iLQG episodes. Fitted dynamics uses time-varying linear models with sample size n = 5, except “-NN” which ﬁts a neural
network to global dynamics.

ﬁtted neural network models with the true dynamics when
combined with imagination rollouts. These results indicate
that the learned neural network models negate the beneﬁts
of imagination rollouts on our domains.
To evaluate imagination rollouts with ﬁtted time-varying
linear dynamics, we chose single-target variants of two of
the manipulation tasks: the reacher and the gripper task.
The results are shown in Figure 2b and 2c. We found
that imagination rollouts of length 5 to 10 were sufﬁcient
for these tasks to achieve signiﬁcant improvement over the
fully model-free variant of NAF.
Adding imagination rollouts in these domains provided 2-5
factors of improvement in data efﬁciency. In order to re-
tain the beneﬁt of model-free learning and allow the policy
to continue improving once it exceeds the quality possi-
ble under the learned model, we switch off the imagination
rollouts after 130 episodes (20,000 steps) on the gripper
domain. This produces a small transient drop in the perfor-
mance of the policy, but the results quickly improve again.
Switching off the imagination rollouts also ensures that Q-
learning does not diverge after it reaches good values, as
were often observed in the gripper. This suggests that imag-
ination rollouts, in contrast to off-policy exploration dis-
cussed in the previous section, is an effective method for
bootstrapping model-free deep RL.
It should be noted that, although time-varying linear mod-
els combined with imagination rollouts provide a substan-
tial boost in sample efﬁciency, this improvement is pro-
vided at some cost in generality, since effective ﬁtting of
time-varying linear models requires relatively small initial
state distributions. With more complex initial state distri-
butions, we might cluster the trajectories and ﬁt multiple
models to account for different modes. Extending the bene-
ﬁts of time-varying linear models to less restrictive settings
is a promising direction and build on prior work (Levine
et al., 2015; Fu et al., 2015). That said, our results show
that imagination rollouts are a very promising approach to

accelerating model-free learning when combined with the
right kind of dynamics model.

7. Discussion
In this paper, we explored several methods for improv-
ing the sample efﬁciency of model-free deep reinforcement
learning. We ﬁrst propose a method for applying standard
Q-learning methods to high-dimensional, continuous do-
mains, using the normalized advantage function (NAF) rep-
resentation. This allows us to simplify the more standard
actor-critic style algorithms, while preserving the beneﬁts
of nonlinear value function approximation, and allows us to
employ a simple and effective adaptive exploration method.
We show that, in comparison to recently proposed deep
actor-critic algorithms, our method tends to learn faster and
acquires more accurate policies. We further explore how
model-free RL can be accelerated by incorporating learned
models, without sacriﬁcing the optimality of the policy in
the face of imperfect model learning. We show that, al-
though Q-learning can incorporate off-policy experience,
learning primarily from off-policy exploration (via model-
based planning) only rarely improves the overall sample
efﬁciency of the algorithm. We postulate that this caused
by the need to observe both successful and unsuccessful
actions, in order to obtain an accurate estimate of the Q-
function. We demonstrate that an alternative method based
on synthetic on-policy rollouts achieves substantially im-
proved sample complexity, but only when the model learn-
ing algorithm is chosen carefully. We demonstrate that
training neural network models does not provide substan-
tive improvement in our domains, but simple iteratively re-
ﬁtted time-varying linear models do provide substantial im-
provement on domains where they can be applied.

Continuous Deep Q-Learning with Model-based Acceleration

Acknowledgement
We thank Nicholas Heess for helpful discussion and Tom
Erez, Yuval Tassa, Vincent Vanhoucke, and the Google
Brain and DeepMind teams for their support.

References
Atkeson, Christopher G, Moore, Andrew W, and Schaal,
Stefan. Locally weighted learning for control. In Lazy
learning, pp. 75–113. Springer, 1997.

Baird III, Leemon C. Advantage updating. Technical re-

port, DTIC Document, 1993.

de Bruin, Tim, Kober, Jens, Tuyls, Karl, and Babuˇska,
Robert. The importance of experience replay database
composition in deep reinforcement learning. Deep Rein-
forcement Learning Workshop, NIPS, 2015.

Deisenroth, Marc and Rasmussen, Carl E. Pilco: A model-
based and data-efﬁcient approach to policy search.
In
International Conference on Machine Learning (ICML),
pp. 465–472, 2011.

Deisenroth, Marc Peter, Neumann, Gerhard, Peters, Jan,
et al. A survey on policy search for robotics. Foundations
and Trends in Robotics, 2(1-2):1–142, 2013.

Fu, Justin, Levine, Sergey, and Abbeel, Pieter. One-shot
learning of manipulation skills with online dynamics
adaptation and neural network priors. arXiv preprint
arXiv:1509.06841, 2015.

Hafner, Roland and Riedmiller, Martin. Reinforcement
learning in feedback control. Machine learning, 84(1-
2):137–169, 2011.

Harmon, Mance E and Baird III, Leemon C. Multi-player
residual advantage learning with general function ap-
proximation. Wright Laboratory, WL/AACF, Wright-
Patterson Air Force Base, OH, pp. 45433–7308, 1996.

Hausknecht, Matthew and Stone, Peter. Deep reinforce-
arXiv

ment learning in parameterized action space.
preprint arXiv:1511.04143, 2015.

Heess, Nicolas, Wayne, Gregory, Silver, David, Lillicrap,
Learning con-
Tim, Erez, Tom, and Tassa, Yuval.
tinuous control policies by stochastic value gradients.
In Advances in Neural Information Processing Systems
(NIPS), pp. 2926–2934, 2015.

Kingma, Diederik and Ba,

Jimmy.
method for stochastic optimization.
arXiv:1412.6980, 2014.

Adam:

A
arXiv preprint

Kober, Jens and Peters, Jan. Reinforcement learning in
robotics: A survey. In Reinforcement Learning, pp. 579–
610. Springer, 2012.

Konda, Vijay R and Tsitsiklis, John N. Actor-critic algo-
rithms. In Advances in Neural Information Processing
Systems (NIPS), volume 13, pp. 1008–1014, 1999.

Levine, Sergey and Abbeel, Pieter. Learning neural net-
work policies with guided policy search under unknown
dynamics. In Advances in Neural Information Process-
ing Systems (NIPS), pp. 1071–1079, 2014.

Levine, Sergey and Koltun, Vladlen. Guided policy
search. In International Conference on Machine Learn-
ing (ICML), pp. 1–9, 2013.

Levine, Sergey, Finn, Chelsea, Darrell, Trevor, and Abbeel,
Pieter. End-to-end training of deep visuomotor policies.
arXiv preprint arXiv:1504.00702, 2015.

Li, Weiwei and Todorov, Emanuel.

Iterative lin-
ear quadratic regulator design for nonlinear biological
movement systems. In ICINCO (1), pp. 222–229, 2004.

Lillicrap, Timothy P, Hunt, Jonathan J, Pritzel, Alexander,
Heess, Nicolas, Erez, Tom, Tassa, Yuval, Silver, David,
and Wierstra, Daan. Continuous control with deep rein-
forcement learning. International Conference on Learn-
ing Representations (ICLR), 2016.

Mnih, Volodymyr, Kavukcuoglu, Koray, Silver, David,
Rusu, Andrei A, Veness, Joel, Bellemare, Marc G,
Graves, Alex, Riedmiller, Martin, Fidjeland, Andreas K,
Ostrovski, Georg, et al. Human-level control through
deep reinforcement learning. Nature, 518(7540):529–
533, 2015.

Peters, Jan and Schaal, Stefan. Policy gradient methods
for robotics. In International Conference on Intelligent
Robots and Systems (IROS), pp. 2219–2225. IEEE, 2006.

Peters, Jan, M¨ulling, Katharina, and Altun, Yasemin. Rel-

ative entropy policy search. In AAAI. Atlanta, 2010.

Rawlik, Konrad, Toussaint, Marc, and Vijayakumar, Sethu.
On stochastic optimal control and reinforcement learn-
ing by approximate inference. Robotics, pp. 353, 2013.

Schaul, Tom, Quan, John, Antonoglou, Ioannis, and Sil-
ver, David. Prioritized experience replay. arXiv preprint
arXiv:1511.05952, 2015.

Schulman, John, Levine, Sergey, Abbeel, Pieter, Jordan,
Michael I., and Moritz, Philipp. Trust region policy
optimization. In International Conference on Machine
Learning (ICML), pp. 1889–1897, 2015.

Continuous Deep Q-Learning with Model-based Acceleration

Schulman, John, Moritz, Philipp, Levine, Sergey, Jordan,
Michael, and Abbeel, Pieter. High-dimensional con-
tinuous control using generalized advantage estimation.
International Conference on Learning Representations
(ICLR), 2016.

Silver, David, Lever, Guy, Heess, Nicolas, Degris, Thomas,
Wierstra, Daan, and Riedmiller, Martin. Deterministic
policy gradient algorithms. In International Conference
on Machine Learning (ICML), 2014.

Sutton, Richard S.

Integrated architectures for learning,
planning, and reacting based on approximating dynamic
programming. In International Conference on Machine
Learning (ICML), pp. 216–224, 1990.

Sutton, Richard S, McAllester, David A, Singh, Satin-
der P, Mansour, Yishay, et al. Policy gradient methods
for reinforcement learning with function approximation.
In Advances in Neural Information Processing Systems
(NIPS), volume 99, pp. 1057–1063, 1999.

Tassa, Yuval, Erez, Tom, and Todorov, Emanuel. Synthe-
sis and stabilization of complex behaviors through online
trajectory optimization. In International Conference on
Intelligent Robots and Systems (IROS), pp. 4906–4913.
IEEE, 2012.

Todorov, Emanuel, Erez, Tom, and Tassa, Yuval. Mujoco:
In Inter-
A physics engine for model-based control.
national Conference on Intelligent Robots and Systems
(IROS), pp. 5026–5033. IEEE, 2012.

Wahlstr¨om, Niklas, Sch¨on, Thomas B, and Deisenroth,
From pixels to torques: Policy learn-
arXiv preprint

Marc Peter.
ing with deep dynamical models.
arXiv:1502.02251, 2015.

Wang, Ziyu, de Freitas, Nando, and Lanctot, Marc. Dueling
network architectures for deep reinforcement learning.
arXiv preprint arXiv:1511.06581, 2015.

Watter, Manuel, Springenberg, Jost, Boedecker, Joschka,
and Riedmiller, Martin. Embed to control: A locally lin-
ear latent dynamics model for control from raw images.
In Advances in Neural Information Processing Systems
(NIPS), pp. 2728–2736, 2015.

Continuous Deep Q-Learning with Model-based Acceleration

8. Appendix
8.1. iLQG

The iLQG algorithm optimizes trajectories by iteratively
constructing locally optimal linear feedback controllers un-
der a local linearization of the dynamics p(xt+1|xt, ut) =
N (fxtxt + futut, Ft) and a quadratic expansion of the
rewards r(xt, ut) (Tassa et al., 2012). Under linear dy-
namics and quadratic rewards, the action-value function
Q(xt, ut) and value function V (xt) are locally quadratic
and can be computed by dynamics programming.2

Qxu,xut = rxu,xut + f T

xutVx,xt+1fxut

Qxut = rxut + f T
Vx,xt = Qx,xt − QT
Vxt = Qxt − QT

xutVx,xt+1
u,xtQ−1
u,xtQ−1

u,utQut

u,utQu,xt

(5)

Qx,xT = Vx,xT = rx,xT

u,utQut, Kt = −Q−1

The time-varying linear feedback controller g(xt) = ˆut +
kt + Kt(xt − ˆxt) maximizes the locally quadratic Q,
where kt = −Q−1
u,utQu,xt, and ˆxt, ˆut
denote states and actions of the current trajectory around
which the partial derivatives are computed. Employing the
maximum entropy objective (Levine & Koltun, 2013), we
can also construct a linear-Gaussian controller, where c is
a scalar to adjust for arbitrary scaling of the reward magni-
tudes,

πiLQG
t

(ut|xt) = N ( ˆut + kt + Kt(xt − ˆxt),−cQ−1

u,ut)
(6)

When the dynamics are not known, a particularly effective
way to use iLQG is to combine it with learned time-varying
linear models ˆp(xt+1|xt, ut). In this variant of the algo-
rithm, trajectories are sampled from the controller in Equa-
tion (6) and used to ﬁt time-varying linear dynamics with
linear regression. These dynamics are then used with iLQG
to obtain a new controller, typically using a KL-divergence
constraint to enforce a trust region, so that the new con-
troller doesn’t deviate too much from the region in which
the samples were generated (Levine & Abbeel, 2014).

8.2. Locally-Invariant Exploration for Normalized

Advantage Functions

Exploration is an essential component of reinforcement
learning algorithms. The simplest and most common type
of exploration involves randomizing the actions accord-
ing to some distribution, either by taking random actions
with some probability (Mnih et al., 2015), or adding Gaus-
sian noise in continuous action spaces (Schulman et al.,

2While standard iLQG notation denotes Q, V as discounted
sum of costs, we denote them as sum of rewards to make them
consistent with the rest of the paper

2015). However, choosing the magnitude of the random
exploration noise can be difﬁcult, particularly in high-
dimensional domains where different action dimensions re-
quire very different exploration scales. Furthermore, inde-
pendent (spherical) Gaussian noise may be inappropriate
for tasks where the optimal behavior requires correlation
between action dimensions, as for example in the case of
the swimming snake described in our experiments, which
must coordinate the motion of different body joints to pro-
duce a synchronized undulating gait.
The NAF provides us with a simple and natural avenue
to obtain an adaptive exploration strategy, analogously to
Boltzmann exploration. The idea is to use the matrix in
the quadratic component of the advantage function as the
precision for a Gaussian action distribution. This naturally
causes the policy to become more deterministic along di-
rections where the advantage function varies steeply, and
more random along directions where it is ﬂat. The corre-
sponding policy is given by

(cid:90)

π(u|x) = expQ(x,u|θQ) /

expQ(x,u|θQ) du

= N (µ(x|θµ), cP (x|θP )−1).

(7)

Previous work also noted that generating Gaussian explo-
ration noise independently for each time step was not well-
suited for many continuous control tasks, particularly simu-
lated robotic tasks where the actions correspond to torques
or velocities (Lillicrap et al., 2016). The intuition is that,
as the length of the time-step decreases, temporally inde-
pendent Gaussian exploration will cancel out between time
steps. Instead, prior work proposed to sample noise from
an Ornstein-Uhlenbech (OU) process to generate a tempo-
rally correlated noise sequence (Lillicrap et al., 2016). We
adopt the same approach in our work, but sample the in-
novations for the OU process from the Gaussian distribu-
tion in Equation 7. Lastly, we note that the overall scale
of P (x|θP ) could vary signiﬁcantly through the learning,
and depends on the magnitude of the cost, which introduces
an undesirable additional degree of freedom. We therefore
use a heuristic adaptive-scaling trick to stabilize the noise
magnitudes.
Using the learned precision as the noise covariance for ex-
ploration allowed for convergence to a better policy on the
“canada2d” task, which requires using an arm to strike a
puck toward a target, as shown in Figure 3, but did not make
a signiﬁcant difference on the other domains.

8.3. Q-Learning as Variational Inference

NAF, with our choice of parametrization, can only ﬁt a lo-
cally quadratic Q-function. To understand its implications
and expected behaviors, one approach is to approximately
view the Q-learning objective as minimizing the exclusive

Continuous Deep Q-Learning with Model-based Acceleration

little less natural than those from DDPG. We speculate such
behaviors come from the mode-seeking behavior that is ex-
plained in Section 8.3, and thus exploring other parametric
forms of NAF, such as multi-modal variants, is a promising
avenue for future work.

8.6. More Results on Evaluating Best-Case

Model-Based Improvement with True Models

Domains
Reacher
episodes
Canada2d
episodes
Cheetah
episodes

-

-0.488
740
-6.23
1970
7.00
580

0.5

-0.449
670
-6.23
1580
7.10
1080

ImR
-0.448
450
-5.89
570
7.36
590

ImR,0.5
-0.426
430
-5.88
140
7.29
740

ImR,1
-0.548

90
-12.0
210
6.43
390

Table 2. Best-case model-based acceleration with true dynamics
models. Best test rewards of NAF policies (ﬁrst row), and the
episodes it required to reach 5% of the best value (second row).
“0.5” and “1” correspond to the fraction of MPC episodes. “ImR”
means using imagination rollout with rollout length l = 10 for
reacher, canada2d, and l = 5 for cheetah.
In the main paper, iLQG with true dynamics is used to gen-
erate guided exploration trajectories. While iLQG works
for simple manipulation tasks with small number of initial
states, it does not work well for random target reacher or
complex locomotion tasks such as cheetah. We therefore
run iLQG in model-predictive control (MPC) mode for the
experiments reported in Figures 5c, 5b, and 5a, and Table 2.
It is important to note that for those experiments, the hyper-
parameters were ﬁxed (batch normalization is on, learning
rate is 10−3, and exploration size is 0.3), and thus the re-
sults differ slightly from the experiments in the previous
section.
In cheetah and other complex locomotion tasks, MPC pol-
icy is usually sub-optimal, and thus poor performance of
mixing MPC experience in Figure 5b is expected. On the
other hand, MPC policy works reasonably in hard manipu-
lation tasks such as canada2d, and there is signiﬁcant gain
from mixing MPC experience as Figure 5c shows. How-
ever, the most consistent gain comes from using imagina-
tion rollouts in all three domains. In particular, Figure 5c
shows that in canada2d, MPC experiences gives very good
trajectories, i.e. those that hit balls in roughly the right di-
rections, and doing rollouts can generate more of this useful
experience, enabling canada2d to learn very quickly. While
with true dynamics having the imagination experience di-
rectly means more experience and such result may be triv-
ial, it is still important to see the beneﬁts of rollouts which
only explore up to l = 10 steps away from the real expe-
rience, as reported here. This is an interesting result, since
this means the dynamics model only needs to be accurate
around the data trajectories and this signiﬁcantly lessens
the requirement on ﬁtted models.

Figure 3. NAF with exploration noise generated using the preci-
sion term (NAF-P) slightly outperforms the best DDPG result.
Precision term is not used until step 50,000.

Kullback-Leibler divergence (KL) between policy distri-
butions induced by the ﬁtted normalized Q-function ˆQ and
the true Q-function Q. This can be derived by assuming
(1) no bootstrapping and the exact target Q is provided per
step, (2) no additive exploration noise, i.e. fully on-policy,
and (3) use KL loss instead of the least-square. Speciﬁ-
cally, let π and ˆπ be corresponding policies of Q and ˆQ
respectively, an alternative form of Q-learning could be op-
timizing the following objective:
Le( ˆQ) = Ext∼ρˆπ [ ˜KL(ˆπ||π)] = Ext∼ρˆπ,ut∼ˆπ[ ˆQ − Q]
(8)

We can thus intuitively interpret NAF as doing variational
inference to ﬁt a Gaussian to a distribution, and it has
mode-seeking behavior. Empirically such behavior en-
ables NAF to learn smoother and more precise controllers,
as most effectively illustrated by three-joint reacher and
peg insertion experiments, and substantial improvements in
terms of convergence speeds in many other representative
domains explored in the main paper.

8.4. Descriptions of Task Domains

Table 3 describes the task domains used in the experiments.

8.5. More Results on Normalized Advantage Functions

Figures 4a, 4b, and 4c provide additional results on the
comparison experiments between DDPG and NAF. As
shown in the main paper, NAF generally outperforms
DDPG. In certain tasks that require precision, such as peg
insertion, the difference is very noticeable. However, there
are also few cases where NAF underperforms DDPG. The
most consistent of such cases is cheetah. While both DDPG
and NAF enable cheetah to run decent distances, it is often
observed that the cheetah movements learned in NAF are

Continuous Deep Q-Learning with Model-based Acceleration

(a) NAF signiﬁcantly outperforms
DDPG on moving gripper.

(b) NAF converges
DDPG on swimmer6.

faster

than

(c) DDPG converges faster than
NAF on cheetah.

Figure 4. NAF vs DDPG on three domains.

(a) NAF on multi-target reacher. In-
signiﬁcant gain from mixing MPC
experience. Signiﬁcant gain from
imagination rollouts.

(b) NAF on cheetah. Great speeds
up with imagination rollouts, no
gain from mixing MPC experi-
ences.

(c) NAF on canada2d. Very signif-
icant speed-ups from mixing MPC
experiences, both with or without
the rollouts.

Figure 5. NAF on multi-target reacher, cheetah, and canada2d, with model-based acceleration using true dynamics: “ImR” denotes using
the imagination rollout, l = 10 steps. “MPC-x” indicates mixing x fraction of MPC episodes.

Domain

Cartpole

Peg

GripperM

Cheetah

Ant

Description
The classic cart-pole swing-up task. Agent
must balance a pole attached to a cart by
applying forces to the cart alone. The pole
starts each episode hanging upside-down.
Agent is required to insert the tip of a 3-DOF
arm from locally-perturbed starting locations
to a ﬁxed hole.
Agent must use an arm with gripper attached to
a moveable platform to grasp an object and
move it to a ﬁxed target.
Agent should move forward as quickly as
possible with a cheetah- like body that is
constrained to the plane.
The four-legged ant should move toward the
ﬁxed target from a ﬁxed starting position and
posture.

Domain

Reacher

Gripper

Canada2d

Swimmer6

Walker2d

Description
Agent is required to move a 3-DOF arm from
random starting locations to random target
positions.
Agent must use an arm with gripper appendage
to grasp an object and manuver the object to a
ﬁxed target.
Agent is required to use an arm with
hockey-stick like appendage to hit a ball
initialzed to a random start location to a
random target location.
Agent should swim in snake-like manner
toward the ﬁxed target using six joints, starting
from random poses.
Agent should move forward as quickly as
possible with a bipedal walker constrained to
the plane without falling down or pitching the
torso too far forward or backward.

Table 3. List of domains. All the domains except ant are 2D.

