6
1
0
2

 
r
a

 

M
1
1

 
 
]
E
S
.
s
c
[
 
 

1
v
9
9
5
3
0

.

3
0
6
1
:
v
i
X
r
a

Alloy meets TLA+: An exploratory study

Nuno Macedo and Alcino Cunha

HASLab – High Assurance Software Laboratory

INESC TEC & Universidade do Minho, Braga, Portugal

Abstract. Alloy and TLA+ are two formal speciﬁcation languages that
are increasingly popular due to their simplicity and ﬂexibility, as well as
the eﬀectiveness of their companion model checkers, the Alloy Analyzer
and TLC, respectively. Nonetheless, while TLA+ focuses on temporal
properties, Alloy is better suited to handle structural properties, requiring
ad hoc mechanisms to reason about temporal properties. Thus, both have
limitations in the speciﬁcation and analysis of systems rich in both static
and dynamic properties. This paper explores the pros and cons of these
two frameworks when handling this class of systems through the step-by-
step modeling, speciﬁcation and veriﬁcation of an example.

1

Introduction

Software speciﬁcation and analysis is crucial at early development phases since it
encourages the developer to reason about the system and its properties, promoting
the detection of design errors. This activity generally comprises the modeling of
the system’s acceptable states; the speciﬁcation of the expected behavior of those
models; and the actual veriﬁcation of those properties. Thus, when choosing a
speciﬁcation framework, one must be aware of the class of models and properties
expressible in the speciﬁcation language and manageable by the provided tools.
The modeling and speciﬁcation stages require diﬀerent levels of expressibility
from the speciﬁcation language. Models are comprised by structural properties –
typically ﬁrst-order logic predicates that specify when the system is considered
well-formed – and behavioral properties – typically action predicates that specify
how the system is allowed to evolve. The speciﬁcation, in contrast, is usually
presented in a temporal logic. This study focuses precisely on systems rich in both
static and dynamic properties. A paradigmatic example of this class of systems
are distributed computing algorithms. Structural properties encode acceptable
network topologies and behavioral properties restrict the evolution of their state,
while speciﬁcations usually take the shape of safety and/or liveness properties.
Therefore, although a variety of speciﬁcation frameworks has been proposed,
the most successful are characterized by two features: they provide a simple yet
expressive and ﬂexible formal language – allowing the user to specify diﬀerent
classes of systems and properties at diﬀerent abstraction levels – and are accom-
panied by tools that automate their analysis – providing quick feedback regarding
the correctness of the speciﬁcation.

Alloy

Relational logic
Relational logic

TLA+

First-order logic

Actions + Fairness

Modeling

Speciﬁcation
Veriﬁcation Bounded model checker (Analyzer) Unbounded model checker (TLC)
(+ Theorem prover (TLAPS))

Temporal logic

Table 1: General comparison of the Alloy/TLA+ frameworks.

Alloy [6] is a lightweight formal speciﬁcation language with an object-oriented
ﬂavor, whose companion Analyzer provides support for bounded model checking.
Alloy’s underlying formalism is relational logic, ﬁrst-order logic enhanced with the
transitive closure operation, that renders the deﬁnition of structural properties
extremely simple. Alloy is inherently static, thus the deﬁnition of dynamic
properties usually relies on well-known idioms that have emerged thanks to the
language’s ﬂexibility. Yet, such ad hoc solutions are error-prone and force the
developer to be concerned with particularities of the idiom rather than with those
of the actual system. As a consequence, considerable research has been dedicated
to enhance Alloy with dynamic behavior [5,3,8,11,4]. The main drawback of
these approaches is that they compromise the ﬂexibility that characterizes Alloy,
introducing syntactic extensions that force users into speciﬁc idioms.

In contrast, temporal model checkers focus on the analysis of dynamic systems.
Among the most successful formalisms is the temporal logic of actions (TLA) [7],
a variant of temporal logic that relies on the notion of action to model dynamism.
Actions are essentially predicates that relate two consecutive states, and can be
used to model the steps that allow the system to evolve. Speciﬁcation proper-
ties are instead deﬁned in a restricted temporal logic. The TLA+ speciﬁcation
language is based in this formalism and is accompanied by a useful toolset that
includes TLC, a model checker that has proven eﬀective on the veriﬁcation of
complex systems. Although TLA+ does support ﬁrst-order logic properties, these
are not the main focus of TLA+, giving rise to some limitations.

Both these frameworks are being increasingly adopted and have been suc-
cessful applied to complex systems (e.g. [1] and [9]). However, although their
popularity arose due to similar factors – powerful but simple languages associated
with eﬀective and automated tools – their particularities, resumed in Table 1,
make them excel in the analysis of diﬀerent classes of systems. A more in-depth
comparison would help the development of systems with rich static and dynamic
properties, the focus of this study. For instance, Alloy users could beneﬁt from
TLC’s unbounded technique, while TLA+ users could beneﬁt from Alloy’s ﬂexi-
bility. As far as we are aware, no previous study systematically compared these
frameworks, so as a ﬁrst step we explore the potential of embedding “dynamic”
Alloy models in TLA+ using a concrete example. Although concepts are explained
as needed, basic knowledge of the frameworks is expected from the reader.

The remainder of this paper is structured as follows. Section 2 presents the
Alloy example that will be used throughout the paper and Section 3 its embedding
in TLA+ and our experience with TLC. Section 4 presents a comparison of the
Analyzer and TLC performance for this example which are discussed in Section 5.

2 An Alloy Speciﬁcation: Hotel Room Locking System

The Hotel example used throughout this paper models a hotel room locking
system, initially presented by Jackson [6, p. 187]. This system is built on the
assumption that the key management system at the front desk of the hotel
is disconnected from the locking systems of the rooms. Doors unlock for the
currently registered key, unless a more recent one, issued by the front desk, is
detected, at which point older keys are rendered obsolete. Structural properties
restrict the state of the front desk and room locking systems, while behavioral
properties model how these evolve as guests check in and out. The speciﬁcation
will test whether unauthorized room accesses can occur. This section explores an
Alloy model of this system, depicted in Fig. 1, similar to the original one apart
from styling changes. For a thorough presentation of Alloy see [6].

2.1 Structural and Behavioral Modeling

Structure In Alloy, the structure of a model is deﬁned by signatures and their
ﬁelds. Each Hotel instance consists of a set of disposable keys, rooms and guests
(signatures Key, Room and Guest, respectively). Each room has a pool of keys
assigned to it (ﬁeld keys), and keeps track of the last valid key that unlocked the
door (ﬁeld current), which must belong to the pool. A front desk (signature FD)
keeps track of each room occupants (ﬁeld occupant) and the last key delivered
for each room (ﬁeld last).

Signature and ﬁeld values can be further restricted by deﬁning facts – con-
straints that must hold for every instance. In Hotel, fact DisjointKeys forces
each key to belong to the pool of a single room. Finally, in order to recognize
fresh keys, the locking systems and the front desk must agree on a keys order a
priori. In Alloy this can be abstracted by imposing a total order over Key atoms.
Fresh keys are retrieved by the nextKey function from the pool of available ones.

Behavior Since Alloy is inherently static, well-known idioms have been developed
to model system evolution. This example follows the local state idiom. Here, a
totally ordered signature Time is introduced whose elements denote instants in
time. Fields that should vary in time are appended with a Time element that
denotes its value in each moment. In Hotel ﬁelds current, last, occupant and
gkeys are expected to be variable. Although every signature is static, this is not
the case in general, which would require additional facts to manage the temporal
consistency of the ﬁelds.To access values in an instant t from Time, one simply
composes it with the expression, e.g., current.t.

Actions are speciﬁed as predicates between two explicit instants of time (and
parameters of the action). In Hotel the system evolves as guests check in and
out and unlock the room’s doors. When a guest checks in, the next key for the
chosen room is given, and the guest is added to the room’s occupants (predicate
Checkin). The room’s locking system is unaware of such assignment: only when
a more recent key than the currently known is used to unlock the door is the
system updated, rendering older keys obsolete (predicate Entry). Obviously, the

open util/ordering[Time] as to
open util/ordering[Key] as ko

sig Time {}

sig Key {}

sig Room {

keys: set Key,
current: keys one -> Time }

fact DisjointKeys {

keys in Room lone -> Key }

one sig FD {

last: (Room -> lone Key) -> Time,
occupant: (Room -> Guest) -> Time }

sig Guest {

gkeys: Key -> Time }

fun nextKey [k: Key, ks: set Key]: set Key {

min[k.nexts & ks] }

pred Init [t: Time] {

no Guest.gkeys.t
no FD.occupant.t
all r: Room | FD.last.t[r] = r.current.t }

pred Entry [t, t’: Time, g: Guest, r: Room, k: Key] {

k in g.gkeys.t
k = r.current.t or k = nextKey[r.current.t, r.keys]
r.current.t’ = k
all r: Room - r | r.current.t = r.current.t’
all g: Guest | g.gkeys.t = g.gkeys.t’
FD.last.t = FD.last.t’
FD.occupant.t = FD.occupant.t’ }

pred Checkout [t, t’: Time, g: Guest] {

some FD.occupant.t.g
FD.occupant.t’ = FD.occupant.t - Room -> g
FD.last.t = FD.last.t’
all r: Room | r.current.t = r.current.t’
all g: Guest | g.gkeys.t = g.gkeys.t’ }

pred Checkin [t, t’: Time, g: Guest, r: Room, k: Key] {

g.gkeys.t’ = g.gkeys.t + k
no FD.occupant.t[r]
FD.occupant.t’ = FD.occupant.t + r -> g
FD.last.t’ = FD.last.t ++ r -> k
k = nextKey[FD.last.t[r], r.keys]
all r: Room | r.current.t = r.current.t’
all g: Guest - g | g.gkeys.t = g.gkeys.t’ }

fact NoIntervening {

all t: Time, t’: t.next, t’’: t’.next, g: Guest, r: Room, k: Key |

Checkin[t, t’, g, r, k] implies (Entry[t’, t’’, g, r, k] or no t’’) }

fact Traces {
Init[first]
all t: Time, t’ : t.next | some g: Guest, r: Room, k: Key |

Entry[t, t’, g, r, k] or Checkin[t, t’, g, r, k] or Checkout[t, t’, g] }

assert NoBadEntry {

all t: Time, t’: t.next, r: Room, g: Guest, k: Key |

(Entry[t, t’, g, r, k] and some FD.occupant.t[r]) implies g in FD.occupant.t[r] }

check NoBadEntry for 3 but 30 Time

Fig. 1: Hotel room locking system under Alloy.

currently known key also unlocks the door. Checking out vacates the room but
allows the guest to keep the room key (predicate Checkout). To actually force
the system to behave according to these predicates, fact Traces forces an Init
predicate to hold in the ﬁrst instant – all rooms are vacant and no keys are
assigned – and every succeeding state to be derived from the action predicates.
Now the Analyzer will only consider instances built from action application.

2.2 Speciﬁcation and Veriﬁcation

Speciﬁcation The property that is expected to hold in Hotel is that a guest
enters a room only if it is one of its occupants, a safety property. The Analyzer
does not impose any restriction on the class of predicates that it is able to check.
In Hotel this was encoded as the NoBadEntry assertion – a property that is to
be checked by the Analyzer. Note how the temporal property must be explicitly
deﬁned by universally quantifying over Time elements (which are bound to valid
evolution traces due to fact Traces).

Veriﬁcation The Analyzer is instructed to check whether an assertion holds for a
speciﬁc scope of atoms through a check command – here deﬁned for 3 elements
of each signature and a length trace 5. In this version of the model NoBadEntry
does not hold, thus the Analyzer quickly generates counter-examples, one of
which is depicted in Fig. 2 (atom names are abbreviated for readability purposes).
Since the Analyzer performs bounded model checking, the scope of Time imposes
a limit on the length of traces, which may lead to unpredictable behaviors. The
most obvious one is that counter-examples may not short traces: in Hotel, a
scope of less than 5 instants would not detect the inconsistency, leading the user
to a false sense of safety. A more subtle problem occurs when checking liveness
properties, where the ﬁnite trace may lead to the generation of false positives.
The turnaround is to simulate inﬁnite traces by forcing a loop, disregarding non-
inﬁnite traces [2,4]. These issues, allied to the need to explicit model dynamism,
greatly encumber the analysis of dynamic systems in Alloy.

Another particularity of Alloy is that total orders force the number of atoms
to be exactly that of the deﬁned scope. Thus, the check command from Fig. 1
only considers models with exactly 5 Time atoms, rather than models with up
to 5 Time atoms. Since there is no guarantee that counter-examples occurring
in smaller traces will reappear in larger ones, the user must manually check the
system for increasing Time scopes. Alternatively, the user could deﬁne his own
notion of order that did not force exact scopes but this would have great impact
on the Analyzer’s performance, since the native operation is highly optimized.
The presented counter-example breaks NoBadEntry because, even though
guest g0 checks out of room r1 and then guest g1 checks in into it, the locking
system of r1 considers g0’s key k1 valid until g1 uses k2, rendering k1 obsolete.
A possible ﬁx to the model is to assume that guests enter the room immediately
after checking in: g1 would immediately enter the room with k2, rendering k1
invalid. Such constraint is encoded as the NoIntervening fact. With this fact
the Analyzer no longer detects a counter-example for NoBadEntry.

(a) Initial state.

(b) Checkin[t,t’,g0,r1,k1].

(c) Checkout[t,t’,g0].

(d) Checkin[t,t’,g1,r1,k2].

(e) Entry[t,t’,g0,r1,k1].

Fig. 2: Alloy Analyzer counter-example for NoBadEntry.

3 A TLA+ Embedding

Like Alloy, TLA+ is an extremely expressive speciﬁcation language where models
consist of arbitrary predicates. However, the TLC model checker is not able to
process arbitrary TLA+ models, imposing restrictions to the language [7, p. 230].
Thus, two classes of issues must be addressed throughout this embedding: ﬁrst,
the mismatch between the Alloy and TLA+ languages; second, the additional
restrictions imposed by TLC for checking properties. This section thoroughly
explores a possible embedding of the hotel locking system in TLA+, depicted
in Fig. 3. This speciﬁcation is TLC-compatible, and can be deployed under the
conﬁguration1 presented in Fig. 4a. Although TLA+ concepts are presented as
required, the interested reader is redirected to [7] for an in-depth presentation.

3.1 Structural and Behavioral Modeling
Structure Alloy signatures and ﬁelds take the shape of module parameters in
TLA+, which can be either constant or variable. This diﬀers from the object-
oriented ﬂavor of Alloy, where ﬁelds must be associated with a parent signature.
As a consequence, current and occupant no longer need to belong to the
placeholder object FD, which is discarded in the TLA+ version.

The user could expect to represent the static components of the model (sets
Key, Room and Guest and relation keys) as constant parameters. However, to
1 The TLA tools are currently deployed as the TLA Toolbox, where the TLC parameters

are deﬁned through the GUI rather than as a conﬁguration ﬁle.

module Hotel

extends Naturals
constant KEY , ROOM , GUEST
assume KEY ∈ Nat
variable keys, current, last, occupant, gkeys, Room, Guest
Key ∆= 0 . . KEY − 1
TypeInv ∆= ∧ Room ∈ subset ROOM ∧ Guest ∈ subset GUEST
∧ keys ∈ [Room → subset Key] ∧ last ∈ [Room → Key]
∧ current ∈ [Room → Key] ∧ occupant ∈ [Room → subset Guest]
∧ gkeys ∈ [Guest → subset Key]
∧ ∀ r ∈ Room : current[r ] ∈ keys[r ]
∧ ∀ r 1, r 2 ∈ Room : (keys[r 1] ∩ keys[r 2]) (cid:54)= {} ⇒ r 1 = r 2

Init ∆= ∧ Room ∈ subset ROOM ∧ Guest ∈ subset GUEST

∧ keys ∈ [Room → subset Key] ∧ gkeys = [g ∈ Guest (cid:55)→ {}]
∧ current ∈ [Room → Key] ∧ occupant = [r ∈ Room (cid:55)→ {}]
∧ ∀ r ∈ Room : current[r ] ∈ keys[r ]
∧ ∀ r 1, r 2 ∈ Room : (keys[r 1] ∩ keys[r 2]) (cid:54)= {} ⇒ r 1 = r 2
∧ last = current

vs ∆= (cid:104)keys, current, last, occupant, gkeys, Guest, Room(cid:105)
nextKey[k ∈ Key, ks ∈ subset Key] ∆= {x ∈ ks : x > k ∧ (∀ y ∈ ks : y > k ⇒ x ≤ y)}
Entry(g, r , k ) ∆= ∧ k ∈ gkeys[g]

∧ (k = current[r ] ∨ {k} = nextKey[current[r ], keys[r ]])
∧ current(cid:48) = [current except ! [r ] = k ]
∧ unchanged (cid:104)keys, last, occupant, gkeys, Guest, Room(cid:105)

Checkout(g) ∆= ∧ ∃ r ∈ Room : g ∈ occupant[r ]

∧ occupant(cid:48) = [r ∈ domain occupant (cid:55)→ occupant[r ]\{g}]
∧ unchanged (cid:104)keys, last, current, gkeys, Guest, Room(cid:105)
Checkin(g, r , k ) ∆= ∧ occupant[r ] = {} ∧ {k} = nextKey[last[r ], keys[r ]]

∧ occupant(cid:48) = [occupant except ! [r ] = {g}]
∧ gkeys(cid:48) = [gkeys except ! [g] = @ ∪ {k}]
∧ last(cid:48) = [last except ! [r ] = k ]
∧ unchanged (cid:104)keys, current, Guest, Room(cid:105)

Post(g, r , k ) ∆= occupant[r ] = {g} ∧ k ∈ gkeys[g] ∧ last[r ] = k ∧ current[r ] (cid:54)= k
Act ∆= ∃ g ∈ Guest : Checkout(g) ∨ ∃ r ∈ Room, k ∈ Key : Entry(g, r , k ) ∨ Checkin(g, r , k )
NoIntervening ∆= ∀ g ∈ Guest, k ∈ Key, r ∈ Room : Post(g, r , k ) ⇒ Entry(g, r , k )
Spec ∆= Init ∧ 2[NoIntervening ∧ Act ∧ TypeInv ]vs
NoBadEntry ∆= 2[∀ g ∈ Guest, r ∈ Room, k ∈ Key :

Entry(g, r , k ) ∧ occupant[r ] (cid:54)= {} ⇒ g ∈ occupant[r ]]vs

Fig. 3: The TLA+ embedding of the hotel locking system.

SPECIFICATION Spec
PROPERTY NoBadEntry
CONSTANTS KEY = 4

GUEST = {g1,g2,g3,g4}
ROOM = {r1,r2,r3,r4}

(a) Conﬁguration ﬁle.

(b) Counter-example for NoBadEntry.

Fig. 4: TLC conﬁguration and counter-example for Hotel.

deploy TLC, the user must assign a ﬁxed value to constant parameters. This
diﬀers from the behavior of static components in the Alloy version, leading to
unpredictable results: although ﬁelds like keys do not change over time, the
Analyzer explores the evolution of the system under every valid assignment to
those variables. A similar issue occurs with Room and Guest since the scope
for 3 only sets the maximum number of atoms per signature (unless the user
imposes an exact scope or a total order). Deﬁning them as constant in TLA+ and
assigning them 3 elements in the TLC conﬁguration would assign them exactly
those elements. This is problematic in Hotel because such conﬁgurations do not
generate counter-examples. The model forces at least one key to be assigned to
each room; the instance from Fig. 2 arises from the successive checking in of two
guests in the same room, requiring a universe with two extra keys: a distracted
user could specify Key = {1,2,3} and Room = {r1,r2,r3} and miss it.

To model the expected behavior, keys, Guest and Room are speciﬁed as
variable parameters, the last two being forced to be within constants GUEST and
ROOM denoting their universe. Their values are unchanged by the actions, so TLC
will assign them an arbitrary value in the initial state but preserve it throughout
the trace, simulating the semantics of the Alloy version.

TLA+ is untyped, but it is considered good practice to declare a type invariant
over the variable parameters that is expected to hold in every state [7]. These are
deﬁned as state predicates – ﬁrst-order logic formulas without temporal operators
– as TypeInv in Fig. 3. We opted to encode the variables corresponding to Alloy
ﬁelds as functions, because these are more manageable in TLA+ and the Hotel
model does not rely on relational operators. TLA+ does not support relational
operations, like the converse or transitive closure, natively, so converting other
Alloy models may not be as straightforward. Expression subset A denotes the
power-set of A, and is used to “type” many-valued functions. For simplicity, last
was implemented as a total function from rooms to keys (from Init and the

deﬁned actions, it would be always deﬁned for every room). Additional structural
constrains, like the fact that the keys assignments are disjoint and that the
current key is selected from these pools, are also deﬁned in TypeInv.

Since constant parameters are bound in the TLC conﬁguration, TLA+ instead
provides an assume keyword that should be used to restrict their values, which
do not aﬀect the meaning of the model but instruct TLC to test whether the
assignments of the constant parameters are valid. The Key set should be totally
ordered and bound exactly, so a constant KEY, assumed to be a natural, sets
the number of keys available, from which predicate Key creates a range. The
nextKey function then relies on natural intervals to retrieve the next key.

Likewise Alloy, deﬁning a predicate like TypeInv does not aﬀect the model
by itself. Nonetheless, the expected role of type invariants in Alloy and TLA+
renders evident a diﬀerence in methodology. In TLA+, these are typically not
enforced, but instead used to check the correctness of the deﬁned actions [7, p. 26].
This reﬂects the prominent role of the actions in TLA+, that, along with the
initial state predicate, entail the set of acceptable states. In fact, TLC-compatible
actions must completely specify the succeeding states [7, p. 238]. In contrast,
actions in Alloy are deﬁned by regular declarative predicates and do not by
themselves entail the set of valid states: type invariants imposed by facts may
restrict their result. This allows the user to separate the concerns between the
structural and behavioral components of the model, and obtain simpler action
deﬁnitions. In order to be as faithful to the Alloy model, TypeInv will be forced2.
Behavior A model in TLA+ is expected to follow the shape Init ∧ 2[Next]v s ∧
Temporal, where Init is a state predicate restricting the initial state, Next restricts
valid evolution steps through actions – predicates with primed variables referring
to their value in the succeeding state – and Temporal is an additional temporal
restriction. Stuttering steps are intrinsic in TLA+, [Next]vs denoting that either
Next holds or a stuttering step is performed with v(cid:48) = v. TLC only supports
fairness restrictions in Temporal, which do not exist in Hotel.

Predicate Init follows the semantics of the corresponding Alloy predicate,
where occupant and gkeys are assumed to be empty, and last to have the
same value as current. As for keys, it is free to take any value that results in a
disjoint set, from which the current key is selected. Predicate Act is comprised
by the disjunction of the Entry, Checkin and Checkout actions. This is similar
to the Alloy approach, except that dynamism is now intrinsic to the language
through primed variables. TLA+ provides some syntactic sugar to deﬁne frame
conditions: an unchanged x expression is an abbreviation for x(cid:48) = x and for
sequences or functions, an expression f (cid:48) = [f except ![x ] = e] means that f
remains unchanged except for its value at x, which is updated to e (@ denotes
the previous f [x ] value). Although the model from Fig. 3 relies on these, it is not
clear whether they can be derived from an Alloy model. Predicate TypeInv is
also forced in every state by being introduced in Next. Alternatively it could be

2 We also tested Hotel in TLC with TypeInv set as an invariant, which proved that

the deﬁned actions eﬀectively preserve the type invariant.

set as a CONSTRAINT in the TLC conﬁguration, which would ignore states where
it does not hold, but the model would not be self-contained.

In order to be TLC-compatible however, these predicates must follow some
stricter rules that bound the possible values of the parameters. For instance, when
a parameter is referenced its value must have already been bound by a previous
conjunct. Thus, in Init, expression ∀r ∈ Room : current[r ] ∈ keys[r ] cannot
occur before keys ∈ [Room → subset Key] and current ∈ [Room → Key], which
deﬁne the upper bounds of keys and current. TLC must also be able to derive
the value of every parameter in the succeeding state from Next. This contrasts
with the deﬁnition of actions in Alloy that are purely declarative predicates, which
may not bound the next state completely: either their outputs are restricted by
other facts or their behavior is non-deterministic. Thus, it is not clear whether
TLC-compatible actions can be derived from Alloy predicates. This hints again
at the central role of actions in TLA+ rather than structural properties.

3.2 Speciﬁcation and Veriﬁcation

Speciﬁcation Unlike Alloy, TLA+ supports the speciﬁcation of a subset of LTL
properties, supporting the always 2 and eventually 3 temporal quantiﬁers.
However, the class of formulas that TLC is able to check is limited [7, p. 236]: they
must either be state predicates P, invariant predicates 2P, box-action formulas
2[A]v s or simple temporal formulas, i.e., boolean combinations of temporal
state formulas (2P, 3P or 2(P⇒3Q)) and simple action formulas (expressions
23(cid:104)A(cid:105)v s, 32[A]vs and fairness predicates). This contrasts with Alloy where any
predicate supported by the language can be checked by the Analyzer. Thus, to
check the validity of NoBadEntry, the predicate must be converted into a valid
TLA+ formula that TLC is able to process. Luckily, NoBadEntry can be translated
into a TLC compatible TLA+ formula in a straightforward manner in the shape
of a box-action formula 2[A]v s, as deﬁned in Fig. 3. TLC is instructed to check
properties through PROPERTY instructions in the conﬁguration, as introduced in
Fig. 4a. Deﬁning NoBadEntry as a box-action raises some issues related with
TLA+’s assumption of stuttering steps. When a guest enters the room for the
second time – i.e., when his key has already been registered – the Entry action
does not update the value of any variable. Thus, TLC will not recognize such
steps, identifying instead a stuttering step.

Veriﬁcation By default, TLC will ﬂag deadlocks as errors. The Hotel model is
however expected to enter deadlock for conﬁgurations without enough keys, and
due to the identiﬁcation of Entry steps as stuttering steps as explained above,
deadlocks occur in every conﬁguration. Thus, TLC must be instructed to ignore
deadlocks. As expected, TLC will then ﬁnd a counter-example for NoBadEntry,
which is depicted in Fig. 4b.

To guarantee that NoBadEntry holds, the behavioral model must be further
restricted. Unfortunately, NoIntervening is not a valid formula in the TLA+
language because variables cannot be doubly primed. This renders the expres-
sion Entry[t’,t",g,r,k] not expressible in TLA+. Thus, NoIntervening was

adapted to force an Entry action to occur whenever there is a guest whose key is
not registered in the room, which is the post-condition of the Checkin action, as
deﬁned by Post in Fig. 3. Such predicate is added to Next, forbidding invalid state
transitions. Likewise CONSTRAINT instructions, ACTION-CONSTRAINT instructions
could also have been used. Under this conﬁguration, TLC does not ﬁnd any
counter-example for NoBadEntry, as expected. One could wonder whether it
would not suﬃce to check NoIntervening ⇒ NoBadEntry. Unfortunately, this is
not a valid TLC speciﬁcation, since it is not a simple temporal formula.

4 Evaluation

The Analyzer and TLC check properties through fundamentally diﬀerent tech-
niques. The Analyzer embeds models into propositional formulas which are fed
to oﬀ-the-shelf SAT solvers. Thus, the procedure is oblivious of the model that
originated the formula. This also renders the process bounded, so temporal
properties may only be checked for traces with limited length. In contrast, TLC
interprets TLA+ models as ﬁnite state machines and deploys an explicit-state
model checker. Thus, it considers traces with unlimited length and has a ﬁner
control on how the states are explored, enabling breadth-ﬁrst searches.

This section compares the performance of the two approaches in the veriﬁca-
tion of the Hotel model. All tests were performed multiple times on an 1,8 GHz
Intel Core i5 with 4 GB memory running OS X 10.10 with Alloy Analyzer 4.2 and
TLC 2.08. We are interested in assessing how the existence of counter-examples
aﬀects their performance, so tests were run with and without the NoIntervening
constraint enforced. Although TLC’s default model is breadth-ﬁrst (BF), it also
supports depth-ﬁrst (DF) searches, which was also tested (for a maximum depth
of 100) since it could fare better when there are counter-examples to be found.
TLC was also instructed not to ﬂag deadlocks as errors. The Analyzer was run
with the MiniSat solver, which our experiments show to be the most eﬃcient.

The model was tested for diﬀerent n sizes, denoting the number of keys and
the maximum number of guests and rooms. Besides being bounded, the total
ordering in Alloy forces the trace length to be ﬁxed, so tests are run up to t in
order to ﬁnd counter-examples with minimal trace length: the timing for a given
t aggregates the timing of the previous t − 1 runs. TLC’s breadth-ﬁrst searches
naturally ﬁnd such counter-examples. The check command from Fig. 1 and the
conﬁguration from Fig. 4a represent the model for n = 4 (and t = 30 for Alloy).
Figures 5a and 5b compare the performance of the approaches for t = 30 (relevant
only for the Alloy results) and increasing size n. In general, although TLC fares
better for smaller n values, it is outperformed by the Analyzer for larger ones.
Interestingly, TLC is actually faster with NoIntervening enabled than without
it. Figures 5e and 5f compare instead the performance of the approaches for a
ﬁxed n = 4 with increasing trace length t (the unbounded TLC results appear
as a constant function on t). As seen above, the Analyzer outperforms TLC for
such n values even at t = 30, e.g., the Analyzer detects the counter-example at
t = 5 in less than a second in contrast to TLC’s 415 seconds.

(a) Counter-example, t = 30.

(b) NoIntervening, t = 30.

(c) Exact scope, counter-example, t = 30.

(d) Exact scope, NoIntervening, t = 30.

(e) Counter-example, n = 4.

(f) NoIntervening, n = 4.

Fig. 5: Hotel performance under diﬀerent approaches.

Our experiments show that TLC spends a great deal of time generating every
initial state as a ﬁrst step. For n = 3 and n = 4, there are 776 and 18960 distinct
initial states, respectively, arising from the attribution of values to Guest, Room,
keys and current. Even with NoIntervening disabled, although TLC detected
rather quickly that there is a counter-example, it spends considerable time trying
to reconstruct it from the trace, which also seems to be related to the number of
initial states. Interestingly, this also occurs in depth-ﬁrst mode. In some contexts,
this procedure could pay oﬀ due to its ability to detect equivalent states. However,
in Hotel (and in fact, in problems with rich structural in general), state sharing
is limited since the free variable parameters in the initial state remain ﬁxed as
the system evolves, not overlapping with other traces.

To compare the performance of the techniques in a scenario with less initial
states, we modeled a version of Hotel with exactly n Guest and Room elements
and n + 2 Key elements (the two scenarios do not have the same universe for
the same n value and thus are not directly comparable, but without extra keys

counter-examples would not occur). For n = 3 and n = 4 there are now 108
and 960 initial states, respectively. The results are presented in Figs. 5c and 5d.
Results show that although TLC is still outperformed by the Analyzer.

To overcome TLC’s generation of initial states we explore a diﬀerent approach,
where the Analyzer is used to generate them, and then TLC is deployed over
each ﬁxed initial state. This way the weight of solving rich structural constraints
is shifted to the more eﬃcient Alloy, while TLC analyzes only the temporal
properties as it is designed to do. Moreover, the problem can be partitioned into
as many problems as there are initial states, avoiding executions running out
of memory. The trade-oﬀ is that counter-examples will no longer be guaranteed
to have minimal trace lengths since initial states are generated in an arbitrary
order. Also, TLC will no longer be able to beneﬁt from state sharing. An Alloy
model that generates such initial states can be derived from the dynamic one by
removing every constraint that refers to instants of time other than the ﬁrst, and
then, removing every reference to the Time signature (adapting the multiplicities
of the ﬁelds accordingly). An additional beneﬁt is that Alloy’s symmetry breaking
greatly reduces the number of generated states – from 18960 to 520 for n = 4,
which are generated in less than 2 seconds (with symmetry breaking disabled, it
produces the 18960 states). TLC also allows the deﬁnition of the model elements
as symmetric, but in Hotel this does not seem to aﬀect the number of states.

For a preliminary study, we timed the generation of these initial states by
Alloy and the execution of TLC and the Analyzer for a set of ﬁxed initial states.
The performance of this technique when there are counter-examples to be found
is dependent on how many initial lead to a the counter-example. We calculated
this ratio and the times with NoIntervening disabled consider only considered a
portion of the initial states. With NoIntervening enforced, all initial states were
considered. The results regarding this two-phased technique are presented under
“TLC En” in and “Alloy En” in Fig. 5. TLC with ﬁxed initial states seems to
outperform regular TLC executions, in some cases quite signiﬁcantly, although its
gains over pure Alloy are not so evident. Alloy with ﬁxed initial states fares worse
than all the other techniques, which is expected since Alloy has poor support for
partial instances.

5 Discussion and Future Work

Throughout this paper some pros and cons of using Alloy and TLA+ to specify
systems with rich static and dynamic properties were identiﬁed. Alloy has two
main limitations: ﬁrst, dynamism must be explicitly modeled by the user, which
is a cumbersome and error-prone task, even if following well-known idioms;
second, the Analyzer only supports bounded model checking, which hinders the
sound veriﬁcation of temporal properties. The fact that properties are veriﬁed for
exact trace lengths renders this process even more cumbersome. Alloy’s major
advantage lies in its expressiveness, fully supported by the Analyzer, in contrast
to the restrictions imposed by TLC over TLA+ models. This is patent in the
deﬁnition of the initial state and the action predicates, which in Alloy may

be purely declarative predicates but that must completely specify the state in
TLA+ to be processed by TLC. The properties that TLC is able to verify are
also restricted. The explicit dynamism in Alloy actually ends up being more
expressive than TLA+, as the free use of doubly primed variables demonstrate.
Finally, the management of non-variable arbitrary artifacts, common in problems
with rich structural properties are better manageable in Alloy than in TLA+,
where constants must be assigned exact values.

Regarding the possible embedding of Alloy models and speciﬁcations into
TLA+, some mismatches have been identiﬁed that would hinder this process.
First, the translation of predicates rich in relational operators would not be
straight-forward. This would be especially problematic with transitive closure
operations, that must be converted to recursive deﬁnitions in TLA+. Second, it
is not clear whether deriving TLC compatible models (initial state and action
predicates) and speciﬁcations to be veriﬁed from arbitrary Alloy predicates would
be possible. It is also not clear how enforcing stuttering steps in TLA+ would
aﬀect the semantics of actions derived from Alloy.

As for performance, the Analyzer seems to outperform TLC with larger
scopes, but with the obvious caveat of the bounded search space. Feeding TLA+
initial states generated by Alloy showed promising results, but would depend on
an eﬀective translation between the two languages. We expect to explore such
technique in the future, namely by relying directly on Alloy’s underlying model
checker Kodkod [10], which has native support for partial instances.

References
1. H. Bagheri, E. Kang, S. Malek, and D. Jackson. Detection of design ﬂaws in the
Android permission protocol through bounded veriﬁcation. In FM 2015, volume
9109 of LNCS, pages 73–89. Springer, 2015.

2. A. Biere, A. Cimatti, E. M. Clarke, and Y. Zhu. Symbolic model checking without

BDDs. In TACAS 1999, volume 1579 of LNCS, pages 193–207. Springer, 1999.

3. F. S. Chang and D. Jackson. Symbolic model checking of declarative relational

models. In ICSE 2006, pages 312–320. ACM, 2006.

4. A. Cunha. Bounded model checking of temporal formulas with Alloy. In ABZ 2014,

volume 8477 of LNCS, pages 303–308. Springer, 2014.

5. M. F. Frias, J. P. Galeotti, C. L. Pombo, and N. Aguirre. DynAlloy: upgrading

Alloy with actions. In ICSE 2005, pages 442–451. ACM, 2005.

6. D. Jackson. Software Abstractions: Logic, Language, and Analysis. MIT Press,

revised edition, 2012.

7. L. Lamport. Specifying Systems, The TLA+ Language and Tools for Hardware and

Software Engineers. Addison-Wesley, 2002.

8. J. P. Near and D. Jackson. An imperative extension to Alloy. In ABZ 2010, volume

5977 of LNCS, pages 118–131. Springer, 2010.

9. C. Newcombe. Why amazon chose TLA+. In ABZ 2014, volume 8477 of LNCS,

pages 25–39. Springer, 2014.

10. E. Torlak and D. Jackson. Kodkod: A relational model ﬁnder. In TACAS 2007,

volume 4424 of LNCS, pages 632–647. Springer, 2007.

11. A. Vakili and N. A. Day. Temporal logic model checking in Alloy. In ABZ 2012,

volume 7316 of LNCS, pages 150–163. Springer, 2012.

