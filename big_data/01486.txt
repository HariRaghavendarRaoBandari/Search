6
1
0
2

 
r
a

M
4

 

 
 
]
S
D
.
s
c
[
 
 

1
v
6
8
4
1
0

.

3
0
6
1
:
v
i
X
r
a

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

DAVID G. HARRIS1, JOHANNES SCHNEIDER2, AND HSIN-HAO SU3

Abstract

The (∆ + 1)-coloring problem is a fundamental symmetry breaking problem in distributed comput-
ing. We give a new randomized coloring algorithm for (∆ + 1)-coloring running in O(√log ∆) +
2O(√log log n) rounds with probability 1 − 1/nΩ(1) in a graph with n nodes and maximum degree

∆. This implies that the (∆ + 1)-coloring problem is easier than the maximal independent set
problem and the maximal matching problem, due to their lower bounds by Kuhn, Moscibroda, and
Wattenhofer [PODC’04]. Our algorithm also extends to the list-coloring problem where the palette
of each node contains ∆ + 1 colors.

1. Introduction

Given a graph G = (V, E), let n = |V | denote the number of vertices and let ∆ denote the
maximum degree. The k-coloring problem is to assign each vertex a color from {1, 2, . . . , k} such
that no two neighbors are assigned with the same color.
In this paper, we study the (∆ + 1)-coloring problem in the distributed LOCAL model. In this
model, vertices host processors and operate in synchronized rounds. In each round, each vertex
sends one message of arbitrary size to each of its neighbors, receives messages from its neighbors,
and performs (unbounded) local computations. The time complexity of an algorithm is measured
by the number of rounds until every vertex commits its output, in our case, its color.

The distributed coloring problem, and variants, have a long history dating back to the 1980’s.
We consider the most common form: the (∆ + 1)-coloring problem. Table 1 summarizes the results
for this problem. Two major branches of study have been developed, the deterministic approach
and the randomized approach. For the deterministic approach, several algorithms with running
time of O(f (∆) + log∗ n) have been developed [4, 8, 26, 27, 17, 16]. The latter term is necessary
as Linial showed that 3-coloring a ring requires Ω(log∗ n) rounds [27].
It had been questioned
whether an algorithm with a sublinear function f (∆) exists, since there are Ω(∆) lower bounds
for related problems, in more restrictive settings [18, 21, 26, 42]. A breakthrough by Barenboim
[4] ﬁrst gave an algorithm running in O(∆3/4 log ∆ + log∗ n) rounds, which is notably sublinear in
∆. Subsequently, the bound was improved to O(√∆ log2.5 ∆ + log∗ n) by Fraigniaud et al. [13].

The randomized approach can be traced back to the O(log n) rounds maximal independent set
(MIS) algorithm of Alon, Babai, and Itai [1] and Luby [29], where the latter showed that the
(∆ + 1)-coloring problem can be reduced to the MIS problem. The O(log n) upper bound lasted
until Schneider and Wattenhofer gave an algorithm of running time O(log ∆ + √log n) [41]. Then,
Barenboim et al. [9] improved the dependence on n to 2O(√log log n) by a graph shattering technique.
All the algorithms require Ω(log n) rounds when ∆ = nc for some constant 0 < c ≤ 1.

1Department of Applied Mathematics, University of Maryland, College Park, MD 20742. Research supported in

part by NSF Awards CNS-1010789 and CCF-1422569. Email: davidgharris29@hotmail.com.

2ABB Corporate Research, Segelhofstr. 1K, Baden Switzerland. Email: johannes.schneider@ch.abb.com.
3Massachusetts Institute of Technology, supported by NSF Awards CCF-0939370, BIO-1455983, and AFOSR
FA9550-13-1-0042. Part of the work was done while at University of Michigan, supported by NSF grant CCF-
1217338. Email: hsinhao@csail.mit.edu.

1

2

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

Bounds Randomized

Deterministic

O(√log ∆) + 2O(√log log n)
O(log ∆) + 2O(√log log n)
O(log ∆ + √log n)
O(log n)

[This paper] O(√∆ log2.5 ∆ + log∗ n)
[9] O(∆3/4 log ∆ + log∗ n)
[41] O(∆ + log∗ n)

[29, 1, 22] O(∆ log ∆ + log∗ n)

Upper

Lower

Ω(log∗ n)

[13]
[4]
[8]
[26]
[27, 17]
[17]
[16]
[34]
[27]

O(∆2 + log∗ n)
O(∆ log n)
∆O(∆) + O(log∗ n)
2O(√log n)
[27] Ω(log∗ n)

Table 1. Comparison of (∆ + 1)-coloring algorithms and lower bounds

We give an algorithm that runs in O(√log ∆) + 2O(√log log n) time, which is the ﬁrst algorithm
that runs in o(log n) rounds for any graph. Moreover, this implies a separation between the (∆+1)-
coloring and the MIS problem. The coloring problem and the MIS problem are related; for example,
given a (∆ + 1)-coloring one can compute a MIS in ∆ + 1 rounds by letting a node with color i join
the MIS in round i (if no neighbor joined previously). Conversely, Luby [29] showed that any MIS
algorithm can be used for (∆ + 1)-coloring in the same running time by simulating it on a blow-
up graph. Kuhn, Moscibroda, and Wattenhofer [24] showed that there exists a family of graphs
with ∆ = 2O(√log n log log n) such that computing an MIS or a maximal matching requires at least
Ω(plog n/ log log n) rounds1. To this date, it has been unclear whether (∆ + 1)-coloring, MIS and
maximal matching are equally hard problems. (A separation was known between (2∆ − 1)-edge
coloring problem and the maximal matching problem [12]). Our algorithm computes (∆ + 1)-
coloring in the above graphs in O((log n log log n)1/4) rounds. Thus, it implies (∆ + 1)-coloring is
an easier problem.

In addition, our algorithm extends to a closely related generalization of the vertex-coloring
problem known as list-coloring. Here, each vertex is equipped with a palette containing (∆ + 1)
colors; each vertex selects one color from its palette, and no two neighbors can be assigned the
same color. (∆ + 1)-coloring is a special case, in which every vertex has the same palette of size
∆ + 1.

1.1. Technical Summary. We begin by observing that if we use more colors than are needed,
then it is possible to color the graph faster. For example, graphs can be colored very fast using
(1+ Ω(1))∆ colors [41, 12]. Similar ideas apply to sparse graphs, whose chromatic number is known
to be smaller than ∆ + 1. Elkin, Pettie, and Su [12] showed that if a graph is (1− ǫ)-locally-sparse,
then it is possible to obtain a (∆ + 1)-coloring in O(log(1/ǫ)) + 2O(√log log n) rounds.
It is thus the dense parts of the graph that become a bottleneck. On the other hand, if a graph is
dense, then it is likely to have short diameter. Since computation is free in the distributed setting,
a single vertex in the graph can read in all the information in diameter time, make a decision, and
broadcast it to the whole graph.

We develop a network decomposition procedure based on local sparseness. Our decomposition
algorithm is targeted towards identifying dense components of constant weak diameter and sparse
components in a constant number of rounds. Roughly speaking, a sparse vertex is one which has
≤ (1 − ǫ)∆2 edges in its neighborhood, where ǫ > 0 is a parameter that we will carefully choose.
At the same time, we would also like to bound the number of neighbors of a dense component that
are not members of the dense component itself, called external neighbors. This step is necessary
to bound the inﬂuence of color choices of nodes in one component on other components. This

1The same authors claimed the bound can be improved to Ω(√log n) with graphs of ∆ = 2O(√log n) in [25].

However, recently Bar-Yehuda, Censor-Hillel, and Schwartzman [3] pointed our an error in their proof.

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

3

mechanism may help to leverage algorithms for other distributed problems that can handle either
dense or sparse graphs well.

First, we ignore the sparse vertices. Since each dense component has constant weak diameter,
it can elect a leader to assign a color to every member so that no intra-component conﬂicts occur
(i.e. the endpoints of the edges inside the same component are always assigned diﬀerent colors).
Meanwhile, we hope that the assignments are random enough so that the chance of inter-component
conﬂicts will be small. Combined with the property of the decomposition that the number of
external neighbors is bounded, we show that the probability that a vertex remains uncolored is
roughly O(ǫ) in each round. After O(log1/ǫ ∆) rounds, the degree of each vertex becomes suﬃciently
small so that the algorithm of Barenboim [4] can handle the residual graph eﬃciently.

For the sparse vertices we analyze a preprocessing initial coloring step of the algorithm. We show
that there will be an Ω(ǫ2∆) gap between the palette size and the degree due to the sparsity. The
gap remains while the dense vertices are colored. So, we will be able to color the sparse vertices by
using the algorithm of Elkin et al. [12], which requires O(log(1/ǫ)) + exp(O(√log log n)) rounds. In
contrast to [12], our analysis generalizes to the list-coloring problem. By setting ǫ = 2−Θ(√log ∆),
we balance the round complexity between the dense part and the sparse part, yielding the desired
running time.

The main technical challenge lies in the dense components.

In each component, we need to
generate a random proper coloring so that each vertex has a small probability of receiving the same
color as one of its external neighbors. We give a process for generating a proper coloring where the
probability that a vertex gets any color from its palette is close to uniform. Additionally, we will
need to show that the structure of the decomposition is maintained so that a vertex remains to have
a small fraction of external neighbors in the next round. This requires showing tight concentration
bounds on certain quantities. However, the process of generating a random proper coloring creates
a cascade of dependence on the colors received by the vertices. Standard concentration inequality
arguments based on bounded diﬀerences such as Azuma’s inequality do not apply. We use instead
a novel argument based on the rank statistics of the random permutations, which are independent
between vertices in the same component.

1.2. Overview. In Section 2, we review related algorithms for network decomposition and coloring.
In Section 3, we state our network decomposition. In Section 4, we outline the full algorithm for
list-coloring. It consists of two steps: an initial coloring step applied to all vertices, and multiple
rounds of dense coloring. In Section 5, we describe the initial coloring step for creating the gap
between the palette size and the degree for sparse vertices. In Section 6, we describe a single round
of the dense coloring procedure and analyze the behavior of the graph structure.
In Section 7,
we ﬁnish our analysis by solving recurrence relations for dense components which yield the overall
algorithm run time. In Section 8, we apply the initial coloring step to give a full algorithm for
locally-sparse graphs; this extends the algorithm of [12] to list-coloring.

2. Related Work

Various network decompositions have been developed to solve distributed computing problems.
Awerbuch et al. [2] introduced the notion of (d, c)-decompositions where each component has a
diameter d and the contracted graph can be colored in c colors. They give a deterministic procedure
for obtaining a (2O(√log n log log n), 2O(√log n log log n))-decomposition, which can be used to compute a
(∆+1)-coloring and MIS in 2O(√log n log log n) rounds deterministically. Panconesi and Srinivasan [34]
showed how to obtain a (2O(√log n), 2O(√log n))-decomposition, yielding 2O(√log n)-time algorithms
for (∆ + 1)-coloring and MIS. Linial and Saks [28] gave a randomized algorithm for obtaining a
(O(log n), O(log n))-decomposition in O(log2 n) rounds. Barenboim [7] gave a randomized algorithm
for obtaining (O(1), Oǫ(1))-decompositions in O(nǫ) rounds.

4

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

Reed [37] introduced the structural decomposition to study the chromatic number of graphs of
bounded clique size (see [31] for a detailed exposition). It was later used for various applications
including total coloring, frugal coloring, and computation of the chromatic number [38, 33, 30, 32].
Our network decomposition method is inspired by theirs in the sense that they showed a graph can
be decomposed into a sparse component and a number of dense components. However, as their
main goal was to study the existential bounds, the properties of the decomposition between our
needs are diﬀerent. For example, the diameter is an important constraint in our case. Also, our
decomposition must be computable in parallel, while theirs is obtained sequentially.

The (∆ + 1)-coloring algorithms are brieﬂy summarized in Table 1. Barenboim and Elkin’s
monograph [6] contains an extensive survey of coloring algorithms. Faster algorithms also exist
if we use more than (∆ + 1) colors. For deterministic algorithms, Linial [27] and Szegedy and
Vishwanathan [42] gave algorithms for obtaining a O(∆2)-coloring running in O(log∗ n) rounds.
Barenboim and Elkin [5] showed how to obtain an O(∆1+ǫ)-coloring in O(log ∆· log n) rounds. For
randomized algorithms, Schneider and Wattenhofer [41] showed that an O(∆ log(k) n + log1+1/k n)-
coloring can be obtained in O(k) rounds. Combining the results in [41] with Kothapalli et al. [23],
an O(∆)-coloring can be obtained in O(√log n) rounds. Barenboim et al. [9] showed it can be
improved to 2O(√log log n) rounds.

On the other hand, there are algorithms for coloring the graph using less than (∆ + 1) colors for
sparse-type graphs. Panconesi and his co-authors [20, 11, 19, 35] developed a line of randomized
algorithms for edge coloring (the line graph is sparse) and Brook-Vizing colorings in the distributed
setting. For example, in [20], they showed that an O( ∆
log ∆ )-coloring for girth-5 graphs can be
obtained in O(log n) rounds, provided ∆ = (log n)1+Ω(1). Pettie and Su [36] generalized it to
triangle-free graphs. The restriction on ∆ can be removed by applying the constructive Lov´asz
Local Lemma in the distributed setting [10].

Distributed coloring using less than ∆ + 1 depending on the chromatic numbers χ has been
investigated by Schneider et al. [39]. They require (1 − 1/O(χ)) · (∆ + 1) colors for a running time
of O(log χ + log∗ n) for graphs with ∆ ∈ Ω(log1+1/ log∗ n n) and χ ∈ O(∆/ log1+1/ log∗ n n).
More eﬃcient algorithms for (∆ + 1)-coloring exist for very dense graphs, e.g. a deterministic
O(log∗ n) algorithm for growth bounded graphs (e.g. unit disk graphs) [40], as well as for many
types of sparse graphs [9, 12, 36], e.g. for graphs of low arboricity. The arboricity of a graph is the
minimum number of edge-disjoint forests, whose union contains all edges of the graph. A graph

is (1 − ǫ)-locally sparse, if for every vertex v ∈ V , its neighborhood induces at most (1 − ǫ)(cid:0)∆
2(cid:1)
edges. In [12], a distributed (∆ + 1)-coloring algorithm was given for locally-sparse graphs, which
we expand to cover list-colorings as well.
As we have discussed, the MIS problem and the coloring problems are related. The MIS can be
computed deterministically in O(∆ + log∗ n) rounds [8] and in 2O(√log n) rounds [34]. Very recently,
Ghaﬀari [15] reduced the randomized complexity of MIS to O(log ∆) + 2O(√log log n). Whether an
MIS can be obtained in polylogarithmic deterministic time or sublogarithmic randomized time
remain interesting open problems.

A generalization of MIS, known as an ruling set, has also been considered. A (α, β)-ruling set
U ⊆ V [2] is a set of vertices such that two nodes u, u′ ∈ U have distance at least α and for any
node v ∈ V \ U there exists a node u ∈ U with distance at most β. MIS is a special case, namely
a (2, 1)-ruling set. A number of papers [14, 39, 2] use ruling sets to compute colorings in diﬀerent
kinds of graphs. A ruling set can be viewed as deﬁning a network decomposition, such that any
component has diameter at least α and at most 2β.

3. Network decomposition and sparsity

In this section, we deﬁne a structural decomposition of the graph G into sparse and dense

vertices. We measure these notions with respect to a parameter ǫ ∈ [0, 1].

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

5

Deﬁnition 3.1 (Friend edge). We say an edge uv is a friend edge if u and v share at least (1− ǫ)∆
neighbors (i.e. |N (u) ∩ N (v)| ≥ (1 − ǫ)∆). We deﬁne F ⊆ E to be the set of friend edges.

For any vertex u, we say v is a friend of u if uv ∈ F ; we denote the friends of u by F (u).

Deﬁnition 3.2 (Dense and sparse vertices). A vertex v ∈ V is dense if it has at least (1 − ǫ)∆
friends. Otherwise, it is sparse.
We write V dense ⊆ V for the set of dense vertices in G, and V sparse for the set of sparse vertices

in G.
Deﬁnition 3.3 (Weak diameter). Let H ⊆ G be a subgraph of G. For vertices u, v ∈ V , let d(u, v)
denote the distance between u and v in G. The weak diameter of H is deﬁned to be maxu,v∈H d(u, v).
Let C1, . . . , Ck be the connected components of the subgraph H = (V dense, EH) ⊆ G, where
EH = {uv | u, v ∈ V dense and uv ∈ F}. That is, they are the connected components induced by
friend edges and dense vertices. The vertices of G are partitioned disjointly as V = V sparse⊔V dense =
V sparse ⊔ C1 ⊔ ··· ⊔ Ck. We refer to each component Cj as an almost-clique.
Lemma 3.4. Suppose ǫ < 1/5. Then, for any vertices x, y ∈ Cj, we have |N (x)∩N (y)| ≥ (1−2ǫ)∆.
Proof. As x, y are in the same component Cj, there is a path of friend edges x = u0, . . . , ut = y
connecting them. We claim that |N (x) ∩ N (ui)| ≥ (1 − 2ǫ)∆ for all i ≥ 1. We will show this by
induction on i. The base case i = 1 follows as xu1 is a friend edge.
Now, consider the induction step. As ui−1ui is a friend, |N (ui) ∩ N (ui−1)| ≥ (1 − ǫ)∆. By the
We thus have:

induction hypothesis, |N (x) ∩ N (ui−1)| ≥ (1 − 2ǫ)∆.

|N (x) ∩ N (ui)| ≥ |N (x) ∩ N (ui−1) ∩ N (ui)|

= |N (ui−1) ∩ N (ui)| + |N (ui−1) ∩ N (x)| − |(N (ui−1) ∩ N (ui)) ∪ (N (ui−1) ∩ N (x))|

(inclusion-exclusion)

≥ |N (ui−1) ∩ N (ui)| + |N (ui−1) ∩ N (x)| − |N (ui−1)|
≥ (1 − ǫ)∆ + (1 − 2ǫ)∆ − ∆
= (1 − 3ǫ)∆

Since x and ui are dense, we have |N (x) \ F (x)| ≤ ǫ∆ and |N (ui) \ F (ui)| ≤ ǫ∆. Therefore,
|F (x) ∩ F (ui)| = |(N (x) ∩ N (ui)) \ (N (x) \ F (x)) \ (N (ui) \ F (ui))| ≥ (1 − 3ǫ)∆ − ǫ∆ − ǫ∆ ≥
(1 − 5ǫ)∆ > 0.
So x and ui have a common friend w. This implies that |N (x) ∩ N (w)| ≥ (1 − ǫ)∆ and |N (ui) ∩
N (w)| ≥ (1 − ǫ)∆. By a similar inclusion-exclusion argument, this implies |N (x) ∩ N (ui)| ≥
(1 − 2ǫ)∆.
Corollary 3.5. Suppose ǫ < 1/5. Then all almost-cliques have weak diameter at most 2.
Proof. By Lemma 3.4, any vertices x, y ∈ Cj have |N (x) ∩ N (y)| ≥ (1 − 2ǫ)∆ > 0. In particular,
they have a common neighbor.

(cid:3)

(cid:3)

A vertex v in Cj can identify all other members of Cj in O(1) rounds by the following: Initially,
In this
each vertex u ∈ G broadcasts the edges incident to u to all nodes within distance 3.
way, every vertex v learns the graph topology of all nodes up to distance 3, which is suﬃcient to
determine whether an edge (both of whose endpoints are within distance 2 of v) is a friend edge
and whether a vertex (within distance 2) is dense. Since by Corollary 3.5, all members of Cj are
within distance 2 to v, all the members can be identiﬁed. Also, the leader of Cj can be elected as
the member with the smallest ID.
Deﬁnition 3.6 (External degree). For any dense vertex v ∈ Cj, we deﬁne d(v), the external degree
of v, as the number of dense neighbors of v outside Cj. (Sparse neighbors are not counted.)

6

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

Lemma 3.7. For any dense vertex v, we have d(v) ≤ ǫ∆.
Proof. Let v ∈ Cj be dense. As v is dense, it has at least (1 − ǫ)∆ friends. So it has at most
ǫ∆ dense vertices which are not friends. If any dense vertex w is a friend of v, then by deﬁnition
w ∈ Cj. So v has at most ǫ∆ dense neighbors outside Cj.
(cid:3)
Deﬁnition 3.8 (Anti-degree). For any dense vertex v ∈ Cj, we deﬁne the anti-degree of v to be
a(v) = |Cj \ N (v)|.
Lemma 3.9. Suppose ǫ < 1/5. Then for any Cj and v ∈ Cj, we have a(v) ≤ 3ǫ∆.
Proof. We will show this by counting in two ways the number of length-2 paths of the form v, x, u
where x ∈ G and u ∈ Cj \ N (v). First, observe that for any u ∈ Cj \ N (v), there are precisely
|N (v) ∩ N (u)| possibilities for the middle vertex x. Thus we have

R = Xu∈Cj\N (v)

|N (v) ∩ N (u)|;

by Lemma 3.4, for any u ∈ Cj \ N (v) we have |N (v) ∩ N (u)| ≥ (1 − 2ǫ)∆. So R ≥ a(v)(1 − 2ǫ)∆.

We can also count R by summing over the middle vertex x:

|N (x) ∩ (Cj \ N (v))|

R = Xx∈N (v)
≤ Xx∈N (v)
= Xx∈F (v)
≤ Xx∈F (v)
≤ Xx∈N (v)
≤ ∆2 − (1 − ǫ)(∆ − ǫ∆)
= ∆2(2 − ǫ)ǫ

|N (x) \ N (v)|
|N (x) \ N (v)| + Xx∈N (v)\F (v)
ǫ∆ + Xx∈N (v)\F (v)
∆ − Xx∈F (v)

(∆ − ǫ∆)

|N (x) \ N (v)|

∆

|F (v)| ≥ (1 − ǫ)∆ as v is dense

Thus, we must have

So a(v) ≤ ∆ ǫ(2−ǫ)

1−2ǫ ; this is at most 3ǫ∆ for ǫ < 1/5.

a(v)(1 − 2ǫ)∆ ≤ R ≤ ∆2(2 − ǫ)ǫ

Corollary 3.10. For ǫ < 1/5, all almost-cliques have size at most (1 + 3ǫ)∆.
Proof. Let v ∈ Cj. Then |Cj| = |Cj \ N (v)| + |Cj ∩ N (v)| ≤ a(v) + |N (v)| ≤ (1 + 3ǫ)∆.

4. Full algorithm outline

(cid:3)

(cid:3)

We can now describe our complete algorithm for list-coloring graphs, whether sparse or dense.
√ln ∆⌉, where C > 0 is a small constant (to be speciﬁed
We set the density parameter ǫ = C · 100−⌈
later). Also, we assume that ǫ4∆ ≥ K ln n for suﬃciently large constant K; if ǫ4∆ < K ln n,
then ∆ < polylog(n), and so then the coloring procedure of [9] will already color the graph in
O(log ∆) + 2O(√log log n) = 2O(√log log n) rounds.
1. Decompose G into V sparse, C1, . . . , Ck.
2. Execute the initial coloring step for all vertices.

3. For i = 1, . . . ,⌈√ln ∆⌉, execute the ith dense coloring step on the dense vertices.

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

7

4. Run the algorithm of [12] to color the sparse vertices.
5. Run the algorithm of [9] to color the residual graph.

We note that the decomposition of G in step (1) remains ﬁxed for the entire algorithm. Although
in later steps vertices become colored and are removed from G, we always deﬁne the decomposition
in terms of the original graph G, not the residual graph. However, we abuse notation so that when
we refer to a component Cj during an intermediate step, we mean the intersection of Cj with the
residual (uncolored) vertices.

The initial coloring step is the following: With probability 99/100, each vertex does nothing;
otherwise it selects a color from its palette. All these choices are made uniformly and independently.
If two adjacent vertices select the same color, then the vertex with higher ID discards its choice of
color (i.e. it becomes decolored).

We assume at the end of the initial coloring step and the end of each dense coloring step, if a vertex
gets colored, it will be removed from the graph (as well as from the vertex set V sparse, C1, . . . , Ck it
belongs to). Also, the color used by it will be removed from the palettes of its neighbors. For any
vertex v, let Pal0(v), d0(v) denote, respectively, the palette and degree of v after the initial coloring
step (note that the 0 does not denote time 0, but the time immediately after the initial coloring
step), and we let Q0(v) = | Pal0(v)|. We will show in Lemma 5.8 that whp for every sparse vertex
v we have

Q0(v) ≥ d0(v) + Ω(ǫ2∆).

and that for every vertex v (sparse or dense) we have Q0(v) ≥ ∆/2.
Then we turn our attention to the dense vertices and we will show that they can be colored
eﬃciently. For a dense vertex x ∈ Cj, we let d0(x) and a0(x) denote its external degree and anti-
degree after the initial coloring step. Let Pali(x), di(x), di(x), ai(x), Qi(x) denote the quantities at
the end of the ith dense coloring step. As we color the graph, we maintain two key parameters,
Di, Zi which bound the external degree, anti-degree, and palette size for dense vertices after the
ith dense coloring step. Namely, we ensure the invariant that for all dense vertices v we have

Initially,

ai(v) ≤ Di, di(v) ≤ Di, Qi(v) ≥ Zi

D0 = 3ǫ∆

Z0 = ∆/2

The ith dense coloring step is as follows:

1. For each Cj, elect a leader to simulate the following process to color Cj:

2. Generate a random permutation πj on 1, . . . ,|Cj|
3. For k = 1, . . . , L = ⌈|Cj|(1 − 2(Di−1/Zi−1) ln(Zi−1/Di−1))⌉:

Cj.

4. vπ(k) ∈ Cj randomly selects a color in its palette not selected by its neighbors in
5. If some vertex v ∈ Cj has a color conﬂict with a vertex in Cj′ for j′ < j, then decolor v.
Note that we can simply use the ID of the leader of the almost-clique as the index of the
almost-clique for this.

It may seem more natural to attempt to color all the vertices of Cj in step 3, as opposed to
only L of them. However, this would cause the palette sizes to shrink too quickly. We discuss this
issue in more detail in Section 6. (As we will show in Lemma 7.2, the choice of L in step (3) is

meaningful, that is, we have (1 − 2Di/Zi ln(Zi/Di)) ∈ [0, 1] for all i ≤ ⌈√ln ∆⌉. )

Note that the excess of palette size over degree can only increase during the course of this
algorithm (every time we color a neighbor of v, we delete at most one color from Pal(v). So at the
end of the dense coloring steps, we have that for every sparse vertex v

Q

√ln ∆⌉
⌈

√ln ∆⌉
(v) − d
⌈

(v) ≥ Q0(v) − d0(v) ≥ Ω(ǫ2∆)

8

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

The algorithm of Elkin et al.

[12] is designed for list-coloring in which the palette sizes signif-
icantly exceed the degree. This indeed holds for the sparse vertices: their palette sizes exceeds
their degree by Ω(ǫ2∆). Thus they can be colored in O(log(1/ǫ2)) + 2O(√log log n) = O(√log ∆) +
2O(√log log n) rounds. This removes the sparse vertices from the graph, leaving only the dense vertices
behind.

After the sparse vertices are removed, Theorem 7.5 shows that each remaining dense vertex is

connected to ∆′ ≤ O(log n) · 2O(√log ∆) other vertices. The algorithm of [9] then takes O(log ∆′) +
2O(√log log n) = O(√log ∆) + 2O(√log log n) steps.

5. The Initial Coloring Step

We assume that the vertices initially have a palette containing exactly ∆ + 1 colors. The key to
analyzing the local situation, as in [12], is to show that after the initial coloring step, every sparse
vertex has signiﬁcantly more colors in its palette than it has neighbors.

Recall the procedure is that with probability 99/100, each vertex does nothing; otherwise it
selects a color A(v) from its palette uniformly at random and discards its choice of color if a
neighbor with lower ID chooses the same color. For each vertex, we let B(v) denote the ﬁnal choice
of color; we say A(v) = 0 if vertex v chose not to select a color initially and we say B(v) = 0 if v
is uncolored (either because it did not select an initial color, or it became decolored). One simple
property of this process is that any vertex receives any potential color with probability Ω(1/∆):
Lemma 5.1. For any vertex v and any color c ∈ Pal(v), we have

P (B(v) = c) ≥

0.009
∆ + 1

Proof. We have B(v) = c if A(v) = c and there is no w ∈ N (v) with A(w) = c and ID(w) < ID(v).

P (B(v) = c) ≥ P (A(v) = c) Yw∈N (v)
∆ + 1 ·(cid:18)1 −

P (A(w) 6= c)
100(∆ + 1)(cid:19)|N (v)|

1

1

≥ 1/100 ·
0.009
∆ + 1

≥

(cid:3)

One crucial property of this process is that each B(v) is completely determined by the random
variables A(u), where ID(u) ≤ ID(v). We can think of this coloring procedure as a stochastic
process (in which the vertex ID plays the role of time).
Let us now ﬁx some sparse vertex v, and show that after the initial coloring step v has more
colors in its palette than it has neighbors. For each color c, let Xc denote the number of neighbors
w ∈ N (v) which have B(w) = c at the end of the coloring process.
Lemma 5.2. Let d(v), Pal(v) denote the initial degree and palette of vertex v. Then we have

Q0(v) − d0(v) ≥ ∆ + 1 − d(v) + Xc∈Pal(v)

max(0, Xc − 1) + Xc /∈Pal(v)

Xc

where recall that d0(v), Q0(v) are the degree and palette size of v after the initial coloring step.

Proof. Suppose we go through the vertices in an increasing order of their ID, v1, v2, . . . , vn, where
ID(v1) < ID(v2) < . . . < ID(vn). At stage i we ﬁx the color of vertex vi to B(vi). If B(vi) 6= 0, we
remove vi from the graph and remove B(vi) from the palette of all its neighbors. Given the vertex
v, let Q(v) denote the palette size and let φi denote the value of Q(v)−d(v) after processing vertices

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

9

v1, . . . , vi in this manner. In this case, φ0 = Q(v) − d(v) = ∆ + 1 − d(v) and φn = Q0(v) − d0(v),
which is the quantity we are trying to estimate.
Suppose that vi is a neighbor of v. Let us now examine how φi changes depending on B(vi).
If B(vi) = 0, then vi remains in the residual graph and neither Pal(v) nor d(v) are aﬀected, so
φi+1 = φi.

Suppose that B(vi) = c and c /∈ Pal(v). This means that vi has selected a color not appearing
in Pal(v). Thus, the degree of v decreases by one while its palette is unaﬀected, so φi+1 = φi + 1.
Note the case that c /∈ Pal(v) can only occur in the list-coloring problem.
Suppose that B(vi) = c and c ∈ Pal(v). If vi is the ﬁrst vertex such that B(vi) = c, we have
φi+1 = φi and color c is removed from Pal(v). Otherwise, there exists j < i with B(vj) = c, then c
is no longer in Pal(v) and thus we have φi+1 = φi + 1.

Thus, we have identiﬁed max(0, Xc − 1) (for c ∈ Pal(v)) and Xc vertices (for c /∈ Pal(v)) which
select color c and cause φi+1 = φi + 1. These vertices all must be disjoint, so there are at least
Pc∈Pal(v) max(0, Xc − 1) +Pc /∈Pal(v) Xc vertices for which φi+1 = φi + 1.
This implies that φn ≥ φ0 +Pc∈Pal(v) max(0, Xc − 1) +Pc /∈Pal(v) Xc, which is what we claim. (cid:3)
For any vertex v and color c, we say that color c is good for v if the following occurs. For
c ∈ Pal(v), then c is good for v if Xc ≥ 2; if c /∈ Pal(v), then c is good for v if Xc ≥ 1. Let J(v)
denote the set of colors that are good for v. By Lemma 5.2, we have that

We will next show that |J(v)| is large with high probability. For each vertex v and color c, we

deﬁne Nc(v) to be the set of neighbors whose palette contains c; that is,

Q0(v) − d0(v) ≥ ∆ + 1 − d(v) + |J(v)|

For colors c /∈ Pal(v), it is easy to show that c has a good probability of going into J(v):

Nc(v) = {w ∈ N (v) | c ∈ Pal(w)}

Lemma 5.3. Suppose that c /∈ Pal(v). Then

Proof. For c /∈ Pal(v), we have c ∈ J(v) iﬀ Xc ≥ 1. By inclusion-exclusion, we have
P (B(w) = B(w′) = c)

P (c ∈ J(v)) ≥ Ω(cid:16)|Nc(v)|
∆ (cid:17)
P (B(w) = c) − Xw,w′∈Nc(v)
P (B(w) = c) − Xw,w′∈Nc(v)

− |Nc(v)|2
− |Nc(v)|∆

1002(∆ + 1)2

P (Xc ≥ 1) ≥ Xw∈Nc(v)
≥ Xw∈Nc(v)
0.009|Nc(v)|
≥

∆ + 1

0.009|Nc(v)|

≥
≥ 0.004|Nc|/∆

∆ + 1

P (A(w) = A(w′) = c)

1002(∆ + 1)2

by Lemma 5.1

For colors c ∈ Pal(v), it is harder to bound the probability that c ∈ J(v).

Lemma 5.4. Suppose that ǫ∆ ≥ 3 and ǫ < 1/5. If v is a sparse vertex, c ∈ Pal(v), and |Nc(v)| ≥
(1 − 0.01ǫ)∆, then P (c ∈ J(v)) ≥ Ω(ǫ2).
Proof. Let S denote the set of all neighbors of v which contain color c and are not friends of v;

(cid:3)

S = {w ∈ Nc(v) | wv /∈ F}

10

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

By deﬁnition of sparsity, v has at most (1− ǫ)∆ friends. Thus, |S| ≥ |Nc(v)|− (1− ǫ)∆ ≥ 0.99ǫ∆.
For each w ∈ S, we have |N (w) ∩ N (v)| < (1 − ǫ)∆. So |Nc(v) − N (w) − {w}| ≥ |Nc(v)| − 1 −
2 ǫ∆. Thus, for

|N (v) ∩ N (w)| > 0.99ǫ∆ − 1; by our assumption on the size of ǫ∆, this is at least 1
each w ∈ S, one can identify a subset of vertices Hw with the following properties:

(1) Hw ⊆ Nc(v) − N (w) − {w}
(2) |Hw| = ⌈ǫ∆/2⌉
Let us ﬁx some subset S′ ⊆ S, of cardinality exactly |S′| = ⌈0.01ǫ∆⌉. Now, note that a suﬃcient
condition to have Xc ≥ 2 is that there is some w ∈ S′ and u ∈ Hw with B(w) = B(u) = c. This
happens with probability at least:

P (B(w) = c ∧ B(u) = c for some w ∈ S′, u ∈ Hw) ≥
Xw∈S′,u∈Hw
Xw∈S′,u,u′∈Hw,u6=u′

P (B(w) = B(u) = c) −

P (B(w) = B(w′) = c)

− Xw,w′∈S′,w6=w′

P (B(w) = B(u) = B(u′) = c)

Notice that the inequality holds by considering the number of times the event “there is some
w ∈ S′ and u ∈ Hw with B(w) = B(u) = c” is counted on both sides. Let A = {w ∈ S′ | B(w) = c}
and Ba = {u ∈ Ha | B(u) = c}. It suﬃces to show that 1 ≥Pa∈APb∈Ba 1−Pa∈APb,b′∈Ba,b6=b′ 1−
Pa,a′∈A,a6=a′ 1.
Xa∈A Xb∈Ba

1 −Xa∈A Xb,b′∈Ba,b6=b′

1 − Xa,a′∈A,a6=a′

1

(|Ba| − |Ba| · (|Ba| − 1)) − Xa,a′∈A,a6=a′
1 − Xa,a′∈A,a6=a′

1 = Xa∈A
≤ Xa∈A
= |A| − |A| · (|A| − 1) ≤ 1

1

1

We can derive an upper bound on P (B(w) = B(u) = B(u′) = c) by noting that a necessary
condition for this event is that A(w) = A(u) = A(u′) = c, and this occurs with probability exactly
1003(∆+1)3 . There are at most (0.01ǫ∆ + 1) · (ǫ∆/2 + 1)2 choices for w, u, u′ so this term is at most
2 · 10−8ǫ3.
1002(∆+1)2 . There are at most (0.01ǫ∆ + 1)2
Similarly, we have that P (B(w) = B(w′) = c) ≤
choices for w, w′ so this term is at most 4 · 10−8ǫ2.
Next, consider some u ∈ Hw. A suﬃcient condition to have B(w) = B(u) = c is if A(w) =
A(u) = c and there is no z ∈ N (u) ∪ N (w) with A(z) = c. Furthermore, any such z cannot itself
be equal to u or w as u and w are non-neighbors. Thus,

1

P (B(w) = B(u) = c) ≥ P (A(w) = A(u) = c) Yz∈N (u)∪N (w)

1

1002(∆ + 1)2 (cid:18)1 −
≥
≥ 9.8 · 10−5 · (∆ + 1)−2

P (A(z) 6= c)
100(∆ + 1)(cid:19)|N (u)∪N (w)|

1

as |N (u) ∪ N (w)| ≤ 2∆

P (B(w) = B(u) = c) ≥ 0.01ǫ∆ · ǫ∆/2 · 9.8 · 10−5 · (∆ + 1)−2 ≥ 10−7ǫ2

Thus, we have

Xw∈S′,u∈Hw

And overall we thus have

P (Xc ≥ 2) ≥ 10−7ǫ2 − 4 · 10−8ǫ2 − 2 · 10−8ǫ3 ≥ Ω(ǫ2)

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

11

(cid:3)

Lemma 5.5. Suppose that ǫ∆ ≥ 3 and ǫ < 1/5. For any sparse vertex v with d(v) ≥ (1− 0.005ǫ)∆,
we have E[|J(v)|] ≥ Ω(ǫ2∆).
Proof. Observe that for each w ∈ N (v), there are exactly ∆ + 1 values of c for which w ∈ Nc(v).
Hence, by double counting, we have

(1)

Let us divide the set of colors into three disjoint sets

|Nc(v)| = (∆ + 1)|N (v)|

Xc

A1 = {c | c /∈ Pal(v)}
A2 = {c | c ∈ Pal(v),|Nc(v)| ≥ (1 − 0.01ǫ)∆}
A3 = {c | c ∈ Pal(v),|Nc(v)| < (1 − 0.01ǫ)∆}

We can decompose the sum (1) as:

(∆ + 1)|N (v)| =Xc

|Nc(v)| = Xc∈A1
≤ Xc /∈Pal(v)

|Nc(v)| + Xc∈A2
|Nc(v)| + |A2|∆ + |A3|(1 − 0.01ǫ)∆

|Nc(v)| + Xc∈A3

|Nc(v)|

Rearranging, and using the fact that |A2| + |A3| = ∆ + 1, we have

Xc /∈Pal(v)

|Nc(v)| ≥ (∆ + 1)(1 − 0.005ǫ)∆ − |A2|∆ − |A3|(1 − 0.01ǫ)∆

≥ (∆ + 1)(1 − 0.005ǫ)∆ − |A2|∆ − (∆ + 1 − |A2|)(1 − 0.01ǫ)∆
= (∆ + 1)((1 − 0.005ǫ) − (1 − 0.01ǫ))∆ − |A2|(1 − (1 − 0.01ǫ))∆
= (∆ + 1)(0.005ǫ)∆ − |A2|(0.01ǫ)∆
= 0.005ǫ∆(∆ + 1 − 2|A2|)
= Ω(ǫ∆(∆ − 2|A2|))

Thus, we have

Eh Xc /∈Pal(v)

[c ∈ J(v)]i ≥ Xc /∈Pal(v)

|Nc(v)|Ω(1/∆)

by Lemma 5.3

≥ max(0, ǫ∆(∆ − 2|A2|) · Ω(1/∆))
≥ max(0, Ω(ǫ(∆ − 2|A2|)))

Also, by Lemma 5.4, for each c ∈ A2 we have P (c ∈ J(v)) ≥ Ω(ǫ2). So, summing over all

c ∈ Pal(v) we have
E[ Xc∈Pal(v)

[c ∈ J(v)] + Xc /∈Pal(v)

[c ∈ J(v)]] ≥ |A2|Ω(ǫ2) + Ω(max(0, ǫ(∆ − 2|A2|)))

(Here and in the remainder of the paper, we use the Iverson notation so that for any predicate

P, [P] is equal to 1 if P is true and zero otherwise.)
This expression is piecewise-linear in |A2|, so it must achieve its minimum value at one of its
corner points |A2| = 0, ∆/2, ∆ + 1. At these points, it takes on the expressions respectively
Ω(ǫ∆), ∆/2 · Ω(ǫ2), and (∆ + 1)Ω(ǫ2). Hence, in all three cases it is at least Ω(ǫ2∆).

(cid:3)

We next show that there is a concentration phenomenon for the number of good colors.

12

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

Lemma 5.6. Suppose ǫ < 1/5. Let v be a sparse vertex. With probability at least 1 − e−Ω(ǫ4∆), we
have d0(v) − Q0(v) ≥ Ω(ǫ2∆).
Proof. If d(v) ≤ (1− 0.005ǫ∆) then Q0(v) − d0(v) ≥ 0.005ǫ∆ ≥ Ω(ǫ2∆) with certainty. So, we may
assume d(v) > (1 − 0.005ǫ∆).
Also, suppose that ǫ∆ < 3. In this case, we need to show that Q0(v)− d0(v) ≥ Ω(ǫ). But, in the
initial graph, we have Q(v) − d(v) = 1 ≥ Ω(ǫ), so again in this case the event holds with certainty.
So, we may assume that ǫ∆ ≥ 3.
If none of these occur, then we will show that |J(v)| ≥ Ω(ǫ2∆) with probability at least 1 −
e−Ω(ǫ4∆) which suﬃces to show this claim.
Let W = {v} ∪ N (v) and let ¯W denote the set of vertices whose distance to v are exactly 2.
Suppose we examine the values of A(u), where u ∈ W . Some of these vertices may decolor others;
other vertices may or may not become decolored, based on A(w) where w ∈ ¯W . Based only on the
colors of the vertices in W , we may derive a set “pre-good” colors J′(v); that is, colors c which will
go into J(v) unless they become de-colored due to vertices in ¯W .

Observe that J(v) ⊆ J′(v), so that E[|J′(v)|] ≥ Ω(ǫ2∆). Let φ > 0 be a constant such that
E[|J′(v)|] ≥ φǫ2∆ for all ∆ ≥ 1. Also, observe that for u ∈ N (v) changing the value of A(u) may
only change |J′(v)| by at most 2; (the value of A(u) can only aﬀect A(u) ∈ J(v); colors c′ 6= A(u) are
not aﬀected). Hence, by the bounded diﬀerences inequality, the probability that |J′(v)| is smaller
than φǫ2∆ by an amount of φ

2 ǫ2∆ is at most

exp −

(φǫ2∆)2

2 ·Pi∈{v}∪N (v) 22! ≤ exp(−Ω(ǫ4∆))

Now, let us condition on the event |J′(v)| ≥ φ

2 ǫ2∆. This event depends only on the values of
A(u) for u ∈ W . So, the values of A(w) for w ∈ ¯W are still independent and uniform. Each such
vertex has the possibility of decoloring a vertex in W , possibly causing a color in J′(v) to not occur
in J(v).

For each color c ∈ J′(v), c /∈ Pal(v), let yc denote the vertex with the smallest ID in the neighbor-
hood of v with A(yc) = c and not decolored by any vertices in W . Similarly, if c ∈ J′(v), c ∈ Pal(v),
let yc, y′c denote the two vertices with smallest IDs in the neighborhood of v with A(yc) = A(y′c) = c
and not decolored by any vertices in W (so yc and y′c cannot be neighbors). Such colors will go
into J(v) unless a vertex in N (yc) selects c (respectively, in N (yc) ∪ N (y′c) selects color c.)
If a vertex w ∈ ¯W selects A(w) = c for such a color c, causing color c to not appear in J(v), we
say that w disqualiﬁes color c. Observe that

|J(v)| ≥ |J′(v)| − Xc∈J′(v)

w∈(N (yc)∪N (y′c))∩ ¯W

[w disqualiﬁes color c].

So it suﬃces to show that

[w disqualiﬁes color c] < φ

4 ǫ2∆

Xc∈J′(v)

w∈(N (yc)∪N (y′c))∩ ¯W

with good probability. Now, observe that each event that w disqualiﬁes color c occurs with prob-
ability at most 1/(100(∆ + 1)). Furthermore, for each color c, there are at most 2∆ choices
of w that can disqualify it. Hence, the expected number of such disqualiﬁcations is at most
φ
2 ǫ2∆ · (2∆) · 1/(100(∆ + 1)) ≤ 0.01φǫ2∆.
Furthermore, all such disqualiﬁcation events are negatively correlated (they are not necessar-
ily independent; a vertex w may possibly disqualify multiple colors). Hence, Chernoﬀ’s bound
applies, and the probability that the number of disqualiﬁcations exceeds 0.02φǫ2∆ is at most
exp(−Ω(0.01φǫ2∆)) = exp(−Ω(ǫ2∆)).

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

13

Overall, we have that |J(v)| ≥ Ω(ǫ2∆) with probability 1 − exp(−Ω(ǫ4∆)).
We also note a useful property of this coloring procedure: vertices, whether sparse or dense,

(cid:3)

retain most of their palette:

Lemma 5.7. At the end of this procedure, for any vertex v we have

P (Q0(v) ≥ ∆/2) ≥ 1 − e−Ω(∆)

Proof. Each vertex w ∈ N (v) chooses an initial color with probability at most 1/100, independently
of any other vertices. Thus, a simple Chernoﬀ bound shows that there is a probability of e−Ω(∆)
that there are no more than ∆/2 neighbors of v which are colored. So with probability 1− e−Ω(∆),
vertex v loses ≤ ∆/2 colors from its original palette size of ∆ + 1.
Lemma 5.8. For K a suﬃciently large constant, the following events occur whp:

(cid:3)

(1) For every sparse vertex v we have d0(v) − Q0(v) ≥ Ω(ǫ2∆)
(2) For every vertex v we have Q0(v) ≥ ∆/2

Proof. By Lemma 5.6, for any individual sparse vertex v the probability that (1) fails is at most
e−Ω(ǫ4∆). Since ǫ4∆ ≥ K ln n, then for K suﬃciently large this is < n−100. We take a union bound
over all sparse vertices and the overall probability that there is some vertex v violating (1) is also
≤ n−Ω(1).
for K suﬃciently large, this is ≤ n−100 and we have that (2) holds whp for all vertices.

By Lemma 5.7, for any individual vertex v the probability that (2) fails is at most e−Ω(∆). Again,
(cid:3)

6. Coloring the dense vertices

We suppose that we are at the beginning of the ith dense coloring step. We assume that there
are parameters Di−1, Zi−1 with the following properties such that for all dense vertices v we have:

(1) ai−1(v) ≤ Di−1
(2) ¯di−1(v) ≤ Di−1
(3) Qi−1(v) ≥ Zi−1
Henceforth we will suppress the dependence on i and write simply D, Z, δ = D/Z, a(v), ¯d(v), Pal(v),
and Q(v). Recall that the dense coloring step (see Section 4) is that every Cj generates a rank for
its members. Starting from the vertex with rank 1 to rank ⌈|Cj|(1− 2δ ln(1/δ))⌉, each vertex selects
a color from its palette excluding the colors selected by lower rank vertices uniformly at random.
This is done by having a leader in Cj simulating the process. Then, a vertex becomes decolored if
there is an external neighbor from a lower indexed component choosing the same color .

Our goal is to show for some new parameters D′ and Z′ that we have at the end of the round
ai(v) ≤ D′, di(v) ≤ D′ and Qi(v) ≥ Z′. To do this, we will show that most vertices are colored in
round i.
We require throughout this section the following conditions on D and Z, which we will refer to

as the regularity conditions:

(1) Dδ ≥ K ln n for some suﬃciently large constant K;
(2) δ ≤ 1/K for some suﬃciently large constant K;
(3) Z ≥ 1.

Here K is some universal constant that we will not explicitly compute; at several places we will
assume it is suﬃciently large. In Section 7 we will discuss how to satisfy these regularity conditions
(or how our algorithm can succeed when they become false).

Consider some almost-clique Cj, with M = |Cj| vertices. For any vertex v ∈ Cj, we deﬁne
Nj(v) = N (v)∩ Cj . The dense coloring step operates by selecting a random permutation π to order
the vertices to be colored. Then, the ﬁrst L = ⌈M (1 − 2δ ln(1/δ))⌉ vertices in this ordering select
their color χ(v) uniformly from their palettes.

14

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

6.1. Overview. We ﬁrst contrast our dense coloring procedure with a naive one, which assigns
each vertex a random color and decolors a vertex if there is a conﬂict. It is not hard to show that
such a procedure successfully assigns a color to a vertex with constant probability. Thus, in each
round, the degrees are shrinking by a constant factor in expectation. So it takes Ω(log ∆) rounds
to reduce to a low (near-constant) degree.

In order to get a faster running time, we need to color much more than a constant fraction of
the vertices. Here, the network decomposition plays the decisive role as only external neighbors of
a vertex v can decolor v. To illustrate, suppose that each vertex v selects a color from its palette
uniformly at random. (That is, suppose we ignore the interaction between v and the other vertices
in Cj). Since the external neighbors are upper bounded by D and the palette size is at least Z,
even if the external neighbors of v choose distinct colors, the probability that v has any conﬂicts
with its neighbors is upper bounded by D/Z = δ = O(ǫ). Ideally, we would like to show that each
cluster shrinks by a factor of δ in each round. Moreover, one would also need to prove that the ratio
D′/Z′ in the next round remains approximately δ, so that the almost-cliques continue to shrink by
the same factor.

In our coloring procedure, a vertex does not really get a color from its original palette uniformly
at random, but close to uniform. For example, if v comes late in the ordering of π, then its palette
may have been reduced to just a single color. We prove that any vertex v has, in expectation, a
large palette to draw from at the time when it is colored. Usually, the vertex v comes roughly in
the middle of the permutation, and its eﬀective palette is still relatively large. In expectation, the
probability a vertex remains uncolored is O(δ ln(1/δ)).

The reason why we only attempt to color the ﬁrst L vertices rather than the entire almost-clique
is that we cannot aﬀord the palette size to shrink too fast. A “controlled” uniform shrinking process
maintains the overall ratio between palette size, external neighbors, and internal neighbors. This
prevents us to go into hard case scenarios.

While it is not diﬃcult to bound the expected palette size for a single vertex, this is not suﬃcient
for the proof. We will use a concentration inequality, which boils down to showing that multiple
vertices simultaneously have a large eﬀective palette size (Lemma 6.4). This does not follow from
standard concentration arguments based on bounded diﬀerences such as Azuma’s inequality; the
reason for this is that changing the color of a single vertex could cause of cascade of color changes
in other vertices. Instead, we will use a novel argument which estimates the palette size of a vertex
in terms of certain rank statistics of the random permutations, and then we will show that these
In particular, the probability that a vertex vi selects a certain
rank statistics are independent.
Q(vi)−Rank(vi,Nj(vi)) , where Rank(vi, Nj(vi)) is the rank of vi among its neighbors in Cj.
color is
Rank(vi, Nj(vi)) is a random variable that may depend on Rank(vi′, Nj(vi′)) for some other i′ 6= i.
To achieve the independence among vertices in Cj, we introduce global ranks, Ri, deﬁned in Lemma
6.2. Our upper bound on the anti-degree, a(v), guarantees that we do not lose too much when
using the global rank to approximate the local rank.

1

One useful lemma will be the following, which uses the regularity conditions to show bounds on

the relative magnitudes of several parameters of the almost-clique.

Lemma 6.1. Suppose the regularity conditions are satisﬁed. Then

Q(vi) − L ≥ Q(vi)δ ln(1/δ) + D ≥ D(ln(1/δ) + 1)

Proof. First since all the vertices in the almost-clique must be a neighbor of vi or contribute to vi’s
anti-degree, we must have M = deg(vi) + 1 + a(vi) ≤ Q(vi) + a(vi) ≤ Q(vi) + D. Therefore,

Q(vi) − L ≥ Q(vi) − ⌈M (1 − 2δ ln(1/δ))⌉

≥ Q(vi) − M (1 − 2δ ln(1/δ)) − 1
≥ Q(vi) − (Q(vi) + D)(1 − 2δ ln(1/δ)) − 1

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

15

≥ 2Q(vi)δ ln(1/δ) − D + 2Dδ ln(1/δ) − 1
≥ 2Q(vi)δ ln(1/δ) − D
≥ 2Q(vi)δ ln(1/δ) − δQ(vi)
= Q(vi)(2δ ln(1/δ) − δ)
≥ Q(vi)(δ ln(1/δ) + δ)
≥ Q(vi)δ ln(1/δ) + D

for K suﬃciently large
as Pal(vi) ≥ Z and D = δZ

as Dδ ≥ K ln n and (1/δ) ≥ K by regularity conditions

as D = δZ by deﬁnition and Z ≤ Q(vi)

To show the second inequality in the lemma, observe that Q(vi)δ ln(1/δ) ≥ Zδ ln(1/δ) = D ln(1/δ).

(cid:3)

6.2. Rank statistics of the random permutation. For any vertex v ∈ Cj and any subset of
vertices X ⊆ Cj, we deﬁne Rank(v, X) to be the number of vertices x ∈ X such that π−1(x) <
π−1(v); that is, such that x comes before v in the ordering π (and hence such that x will choose
its color before v).

Lemma 6.2. Let v1, . . . , vM be an arbitrary ordering of the vertices of Cj.

Let Ri = Rank(vi,{v1, . . . , vi−1}). The random variables R1, . . . , RM are independent; each Ri

is a uniform discrete random variable in the set [i] = {0, 1, . . . , i − 1}.
Proof. Note that each Ri can only take values in [i]. So, the total number of possibilities for
hR1, . . . , RMi is 1 · 2··· · M = M !
Next, note that hR1, . . . , RMi can be determined uniquely from π, and there are exactly M !
possibilities for π. As the mapping from hR1, . . . , RMi to π is injective and the two spaces have
equal cardinality, it must be a bijective mapping as well. That is, hR1, . . . , RMi must be uniformly
selected from [1] · [2] · ··· · [M ]. This implies that each Ri is independently chosen from [i].
Lemma 6.3. Let T = {v1, . . . , vt} ⊆ Cj and let χ(vi) denote the color assigned to vi. Let c1, . . . , ct
be an arbitrary sequence of colors. Then, conditioned on the random ordering π, we have

(cid:3)

P (χ(v1) = c1 ∧ ··· ∧ χ(vt) = ct | π) ≤

t

Yi=1

[π−1(vi) ≤ L]

Q(vi) − Rank(vi, Nj(vi))

(Recall that [π−1(vi) ≤ L] is the Iverson notation.)
Proof. Suppose without loss of generality that π−1(v1) < π−1(v2) < ··· < π−1(vt). Now, the
coloring procedure will color v1, v2, . . . , vt in that order (as well as coloring some additional vertices
in between.)

Now suppose we come to vi, and we select a color remaining from the palette of vi. If π−1(vi) > L,
then vertex vi will not receive any color. Otherwise, at this point the vertices in the neighborhood
of vi which appear earlier in π have already chosen their color. There now remain at least Q(vi) −
Rank(vi, Nj(vi)) colors. As we choose any color uniformly at random, the probability of choosing
a particular color ci is at most
(cid:3)

1

Q(vi)−Rank(vi,Nj(vi)) .

Lemma 6.4. Suppose the regularity conditions are satisﬁed. Let T = {v1, . . . , vt} ⊆ Cj and let
χ(vi) denote the color assigned to vi. Let c1, . . . , ct be an arbitrary sequence of colors. Suppose
t ≤ D. Then we have

P (χ(v1) = c1 ∧ ··· ∧ χ(vt) = ct) ≤ (2 ln(Z/D)/Z)t

Proof. Deﬁne the event E = (χ(v1) = c1 ∧ ··· ∧ χ(vt) = ct). If t > L, this statement is vacuously
true as E has probability zero. So, we assume t ≤ L for the remainder of the proof.
We break the probabilistic process into two parts. First, we select π, and then the colors for the
ﬁrst L vertices in the ordering π. For each π, we apply Lemma 6.3. Integrating over π then gives

16

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

us the bound

t

P (E) ≤ Eπh
Yi=1

[π−1(vi) ≤ L]

Q(vi) − Rank(vi, Nj(vi))i

For each i = 1, . . . , t, deﬁne Si = Cj − {vi, . . . , vt}, and deﬁne Ri = Rank(vi, Si). Now consider
the ordering ρ of the vertices in which all the vertices in Cj − T come ﬁrst (in an arbitrary order)
followed by v1, . . . , vt in that order. Applying Lemma 6.2 to ρ, we see that each Ri is independent
and uniform on the range {0, . . . , M − t + i − 1}.
We claim that if E occurs, then we must have Ri < L − (t − i) for all i = 1, . . . , t. Suppose that
we have Ri ≥ L − (t − i) for some i = 1, . . . , t. Then E is impossible, since there are L − (t − i)
vertices in Si which all come before vi, and the t − i + 1 vertices vi, . . . , vt must come before L as
well. Hence, we may assume for the remainder of this proof that Ri < L− (t− i) for all i = 1, . . . , t.
as:

We will lower-bound the denominator, Q(vi)−Rank(vi, Nj(vi)). We decompose the term Rank(vi, Nj(vi))

Rank(vi, Nj(vi)) = Rank(vi, Nj(vi) ∩ Si) + Rank(vi, Nj(vi) ∩ {vi+1, . . . , vt})

≤ Rank(vi, Si) + (t − i) = Ri + (t − i)

Thus,

(2)

Q(vi) − Rank(vi, Nj(vi)) ≥ Q(vi) − (t − i) − Ri

Q(vi) − L, and by Lemma 6.1 this is at least D(ln(1/δ) + 1) > 0.

We claim that the RHS of (2) is positive. For, when Ri < L − (t − i) then Q(vi) − (t − i) − Ri ≥
Putting this together with our bound Ri < L − (t − i), we have that

(3)

P (E) ≤ Eπh

t

Yi=1

[Ri < L − (t − i)]
Q(vi) − (t − i) − Rii

Note that the ith term in (3) depends only on the random variable Ri. As these are all indepen-

dent, we have

P (E) ≤

t

Yi=1

Eh [Ri < L − (t − i)]
Q(vi) − (t − i) − Rii

Let us ﬁx i and compute the corresponding expectation. As Ri is uniform in the range {0, . . . , M−

t + i − 1} we have

Eh [Ri < L − (t − i)]
Q(vi) − (t − i) − Rii =
≤

1

L−t+i−1

M − (t − i)
M − t + i(cid:16)ln

1

Q(vi) − (t − i) − r

1

Xr=0
Q(vi) − t + i
Q(vi) − L + 1(cid:17)

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

17

Now there are two cases depending on the size of M . First, suppose that M ≤ 3
Eh [Ri < L − (t − i)]
Q(vi) − (t − i) − Rii ≤
≤

ln(1 + x) ≤ x for x ≥ 0

1

4 Q(vi). Then

1

Q(vi) − t + i
M − t + i(cid:16)ln
Q(vi) − L + 1(cid:17)
M − t + i(cid:16) L − t + i − 1
Q(vi) − L + 1(cid:17)
as L ≤ M
Q(vi) − L
1

1

≤

≤

Q(vi) − (3/4) · Q(vi)
4
as Q(vi) ≥ Z
Z

≤
≤ 2 ln(1/δ)/Z

as L ≤ M ≤

3
4

Q(vi)

for δ suﬃciently small (and hence for K suﬃciently large)

Otherwise, if M > 3

4 Q(vi)

E(cid:20) [Ri < L − (t − i)]

Q(vi) − (t − i) − Ri(cid:21) ≤
≤

≤

≤

Z(3/4 − δ)
2
ln(1/δ)
Z
Putting this together, we have

≤

1

1

1

Q(vi)

Q(vi) − L + 1(cid:19)
M − t + i(cid:18)ln
Q(vi) − t + i
Q(vi) − L + 1(cid:19)
3Z/4 − D (cid:18)ln
ln(cid:18)
Q(vi)δ ln(1/δ) + D(cid:19)
3Z/4 − D
ln(cid:18)
δ ln(1/δ)(cid:19)
3
4 − δ ≥ 1/2 and ln(1/δ) ≥ 1 for δ suﬃciently small

as t − i ∈ [0, D], M ≥ 3Z/4

by Lemma 6.1

Q(vi)

as

1

1

P(E) ≤

t

Yi=1

Q(vi) − (t − i) − Rii ≤(cid:18) 2 ln(1/δ)
Eh [Ri < L − (t − i)]

Z

(cid:19)t

(cid:3)

6.3. Concentration for the number of uncolored vertices. We will now show that most
vertices become colored at the end of this process. We distinguish two ways in which a vertex v
could fail to be colored: ﬁrst, it may be decolored in the sense that it initially chose a color, but
then had a conﬂict with an almost-clique of earlier index. Second, it may be initially-uncolored in
the sense that π−1(v) > L.
Lemma 6.5. Suppose the regularity conditions are satisﬁed. Let T ⊆ V dense and |T| ≤ D. The
probability that all the vertices in T become decolored is at most

P (all vertices in T are decolored) ≤ (2δ ln(1/δ))|T|

Proof. Write Tj = T ∩ Cj. For j = 1, . . . , n we compute the probability that the vertices in Tj
become decolored, conditioned on the event that the vertices in T1, . . . , Tj−1 become decolored. In
fact, we will not just condition on the event that the vertices in T1, . . . , Tj−1 become decolored,
but we will condition on the complete set of random variables involved in C1, . . . , Cj−1. (Observe
that the event that Tj becomes decolored is a function of only the colors involved in C1, . . . , Cj.)
We claim that, conditioned on all such random variables, the event that Tj becomes decolored has
probability at most (2δ ln(1/δ))|Tj|.

18

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

For each v ∈ Tj, the event that v becomes decolored is a union of at most ¯d(v) ≤ D events of
the form χ(v) = c, where c enumerates the colors of the neighbors of v in earlier almost-cliques.
Hence, the event that all of the vertices in Tj become decolored is a union of D|Tj| events of the
form stated in Lemma 6.4, each of which has probability at most (2 ln(Z/D)/Z)|Tj|. Therefore, the
probability that all of them become decolored is (2(D/Z) ln(Z/D))|Tj| = (2δ ln(1/δ))|Tj|.

Now, multiplying all such probabilities, we get that the total probability that T is decolored is
(cid:3)

at most (2δ ln(1/δ))|T|.
Lemma 6.6. Let T ⊆ V dense. The probability that all of the vertices in T are initially-uncolored
is at most (2δ ln(1/δ))|T|.
Proof. It suﬃces to show that for a particular Cj, the probability that all vertices in Tj = T ∩ Cj
are initially-uncolored is bounded by (2δ ln(1/δ))|Tj|, since there are no dependencies between the
almost-cliques.

Let M = |Cj| and L = ⌈M (1− 2δ ln(1/δ))⌉. We select a set of L vertices to be colored, uniformly

without replacement from Cj. Thus, the probability that all vertices in Tj are uncolored is:

=

M − L − (|Tj| − 1)

M − (|Tj| − 1)

M − L

M · ··· ·

P (vertices in Tj are all uncolored) = (cid:0)M−|Tj|L
(cid:1)
(cid:0)M
L(cid:1)
M (cid:19)|Tj|
≤(cid:18)M − L
(cid:19)|Tj|
=(cid:18)M − ⌈M (1 − 2δ ln(1/δ))⌉
(cid:19)|Tj|
≤(cid:18)M − M (1 − 2δ ln(1/δ))

M

M
= (2δ ln(1/δ))|Tj|

Lemma 6.7. Suppose the regularity conditions are satisﬁed. Let T ⊆ V dense with |T| ≤ D. The
probability that, at the end of round i, T contains more than 12δ ln(1/δ)D uncolored vertices, is at
most n−100.

Proof. We separately show concentration bounds on the number of decolored and initially-uncolored
vertices in T . Let x = 6δ ln(1/δ)D, we claim that each quantity has an 1/nΩ(1) probability of
exceeding x, and this shows the claim.

By union bound over all possible sets of size x, the probability that a quantity exceeds x is

bounded by

(cid:3)

· (2δ ln(1/δ))x

x (cid:19)x
(cid:18)|T|
x (cid:19) (2δ ln(1/δ))x ≤(cid:18) e|T|
6Dδ ln(1/δ) (cid:19)x
≤(cid:18) eD(2δ ln(1/δ)
6 (cid:19)K ln n
≤(cid:18) 2e

as x ≥ Dδ ≥ K ln n

as x = 6Dδ ln(1/δ) and |T| ≤ D

This is < n−100 for K being a suﬃciently large constant. As the total number of initially-
uncolored vertices and decolored vertices are separately bounded by x, it follows that their sum
(the number of uncolored vertices of any kind) is at most 2x.
(cid:3)

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

19

Lemma 6.8. Suppose the regularity conditions are satisﬁed at the beginning of round i. Then whp
at the end of round i, all the vertices satisfy the bounds

for the parameters

ai(v) ≤ D′,
D′ = 12Dδ ln(1/δ)

di(v) ≤ D′, Qi(v) ≥ Z′
Z′ = D ln(1/δ)

Proof. By Lemma 6.7 with T being the set of external neighbors of v, we have that di(v) ≤ D′
holds with probability ≥ 1 − n−100. Similarly, by Lemma 6.7 with T = Cj \ N (v), we have that
ai(v) ≤ D′ holds with probability ≥ 1 − n−100. Thus by taking the union bound of both events
over each vertex, the probability any of them fails is at most 2n · n−100 = n−Ω(1).
Finally, we bound Qi(v). We color at most D external neighbors and at most L internal neighbors.
Thus, at the end, its palette has size at least Qi(v)−L−D. By Lemma 6.1, this is at least D ln(1/δ)
for K suﬃciently large.

(cid:3)

We next show how to bound the size of an almost-clique.

Lemma 6.9. Suppose that at the beginning of round i, each almost-clique has size M = |Cj| and
that the regularity conditions are satisﬁed. Then, whp at the end of round i all almost-cliques have
size at most

M′j ≤ max(2K ln n, 12M δ ln(1/δ))

Proof. Let us consider some ﬁxed almost-clique Cj. A vertex in Cj survives only if it is initially
uncolored, or decolored. There are exactly M − L ≤ 2M δ ln(1/δ) initially-uncolored vertices at the
end of round i, so we only need to bound the number of decolored vertices.
Let w = K ln n and let x = max(w, 10M δ ln(1/δ)). Note that w ≤ D, since D ≥ K ln n. If
component Cj contains more than x decolored vertices, then Cj has at least (cid:0)x
w(cid:1) sets of w-tuples of
decolored vertices. On the other hand, by Lemma 6.5, each w-tuple of vertices in Cj is decolored
with probability at most (2δ ln(1/δ))w (as w ≤ D). Thus, the expected number of w-tuples of
decolored vertices is at most (cid:0)M
w(cid:1)(2δ ln(1/δ))w. By Markov’s inequality, the probability that there
are more than x decolored vertices is bounded by

P (Cj has > x decolored vertices) ≤ (cid:0)M

w(cid:1)(2δ ln(1/δ))w

By taking a union bound over all almost-cliques, we see that whp every almost-clique has
at most x decolored vertices. Thus, whp, each almost-clique has at most 2M δ ln(1/δ) + x ≤
max(2K ln n, 12M δ ln(1/δ)) uncolored vertices.

(cid:3)

In light of Lemma 6.8, we can explicitly derive a recurrence relation for the parameters Di, Zi.

7. Solving the recurrence

Lemma 7.1. Deﬁne the recurrence relation with initial conditions

D0 = 3ǫ∆

Z0 = ∆/2

as (cid:16) n
k(cid:17)k

≤(cid:18)n

k(cid:19) ≤(cid:16) en
k (cid:17)k

( eM

( x
w )w

w )w(2δ ln(1/δ))w

(cid:0)x
w(cid:1)
≤
x (cid:19)w
≤(cid:18) eM
10M δ ln(1/δ)(cid:19)K ln n
≤(cid:18) 2eM δ ln(1/δ)
≤ n−100

(2δ ln(1/δ))w

for K suﬃciently large

20

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

and recurrence

Di+1 = 12Diδi ln(1/δi)

Zi+1 = Di ln(1/δi)

where we deﬁne δi = Di/Zi.

Let i ≤ ⌈

√ln ∆⌉. Assuming that the regularity conditions δj < 1/K, Dj > K ln n, Z ≥ 1 are

satisﬁed for j = 0, . . . , i − 1, we have that whp

ai(v) ≤ Di, di(v) ≤ Di, Qi(v) ≥ Zi

Proof. The bound on Z0 is given in Lemma 5.7. By Lemma 3.7, 3.9, we have a(v) ≤ 3ǫ∆, d(v) ≤
3ǫ∆ in the initial graph. The initial coloring step cannot increase these parameters, so we have
a0(v) ≤ 3ǫ∆, d0(v) ≤ 3ǫ∆ as well; this shows the bound on D0.

A simple induction, using Lemma 6.8, shows that for all i = 1, . . . , n we have the following:

ai(v) ≤ Di, di(v) ≤ Di, Qi(v) ≥ Zi

with probability ≥ 1 − in−Ω(1)

Thus, for any ﬁxed i ≤ ⌈√ln ∆⌉, the probability that this fails to hold is at most (1+√ln ∆)n−Ω(1) =

√ln ∆⌉. We can choose the constant term C suﬃciently

n−Ω(1).

We will now show how to solve this recurrence.

Lemma 7.2. Recall that we set ǫ = C·100−⌈
small so that for all i ≤ ⌈√ln ∆⌉ we have

δi = 6ǫ · 12i < 1/K

Proof. For each i > 0, we may compute δi as

δi =

Di
Zi

12Di−1δi−1 ln(1/δi−1)

=

= 12δi−1

Di−1 ln(1/δi−1)
As δ0 = D0/Z0 = 6ǫ, we have δi = 6ǫ · 12i as claimed.
√ln ∆⌉12⌈
Thus, we have δi ≤ 6ǫ12⌈
small, we can ensure that this is at most 1/K as desired.

√ln ∆⌉ = 6C · 100−⌈

Lemma 7.3. For all 5 ≤ i ≤ ⌈

√ln ∆⌉, we have

Proof. We can recursively compute Di from D0 as:

Di ≤ 12i2/2 · 100−i⌈√ln ∆⌉/2 · ∆

Di = D0 ·

i−1

Yj=0

12δj ln(1/δj )

(4)

Thus we can estimate:

Di ≤ 3ǫ∆

ln x ≤ x1/2 for x > 0

i−1

j (cid:17)
Yj=0(cid:16)12δ1/2
Yj=0(cid:16)12(6ǫ · 12j)1/2(cid:17)

i−1

by Lemma 7.2

≤ 3ǫ∆
= (3ǫ∆) ·(cid:16)12i(6ǫ)i/2 · 12i(i−1)/4(cid:17)
≤ ∆ ·(cid:16)12i(6 · C · 100−⌈√ln ∆⌉)i/2 · 12i(i−1)/4(cid:17)
√ln ∆⌉/2
≤ ∆ · 12i(i+5)/4 · 100−i⌈
≤ ∆ · 12i2/2 · 100−i⌈

√ln ∆⌉/2

6C ≤ 12 for C ≤ 2

(i + 5)/4 ≤ i/2 for i ≥ 5

(cid:3)

(cid:3)

√ln ∆⌉ ≤ 6C. By selecting C suﬃciently

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

Corollary 7.4. We have the bound D

⌈√ln ∆⌉

= O(1).

Proof. We apply Lemma 7.3:

D

⌈√ln ∆⌉ ≤ ∆ · 12⌈√ln ∆⌉2/2 · 100−⌈√ln ∆⌉2/2

≤ ∆ ·(cid:18) 12

100(cid:19)(ln ∆)/2

≤ ∆ · e− ln ∆ = 1

21

(cid:3)

(cid:3)

Expository remark: Corollary 7.4 explains why we selected ǫ = exp(−Θ(√log ∆)) and ran our
coloring steps for O(√log ∆) rounds. Suppose instead we set ǫ = exp(− lna ∆) and ran lna ∆ dense
coloring steps, for some a < 1/2. At the end of these steps, we would have Dlna ∆ = ∆ exp(− ln2a ∆).
This is close to ∆ (diﬀering in only a sub-polynomial term), which implies that we have hardly
made any progress in reducing the number of uncolored vertices.

Theorem 7.5. At the end of the dense coloring steps, whp every dense vertex is connected to at

most O(log n) · 2O(√log ∆) other dense vertices.
Proof. By Lemma 7.2, we have δi < 1/K for all dense coloring rounds. Let i∗ ≤ ⌈√ln ∆⌉ be
minimal such that Di∗δi∗ ≤ K ln n; by Corollary 7.4 such an i∗ exists. Also, observe that for each
i ≤ i∗ we have

Zi = Di−1 ln(1/δi−1) ≥ Di−1δi−1 ≥ K ln n ≥ 1

So the regularity conditions are satisﬁed up to round i∗, and hence by Lemma 7.1, we have at

the end of round i∗:
(5)

di∗(v) ≤ Di∗ ≤ (K ln n)/δi∗ ≤ (K ln n) · 2O(√log ∆)

as δi∗ ≥ ǫ ≥ 100−√log ∆

of the dense coloring steps.

This shows that the external degree of each dense vertex is at most O(log n) · 2O(√log ∆) at the end
Next, we bound the size of each almost-clique. As we satisfy the conditions δj < 1/K, Dj δj ≥
K ln n for j < i∗, we can apply Lemma 6.9 repeatedly to deduce that the size of any almost-
clique has been reduced from its initial size (at most (1 + 3ǫ)∆) to O(max(2K ln n, (1 + 3ǫ)∆ ·
(Qi∗−1
j=0 12δj ln(1/δj )))); the probability this fails in an individual round is n−Ω(1) and thus the total
failure probability over each clique and over i∗ ≤ ⌈
Thus, we need to bound the term (1 + 3ǫ)∆ · (Qi∗−1
(12δj ln(1/δj )) = (1 + 3ǫ)∆ ·

j=0 12δj ln(1/δj )) which we do as follows:

(1 + 3ǫ)∆ ·

i∗−1

i∗−1

√ln ∆⌉ rounds is also n−Ω(1).
12δj ln(1/δj )
D0 

Di∗
3ǫ∆

Yj=0

1

 · D0

by (4) and D0 = 3ǫ∆

Yj=0

(1 + 3ǫ)K ln n

= (1 + 3ǫ)∆ ·
≤
= O(log n) · 2O(√log ∆)

3ǫ

· 2O(√log ∆)

by (5)

as ǫ = C · 100−⌈√log ∆⌉

Since a dense vertex v has at most O(log n) · 2O(√log ∆) external neighbors and the clique size is
also bounded by O(log n) · 2O(√log ∆), it can have O(log n) · 2O(√log ∆) neighbors.
We have shown that after the ⌈√ln ∆⌉ dense coloring steps, the number of dense neighbors
of each dense vertex shrinks to O(log n) · 2O(√log ∆). Also, for each sparse vertex x, we have
√ln ∆⌉
⌈

(x) + Ω(ǫ2∆) due to the initial coloring step. By applying the algorithm of

(x) ≥ deg

√ln ∆⌉
⌈

Q

(cid:3)

22

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

Elkin, Pettie, and Su [12, Section 4] on the sparse component, it can be colored in O(log(1/ǫ)) +
2O(√log log n) = O(√log ∆) + 2O(√log log n) rounds. Then, we apply the algorithm of Barenboim et
al. [9] to color the remaining vertices whose degree are bounded by ∆′ = O(log n) · 2O(√log ∆). It
then runs in O(log ∆′) + 2O(√log log n) = O(√log ∆) + 2O(√log log n) rounds. The total number of
rounds is O(√log ∆) + 2O(√log log n).

8. List-coloring locally-sparse graphs

Although the overall focus of this paper is an algorithm for coloring arbitrary graphs in time
O(√log ∆) + 2O(√log log n), we note that our initial coloring step may also be used to obtain a faster
list-coloring algorithm for graphs which are sparse. This result extends the work of [12], which
showed a similar type of (∆ + 1)-coloring algorithm for sparse graphs.

In [12], a slightly diﬀerent deﬁnition of sparsity was introduced, known as local sparsity. We deﬁne

2(cid:1) edges).

this and show that it is essentially equivalent to the deﬁnition of sparsity deﬁned in Section 3.
Deﬁnition 8.1. We say that a graph G is (1 − δ) locally sparse if very vertex contains at most
(1 − δ)(cid:0)∆
2(cid:1) edges in its neighborhood, for some parameter δ ∈ [0, 1]. (That is, the induced subgraph
G[N (v)] contains ≤ (1 − δ)(cid:0)∆
Lemma 8.2. Suppose that G is (1− δ)-locally sparse. Then if we apply the network decomposition
of Section 3 with parameter ǫ = δ/2, then every vertex is sparse, i.e. V sparse = V .
Proof. Suppose that v ∈ V is dense with respect to ǫ. Then v has at least (1 − ǫ)∆ friends. Each
such friend u corresponds to at least (1 − ǫ)∆ edges between u and another neighbor of v, that is,
an edge in G[N (v)]. Furthermore, any such edge in G[N (v)] is counted at most twice, so G[N (v)]
must contain (1 − ǫ)2∆2/2 ≥ (1 − 2ǫ)(cid:0)∆
2(cid:1) edges, which contradicts our hypothesis for ǫ ≥ δ/2. (cid:3)
Corollary 8.3. Suppose that G is (1 − δ)-locally-sparse and that every vertex has a palette of size
exactly ∆ + 1. Then G can be list-colored whp in O(log(1/δ)) + 2O(√log log n) rounds.
Proof. By Proposition 8.2, every vertex in G is sparse with respect to parameter ǫ = δ/2. Suppose
that δ4∆ ≥ K ln n, where K is a suﬃciently large constant. Then, by Lemma 5.8, each vertex
satisﬁes at the end of the initial coloring step d0(v) ≥ Q0(v) + Ω(ǫ2∆) whp. Now, apply the
algorithm of [12] to the residual graph; this runs in O(log(1/δ2)) + 2O(√log log n) rounds.
Next, suppose that δ4∆ ≤ K ln n. So ∆ ≤ Kδ−4 ln n. Then run the coloring algorithm of [9],
which runs in O(log ∆) + 2O(√log log n) = O(log(1/δ)) + 2O(√log log n) rounds.
Acknowledgements: We would like to thank Seth Pettie for his valuable comments. We thank
the anonymous reviewers for many helpful suggestions and comments.

(cid:3)

References

[1] N. Alon, L. Babai, and A. Itai. A fast and simple randomized parallel algorithm for the maximal independent

set problem. J. Algorithms, 7(4):567–583, 1986.

[2] B. Awerbuch, A. V. Goldberg, M. Luby, and S. A. Plotkin. Network decomposition and locality in distributed

computation. In Symp. on Foundations of Computer Science (FOCS), 1989.

[3] R. Bar-Yehuda, K. Censor-Hillel, and G. Schwartzman. A distributed (2 + ǫ)-approximation for vertex cover in

O(log ∆/ǫ log log ∆) rounds. arXiv preprint arXiv:1602.03713, 2016.

[4] L. Barenboim. Deterministic (∆ + 1)-coloring in sublinear (in ∆) time in static, dynamic and faulty networks.

In Symp. on Principles of Distributed Computing(PODC), pages 345–354, 2015.

[5] L. Barenboim and M. Elkin. Deterministic distributed vertex coloring in polylogarithmic time. J. ACM, 58(5):23,

2011.

[6] L. Barenboim and M. Elkin. Distributed graph coloring: Fundamentals and recent developments. Synthesis

Lectures on Distributed Computing Theory, 4(1):1–171, 2013.

[7] L. Barenboim, M. Elkin, and C. Gavoille. A fast network-decomposition algorithm and its applications to

constant-time distributed computation. CoRR, abs/1505.05697, 2015.

DISTRIBUTED (∆ + 1)-COLORING IN SUBLOGARITHMIC ROUNDS

23

[8] L. Barenboim, M. Elkin, and F. Kuhn. Distributed (∆ + 1)-coloring in linear (in ∆) time. SIAM Journal on

Computing, 43(1):72–95, 2014.

[9] L. Barenboim, M. Elkin, S. Pettie, and J. Schneider. The locality of distributed symmetry breaking. In Symp.

on Foundations of Computer Science (FOCS), pages 321–330. IEEE, 2012.

[10] K.-M. Chung, S. Pettie, and H.-H. Su. Distributed algorithms for Lov´asz local lemma and graph coloring. In

Proc. 33rd ACM Symposium on Principles of Distributed Computing (PODC), pages 134–143, 2014.

[11] D. Dubhashi, D. A. Grable, and A. Panconesi. Near-optimal, distributed edge colouring via the nibble method.

Theor. Comput. Sci., 203(2):225–251, Aug. 1998.

setting. In Symp. on Discrete Algorithms (SODA), pages 355–370. SIAM, 2015.

[12] M. Elkin, S. Pettie, and H.-H. Su. (2∆−1)-edge-coloring is much easier than maximal matching in the distributed
[13] P. Fraigniaud, M. Heinrich, and A. Kosowski. Local conﬂict coloring. arXiv preprint arXiv:1511.01287, 2015.
[14] B. Gfeller and E. Vicari. A randomized distributed algorithm for the maximal independent set problem in

growth-bounded graphs. In Symp. on Principles of Distributed Computing, 2007.

[15] M. Ghaﬀari. An improved distributed algorithm for maximal independent set. In Proc. 27th ACM-SIAM Sym-

posium on Discrete Algorithms (SODA), 2016. to appear.

[16] A. V. Goldberg and S. A. Plotkin. Parallel (∆ + 1)-coloring of constant-degree graphs. Information Processing

Letters, 25(4):241 – 245, 1987.

[17] A. V. Goldberg, S. A. Plotkin, and G. E. Shannon. Parallel symmetry-breaking in sparse graphs. SIAM J.

Discrete Math., 1(4):434–446, 1988.

[18] M. G¨o¨os, J. Hirvonen, and J. Suomela. Linear-in-∆ lower bounds in the local model. In Proceedings of the 2014

ACM Symposium on Principles of Distributed Computing(PODC), pages 86–95, 2014.

[19] D. A. Grable and A. Panconesi. Nearly optimal distributed edge coloring in O(log log n) rounds. Random Struc-

tures & Algorithms, 10(3):385–405, 1997.

[20] D. A. Grable and A. Panconesi. Fast distributed algorithms for Brooks–Vizing colorings. Journal of Algorithms,

37(1):85 – 120, 2000.

[21] J. Hirvonen and J. Suomela. Distributed maximal matching: Greedy is optimal. In Proceedings of the 2012 ACM

Symposium on Principles of Distributed Computing(PODC), pages 165–174, 2012.

[22] ¨O. Johansson. Simple distributed ∆ + 1-coloring of graphs. Inf. Process. Lett., 70, 1999.
[23] K. Kothapalli, C. Scheideler, M. Onus, and C. Schindelhauer. Distributed coloring in ˜O(√log n) bit rounds. In

Proc. 20th International Parallel and Distributed Processing Symposium (IPDPS), 2006.

[24] F. Kuhn, T. Moscibroda, and R. Wattenhofer. What cannot be computed locally! In Symp. on Principles of

Distributed Computing (PODC), 2005.

[25] F. Kuhn, T. Moscibroda, and R. Wattenhofer. Local computation: Lower and upper bounds. arXiv preprint

arXiv:1011.5470, 2010.

[26] F. Kuhn and R. Wattenhofer. On the complexity of distributed graph coloring. In Symp. on Principles of

Distributed Computing (PODC), 2006.

[27] N. Linial. Locality in Distributed Graph Algorithms. SIAM Journal on Computing, 21(1):193–201, 1992.
[28] N. Linial and M. Saks. Low diameter graph decompositions. Combinatorica, 13(4):441–454, 1993.
[29] M. Luby. A Simple Parallel Algorithm for the Maximal Independent Set Problem. SIAM Journal on Computing,

15:1036–1053, 1986.

[30] M. Molloy and B. Reed. A bound on the total chromatic number. Combinatorica, 18(2):241–280, 1998.
[31] M. Molloy and B. Reed. Graph Colouring and the Probabilistic Method. Algorithms and Combinatorics. Springer,

2001.

[32] M. Molloy and B. Reed. Asymptotically optimal frugal colouring. J. Comb. Theory, Ser. B, 100(2):226–246,

2010.

[33] M. Molloy and B. Reed. Colouring graphs when the number of colours is almost the maximum degree. Journal

of Combinatorial Theory, Series B, 109:134 – 195, 2014.

[34] A. Panconesi and A. Srinivasan. Improved distributed algorithms for coloring and network decomposition prob-

lems. In Symp. on Theory of computing (STOC), 1992.

[35] A. Panconesi and A. Srinivasan. Randomized distributed edge coloring via an extension of the Chernoﬀ–Hoeﬀding

bounds. SIAM Journal on Computing, 26(2):350–368, 1997.

[36] S. Pettie and H.-H. Su. Distributed coloring algorithms for triangle-free graphs. Information and Computa-
tion, 243(0):263 – 280, 2015. Preliminary version appeared in 40th Intl. Colloq. on Automata, Languages and
Programming (ICALP), pages 681–693, 2013.

[37] B. Reed. ω, ∆, and χ. Journal of Graph Theory, 27(4):177–212, 1998.
[38] B. Reed. A strengthening of brooks’ theorem. Journal of Combinatorial Theory, Series B, 76(2):136 – 149, 1999.
[39] J. Schneider, M. Elkin, and R. Wattenhofer. Symmetry breaking depending on the chromatic number or the

neighborhood growth. Theoretical Computer Science, 509:40–50, 2013.

24

DAVID G. HARRIS AND JOHANNES SCHNEIDER AND HSIN-HAO SU

[40] J. Schneider and R. Wattenhofer. A log-star distributed maximal independent set algorithm for growth-bounded

graphs. In Symp. on Principles of Distributed Computing(PODC), 2008.

[41] J. Schneider and R. Wattenhofer. A new technique for distributed symmetry breaking. In Symp. on Principles

of Distributed Computing(PODC), 2010.

[42] M. Szegedy and S. Vishwanathan. Locality based graph coloring. In Proc. 25th ACM Symposium on Theory of

Computing (STOC), pages 201–207, 1993.

