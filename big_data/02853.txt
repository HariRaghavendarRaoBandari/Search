Time-Space Trade-oﬀ for Finding the k-Visibility Region of a

Point in a Polygon∗
Bahareh Banyassady‡

Yeganeh Bahoo†

Prosenjit Bose §

6
1
0
2

 
r
a

M
9

 

 
 
]

G
C
.
s
c
[
 
 

1
v
3
5
8
2
0

.

3
0
6
1
:
v
i
X
r
a

Stephane Durocher†

Wolfgang Mulzer‡

Abstract

We study the problem of k-visibility in the memory-constrained model. In this model, the
input resides in a randomly accessible read-only memory of O(n) words with O(log n) bits each.
An algorithm can read and write O(s) additional words of workspace during its execution, and
it writes its output to write-only memory. In a given polygon P and for a given point q ∈ P , we
say that a point p is inside the k-visibility region of q if and only if the line segment pq intersects
the boundary of P at most k times. Given a simple n-vertex polygon P stored in a read-only
input array and a point q ∈ P , we give a time-space trade-oﬀ algorithm which reports a suitable
representation of the k-visibility region for q in P in O(cn/s + n log s + min{kn/s, n log logs n})
expected time using O(s) words of workspace. Here c ≤ n is the number of critical vertices for
q, i.e., the vertices of P where the visibility region changes. We also show how to generalize this
result for non-simple polygons and for sets of line segments.

1

Introduction

[2].

Memory constraints on mobile and distributed devices have led to an increasing concern among
researchers to design algorithms that use memory eﬃciently. One common model to capture this
notion is the memory-constrained model
In this model, the input is provided in a randomly
accessible read-only array of O(n) words with O(log n) bits each. There is an additional read/write
memory consisting of O(s) words of O(log n) bits each, which is called the workspace of the algorithm.
Here, s ∈ {1, . . . , s} is a parameter of the model. The output is written to a write-only array.
Suppose we are given a polygon P and a query point q ∈ P . We say that the point p ∈ P is
k-visible from q if and only if the line segment pq properly intersects the boundary of P at most
k times (p and q are not counted toward k). The set of k-visible points of P from q is called the
k-visibility region of q within P , and it is denoted by Vk(P, q); see Figure 1. Visibility problems
have played and continue to play a major role in computational geometry since the dawn of the
ﬁeld, leading to a rich history; see [8] for an overview. While the 0-visibility region consists of one
connected component, the k-visibility region may be disconnected in general. Previous work presents
an algorithm for computing the k-visibility region inside the plane for a given point q in presence of
a polygon P in O(n2) time [3].
Using constant workspace, the 0-visibility region of a point q ∈ P can be computed in O(n¯r)
time, where ¯r denotes the number of the reﬂex vertices of P in the output [4]. When the workspace is
increased to O(s), the running time decreases to O(nr/2s + n log2 r) or O(nr/2s + n log r) randomized
expected time, where s ∈ O(log r). Computing the 0-visibility region without workspace limitations
takes O(n) time [1].

Research Council of Canada (NSERC).

∗This work was partially supported by DFG project MU/3501-2 and by the Natural Sciences and Engineering
†Department of Computer Science, University of Manitoba, {bahoo, durocher}@cs.umanitoba.ca
‡Institut f¨ur Informatik, Freie Universit¨at Berlin, {bahareh, mulzer}@inf.fu-berlin.de
§School of Computer Science, Carleton University, jit@scs.carleton.ca

1

Figure 1: The gray region is V2(P, q). The vertices v1, v2, v3 and v4 are critical for q. The boundary
of P is partitioned into chains v2v3, v3v1, v1v4 and v4v2 in CCW order along the boundary.

We provide algorithms for computing the k-visibility region of a simple polygon P from q ∈ P
using a small workspace, establishing a trade-oﬀ between running time and workspace. Unless stated
otherwise, all polygons will be understood to be simple.

2 Preliminaries and deﬁnitions

We assume that our simple polygon P is given in a read-only array as a list of n vertices in counter-
clockwise order along the boundary. This input array also contains a query point q ∈ P . The aim is
to report a suitable representation of Vk(P, q), using O(s) words of workspace. We assume that the
vertices of P are in weak general position, i.e., the query point q does not lie on the line determined by
any two vertices of P . Without loss of generality, assume that k is even and that k < n. If k is odd,

we compute Vk−1(P, q), which is equal to Vk(P, q), and if k ≥ n then P is completely k-visible. The

boundary of Vk(P, q) consists of part of the boundary of P and some chords that cross the interior of
P to join two points on its boundary. We denote the boundary of planar set U by ∂U .
Let θ ∈ [0, 2π), and let rθ be the ray from q that forms an angle θ with the positive-horizontal
axis. The jth edge of P that intersects rθ, starting from q, is denoted eθ(j). Only the ﬁrst k + 1
intersections of rθ ∩ ∂P are k-visible from q in direction θ. If rθ does not stab any vertices of the
polygon, then the edge lists, i.e., the list of intersecting edges, of both rθ−ε and rθ+ε, for a small
enough ε > 0, are the same as the edge list of rθ. However, if rθ stabs a vertex v of P , then the edge
lists of rθ−ε and of rθ+ε diﬀer, for any small ε > 0. The diﬀerence is caused by the edges incident to
v. If these edges lie on opposite sides of rθ, then the edge list of rθ+ε can be obtained from the edge
list of rθ−ε by exchanging the name of the corresponding edge. However, if both incident edges of v
lie on the same side of rθ, then there are two edges in the edge list of either rθ−ε or rθ+ε which are
not in the edge list of the other. In this case, we call v a critical vertex; see Figure 1. The number
of critical vertices in P is denoted by c. The angle of a vertex v refers to the angle between the ray
qv and positive-horizontal axis. A chain is deﬁned as a maximal sequence of edges of P which does
not contain a critical vertex, except at the beginning and at the end. Thus, ∂P is partitioned into
disjoint chains; see Figure 1.

Observation 2.1. Let C be a chain on P . Suppose we are given an edge e of C, and a ray rθ. We
can ﬁnd the edge eθ ∈ C which intersects rθ (if it exists) in O(|C|) time using O(1) workspace.

When rotating the ray rθ around q, the structure of the edge list of rθ (i.e., the chains and their
order) changes only when rθ stabs a critical vertex. We will see that in this case a segment of rθ may
belong to ∂Vk(P, q). A critical vertex v on rθ is counted as both eθ(j) and eθ(j + 1), if there are j − 1
intersecting edges with rθ between q and v. Obviously, v is k-visible if its position on rθ is not after
eθ(k + 1). A critical vertex v is called an end vertex if its edges lie on the right side of qv, and it is
called a start vertex otherwise.

Lemma 2.2. If rθ stabs a k-visible critical vertex v, then the segment on rθ between eθ(k + 2) and
eθ(k + 3) (if they exist) is an edge of Vk(P, q).

2

v3v1v2qv4Figure 2: For the ray rθ which stabs the end critical vertex v, the segment w is a CCW window of
V4(P, q).

Figure 3: For the ray rθ which stabs the start critical vertex v, the segment w is a CW window of
V4(P, q).

Proof. If v is an end vertex, then for small enough ε > 0, the edges eθ(k + 2) and eθ(k + 3) are

respectively eθ−ε(k + 2) and eθ−ε(k + 3), so they are not k-visible in direction θ − ε. These edges are

also eθ+ε(k) and eθ+ε(k +1), so they are k-visible in direction θ +ε. Hence, the segment on rθ between
eθ(k + 2) and eθ(k + 3) belongs to ∂Vk(P, q), and Vk(P, q) lies on the side of the segment which has
direction θ + ε; see Figure 2. Similarly, if v is a start vertex, the same segment belongs to ∂Vk(P, q);
in this case, Vk(P, q) lies on the side of the segment which has direction θ − ε; see Figure 3

Lemma 2.2 leads to the following deﬁnition: for a ray rθ that stabs a k-visible critical vertex v,
the segment between eθ(k + 2) and eθ(k + 3) (if they exist) is called the window of rθ. The window
is CCW if Vk(P, q) lies to the left of rθ, and CW, otherwise; see Figures 2 and 3. Each window is
identiﬁed by its two endpoints, and each endpoint is represented by a triple (θ, j, type), where j is the
index of either eθ(k + 2) or eθ(k + 3) in P (depending on the position of two endpoints of a window
on these edges) and type ∈ {CCW, CW} speciﬁes the type of the window. The set of endpoints of
windows of Vk(P, q) is denoted by Wk(P, q).

Observation 2.3. The boundary of Vk(P, q) has O(n) vertices.

Proof. As we explained earlier, ∂Vk(P, q) consists of part of ∂P and windows; thus, a vertex of Vk(P, q)
is either a vertex of P or an endpoint of a window. Since each critical vertex causes at most one
window, the number of vertices of Vk(P, q) is O(n).

Lemma 2.4. If there exists an algorithm A(P, q, k) in the memory-constrained model for comput-
ing W = Wk(P, q) in TA(n) time using SA(n) workspace, where n is the number of vertices of P ,
then there exists an algorithm A(cid:48)(P, q, W ) in the memory-constrained model that reports ∂Vk(P, q) in
O(|W|TA(n) + n) time using O(SA(n)) workspace.
Proof. The algorithm A(cid:48) works as follows: start from a point w0 ∈ W and walk on ∂P in CCW
direction until the next element w1 ∈ W . If this walk is on the k-visible side of w0 (which is speciﬁed
by the type of w0), report the visited edges of P ; otherwise, report only the windows with endpoint(s)
w0 and/or w1. Repeat this procedure until the entire boundary ∂P has been traversed. Speciﬁcally,
in step i of A(cid:48), run algorithm A and ﬁnd wi = (θi, ji, typei) which minimizes ji, with ji > ji−1
for i (cid:54)= 0. If there is more than one element which minimizes ji, choose the one among them that
minimizes |θi − θi−1| (minimizes θi for i = 0). Since the output of A is write-only, in each step i of
A(cid:48) we have to run A again to ﬁnd wi, requiring O(|W|TA(n)) total time. Regarding the workspace,
in step i of A(cid:48) we store only wi−1 and wi; however, for ﬁnding wi we need as much workspace as A
does. Thus, the workspace of A(cid:48) is O(SA(n)).

3

wqvrθ+rθ−rθwqvrθ+rθ−rθFigure 4: vi−1 is an end vertex. ei(5) is the second intersecting chain to the right of ei−1(5).

Lemma 2.4 shows that given Wk(P, q) and P , we can uniquely report ∂Vk(P, q). This motivates
us to focus on algorithms for computing Wk(P, q). Obviously, if P has no critical vertex, then there
is no window and ∂Vk(P, q) = ∂P ; thus, we assume that P has at least one critical vertex. From
now on, ei(j) denotes the jth intersecting edge of the ray qvi, where vi is a vertex of P . However,
instead of ei(j), it suﬃces to ﬁnd an arbitrary edge of the chain containing ei(j) and then apply
Observation 2.1 to ﬁnd ei(j). Therefore, we refer to any edge of the chain containing ei(j) by ei(j).
In the following algorithms, for any critical vertex vi, we examine its position relative to ei(k + 1) on
qvi and, if it is k-visible, we report the segment on qvi which is between ei(k + 2) and ei(k + 3) (if
they exist). However, depending on how much workspace is available, we have diﬀerent approaches
for ﬁnding all ei(k + 1) and windows. Details follow in the next sections.

3 A constant-memory algorithm

In this section, we assume that only O(1) workspace is available. Suppose that v0 is the critical vertex
with smallest angle. The algorithm starts from qv0 and ﬁnds e0(k + 1) in O(kn) time using O(1)
workspace. Basically, the algorithm passes over the input k + 1 times, and in each pass, it ﬁnds the
next intersecting edge of qv0 until the (k + 1)th one, e0(k + 1). If v0 does not lie after e0(k + 1) on
qv0, in other words, if v0 is k-visible, it reports the window of qv0. Finding the window can be done
in two passes by determining the ﬁrst and the second intersecting edge after e0(k + 1) on qv0. Then,
the algorithm ﬁnds the next critical vertex with smallest angle after v0; we call it v1. The algorithm
determines e1(k+1), and if v1 is k-visible, it reports the window of qv1 (if it exists). However, for 1 ≤ i
we ﬁnd ei(k + 1) in O(n) time by using ei−1(k + 1). More precisely, if vi−1 is an end vertex, then the
incident edges to vi−1 do not intersect qvi; see Figure 4. If vi is a start vertex, then the incident edges
to vi do not intersect qvi−1; see Figure 5. Except for these edges, all the other intersecting edges of
qvi−1 intersect qvi in the same order, and vice versa. Hence, if ei(k + 1) intersects qvi−1, then there is
at most one other edge between ei−1(k + 1) and ei(k + 1) that intersects qvi−1. Thus, ei(k + 1) can be
found in at most two passes over the input. More accurately, we have found only an edge of the chain
of ei(k + 1); applying Observation 2.1, the edge ei(k + 1) can be obtained. The algorithm repeats the
above procedure until all critical vertices have been processed; see Algorithm 3.1. Since the number
of critical vertices is c, and since processing each critical vertex takes O(n) time, except for v0, which
takes O(kn) time, the running time of the algorithm is O(kn + cn), using O(1) workspace. This leads
to the following theorem:
Theorem 3.1. Given a simple polygon P with n vertices in a read-only array, a point q ∈ P , and
a constant k ∈ N, there is an algorithm which reports Wk(P, q) in O(kn + cn) time using O(1)
workspace.

4

qei−1(5)ei(5)vi−1Figure 5: vi is an start vertex. ei(5) is the second intersecting chain to the left of ei−1(5).

Algorithm 3.1: Computing the k-visibility region using constant workspace
input: Simple polygon P , point q ∈ P , k ∈ N
output: Windows of the k-visibility region of P from q, Wk(P, q)

1 v0 ← the critical vertex with smallest angle
2 Find e0(k + 1) using the k-selection algorithm
3 i ← 0
4 while vi has not been processed before do
if vi lies before ei(k + 1) on qvi then
5

6

7

8

9

10

Find the window of qvi
return endpoints of the window (if it exists)

vi+1 ← the next critical vertex with smallest angle after vi
Find ei+1(k + 1) using ei(k + 1)
i ← i + 1

4 Memory-constrained algorithms

In this section, we assume that O(s) workspace is available, and we show how to exploit the additional
workspace to compute the k-visibility region faster. In the ﬁrst algorithm we process all the vertices
in contiguous batches of size s in angular order. In each iteration we ﬁnd the next batch of s vertices
with smallest angles, then using the intersecting edges of the last processed vertex, we construct a
data structure which is used to ﬁnd the windows of the batch. In the second algorithm we improve the
running time by skipping the non-critical vertices. Speciﬁcally, in each iteration we ﬁnd and process
the next batch of s adjacent critical vertices in angular order, and similarly as the ﬁrst algorithm we
construct a data structure for ﬁnding the windows, which requires a more involved approach to be
updated. We ﬁrst state Lemma 4.1, which is implicitly mentioned in [6] (see the second paragraph
in the proof of Theorem 2.1)

Lemma 4.1. Given a read-only array A of size n, O(s) additional workspace and a speciﬁc element
x ∈ A, there is an algorithm that ﬁnds the s smallest elements in A, among those elements which are
larger than x, in O(n) time.

Proof. In the ﬁrst step, insert the ﬁrst 2s elements of A which are larger than x into workspace
memory (without sorting them). Select the median of the 2s elements in memory in O(s) time and
remove the elements which are larger than the median. In the next step, insert the next batch of s
elements of A which are larger than x into memory and again ﬁnd the median of the 2s elements in
memory and remove the elements which are larger than the median. Repeat the latter step until all
the elements of A are processed. Clearly, at the end of each step, the s smallest elements of the ones
which have been already processed, are in memory. Since the number of batches or steps is O(n/s),
the running time of the algorithm is O(n) and it uses only O(s) workspace.

5

qei−1(5)ei(5)viLemma 4.2. Given a read-only array A of size n and O(s) additional workspace, there is an algorithm
that ﬁnds the kth smallest element in A in O((cid:100)k/s(cid:101)n) time.

Proof. In the ﬁrst step, apply Lemma 4.1 to ﬁnd the ﬁrst batch of s smallest elements in A and insert
them into workspace memory in O(n) time. If k < s select the kth smallest element in memory in
O(s) time; otherwise, ﬁnd the largest element in memory. In the next step, ﬁnd the (k− s)th smallest
element among those which are larger than the largest element of the previous batch. Generally,
in step i apply Lemma 4.1 to ﬁnd the ith batch of s smallest elements of A and insert them into
memory. If k < i · s select the (k − (i − 1)s)th smallest element in memory in O(s) time; otherwise,
ﬁnd the largest element in memory and repeat. The element being sought is in the (cid:100)k/s(cid:101)th batch of s
smallest elements; therefore, we can ﬁnd the kth smallest element of A in O((cid:100)k/s(cid:101)n) time using O(s)
workspace.

In addition to our algorithm in Lemma 4.2 there are several other results on the selection problem
in the read-only model, some of which are included in Table 1 of [7]. There is a O(n log logs n) expected
time randomized algorithm for selection problem using O(s) workspace in the read-only model [5, 9].
Depending on k, s and n we choose the latter algorithm or the algorithm of Lemma 4.2. In conclusion,
k-selection in the read-only model using O(s) workspace can be done in O(min{kn/s, n log logs n})
expected time. Next we describe how to apply Lemmas 4.1 and 4.2.

4.1 Algo 1: processing all the vertices

As in the constant-memory algorithm we ﬁnd the critical vertex v0 with smallest angle. We apply
Lemma 4.1 to ﬁnd the batch of s vertices with smallest angles after v0, and we sort them in workspace
memory. For qv0 we apply Lemma 4.2 to ﬁnd e0(k + 1), and if v0 is k-visible we report the window (if
it exists). Then we apply Lemma 4.1 to ﬁnd the two batches of 2s adjacent intersecting edges to the
right and to the left of e0(k + 1) on qv0, we insert them in a balanced search tree T . In other words,
in T we store all e0(j), for k + 1 − 2s ≤ j ≤ k + 1 + 2s, in sorted order according to their intersection
with qv0. These edges are candidates for the (k + 1)th intersecting edge of the next s rays in angular
order or ei(k + 1), for 1 ≤ i ≤ s; see Figure 6. This is because, as we explained before, if ei(k + 1)
intersects qvi−1 then there is at most one other edge between ei−1(k + 1) and ei(k + 1) that intersects
qvi−1. Therefore, ei(k + 1) is either an intersecting edge of qv0, and in this case there are at most
2i − 1 edges between e0(k + 1) and ei(k + 1), or ei(k + 1) is an edge which is inserted in T later.
More speciﬁcally, after creating T , we start from the next vertex with smallest angle after v0, called
v1, and according to the type of v1, we update T : if v1 is a non-critical vertex we change the incident
edge to v1 which is already in T with the other incident edge to v1; if v1 is an end (start) critical
vertex, we remove (insert) the two edges which are incident to v1. In all cases we update T only if
the incident edges to v1 are in the interval of the 2s intersecting edges of qv0 in T , this takes O(log s)
time. By updating T we can ﬁnd e1(k + 1) and the window of qv1 using the position of e0(k + 1)
or its neighbours in T in O(1) time. We repeat the same procedure for 1 ≤ i ≤ s and we determine
ei(k + 1) and the window of qvi by using T and ei−1(k + 1), which takes O(s log s) total time.

After processing all the vertices of the ﬁrst batch, we apply Lemma 4.1 to ﬁnd the next batch
of s vertices with smallest angle, and we sort them in workspace memory. The last updated T is
not usable anymore, because it does not necessarily contain any right or left neighbours of es(k + 1).
Applying Lemma 4.1 as before, we ﬁnd the two batches of 2s adjacent intersecting edges to the right
and to the left of es(k + 1) on qvs and we insert them into T . Then similarly for each s < i ≤ 2s
we ﬁnd ei(k + 1) and its corresponding window and we update T ; see Algorithm 4.1.
In overall,
ﬁnding a batch of s vertices, processing them and reporting the windows takes O(n + s log s) time;
moreover, in the ﬁrst batch we also run the k-selection algorithm. We repeat this procedure until
all the vertices are processed, which is O(n/s) iterations. Thus, the running time of the algorithm is
O(n/s(n + s log s) + k-selection). Since the running time of k-selection is dominated, Theorem 4.3 is
follows:

6

Figure 6: The vertices v0, v1, . . . , vs are the ﬁrst batch of s vertices in angular order. The edge e1(3)
is the second left neighbour of e0(3) because v1 is a start critical vertex. The edge e2(3) is the same
as e1(3) because v1 and v2 are respectively start and end vertices. The edge e3(3) is the second right
neighbour of e2(3) because v2 and v3 are respectively end and non-critical vertices

Theorem 4.3. Given a simple polygon P with n vertices in a read-only array, a point q ∈ P and a
constant k ∈ N, there is an algorithm which reports Wk(P, q) in O(n2/s + n log s) time using O(s)
workspace.

Algorithm 4.1: Computing the k-visibility region using O(s) workspace, Algo 1
input: Simple polygon P , point q ∈ P , k ∈ N, 1 ≤ s ≤ n
output: Windows of the k-visibility region of P from q, Wk(P, q)

1 T ← a BST
2 H ← a heap
3 v0 ← the critical vertex with smallest angle
4 Find e0(k + 1) (with Lemma 4.2)
5 i ← 0
6 while vi has not been processed before do
7

T ← The batch of 2s intersecting edges to the right and to the left of ei(k + 1) (with
Lemma 4.1)
H ← The batch of s vertices with smallest angle after vi (with Lemma 4.1)
for j = i to i + s do

8

9

10

11

12

13

14

15

if vj lies before ej(k + 1) on qvj then

Find the the window of qvj
return endpoints of the window (if it exists)

Update T according to the type of vj+1
Find ej+1(k + 1) using ej(k + 1) and T

vi ← vi+s

4.2 Algo 2: processing only critical vertices

In this algorithm we process critical vertices in contiguous batches of size s in angular order. This
algorithm works similarly as the algorithm in Section 4.1, but it diﬀers in constructing and updating
the data structure for ﬁnding the windows. In each iteration of this algorithm we ﬁnd the next batch
of s critical vertices with smallest angles and sort them in workspace memory. As in the previous
algorithm, we construct a data structure T , which contains the possible candidates for the (k + 1)th
intersecting edges of the rays from q to critical vertices of the batch. In each step when we process
a critical vertex of the batch, using T we ﬁnd the window of the critical vertex and we update T .

7

qv1v2...vsv0e0(3)e1(3)v3e3(3)e2(3)Figure 7: The vertices v0, v1, . . . , vs are the ﬁrst batch of s critical vertices in angular order. The
endpoint of the edge e0(1) is between qv1 and qv2 and this edge should be changed in T after processing
v1. The endpoint of the edge e0(4) is between qv0 and qv1 and this edge should be changed in T after
processing v0.

For updating T eﬃciently, we use another data structure, called Tθ, see below. After processing the
batch we repeat the same procedure for the next batch of s critical vertices.

In the ﬁrst iteration, after computing v1, . . . , vs, the critical vertices with smallest angles after v0,
we ﬁnd the two batches of 2s adjacent intersecting edges to the right and to the left of e0(k + 1)
on qv0. We sort them and insert them in a balanced search tree T , which is done in O(n + s log s)
time. Then for each edge in T we determine the larger angle of its endpoints. This angle shows the
position of the endpoint between the rays from q to the critical vertices. Speciﬁcally, if the edge is
incident to a non-critical vertex, this angle determines the step in which the name of the edge in
T should be updated to the other incident edge to the vertex; see Figure 7. By traversing ∂P we
determine these angles for the edges in T and we insert them in a balanced search tree Tθ, whose
entries are connected through cross-pointers to their corresponding edges in T . We construct Tθ in
O(n + s log s) time using O(s) workspace. Now for ﬁnding the (k + 1)th intersecting edge of qv1 we
update T , so that it contains the edge list of qv1: If there is any angle in Tθ which is smaller than the
angle of v1, we change the corresponding edge of the angle in T with its previous or next edge in P .
In other words, we have found a non-critical vertex between qv0 and qv1 and so we change its incident
edge, which has been already in T , with its other incident edge. Then we ﬁnd the angle of the new
edge and insert it in Tθ. These two steps take O(1) and O(log s) time for each angle that meets the
condition. By doing these steps, changes in the edge list which are caused by non-critical vertices
between qv0 and qv1 are handled. Then we update T and consequently Tθ according to the type of
v1, with the same procedure as in the previous algorithm: if v1 is an end (start) critical vertex, we
remove (insert) the two edges which are incident to v1, this can be done in O(log s) time. Now T
contains 2s intersecting edges of qv1, and we can ﬁnd e1(k + 1) using the position of e0(k + 1) and
its neighbours in T in O(1) time. We repeat this procedure for all critical vertices in this batch. In
summary, updating T considering the changes that are caused by critical and non-critical vertices of
the batch takes respectively O(s log s) and O(n(cid:48) log s) time, where n(cid:48) is the number of non-critical
vertices that lie on the interval of the batch. In the next iteration of the algorithm we repeat the
same procedure for the next batch of critical vertices until all critical vertices are processed; see
Algorithm 4.2. Since the batches do not have any intersections, each non-critical vertex lies only on
one batch. Thus, updating T in all batches takes O(n log s) time. All together, ﬁnding the batches
of s critical vertices, constructing and updating the data structures and reporting the windows take
O(cn/s + n log s) time for all the critical vertices, in addition to the running time of k-selection in
the ﬁrst batch. This leads to the following theorem:
Theorem 4.4. Given a simple polygon P with n vertices in a read-only array, a point q ∈ P and a
constant k ∈ N, there is an algorithm which reports Wk(P, q) in O(cn/s+n log s+min{kn/s, n log logs n})
expected time using O(s) workspace.

8

qv1...vsv0v2e0(4)e0(1)Algorithm 4.2: Computing the k-visibility region using O(s) workspace, Algo 2
input: Simple polygon P , point q ∈ P , k ∈ N, 1 ≤ s ≤ n
output: Windows of the k-visibility region of P from q, Wk(P, q)

1 T ← a BST
2 Tθ ← a BST
3 H ← a heap
4 v0 ← the critical vertex with smallest angle
5 Find e0(k + 1) (with Lemma 4.2)
6 i ← 0
7 while vi has not been processed before do
8

T ← The batch of 2s intersecting edges to the right and to the left of ei(k + 1) (with
Lemma 4.1)
Tθ ← The bigger angle of the endpoints of edges in T
H ← The batch of s critical vertices with smallest angle after vi (with Lemma 4.1)
for j = i to i + s do

9

10

11

12

13

14

15

16

17

18

19

20

if vj lies before ej(k + 1) on qvj then

Find the the window of qvj
return endpoints of the window (if it exists)
for any θ ∈ Tθ < angle of vj do

Update the corresponding edge of θ in T
Update the angle of the new edge of T in Tθ

Update T according to the type of vj+1
Find ej+1(k + 1) using ej(k + 1) and T

vi ← vi+s

5 Variants and extensions

We have proposed diﬀerent algorithms for computing the k-visibility region of a point q inside a simple
polygon P in the constant-memory and memory-constrained models. These algorithms report the
set of windows of the k-visibility region, Wk(P, q), which is a proper representation of Vk(P, q). This
is because, as we proved in Lemma 2.4, ∂Vk(P, q) is uniquely characterized by Wk(P, q). However,
if the edges of ∂Vk(P, q) is needed we can also apply some minor changes in the algorithms in order
to report the boundary. More precisely, in the algorithm with O(1) workspace, in iteration i after
ﬁnding ei(k + 1) we walk on ∂P and for each edge of P which intersects qvi and lies before ei(k + 1)
on qvi, we report a segment of the edge which is between qvi and qvi+1. This takes O(n) time in each
iteration. These segments are the whole k-visible part of ∂P between qvi and qvi+1. By reporting
these segments between each two consecutive rays and also all windows, ∂Vk(P, q) is obtained. Thus,
we can report ∂Vk(P, q) with the same running time as in Theorem 3.1.

In the ﬁrst algorithm with O(s) workspace, in iteration i after processing the ith batch of s
vertices, we sort the endpoints of the windows of the batch according to the indices of the edges of
P on which they lie. We know that if an endpoint of an edge is (non-)k-visible, and there is no
endpoint of a window on the edge, then the whole edge is (non-)k-visible. Using this, we walk on ∂P
and for each edge we check if there is any endpoint of a window on the edge or not. Also we check
whether the endpoints of the edge, restricted to the interval of the batch, are k-visible or not (which
can be checked in O(1) time, if we store the (k + 1)th intersecting edge of the rays of the batch in
workspace memory, by examine the position of the endpoint on its ray). By having this information
for each edge we can report its k-visible segments restricted to the interval of the batch. Regarding
the running time, if we have the sorted list of the windows according to the indices of their edges
on the boundary of P , while walking on ∂P we can check if there is any window on ej in O(|wj|)

9

time, where |wj| is the number of windows on ej. Since the number of windows in a batch is O(s),
sorting the windows and reporting the k-visible segments in each batch takes O(n + s log s) time.
Thus, we can report ∂Vi(P, q) with the same running time as in Theorem 4.3. The same approach
can be used for the second algorithm with O(s) workspace. The diﬀerence is that while we walk on
∂P we may encounter some edges which do not intersect any of the rays from q to critical vertices.
For these edges we cannot easily check whether their endpoints are k-visible. For those edges which
intersect at least one of the rays to critical vertices, we can check the k-visibility of the intersection
point and determine the visibility of the whole edge. However, while walking on a chain starting from
a (non-)k-visible point, k-visibility of the chain can only change at the endpoint of the chain or at
the endpoint of a window. Thus, while walking on ∂P using the sorted list of windows we can ﬁnd
the k-visible parts of the chains. This means that we can ﬁnd the k-visible parts of all edges. As
before, it takes O(n + s log s) time for each batch, so we conclude that we can report ∂Vk(P, q) with
the same running time as in Theorem 4.4. The following theorem states these results:
Theorem 5.1. Given a simple polygon P with n vertices in a read-only array, a point q ∈ P and a
constant k ∈ N, there is an algorithm which reports ∂Vk(P, q) in O(cn/s+n log s+min{kn/s, n log logs n})
expected time using O(s) workspace. If s ∈ O(1) the running time is O(cn + kn).

Our results can be extended in several ways; for example, computing the k-visibility region of a
point q inside a polygon P , when P is not necessarily simple, and also computing the k-visibility
region of a point q in presence of a set of segments inside a bounding box in the plane. We believe
that we have preliminary results to extend the presented algorithms to solve these two problems. For
the ﬁrst problem, when the input is a polygon with holes, similarly for each critical vertex vi, we ﬁnd
ei(k + 1) in order to decide if vi is k-visible from q or not. If vi is k-visible, there is a window between
ei(k + 2) and ei(k + 3) on qvi (if they exist). All the other arguments in algorithm for simple polygons
hold for a polygon with holes. The only remarkable issues are Lemma 2.4 and the section above for
reporting ∂Vk(P, q), in which we walk on ∂P to report the k-visible segments of ∂P . If the polygon
P has holes, after walking on the outer part of ∂P , we walk on the boundary of the holes one by one
and we apply the same procedures for them. We should keep in mind that the boundary of some
holes may be completely k-visible or completely non-k-visible. In both cases, there is no window on
the boundary of these holes. For each hole with no window on it, we check that if it is k-visible and,
if so, we report it completely. This leads to the following theorem:
Theorem 5.2. Given a non-simple polygon P with n vertices in a read-only array, a point q ∈ P
and a constant k ∈ N, there is an algorithm which reports Wk(P, q) and ∂Vk(P, q) in O(cn/s +
n log s + min{kn/s, n log logs n}) expected time using O(s) workspace. If s ∈ O(1) the running time
is O(cn + kn).

In the second problem, when the input is a set of n segments inside a bounding box in the plane,
the output is the part of the segments which are k-visible. A diﬀerence in this algorithm is that the
endpoints of all segments are critical vertices and we should process all of them. We can similarly
show that for each ray qvi, where vi is a k-visible endpoint of a segment, there is a window between
ei(k + 2) and ei(k + 3) on qvi (if they exist). In the parts of the algorithm where a walk on the
boundary is needed, reading the input sequentially leads to similar results. There may be some
completely k-visible and some completely non-k-visible segments, on which there is no endpoint of
windows. Similarly for each segment with no windows on it, we check whether it is k-visible and, if
so, we report it completely. This leads to the following theorem:

Theorem 5.3. Given a set of n segments S in a read-only array which lie in a bounding box B, a
point q ∈ B and a constant k ∈ N, there is an algorithm which reports Wk(S, q) and ∂Vk(P, q) in
O(n2/s + n log s) time using O(s) workspace. If s ∈ O(1) the running time is O(n2).

10

6 Conclusion

We have proposed algorithms for a class of k-visibility problems in the constrained-memory model,
which provide time-space trade-oﬀs for these problems. We leave it as an open question whether the
presented algorithms are optimal. Also, it would be interesting to see whether there exists an output
sensitive algorithm whose running time depends on the number of windows in the k-visibility region,
instead of the critical vertices in the input polygon.

References

[1] Takao Asano, Tetsuo Asano, Leonidas Guibas, John Hershberger, and Hiroshi Imai. Visibility of

disjoint polygons. Algorithmica, 1(1-4):49–63, 1986.

[2] Tetsuo Asano, Kevin Buchin, Maike Buchin, Matias Korman, Wolfgang Mulzer, G¨unter Rote, and
Andr´e Schulz. Memory-constrained algorithms for simple polygons. Computational Geometry,
46(8):959–969, 2013.

[3] Ant´onio Leslie Bajuelos, Santiago Canales, Gregorio Hern´andez-Pe˜nalver, and Ana Mafalda Mar-
tins. A hybrid metaheuristic strategy for covering with wireless devices. J. UCS, 18(14):1906–1932,
2012.

[4] Luis Barba, Matias Korman, Stefan Langerman, and Rodrigo I Silveira. Computing a visibility

polygon using few variables. Computational Geometry, 47(9):918–926, 2014.

[5] Timothy M Chan. Comparison-based time-space lower bounds for selection. ACM Transactions

on Algorithms (TALG), 6(2):26, 2010.

[6] Timothy M Chan and Eric Y Chen. Multi-pass geometric algorithms. Discrete & Computational

Geometry, 37(1):79–102, 2007.

[7] Timothy M Chan, J Ian Munro, and Venkatesh Raman. Selection and sorting in the restore
model. In Proceedings of the 25th Annual ACM-SIAM Symposium on Discrete Algorithms, pages
995–1004. SIAM, 2014.

[8] Subir Kumar Ghosh. Visibility algorithms in the plane. Cambridge University Press, 2007.

[9] J Ian Munro and Venkatesh Raman. Selection from read-only memory and sorting with minimum

data movement. Theoretical Computer Science, 165(2):311–323, 1996.

11

