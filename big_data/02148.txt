6
1
0
2

 
r
a

M
7

 

 
 
]

O
L
.
s
c
[
 
 

1
v
8
4
1
2
0

.

3
0
6
1
:
v
i
X
r
a

Complete Elgot Monads and Coalgebraic

Resumptions

Sergey Goncharov ⋆, Stefan Milius ⋆⋆, and Christoph Rauch ⋆ ⋆ ⋆

Lehrstuhl f¨ur Theoretische Informatik, Friedrich-Alexander Universit¨at

Erlangen-N¨urnberg, Germany

Abstract. Monads are extensively used nowadays to abstractly model
a wide range of computational eﬀects such as nondeterminism, state-
fulness, and exceptions. It turns out that equipping a monad with a
(uniform) iteration operator satisfying a set of natural axioms allows for
modelling iterative computations just as abstractly. The emerging mon-
ads are called complete Elgot monads. It has been shown recently that
extending complete Elgot monads with free eﬀects (e.g. operations of
sending/receiving messages over channels) canonically leads to gener-
alized coalgebraic resumption monads, previously used as semantic do-
mains for non-wellfounded guarded processes. In this paper, we continue
the study of the relationship between abstract complete Elgot monads
and those that capture coalgebraic resumptions, by comparing the cor-
responding categories of (Eilenberg-Moore) algebras. To this end we ﬁrst
provide a characterization of the latter category; even more generally, we
formulate this characterization in terms of Uustalu’s parametrized mon-
ads. This is further used for establishing a characterization of complete
Elgot monads as precisely those monads whose algebras are coherently
equipped with the structure of algebras of coalgebraic resumption mon-
ads.

1

Introduction

One traditional use of monads in computer science, stemming from the semi-
nal thesis of Lawvere [18], is as a tool for algebraic semantics where monads
arise as a high-level metaphor for (clones of) equational theories. More recently,
Moggi proposed to associate monads with computational eﬀects and use them
as a generic tool for denotational semantics [20], which later had a considerable
impact on the design of functional programming languages, most prominently
Haskell [1]. Finally, in the ﬁrst decade of the new millennium, Plotkin and Power
reestablished the connection between computational monads and algebraic the-
ories in their theory of algebraic eﬀects [21, 22].

⋆ Email: Sergey.Goncharov@fau.de
⋆⋆ Email: mail@stefan-milius.eu Supported by Deutsche Forschungsgemeinschaft

(DFG) under project MI 717/5-1
⋆ ⋆ ⋆ Email: Christoph.Rauch@fau.de

We use the outlined perspective to study the notion of iteration, a concept,
that has a well-established algebraic description, and whose relevance in the
context of computational eﬀects is certain. On the technically level our present
work can be viewed as a continuation of the previous extensive work on monads
with iteration [2, 5, 8] having its roots in the work of Elgot [12] and Bloom and
´Esik [11] on iteration theories.

More speciﬁcally, we are concerned with a particular construction on monads:
given a monad T and a functor Σ, we assume the existencence of the coalgebra

TΣX = νγ. T (X + Σγ)

(⋆)

for each object X (these ﬁnal coalgebras exist under mild assumptions on T , Σ,
and the base category). It is known [26] that TΣ extends to a monad TΣ and we
call the latter the generalized coalgebraic resumption monad.

Intuitively, (⋆) is a generic semantic domain for systems combining exten-
sional (via T) and intensional (via Σ) features with iteration. To make this
intuition more precise, consider the following simplistic

Example 1. Let A = {a, b} be an alphabet of actions. Then the following
system of equations speciﬁes processes x1, x2, x3 of basic process algebra (BPA):

x1 = a · (x2 + x3)

x2 = a · x1 + b · x3

x3 = a · x1 + X

We can think of this speciﬁcation as a map P → T ({X} + ΣP ) where P =
{x1, x2, x3}, Σ = A × -- and T = Pω is the ﬁnite powerset monad. Using the
standard approach [24] we can solve this speciﬁcation by ﬁnding a map P →
TΣ{X} that assigns to every xi the corresponding semantics over the domain of
possibly non-wellfounded trees TΣ{X} = νγ.Pω({X} + A × γ). The crucial fact
here is that the original system is guarded, i.e. every recursive call of a variable xi
is preceded by an action. In particular, this implies that the recursive system at
hand has a unique solution.

If the guardedness assumption is dropped, the uniqueness of solutions can no
longer be ensured, but it is possible to introduce a notion of canonical solution
assuming that the monad T has suitable completeness properties under an order,
or more generally is a complete Elgot monad. A monad T is called a complete
Elgot monad if it deﬁnes a solution f † : X → T Y for every morphisms of the
form f : X → T (Y + X) satisfying a certain well-established set of axioms for
iteration (e.g. Pω is not a complete Elgot monad, but the countable powerset
monad Pω1 is). The central result of the recent work [14] is that whenever T is a
complete Elgot monad then so is the transformed monad (⋆). In particular, this
allows for solving recursive equations over processes (in the sense of Example 1)
whenever recursive equations over T are solvable.

In the present paper we study the relationship between guarded and un-
guarded recursion implemented via complete Elgot monads and generalized coal-
gebraic resumptions, respectively. As an auxiliary abstraction device, we involve
the notion of parametrized monad previously developed by Uustalu [26], e.g. the
bifunctor X # Y = T (X + ΣY ) in (⋆) is a parametrized monad.

2

The paper is organized as follows. After categorical preliminaries (Section 2)
we present and discuss complete Elgot monads in Section 3. In Section 4 we in-
troduce algebras and complete Elgot algebras for parametrized monads; here we
show that existence of free complete Elgot algebras is equivalent to the existence
of certain ﬁnal coalgebras, which then form carriers of the corresponding algebras
(Theorem 20); furthermore, we show that the category of complete Elgot alge-
bras is equivalent to the Eilenberg-Moore category of a generalized coalgebraic
resumption monad over the corresponding parametrized monad (Theorem 27).
Finally, in Section 5 we apply the developed results to characterize complete
Elgot monads as those whose algebras are coherently equipped with complete
Elgot algebra structures (Theorem 32 and 33).

2 Preliminaries

We assume that readers are familiar with basic category theory [19]; we write
|C| for the class of objects of a category C and f : X → Y for morphisms in C.
We often omit indexes, e.g. on natural transformations, if they are clear from
the context.

In this paper we work with an ambient category C with ﬁnite coproducts.
We denote by inl and inr the left- and right-hand coproduct injections from X
and Y to X + Y , and [f, g] : X + Y → Z the is the copair of f : X → Z and
g : Y → Z, i.e. the unique morphism with [f, g] inl = f and [f, g] inr = g. The
codiagonal is denoted by ∇ = [id, id] : X + X → X as usual.

We consider monads by C given in the form of Kleisli triples T = (T, η, --⋆)
where T is an endomap on |C|, η, called monad unit, is a family of morphisms
ηX : X → T X indexed over |C|, and (Kleisli) lifting assigning to each f : X →
T Y a morphism f ⋆ : T X → T Y such that the following laws hold:

η⋆ = id,

f ⋆ η = f,

(f ⋆ g)⋆ = f ⋆ g⋆.

This is equivalent to the deﬁnition of a monad in terms of monad multiplica-
tion µ [19], where in particular µ = id⋆, η extends to a natural transformation,
and T to an endofunctor by T f = (η f )⋆. The Kleisli category CT of T is formed
by Kleisli morphisms: HomCT(X, Y ) = HomC(X, T Y ) under η used as identity
morphisms and Kleisli composition (f, g) 7→ f ⋄ g = f ⋆ g. We adopt the notation
f : X ⋄−→Y for Kleisli morphisms f : X → T Y .

The forgetful functor from CT to C has a left adjoint sending any f : X → Y
to f = η f : X → T Y . Like any left adjoint, this functor preserves colimits, and in
particular coproducts. Since |C| = |CT|, this implies that coproducts in CT exist
and are lifted from C. Explicitly, inl = η inl : X ⋄−→X+Y , inr = η inr : X ⋄−→X+Y
are the coproduct injections in CT and [f, g] : A+B ⋄−→C is the copair of A ⋄−→C
and B ⋄−→C. We denote by f ⊕ g : A + B ⋄−→A′ + B′ the coproduct of morphisms
f : A ⋄−→A′ and g : B ⋄−→B′ in CT. Besides CT, we consider the category CT
of (Eilenberg-Moore) algebras for T, whose objects are pairs (A, a : T A → A),
satisfying laws: a η = id, a (T a) = a µ; see [19] for more details.

3

Fixpoint:

Naturality:

X

f

Y

X

=

X

f

Y

X

f

Y

X

X

f

Y

X

Z

g

=

X

f

Y

Z

g

X

Codiagonal:

Uniformity:

Y

X

g

X

=

Y

g

X

X

X

X

Z

Z

h

h

X

X

f

f

Y

X

Y

X

=

⇓

=

Z

Z

g

g

Y

Z

Y

Z

X

h

Fig. 1: Axioms of complete Elgot monads.

We call on the standard facts on (F -)coalgebras [23], which are pairs of the
form (X, f ) with carriers X ranging over |C| and transition structures f ranging
over HomC(X, F X) for a ﬁxed endofunctor F . Coalgebras together with mor-
phisms of the carriers compatible with the transition structure form a category.
The ﬁnal F -coalgebra, if it exists, is denoted (νF, out). By Lambek’s lemma, out
is an isomorphism, whose inverse out-1 can be obtainend as coit(F out) where
for any coalgebra (X, f : X → F X) we denote by coit f the unique coalgebra
morphism X → νF to the ﬁnal coalgebra.

3 Complete Elgot Monads for Iteration

Complete Elgot monads are a slight generalization of Elgot monads from [8, 9],
which in turn, for the base category being Set, correspond precisely to those
iteration theories of Bloom and ´Esik [11] that satisfy the functorial dagger im-
plication for base morphisms. In the following deﬁnition cited from [14], we follow

4

the terminology of [10, 25] where the same axioms were considered in the dual
setting of generic parametrized recursion.

Deﬁnition 2 (Complete Elgot monads). A complete Elgot monad is a
monad T equipped with an operator --†, called iteration, that assigns to each
morphism f : X ⋄−→Y + X a morphism f † : X ⋄−→Y such that the following
axioms hold:

ﬁxpoint: f † = [η, f †] ⋄ f , for f : X ⋄−→Y + X;
naturality: g ⋄ f † = ((g ⊕ η) ⋄ f )† for g : Y ⋄−→Z;
codiagonal1: ([η, inr] ⋄ g)† = (g†)† for g : X ⋄−→(Y + X) + X;
uniformity: f ⋄ h = (η ⊕ h) ⋄ g implies f † ⋄ h = g† for g : Z ⋄−→Y + Z and
h : Z → X.

The above axioms of iteration can be comprehensibly represented in a ﬂowchart-
style as in Fig. 1. Here the feedback loops correspond to iteration and the colored
frames indicate the scope of the constructs being iterated. We believe that this
presentation illustrates that these axioms are natural and desirable laws of it-
eration. For example, the naturality axiom expresses the fact that the scope of
the iteration can be stretched to embrace a function postprocessing the output
of the terminating branch. There is an obvious similarity between the axioms in
Fig. 1 and the axioms of traced monoidal categories [17]. In fact, Hasegawa [16]
proved that there is an equivalent presentation of a dagger operation satisfying
the above axioms in terms of a uniform trace operator w.r.t. coproducts (actu-
ally, Hasegawa worked in the dual setting with products). Note that the present
axioms make use of coproduct injections and the codiagonal morphism, while
the trace axioms can be formulated more generally for any monoidal product.

One standard source of examples for complete Elgot monads is a suitable

enrichment of the Kleisli category CT over complete partial orders.

Example 3. (ω-continuous monads) An ω-continuous monad consists of a
monad T such that the Kleisli category CT is enriched over the category Cppo
of ω-complete partial orders with bottom ⊥ and (nonstrict) continuous maps;
moreover, composition in C is required to be left strict and composition in CT
right strict: ⊥ f = ⊥, f ⋄ ⊥ = ⊥; equivalently, ⊥ is a constant of T. Note that

it follows that copairing in CT is continous in both arguments; for Fi[fi, g] is a
morphism satisfying (Fi[fi, g]) inl = Fi fi and (Fi[fi, g]) inr = g by the continu-
ity of composition, whence Fi[fi, g] = [Fi fi, g] (and similarly for continuity in

the second argument).

It is shown in [14] that an ω-continuous monad is a complete Elgot monad
with e† calculated as the least ﬁxed point of the map f 7→ [η, f ] ⋄ e. This yields
the powerset monad P, the Maybe-monad (-- +1), or the nondeterministic state
monad P(-- ×S)S as examples of complete Elgot monads on Set. The lifting
monad (--)⊥ is a complete Elgot monad on the category of complete partial
orders without bottom.

1 The codiagonal axiom is often written as ((η ⊕ ∇) ⋄ g)† = (g†)† implicitly alluding

to the canonical isomorphism Y + (X + X) ∼= (Y + X) + X.

5

X

g

Y

Z

Y

h

X

=

X

g

Y

Z

h

Y

X

Y

g

Z

Fig. 2: Dinaturality axiom.

Another principal source of examples are free complete Elgot monads for which
the iteration of guarded morphisms is uniquely deﬁned.

Example 4. (Free complete Elgot monads) Suppose T is the initial com-
plete Elgot monad. It is shown in [14] that whenever the functor TΣ deﬁned
by (⋆) exists, it yields the free complete Elgot monad on Σ (note that the origi-
nal T is the free complete Elgot monads on Σ being the constant functor on the
initial object of C). On Set (more generally, on any hyperextensive category [3])
the initial complete Elgot monad T is the Maybe-monad -- +1.

In comparison to the previous work [14], Deﬁnition 2 remarkably drops the axiom
of dinaturality (see Fig. 2). The reason for it is that this axiom turns out to be
derivable, which is a fact that was recently discovered and formalized on the
level of abstract iteration theories [13]. Corollary 6 from op.cit. can be couched
in present terms (modulo the terminological change: parameter identity instead
of naturality, double dagger instead of codiagonal and dagger implication for base
morphisms instead of uniformity) as follows:

Proposition 5 (Dinaturality). Given g : X ⋄−→Y + Z and h : Z ⋄−→Y + X,
then

([inl, h] ⋄ g)† = [η, ([inl, g] ⋄ h)†] ⋄ g

The codiagonal axiom in Deﬁnition 2 can equivalently be replaced by a form of
the well-known Beki´c identity, see [11].

Proposition 6 (Beki´c identity). A complete Elgot monad T is, equivalently,
a monad satisfying the ﬁxpoint, naturality and uniformity axioms (as in Deﬁ-
nition 2), and the Beki´c identity

(T α [f, g])† = [η, h†] ⋄ [inr, g†]

where g : X ⋄−→(Z + Y ) + X, f : Y ⋄−→(Z + Y ) + X, h = [η, g†] ⋄ f : Y ⋄−→Z + Y ,
with α : (A + B) + C → A + (B + C) being the obvious associativity morphism.

4 Parametrized Monads and Complete Elgot Algebras

In order to study complete Elgot monads and their algebras it is helpful to
make a further abstraction step and generalize from monads to parametrized
monads [26] (ﬁnitary parametrized monads are also called bases [4]), which are
of independent interest.

6

Deﬁnition 7. (Parameterized monad) A parameterized monad over C is a
functor from C to the category of monads over C and monad morphisms. More
explicitly, a parameterized monad is a bifunctor # : C × C → C such that for
any X ∈ |C|, -- #X : C → C is a monad, and for any f : X → Y , the family
(idZ # f )Z yields a monad morphism from -- #X to -- #Y .

Remark 8. The order of arguments in X #Y is in agreement with [26] and diﬀers
from [4] where the notation Y (cid:3) X equivalent to the present X # Y is used. We
chose the order of arguments to ensure agreement with the type proﬁle of the
iteration operator --†, which is in turn in agreement with the expression (⋆).

Following [4] we will from now on denote the unit and monad multiplication of
monads -- #X by uX
A : (A # X) # X → A # X, respectively.

A : A → A # X and mX

Example 9. (Parametrized monads) We recall some standard examples of
parametrized monads from [26]; further examples can be found e.g. in [7].

1. Whenever T = (T, η, --⋆) is a monad and Σ is a functor, A # X = T (A + ΣX)

is a parametrized monad with the unit given by

A = (cid:16)A
uX

inl

−−→ A + ΣX

ηA+ΣX−−−−−→ T (A + ΣX)(cid:17)

and the multiplication by

A = (cid:16)T (T (A + ΣX) + ΣX)
mX

[id,ηA+ΣX inr]⋆

−−−−−−−−−→ T (A + ΣX)(cid:17).

Speciﬁcally, if Σ is the constant functor on object E then X # Y is the ex-
ception monad transformer with exceptions from E [20]. Another interesting
special case is when T is the identity monad (cf. Remark 15).

2. A # X = A × X ⋆ is a parametrized monad with the unit and multiplication

given by

uX
A : a 7→ (a, ε) and mX

A : (a, w, v) 7→ (a, wv),

where ε denotes the empty word and wv concatenation of words.

3. Given a contravariant endfunctor H, A#X = AHX is a parametrized monad

with the unit and multiplication given by

A : a 7→ λx. a and mX
uX

A : (f : HX → (HX → A)) 7→ λx. f (x)(x).

This is a generalization of the well known reader monad, which can be re-
covered by instantiating H with a constant functor.

The following is a straightforward extension of the notion of an algebra for a
base studied in [4] to arbitrary parametrized monads.

7

Deﬁnition 10. (#-algebras) Given a parameterized monad # : C × C → C,
a #-algebra is a pair (A, a) consisting of an object A of C, and an algebra for
the monad -- #A, i.e. a morphism a : A # A → A satisfying

A

uA
A

id

A # A

(A # A) # A

a#id

A # A

a

A

mA
A

A # A

a

a

A

A morphism between #-algebras (A, a) and (B, b) is a C-morphism f : A → B
such that f a = b (f # f ).

Example 11. Several examples of #-algebras have been discussed in [6,7]. Here
we recall from loc. cit. only the following. Consider the three bases A#1 X = A+
X ×X, A#2 X = A×X ∗, and A#3 X = BA on Set where BA is the free algebra
with one binary operation on A (i.e. BA consists of all ﬁnite binary trees with
leaves labelled in A). Note that #1 and #3 are special cases of the parameterized
monad of Example 9(i) for T the indentity monad and ΣX = X×X and ΣX = ∅,
respectively. The category of algebras is in each of the three cases isomorphic
to the category of algebras with one binary operation. Later, when we discuss
complete Elgot #-algebras, we are going to see a diﬀerence between these three
parameterized monad.

For our leading example X # Y = T (X + ΣY ) the category of #-algebras can
be described explicitly.

Proposition 12. Let X # Y = T (X + ΣY ) for a monad T and a functor Σ
on C. Then #-algebras are precisely T-Σ-bialgebras, i.e. triples (A, a, f ) where
a : T A → A is a T-algebra and f : ΣA → A is a Σ-algebra.

Corollary 13. Let X # Y = T (X + Y ) for a monad T on C. The category
CT of T-algebras is isomorphic to the full subcategory of those #-algebras a :
T (A + A) → A, which factor through T ∇.

Analogously to the case of monads, we introduce #-algebras with iteration. This
generalizes the deﬁnition of a complete Elgot algebra for a functor from [5].

Deﬁnition 14. (Complete Elgot #-algebras) A complete Elgot #-algebra is
a #-algebra a : A # A → A equipped with an iteration operator

e : X → A # X

e† : X → A

satisfying the following axioms:

solution: for every e : X → A # X we have e† = a (id # e†) e;
functoriality: for every e : X → A # X, f : Y → A # X and h : X → Y ,
f h = (id # h) e implies f † h = e†;

8

compositionality: for every f : Y → A # Y and g : X → Y # X deﬁne

f † • g = (X

g

−−→ Y # X

f †#id
−−−→ A # X)

and f (cid:4) g : Y + X → A # (Y + X) by

Y + X

[uX

Y ,g]

Y # X

f #id

(A # Y ) # X

A # (Y + X)

mY +X

A

(A # (Y + X)) # (Y + X)

(id#inl)#inr

Compositionality states that (f (cid:4) g)† inr = (f † • g)† : X → A.

A morphism from a complete Elgot #-algebra (A, a, --†) to a complete Elgot #-
algebra (B, b, --‡) is a C-morphism f : A → B, such that ((f # id) e)‡ = f e† for
all e : X → A # X. This deﬁnes the category of complete #-algebras CElg#(C).

Remark 15. Note that complete Elgot #-algebras for the parametrized monad
A#X = A+ΣX (i.e. the parametrized monad of Example 9 (i) for T the identity
monad) are precisely the complete Elgot algebras for the functor Σ introduced
and studied in [5].

Example 16. Let us come back to the three simple parameterized monads on
Set in Example 11 whose algebras are in each case simply binary algebras. In
each of the three cases, morphisms X → A # X can be understood as a systems
of mutual recursive equations of a certain type with variables from the set X,
and the --† operation of a complete Elgot #-algebra provides a solution of a given
system of equations. However, the type of these systems of recursive equations is
diﬀerent for each of the three parameterized monads. For A #1 X = A + X × X,
e : X → A + X × X can be understood as specifying for every x ∈ X precisely
one equation of one of the two types below:

x ≈ x′ ∗ x′′ with x′, x′′ ∈ X

or

x ≈ a with a ∈ A.

The solution e† then provides for every x ∈ X an element x† ∈ A that, when
plugged into the above formal equations, turn them into identities in A where ∗
is interpreted as the binary operation of A.

For A #2 X = A × X ∗, to give a morphism e : X → A × X ∗ is equivalent to
give a system of recursive equations which speciﬁes for each x ∈ X an equation

x ≈ a ∗ x′ with x′ ∈ X, a ∈ A,

i.e. iteration is restricted to the second argument.

Finally, for A #2 X = A × X ∗, morphisms e : X → BA simply specify for
each x ∈ X a binary tree e(x), and by the solution axiom, e†(x) is then the
interpretation of this binary tree in A. Thus, iteration is trivial, in other words,
every binary algebra is a complete Elgot algebra for #3.

9

Example 17. Continuous algebras are complete Elgot #-algebras. Consider any
category C that is enriched over Cppo such that composition is left strict and a

parameterized monad # that is locally continuous in both arguments, i.e. Fi(fi #
gi) = (Fi fi) # (Fi gi) holds for any fi : A → B and gi : X → Y . Then every #-
algebra becomes a complete Elgot #-algebra when equipped with the operation
--† assigning to every e : X → A # X its least solution. In more detail, let A be
a #-algebra, to every e : X → A # X we assign e† : X → A given by

e† = Gi

e†
i ,

0 = ⊥ : X → A and ei+1 = a (id # e†

where e†
i ) e. That means that e† is the
least ﬁxed point of the function s 7→ a (id # s) e on HomC(X, A). The veriﬁcation
that this satisﬁes the axioms of a complete Elgot #-algebra can be found in the
appendix.

Note that we did not require a morphism of complete Elgot #-algebras to be a
morphism of #-algebras. Somewhat surprisingly, this follows automatically.

Proposition 18. Let f : A → B be a complete Elgot #-algebra morphism from
(A, a, --†) to (B, b, --‡). Then f is a morphism of #-algebras.

Proof (Sketch). The idea is to represent a as a loop terminating after the ﬁrst
iteration and then deduce preservation of a by f from preservation of iteration
by f guaranteed by deﬁnition. More concretely, we take

e = (id # inr) [id, uA

A] : (A # A) + A → A # ((A # A) + A)

and show that e† = [a, id]. The remaining proof amounts to deriving b (f # f ) =
f a from f e† = ((f # id) e)‡.
⊓⊔

It was shown by Uustalu [26] that parametrized monads give rise to monads at
least in two diﬀerent ways:

Proposition 19. Suppose, # is a parametrized monad on C such that the least
ﬁxpoint µγ. X # γ (the greatest ﬁxpoint νγ. X # γ) exists for every X ∈ |C|.
Then µγ. -- #γ (νγ. -- #γ) is the underlying functor of a monad.

It is known that the initial algebra µγ. X # γ yields the free #-algebra on X; in
fact, existence of this free #-algebra is equivalent to the existence of that initial
algebra (see [7, Theorem 2.18]). Here we are interested in the ﬁnal coalgebras
νγ. X # γ. These yield the free complete #-algebras, and moreover, existence of
these free algebras is equivalent to the existence of that ﬁnal coalgebras.

Theorem 20. 1. Suppose that outX : ̥#X → X # ̥#X is a ﬁnal (X # --)-

coalgebra. Then the following morphisms

̥#X # ̥#X

outX #id

(X # ̥#X) # ̥#X

m

̥#X
X

X # ̥#X

out-1
X

̥#X

10

and

̥#X
X

u

X

X # ̥#X

out-1
X

̥#X

form the algebra structure and universal morphism of a free complete Elgot
algebra for # on X.

2. Suppose that ϕX : F X #F X → F X and ηX : X → F X form a free complete

Elgot #-algebra on X. Then

X # F X

ηX #id

F X # F X

ϕX

F X

is an isomorphism, and its inverse is the structure of a ﬁnal (X # --)-
coalgebra.

Remark 21. Note that in Clause (i) above the iteration operator on ̥#Y is
obtained as follows. Given e : X → ̥#Y # X one forms the following coalgebra
c : ̥#Y + X → Y # (̥#Y + X) for Y # --:

̥#Y + X

[uX

̥# Y ,e]

̥#Y # X

out #id

(Y # ̥#Y ) # X

Y # (̥#Y + X)

m

̥# Y +X
Y

(Y # (̥#Y + X)) # (̥#Y + X)

(id#inl)#inr

Then one puts e† = (coit c) inr.

The proof of Theorem 20 is a non-trivial generalization of the proof of [5, Theo-
rem 5.4] from complete Elgot algebras for endofunctors to those for parameter-
ized monads; we will establish Clause (i) as a consequence of Theorem 27 (see
Corollary 28) while we outline the proof of Clause (ii) in the appendix.

Before we continue, let us note that, surprisingly, in a free complete Elgot
algebra the iteration always assigns a unique solution to any e : X → F X # X.

Proposition 22. Suppose that ϕY : F Y # F Y → F Y and ηY : Y → F Y
form a free complete Elgot #-algebra on Y . Then for every e : X → F Y # X,
e† : X → F Y is a unique solution, i.e. a unique morphism satisfying the solution
axiom with e.

From now on we assume that the ﬁnal coalgebras νγ. X #γ exist and denote them
̥#X (standardly omitting the structure morphisms outX : ̥#X → X # ̥#X).
Recall that coit f : X → ̥#Y is the morphism uniquely induced by a coalgebra
(X, f : X → Y # X). Following [26], in order to introduce and reason about the
monad structure of ̥#, we use a more ﬂexible primitive corecursion principle,
derived from the standard coiteration principle embodied in coit.

Proposition 23 ( [26]). For any functor F with a ﬁnal coalgebra νF , and any
f : X → F (νF + X), there is a unique morphism h satisfying out h = F [id, h] f .

The morphism h in Proposition 23 is said to be deﬁned by primitive corecur-
sion. We use primitive corecursion to slightly generalize the coit construct in the
special case of ̥#:

11

Lemma 24. For any e : X → B # X and f : B → A # ̥#A, there is a unique
morphism h satisfying

X

h

e

B # X

m

̥#A
A (f #h)

̥#A

out

A # ̥#A.

(1)

For any e : X → B # X and f : B → A # ̥#A we denote by

coit(e, f ) : X −→ ̥#A

the unique h making diagram (1) commute. Using (1), the monad structure on
̥# can be given as follows:

X = out-1 u̥#X
ην
X = coit uX
X
f ⋆ = coit((f # id) out, out)

where f : X → ̥#Y

This also deﬁnes µν = id⋆ = coit(out, out). Note that, by Lemma 24, f ⋆ is the
unique morphism satisfying equation

out f ⋆ = m̥#Y

Y

(out f # f ⋆) out .

(2)

Lemma 25. Let e : X → B # X and f : B → A # ̥#A. Then

coit(e, f ) = (out-1 f )⋆ (coit e).

As an easy corollary of Lemma 25 we obtain that coit e = coit(e, u̥#X
we have

X ); indeed,

coit(e, u̥#X

X )⋆ (coit e) = coit e.

X ) = (out-1 u̥#X

X )⋆ (coit e) = (ην

We state another useful property in the following lemma:

Lemma 26. Let e : X → B # X and g : B → C. Then

̥#g (coit e) = coit((g # id) e).

The following theorem is our ﬁrst main result. It establishes an equivalence of
complete Elgot #-algebras and ̥#-algebras.

Theorem 27. For any parameterized monad # : C × C → C, the Eilenberg-
Moore algebras of ̥# = νγ. -- #γ are precisely the complete Elgot #-algebras.
More precisely, C̥# and CElg#(C) are isomorphic categories under the identical
on morphisms isomorphism constructed as follows:

C̥# → CElg#(C): for a ̥#-algebra (A, χ : ̥#A → A) we deﬁne a #-algebra
(A, χ out-1 (id # ην ) : A # A → A, --†) with e† = χ (coit e) : X → A for any
e : X → A # X.

12

CElg#(C) → C̥# : for a #-algebra (A, a : A # A → A, --†) we deﬁne a
̥#-algebra (A, out† : ̥#A → A).

Proof (Sketch). For the direction from C̥# to CElg#(C) we have to verify the
axioms of complete Elgot #-algebras. The hardest case is that of the composi-
tionality identity. We have on the one hand

(f † • g)† = χ coit(f † • g)

= χ coit ((χ (coit f ) # id) g)

= χ coit ((χ # id) ((coit f ) # id) g)
= χ (̥#χ) coit(((coit f ) # id) g)
= χ µν coit(((coit f ) # id) g)
= χ coit(((coit f ) # id) g, out),

// Lemma 26

// χ is an ̥#-algebra

// Lemma 25

and on the other hand, by deﬁnition,

(f (cid:4) g)† inr = χ coit(mY +X

A

(((id # inl) f ) # inr) [uX

Y , g]) inr .

A

(((id # inl) f ) # inr) [uX

Let us denote mY +X
Y , g] by h. By Lemma 24, it suﬃces to
show the identity out (coit h) inr = m̥#A
A (out #((coit h) inr)) (coit f # id) g. The
latter is easy to obtain from the auxiliary equation (coit h) inl = coit f whose
proof is a routine.

For the direction from CElg#(C) to C̥# , we have to prove the two axioms
of Eilenberg-Moore algebras. The harder one is out† ̥#(out†) = out† µν and it
is obtained from the instance of compositionality (out (cid:4) out)† inr = (out† • out)†
by establishing out† [id, µν] = (out (cid:4) out)† and out† ̥#(out†) = (out† • out)†. Fur-
ther calculations ensure that the correspondence between CElg#(C) and C̥#
⊓⊔
is functional and moreover an isomorphism.

Corollary 28. Free complete Elgot #-algebras exist for all objects A of C if
and only if the ﬁnal coalgebras ̥#A exist. The functor assigning to an object A

its free complete Elgot #-algebra is F A = (cid:0)̥#A, out-1
where --† is the iteration operation deﬁned in Remark 21.

A m̥#A

A (outA #id̥#A), --†(cid:1),

5 Algebras of Complete Elgot Monads

We are now in a position to apply the results on complete Elgot #-algebras
developed in the previous section to explore the connection between complete
Elgot monads and complete Elgot algebras. We brieﬂy motivate our further
technical contribution as follows.

Recall that given a monad T and an endofunctor Σ over C, X # Y = T (X +
ΣY ) is a parametrized monad and therefore, by Proposition 19, TΣ given by (⋆)
is a monad. We reserve notation Tν for the special case when Σ = Id:

TνX = νγ. T (X + γ).

13

From a computational point of view, Tν X can be considered as a type of processes
triggering a computational eﬀect formalized by T at each step and eventually
outputting values from X in case of successful termination. The unary operation
captured by Σ = Id intuitively means the action of delaying. This perspective
was previously pursued in [15]. Now, if T is a complete Elgot monad, or more
generally, any monad equipped with an iteration operator, we can deﬁne a col-
lapsing morphism δX : Tν X → T X as follows:

δX = (cid:16)Tν X

outX−−−→ T (X + Tν X)(cid:17)†

,

(3)

which intuitively ﬂattens every possibly inﬁnite sequence of computational steps
of Tν X into a single step of T X. Let us illustrate this with the following toy
example.

Example 29. Let T X = Pω1(A⋆ × X) where Pω1 is the countable powerset
functor and A is some ﬁxed alphabet of actions like in Example 1. We extend T
to a monad T by putting

ηX (x) = {(ε, x)}

and f ⋆(s ⊆ A⋆ × X) = {(ww′, y) | (w, x) ∈ s, (w′, y) ∈ f (x)},

where ε ∈ A∗ is the empty word and f : X → Pω1(A⋆ × Y ). It is easy to see
that T is an ω-continuous monad (see Example 3) and hence a complete Elgot
monad with the iteration operator deﬁned using least ﬁxed points. An element of
T X is intuitively a countably branching process, with results in X, at each step
capable of executing a ﬁnite series of actions. Now the collapsing morphism (3)
for every process p ∈ Tν{X} calculates the set tr(p) ⊆ A⋆ of all sucessful traces
of p.

δT X−−−→ T T X

µX−−→ T X(cid:1) is a

As we will see latter (Theorem 32 (i)), (cid:0)T X, Tν T X

Tν-algebra and hence, by Theorem 27, a complete Elgot #-algebra. We can now
change the perspective and instead of T X consider an arbitrary complete Elgot
#-algebra. The question we consider next is: Is it possible to recover the laws of
iteration for T assuming that every T is coherently equipped with the structure of
a complete Elgot #-algebra? It turns out that without any further assumptions
on the category of complete Elgot #-algebras almost all laws of complete Elgot
monads become derivable. More precisely, we introduce the following class of
monads.

Deﬁnition 30. A monad T is called a weak complete Elgot monad if it is
equipped with an iteration operator --† that satisﬁes ﬁxpoint, naturality, and uni-
formity axioms and the following identity: for any g : X ⋄−→Y +X, f : Y ⋄−→Z +Y
we have

(cid:16)Y + X

[inl,g]
−−−→ Y + X

f +id

−−−→ Z + Y + X(cid:17)†

inr = X

g†
−−→ Y

f †
−−→ Z.

(4)

(See Fig. 3 for the pictorial form.)

It is relatively easy to deduce (4) from the codiagonal identity, hence we obtain

14

Y

X

Y

g

f

Z

Y

X

=

X

g

Y

X

f

Z

Y

Fig. 3: The additional axiom for weak complete Elgot monads.

Proposition 31. Any complete Elgot monad is a weak complete Elgot monad.

We now can establish a tight connection between weak complete Elgot monads
and complete Elgot #-algebras.

Theorem 32. Let T be a monad on C and let X # Y = T (X + Y ).

1. If T = (T, η, --⋆, --†) is a weak complete Elgot monad then CT is isomorphic to
the full subcategory of CElg#(C) formed by those complete Elgot #-algebras
(A, a : T (A + A) → A, --‡) which factor through T ∇ : T (A + A) → T A and
for which e‡ = a (T inl) e† for every e : X → T (A + X).

2. Conversely, any functor J : CT → CElg#(C) sending a T-algebra
a : T A → A to a (T ∇) : T (A + A) → A and identical on morphisms induces
a weak complete Elgot monad structure on T as follows:

e : X → T (Y + X)

e† = (T (η + id) e)‡ : X → T Y

(5)

where --‡ is the iteration operator on J(T Y, µ) (by Clause (i), J is then full
and faithful).

If CElg#(C) additionally satisfy a version of the codiagonal identity, the con-
struction from Clause (ii) of Theorem 32 produces precisely complete Elgot
monads.

Theorem 33. Let T be a monad on C, let X # Y = T (X + Y ) and let J : CT →
CElg#(C) be a functor as in Clause (ii) of Theorem 32. Then T is equipped with
the structure of a weak complete Elgot monad given by (5), and moreover T is a
complete Elgot monad iﬀ every (A, a, --‡) in CElg#(C) satisﬁes the equation

(mX

A#X e)‡ = (e‡)‡

(6)

for every e : X → (A # X) # X (this uses the fact that A # X = T (A + X) is a
free T-algebra and hence a complete Elgot #-algebra).

6 Conclusions and Further Work

We introduced the notion of complete Elgot algebra for a parametrized monad,
based on the previous work [4, 26]. We showed that the category of complete

15

Elgot algebras for a parametrized monad # is isomorphic to the category of
Eilenberg-Moore algebras for the monad νγ. -- #γ whenever the latter exists. As
the category of complete Elgot #-algebras is given axiomatically, this can be
considered as a form of soundness and completeness result, speciﬁcally, it indi-
cates that algebras for νγ. -- #γ are subject to a lightweight theory of (uniform)
iteration.

We explored the connection between complete Elgot #-algebras for X # Y =
T (X + Y ) and Eilenberg-Moore algebras of complete Elgot monads, i.e. monads
from [14] supporting a uniform iteration operator satisfying standard axioms of
iteration. Speciﬁcally, we showed that monads T whose algebras are coherently
equipped with the structure of a complete Elgot #-algebra are precisely com-
plete Elgot monads with the codiagonal axiom replaced by its weakened form
(Theorem 32). Moreover, if the category of complete Elgot #-algebras satisﬁes
a variant of the codiagonal law, such monads T are complete Elgot monads
(Theorem 33).

As further work we plan to improve Theorem 33 to obtain an intrinsic char-
acterization of complete Elgot monads in the style of Theorem 32 (i.e. without
assuming extra properties of the complete Elgot algebras). We believe that the
results we obtained are potentially useful for facilitating constructions over com-
plete Elgot monads, in particular we a seeking for a conceptual simpliﬁcation for
the sophisticated proofs underlying the main result of [14] stating that (⋆) is a
complete Elgot monad whenever T is. Also we are interested in applications of
the obtained results to semantics of abstract side-eﬀecting processes in the style
of [15].

References

[1] “Haskell 98 Language and Libraries — The Revised Report,” Cambridge Univer-

sity Press, 2003, also: J. Funct. Prog. 13 (2003).

[2] Aczel, P., J. Ad´amek, S. Milius and J. Velebil, Inﬁnite trees and completely it-
erative theories: a coalgebraic view, Theoretical Computer Science 300 (2003),
pp. 1–45.

[3] Ad´amek, J., R. Borger, S. Milius and J. Velebil, Iterative algebras: How iterative

are they?, Theory Appl. Cat. 19 (2008), pp. 61–92.

[4] Ad´amek, J., S. Milius and J. Velebil, Iterative algebras for a base, Electr. Notes

Theor. Comput. Sci. 122 (2005), pp. 147–170.

[5] Ad´amek, J., S. Milius and J. Velebil, Elgot algebras, Log. Methods Comput. Sci.

2 (2006), p. 31 pp.

[6] Ad´amek, J., S. Milius and J. Velebil, Algebras with parametrized iterativity, The-

oret. Comput. Sci. 388 (2007), pp. 130–151.

[7] Ad´amek, J., S. Milius and J. Velebil, Bases for parametrized iterativity, In-

form. and Comput. 206 (2008), pp. 966–1002.

[8] Ad´amek, J., S. Milius and J. Velebil, Equational properties of iterative monads,

Information and Computation 208 (2010), pp. 1306 – 1348.

[9] Ad´amek, J., S. Milius and J. Velebil, Elgot theories: a new perspective of the equa-
tional properties of iteration, Math. Structures Comput. Sci. 21 (2011), pp. 417–
480.

16

[10] Benton, N. and M. Hyland, Traced premonoidal categories, ITA 37 (2003),

pp. 273–299.

[11] Bloom, S. L. and Z. ´Esik, “Iteration theories: the equational logic of iterative

processes,” Springer-Verlag New York, Inc., New York, NY, USA, 1993.

[12] Elgot, C. C., Monadic computation and iterative algebraic theories*, in: H. Rose
and J. Shepherdson, editors, Logic Colloquium ’73Proceedings of the Logic Collo-
quium, Studies in Logic and the Foundations of Mathematics 80, Elsevier, 1975
pp. 175–230.

[13] Esik, Z. and S. Goncharov, Some remarks on Conway and iteration theories

(2016), arXiv preprint: http://arxiv.org/abs/1603.00838.

[14] Goncharov, S., C. Rauch and L. Schr¨oder, Unguarded recursion on coinductive re-
sumptions, in: Proc. Mathematical Foundations of Programming Semantics XXXI,
MFPS 2015, ENTCS, 2015.

[15] Goncharov, S. and L. Schr¨oder, A coinductive calculus for asynchronous side-

eﬀecting processes, Information and Computation 231 (2013), pp. 204 – 232.

[16] Hasegawa, M., Recursion from cyclic sharing: Traced monoidal categories and
models of cyclic lambda calculi, in: Proc. 3rd International Conference on Typed
Lambda Calculi and Applications, Lecture Notes Comput. Sci. 1210 (1997), pp.
196–213.

[17] Joyal, A., R. Street and D. Verity, Traced monoidal categories, Mathematical

Proceedings of the Cambridge Philosophical Society 119 (1996), pp. 447–468.

[18] Lawvere, W., Functorial semantics of algebraic theories, Proc. Natl. Acad. Sci.

USA 50 (1963), pp. 869–872.

[19] Mac Lane, S., “Categories for the Working Mathematician,” Springer, 1971.
[20] Moggi, E., Notions of computation and monads, Inf. Comput. 93 (1991), pp. 55–

92.

[21] Plotkin, G. and J. Power, Adequacy for algebraic eﬀects, in: FoSSaCS’01, LNCS

2030, 2001, pp. 1–24.

[22] Plotkin, G. and J. Power, Notions of computation determine monads, in: FoS-

SaCS’02, LNCS 2303 (2002), pp. 342–356.

[23] Rutten, J., Universal coalgebra: a theory of systems, Technical report, Amsterdam,

The Netherlands, The Netherlands (1996).

[24] Rutten, J. and D. Turi, Initial algebra and ﬁnal coalgebra semantics for concur-

rency, Springer-Verlag, 1994 pp. 530–582.

[25] Simpson, A. and G. Plotkin, Complete axioms for categorical ﬁxed-point operators,
in: In Proceedings of 15th Annual Symposium on Logic in Computer Science, 2000,
pp. 30–41.

[26] Uustalu, T., Generalizing substitution, ITA 37 (2003), pp. 315–336.

17

A Appendix: Omitted proofs

Proof of Proposition 6 (Beki´c identity)

Let us show that complete Elgot monads validate the Beki´c identity. Let

u = T ((id + inl) + inr) [f, g] : Y + X → T ((Z + (Y + X)) + (Y + X)).

By codiagonal,

(T [id, inr] u)† = (u†)†.

(7)

Now the left-hand side of (7) simpliﬁes to

(T [id, inr] T ((id + inl) + inr) [f, g])†

= (T [id + inl, inr inr] [f, g])†
= (T α [f, g])†,

i.e. to the left-hand side of the Beki´c identity. Now observe that, by uniformity
and naturality,

u† inr = (T (id + inl) + id) g)† = T (id + inl) g†.

(8)

Therefore, the right-hand side of (7) can be rewritten in the form

(u†)† = ([η, u†]⋆ u)†

= ([η (id + inl), u† inr] [f, g])†
= ([T (id + inl) η, T (id + inl) g†]⋆ [f, g])†
= (T (id + inl) [η, g†]⋆ [f, g])†
= (T (id + inl) [[η, g†]⋆ f, g†])†
= ([η inl, η inr inl]⋆ [[η, g†]⋆ f, g†])†
= [η, ([η inl, [[η, g†]⋆ f, g†]]⋆ η inr inl)†]⋆

[[η, g†]⋆ f, g†]

= [η, ([η, g†]⋆ f )†]⋆ [[η, g†]⋆ f, g†]
= [([η, g†]⋆ f )†, [η, ([η, g†]⋆ f )†]⋆ g†]
= [h†, [η, h†]⋆ g†]
= [η, h†]⋆ [η inr, g†],

// ﬁxpoint

// (8)

// ﬁxpoint

// dinaturality

// ﬁxpoint

i.e. equals the right-hand side of the Beki´c identity.

For the opposite direction, we need to show that the Beki´c identity implies
dinaturality and codiagonal. For the latter, let k : X → T ((Y + X) + X). By the
Beki´c identity,

(T α [k, k])† = [η, ([η, k†]⋆ k)†]⋆ [η inr, k†]

18

= [η, (k†)†]⋆ [η inr, k†].

Thus, (T α [k, k])† inl = (T α [k, k])† inr = (k†)†. On the other hand, by unifor-
mity,

(T α [k, k])† = (T [id, inr] k)† [id, id]

and therefore

(k†)† = (T α [k, k])† inr = (T [id, inr] k)†

as required. To prove dinaturality, we deﬁne the term

w = ([T (id + inr) h, T (id + inl) g])†

for g : X → T (Y + Z), h : Z → T (Y + X). By uniformity,

w [inr, inl] = ([T (id + inr) g, T (id + inl) h])†.

The Beki´c identity then gives us

w = ([T (id + inr) h, T (id + inl) g])†

= (T α [T (inl +id) h, T inl g])†
= [η, ([η, (T inl g)†]⋆ T (inl +id) h)†]⋆ [η inr, (T inl g)†]
= [η, ([η inl, g]⋆ h)†]⋆ [η inr, g]

as well as

w [inr, inl] = [η, ([η inl, h]⋆ g)†]⋆ [η inr, h].

Therefore,

([η inl, h]⋆ g)† = w [inr, inl] inl = w inr = [η, ([η inl, g]⋆ h)†]⋆ g.

⊓⊔

Proof of Proposition 12

We deﬁne constructions to convert from #-algebras to T-Σ-bialgebras and vice
versa.

1. Given a #-algebra α : T (A + ΣA) → A, let

a = T A

T inl

−−−−→ T (A + ΣA)

α−−−→ A

f = ΣA

η inr

−−−−→ T (A + ΣA)

α−−−→ A.

We immediately check that a satisﬁes the properties of a T-algebra:

19

a η = α (T inl) η

a µ = α (T inl) µ

= α η inl
= α u

= id

= α µ (T T inl)
= α µ T [id, η inr] (T inl) (T T inl)

= α m (T inl) (T T inl)
= α T (α + id) (T inl) (T T inl)

= α (T inl) (T α) (T T inl)
= a (T a)

2. Conversely, given a bialgebra T A

a−−−→ A

f

←−−− ΣA, form

α = T (A + ΣA)

T [id,f ]

−−−−−−→ T A

a−−−→ A.

The constructed α is a #-algebra:

α u = a T [id, f ] η inl

α m = a T [id, f ]µ T [id, η inr]

= a η
= id

= a µ T T [id, f ] T [id, η inr]
= a T a T T [id, f ] T [id, η inr]

= a T a T [T [id, f ], η f ]
= a T [a T [id, f ], f ]

= a T [id, f ] T [inl a T [id, f ], inr]
= α T (α + id)

Next, we show that the passages (i) and (ii) are mutually inverse.

From bialgebras to #-algebras and back: Given the bialgebra T A

a−−→ A

f

←−−

ΣA, constructing α = a T [id, f ] as in (ii), one obtains back a and f using
(i):

α (T inl) = a T [id, f ] (T inl) = a

α η inr = a T [id, f ] η inr = a η f = f

From #-algebras to bialgebras and back: Given α : T (A + ΣA) → A, we
construct a = α (T inl) and f = α η inr and obtain:

a T [id, f ] = α (T inl) T [id, α η inr]

= α (T inl) T [α u, α η inr]

= α (T inl) T [α η inl, α η inr]
= α (T inl) (T α) (T η)

= α T (α + id) (T inl) (T η)
= α m (T inl) (T η)

20

= α µ T [id, η inr] (T inl) (T η)

= α µ (T η)
= α

⊓⊔

Details for Example 17

We verify the three axioms of complete Elgot #-algebras for A equipped with
the least solution.

solution: this clearly holds because e† is a ﬁxed point of the map s 7→ a (id #
s) e.

uniformity: let e : X → A # X, f : Y → A # Y and h : X → Y such that
f h = (id # h)e holds. In order to show that f †h = e† we show by induction
that for every i we have

i h = e†
f †
i .

The base case is clear: since composition is left strict we have ⊥h = ⊥. For
the induction step we compute:

i+1h = a (id # f †
f †
= a (id # f †
= a (id # f †
= a (id # e†
= e†

i+1.

i ) f h
i ) (id # h) e
i h) e
i ) e

compositionality: let f : Y → A # Y and g : X → Y # X. The desired
equation (f (cid:4) g)† inr = (f † • g)† is established by proving by induction the
following two inequalities for every i:

(f (cid:4) g)†
i

inr ⊑ (f † • g)†

(f † • g)†

i ⊑ (f (cid:4) g)† inr

(9)

(10)

For (9), the base case is clear by left strictness. For the induction step ﬁrst
note that (f (cid:4) g) inl = (id # inl)f , thus (f (cid:4) g)† inl = f † by uniformity. Now we

21

consider the following diagram

X

g

Y # X

f † #id

A # X

inr

m

(A # (Y + X)) # (Y + X)

(id#inl)#inr

⊑

f #id

(A # Y ) # X

(f † •g)†

⊑

Y + X

f (cid:4) g

A # (Y + X)

(f (cid:4) g)

†
i+1

a

id#(f (cid:4) g)

†
i

A # A

m

(id#(f (cid:4) g)

†
i

)#(f (cid:4) g)

†
i

(A # A) # A

(id#f † )#(f † •g)†

a#id

A

a

id#(f † •g)†

A # A

We are to prove the inequality in the upper triangle. We start with the in-
equality in the middle triangle; it holds by the induction hypothesis and
since (f (cid:4) g)†
inl ⊑ (f (cid:4) g)† inl = f †. The other inner parts clearly commute;
i
for the lower square consider the left- and right-hand components of # sep-
arately: the right-hand one commutes trivially, and for the left-hand one use
the solution axiom for f . Since the outside of the diagram also commutes by
the solution axiom, we obtain the desired inequality in the upper triangle.
For (10), the base case is clear once again. For the induction step we consider
the diagram below:

X

g

Y # X

f † #id

A # X

inr

†
(f † •g)
i+1

⊑

Y + X

f (cid:4) g

(f (cid:4) g)†

a

m

(A # (Y + X)) # (Y + X)

(id#inl)#inr

⊑

f #id

(A # Y ) # X

A # (Y + X)

id#(f (cid:4) g)†

A # A

m

(id#(f (cid:4) g)† )#(f (cid:4) g)†

(A # A) # A

†
(id#f † )#(f † •g)
i

a#id

A

a

†
id#(f † •g)
i

A # A

We are to prove the inequality in the upper triangle. We start with the
inequality in the middle triangle; it holds by the induction hypothesis and
since (f (cid:4) g)† inl = f †. The other inner parts commute as in the previous
diagram. Finally, the outside commutes by the deﬁnition of (f † •g)†
i+1. Thus,
⊓⊔
we obtain the inequality in the upper triangle as desired.

Proof of Proposition 18

Let e = (id # inr) [id, uA
A] : (A # A) + A → A # ((A # A) + A). We show that
e† = [a, id], and therefore e† inl = a. To that end we successively calculate e† inr

22

and e† inl:

e† inr = a (id # e†) e inr

// solution

= a (id # e†) (id # inr) uA
A
= a (id # e†) u(A#A)+A
= a uA
A
= id.

id

id

A

e† inl = a (id # e†) e inl

// solution

= a (id # e†) (id # inr)
= a (id # (e† inr))
= a (id # id)

= a.

To ﬁnish the proof, let us show that the following diagram:

A # A

inl

(A # A + A)

e†=[a,id]

f #f

B # B

b

((f

#id

)

e)‡

A

f

B

commutes. The triangle commutes since f is a morphism of #-algebras, and we
are left to show commutativity of the inner quadrangle. Observe that

((f # id) e)‡ inr = b (id # ((f # id) e)‡) (f # id) e inr
= b (id # ((f # id) e)‡) (f # inr) uA
A
= b (f # ((f # id) e)‡) u(A#A)+A
= b uB
= f

B f

A

// solution

from which we conclude the desired identity:

((f # id) e)‡ inl = b (id # ((f # id) e)‡) (f # id) e inl

// solution

= b (id # ((f # id) e)‡) (f # inr)
= b (f # (((f # id) e)‡ inr))
= b (f # f ).

⊓⊔

Proofsketch for Theorem 20

Before we outline the proof of the desired result, we explain an auxiliary con-
struction that produces from a given complete Elgot algebra A and morphism
f : Y → A a new complete Elgot algebra on Y # A.

23

Construction 34 Let (A, α, --†) a complete Elgot #-algebra and let m : Y → A
be a morphism. Then form the following morphism

αf = (cid:16)(Y #A)#(Y #A)

id#(f #id)
−−−−−−→ (Y #A)#(A#A)

id#α−−−→ (Y #A)#A

mA

Y−−→ Y #A(cid:17)

and deﬁne the dagger operation --‡ as follows: given e : X → (Y # A) # X one
forms

e = (X

e−−→ (Y # A) # X

(f #id)#id
−−−−−−→ (A # A) # X

α#id
−−−→ A # X),

i.e. e = (α(f # id)) • e, and then one puts

e‡ = (cid:16)X

e−−→ (Y # A) # X

id#e†
−−−→ (Y # A) # A

mA

Y−−→ Y # A(cid:17).

Lemma 35. The triple (Y # A, αf , --‡) is a complete Elgot #-algebra such that

Y # A

f #id
−−−→ A # A

α−−→ A

is a morphism of complete Elgot algebras.

The proof is a somewhat involved computation adapted from the proof of [5,
Lemma 5.6]. The previous lemma and the following proposition provide a
Lambek-type lemma for complete Elgot #-algebras.

Proposition 36. If (F Y, ϕY , --†) is a free complete Elgot #-algebra on Y with
universal morphism ηY : Y → F Y , then

Y # F Y

ηY #id
−−−−→ F Y # F Y

ϕY−−→ F Y

is an isomorphism.

Proof. By Lemma 35, Y # F Y with algebra structure and --‡ formed as in Con-
struction 34 (for A = F Y , α = ϕY and f = ηY ) is a complete Elgot #-algebra.
By the freeness of F Y , we obtain a unique morphism of complete Elgot #-
algebras t : F Y → Y # F Y such that tηY = uF Y
: Y → Y # F Y . Let us denote
t′ = ϕY (ηY # id). Then it is our task to prove that t and t′ are mutually inverse.
Indeed, we have t′ t = idF Y since both t and t′ are morphisms of complete

Y

Elgot #-algebras and since

t′ t ηY = t′ uF Y

F Y ηY = ηY

Y = ϕY (ηY # id) uF Y

Y = ϕY uF Y

using naturality of u and the unit law of the #-algebra structure ϕY . The freeness
of F Y now yields the desired equation.

24

In order to prove t t′ = idY #F Y notice ﬁrst that t is a morphism of #-algebras

by Proposition 18. Now consider the diagram below:

Y # F Y

ηY #id

id#t

uF Y

Y #id

Y # (Y # F Y )

F Y # F Y

t#t

(Y # F Y ) # (Y # F Y )

id#(ηY #id)

id#(ηY #id)

t′

(Y # F Y ) # (F Y # F Y )

Y # (F Y # F Y )

id#t′

uF Y

F Y #id

ϕY

id#ϕY

F Y

t

(Y # F Y ) # F Y

id#ϕY

mF Y

Y

Y # F Y

t

uF Y

Y #id

id

Y # F Y

All its inner parts commute: the left- and right-hand parts commute by the
deﬁnition of t′, the big lower left-hand part commutes since t is a #-algebra
morphism, the upper part commutes using that t ηY = uF Y
Y , the lower right-
hand triangle commutes by the monad laws for -- #F Y and the remaining three
parts are obvious. Thus, the outside commutes, and since t′ t = id we conclude
that t t′ = id, which completes the proof.

Let us henceforth denote for a given free complete Elgot #-algebra on Y

t = (ϕY (ηY # id))−1 : F Y → Y # F Y.

Corollary 37. The following square commutes:

F Y # F Y

t#id

(Y # F Y ) # F Y

ϕY

mF Y

Y

F Y

t

Y # F Y

Proof. Use that t is a morphism of #-algebras, i.e. consider the big lower left-
hand part of the diagram in the proof of Proposition 36. Then use that ϕY (ηY #
id) t = id implies that

(id # ϕY ) (id # (ηY # id)) (t # t) = t # id

to obtain the commutativity of the desired square.

We are now ready to prove item 2. of Theorem 20. So suppose that (F Y, ϕY , --†)
is a free complete Elgot #-algebra on Y with universal morphism ηY : Y → F Y .

25

By Lemma 35, we know that ϕY (ηY # id) : Y # F Y → F Y is an isomorphism
with inverse t : F Y → Y # F Y . One then proves that (F Y, t) is a ﬁnal coalgebra
for Y # --.

Indeed, given any coalgebra c : X → Y #X one forms the equation morphism

e = (X

c−−→ Y # X

ηY #id
−−−−→ F Y # X).

Then it is easy to see that e† : X → F Y is a coalgebra homomorphism from
(X, c) to (F Y, t); in fact, consider the diagram below:

X

c

e†

e

F Y

ϕY

F Y # X

F Y #e†

F Y # F Y

t

ηY #id

Y # X

id#e†

ηY #id

Y # F Y

All its inner parts commute: the upper part commutes since e† is a solution of e,
the left-hand triangle commutes by the deﬁnition of e, the lower part commutes
trivially, and for the right-hand part use that t is the inverse of ϕY (ηY # id). It
remains to prove that uniqueness of a coalgebra homomorphism from (X, c) to
(F Y, t). This proof can be performed analogously to the proof of part (2) ⇒ (1)
⊓⊔
of [5, Theorem 5.4].

Proof of Proposition 22

Recall ﬁrst from Theorem 20 that F Y is (equivalently) a ﬁnal (Y # --)-coalgebra
with the structure t : F Y → Y # F Y obtained as an inverse of

Y # F Y

ηY #F Y
−−−−−→ F Y # F Y

ϕY−−→ F Y.

Let e : X → F Y # X and consider the following (Y # --)-coalgebra

e = (F Y # X

t#e

(Y # F Y ) # (F Y # X)

(Y #uX

F Y )#(F Y #Y )

(Y # (F Y # X)) # (F Y # X)

mF Y #X

Y

Y # (F Y # X)).

Now let d : X → F Y be any solution of e, i.e. we have d = ϕY (F Y # d)e. We will
prove below that ϕY (F Y # d) : F Y # X → F Y is a coalgebra homomorphism
from e to t. Since e does not depend on the solution d we then conclude that

e† = ϕY (F Y # e†)e = ϕY (F Y # d)e = d

using ﬁnality of F Y in the middle step.

26

To ﬁnish the proof consider the following diagram:

F Y # X

id#d

t#e

F Y # F Y

t#id

(Y # F Y ) # F Y

id#ϕY

ϕY

mF Y

Y

(Y # F Y ) # (F Y # X)

id#(id#d)

(Y # F Y ) # (F Y # F Y )

(Y #ϕY )#ϕY

F Y

t

(id#uX

F Y )#id

(Y # (F Y # X)) # (F Y # X)

mF Y #X

Y

Y # (F Y # X)

(id#uF Y

F Y )#id

(id#(id#d))#(id#d)

(Y # (F Y # F Y )) # (F Y # F Y )

mF Y #F Y

Y

id#(id#d)

Y # (F Y # F Y )

id#ϕY

Y # F Y

Note ﬁrst that the left-hand edge is e. The upper left-hand square commutes
since d is a solution of e, for the part below it use that (F Y # d)uX
F Y = uF Y
F Y
holds since F Y #d is a monad morphism, and the lower left-hand part commutes
by the laws of #. The upper right-hand part commutes by Corollary 37, and the
remaining little inner triangle commutes since ϕY uF Y
F Y = idF Y since ϕY is the
structure of a #-algebra. Hence ϕY (F Y # d) is a coalgebra homomorphisms as
⊓⊔
desired, which completes the proof.

Proof of Lemma 24

To show the claim, form the following coalgebra for A # --:

e

X

B # X

f #X

(A # ̥#A) # X

(A#inl)#inr

(A # (̥#A + X)) # (̥#A + X)

m

̥# A+X
A

A # (̥#A + X)

By Proposition 23 we obtain a unique h : X → ̥#A such that the diagram below
commutes:

m

̥# A+X
A

(((id#inl) f )#inr) e

out

X

h

̥#A

A # (̥#A + X)

id#[id,h]

A # ̥#A.

Now use that id # [id, h] is a monad morphism to see that, equivalently, h is
⊓⊔
unique such that (1) commutes.

27

Proof of Lemma 25

Let g = (out-1 f )⋆ = coit(((out-1 f ) # id) out, out). Then we have

e

out

X

coit(e)

̥#B

g

̥#A

B # X

id#coit(e)

B # ̥#B

out

(out-1 f )#id

̥#A # ̥#A

m

̥# A
A (out #g)

A # ̥#A

and the uppermost path from X to A # ̥#A amounts to m̥#A
A (f # (g coit(e))).
Therefore, g coit(e) satisﬁes the equation uniquely determining coit(e, f ), imply-
⊓⊔
ing the result.

Proof of Lemma 26

Notice that diagram (1) implies trivially that

coit(e, f ) = coit((f # id) e, id).

Thus we get

(̥#g) coit(e)
(ην g)⋆ coit(e)

= (out-1 out ην g)⋆ coit(e)
= coit(e, out ην g)
= coit(e, u g)

= coit((g # id) e, u)

= coit((g # id) e).

// Lemma 25

// deﬁnition of coit(--, --)
⊓⊔

// corollary to Lemma 25

Let introduce the following useful morphism:

ext = out-1 (id # ην) : X # X → ̥#X

natural in X.

Proof of Theorem 27

The proof is organized as follows. First we construct for each ̥#-algebra a com-
plete Elgot #-algebra and vice versa. Then we extend these constructions to
functors and prove that these functors witness an isomorphism of categories.

Given an algebra χ : ̥#A → A, i.e.

A

ην

id

̥#A

χ

A

̥#̥#A

̥#χ

̥#A

µν

̥#A

χ

χ

A

28

we deﬁne a #-algebra a : A # A → A as follows:

A # A

ext

−−−−→ ̥#A

χ

−−−→ A

It is easy to see that a is an algebra for the monad -- #A. For any e : X → A # X,
let e† : X → A be given by χ (coit e).

We now need to check if the so-deﬁned iteration operator satisﬁes the axioms

of complete Elgot algebras.

Solution. To see that this holds, consider the following diagram, the outside

of which constitutes the required property:

X

coit e

e†

̥#A

χ

A

e

out

out-1

a

A # X

id#coit e

A # ̥#A

id#e†

id#χ

A # A

The top square obviously commutes as a ﬁnality diagram. For the lower square,
we calculate

χ out-1

= χ µν ην out-1
= χ µν out-1 (ην # ην )
= χ ̥#χ out-1 (ην
# ην)
= χ out-1 (χ # ̥#χ) (ην
= χ out-1 (id # ην χ)
= χ out-1 (id # ην ) (id # χ)
= a (id # χ).

# ην)

Functoriality. This is a simple consequence of the deﬁnition of the dagger

operation in terms of coit. Suppose that f h = (id # h) e. Then

out (coit f ) h

= (id # (coit f )) f h

= (id # (coit f )) (id # h) e

= (id # ((coit f ) h)) e,

i.e. (coit f ) h satisﬁes the identity uniquely characterizing coit e. Therefore
(coit f ) h = coit(e) and hence f † h = χ (coit f ) h = χ (coit e) = e†.

Compositionality. We have on the one hand

(f † • g)† = χ coit(f † • g)

29

= χ coit ((χ (coit f ) # id) g)

= χ coit ((χ # id) ((coit f ) # id) g)
= χ (̥#χ) coit(((coit f ) # id) g)
= χ µν coit(((coit f ) # id) g)
= χ coit(((coit f ) # id) g, out),

// Lemma 26

// χ is an ̥#-algebra
// Lemma 25

and on the other hand,

(f (cid:4) g)† inr = χ coit(f (cid:4) g) inr

= χ coit(mY +X

A

(((id # inl) f ) # inr) [uX

Y , g]) inr .

Now, let h = mY +X
Y , g]. We are ﬁnished once we proved
that coit(h) inr satisﬁes the identity characterizing coit((coit(f )#id) g, out). First
observe that the following:

(((id # inl) f ) # inr) [uX

A

out (coit h) inl

= (id # coit h) h inl
= (id # coit h) mY +X
(((id # inl) f ) # inr) uX
Y
uY +X
= (id # coit h) mY +X
A
= (id # coit h) (id # inl) f

(id # inl) f

A

A

= (id # ((coit h) inl)) f,

i.e. (coit h) inl satisﬁes the identity chracterizing coit(f ) and therefore

(coit h) inl = coit f

(11)

Then we proceed as follows:

(((id # inl) f ) # inr) [uX

Y , g]) inr

(((id # inl) f ) # inr) g

A

A

out (coit h) inr
= out coit(mY +X
= (id # coit h) mY +X
= m̥#A
= m̥#A
= m̥#A
= m̥#A

A (((id # ((coit h) inl)) f ) # ((coit h) inr)) g.
A (((id # coit f ) f ) # ((coit h) inr)) g
A ((out (coit f )) # ((coit h) inr)) g
A (out #((coit h) inr)) (coit f # id) g

// (11)

which, as indicated above, implies that (coit h) inr = coit((coit f # id) g, out).

We proceed with the converse construction: Given a complete Elgot #-algebra
a : A # A → A, we build a ̥#-algebra by iterating the structure of the ﬁnal
coalgebra out : ̥#A → ̥#A # A:

̥#A

out†

−−−−−→ A

30

To show that out† is an ̥#-algebra, we check the following.

Compatibility with unit. Since out ην = u̥#A

A = (A # ην) uA

A, by the

functoriality axiom,

out† ην = (uA

A)†.

Using the solution axiom, we obtain, since a is an (-- #A)-algebra,

out† ην = (uA

A)† = a (id # (uA

A)†) uA

A = a uA

A = id.

Compatibility with multiplication. We need to show that out† ̥#(out†) = out† µν .
Note that the type of morphisms on the left and on the right hand sides is
̥#̥#A → A. We show that both morphisms are equal to (out† • out)† having
the same type, which is itself by compositionality equal to (out (cid:4) out)† inr.

For the left-hand side of the original equation we obtain this by functoriality:

out ̥#(out†) = (id # (̥#out†)) (out† #id) out

= (id # (̥#out†)) (out† • out)

and therefore

out† ̥#(out†) = (out† • out)†.

As for the right-hand side, consider the following diagram:

̥#A + ̥#̥#A

out (cid:4) out

A # (̥#A + ̥#̥#A)

[id,µν ]

̥#A

id#[id,µν ]

(12)

out

A # ̥#A

Let us verify that this diagram commutes by case distinction (we drop the indices
at m and u for readability). On the one hand, out [id, µν] inl = out and also

(id # [id, µν]) (out (cid:4) out) inl

= (id # [id, µν]) m (((id # inl) out) # inr) u
= (id # [id, µν]) m u (id # inl) out
= (id # [id, µν]) (id # inl) out
= out;

// deﬁnition of (cid:4)

analogously, on the other hand,

out [id,µν] inr
= out µν
= m (out #µν ) out

and

(id # [id,µν]) (out (cid:4) out) inr

31

= (id # [id, µν]) m (((id # inl) out) # inr) out
= m ((id # [id, µν]) # [id, µν]) (((id # inl) out) # inr) out
= m ((id # [id, µν] inl) out #[id, µν] inr) out
= m (out #µν ) out .

From (12), by functoriality, we obtan

and thus

out† [id, µν ] = (out (cid:4) out)†

out† µν = (out (cid:4) out)† inr .

Let us now complete the constructed correspondence between |C̥#| and
|CElg#(C)| to an equivalence of categories. Let F : C̥# → CElg#(C) be
deﬁned as follows: F assigns to an ̥#-algebra (A, χ) the complete Elgot algebra
(A, χ ext, --†) with the iteration as presented above, and to an ̥#-algebra homo-
morphism f : (A, χ) → (B, ζ) the underlying morphism from A to B. Let us
check that this deﬁnition is correct, i.e. the above f is a complete Elgot #-al-
gebra morphism from F (A, χ) = (A, a, --†) to F (B, ζ) = (B, b, --‡), i.e. for any
e : X → A # X:

f e† = f χ (coit e)

= ζ (̥#f ) (coit e)

= ζ coit ((f # id) e)
= ((f # id) e)‡
= (f • e)‡.

// deﬁnition of --†
// f is a ̥#-algebra morphism

// Lemma 26

For the converse direction, let G : CElg#(C) → C̥# send a complete Elgot
#-algebra (A, a, †) to (A, out†), which we proved to be an ̥#-algebra. Given a
morphism f : (A, a, †) → (B, b, ‡), let Gf = f and let us show that f is indeed
an ̥#-algebra morphism from (A, out†) to (B, out‡). By functoriality,

out (̥#f ) = (id # ̥#f ) (f # id) out

implies

out‡ (̥#f ) = ((f # id) out)‡ = (f • out)‡.

But, by deﬁnition of complete Elgot #-algebra morphisms,

(f • out)‡ = f out†,

so the functor G is well-deﬁned.

To ﬁnish the proof, we need to show that both GF and F G are identities.
Since both functors act as the identity on morphisms, we only need to verify this
on objects. On the one hand,

(GF )(A, χ) = G(A, χ ext, --†) = (A, out†) = (A, χ),

32

for out† is deﬁned as χ coit(out) and coit(out) is the identity. Similarly,

(F G)(A, a, --†) = F (A, out†) = (A, out† ext, --‡) = (A, a, --†),

since, by functoriality applied to out coit(e) = (id # coit(e)) e,

e‡ = out† coit(e) = e†,

whatever e : X → A # X is, and moreover

out† ext = a (id # out†) out ext

= a (id # out†) (id # ην)

= a.

// solution

// deﬁnition of ext
// out† is an ̥#-algebra

⊓⊔

Proof of Proposition 31

In this proof all morphisms and compositions are in the Kleisli category of the
complete Elgot monad T, and we denote identity morphisms by their (co)domain.
Note that the codiagonal law can, equivalently, be written as

((Y + ∇)e)† = e††

for any e : X → Y + X + X, where ∇ = [inl, inr] is the codiagonal (hence the
name of the law).

Let g : X → Y + X and f : Y → Z + Y and form the following morphism

w = (Y + X

[inl,g]
−−−→ Y + X

f +X
−−−→ Z + Y + X

Z+inl + inr
−−−−−−→ Z + (Y + X) + (Y + X)).

Now observe that the left-hand morphism of (4) is ((Z + ∇)w)† inr. By the
codiagonal law we have

((Z + ∇)w)† inr = w†† inr .

So it remains to prove that w†† inr = f †g†. Clearly, we have

w = ((Z + inl)f + (Y + X))(Y + inr)[inl, g].

Since ((Y + inr)[inl, g]) inr = (Y + inr)g we obtain by functoriality that

((Y + inr)[inl, g])† inr = g†.

(13)

(14)

Now we compute

w† = (Z + inl)f ((Y + inr)[inl, g])†

// (13) and naturality

= (Z + inl)f [Y, ((Y + inr)[inl, g])†](Y + inr)[inl, g]

// ﬁxpoint

33

= (Z + inl)f [Y, ((Y + inr)[inl, g])† inr][inl, g]
= (Z + inl)f [Y, g†][inl, g]
= (Z + inl)f [[Y, g†] inl, [Y, g†]g]
= (Z + inl)f [Y, g†]

// (14)

// ﬁxpoint

Now observe that (Z + inl)f [Y, g†] inl = (Z + inl)f so that functoriality gives us

((Z + inl)f [Y, g†])† inl = f †.

(15)

Finally, we compute

w†† inr = ((Z + inl)f [Y, g†])† inr

= [Z, ((Z + inl)f [Y, g†])†](Z + inl)f [Y, g†] inr
= [Z, ((Z + inl)f [Y, g†])† inl]f g†
= [Z, f †]f g†
= f †g†

// ﬁxpoint

// (15)

// ﬁxpoint

This completes the proof.

Proof of Theorem 32

⊓⊔

First note that (4) can, equivalently, be rewritten as

([(η ⊕ inl)f, inr inr] ⋄ [inl, g])† inr = f † ⋄ g†

(16)

where g : X ⋄−→Y + X, f : Y ⋄−→Z + Y .

(i) Let us prove the ﬁrst clause. By Corollary 13, CT is isomorphic to the
category of all those #-algebras whose structure factor through T ∇, speciﬁcally,
every T-algebra (A, a : T A → A) gives rise to a #-algebra (A, a (T ∇) : T (A +
A) → A). In the case at hand, we equip every such (A, a (T ∇) : T (A + A) → A)
with an iteration --‡ operator sending any e : X → T (A + X) to e‡ = a e† : X →
A.

Let us check the axioms of complete Elgot #-algebras.

Solution. This follows easily from the ﬁxpoint property of the dagger of the

complete Elgot monad T:

e‡ = a e†

= a [η, e†]⋆ e
= a µ T [η, e†] e
= a (T a) T [η, e†] e
= a T [id, e‡] e
= a (T ∇) T (id + e†) e
= a (T ∇)(id # e†) e.

34

Functoriality is a trivial application of uniformity:

implies

f h = (id # h) e = T (id + h) e

f ‡ h = a f † h = a e† = e‡.

Compositionality. Since X # Y = T (X + Y ), we have

f (cid:4) g = [T (id + inl) f, η inr inr]⋆ [η inl, g] : Y + X −→ T (A + (Y + X)).

Hence, by (16),

(f (cid:4) g)† inr = f † ⋄ g†.

Composing with a : T A → A we obtain

(f (cid:4) g)‡ inr = a (f † ⋄ g†).

Let us further rewrite the right hand side.

a (f † ⋄ g†) = a µ T (f †)g†

= a (T a) T (f †)g†
= a T (a f †)g†
= a (T (a f † + id) g)†
= ((f ‡
= (f ‡ • g)‡.

# id) g)‡

// naturality

Next, let us show that any T-algebra morphism h : A → B from (A, a) to (B, b)
gives rise to a complete Elgot #-algebra morphism between the corresponding
#-algebras, i.e. for every f : X → A # X we have

Indeed,

h f ‡ = ((h # id) f )‡.

h f ‡ = h a f †

= b (T h) f †
= b (T (h + id) f )†
= ((h # id) f )‡.

// naturality

We have constructed a functor from CT to CElg#(C). This functor is full and
faithful because the underlying functor from CT into the category of #-algebras
is full and faithful by Corollary 13 and any morphism of complete #-algebras is
a morphism of #-algebras by Proposition 18.

Finally,

let us check that any complete Elgot #-algebra of the form
(A, a (T ∇), --‡) satisfying e‡ = a (T ∇) (T inl) e† for every e : X → T (A + X),

35

is an image of a T-algebra, speciﬁcally of (A, a). We only have to verify that
(A, a) is indeed a T-algebra. This is however straightforwards from the axioms
of #-algebras and the deﬁnitions uY

X = η inl and mY

X = [id, η inr]⋆.

(ii) We now proceed with the second clause. To that end we have to verify

the axioms of weak complete Elgot monads.

Fixpoint. Given f : X → T (Y + X),

f † = (T (η + id) f )‡

= µ (T ∇) T (id + f †) T (η + id) f
= [η, f †]⋆ f.

// solution

Naturality. Let f : X → T (Y + X) and let g : Y → T Z. We consider two
special cases g = id : T Y → T Y and g = η h, where h : Y → Z, i.e. we will prove

(η h)⋆ f † = ([η inl h, η inr]⋆f )†
id⋆ f † = ([T inl, η inr]⋆f )†,

(17)

(18)

which jointly imply the general case as follows:

g ⋄ f † = g⋆ f †

= µ (T g) f †
= µ (η g)⋆ f †
= µ ([η inl g, η inr]⋆f )†
= id⋆ ([η inl g, η inr]⋆f )†
= ([T inl, η inr]⋆ [η inl g, η inr]⋆f )†
= ([(T inl) g, η inr]⋆ f )†
= ((g ⊕ η) ⋄ f )†.

// (17)

// (18)

The proof of (17) is based on the fact that T h : T Y → T Z is a morphism of
T-algebras from (T Y, µ) to (T Z, µ) and hence, by assumption, h is a morphism
of #-algebras from J(T Y, µ) to J(T Z, µ):

(ηh) ⋄ f † = (η h)⋆ f †

= (T h) (T (η + id) f )‡
= (T (T h + id) T (η + id) f )‡
= (T (η h + id) f )‡
= (T (η + id) [η inl h, η inr]⋆f )‡
= ([η inl (ηh), η inr]⋆f )†
= ((ηh) ⊕ η) ⋄ f )†.

36

Now we prove (18). In this case we have f : X → T (T Y + X). We apply
compotitionality to f and T (inl η) : T Y → T (T Y + T Y ) to obtain

(T (inl η) (cid:4) f )‡ inr = ((T (inl η))‡ • f )‡.

(19)

First of all, note that

(T (inl η))‡ = [id, η inr]⋆ T (id + (T (inl η))‡) T (inl η)

// ﬁxpoint

= [id, η inr (T (inl η))‡]⋆ T (inl η)
= η⋆
= id.

Using the fact that id⋆ = µ is a morphism of complete Elgot #-algebras, we
obtain the left hand side of (18) from the left-hand side of (19)

((T (inl η))‡ • f )‡ = (T ((T (inl η))‡ + id) f )‡

= f ‡
= (T (µ + id) T (η + id)) f ‡
= µ (T (η + id) f )‡
= id⋆ f †.

In order to prove that we obtain the right-hand side of (18) from the right-hand
side of (19), let us denote T (inl η) (cid:4) f : T Y + X → T (T Y + (T Y + X)) by t.
Then, by deﬁnition,

t = mT Y +X

T Y

(((id # inl) T (inl η)) # inr) [uX

T Y , f ]

= µ T [id, η inr] T (T (id + inl) T (inl η)

+ inr)[η inl, f ]

|

}

T (inl η)

{z

= µ T [T (inl η), η inr inr] [η inl, f ]
= [T (inl η), η inr inr]⋆ [η inl, f ]
= [T (inl η), [T (inl η), η inr inr]⋆ f ].

Observe that we have

t inr = [T (inl η), η inr inr]⋆ f

= T (id + inr) [T (inl η), η inr]⋆f
= (id # inr) [T (inl η), η inr]⋆ f.

Therefore, using uniformity we obtain

t‡ inr = ([T (inl η), η inr]⋆ f )‡

= (T (η + id) [T inl, η inr]⋆ f )‡
= ([T inl, η inr]⋆ f )†,

which is the right hand side of (18).

37

Uniformity. Suppose, f : X → T (Y + X), g : Z → T (Y + Z), h : Z → X
and f h = T (id + h) g. The latter implies T (η + id) f h = T (η + id) T (id + h) g =
T (id + h) T (η + id) g and hence we can apply functoriality of --‡:

f † h = (T (η + id) f )‡ h

= (T (η + id) g)‡
= g†

// functoriality

as required.

Finally, let us check (16). We start with the following instance of composition-
ality:

([T (η + inl) f, η inr inr]⋆ [η inl, g])‡ inr = ((T (η + id)f (cid:4) g)‡ = (T ((T (η + id)f )‡ + id)) g)‡

where we used the assumption that J(T Z, µ) is a complete Elgot #-algebra.
Now,

([T (η + inl) f, η inr inr]⋆ [η inl, g])‡ inr

= (T (η + id) [T (id + inl) f, η inr inr]⋆ [η inl, g])‡ inr
= ([T (id + inl) f, η inr inr]⋆ [η inl, g])† inr
= ([(η ⊕ inl)f, inr inr] ⋄ [inl, g])† inr

(T ((T (η + id) f )‡ + id)) g)‡

= (T (f † + id) g)‡
= (T (µ + id) T ((ηT ) + id) T (f † + id) g)‡
= µ (T ((ηT ) + id) T (f † + id) g)‡
= µ ( T (f † + id) g)†
= µ (T f †) g†
= f † ⋄ g†

// µ is a morphism in CElg#(C)

// naturality of --†

which in summary yields (16).

⊓⊔

Proof of Theorem 33

Suppose that T is a complete Elgot monad and let us show (6). Note the identity

f ‡ = a f †,

(20)

which holds for every f : X → A # X and every T-algebra (A, a) because a :
T A → A is a morphism of T-algebras from (T A, µ) to (A, a), hence a morphism
of complete Elgot #-algebras from J(T A, µ) to J(A, a) and therefore we have

f ‡ = ((a # id) (η # id) f )‡ = a ((η # id) f )‡ = a f †.

38

Now, (6) is obtained as follows: for any e : X → (A # X) # X = T (T (A + X) + X
we have

(mX

A#X e)‡ = ([id, η inr]⋆ e)‡

= (T (a + id) [T (η + id), η inr]⋆ e)‡
= a ([T (η + id), η inr]⋆ e)‡
= a (T (η + id) [id, η inr]⋆ e)‡
= a ([id, η inr]⋆ e)†
= a (T [id, inr] [T inl, η inr]⋆ e)†
= a (([T inl, η inr]⋆ e)†)†
= a (((id ⊕ η) ⋄ e)†)†
= a (id⋆ e†)†
= a (µ e†)†
= (e‡)‡.

// a preserves --‡

// (5)

// codiagonal

// naturality

// (20)

Conversely, we assume (6) and prove that T is a complete Elgot monad. By
Theorem 32, we only need to verify the codiagonal identity. Let f : X → T ((Y +
X) + X) and let us take

e = T (η (η + id) + id) f : X → T (T (T Y + X) + X) = (T Y # X) # X

in (6). Then we obtain the codiagonal identity for f as follows:

(T [id, inr] f )† = (T (η + id) T [id, inr] f )‡

= (T [η + id, inr] f )‡
= ([η (η + id), η inr]⋆ f )‡
= ([id, η inr]⋆ T (η (η + id) + id) f )‡
= ((T (η (η + id) + id) f )‡)‡
= ((T (η + id) T ((η + id) + id) f )‡)‡
= ((T ((η + id) + id) f )†)‡
= (T (η + id) f †)‡
= (f †)†.

This completes the proof.

// (6)

// naturality

⊓⊔

39

