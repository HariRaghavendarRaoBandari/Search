Temporal Opinion Spam Detection by Multivariate Indicative Signals

Junting Ye

Leman Akoglu

Santhosh Kumar

Stony Brook University

Department of Computer Science

{juyye,smanavasilak,leman}@cs.stonybrook.edu

6
1
0
2

 
r
a

M
7

 

 
 
]
I
S
.
s
c
[
 
 

1
v
9
2
9
1
0

.

3
0
6
1
:
v
i
X
r
a

Abstract

Online consumer reviews reﬂect the testimonials of real peo-
ple, unlike advertisements. As such, they have critical impact
on potential consumers, and indirectly on businesses. Ac-
cording to a Harvard study (Luca 2011), +1 rise in star-rating
increases revenue by 5–9%. Problematically, such ﬁnancial
incentives have created a market for spammers to fabricate
reviews, to unjustly promote or demote businesses, activities
known as opinion spam (Jindal and Liu 2008). A vast major-
ity of existing work on this problem have formulations based
on static review data, with respective techniques operating in
an ofﬂine fashion. Spam campaigns, however, are intended to
make most impact during their course. Abnormal events trig-
gered by spammers’ activities could be masked in the load
of future events, which static analysis would fail to identify.
In this work, we approach the opinion spam problem with a
temporal formulation. Speciﬁcally, we monitor a list of care-
fully selected indicative signals of opinion spam over time
and design efﬁcient techniques to both detect and character-
ize abnormal events in real-time. Experiments on datasets
from two different review sites show that our approach is fast,
effective, and practical to be deployed in real-world systems.

Introduction

Online product reviews play important role for e-commerce.
New customers tend to prefer products with higher ratings as
previous buyers have “testiﬁed” that the products are good
choices. On the contrary, new customers may have less in-
terest for products with lower ratings since more dissatis-
faction from experienced users have been reported. Driven
by such commercial beneﬁts, spam or fake reviews have be-
come a prevalent problem, for which effective detection al-
gorithms are greatly needed (Jindal and Liu 2008).

In the past years, several existing works employed super-
vised techniques by extracting features based on review text,
ratings, product meta-data such as category and price, re-
view feedback such as number of helpful votes, etc. (Jin-
dal and Liu 2008; Ott et al. 2011; Feng, Banerjee, and
Choi 2012; Mukherjee et al. 2013a). These methods have a
key challenge as ground truth is extremely hard to obtain—
human annotators can hardly tell the difference between the
genuine and fake reviews (Ott et al. 2011).
Copyright c(cid:13) 2016, Association for the Advancement of Artiﬁcial
Intelligence (www.aaai.org). All rights reserved.

Unsupervised approaches have also been explored for the
opinion spam problem. In a nutshell, these can be catego-
rized as approaches that leverage linguistic (Ott et al. 2011;
Feng, Banerjee, and Choi 2012), relational (Wang et al.
2011; Akoglu, Chandy, and Faloutsos 2013; Li et al. 2014;
Ye and Akoglu 2015), and most often, behavioral clues (Jin-
dal, Liu, and Lim 2010; Feng et al. 2012; Mukherjee, Liu,
and Glance 2012; Lim et al. 2010; Mukherjee et al. 2013a;
Xie et al. 2012).
In their investigation, (Mukherjee et al.
2013b) found that Yelp’s fake review ﬁlter might be relying
more on behavioral rather than text-based clues. Most re-
cently, (Rayana and Akoglu 2015) proposed a unifying ap-
proach that harnesses all of these information sources, which
outperforms any individual one alone, especially when pro-
vided with a few labeled instances.

As one can see, previous work has focused on aspects
such as availability of labels or the lack thereof, or the
type of information to consume (linguistic, relational, be-
havioral). Orthogonal to these aspects, in this work we
bring emphasis on the aspect of time. Surprisingly, we re-
alize that the vast majority of past work has formulated the
opinion spam problem on static review data, and developed
techniques that operate in an ofﬂine fashion. A few works,
such as those by (Fei et al. 2013) and (Li et al. 2015), de-
signed and used temporal features along with static ones.
Nevertheless, their approaches are effectively ofﬂine where
the entire review data is assumed to be available at analy-
sis time. Recently, (Xie et al. 2012) proposed an approach
that tracks three temporal features—average rating, number
of reviews, and ratio of singleton reviewers—over time, and
pinpoints time windows in which all three change simulta-
neously. Their approach is speciﬁcally crafted for catching
singletons, i.e., spam reviewers with only a single review,
that earlier methods mainly failed to effectively identify.

In this work, we consider opinion spam as a temporal
phenomenon. Our intuition is that the spammers’ activities
trigger abrupt changes and unusual events in the underly-
ing generating process at the time of their operations. Such
changes may later be reverted, or the impact of such events
may be lost in the abundance of future events. As such, we
argue that a temporal, real-time approach would not only be
more effective but also more realistic, as review data is tem-
poral in nature. In the following we provide an overview of
our proposed methodology, and the list of contributions.

Overview
To promote or demote products, spammers need to domi-
nate the sentiments among a given product’s reviews, which
requires considerable amount of reviews. Such intensive be-
haviors result in abnormal bursts of various suspicious activ-
ities over the timeline of the product. In this work, our goal
is twofold: we aim to both detect and characterize those ab-
normal bursts of activities.

In a nutshell, we ﬁrst identify a number of signals associ-
ated with suspicious reviewing behavior. For each product
(or business), these signals are tracked over time in an online
fashion. Through efﬁcient time series modeling, we detect
anomalous time points among all the signals. Finally, we
leverage the speciﬁc anomalous signals for characterization,
i.e., inspection and sensemaking. We outline the main steps
of our approach as follows:
1. Temporal signal extraction: We deﬁne a list of measures,
called indicative signals, that provide potential evidence
toward opinion spam. These measures are computed for
each product over time as new reviews arrive. As such,
each product is represented by multiple time series.

2. Anomaly detection in lead (target) signal: We designate
one of the signals as the lead. Anomalous changes in the
lead signal suggest potential spamming activity.

3. Anomaly detection in supporting signals: Anomalies in
the lead signal provide the necessary conditions for opin-
ion spam; but not necessarily sufﬁcient. For endorsement,
we perform anomaly detection on the remaining signals in
an efﬁcient way, by focusing on time periods around the
anomalous points (“alarms”) detected in the lead.

4. Characterization: Our method spots anomalous time
points across all signals for each product. We use a func-
tion of the number and magnitude of the anomalies to rank
the products. At any given time, products are investigated
in their ranked order. The speciﬁc detected time points
and support signals guide the manual inspection.

Contributions
• Problem formulation: We propose a new temporal ap-
proach to the opinion spam problem, that monitors a care-
fully selected list of indicative signals. Anomalies across
various signals suggest and corroborate evidence. As
shown in the experiments, our approach is (i) descriptive;
it facilitates inspection and sensemaking, and (ii) general;
it can identify different kinds of spam campaigns.
• A new methodology: We develop an online and efﬁcient
algorithm for opinion spam. We mainly monitor the lead
signal and detect anomalies in real-time. Only when an
“alarm” is raised in the lead, a local algorithm then per-
forms anomaly detection in the support signals by consid-
ering a small window around the anomaly (hence local).
• Practicality: The proposed approach is usable in prac-
tice, as it provides capabilities for online monitoring, au-
tomatic detection, and interpretability for the analysts.
Speciﬁcally, detected time points narrow down where to
look, and the indiciative signals suggest what to look at.
We demonstrate the practicality of our approach through
case studies in two review datasets, for apps in an online
marketplace and for products in Flipkart (cf. Figure 1).

Figure 1: Time series for 9 indicative signals for a software prod-
uct (app) (green curves: signal values, red curves: anomaly score,
blue bars: anomalous time points). Our method detects 4 weeks of
attacks that increase the average rating of a product with generally
declining rating. Results discussed further in experiments.
Reproducability: Open source code of our method is avail-
able at: http://www3.cs.stonybrook.edu/˜juyye/
code/ICWSM16_Code.zip.

Indicative Signals of Opinion Spam

We consider the review data of a product p as a stream of re-
view units ordered in time, Dp = {u1, u2, ..., ui, ...}. Each
unit consists of user ID, timestamp, review text or content,
and rating; i.e, ui = (U IDi, ti, ci, ri), where ti ≤ tj if
i < j. Timestamps are divided into ﬁxed-length time win-
dows (∆T ) where the values of each time series are com-
puted based on data from these intervals.

We identify eight types of indicative signals, and extract
their time series for each product p. A list of these signals
are given in Table 1 which we describe as follows.
1. Average Rating:

If the average rating of a product p
changes signiﬁcantly, it might have been tempered with
by spammers. This time series tracks the evolution of cu-
p = {uk|tk ∈ [0, t ∗ ∆T )}
mulative average rating. Let ¯U t
m(cid:88)
denote the set of p’s reviews until the end of time window
t, where | ¯U t

p| = m. Then,
p =

(1)

Rt

1
m

rk

k=1

Table 1: Indicative signals of opinion spam.

Suspicious if
Name
Change
Average Rating
Number of (+/−) Reviews
Increase
Decrease
Rating Entropy
Ratio of Singletons
Increase
Increase
Ratio of First-timers
Increase
Youth Score
Temporal Gap Entropy
Decrease
†With windows size ∆T and logarithmic binning, number of bins

Range
[1, 5]
[0,∞]
[0, log2 5]
[0, 1]
[0, 1]
[0, 1]
[0, maxe† ]

is (cid:100)log2∆T(cid:101) + 1 and maxe = log2((cid:100)log2∆T(cid:101) + 1).

2. Number of Reviews: A sudden surge in the number of re-
views may indicate spamming activity. As such, we track
the total number of reviews within each time interval. Let
p = {uk|tk ∈ [(t−1)∗∆T, t∗∆T )} denote p’s reviews
U t
within window t. Then,

C t

(2)
3. Number of Positive/Negative Reviews: In addition to
total number of reviews, we also track the positive and
negative review counts, as fake reviews either demote or
promote and have skewed ratings.

p

p =(cid:12)(cid:12)U t

(cid:12)(cid:12)

(3)
(4)
4. Rating Entropy: We also monitor entropy over time, as

+C t
−C t

a measure of skewness in ratings. As such,

p, rk ∈ {4, 5}}(cid:12)(cid:12)
p, rk ∈ {1, 2}}(cid:12)(cid:12)

p =(cid:12)(cid:12){uk|uk ∈ U t
p =(cid:12)(cid:12){uk|uk ∈ U t
p = − 5(cid:88)

Et

r · log pt
pt

r

r=1

where pt
r in window t.

r is the ratio of reviews with rating value equal to

5. Ratio of Singletons: Fake reviews could be posted by
newly created accounts. Therefore, we track the ratio of
one-time reviewers over time.

where U t
ﬁrst-ever and only review (to p) during window t.

s is the set of singleton users who posted their

6. Ratio of First-timers: Some campaigns involve spam-
mers targeting multiple products simultaneously. As such,
we also track the ratio of ﬁrst-time reviewers as

where U t
f is the set of p’s reviewers who posted their ﬁrst
but not necessarily only review during window t (note that
in this case the ﬁrst review need not be to p).

7. Youth Score: Most fake reviews are posted from short-
lived accounts. Therefore, besides singletons and ﬁrst-
timers, we further track account age. Speciﬁcally, for each
review uk of p within window t, we compute the age of
its reviewer U IDk at the time they posted uk by

Ak = tk − tU IDk

0

(5)

(6)

(7)

St

p =

s|
|U t
C t
p

F t

p =

|U t
f|
C t
p

(cid:100)log2∆T(cid:101)+1(cid:88)

0

where tU IDk
is the time at which reviewer U IDk posted
their ﬁrst review. The youth score is then the average of
reviewer ages at the time they posted for p.
1

(cid:88)

2 · (1 −

Y t
p =

1
C t
p

uk∈U t

p

(8)

)

1 + exp (−Ak)
p gets to zero. As such,

The larger the Ak’s, the closer Y t
larger Y t

p is more suspicious.

8. Temporal Gap Entropy: A normal user is expected to
post reviews at arbitrary intervals, while spammers may
follow a predictable robot-like behavior (e.g., post every
day). As such, we compute the time-gap between con-
secutive reviews {uk, uk+1} ∈ U t
p of p within window
t, create a histogram, and compute the entropy. The his-
togram is constructed through logarithmic binning (New-
man 2005) (e.g., if ∆T is 30 days, consecutive bin sizes
are 0, 1, 2, 4, 8, and 16 days). That is,

p = −
Gt

b · log pt
pt

b

(9)

b=1

b is the ratio of time-gaps in bin b in window t.

where pt
Notice that the temporal signals of interest are potential
indicators of spamming behavior. However, they need not
exhibit abnormalities altogether at the same time windows.
In fact, different spam campaigns might trigger different sig-
nals to ﬁre. For example, one campaign may create a large
number of new accounts but use them in arbitrary time inter-
vals. Another may involve a very skewed number of positive
ratings but from sufﬁciently old accounts. Our approach is
multi-faceted, as such it could help identify various combi-
nations of collusions among spammers.

Temporal Opinion Spam Detection

Our temporal approach to opinion spam detection consists of
four main steps: (i) extracting temporal signal values as de-
ﬁned in the previous section; (ii) detecting changes in what
is called the lead signal; (iii) checking whether we also ob-
serve temporal anomalies in the supporting signals; and (iv)
ranking targeted products based on the number and magni-
tude of anomalies found in their timeline.

In the following subsections, we describe the details of

the last three steps, respectively.
Anomalies in the Lead (Target) Signal
Out of all the indicative signals that we extract over time,
we dedicate one of them as the lead signal. The lead can
be chosen as the measure that spammers particularly aim to
manipulate, e.g., the average rating. It can also be a measure
for which spamming activities could trigger a change, e.g.,
the number of (positive, negative, or total) reviews.

To elaborate, average rating serves as the overall impres-
sion of consumers for a given product. It has the potential
to shape the ﬁrst impression of candidate consumers. There-
fore, many spammers are devoted to manipulate the average
rating of products (Lim et al. 2010).
If there is a sudden
change in average rating over time (either increase or de-
crease), it is possible that the product is a target of a (promo-
tion or demotion) spam campaign.

On the other hand, it gets harder and harder to change the
average rating for products with increasingly many reviews,
compared to those with only a few. In their analysis, (Rah-
man et al. 2015) show that the minimum number of reviews
needed to fraudulently increase the average rating of a prod-
uct by 1/2 star is n/7, where n is the number of genuine
reviews of the product. This suggests that it is costlier to
change the average rating of popular (i.e., famous or notori-
ous) products with large number of reviews, provided spam-
mers are paid per review (Streitfeld 2011). Nevertheless, as
we show in the experiments, there exist scenarios where we
observe a burst of fake reviews in the timeline of a product,
even though those do not have any impact on the average rat-
ing. The incentives can be various; such as promoting a new
feature of a product, ﬂooding the most recent page view (as
reviews are often ordered in time), etc. In order to spot such
spam campaigns, we use number of positive (or negative)
reviews as the lead signal and watch for abnormal increases.
For anomaly detection on the lead time series, one can
use any detection algorithm that provides real-time capabil-
ity. One important issue is the semantics of the lead signal.
Average rating is cumulative, and our goal is to ﬁnd change
points in both directions (either increase or decrease). For
this lead, we use the cumulative sum (CUSUM) change de-
tection algorithm (Page 1954). On the other hand, we track
the non-cumulative number of (+ or −) reviews per time
window ∆T , with a goal to spot anomalies in the form of
bursts (i.e., large increases). For such leads, we use the au-
toregressive (AR) model for modeling the lead series, and
use the deviation from the forecasted value as the anomaly
score s at a new time point.

For change/anomaly detection, choice of a threshold is
critical to ﬂag alerts. For a given (lead) signal and a detector,
we maintain the distribution D(S|T, P ) of the anomalous-
ness scores S (i) across time points T and (ii) across prod-
ucts P . We then employ Cantelli’s inequality1 to identify
a theoretical threshold δ = (D, η), where η is the expected
percentage of anomalies (see (Smets and Vreeken 2011)).
For a given score st
p for product p at time t, we ﬂag an alert
if st
p > δ and the anomaly is in the direction of what a suspi-
cious activity would create (e.g., increase in youth score but
decrease in entropy, see Table 1).
Anomalies in the Supporting Signals
Lead signal alone is not sufﬁcient to indicate the occurrence
of spamming activities. For example, when a sudden in-
crease is detected in lead signal, e.g. average rating, the
causes could be (i) the product owner hired spammers to
write fake reviews for promotion; (ii) the product’s quality
has improved such that genuine reviewers wrote more posi-
tive reviews. Therefore, we investigate further the support-
ing signals, to verify if “alarms” triggered by the lead signal
are indeed the consequences of spamming activities.

In order to detect anomalies in each supporting signal, we
ﬁrst propose GLOBALAR, which is an online algorithm that
quantiﬁes the extent an input value vi is an anomaly in time

1Unlike the t-test which assumes Gaussian data, Cantelli’s in-

equality does not make any distributional assumptions on D.

Table 2: Notation used throughout text.

Notation Deﬁnition
vi−1
i−k
ti
ta
k
r
δ
ω
µ
σ
θ
si−1
i−4
Oi−1
i−4
L

a sequence of input values (vi−k, ..., vi−1)
ith time point
most recent alarm time point
order of AR (autoregressive) model
discounting parameter of SDAR
anomalousness score threshold
AR coefﬁcients
mean of time series values
variance of time series values
θ = {ω, µ, σ}
a sequence of square errors (si−4, ..., si−1)
a sequence of anomaly labels (Oi−4, ..., Oi−1)
number of data points used to pick k

series setting. Its major component is the Sequentially Dis-
counting Auto Regression algorithm (SDAR) (Yamanishi
and Takeuchi 2002). SDAR detects temporal anomalies by
modeling a given time series with autoregressive model and
discounting the importance of historical data exponentially.
GLOBALAR is effective but computationally expensive
as it computes the anomaly score for each and every time
point in the supporting signals. Therefore, we modify
GLOBALAR and propose LOCALAR to reduce time com-
plexity. Given a supporting signal, LOCALAR only focuses
on and scores the time points around the “alarms” produced
by the lead signal, and hence selectively ignores the other
time points. This reduces the time complexity from linear to
sublinear, in terms of the total number of time points. In the
following subsections, we elaborate on the technical details
of GLOBALAR and LOCALAR, respectively.
GLOBALAR GLOBALAR detects temporal anomalies by
using SDAR. Simply put, SDAR predicts value (denoted
as ˆvi) at time point ti and computes square error between
prediction and observation, i.e., (vi − ˆvi)2.
If the square
error is large, then vi is more likely to be an anomaly. It
is easy to see that the square error can be large when ˆvi is
very large or very small. However, in the setting of opinion
spam detection, only either one of the cases indicates the
occurrence of spamming activities. For example, a product
might have been attacked by spammers if the rating entropy
drops signiﬁcantly (i.e. reviewers during the same time point
give very similar ratings). In contrast, if rating entropy sud-
denly increases, it does not necessarily indicate the activities
of spammers. In the remainder of text, we call vi as “se-
mantically suspicious” (denoted as SemSus(vi) = T rue)
if (1) vi > vi−1 and large value indicates spamming activi-
ties (e.g., ratio of singletons), or (2) if vi < vi−1 and small
value indicates suspicious behaviors (e.g., rating entropy).
Otherwise SemSus(vi) = F alse.
Next, we introduce the general idea of SDAR. It ﬁrst
models time series V = {vk, vk+1, ..., vn} with kth order
autoregressive model as in Equation 10 and 11.

zi = ωzi−1
vi = zi + µ

i−k + 

(11)
where zi−1
i−k = (zi−k, ..., zi−1), ω = (ω1, ..., ωk),  is a nor-
mal random variable with zero mean and σ variance, i.e.

(10)

ta−2, Oi

i−k, θi−1, k, r, ta, δ

Algorithm 1: GLOBALAR
1 Input: ti, vi
2 Output: θi, si
3 θi =SDAR(vi, θi−1, r, k) (where θi = {ωi, µi, σi})
4 ˆvi = ωi(vi−1
5 si = (vi − ˆvi)2
6 if ti − ta ≤ 2 then // skip if no recent anomaly in lead signal
foreach tj ∈ [ta − 2, ti] do // check time points around ta

ta−2
i−k − µi) + µi

if sj > δ & SemSus(vj) is T rue then

7
8
9

Oj = 1

 ∼ N (0, σ), µ is the mean value of the time series.

Then the probability density function of vi is deﬁned as

Equation 12.
p(vi|vi−1

1

exp(− (vi − ˆvi)2

(12)

)

(2π)1/2σ

i−k, θ) =
where ˆvi = w(vi−1
i−k = (vi−k, ..., vi−1), µ
is a k-dimensional vector with all elements equal to µ, and
θ = {ω, µ, σ}.

i−k − µ) + µ, vi−1

2σ2

SDAR discounts the importance of historical data and
estimates θ by maximizing the exponentially weighted log
likelihood as shown in Equation 13.
L(θ|vi

(1−r)i−m log p(vm|vm−1

i(cid:88)

m−k, θ) (13)

1, r, k) =

m=k+1

where r ∈ [0, 1) is the discounting factor.

In Equation 13, the estimation of θ is deﬁned on the entire
time series. Fortunately, it can also be estimated incremen-
tally. Due to limited space, we skip the technical details
of the incremental estimation (See (Yamanishi and Takeuchi
2002) for details). We use θi = SDAR(vi, θi−1, r, k) to
denote the update of parameters from θi−1 to θi.

We show the steps of GLOBALAR in Algorithm 1. We
ﬁrst estimate the parameters of SDAR, given a new in-
put value vi (Line 3). Note that only r and k are hyper-
parameters. θi−1 is the parameters estimated in the last it-
eration. Then we predict ˆvi using the estimated parameters
θi (Line 4). If vi is signiﬁcantly different from ˆvi (measured
by square error si), then vi is deemed suspicious compared
to past data (Line 5). In Lines 6 to 9, we ﬁrst check if the
current time point ti is close to the most recent “alarm” ta
from the lead signal. If so, we investigate the time points
around ta, particularly [ta − 2, ti], instead of simply look-
ing at ti. The reason is that there might be lags between
the lead and the supporting signals. For every time point
tj ∈ [ta − 2, ti], the anomaly label Oj is assigned 1 if the
corresponding square error sj is larger than threshold δ and
SemSus(vj) returns T rue.
Local AR In GLOBALAR, we investigate all the values in
a time series. However, we expect and ﬁnd that anomalies
in the lead signal are much fewer compared to the number
of time points. Recall that GLOBALAR exponentially dis-
counts the importance of historical data. It implies that at
time point ti, the values that are much earlier than ti make
little impact when estimating the parameters θi. Since we

Algorithm 2: LOCALAR
1 Input: ti, ta, L, vi
i−L−5, δ
2 Output: si
ta−2, Oi
ta−2
3 if ti − ta > 2 then // exit if no recent anomaly in lead signal
5 foreach k(cid:48) ∈ [1, 5] do // select k that minimizes square error

Exit

4

Init Sk(cid:48) = 0
foreach j ∈ [1, L] do
θ = AR(vi−j−1
ˆvi−j = ω(vi−j−1
si−j = (vi−j − ˆvi−j)2
Sk(cid:48) = Sk(cid:48) + si−j

i−j−k(cid:48) , k(cid:48)) (where θ = {ω, µ, σ})
i−j−k(cid:48) − µ) + µ

10
11
12 k = k(cid:48)
13 foreach tj ∈ [ta − 2, ti] do // check time points around ta

min

min, where ∀k(cid:48) ∈ [1, 5], Sk(cid:48) ≥ Sk(cid:48)
θj = AR(vj−1
ˆvj = ωj(vj−1
sj = (vj − ˆvj)2
if sj > δ & SemSus(vj) is T rue then

j−k, k)
j−k − µj) + µj

6
7
8

9

14

15

16
17
18

Oj = 1

are mainly interested in time points “alarmed” by the lead
signal, the question becomes if it would inﬂuence the perfor-
mance much if we only focused on time points close to the
“alarms”. Motivated by this, we propose LOCALAR. As we
show in our experiments, both algorithms perform similarly
but LOCALAR is signiﬁcantly faster than GLOBALAR.

LOCALAR detects anomalies by using the autoregressive
(AR) model. Different from SDAR, AR estimates parame-
ters θ by maximizing the data log likelihood p(vi|vi−1
i−k, θ)
(see Equation 12). The data likelihood is dependent only on
vi−1
i−k, such that we can ignore values that are far away from
vi. Besides the improvement of efﬁciency, we pick a proper
order, i.e. k, for AR by ﬁtting regular (non-anomalous) val-
ues in the time series. We expect that estimating k would be
more effective than simply ﬁxing k, as generally, the behav-
iors of time series from different products are not the same.
Similar to GLOBALAR, we allow lags between the lead and
supporting signals in LOCALAR.

Algorithm 2 shows the detailed steps of LOCALAR. At
time ti, we check if there is a close-by “alarm” ta in the lead
signal. If not, then we exit the algorithm (Lines 3-4). This
step accelerates the algorithm signiﬁcantly in two aspects:
(i) it skips anomaly score computation for points away from
the lead “alarms”, as a result of which (ii) feature extrac-
tion for a large body of time points in supporting signals can
also be skipped. Next, we select a proper (integer) k that
minimizes the total square error over a window of L values2
before vi (Lines 5-12). Speciﬁcally, we pick a candidate k(cid:48)
and initialize the square error sum Sk(cid:48) to 0. We compute the
square error si−j between the inputs vi−j and predictions
ˆvi−j of an AR model of order k(cid:48), for all L values before vi.
Sum of square errors is denoted by Sk(cid:48). We then choose the
k(cid:48) with the minimum Sk(cid:48) as the order of our AR model at
2Window size L is essentially the training data size used to es-
timate k. Choice of L poses a trade-off between the estimation
quality and running time. In experiments we ﬁnd L = 8 effective.

time ti. As temporal dependence drops by distance in time,
we focus on small k(cid:48) ∈ [1, 5]. Through Lines 13-18, we
carefully examine the time points around ta. Different from
GLOBALAR, we compute the square error for values at and
before vi at this step, using the estimated k. When the square
error is larger than the anomaly threshold and SemSus(vj)
returns T rue, anomaly label Oj is assigned 1.
Scoring and Ranking Products
For a product pi at time point tj, we can use CUSUM,
GLOBALAR or LOCALAR to detect anomalies in both its
lead and supporting signals. Given these anomalies, how
can we quantify the suspiciousness of pi at tj? How can we
rank pi among all other products at that time?

We answer these questions by formulating a suspicious-
ness score for the products. Intuitively, it is more probable
that a product is a target of spamming activities (i) if there
are a large number of temporal anomalies among its indica-
tive signals, and (ii) if the magnitudes of the anomalies are
large. Based on these insights, we design four measures to
quantify product suspiciousness.

indicative signals at tj. That is, f1(pi, tj) =(cid:80)9
/(cid:80)9
can be written as f2(pi, tj) = (cid:80)9
(cid:80)9
where wl = 1/(cid:80)j
l=1 wl · s(l)

First is the ratio of anomalies among product pi’s nine
/9,
∈ {0, 1} is the anomaly label of signal l of prod-
where O(l)
j,pi
uct pi at tj. The second and third measures are respectively
the average and maximum magnitude of the anomalies, and
and
f3(pi, tj) = maxl=1...9 s(l)
is the anomaly
j,pi
score of signal l of product pi at tj. Finally, f4(pi, tj) =
is the weighted sum of the anomaly scores,
t,pi. Simply put, the weight wl is
inverse proportional to the number of anomalies in signal l.
The intuition is that the signals that contain a large number
of anomalies may be noisy and provide us with many poten-
tial false positives.

l=1 s(l)
j,pi
, where s(l)
j,pi

l=1 O(l)
j,pi

j,pi

t=1 O(l)

l=1 O(l)
j,pi

place was originally collected and used by (Akoglu, Chandy,
and Faloutsos 2013).

FLIPKART contains reviews from ﬂipkart.com, an e-
commerce site which provides a platform for sellers to mar-
ket products to customers. It contains 545 thousand products
with roughly 3.3 million reviews by 1.1 million users, and
spans 180 weeks between August 2011 to January 2015.
Results
Both the SWM and the FLIPKART datasets do not contain
ground truth labels for anomalous (i.e., opinion-spammed)
products, let alone the speciﬁc time periods in which each
product was spammed. As such, we manually inspect the
top-ranked products from both datasets, and provide evi-
dence through various case studies.
SWM Case I: Game app We start with the further anal-
ysis and description of the product shown in Figure 1. This
app, which started off with an average rating of 4, gradually
declined below 3-star rating between weeks 75 to 165. A se-
ries of spam campaigns are then executed in weeks 168, 175,
182, and 189. Notice that these campaigns are organized ev-
ery 7 weeks, which is a strong indication of manipulation.

When we use ‘Average Rating’ as the lead signal, we spot
the ﬁrst two campaigns, whereas when ‘No of + Reviews’
is used as the lead, all 4 weeks are detected (note the blue
bars indicating the time points with anomaly score above
the threshold). Nearly all the supporting signals also change
simultaneously, suggesting low rating entropy and increased
number of singleton reviewers.

We then use the empirical CDF to normalize the feature

values, as shown in Equation 14.

Fg(pi, tj) = P (fg ≤ fg(pi, tj)), g = 1, . . . , 4

(14)
where Fg(pi, tj) is the ratio of fg’s that are smaller than
or equal to fg(pi, tj) across all products and all time points
before tj. The larger the Fg(pi, tj), the larger the anoma-
lousness. Finally, we compute pi’s suspiciousness score
A(pi, tj) at time tj as an average of the Fg(pi, tj)’s.

Experiments

Datasets
In this study we use review datasets from two different sites,
namely SWM and FLIPKART, as we describe next.

SoftWare Marketplace (SWM) consists of reviews for all
software products (apps) from the entertainment category
(e.g., games, movies, sports, etc.) in an anonymous online
marketplace which allows customers to purchase software
applications. It contains 15,094 apps with over 1.1 million
reviews by 966 thousand users, and spans 198 weeks be-
tween July 2008 and April 2012. The data for this market-

Figure 2: Stacked bar charts showing daily review counts for the
4 detected campaigns in Figure 1 (week before, during, and af-
ter campaign separated by green vertical bars). Stacks represent
counts for different ratings 1-5. Notice that spam campaigns in-
volve mostly 5-star reviews (hence the bumpy increase in average
rating week by week after each campaign).

Figure 2 shows the daily review counts for the week be-
fore, at, and after the spam campaigns, for each of the 4 de-
tected campaigns, along with the distribution of ratings per
day. Most of these reviews are from singleton reviewers that
rated this app as 4 or 5 stars, as illustrated in Figure 3.

Next we investigate the review text to gain further insight
into the campaigns. First we ﬁlter out all the negative (1-2
star) reviews of this app between weeks 75 to 165, during
which the average rating was on a declining trend. Figure 4
(a) shows the word-cloud created from these reviews. It sug-
gests that there is a “problem” with the app as it “crashes”
often and needs a “ﬁx”. Next we ﬁlter out the positive (4-5

09/2209/2309/2409/2509/2609/2709/2809/2909/3010/0110/0210/0310/0410/0510/0610/0710/0810/0910/1010/1110/120102030405060708090Time Wise Rating Count1234511/1011/1111/1211/1311/1411/1511/1611/1711/1811/1911/2011/2111/2211/2311/2411/2511/2611/2711/2811/2911/30020406080100120Time Wise Rating Count1234512/2912/3012/3101/0101/0201/0301/0401/0501/0601/0701/0801/0901/1001/1101/1201/1301/1401/1501/1601/1701/18020406080100120Time Wise Rating Count1234512/2912/3012/3101/0101/0201/0301/0401/0501/0601/0701/0801/0901/1001/1101/1201/1301/1401/1501/1601/1701/18020406080100120Time Wise Rating Count12345(a) 1-2(cid:63) reviews (weeks 75 to 165)

(b) 4-5(cid:63) reviews (week 168)

(c) 4-5(cid:63) reviews (week 175)

(d) 4-5(cid:63) reviews (week 182)
(e) 4-5(cid:63) reviews (week 189)
Figure 4: (a) Word cloud of negative reviews for time period dur-
ing which average rating gradually declines for the product in Fig-
ure 1. (b-e) Word clouds of positive reviews during the respective 4
weeks of spam campaigns.

this app all the time., I use this app all the time!, Love it!,
One of my favorite apps!!!, Love the app, use it all the time!,
Way better than Fandango!.
SWM Case III: Whip-sound app Outliers in data need
not always correspond to anomalies (in our case, spam cam-
paigns) but also novelty or new trends. We present such an
example from the SWM dataset.

The product “Pocket Whip” is a famous app that produces
a whip sound. A TV show called the “Big Bang Theory” in-
troduced this whip app in season 5 episode 19. It was aired
on March 8, 2012 and consequently, reviewers started down-
loading the app and writing reviews from March 9, 2012
throughout the week. We detect this activity on week 191 in
Figure 7 and characterize through Figure 8. Our approach is
powerful enough not only to identify anomalous/suspicious
review spam activities but also new trends: e.g., a new ver-
sion of an app, a new chef in a restaurant, etc.

While the majority of new users liked the app (hence in-
crease in average rating in week 191), number of negative
reviews also increased (although not as much, see support-
ing signal in row 3 of Figure 7). This is also evident from
Figure 9 that shows the daily rating distributions.
FLIPKART Case I
In Figure 10 (left) we show one of the
most suspicious products in FLIPKART, where week 35 is
detected as anomalous. During this period, around 80 re-
views are written. However the characteristics of this cam-
paign is different in two aspects. First, most reviews are
rated 3- or 4-stars, but only a few 5-stars (See Figure 11
(top)), while being able to increase average rating. These
mixed ratings appear to be for better camouﬂage. Second,
most reviewers are non-singletons (unlike in SWM) (notice

Figure 3: Distribution of ratings by singleton reviewers only, dur-
ing the 4 weeks of spam campaigns detected in Figure 1. This
shows that the campaigns were carried by newly created accounts
who provided a large number of 4- or 5-star ratings.

star) reviews from each of the spam campaign weeks, and
show the resulting word-clouds in Figure 4 (b-e), respec-
tively. We notice that the new reviewers think the app is
“great” after the “new update” and they “love” it.

On further analysis we ﬁnd that most of the reviews that
singletons have written have duplicates or near duplicates.
For example all the following text snippets appear multi-
ple times across different reviews of this app: Great app for
gamers, Great App For Gaming news, Great app, Easy to
use, Must have app for gamers, One of my favorite apps,
Use it every day, Very Informative.
SWM Case II: Movie app Our second case study is for a
movie app from SWM. Figure 5 shows the timeline for the 9
indicative signals, where ‘Average Rating’ is designated as
the lead. Week 149 is detected as anomalous at which the
average rating increases from around 3.7 to above 4.

We explicity show the anomaly scores (red curves) com-
puted both by GLOBALAR (left) and LOCALAR (right)
and the detected anomalous points (blue bars) for compar-
ison. We notice that the anomalies detected by both meth-
ods are comparable, while LOCALAR computes scores only
for those points around the anomalies indicated by the lead,
being more efﬁcent and as effective.

Figure 6 (top) shows the daily review counts, stacked by
star-rating, before, during, and after the campaign week.
This campaign is voluminous: a total of more than 4,000
reviews are written in week 149. The highest number of re-
views per day is around 900 (May 21), which is roughly 1
review for every 2 minutes if the reviews were written by a
single user. The piecharts in Figure 6 show the rating distri-
bution of reviews from singletons (left) and non-singletons
(right) during that week. Again, most spam reviews are 5-
star rated and written from new accounts.

The following text is shared among singleton reviewers of
this product at various weeks near the anomalous week: Best
movie app ever!!, Best movie app out there., Best movie app
out there!, I use it all the time, I use this all the time!, I use

Figure 5: Time series for 9 indicative signals for a software product (app) in SWM (green curves with left y-axis: signal values, red curves
with right y-axis: anomaly score, blue bars: anomalous time points). Lead signal: Average Rating (top row). Left: GLOBALAR results,
Right: LOCALAR results. Note that while GLOBALAR computes anomaly scores for all time points for all signals, LOCALAR computes
scores only for those time points indicated by the lead (notice the red curves), being efﬁcient and equally effective.

no change in Ratio of First-timers and Singletons) although
they are young accounts (notice spike in Youth Score). This
suggests that other (related) products might also have been
spammed by the same reviewers.

Figure 12 conﬁrms this conjecture, where we ﬁnd that a
list of other products are rated similarly by these users dur-
ing the same time period. Moreover, these periods are also
detected as anomalous by our method. We show one other
example product in Figure 10 (right) and its coresponding
daily review count in Figure 11 (bottom)—notice the align-
ment in time and rating distribution (!) Further, we ﬁnd that
all these products are hair-related, including straighteners,
dryers, and shavers, potentially belonging to the same seller.
FLIPKART Case II Our second case study is for an
anomalous book from FLIPKART. As shown in Figure 13, its
average rating increased to 4.4 on week 95. We ﬁnd that this
book received 125 5-star reviews in mainly two days dur-
ing that week. Surprisingly those were from non-singletons
(See Figure 14), who also reviewed another product—also a
book (!) Further investigation revealed that those were 2 out
of 3 books of an author. The one in Figure 13 had average
rating 3.2 on Goodreads.com. Similarly, their other book

was rated 3.3 on Goodreads while its (potentially spammed)
Flipkart rating is 4.5. We found that almost all 125 review-
ers are in common, and write 5-star reviews 7 PM–11.45PM
on June 8 and 11AM–7PM on June 9, 2013. What is more,
their reviews follow nearly the same order for both books.

Conclusion

Opinion spam has become a prevalent problem, for which
a vast body of methods operate in an ofﬂine fashion on a
collection of static data. In this work, we brought emphasis
to the aspect of time, and approached this problem with a
novel temporal formulation. We proposed a new methodol-
ogy that (1) monitors a comprehensive list of indicative sig-
nals over time, (2) spots anomalous events in real-time, and
(3) provides descriptive pointers for manual inspection and
characterization. As such, our approach exhibits desirable
properties, as it is online, efﬁcient, descriptive, and general.
Importantly, while we applied our methodology on opin-
ion spam, it is general enough to be employed for other ap-
plications in which multiple signals are monitored over time,
such as enterprise security, cyber-physical sensor systems,
environmental monitoring, and surveillance systems.

Figure 8: Word cloud of reviews during week 191 in Figure 7.

Figure 6: (top) Daily review counts before, during, and after the
spam campaign detected on week 149 in Figure 5. >4,000 reviews
during campaign, highest review count per day: ≈900. (bottom)
Rating distribution of (majority of) reviews from singleton (left) and
non-singleton reviewers (right) in week 149.

Figure 9: (top) Daily review counts before, during, and after the
event detected on week 191 in Figure 7.

Figure 7: Time series for 9 indicative signals for a whip-sound app
in SWM. On week 191, this app appeared in “Big Bang Theory”
(a popular TV show) Season 5 Episode 19.

Figure 10: Partial time series for 9 indicative signals for two dif-
ferent products from FLIPKART that were spammed by same re-
viewers during same time periods (week 35 and 40).

References

[Akoglu, Chandy, and Faloutsos 2013] Akoglu, L.; Chandy, R.;
and Faloutsos, C. 2013. Opinion fraud detection in online reviews
by network effects. In ICWSM.
[Fei et al. 2013] Fei, G.; Mukherjee, A.; Liu, B.; Hsu, M.; Castel-

05/1205/1305/1405/1505/1605/1705/1805/1905/2005/2105/2205/2305/2405/2505/2605/2705/2805/2905/3005/3106/010100200300400500600700800900Time Wise Rating Count1234503/0103/0203/0303/0403/0503/0603/0703/0803/0903/1003/1103/1203/1303/1403/1503/1603/1703/1803/1903/2003/21020406080100Time Wise Rating Count12345Figure 11: Daily review counts before, during, and after the spam
campaign week 35 for two FLIPKART products in Figure 10.

Figure 12: Reviewers (left) concurrently spammed multiple hair
products (right) from FLIPKART, including those in Figure 10.
Edge labels: (rating, campaign week)

Figure 13: Time series for 3 lead signals for a FLIPKART book.

lanos, M.; and Ghosh, R. 2013. Exploiting burstiness in reviews
for review spammer detection. In ICWSM.
[Feng, Banerjee, and Choi 2012] Feng, S.; Banerjee, R.; and Choi,
Y. 2012. Syntactic stylometry for deception detection. In ACL.
[Feng et al. 2012] Feng, S.; Xing, L.; Gogar, A.; and Choi, Y. 2012.
ICWSM
Distributional footprints of deceptive product reviews.
12:98–105.
[Jindal and Liu 2008] Jindal, N., and Liu, B. 2008. Opinion spam
and analysis. In WSDM, 219–230.
[Jindal, Liu, and Lim 2010] Jindal, N.; Liu, B.; and Lim, E.-P.
2010. Finding unusual review patterns using unexpected rules. In
CIKM, 1549–1552.

Figure 14: (left) Daily review counts, and (right) Rating distribu-
tion by non-singletons in week 35 for product in Figure 13.

[Li et al. 2014] Li, H.; Chen, Z.; Liu, B.; Wei, X.; and Shao, J.
2014. Spotting fake reviews via collective positive-unlabeled learn-
ing. In ICDM, 899–904.
[Li et al. 2015] Li, H.; Chen, Z.; Mukherjee, A.; Liu, B.; and Shao,
J. 2015. Analyzing and detecting opinion spam on a large-scale
dataset via temporal and spatial patterns. In ICWSM, 634–637.
[Lim et al. 2010] Lim, E.-P.; Nguyen, V.-A.; Jindal, N.; Liu, B.;
and Lauw, H. W. 2010. Detecting product review spammers using
rating behaviors. In CIKM, 939–948.
[Luca 2011] Luca, M. 2011. Reviews, reputation, and revenue: The
case of yelp.com. In Working Paper 12-016, Harvard Bus. Sch.
[Mukherjee et al. 2013a] Mukherjee, A.; Kumar, A.; Liu, B.; Wang,
J.; Hsu, M.; Castellanos, M.; and Ghosh, R. 2013a. Spotting
opinion spammers using behavioral footprints. In KDD.
[Mukherjee et al. 2013b] Mukherjee, A.; Venkataraman, V.; Liu,
B.; and Glance, N. S. 2013b. What yelp fake review ﬁlter might be
doing? In ICWSM.
[Mukherjee, Liu, and Glance 2012] Mukherjee, A.; Liu, B.; and
Glance, N. S. 2012. Spotting fake reviewer groups in consumer
reviews. In WWW, 191–200.
[Newman 2005] Newman, M. 2005. Power laws, Pareto distribu-
tions and Zipf’s law. Contemporary Physics 46(5):323–351.
[Ott et al. 2011] Ott, M.; Choi, Y.; Cardie, C.; and Hancock, J. T.
2011. Finding deceptive opinion spam by any stretch of the imagi-
nation. In ACL, 309–319.
[Page 1954] Page, E. S. 1954. Continuous Inspection Schemes.
Biometrika 41(1/2):100–115.
[Rahman et al. 2015] Rahman, M.; Carbunar, B.; Ballesteros, J.;
and Chau, D. H. 2015. To catch a fake: Curbing deceptive yelp
ratings and venues. Stat. Analysis and Data Min. 8(3):147–161.
[Rayana and Akoglu 2015] Rayana, S., and Akoglu, L. 2015. Col-
lective opinion spam detection: Bridging review networks and
metadata. In KDD, 985–994.
[Smets and Vreeken 2011] Smets, K., and Vreeken, J. 2011. The
odd one out: Identifying and characterising anomalies. In SDM,
volume 108, 109–148. SIAM.
[Streitfeld 2011] Streitfeld, D. 2011. In a Race to Out-Rave, 5-Star
Web Reviews Go for 5 Dollars. http://nyti.ms/1l9wqXW.
[Wang et al. 2011] Wang, G.; Xie, S.; Liu, B.; and Yu, P. S. 2011.
Review graph based online store review spammer detection.
In
ICDM, 1242–1247.
[Xie et al. 2012] Xie, S.; Wang, G.; Lin, S.; and Yu, P. S. 2012.
Review spam detection via temporal pattern discovery. In KDD,
823–831.
[Yamanishi and Takeuchi 2002] Yamanishi, K., and Takeuchi, J.-i.
2002. A unifying framework for detecting outliers and change
points from non-stationary time series data. In KDD, 676–681.
[Ye and Akoglu 2015] Ye, J., and Akoglu, L. 2015. Discovering
opinion spammer groups by network footprints. In ECML/PKDD,
267–282.

04/0504/0604/0704/0804/0904/1004/1104/1204/1304/1404/1504/1604/1704/1804/1904/2004/2104/2204/2304/2404/250510152025303540Time Wise Rating Count1234504/0504/0604/0704/0804/0904/1004/1104/1204/1304/1404/1504/1604/1704/1804/1904/2004/2104/2204/2304/2404/250510152025303540Time Wise Rating Count1234505/3005/3106/0106/0206/0306/0406/0506/0606/0706/0806/0906/1006/1106/1206/1306/1406/1506/1606/1706/1806/1901020304050607080Time Wise Rating Count12345