6
1
0
2

 
r
a

 

M
9
1
 
 
]

.

O
C
h
t
a
m

[
 
 

1
v
9
4
1
6
0

.

3
0
6
1
:
v
i
X
r
a

CONTEXT DIRECTED REVERSALS AND THE CILIATE

DECRYPTOME

C.L. JANSEN, M. SCHEEPERS, S.L. SIMON AND E. TATUM

Abstract. Prior studies of the eﬃciency of the block interchange (swap) and the reversal
sorting operations on (signed) permutations identiﬁed specialized versions of the these op-
erations. These specialized operations are here called context directed reversal, abbreviated
cdr, and context directed swap, abbreviated cds. Prior works have also characterized which
(signed) permutations are sortable by cdr or by cds.

It is now known that when a permutation π is cds sortable in n steps, then any application
of n consecutive applicable cds operations will sort π. Examples show that this is not the
case for cdr. This phenomenon is the focus of this paper.
It is proven that if a signed
permutation is cdr sortable, then any cdr ﬁxed point of it is cds sortable (the cds Rescue
Theorem). The cds Rescue Theorem is discussed in the context of a mathematical model
for ciliate micronuclear decryption.

It is also proven that though for a given permutation the number of cdr operations
leading to diﬀerent cdr ﬁxed points may be diﬀerent from each other, the parity of these
two numbers is the same (the cdr Parity Theorem). This result provides a solution to two
previously formulated decision problems regarding certain combinatorial games.

1. Introduction

The scope, eﬃciency and robustness of sorting algorithms are of high interest since sorting
is used to prepare data for application of various information processing algorithms. The
mathematical study of permutation sorting correspondingly has a long history.

Applications of permutation sorting in biological studies have been stimulated by the
discovery that often the positions of genes on the chromosomes of an organism A is a permu-
tation of the positions of the corresponding genes on the chromosomes of another organism B.
Dobzhansky and Sturtevant [17] proposed using the minimum number of reversals required
to sort the gene order of organism A to that of organism B as a measure of the evolutionary
distance between A and B. Hannenhalli and Pevzner [11] found an eﬃcient algorithm for
determining the minimum number of reversals when a signed permutation describes this
relation between genes in A and in B. That work identiﬁed a particular class of reversals,
named oriented reversals, as instrumental to ﬁnding that minimum number. Other advances
in the study of (oriented) reversals may be found in [2, 3, 18]. In an independent line of
investigation this speciﬁc type of reversal has been postulated as one of the two sorting op-
erations executed in ciliates during the process of converting a micronuclear precursor of a
gene to its functional form. In [8] and other ciliate literature this special reversal operation
has been denoted hi, an abbreviation for hairpin inverted repeat. We shall call this special
reversal operation context directed reversal, abbreviated cdr.

Date: March 22, 2016.
2010 Mathematics Subject Classiﬁcation. 05A05, 68P10, 91A46, 92D15, 97A20.
Key words and phrases. Permutation sorting, context directed reversals, context directed block inter-

changes, normal play game, misere game, ciliate decryptome.

1

Also block interchanges, and the special case of transpositions, have been studied as per-
mutation sorting operations. In [5] Christie studied the problem of ﬁnding the minimum
number of block interchanges required to sort one permutation to another. A certain con-
strained class of block interchanges, called minimal block interchanges in [5], emerged as
instrumental for eﬃcient sorting by block interchanges. Again, independently, the model
for ciliate micronuclear decryption postulates a constrained block interchange operation as a
sorting operation towards accomplishing decryption of micronuclear precursors of genes. In
ciliate literature, see for example [8], these constrained block interchanges are called dlad op-
erations. Some instances of the minimal block interchanges identiﬁed by Christie are indeed
dlad operations. We shall refer to a dlad operation as a context directed swap, abbreviated
cds.

The cds Inevitability Theorem, a result from [1] , shows that if a permutation is cds
sortable, then in fact indiscriminate applications of cds will successfully sort the permu-
tation. The advantage for the ciliate decryptome is that such a sorting operation does not
require additional resources to direct strategic choices for successful sorting by cds. However,
the cdr sorting operation does not have this inevitability feature: Indiscriminately applying
cdr sorting operations to a cdr sortable (or reverse cdr sortable) signed permutation may
terminate in an unsuccessful sorting. This fact motivates several questions, including: (1)
Do signed permutations that are cdr sortable, but not indiscriminately cdr sortable, actu-
ally occur in ciliates? (2) If “yes”, how does the ciliate decryptome succeed in sorting such
signed permutations? and (3) What are the strategic features of the cdr sorting operation?
[7] reports the DNA sequences for the micronuclear precursors
of the Actin I gene for the ciliate species Uroleptus pisces 1 and Uroleptus pisces 2. The
ﬁrst is available from [9] under Accession Number AF508053.1, and is representable by the

Regarding Question (1):

signed permutation [1, 3, −7, −5, 14, 2, 4, 6, 9, 12, −11, −8, 13, 15, −10]. The second is
permutation[2, 4, 6, 9, 12, −11, −8, 13, 15, −10, 1, 3, −7, −5, 14]. Both of these are cdr

available from [9] under Accession Number AY373659.1, and is representable by the signed

sortable, yet some sequences of applications of cdr result in a cdr ﬁxed point diﬀerent from
the identity. This fact would seem to suggest that unless the applications of cdr operations
during micronuclear decryption follow a strategy not yet discovered in the laboratory, it
should be expected that cdr ﬁxed points other than the identity are encountered results of
the decryption process.

Regarding Question (2): We prove the perhaps surprising result, Theorem 9.5, named the
cds Rescue Theorem, that any cdr ﬁxed point other than the identity permutation of a
cdr sortable signed permutation is a cds sortable permutation. Thus, the cds Inevitability
Theorem of [1] implies that the cds sorting operation plays a rescue role in the ciliate
decryptome.

Regarding Question (3): In prior work [2, 11, 18], advances towards ﬁnding the minimal
number of reversals to sort a permutation included ﬁnding an eﬃcient strategy to select cdr
operations that will sort a cdr sortable signed permutation. The cds Inevitability Theorem
plus the cds Rescue Theorem provide yet another approach: Theorem 9.6 - the cdr Steps
Theorem, describes how to determine the number of cdr applications required to sort a cdr
sortable signed permutation without regard to making strategic sorting operation choices.

Diﬀerent cdr ﬁxed points of a given signed permutation are not necessarily reached in the
same number of cdr sorting steps. We prove that the parity of the number of cdr operations
required to reach a cdr ﬁxed point is an invariant of each signed permutation - the cdr Parity

2

Theorem, Theorem 10.1. Using this result we ﬁnd a linear time solution for the cdr Misere
and the cdr Normal Play decision problems for combinatorial games featuring cdr that were
deﬁned in [1].

Our paper is organized as follows. After introducing basic terminology and the theoretical
background information from prior work we prove the cds Rescue Theorem and the cdr
Steps Theorem in Section 9, and the cdr Parity Theorem in Section 10. Finally we discuss
our results in the context of the ciliate micronuclear decryption model proposed in [14, 15].

2. Notation and Terminology

We consider both signed permutations and unsigned permutations. An unsigned permu-
tation will simply be called a permutation. In either case we consider these as one-to-one
and onto functions from the appropriate ﬁnite set to itself. For a permutation π the notation

(1)

π =[a1, ⋯, an]

denotes that the permutation π maps ai to i. For a signed permutation π the notation in
(1) denotes that the signed permutation π maps ai to i and −ai to −i.

The deﬁnitions of the context directed sorting operations use the notion of a pointer :

α and say pi is the integer k. Then the head pointer, or simply head of pi is the ordered pair

Consider a (signed) permutation α = [p1, p2, . . . , pi, . . . , pj, . . . , pn]. Consider the entry pi of
( k ,  k  + 1), while the tail pointer, or simply tail, of pi is the ordered pair ( k  − 1, k ).
[p1, p2, . . . ,(k−1 ,k) pi(k, k+1), . . . , pj, . . . , pn] when pi = pi  = k, and

In displays where pointer locations are emphasized we will use notation as follows α =

α =[p1, p2, . . . ,(k, k+1) pi(k−1, k), . . . , pj, . . . , pn]

α =[p1, p2, . . . ,h pi

t, . . . , pj, . . . , pn]

or alternately

when −pi = pi  = k.

3. The oriented overlap graph of a signed permutation

Consider a signed permutation α ∈ S±

an arc between the head and the tail occurrence of this pointer. One possible scenario is
depicted in Figure 1.

n. For each pointer (i, i + 1) appearing in α, draw

α =[⋯

t
i + 1

⋯

i

h

⋯]

Figure 1. An arc between the head and tail occurences of a pointer in α

The overlap graph O(α) =(V, E) of signed permutation α has
● edge set E, the set of pairs {p, q} of vertices p and q for which the arcs associated

● vertex set V , the set of pointers of α, and

with p and q have nonempty intersection.

3

Following [11, 18] we designate a vertex of O(α) as oriented if the corresponding arc is

between pointers of entries of opposite sign in α. In ﬁgures oriented vertices are denoted by
ﬁlled circles, while unoriented vertices are denoted by unﬁlled circles.

Example 3.1. Constructing the overlap graph of the signed permutation T =[1, −5, −2, 4, −3, 6].

h

1

th
-5

h t
-2

ht

4

h t
-3

t

6

(1,2)

(5,6)

(4,5)

(2,3)

(3,4)

(a) Arcs connect like pointers for T .

(b) Overlap graph for T .

Figure 2. Construction of the overlap graph for T .

Let G = (V, E) be a graph. Declare vertices x and y of G in reach if there are vertices
x0, x1, ⋯, xm such that x = x0 and y = xm, and for each i < m we have {xi, xi+1} ∈ E. The
relation has only one equivalence class, we say that G is a connected graph. If (G, f) is an

“in reach” relation is an equivalence relation on the vertex set of G. If an equivalence class
of this relation has more than one element it is called a component of G. If this equivalence

oriented graph, then a component of G is said to be an oriented component if some vertex
belonging to the component is oriented. The member of an equivalence class with only one
element is said to be an isolated vertex.

Example 3.2. The signed permutation S = [−6, 3, −4, 2, 5, −1, 7, 9, 8, 10]. The overlap

graph of S follows:

(9,10)

(8,9)

(7,8)

(1,2)

(2,3)

(3,4)

(4,5)

(6,7)

(5,6)

Figure 3. Overlap graph for S.

The oriented graph in Figure 3 has an isolated vertex (that is oriented), an unoriented
component, and an oriented component.

4. Context directed reversals

Let a signed permutation α with entries x and y as well as a pointer (i, i + 1) be given.
Suppose that the entries x and y of α each is associated with the pointer (i, i+1)1. We deﬁne
β = cdr(i,i+1)(α) by cases:
Case 1: α =[⋯, (i, i+1)x, ⋯, y(i, i+1), ⋯] or α =[⋯, x(i, i+1), ⋯, (i, i+1)y, ⋯]

In this case x ⋅ y > 02, and we deﬁne β = α.

1Thus, (i, i + 1) is the head pointer of one, and the tail pointer of the other, and {i, i + 1} = { x ,  y }.
2In other words, x and y have the same sign.

4

Case 2: α =[⋯, a, (i, i+1)x, . . . , b, (i, i+1)y, ⋯].

In this case β is obtained from α by reversing the order of all entries starting at x and ending
at b, and changing the signs of these entries. Thus,

β = cdr(i,i+1)(α) =[⋯, a, −b, . . . , −x(i, i+1), (i, i+1)y, ⋯]

Case 3: α =[⋯, x(i, i+1), a, . . . , y(i, i+1), b, ⋯].

In this case β is obtained from α by reversing the order of all entries starting at a and ending
at y, and changing the signs of these entries. Thus,

β = cdr(i,i+1)(α) =[⋯, x(i, i+1), (i, i+1) − y, . . . , −a, b, ⋯, ]

Example 4.1. In the signed permutation π = [−2, 1, −4, 3] the pointer (2, 3) is the head
reversal cdr(2,3) is applicable to π, and cdr(2,3)(π) =[4, −1, 2, 3].

pointer of −2 and the tail pointer of 3, entries with opposite sign. Thus the context directed

Context directed reversals have been called oriented reversals in [11, 18], and hi, the

hairpin inversion in [8] and related literature. A fundamental theorem from [11] implies

Theorem 4.2 (Hannenhalli-Pevzner). If the overlap graph of the signed permutation α has
no unoriented components, then α is sortable by applications of cdr.

Another fundamental theorem from [11] implies (see the remarks around [18] Theorem 2):

Theorem 4.3 (Hannenhalli-Pevzner). If the signed permutation α is sortable by applications
of cdr, then all sequences of successive cdr operations that sort α are of the same length.

5. Local complementation of oriented graphs, and the operation gcdr

The operation cdr on a signed permutation can be simulated by a corresponding opera-
tion on the overlap graph of the signed permutation. This operation on arbitrary graphs,
introduced in the prior work [2, 11, 18], is described next.

For a graph G = (V, E) and a vertex two-coloring f ∶ V → {0, 1} the pair (G, f) is said
to be an oriented graph. Vertices v with f(v) = 0 are said to be oriented vertices, while the
vertices v with f(v) = 1 are called unoriented vertices. For a given set S and an oriented
graph (G, f) we deﬁne the oriented graph

(G′, f ′) = lc((G, f), S)

as follows:

(1) G′ =(V ′, E ′), where V ′ = V and E ′ =(E ∖[S]2) ∪([V ∩ S]2 ∖ E).
(2) f ′ ∶ V ′ →{0, 1} is deﬁned by

f ′(v) = 1 − f(v) if v ∈ S

otherwise

f(v)

An example of an oriented graph on seven vertices is given in Figure 4a. The resulting graph

The oriented graph (G′, f ′) is said to be the S-local complement of oriented graph (G, f). It
is evident that when S ∩V = ∅, then (G, f) = lc((G, f), S). Thus we may assume that S ⊆ V .
lc((G, f), S) is displayed in Figure 4b.
Let (G, f) be an oriented graph. Consider a vertex p of G. If p is not an oriented vertex
of G, then declare (G′, f ′) =(G, f). However, if p is an oriented vertex of G, then deﬁne:

N(p) ={q ∶ {p, q} is an edge of G} {p}.

5

1

2

1

2

7

6

3

4

5

(a) (G, f ).

7

6

3

4

5

(b) lc((G, f ), S).

Figure 4. Oriented vertices marked in black. S is the set {3, 4, 5, 6}.

Finally, deﬁne

gcdr((G, f), p) = lc((G, f), N(p)).

In [18] the authors use the notation G~p for gcdr((G, f), p). Observe that if in G the vertex
p is oriented, then in gcdr((G, f), p) the vertex p is unoriented and isolated.

6. Simulating cdr on the oriented overlap graph of a signed permutation

We next relate an application of the cdr sorting operation on a signed permutation α to

an application of gcdr on the oriented overlap graph of α.

Example 6.1. The signed permutation α =[3, −8, −2, 5, 1, −7, 4, 6].

(1,2)

(2,3)

(7,8)

(6,7)

(3,4)

(4,5)

(1,2)

(2,3)

(7,8)

(6,7)

(3,4)

(4,5)

(5,6)

(5,6)

(a) The overlap graph (G, f ) of α.

(b) Overlap graph of cdr(6,7)(α).

Figure 5. cdr(6,7)(α) in Figure 5b agrees with gcdr((G, f),(6, 7)).

Consider Mn, the set of oriented graphs on the set of n pointers associated with elements

of S±

n. Let

denote the map that associates with each signed permutation α ∈ S±
n its corresponding
oriented overlap graph. The following theorem has been proven in [11], and it shows that
the diagram in Figure 6 commutes:

Ξn ∶ S±

n Ð→ Mn

Theorem 6.2. Let n be a positive integer and let α be a signed permutation in S±

n and let p

be a pointer of α. Then Ξn(cdrp(α)) = gcdr(Ξn(α), p).

A good exposition of this result is given in Section 2 of [18].

6

α

Ξn

Ξn(α)

cdrp

gcdr(⋅, p)

Figure 6

α′

Ξn

Ξn(α′)

7. Oriented Components of graphs and gcdr.

The following result, Theorem 1 of [18], generalizes Theorem 4 of [11] from the context of
oriented graphs arising from signed permutations, to the general context of oriented graphs.

Theorem 7.1 (Fundamental Theorem of Oriented Graphs). If each component of the ori-

ented graph (G, f) is oriented, then there exists an oriented vertex v of G such that each
component of gcdr((G, f), v) is oriented.
Let (G, f) be a ﬁnite oriented graph, and let (v1, ⋯, vk) be a sequence of vertices of
G. Deﬁne (G1, f1) = gcdr((G, f), v1) and for i < k, (Gi+1, fi+1) = gcdr((Gi, fi), vi+1).
Following [18] we say that (v1, ⋯, vk) is a sequence of oriented vertices if v1 is an oriented
vertex of (G, f) and for each i < k, vi+1 is an oriented vertex of (Gi, fi). An oriented sequence
of vertices is a maximal sequence if (Gk, fk) has no oriented vertices. It is a total sequence if
(Gk, fk) has only isolated, unoriented, vertices.

Observe that a total sequence is a maximal sequence, but a maximal sequence need not

be a total sequence. Theorem 7.1 implies

is a total sequence of oriented vertices in G.

Corollary 7.2. If each component of the oriented ﬁnite graph (G, f) is oriented, then there
Problem 7.3. Let (G, f) be a connected oriented graph with an oriented vertex. Are all total

sequences of oriented vertices for G of the same length?

8. The cdr Revision Theorem.

We now reformulate Theorem 3 from [18], named here the cdr Revision Theorem, for our

purposes. Throughout this section we assume that(G, f) is an oriented graph. We also allow

for the presence of a number of isolated vertices. The vertex set of G is V , while the edge
set is E.

Theorem 8.1 (cdr Revision Theorem, [18]). Let (G, f) be a graph which has a unique
component. Assume that this component is oriented. If (v1, v2, ⋯, vm−1, vm) is a maximal,
but not total, sequence of oriented vertices for the graph (G, f), then there exists an ℓ < m
and a sequence (r1, r2) of vertices of G such that:

(1) (v1, ⋯, vℓ, r1, r2, vℓ+1, ⋯, vm) is a maximal oriented sequence in (G, f), and

(2) for each j such that ℓ < j ≤ m neither r1, nor r2 is an oriented vertex in any of the

graphs gcdr(gcdr(⋯gcdr((G, f), v1), ⋯vj−1), vj).

Repeated applications of the cdr Revision Theorem then leads to

7

Corollary 8.2. Let (G, f) be a graph that has a unique component. If this component is
oriented and (v1, v2, ⋯, vm−1, vm) is a maximal, but not total, sequence of oriented vertices
for (G, f), then there exists an ℓ < m and a sequence (r1, r2, ⋯, r2k−1, r2k) of vertices of G
such that (v1, ⋯, vℓ, r1, r2, ⋯, r2k−1, r2k, vℓ+1, ⋯, vm) is a total oriented sequence in (G, f).
Example 8.3. Consider the signed permutation π = [1, 3, 5, −2, −6, 4]. The oriented se-

h

1

ht

3

t h

5

h t
-2

t
-6

ht

4

(1,2)

(5,6)

(2,3)

(3,4)

(4,5)

(a) Arcs connect like pointers of π.

(b) The overlap graph of π.

Figure 7. Constructing the overlap graph of π

quence ((5, 6)) is maximal. Each two-term sequence in the ﬁrst column of Figure 8 is an

oriented sequence in the overlap graph of π, while the corresponding three term sequence
in the second column is maximal. By Theorem 8.1, for each of these maximal three-term

((1, 2), (2, 3))
((1, 2), (3, 4))
((1, 2), (4, 5))
((2, 3), (1, 2))
((2, 3), (3, 4))
((2, 3), (4, 5))

((1, 2), (2, 3), (5, 6))
((1, 2), (3, 4), (5, 6))
((1, 2), (4, 5), (5, 6))
((2, 3), (1, 2), (5, 6))
((2, 3), (3, 4), (5, 6))
((2, 3), (4, 5), (5, 6))

Figure 8. Oriented, and corresponding maximal sequences for π.

sequences there is a pair of vertices of the overlap graph that can be inserted right before

the term (5, 6) to produce a ﬁve-term maximal oriented sequence. One example of such a
ﬁve-term maximal sequence, ((1, 2), (3, 4), (4, 5), (2, 3), (5, 6)), is a total sequence for the

overlap graph of π. By Theorem 4.3 all total sequences for the overlap graph of π are of
length 5.

9. The cds rescue theorem.

As can be gleaned from Example 8.3, even when a signed permutation is cdr-sortable,
not all applications of cdr-sorting operations successfully sort the permutation. A failed
sorting during micronuclear decryption in a ciliate could have devastating consequences for
the organism. In this section we prove that the hypothesized presence of also the cds sorting
operation is highly advantageous for accomplishing successful sorting of signed permutations
in the organism.

For the reader’s convenience we review information regarding cds. Suppose α has a pair

of pointers p = (x, x + 1), q = (y, y + 1). Then β = cdsp, q(α), the result of the sorting
we deﬁne β = cdsp, q(α) = α.

operation is as follows:
Case 1: If the pointers do not appear in the order p . . . q . . . p . . . q, or in the order q . . . p . . . q . . . p

8

Case 2: If α =[⋯, a, px + 1, b, . . . , c, yq, d, ⋯, e, xp, f , . . . , g, qy + 1, h, ⋯], deﬁne
β = cdsp, q(α) =[⋯, a, f , . . . , g, d, ⋯, e, xp, px + 1, b, . . . , c, yq, qy + 1, h, ⋯]
Case 3: If α =[⋯, a, xp, b, . . . , c, yq, d, ⋯, e, px + 1, f , . . . , g, qy + 1, h, ⋯], deﬁne
β = cdsp, q(α) =[⋯, a, xp, px + 1, f , . . . , g, d, ⋯, e, b, . . . , c, yq, qy + 1, h, ⋯]
Case 4: If α =[⋯, a, xp, b, . . . , c, qy + 1, d, ⋯, e, px + 1, f , . . . , g, yq, h, ⋯], deﬁne
β = cdsp, q(α) =[⋯, a, xp, px + 1, f , . . . , g, yq, qy + 1, d, ⋯, e, b, . . . , c, h, ⋯]
Case 5: If α =[⋯, a, px + 1, b, . . . , c, qy + 1, d, ⋯, e, xp, f , . . . , g, yq, h, ⋯], deﬁne
β = cdsp, q(α) =[⋯, a, f , . . . , g, yq, qy + 1, d, ⋯, e, xp, px + 1, b, . . . , c, h, ⋯]

Example 9.1. We perform cds(3,4),(6,7) on α = [3, 6, 5, 2, 4, 8, 1, 7]: Label α with the rel-
evant pointers: α = [3(3,4), 6(6,7), 5, 2, (3,4)4, 8, 1, (6,7)7]. Performing the swap yields β =
[3, 4, 8, 1, 5, 2, 6, 7]. Both 3, 4 and 6, 7 are now adjacent in β.
Assume that β = cdrc ○ cdrb ○ cdra(π). Also assume that neither cdra, nor cdrb applies to
γ = cdrc(π). Then cds(a,b) applies to γ and β = cds(a,b)(γ).
Proof. By hypothesis neither cdra nor cdrb applies to γ = cdrc(π). Thus in γ all occurrences

Lemma 9.2 (The cdr-cds Lemma). Let a, b, and c be pointers in a signed permutation π.

of the pointer a are of the same sign, and similarly for the pointer b. As cdra applies to the
signed permutation π, the two occurrences of pointer a in π have opposite signs. Thus in π
one of these occurences, and not both, of a is ﬂanked by pointer c, as depicted in Figure 9.

-c

-a

c

a

Figure 9. Pointers a and c in signed permutation π.

Figure 9 depicts one of eight conﬁgurations regarding placement of and signs on a and c.
We shall give the argument for this depiction, leaving the similar arguments for the other
cases to the reader. Now consider the possible placements of the pointer b. There are three
cases, depicted in Figure 10. We explain the ﬁrst case, leaving the other two to the reader.

-c

a

-b

b

-a

c

-c

a

-ab

b

c

(a) Case 1

(b) Case 2

-c

c

b

-a -b

a

(c) Case 3

Figure 10. Three general cases for placement of pointers a, b and c in π.

Case 1 of Figure 10: We write π as the concatenation

π = π1 ⌢ π2 ⌢ π3 ⌢ π4 ⌢ π5 ⌢ π6 ⌢ π7

where: π1 is the segment up to and including pointer a, π2 is the segment from pointer
a up to and including pointer −b, π3 is the segment from pointer −b up to and including
pointer −c, π4 is the segment from pointer −c up to and including pointer b, π5 is the segment

9

from pointer b up to and including pointer −a, π6 is the segment from pointer −a up to and
including pointer c, and π7 is the ﬁnal segment.

Applying cdra produces π1 ⌢ −π5 ⌢ −π4 ⌢ −π3 ⌢ −π2 ⌢ π6 ⌢ π7. Then applying cdrb

produces π1 ⌢ −π5 ⌢ π3 ⌢ π4 ⌢ −π2 ⌢ π6 ⌢ π7. Finally applying cdrc produces

β = π1 ⌢ −π5 ⌢ π3 ⌢ −π6 ⌢ π2 ⌢ −π4 ⌢ π7.

On the other hand, ﬁrst applying cdrc to π produces

γ = π1 ⌢ π2 ⌢ π3 ⌢ −π6 ⌢ −π5 ⌢ −π4 ⌢ π7.

By tracking the movement of the pointers a and b and their signs in this step, we see that
the segments π2 and π5 are exchanged when cdsa,b is applied to γ, producing β.

Cases 2 and 3 of Figure 10 are treated similarly: Partition π into the seven corresponding
segments, and then track the movement of the pointers as the sorting operations are applied.
(cid:3)

Example 8.3 continued. Application of cdr(5,6) to π = [1, 3, 5, −2, −6, 4] produces γ =
[1, 3, 5, 6, 2, 4], to which no further context directed reversals can be applied. This cor-
responds to ((5, 6)) being a maximal oriented sequence in the overlap graph of π. The
three term oriented sequence ((1, 2), (2, 3), (5, 6)) is also maximal, and applying cdr for
these pointers in the order listed in the sequence produces δ =[1, 2, 3, 5, 6, 4]. Observe that
cds(1,2),(2,3) is applicable to γ, and that δ = cds(1,2),(2,3)(γ).

Lemma 9.2 combined with the cdr Revision Theorem, Theorem 8.1, and its corollary,
leads to the cds Rescue Theorem. In preparation for the proof of this theorem we ﬁrst give
the following two lemmas:

Lemma 9.3. Let w ∈ V be an oriented vertex of (G, f). The following are equivalent:

(1) (w) is a maximal oriented sequence.
(2) A vertex v of (G, f) is oriented if, and only if, {w, v} is an edge of (G, f).

Proof. (1) ⇒(2): Assume that (w) is a maximal oriented sequence. Consider any v ~∈ N(w).
Then the orientation of v in the graph (G1, f1) = gcdr((G, f), w) is unchanged from its
orientation in (G, f). As (w) is a maximal sequence of oriented vertices, it follows that v is
unoriented in (G1, f1), and thus in (G, f). For the rest of (2), we assume that vertex v is not
oriented in (G, f). If v were an element of N(w), then in (G1, f1) v would be an oriented
vertex. But this contradicts the maximality of (w).
(2) ⇒ (1): Assume that, contrary to (2), there is an oriented vertex v of (G, f) such that
{v, w} is not an edge of G. Then v is still an oriented vertex in (G1, f1), whence the oriented
sequence (w) is not maximal.
It follows that if (w) is a maximal sequence in an oriented graph, then no sequence of the
form (a, w) of vertices of the oriented graph can be an oriented sequence. Moreover, if an
oriented graph has a maximal sequence (w), then only one of its components is oriented.
Lemma 9.4. Let w be a vertex in the oriented graph (G, f). If (w) is a maximal sequence,
then any oriented sequence of the form (u, v, w) of (G, f) is maximal.

(cid:3)

10

Proof. Assume that there is an oriented sequence (u, v, w) that is not maximal. Choose
a vertex x such that (u, v, w, x) is an oriented sequence. Put (G1, f1) = gcdr((G, f), u),
(G2, f2) = gcdr((G1, f1), v), (G3, f3) = gcdr((G2, f2), w). As u is an oriented vertex of (G, f)

(by hypothesis) Lemma 9.3 implies:

(2)

w ∈ N(u) in (G, f).
w ∈ N(v) in (G1, f1).

(3)

But then w is unoriented in (G1, f1), while it is oriented in (G2, f2), implying
Suppose that v ~∈ N(u) in (G, f). Then as the orientation of v in (G1, f1) is the same as its
orientation in (G, f), we ﬁnd that v is an oriented vertex of (G, f) and thus in N(w), by
Lemma 9.3. If, on the other hand, v ∈ N(u) in (G, f), then as the orientation of v in (G1, f1)
is opposite to its orientation in (G, f), we ﬁnd that v is an unoriented vertex of (G, f) and
thus not a member of N(w), by Lemma 9.3. Thus, we must consider the following two cases,

(A) and (B):

u

v

w

(a) v ~∈ N (u)

u

v

w

(b) v ∈ N (u)

Case (A), v ~∈ N(u): There are two subcases regarding x:
Case 1: x ∈ N(w): By Lemma 9.3 x is an oriented vertex in (G, f). We consider the four
possibilities x~∈ N(u) ∪ N(v), x ∈ N(u) ∖ N(v), x ∈ N(v) ∖ N(u) and x ∈ N(v) ∩ N(u).
(1) x~∈ N(u) ∪ N(v): In this case x is oriented in (G2, f2) and still has an edge with w,
so that x is unoriented in (G3, f3).
(2) x ∈ N(u) ∖ N(v): Now u, w and x are oriented and pairwise have an edge, so that in
(G1, f1) these three vertices are unoriented and x has no edge with any of u, v or w.
But then x is unoriented also in (G3, f3).
(3) x ∈ N(v) ∖ N(u): In this case in (G1, f1) the vertices x, v and w pairwise have edges,
w is unoriented and v and x are oriented. But then in (G2, f2) there is no edge among
also in (G3, f3).
(4) x ∈ N(u) ∩ N(v): In this case the sets of vertices {u, x, w} and {v, x, w} each
pairwise has edges in (G, f), and all are oriented vertices. Then in (G1, f1) the edges
{x, v} and {w, v} are still present, but x and w are both unoriented while v is
oriented. Thus in (G2, f2) w and x are oriented and there is an edge {w, x}. But
then x is unoriented in (G3, f3).
Case 2: x~∈ N(w) Similarly, a consideration of cases shows that also in this case we would
have a contradiction with the assumption that (u, v, w, x) is an oriented sequence.

any two of the vertices x, w and v, and x is unoriented. It follows that x is unoriented

(1) x~∈ N(u) ∪ N(v): In this case x is unoriented in (G3, f3).

11

(2) x ∈ N(u) ∖ N(v): Then x is oriented in (G1, f1) and a member of N(w) of the now
unoriented w. As we are in case (A), also v ∈ N(w) and v is oriented. But then in
(G2, f2) both w and x are oriented and {w, x} is an edge in (G2, f2). It follows that
x is unoriented if (G3, f3).
(3) x ∈ N(v) ∖ N(u): Now in (G1, f1) x is still a member of N(v) and unoriented, so that
in (G2, f2) both x and w are oriented and {w, x} is an edge. But then x is unoriented
in (G3, f3).
(4) x ∈ N(u) ∩ N(v): In (G1, f1) x and v are oriented while w is unoriented, and there
is an edge between any two of {w, x, v}. But then in (G2, f2) x is unoriented, and
there is no edge between w and x. It follows that in (G3, f3), x is unoriented.
This analysis shows that when v is not in N(u) in (G, f), then (u, v, w, x) is not an
(u, v, w, x) is an oriented sequence.
Thus, existence of a non-maximal oriented sequence (u, v, w) leads to a contradiction. (cid:3)

Also in Case (B) a similar case analysis exhibits a contradiction with the assumption that

oriented sequence.

Theorem 9.5 (The cds Rescue Theorem). Let π be a cdr-sortable signed permutation.
Then all cdr ﬁxed points of π are cds-sortable.

Proof. Let π be a cdr sortable signed permutation. Then the overlap graph of π has no
unoriented components. We prove this result by induction on the positive integer n for
which π is a member of S±

n. For n = 1 there is nothing to prove.

Let π ∈ S±

to obtain β from π.

Thus, assume n > 1 and that the statement of the theorem has been conﬁrmed for all k < n.
n be a cdr-sortable permutation with no adjacencies, and with some (non-sorted)

unoriented components, and then choose an oriented vertex r2 of γ1 so that the overlap graph

cdr-ﬁxed point β. Consider an oriented sequence (a1, ⋯, am) of pointers used successively
Case 1: m = 1. Then (a1) is a maximal oriented sequence for the oriented overlap graph
(G, f) associated with π. Now by the Fundamental Theorem of Oriented Graphs, Theorem
7.1, choose an oriented vertex r1 of π such that the overlap graph of γ1 = cdrr1(π) has no
of γ2 = cdrr2(γ1) has no unoriented components. Then γ2 is cdr sortable and by Lemma
9.4 (r1, r2, a1) is a maximal oriented sequence of pointers for π, whence (a1) is a maximal
1) of
ﬁnd that δ is a cdr ﬁxed point of cdra1(γ2), and is cds sortable. However, with β = cdra1(π),
we have by Lemma 9.2 that δ = cdsr1,r2(β), and it follows that β is cds sortable.

oriented sequence of pointers for γ2. Now γ2 has at least two adjacencies. Collapsing these
adjacencies produces a signed permutation γ∗
pointers, and is a member of S±
1 to γ∗ produces a cdr ﬁxed point
δ∗ of γ∗ which, by the induction hypothesis, is cds sortable. Reinstating the adjacencies we

2 which has a maximal oriented sequence (a∗

k for a k < n. Applying cdra∗

Case 2: m > 1. The induction hypothesis is that the statement is true for permutations δ in
S±
k, k < n, and all oriented sequences.

Subcase 2 (a): The overlap graph of π1 = cdra1(π) has no unoriented component. In this
n−1 in which the oriented sequence corresponding to (a2, ⋯, am)

case, as π1 has an adjacency, we may reduce π1 through collapsing the adjacency, to an equiv-
alent permutation π∗
sorts the equivalent permutation to the ﬁxed point β∗ corresponding to β under the same
collapse of the same adjacency. By the induction hypothesis β∗ is cds-sortable, and thus β
is cds-sortable.

1 in S±

12

this subgraph. By the Fundamental Theorem of Oriented Graphs, Theorem 7.1, we ﬁnd an

attention to the set of those vertices of the overlap graph of π that appear in the unoriented
components of the overlap graph of π1, together with the vertex a1. Let this set of vertices be

Subcase 2 (b): The overlap graph of π1 = cdra1(π) has an unoriented component. Restrict
V1. The vertex subgraph of (G1, f1) the oriented graph of π induced by the set of vertices V1
is an oriented graph which has no unoriented components, and (a1) is a maximal sequence in
oriented vertex r1 ∈ V1 such that (G2, f2) = gcdr((G1, f1), r1) has no unoriented components.
r2 ∈ V1 ∖{r1}, oriented in(G2, f2), such that gcdr((G2, f2), r2) has no unoriented components.
By Lemma 9.4 the sequence (r1, r2, a1) is maximal in (G1, f1). Since the sequence (r1, r2)

Observe that r1 ≠ a1, and that in the latter graph a1 is an unoriented vertex. By yet
another application of the Fundamental Theorem of Oriented graphs we ﬁnd a second vertex

produces no unoriented components in this graph, the argument in the proof of Theorem 3 of
[18] shows that this sequence, also oriented in the overlap graph of π, produces no unoriented
components from the overlap graph of π.

n with an adjacency, and the overlap
graph of γ1 has no unoriented components. By the induction hypothesis, and the argument in
Subcase 2 (a), the cdr ﬁxed point of γ1 arising from applications of cdr using the sequence of

Consider γ1 = cdrr1(π). Then γ1 is an element of S±
pointers (r2, a1, ⋯, am) is cds-sortable. By Lemma 9.2 the result of applying the sequence
of cdr operations corresponding to (r1, r2, a1, ⋯, am) to π results in cdsr1,r2(β). As the

latter is cds-sortable, so is β.

This completes the proof.

(cid:3)

Example 8.3 continued. We illustrate Theorem 9.5 with π =[1, 3, 5, −2, −6, 4].
As noted earlier, π is cdr sortable and application of cdr(5,6) to π produces γ =[1, 3, 5, 6, 2, 4]
that δ =[1, 2, 3, 5, 6, 4] = cds(1,2),(2,3)(γ). Next, cds(3,4),(4,5) is applicable to δ and produces

to which no further cdr can be applied. Observe that cds(1,2),(2,3) is applicable to γ, and

the identity permutation. The cdr ﬁxed point γ of the signed permutation π is cds sortable.

As a second application of these methods and results we ﬁnd:

Theorem 9.6 (cdr Steps Theorem). Let π be a cdr sortable signed permutation. Suppose
that k applications of cdr produces a cds ﬁxed point β of π, and that m applications of cds
to β results in the identity permutation. Then π is cdr sortable by k + 2m applications of
cdr.

Thus, the number of applications of cdr required to sort a cdr sortable signed permutation

can be computed by indiscriminate applications of cdr and cds.

Theorem 9.6 also ﬁnally explains the 2-to-1 ratio in cdr and cds operations observed in [13]
in constructing phylogenies among diﬀerent Muller elements for several species of fruitﬂies,
and justiﬁes using this ratio in constructing distance matrices towards the phylogenetic
analysis - see pp. 14-15, footnote 11 and for example Figures 9 and 10 of [13].

10. The cdr parity theorem and combinatorial games

It has been proven in [1] that for each permutation, if two sequences of applications of
cds lead to a cds ﬁxed point, then these two sequences have the same length. This fails
for the sorting operation cdr. However, for cdr the parity of the lengths of sequences of
applications of cdr leading to cdr ﬁxed points of a given permutation π is an invariant.

13

Theorem 10.1 (The cdr Parity Theorem). For each signed permutation π, the lengths of
maximal sequences of pointers are of the same parity.

Proof. Let a signed permutation α ∈ S±

n be given.

Case 1: α is cdr sortable: First note that any two total sequences of oriented vertices of the
corresponding overlap graph are of the same length, by Theorem 4.3. Consider two sequences
of pointers, say S1, S2, that each is maximal. Applications of cdr for these pointers thus
result in cdr-ﬁxed points β1 and β2 respectively. By Corollary 8.2 we can extend each
of S1 and S2 individually by two pointers at a time until a total sequence of pointers is
reached, meaning the identity permutation results from applications of cdr. By adding an
even number of terms to a sequence, we do not change the parity of the lengths of these
′ which sort the permutation are the same
sequences. Thus, as the two sequences S1
length, and thus these lengths have same parity, also the lengths of S1 and S2 are the same
parity.

′, S2

Case 2: α is not cdr-sortable. By Theorem 4.2 the overlap graph of α has unoriented compo-
nents. The only pointers to which cdr can be applied are vertices in the oriented components
of the overlap graph of α. Consider some α‘ that has the same move graph as α without
the unoriented component. Then α′ has the same sequences of moves possible as α. As α′
does not have an unoriented component, Case 1 applies, whence lengths of all sequences for
α′ are of the same parity.
(cid:3)

Example 8.3 provides an illustration of the cdr parity phenomenon: cdr ﬁxed points are
reached after 1, 3 or 5 applications of cdr. The cdr Parity Theorem can also be applied to
a question about combinatorial games based on cdr, deﬁned for signed permutations in [1].
In the oriented graph context these games are deﬁned as follows: Let an oriented graph

and so on. The game continues until no more legal moves are possible - i.e., there are no
more oriented vertices left in the graph.

(G, f) on a ﬁnite set of vertices be given. Player ONE starts the game by selecting an
oriented vertex o1 and computing the graph (G1, f1) = gcdr((G, f), o1). Then player TWO
selects an oriented vertex t1 of (G1, f1) and computes the graph (G2, f2) = gcdr((G1, f1), t1),
The normal play rule version of the game is denoted N((G, f), gcdr). In this game, the
player able to make the last legal move wins. In the special case when the graph (G, f) is
the oriented overlap graph of a signed permutation α, this game is denoted N(α, cdr). In
notation for the misere play games is M((G, f), gcdr) or M(α, cdr).

the misere play version, the player making the last legal move looses. The corresponding

Thus, the normal and misere version of the cdr game on signed permutations are solved:
In order to determine who has the winning strategy, just determine the length of a single
play of the game. This shows that decision problems D.6 and D.7 of [1] are linear time
decision problems.

11. The ciliates

According to the model described in [15] the micronuclear precursors of genes in ciliates
should be sortable or reverse sortable by cdr or cds to produce functional genes. For some
indication of the scope of sorting required during ciliate micronuclear decryption, consider
the following data: Findings reported in [4] indicate that at least 3593 genes on 2818 MAC

14

chromosomes of the ciliate Sterkiella histriomuscorum have encrypted micronuclear precur-
sors. Among these encrypted precursors, 1676 contain at least one inverted element. An
example of an encrypted precursor organized into 245 precursor segments is also reported in
[4].

Sample genes from ciliates show that both the cdr and the cds operations are necessary
to sort or reverse sort signed permutations representing micronuclear precursors of genes in
ciliates. We discuss a small sample of micronuclear precursors, and their sortability by cdr
and cds. More examples can be found at the ciliate genome rearrangement database [6].

Example: The Actin I gene

Oxytricha nova: Decryption of the micronuclear precursor of the Actin I gene in the cil-
iate species Oxytricha nova, reported in [10] (see Fig. 3 there), requires sorting of the

signed permutation α = [3, 5, 4, 6, 8, −2, 1, 7]. The overlap graph of α, shown in Fig-

ure 11, has an unoriented component. α is neither cdr sortable, nor cds-sortable, but
requires both cdr and cds for sorting. Applications of cdr terminate in the permutation

(1,2)

(2,3)

(7,8)

(3,4)

(6,7)

(4,5)

(5,6)

Figure 11. The overlap graph of the Actin I micronuclear precursor in O. nova

[−8, −7, −6, −4, −5, −3, −2, −1], which has item −5 out of order. An application of cds
produces the permutation [−8, −7, −6, −5, −4, −3, −2, −1], which represents a functional

Actin I gene in the organism.
Uroleptus pisces: The structures of the micronuclear precursors of the Actin I gene for
U. pisces 1 and U. pisces 2, reported in [7], were given in the introduction. We treat

α1 = [1, 3, −7, −5, 14, 2, 4, 6, 9, 12, −11, −8, 13, 15, −10], the precursor for U. pisces 1.

To determine cdr sortability of α1 we construct the overlap graph of α1, shown in Figure
12.

The overlap graph of α1 is an oriented graph and its only component is oriented. By
Theorem 4.2 α1 is cdr sortable. As the reader may verify, applying cdr in order for the
following ordered length 14 sequence of pointers accomplishes such a sorting:

(4, 5)(3, 4)(2, 3)(5, 6)(6, 7)(1, 2)(7, 8)(8, 9)(9, 10)(11, 12)(12, 13)(13, 14)(14, 15)(10, 11)

By Theorem 4.3 any sequence of applications of cdr that sorts permutation α1 will use
exactly fourteen pointers. But innocent-looking deviations from a sequence of pointers sup-
porting a successful cdr sorting of α1 may result in a failed sorting. For example, if in the
sequence of pointers above right after cdr has been applied to pointer (12,13) it is applied
to pointer (10,11) (supporting a legitimate cdr application at that stage), the result will be
the unsorted permutation

β =[1 2 3 4 5 6 7 8 9 10 11 12 13 15 14]

15

(1,2)

(14,15)

(2,3)

(13,14)

(3,4)

(12,13)

(11,12)

(4,5)

(5,6)

(10,11)

(6,7)

(9,10)

(7,8)

(8,9)

Figure 12. Overlap graph for α1. Filled vertices are oriented.

How does the ciliate decryptome resolve this problem? The cds Rescue Theorem, Theorem
9.5, proves that the cdr ﬁxed points encountered are in fact cds sortable. In this particular

example, cds(13,14),(14,15)(β) is the identity permutation. Thus the cds sorting operation

assures that decryption of α1 does not fail. Moreover, this theorem and the cds Inevitability
Theorem imply that indiscriminate applications of cdr and of cds will succeed in sorting
α1 (and any cdr sortable micronuclear gene pattern).

Example: αTBP gene in O. trifallax

For some permutations that have been reported in extant ciliate species, cds is both nec-
essary and suﬃcient: For example the micronuclear precursor of α Telomere Binding Protein

gene in Oxytricha trifallax is represented by the permutation[1, 3, 5, 7, 9, 11, 2, 4, 6, 8, 10, 12]

has this feature. This permutation was reported in [16].

DNA polymerase α gene in O. trifallax

Likewise, for some signed permutations cdr is both necessary and suﬃcient to sort or
reverse sort the corresponding permutation, and no application of cds would contribute to
its sorting or reverse sorting. For this discussion, deﬁne for each n the signed permutations

σn =[−2n, ⋯, −2, 1, 3, ⋯, 2n − 1, 2n + 1].

and

τn =[−2n, ⋯, −2, 1, 3, ⋯, 2n − 1].

The oriented overlap graph of σn consists of 2n isolated oriented vertices, while the ori-
ented overlap graph of τn consists of 2n − 1 isolated oriented vertices. Observe that any
pointer is eligible for a cdr move, and that this oriented graph has isolated vertices only.
Thus, no applications of cds to any intermediaries contributes to the sorting process. The
signed permutations σn and τn also have the feature that for any selection of a pointer, a
corresponding application of cdr can be performed. Each σn is cdr sortable, while each τn
is cdr reverse-sortable.

16

These permutations, intriguingly, occur in the micronuclear precursors of macro nuclear
genes of certain ciliate species. For some species of Uroleptus, the DNA polymerase α gene
is σ16, while for Paraurystola weissei the same precursor is σ20.
In Oxytricha nova the
micronuclear precursor is τ21. In Oxytricha trifallax the micronuclear precursor is σ21. Ac-
cession numbers for these DNA polymerase α macronuclear and corresponding micronuclear
precursors in [9] are

Species
Uroleptus
Paraurystola weissei Y293806
Oxytricha trifallax

EF693893.1

Macronuclear Micronuclear
AY293852

AY293850
AY293805
DQ525914.1

12. Concluding Remarks

Unless the applications of cdr operations during micronuclear decryption follow a strategy
not yet discovered in the laboratory, it should be expected that cdr ﬁxed points other than
the identity are often encountered among intermediates of the decryption process. It would
be interesting to determine whether cdr ﬁxed points of cdr sortable micronuclear gene
patterns actually do occur among intermediates of the decryption process.

Results reported in [4] (see Figure 3 A, B and C of [4]) suggests that the model of [14, 15]
based on just the cdr and cds sorting operations might require an additional operation to
successfully sort newly observed encryption patterns. The permutation representing the red
micronuclear precursor in Figure 3 B, and the permutation representing the gold micronuclear
precursor in Figure 3 C are cds ﬁxed points. It would be interesting to learn how these two
particular micronuclear precursors are in fact processed by the ciliate decryptome. In [8] and
some earlier papers it is assumed that besides cdr and cds, there is an additional sorting
operation, boundary ld, that would sort a cds ﬁxed point to the identity permutation. To our
knowledge it has not been experimentally conﬁrmed that this operation occurs during ciliate
micronuclear decryption, nor has a satisfactory molecular mechanism for this operation in
combination with cdr and cds been described.

References

[1] K. Adamyk, E. Holmes, G. Mayﬁeld, D.J. Moritz, M. Scheepers, B.E. Tenner and H. Wauck, Sorting

permutations: Games, genomes and cycles, arXiv1410.2353

[2] A. Bergeron, A very elementary presentation of the Hannenhalli-Pevzner theory, Discrete Applied

Mathematics 146:2 (2005), 134 - 145

[3] A. Bergeron, S. Heber and J. Stoye, Common intervals and sorting by reversals: a marriage of necessity,

Bioinformatics 18:2 (2002), S54 - S63.

[4] X. Chen, J.R. Bracht, A.D. Goldman, E. Dolzhenko, D.M. Clay, E.C. Swart, D.H. Perlman, T.G. Doak,
A. Stuart, C.T. Amemiya, R.P. Sebra, and L.F. Landweber, The Architecture of a Scrambled Genome
Reveals Massive Levels of Genomic Rearrangement during Development, Cell 158 (2014), 1187–1198

[5] D.A. Christie, Sorting permutations by block-interchanges, Information Processing Letters 60 (1996),

165 - 169.

[6] Ciliate Genome Rearrangement Database, http://oxytricha.princeton.edu/mds ies db/index.html.
[7] A.B. Dalby and D.M. Prescott, The scrambled Actin I gene in Uroleptus pisces, Chromosoma 112

(2004) , 247 - 254.

[8] A. Ehrenfeucht, T. Harju, I. Petre, D. M. Prescott, and G. Rozenberg, Computation in Living Cells:

Gene Assembly in Ciliates, Springer: Natural Computing Series, 2003.

17

[9] GenBank, a database of the National Center for Biotechnology Information, maintained electronically at

http://www.ncbi.nlm.nih.gov/genbank/

[10] A.F. Greslin, D.M. Prescott, Y. Oka, S.H. Loukin and J.C. Chappell, Reordering of nine exons is
necessary to for a functional Actin gene in Oxytricha nova, Proceedings of the National Academies
of Science of the United States of America 86:16 (1989), 6264 - 6268.

[11] S. Hannenhalli and P.A. Pevzner, Transforming cabbage into turnip: Polynomial algorithm for sorting

signed permutations by reversals, Journal of the ACM 46:1 (1999), 1 - 27.

[12] I. Harju, T. Petre and G. Rozenberg, Two models for gene assembly in ciliates, Turku Centre for

Computer Science Technical Reports 406, 2004

[13] J. Herlin, A. Nelson and M. Scheepers, Using Ciliate Operations to construct Chromosome Phylogenies,

Involve 9:1 (2016), 1 - 26.

[14] D.M. Prescott, A. Ehrenfeucht and G. Rozenberg, Molecular operations for DNA processing in hypotri-

chous ciliates, European Journal of Protistology 37 (2001), 241 - 260.

[15] D.M. Prescott, A. Ehrenfeucht and G. Rozenberg, Template-guided recombination for IES elimination
and unscrambling of genes in stichotrichous ciliates, Journal of Theoretical Biology 222 (2003), 323 -
330.

[16] J.D. Prescott, M.L. DuBois and D.M. Prescott, Evolution of the scrambled germline germline gene

encoding α-telomere binding protein in three hypotricous ciliates, Chromosoma 107 (1998), 293 - 303.

[17] A.H. Sturtevant and Th. Dobzhansky, Inversions in the third chromosome of wild races of Drosophila
pseudoobscura, and their use in the study of the history of the species, Proceedings of the National Academy
of Sciences 22 (1936) 448 – 450.

[18] E. Tannier, A. Bergeron and M-F. Sagot, Advances on sorting by reversals, Discrete Applied Math-

ematics 155 (2007), 881 - 888.

18

