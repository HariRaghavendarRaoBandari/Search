6
1
0
2

 
r
a

M
7

 

 
 
]

.

R
G
h
t
a
m

[
 
 

1
v
8
2
3
2
0

.

3
0
6
1
:
v
i
X
r
a

Cryptosystems Using Automorphisms of Finitely

Generated Free Groups

Anja I. S. Moldenhauer and Gerhard Rosenberger

Fachbereich Mathematik, Universität Hamburg,

Bundesstrasse 55, 20146 Hamburg, Germany

anja.moldenhauer@uni-hamburg.de, gerhard.rosenberger@math.uni-hamburg.de

Abstract. This paper introduces a newly developed private key cryp-
tosystem and a public key cryptosystem. In the ﬁrst one, each letter
is encrypted with a diﬀerent key. Therefore, it is a kind of a one-time
pad. The second one is inspired by the ElGamal cryptosystem. Both
presented cryptosystems are based on automorphisms of free groups.
Given a free group F of ﬁnite rank, the automorphism group Aut(F )
can be generated by Nielsen transformations, which are the basis of a
linear technique to study free groups and general inﬁnite groups. There-
fore Nielsen transformations are introduced.

Keywords: private key cryptosystem, public key cryptosystem, free
group F of ﬁnite rank, automorphism group Aut(F ), Nielsen transfor-
mations, Whitehead-Automorphisms.

Dedicated to Gabriele Kern-Isberner on the occasion of her 60th birthday1.

1 Introduction

The topic of this paper is established in the area of mathematical cryptology,
more precisely in group based cryptology. We refer to the books [1], [7] and
[13] for the interested reader. The books [1] and [7] can also be used for a ﬁrst
access to the wide area of cryptology.

We introduce two cryptosystems, the ﬁrst one is a private key cryptosystem
(one-time pad) and the second one is a public key cryptosystem. We require
that the reader is familiar with the general concept of these types of protocols.
In cryptology it is common to call the two parties who want to communicate
privately with each other Alice and Bob.
i of ﬁnite rank.
Throughout the paper let F always be a free group F = hX |
Both cryptosystems are based on free groups F of ﬁnite rank and automor-
phisms of F . It is known that the group of all automorphisms of F , Aut(F ),
can be generated by Nielsen transformations (see [3]).

We ﬁrst review some basic deﬁnitions concerning regular Nielsen transfor-
mations and Nielsen reduced sets and we give additional information which is

1 This article appeared 2016 in College Publications Tributes Volume 29: Compu-
tational Models of Rationality Essays Dedicated to Gabriele Kern-Isberner on
the Occasion of Her 60th Birthday.

2

Anja I. S. Moldenhauer and Gerhard Rosenberger

also important for the understanding of the paper.
Both cryptosystems use automorphisms of a free group F of ﬁnite rank. Thus,
a random choice of these automorphisms is practical. An approach for this
random choice using the Whitehead-Automorphisms is given. Therefore, the
Whitehead-Automorphisms are reviewed. Note, that the Whitehead-Automor-
phisms generate the Nielsen transformations and vice versa, but the use of the
Whitehead-Automorphisms is more practical if a random choice of automor-
phisms is required.
After this, a private key cryptosystem using Nielsen transformations and Nielsen
reduced sets is introduced. An example and a security analysis for this private
key cryptosystem is given. Finally we explain a public key cryptosystem which
is inspired by the ElGamal cryptosystem, from which we describe two variations
and give an example.

The new cryptographic protocols are in part in the dissertation [12] of
A. Moldenhauer under her supervisor G. Rosenberger at the University of Ham-
burg.

2 Preliminaries for Automorphisms of Free Groups

We now review some basic deﬁnitions concerning regular Nielsen transforma-
tions and Nielsen reduced sets and we give additional information which will
be used later on (see also [3], [9] or [10]).

Let F be a free group on the free generating set X := {x1, x2, . . . , xq} and
let U := {u1, u2, . . . , ut} ⊂ F , q, t ≥ 2. A freely reduced word in X is a
word in which the symbols xǫ
, for ǫ = ±1 and i = 1, 2, . . . , q, do not
occur consecutively. We call q the rank of F . The free generating set X is also
called a basis of F . The elements ui are freely reduced words with letters in
X±1 := X ∪ X−1, with X−1 := {x−1

2 , . . . , x−1
q }.

1 , x−1

i , x−ǫ

i

i

;

Deﬁnition 1.
An elementary Nielsen transformation on
U = {u1, u2, . . . , ut} ⊂ F is one of the following transformations
(T1) replace some ui by u−1
(T2) replace some ui by uiuj where j 6= i;
(T3) delete some ui where ui = 1.
In all three cases the uk for k 6= i are not changed. A (ﬁnite) product of elemen-
tary Nielsen transformations is called a Nielsen transformation. A Nielsen
transformation is called regular if it is a ﬁnite product of the transformations
(T1) and (T2), otherwise it is called singular. The regular Nielsen transfor-
mations generate a group. The set U is called Nielsen-equivalent to the set
V , if there is a regular Nielsen transformation from U to V . Nielsen-equivalent
sets U and V generate the same group, that is, hUi = hV i.

Now, we agree on some notations. We write (T 1)i if we replace ui by u−1
and we write (T 2)i.j if we replace ui by uiuj. If we want to apply the same
Nielsen transformation (T 2) consecutively t-times we write [(T 2)i.j]t and hence
replace ui by uiut

j. In all cases the uk for k 6= i are not changed.

i

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

3

Deﬁnition 2.
A ﬁnite set U in F is called Nielsen reduced, if for any three elements
v1, v2, v3 from U±1 the following conditions hold:

(N0) v1 6= 1;
(N1) v1v2 6= 1 implies |v1v2| ≥ |v1|,|v2|;
(N2) v1v2 6= 1 and v2v3 6= 1 implies |v1v2v3| > |v1| − |v2| + |v3|.

Here |v| denotes the free length of v ∈ F , that is, the number of letters from
X±1 in the freely reduced word v.

Remark 1. We say that any word w with ﬁnitely many letters from X±1 has
length L if the number of letters occurring is L. The length of a word w is
greater than or equal to the free length of the word w. For freely reduced words
the length and the free length are equal. If a word w is not freely reduced then
the length is greater than the free length of w.

Proposition 1. [3, Theorem 2.3] or [9, Proposition 2.2]
If U = {u1, u2, . . . , um} is ﬁnite, then U can be carried by a Nielsen transfor-
mation into some V such that V is Nielsen reduced. We have rank(hV i) ≤ m.
Proposition 2. [10, Corollary 3.1]
Let H be a ﬁnitely generated subgroup of the free group F on the free generating
set X. Let U = {u1, u2, . . . , ut}, ui words in X, be a Nielsen reduced set. Then,
out of all systems of generators for H, the set U has the shortest total x-length,
that is Pt
Remark 2. If FV is a ﬁnitely generated subgroup of F = hX |
i, with free
generating set V = {v1, v2, . . . , vN}, vi words in X, then there exist only ﬁnitely
many Nielsen reduced sets Ui = {ui1, ui2, . . . , uiN}, i = 1, 2, . . . , ℓ, to V , which
are Nielsen-equivalent. With the help of a lexicographical order <lex (see for
instance [3, Proof of Satz 2.3]) the smallest set Us, in the set of all Nielsen
reduced sets U V
N red := {U1, U2, . . . , Uℓ} to V , can be uniquely marked. With
the use of regular Nielsen transformations it is possible to obtain this marked
set Us starting from any arbitrary set in U V

i=1 |ui|.

N red.

Proposition 3. [3, Korollar 2.10]
Let F be the free group of rank q. Then, the group of all automorphisms of
F , Aut(F), is generated by the elementary Nielsen transformations (T1) and
(T2).
More precisely: Each automorphism of F is describable as a regular Nielsen
transformation between two bases of F , and, each regular Nielsen transforma-
tion between two bases of F deﬁnes an automorphism of F .

Remark 3. In [16] an algorithm, using elementary Nielsen transformations, is
presented which, given a ﬁnite set S of m words of a free group, returns a set S′
of Nielsen reduced words such that hSi = hS′i; the algorithm runs in O(ℓ2m2)
time, where ℓ is the maximum length of a word in S.

Theorem 1. [3, Satz 2.6]
Let U be Nielsen reduced, then hUi is free on U .

4

Anja I. S. Moldenhauer and Gerhard Rosenberger

2|w| < |s| ≤ 1

2|w| − 1 ≤ |s′| < 1

For the next lemma we need some notations. Let w 6= 1 be a freely reduced
word in X. The initial segment s of w which is “a little more than half” of w
(that is, 1
2|w| + 1) is called the major initial segment of w. The
minor initial segment of w is that initial segment s′ which is “a little less
than half” of w (that is, 1
2|w|). Similarly, major and minor
terminal segments are deﬁned.
If the free length of the word w is even, we call the initial segment s of w, with
|s| = 1
2|w| the left half of w. Analogously, we call the terminal segment s′ of
w with |s′| = 1
Let {w1, w2, . . . , wn} be a set of freely reduced words in X, which are not the
identity. An initial segment of a w-symbol (that is, of either wi or w−1
, which
are diﬀerent w-symbols) is called isolated if it does not occur as an initial
segment of any other w-symbol. Similarly, a terminal segment is isolated if it
is a terminal segment of a unique w-symbol.

2|w| the right half of w.

i

Lemma 1. [10, Lemma 3.1]
Let M := {w1, w2, . . . , wm} be a set of freely reduced words in X with wj 6= 1,
1 ≤ j ≤ m. Then M is Nielsen reduced if and only if the following conditions
are satisﬁed:

isolated.

1. Both the major initial and major terminal segments of each wi ∈ M are
2. For each wi ∈ M of even free length, either its left half or its right half is

isolated.

Deﬁnition 3.
Let F be a free group of rank q and let G be a free subgroup of F with rank m.
An element g ∈ G is called a primitive element of G, if a basis U of G with
g ∈ U exists.
Proposition 4. [14]
The number of primitive elements of free length k of the free group
i (and therefore, in any group Fq = hx1, x2, . . . , xq |
F2 = hx1, x2 |
is:
3√3 · (√3)k if k is odd;
3 · (√3)k if k is even.

1. more than 8
2. more than 4

i, q ≥ 2)

Theorem 2. [2]
If P (q, k) is the number of primitive elements of free length k of the free group
Fq = hx1, x2, . . . , xq |

i, q ≥ 3, then for some constants c1, c2, we have

c1 · (2q − 3)k ≤ P (q, k) ≤ c2 · (2q − 2)k.

Deﬁnition 4. [15]
A subgroup H of F is called characteristic in F if ϕ(H) = H for every
automorphism ϕ of F .

For n ∈ N let Zn := Z/nZ be the ring of integers modulo n. The corresponding

residue class in Zn for an integer β is denoted by β (see also [1]).

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

5

Deﬁnition 5. [1]
Let n ∈ N and β, γ ∈ Zn. A bijective mapping h : Zn → Zn given by x 7→ βx+ γ
is called a linear congruence generator.

Theorem 3. [1] (Maximal period length for n = 2m, m ∈ N)
Let n ∈ N, with n = 2m, m ≥ 1 and let β, γ ∈ Z such that h : Zn → Zn, with
x 7→ βx + γ, is a linear congruence generator. Further let α ∈ {0, 1, . . . , n − 1}
be given and x1 = α, x2 = h(x1), x3 = h(x2), . . ..
Then the sequence x1, x2, x3, . . . is periodic with maximal periodic length n = 2m
if and only if the following holds:

1. β is odd.
2. If m ≥ 2 then β ≡ 1 (mod 4).
3. γ is odd.

Theorem 4. [8]
Let F be a free group with countable number of generators x1, x2, . . .. Corre-
sponding to xj deﬁne

−rj (cid:19)
Mj =(cid:18)−rj −1 + r2

1

j

with rj ∈ Q and

rj+1 − rj ≥ 3
r1 ≥ 2.

Then G* generated by {M1, M2, . . .} is isomorphic to F .

3 The Random Choice of the Automorphisms of Aut(F )

i be the free group on the free generating set X with |X| = q.
Let F = hX |
The cryptosystems we develop are based on automorphisms of F . These au-
tomorphisms should be chosen randomly. It is known, see Proposition 3, that
the Nielsen transformations generate the automorphism group Aut(F ). For a
realization of a random choice procedure the Whitehead-Automorphisms will
be used.

A ﬁxed set of randomly chosen automorphisms is part of the key space for

the private key cryptosystem.

Deﬁnition 6. Whitehead-Automorphisms:

1. Invert the letter a and leave all other letters invariant:

ia(b) =(a−1

b

for a = b
for b ∈ X \ {a}.

There are q Whitehead-Automorphisms of this type.

6

Anja I. S. Moldenhauer and Gerhard Rosenberger

2. Let a ∈ X and L, R, M be three pairwise disjoint subsets of X, with a ∈ M .

Then the tuple (a, L, R, M ) deﬁnes a Whitehead-Automorphisms
W(a,L,R,M) as follows

W(a,L,R,M)(b) =


ab
ba−1
aba−1
b

for b ∈ L
for b ∈ R
for b ∈ M
for b ∈ X \ (L ∪ M ∪ R).

There are q · 4q−1 automorphisms of this type.
Note, that W −1
(a,L,R,M) = ia ◦ W(a,L,R,M) ◦ ia.

With this deﬁnition it is clear how the Whitehead-Automorphisms can
be generated as a product of regular Nielsen transformations. Conversely, the
Whitehead-Automorphisms generate the group of the Nielsen transformations
and therefore also the automorphism group Aut(F ) (see also [4]). With the
Whitehead-Automorphisms it is simple to realize a random choice of automor-
phisms. We now give an approach for this choice.

An approach for choosing randomly automorphisms of Aut(F ):

Let X = {x1, x2, . . . , xq} be the free generating set for the free group F .

1. First of all it should be decided in which order an automorphism fi is
generated by automorphisms of type ia and W(a,L,R,M). For this purpose
an automorphism of type ia is identiﬁed with a zero and W(a,L,R,M) with
a one. A sequence of zeros and ones is randomly generated. This sequence
is translated to randomly chosen Whitehead-Automorphisms and hence
presents an automorphism fi ∈ Aut(F ). This translation is as follows:
2.1. For a zero in the sequence we generate ia randomly: choose a random
number z, with 1 ≤ z ≤ q; hence an element a ∈ X must be chosen to
declare the automorphism. Then it is a := xz and hence xz is replaced by
x−1
z

and all other letters are invariant.

2.2. For a one in the sequence we generate W(a,L,R,M) randomly: choose a ran-
dom number z, with 1 ≤ z ≤ q. Hence it is a := xz. Moreover it is a ∈ M .
After this the disjoint sets L, R, M ⊂ X are chosen randomly. One possible
approach is the following:
(a) Choose random numbers z1, z2 and z3 with

0 ≤ z1 ≤ q − 1,
0 ≤ z2 ≤ q − 1 − z1,
0 ≤ z3 ≤ q − 1 − z1 − z2.

If we are in the situation of z1 = z2 = z3 = 0 we get the identity idX .
If this case arises a random number ˜z from the set {1, 2, . . . , q} \ {z}
is chosen and hence the element x˜z is assigned randomly to one of the
sets L, R or M ; therefore the identity is avoided.

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

7

It is

|L| = z1,

|R| = z2,

|M| = z3 + 1.

(b) Choose z1 pairwise diﬀerent random numbers {r1, r2, . . . , rz1} of the

set {1, 2, . . . , q} \ {z}. Then L is the set

L = {xr1, xr2 , . . . , xrz1}.

(c) Choose z2 pairwise diﬀerent random numbers {p1, p2, . . . , pz2} of the

set {1, 2, . . . , q} \ ({z} ∪ {r1, r2, . . . , rz1}). Then R is the set

R = {xp1 , xp2 , . . . , xpz2}.

(d) Choose z3 pairwise diﬀerent random numbers {t1, t2, . . . , tz3} of the set
{1, 2, . . . , q}\ ({z} ∪ {r1, r2, . . . , rz1} ∪ {p1, p2, . . . , pz2}). Then M is the
set

M = {xt1 , xt2 , . . . , xtz3} ∪ {a}.

Remark 4. If Alice and Bob use Whitehead-Automorphisms to generate auto-
morphisms on a free group with free generating set X they should take care,
that there are no sequences of the form

1. ia ◦ ia = idX ,
2. W(a,L,R,M) ◦ ia ◦ W(a,L,R,M) ◦ ia
|
}

{z
◦W(a,L,R,M) = idX ,

=W −1

(a,L,R,M )

= idX

or

ia ◦ W(a,L,R,M) ◦ ia
}
|

{z

=W −1

(a,L,R,M )

for the automorphism fj. They also should not use Whitehead-Automorphisms
sequences for fj, which cancel each other and so be vacuous for the encryption.

4 Private Key Cryptosystem Based on Automorphisms

of Free Groups F

Before Alice and Bob are able to communicate with each other, they have to
make some arrangements.

They ﬁrst agree on the public parameters.

Public Parameters

1. A free group F with free generating set X = {x1, x2, . . . , xq}, with q ≥ 2.
2. A plaintext alphabet A = {a1, a2, . . . , aN}, with N ≥ 2.
3. A subset Faut := {f1, f2, . . . , f2128} ⊂ Aut(F ) of automorphisms of F is
chosen. It is fi : F → F and the fi, i = 1, 2, . . . , 2128, pairwise diﬀerent, are
generated with the help of 0-1-sequences (of diﬀerent length) and random
numbers as described in Section 3. The set Faut is part of the key space.

8

Anja I. S. Moldenhauer and Gerhard Rosenberger

4. They agree on a linear congruence generator h : Z2128 → Z2128 with a

maximal period length (see Deﬁnition 5 and Theorem 3).

Remark 5. If the set Faut and the linear congruence generator h are public
Alice and Bob are able to change the automorphisms and the generator publicly
without a private meeting. The set Faut should be large enough to make a brute
force search ineﬀective.
Another variation could be, that Alice and Bob choose the number of elements
in the starting set Faut smaller than 2128, say for example 210. These starting
automorphism set Faut should be chosen privately by Alice and Bob as their
set of seeds and should not be made public. Then Alice and Bob can extend
publicly the starting set Faut to the set Faut1 of automorphisms such that Faut1
contains, say for example, 232 automorphisms. The number of all elements
in Faut1 should make a brute force attack ineﬃcient. The linear congruence
generator stays analogously, just the domain and codomain must be adapted
to, say for example, Z232 . Because of Theorem 3 Alice and Bob get at all times
a linear congruence generator with maximal periodic length.

Now they agree on the private parameters.

Private Parameters

1. A free subgroup FU of F with rank N and the free generating set

U = {u1, u2, . . . , uN} is chosen where U is a minimal Nielsen reduced set
(with respect to a lexicographical order) and the ui freely reduced words in
X. Such systems U are easily to construct using Theorem 1 and Lemma 1
(see also [3] and [9]). It is UN red the set of all minimal Nielsen reduced sets
with N elements in F , which is part of the key space.

2. They use a one to one correspondence

A → U
aj 7→ uj

for j = 1, . . . , N.

3. Alice and Bob agree on an automorphism fα ∈ FAut, hence α is the common
secret starting point α ∈ {0, 1, . . . , 2128 − 1}, with x1 = α ∈ Z2128 , for the
linear congruence generator. With this α they are able to generate the
sequence of automorphisms of the set Faut, which they use for encryption
and decryption, respectively.

The key space: The set UN red of all minimal (with respect to a lexico-
graphical order) Nielsen reduced subsets of F with N elements. The set FAut
of 2128 randomly chosen automorphisms of F .

Protocol

Now we explain the protocol and look carefully at the steps for Alice and

Bob.

Public knowledge: F = hX |

i, X = {x1, x2, . . . , xq} with q ≥ 2;
plaintext alphabet A = {a1, a2, . . . , aN} with N ≥ 2; the set FAut; a linear

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

9

congruence generator h.

Encryption and Decryption Procedure:

1. Alice and Bob agree privately on a set U ∈ UN red and an automorphism
fα ∈ FAut. They also know the one to one correspondence between U and
A.

2. Alice wants to transmit the message

S = s1s2 ··· sz,

z ≥ 1,

with si ∈ A to Bob.
2.1. Alice generates with the linear congruence generator h and the knowledge
of fα the z automorphisms fx1, fx2, . . . , fxz , which she needs for encryption.
It is x1 = α, x2 = h(x1), . . . , xz = h(xz−1).

2.2. The encryption is as follows

if si = at

then si 7→ ci := fxi(ut),

1 ≤ i ≤ z,

1 ≤ t ≤ N.

Recall that the one to one correspondence A → U with aj 7→ uj, for
j = 1, 2, . . . , N , holds. The ciphertext

C = fx1(s1)fx2(s2)··· fxz (sz)

= c1c2 ··· cz

is sent to Bob. We call cj the ciphertext units. We do no cancellations
between ci and ci+1, for 1 ≤ i ≤ z − 1.

3. Bob gets the ciphertext

C = c1c2 ··· cz,

and the information that he has to use z automorphisms of F from the set
FAut for decryption. He has now two possibilities for decryption.
3.1.a. With the knowledge of fα, the linear congruence generator h and the num-
ber z, he computes for each automorphism fxi, i = 1, 2, . . . , z, the inverse
automorphism f−1
xi .

3.1.b. With the knowledge of fα, the set U = {u1, u2, . . . , uN}, the linear congru-
ence generator h and the number z, he computes for each automorphism fxi,
i = 1, 2, . . . , z, the set

Ufxi

= {fxi(u1), fxi(u2), . . . , fxi(uN )}.

Hence, with the one to one correspondence between U and A, he gets a one
to one correspondence between the letters in the alphabet A and the words
of the ciphertext depending on the automorphisms fxi. This is shown in
Table 1.

10

Anja I. S. Moldenhauer and Gerhard Rosenberger

Table 1. Plaintext alphabet A = {a1, a2, . . . , aN } corresponded to ciphertext alpha-
bet Ufxi

depending on the automorphisms fxi

Ufx1

Ufx2

· · ·

Ufxz

a1 fx1 (u1) fx2 (u1)

a2 fx1 (u2) fx2 (u2)

...

...

...

· · ·

· · ·

· · ·

fxz (u1)

fxz (u2)

...

aN fx1 (uN ) fx2 (uN )

· · ·

fxz (uN )

3.2. With the knowledge of the Table 1 or the inverse automorphisms f−1
xi ,

respectively, the decryption is as follows

if ci = fxi(ut)

then ci 7→ si := f−1

xi (ci) = at,

1 ≤ i ≤ z,

1 ≤ t ≤ N.

He generates the plaintext message

S = f−1

x1 (c1)f−1
= s1s2 ··· sz,

x2 (c2)··· f−1

xz (cz)

with si ∈ A, from Alice.

Remark 6. The cryptosystem is a polyalphabetic system. A word ui ∈ U , and
hence a letter ai ∈ A, is encrypted diﬀerently at diﬀerent places in the plaintext.
Example 1. This example was executed with the help of the computer program
GAP and the package “FGA2”.

First Alice and Bob agree on the public parameters.

plaintext alphabet.

1. Let F be the free group on the free generating set X = {a, b, c, d}.
2. Let ˜A := {a1, a2, . . . , a12} = {A, E, I, O, U, T, M, L, K, Y, B, N} be the
3. A set FAut is determined. In this example we give the automorphisms,
which Alice and Bob use for encryption and decryption, respectively, just
at the moment when they are needed.

4. The linear congruence generator with maximal periodic length is

h : Z2128 → Z2128

x 7→ 5x + 3.

2 Free Group Algorithms, a GAP4 Package by Christian Sievers, TU Braunschweig.

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

11

The private parameters for this example are:

1. The free group F ˜U of F with the free generating set

˜U ={u1, u2, . . . , u12}

={ba2, cd, d2c−2, a−1b, a4b−1, b3a−2, bc3, bc−1bab−1,

c2ba, c2dab−1, a−1d3c−1, a2db2d−1}.

It is known, that ai 7→ ui, i = 1, 2, . . . , 12, for ui ∈ ˜U and ai ∈ ˜A. The set
˜U is a Nielsen reduced set and the group F ˜U has rank 12. Alice and Bob
agree on the starting automorphism f93, hence it is x1 = α = 93.

We look at the encryption and decryption procedure for Alice and

Bob.

2. With the above agreements Alice is able to encrypt her message

S = I LIKE BOB.

Her message is of length 8. She generates the ciphertext as follows:

2.1. She ﬁrst determines, with the help of the linear congruence generator h,
the automorphisms fxi, i = 1, 2, . . . , 8, which she needs for encryption. It
is

=

93,

x1 = α
x4 = h(x3) = 11718,
x7 = h(x6) =1464843,

468,

x2 = h(x1) =
x5 = h(x4) = 58593,
x8 = h(x7) =7324218.

x3 = h(x2) = 2343,
x6 = h(x5) =292968,

The automorphisms are described with the help of regular Nielsen trans-
formations, it is

fx1= (N 1)3(N 2)1.4(N 2)4.3(N 2)2.3(N 1)3(N 2)1.4(N 2)3.1,

fx1 : F → F

a 7→ ad2c−1, b 7→ bc−1, c 7→ cad2c−1, d 7→ dc−1;

fx2= (N 2)1.4(N 1)2(N 2)2.4(N 2)3.1(N 1)2(N 1)1(N 2)1.3[(N 2)4.3]2(N 1)3,

fx2 : F → F

a 7→ d−1a−1cad, b 7→ d−1b, c 7→ d−1a−1c−1, d 7→ d(cad)2;

fx3= (N 1)2(N 2)4.2(N 1)4(N 2)2.4(N 1)2(N 2)4.2(N 1)3(N 2)2.1(N 2)3.2

[(N 2)1.4]3(N 1)2(N 2)4.2,

fx3 : F → F

a 7→ ab3, b 7→ a−1d−1, c 7→ c−1da, d 7→ ba−1d−1;

fx4= [(N 2)3.1]2(N 1)2[(N 2)2.1]3(N 2)2.4(N 2)4.2(N 2)1.3,

fx4 : F → F

a 7→ aca2, b 7→ b−1a3d, c 7→ ca2, d 7→ db−1a3d;

12

Anja I. S. Moldenhauer and Gerhard Rosenberger

fx5= (N 2)1.2(N 1)3(N 1)1[(N 2)4.3]2(N 2)1.2(N 1)2(N 1)3(N 2)2.4(N 2)3.1,

fx5 : F → F

a 7→ b−1a−1b, b 7→ b−1dc−2, c 7→ cb−1a−1b, d 7→ dc−2;

fx6= (N 1)1(N 2)2.3(N 2)3.1(N 1)2(N 2)1.2(N 2)4.2,

fx6 : F → F

a 7→ a−1c−1b−1, b 7→ c−1b−1, c 7→ ca−1, d 7→ dc−1b−1;

fx7= [(N 2)2.1]3(N 1)3[(N 2)4.3]3(N 1)1(N 2)1.2(N 1)2(N 2)2.4(N 2)3.1,

fx7 : F → F

a 7→ a−1ba3, b 7→ a−3b−1dc−3, c 7→ c−1a−1ba3, d 7→ dc−3;

fx8= (N 2)1.4(N 1)2(N 1)3(N 2)2.1[(N 2)3.4]2(N 1)4(N 1)1(N 1)3(N 2)4.2,

fx8 : F → F

a 7→ d−1a−1, b 7→ b−1ad, c 7→ d−2c, d 7→ d−1b−1ad.

Note, that the regular Nielsen transformations are applied from the left
to the right.

2.2 The ciphertext is now

C =fx1(I)fx2 (L)fx3 (I)fx4(K)fx5(E)fx6(B)fx7 (O)fx8(B)

=fx1(d2c−2)fx2(bc−1bab−1)fx3(d2c−2)fx4(c2ba)fx5(cd)fx6(a−1d3c−1)

fx7(a−1b)fx8(a−1d3c−1)
=dc−1d−1a−1d−2a−1c−1 ≀ d−1bcabd−1a−1cadb−1d ≀
(ba−1d−1)2(a−1d−1c)2 ≀ (ca2)2b−1a3daca2 ≀ cb−1a−1bdc−2≀
bca(dc−1b−1)3ac−1 ≀ a−1(a−2b−1)2dc−3 ≀ (ab−1)3adc−1d2
=c1c2c3c4c5c6c7c8.

The symbol “ ≀” marks the end of a ciphertext unit ci.

3. Bob gets the ciphertext

C =dc−1d−1a−1d−2a−1c−1 ≀ d−1bcabd−1a−1cadb−1d ≀

(ba−1d−1)2(a−1d−1c)2 ≀ (ca2)2b−1a3daca2 ≀ cb−1a−1bdc−2≀
bca(dc−1b−1)3ac−1 ≀ a−1(a−2b−1)2dc−3 ≀ (ab−1)3adc−1d2

from Alice. Now he knows, that he needs eight automorphisms for decryp-
tion.
3.1. Bob knows the set U , the linear congruence generator h and the starting
seed automorphism f93. For decryption he uses tables (analogously to
Table 1).
,
Now, he is able to compute for each automorphism fxi the set Ufxi
i = 1, 2, . . . , 8, and to generate the tables Table 2, Table 3, Table 4 and
Table 5.

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

13

Table 2. Correspondence: plaintext alphabet to ciphertext alphabet I

Ufx1

Ufx2

A

E

I

O

U

T

M

L

K

Y

b(c−1ad2)2c−1

cad(dc−1)2

d−1bd−1a−1c2ad

d−1a−1c−1(dca)2d

dc−1d−1a−1d−2a−1c−1

((dca)2d)2cadcad

cd−2a−1bc−1

d−1a−1c−1ab

(ad2c−1)3ad2b−1

d−1a−1c4adb−1d

(bc−1)2bd−2a−1cd−2a−1

(d−1b)3d−1a−1c−2ad

b(ad2)3c−1

d−1b(d−1a−1c−1)3

bd−2a−1c−1bc−1ad2b−1

d−1bcabd−1a−1cadb−1d

c(ad2)2c−1bc−1ad2c−1

(d−1a−1c−1)2d−1bd−1a−1cad

c(ad2)2c−1dc−1ad2b−1

(d−1a−1c−1)2dcadc2adb−1d

B cd−2a−1(dc−1)2d−1a−1c−1

d−1a−1c−1(ad2cadc)3adcad

N

(ad2c−1)2d(c−1b)2d−1

d−1a−1c2ad(dca)2bd−1b(d−1a−1c−1)2d−1

Table 3. Correspondence: plaintext alphabet to ciphertext alphabet II

Ufx3

Ufx4

A

E

I

O

U

T

M

L

K

Y

a−1d−1(ab3)2

c−1daba−1d−1

b−1a3d(aca2)2

ca2db−1a3d

(ba−1d−1)2(a−1d−1c)2

(db−1a3d)2a−2c−1a−2c−1

b−3a−2d−1

(ab3)4da

a−2c−1a−1b−1a3d

(aca2)4d−1a−3b

(a−1d−1)3(b−3a−1)2

(b−1a3d)3a−2c−1a−3c−1a−1

a−1d−1(c−1da)3

b−1a3d(ca2)3

(a−1d−1)2ca−1d−1ab3da b−1a3da−2c−1b−1a3daca2d−1a−3b

c−1dac−1ab3

(ca2)2b−1a3daca2

(c−1da)2ba−1d−1ab3da

(ca2)2db−1a3daca2d−1a−3b

B b−3a−1(ba−1d−1)3a−1d−1c

a−2c−1a−1(db−1a3d)3a−2c−1

N

(ab3)2b(a−1d−1)2b−1

aca3c(a2db−1a)2a2

14

Anja I. S. Moldenhauer and Gerhard Rosenberger

Table 4. Correspondence: plaintext alphabet to ciphertext alphabet III

Ufx5

Ufx6

A

E

I

O

U

T

M

b−1dc−2b−1a−2b

(c−1b−1a−1)2c−1b−1

cb−1a−1bdc−2

ca−1dc−1b−1

dc−2dc−1(c−1b−1ab)2c−1

(dc−1b−1)2ac−1ac−1

b−1adc−2

bcac−1b−1

b−1a−4bc2d−1b

(a−1c−1b−1)3a−1

(b−1dc−2)3b−1a2b

(c−1b−1)2abca

b−1dc−1(b−1a−1bc)2b−1a−1b

c−1b−1(ca−1)3

L b−1dc−2b−1abc−1b−1dc−2b−1a−1bc2d−1b

c−1b−1ac−2b−1a−1

K

Y

B

N

cb−1a−1bcb−1a−1dc−2b−1a−1b

ca−1c(a−1c−1b−1)2

(cb−1a−1b)2dc−2b−1a−1bc2d−1b

(ca−1)2dc−1b−1a−1

b−1ab(dc−2)3b−1abc−1

bca(dc−1b−1)3ac−1

b−1a−2b(dc−2b−1)2

(a−1c−1b−1)2d(c−1b−1)2d−1

Table 5. Correspondence: plaintext alphabet to ciphertext alphabet IV

Ufx7

Ufx8

A

E

I

O

U

T

M

a−3b−1dc−3a−1(ba2)2a

c−1a−1ba3dc−3

b−1d−1a−1

d−2cd−1b−1ad

dc−3dc−3(a−3b−1ac)2

d−1(b−1a)2(dc−1d)2d

a−1(a−2b−1)2dc−3

a−1(ba2)4ac3d−1ba3

adb−1ad

(d−1a−1)5b

(a−3b−1dc−3)3a−1(a−2b−1)2a

(b−1ad)3adad

a−3b−1dc−3(c−1a−1ba3)3

b−1a(d−1cd−1)2d−1c

L a−3b−1dc−3a−3b−1aca−3b−1dc−3a−1ba3c3d−1ba3 b−1adc−1d2b−1d−1a−1b

K

Y

B

N

c−1a−1ba3c−1a−1dc−3a−1ba3

(d−2c)2b−1

(c−1a−1ba3)2dc−3a−1ba3c3d−1ba3

(d−2c)2d−1b−1d−1a−1b

a−3b−1a(dc−3)3a−3b−1ac

(ab−1)3adc−1d2

a−1(ba2)2a(dc−3a−3b−1)2

(d−1a−1)2d−1(b−1ad)2d

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

15

3.2. With these tables he is able to generate the plaintext from Alice, it is

S =f−1
x3 ((ba−1d−1)2(a−1d−1c)2)f−1
f−1
f−1
f−1

x1 (cid:0)dc−1d−1a−1d−2a−1c−1(cid:1) f−1
x5 (cid:0)cb−1a−1bdc−2(cid:1) f−1
x7 (cid:0)a−1(a−2b−1)2dc−3(cid:1) f−1

x2 (cid:0)d−1bcabd−1a−1cadb−1d(cid:1)
x4 (cid:0)(ca2)2b−1a3daca2(cid:1)
x6 (cid:0)bca(dc−1b−1)3ac−1(cid:1)
x8 (cid:0)(ab−1)3adc−1d2(cid:1)

=I LIKE BOB.

Security

This private key cryptosystem is secure against chosen plaintext attacks
and chosen ciphertext attacks. In a chosen plaintext attack, an attacker, Eve,
chooses an arbitrary plaintext of her choice and gets the corresponding cipher-
text. In a chosen ciphertext attack Eve sees ciphertexts and gets to some of
these ciphertexts the corresponding plaintexts (see also [1]).

An eavesdropper, Eve, intercepts the ciphertext

C = c1c2 ··· cz,

with ci = fxi(uj) for some 1 ≤ j ≤ N . If Alice and Bob choose non character-
istic subgroups, then it is likely that cj /∈ FU for some 1 ≤ j ≤ z. Hence the
ciphertext units give no hint for the subgroup FU . Eve knows L = Pz
k=1 |ck|,
the length of C, because Alice and Bob are doing no cancellations between ci
and ci+1, for 1 ≤ i ≤ z − 1.
To break the system Eve needs to know the set U . For this it is likely that
she assumes that the ball B(F, L) in the Cayleygraph for F contains a basis
for FU . With this assumption she searches for primitive elements for FU in the
ball B(F, L), |y| ≤ L, y ∈ F . In fact she needs to ﬁnd N primitive elements for
FU in B(F, L) (these would be primitive elements for FU in a ball B(FU , L)
for some Nielsen reduced basis for FU ). From Proposition 4 and Theorem 2 it
is known that the number of primitive elements grows exponentially with the
:= {mi1, mi2 , . . . , miK} with
free length of the elements. Eve chooses sets Mi
K ≥ N and elements mij in B(F, L) and with Nielsen transformations she
constructs the corresponding Nielsen reduced sets M′i . If |M′i| = N then M′i is
a candidate for U .

The number N is a constant in the cryptosystem, hence it takes O(λ2) time,
with λ := max{|mjℓ| | ℓ = 1, 2, . . . , K} ≤ L, to get the set M′j from Mj with
the algorithm [16] (see Remark 3).
The main security certiﬁcation depends on the fact, that for a single sub-
set of K elements Eve ﬁnds a Nielsen reduced set in polynomial running time
(more precisely in quadratic time) but she has to test all possible subsets of K
elements for which she needs exponential running time.

The security certiﬁcation can be improved by the next two improvements.

16

Anja I. S. Moldenhauer and Gerhard Rosenberger

First, Alice and Bob choose in addition an explicit presentation of the ci-
phertext units ci as matrices in SL(2, Q). So, they agree on a faithful represen-
tation

ϕ : F → SL(2, Q)

xi 7→ Mi,

of F into SL(2, Q) (see Theorem 4). The group G = ϕ(F ) is isomorphic to F
under the mapping xi 7→ Mi, for i = 1, . . . , q. The ciphertext is now

C′ = ϕ(c1)ϕ(c2)··· ϕ(cz)

= W1W2 ··· Wz,

a sequence of matrices Wj ∈ SL(2, Q). The encryption is realizable with a
table (as Table 1) if the representation ϕ is applied to the elements in the
table. Therefore Bob gets a table with matrices and hence an assignment from
the matrices to the plaintext alphabet depending on the automorphisms fxi.

Here the additional security certiﬁcation is, that there is no algorithm
known to solve the membership problem (see for instance [10]) for subgroups
of SL(2, Q) which are not subgroups in SL(2, Z). B. Eick, M. Kirschner and
C. Leedham-Green presented in the paper [5] a practical algorithm to solve
the constructive membership problem for discrete free subgroups of rank 2 of
SL(2, R). For example, the subgroup SL(2, Z) of SL(2, R) is discrete. But they
also mention, that it is an open problem to solve the membership problem for
arbitrary subgroups of SL(2, R) with rank m ≥ 2. Alice and Bob work with
subgroups of rank N ≥ 2. Hence there is in general no algorithm known for
Eve to solve the membership problem, in particular there is always no such
algorithm known for N ≥ 3.

Example 2. In this example3 Alice and Bob agree additionally to Example 1
on a faithful representation. With Theorem 4 they generate the matrices

X1 :=(cid:16) −7

45
2
4
1 −7

2 (cid:17) , X2 :=(cid:16) −15

2
1 −15

221

4

2 (cid:17) and X3 :=(cid:16) −23

4

2
1 −23

525

2 (cid:17) .

These matrices form a basis for a free group G of rank 3. Alice and Bob
generate a subgroup G1 of G with rank 4. The free generating set for G1
is {X1X2, X3X 2
1 X2}. They choose the faithful representation

1 , X2X3X2, X−1

ϕ : F → SL(2, Q)

4

2

−1111

2 (cid:17) ,
a 7→ X1X2 =(cid:16) 75
c 7→ X2X3X2 =(cid:0) −2681 19966
360 −2681(cid:1) ,

−11

163

b 7→ X3X 2
d 7→ X−1

104 −349(cid:1) ,
1 =(cid:0) −1189 3990
1 X2 =(cid:0) 15 −109
4 −29 (cid:1) .

3 We realized this example with the computer programs Classic Worksheet Maple 16
and GAP. In GAP we used the package “FGA” (Free Group Algorithms, a GAP4
Package by Christian Sievers, TU Braunschweig).

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

17

The ciphertext is now

C′ =ϕ(dc−1d−1a−1d−2a−1c−1) ϕ(d−1bcabd−1a−1cadb−1d)

ϕ((ba−1d−1)2(a−1d−1c)2) ϕ((ca2)2b−1a3daca2) ϕ(cb−1a−1bdc−2)
ϕ(bca(dc−1b−1)3ac−1) ϕ(a−1(a−2b−1)2dc−3) ϕ((ab−1)3adc−1d2)

−223326322203710575272321977 3240070327830150751386194361

2

102756972145191520348785607

47007695458416827592369656315

4

301722468685102729969483 −4493988131847945704997109

26659253089426526822952736194350493 −395000924306510751052288425218790757

5883318761059670223751985896578473377

(cid:17)

(cid:17)

4

2

(cid:17)

2

2

2

2

4

2

(cid:17)

−6400784021410159

−62588240305379 −932216979117085

=(cid:16) −429743093559909
(cid:16) −3240070331754423030683243991
(cid:16) −6899014060703475554169965
(cid:16) −397074726172421275253684843812134445
(cid:16) 46475888407425825
(cid:16) −37154085868492177463035768197599
(cid:16) −3418963163764785449276501363
(cid:16) 2739747352948144349387

−3120351373297111 −46475896943687759

−402070084312200114547

1624906569753714749910956723073

692232489736400389

2

2

4

2

2

2

4

2

(cid:17)

−230751369629481141540301125 −3436913216344813651054341083

2

−50923553357916815212095363641

4

−39628644296581967709615

5815679440792026855107

4

2

−553374013794643763898030444104547

24201404758781402065719318991873

(cid:17)

(cid:17)

4

2

(cid:17) .

Instead of a sequence of words in F Alice sends to Bob a sequence of eight
matrices in SL(2, Q).

For the second improvement Alice and Bob use instead of a presentation
of the ciphertext in SL(2, Q) a presentation of the ciphertext in a free group
in GL(2, k) with k := Z[y1, y2, . . . , yw], the ring of polynomials in variables
y1, y2, . . . , yw. With the help of a homomorphism ǫ∗ : GL(2, k) → GL(2, Z)
and the knowledge of an algorithm to write each element in the modular group
PSL(2, Z), the group of 2 × 2 projective integral matrices of determinant 1, in
terms of s and t they can reconstruct the message. Here,

−1 0(cid:1)
s =(cid:0) 0 1
and PSL(2, Z) = hs, t | s2 = (st)3 = 1i.
of the modular group PSL(2, Z). Especially, the two matrices

and t = ( 1 1
0 1 )

Every ﬁnitely generated free group is faithfully represented by a subgroup

and

(cid:0) 0 1
−1 2(cid:1)

(cid:0) 2 1
−1 0(cid:1)

generate a free group of rank two, and this free group certainly contains ﬁnitely
generated free groups.

This improvement is very similar to the version in [1]. Here, the security
certiﬁcation depends in addition on the unsolvability of Hilbert’s Tenth Prob-
lem. Y. Matiyasevich proved in [11] that there is no general algorithm which
determines whether or not an integral polynomial in any number of variables
has a zero.

18

Anja I. S. Moldenhauer and Gerhard Rosenberger

5 Public Key Cryptosystem Based on Automorphisms

of Free Groups F

Now we describe a public key cryptosystem for Alice and Bob which is inspired
by the ElGamal cryptosystem (see [6] or [13, Section 1.3]), based on discrete
logarithms, that is:

1. Alice and Bob agree on a ﬁnite cyclic group G and a generating element

g ∈ G.

2. Alice picks a random natural number a and publishes the element c := ga.
3. Bob, who wants to transmit a message m ∈ G to Alice, picks a random
natural number b and sends the two elements m · cb and gb, to Alice. Note
that cb = gab.
4. Alice recovers m =(cid:0)m · cb(cid:1) ·(cid:0)(cid:0)gb(cid:1)a(cid:1)−1
Let X = {x1, x2, . . . , xN}, N ≥ 2, be the free generating set of the free
i. It is X±1 = X ∪ X−1. The message is an element m ∈ S∗,
group F = hX |
the set of all freely reduced words with letters in X±1. Public are the free
group F , its free generating set X and an element a ∈ S∗. The automorphism
f should be chosen randomly, for example as it is described in Section 3.

.

The public key cryptosystem is now as follows:

Public parameters: The group F = hX |

i, a freely reduced word a 6= 1

in the free group F and an automorphism f : F → F of inﬁnite order.

Encryption and Decryption Procedure:

1. Alice chooses privately a natural number n and publishes the element

f n(a) =: c ∈ S∗.
the freely reduced elements

2. Bob picks privately a random t ∈ N and his message m ∈ S∗. He calculates

m · f t(c) =: c1 ∈ S∗ and f t(a) =: c2 ∈ S∗.

He sends the ciphertext (c1, c2) ∈ S∗ × S∗ to Alice.

3. Alice calculates

c1 · f n(c2)−1 = m · f t(c) · f n(c2)−1

= m · f t(f n(a)) · (f n(f t(a))−1
= m · f t+n(a) · (f n+t(a))−1
= m,

and gets the message m.

Remark 7. A possible attacker, Eve, can see the elements c, c1, c2 ∈ S∗. She
does not know the free length of m and the cancellations between m and f t(c)
in c1. It could be possible that m is completely canceled by the ﬁrst letters of

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

19

f t(c). Hence she cannot determine m from the given c1. Eve just sees words,
f t(a) and f n(a), in the free generating set X from which it is unlikely to realize
the exponents n and t, that is, the private keys from Alice and Bob, respectively.
The security certiﬁcation is based on the Diﬃe-Hellman-Problem.

Remark 8. We give some ideas to enhance the security, they can also be com-
bined:
1. The element a ∈ S∗ could be taken as a common private secret between
Alice and Bob. They could use for example the Anshel-Anshel-Goldfeld key
exchange protocol (see [13]) to agree on the element a.

2. Alice and Bob agree on a faithful representation from F into the special
linear group of all 2×2 matrices with entries in Q, that is, g : F → SL(2, Q).
Now m ∈ S∗ and Bob sends g(m) · g(f t(c)) =: c1 ∈ SL(2, Q) instead of
m · f t(c) =: c1 ∈ S∗; c and c2 remain the same. Therefore, Alice calculates
c1·(g(f n(c2)))−1 = g(m) and hence the message m = g−1(g(m)) ∈ S∗. This
variation in addition extends the security certiﬁcation to the membership
problem in the matrix group SL(2, Q) (see [5]).

Example 3.
This example4 is a very small one and it is just given for illustration purposes.
Bob wants to send a message to Alice.
i of rank 3,
The public parameters are the free group F = hx1, x2, x3 |
the freely reduced word a ∈ F , with a := x2
3 x2 and the automorphism
f : F → F , which is given, for this example, by regular Nielsen transformations:
f = [(N 2)1.2]2 (N 2)3.2 (N 1)3 (N 2)2.3, that is,

1x2x−2

x1 7→ x1x2

2, x2 7→ x−1

3 , x3 7→ x−1

2 x−1
3 .

1. Alice’s private key is n = 7. Thus, she gets the automorphism

f 7 : F → F

x1 7→ x1x2
x2 7→ x−1
x3 7→ (((x−1

2x−1
2 ((x−1
2 x−1

3 x2(x2x3)2(x3x2x2
3 x−1
2 x−1
2 x−1
3 )2x−1
2 x−2

3 )2x−1
3 )2x−1

3x2)2x3x2
3 )2x−1
3 x−1
3 )2x−1
2 (x−1

2 x−2
3
3 x−1
2 x−1

3 )2x−1
3 .

Her public key is

c := f 7(a) =(x1x2

2x−1

3 x2(x2x3)2(x3x2x2

3x2)2x3x2)2(x2

3x2)2

((x3x2x3)2x2x3)2x3x2x2

3x2x−1
3 .

2. Bob privately picks the ephemeral key t = 5 and gets the automorphism

f 5 : F → F

x1 7→ x1x2
x2 7→ x−1
x3 7→ ((x−1

2x−1
2 (x−1
2 x−1

2x3(x3x2)2
3 x2
3 x−1
2 x−1
3 )2x−1
3
2 x−2
3 )2x−1
3 )2x−1
3 .

4 We used the computer program GAP and the package “FGA” (Free Group Algo-

rithms, a GAP4 Package by Christian Sievers, TU Braunschweig).

20

Anja I. S. Moldenhauer and Gerhard Rosenberger

His message for Alice is m = x−2

3 x2

2x3x2

1x−1

2 x−1

1 . He calculates

=x−2

c1 =m · f 5(c)
1(x2x−1
2x3x2
2 x−1
3 x−1
3 )2((x−1
3 x−1
2 x−2
3 ((x−1
2 x−2

3 x2
((((x−1
2 x−1
x−1
(((x−1
x−1
2 x−1
((x−1

3 )2x−1
3 x−1
3 x−1
3 x−1
3 x−1

3 x−1

3 )2((x−1
2 x−1

3 x−1
3 )2x−1

2 x−2
3 x−1

2 x−2
2 )2x−2
2 x−2
3 x−1
2 )2x−2

3 x−1
3 x−1
2 )2x−2

2 )2x−2
2 )2(x−1
3 x−1
2 )2(x−1

3 x−1

3 x−1

3 x−1
2 x−1

3 x−1
3 x−1
3 )2x−1
2 )3(x−1

2 )2x−2
3 x−1
2 )2(x−1
3 x−1
2 x−1
2 )2(x−1
3 x−1
2 x−1

3 x−1
2 x−1
3 x−1
3 )2x−1
3 x−1
2 x−1
3 )2x−1

2 )2(x−1
3 )2(x−1
2 x−1
3 x−1
3 )2x−1
3 x2

2 x−1

2 )3x−1
3

2 x−1
2 x−2
3 x1x2
3 x−1

3 x−1
3 )2x−1
2
2 )2x−1
3 x−1
3
3 x2(x−1
2x−1
3
2 x−1
3 )2

and

c2 := f 5(a) = (x1x2

2x−1

3 x2

2x3(x3x2)2)2x2

3x2(x3x2x3)2x3x2x−1
3 .

The ciphertext for Alice is the tuple (c1, c2).

3. Alice ﬁrst computes

(f 7(c2))−1 =x−1

2 (((((x3x2)2x3)2x3x2x3)2x3x2(x3x2x3)2)2x3x2
((x3x2x3)2x2x3)2x3x2x3)2(x3x2(((x3x2x3)2x2x3)2x3x2x3x2x3)2
(x3x2x2
(x3x2x2
(((x3x2x3)2x2x3)2x3x2x3x2x3)2(x3x2x2
(x3x−1

3x2)2x3)2x2(((((x2
3x2)2x3x2)2x3(x3x2x2

3x2)2x3x2)2x2
3x2

3x2x3x2)2x3

3x2)2x3

3x2)2x2

2 )2x−1

2 x−1

1 )2

and gets m by

6 Conclusion

m = c1 · (f 7(c2))−1 = x−2

3 x2

2x3x2

1x−1

2 x−1
1 .

In comparison to the standard cryptosystems which are mostly based on num-
ber theory we explained two cryptosystems which use combinatorial group the-
ory. The ﬁrst cryptosystem in Section 4 is a one-time pad, which choice of
the random sequence for encryption is not number-theoretic. At the moment
it is costlier than the standard systems but it is another option for a one-time
pad which is based on combinatorial group theory and not on number theory.
The second cryptosystem in Section 5 is similar to the ElGamal cryptosystem
(see [6]), which is easier to handle. The ElGamal cryptosystem is based on the
discrete logarithm problem over a ﬁnite ﬁeld. If this problem should eventu-
ally be solved we introduced here an alternative system, which is not based on
number theory.

Cryptosystems Using Automorphisms of Finitely Generated Free Groups

21

References

1. G. Baumslag, B. Fine, M. Kreuzer, and G. Rosenberger. A Course in Mathemat-

ical Cryptography. De Gruyter, 2015.

2. A. V. Borovik, A. G. Myasnikov, and V. Shpilrain. Measuring sets in inﬁnite

groups. Contemporary Math. Amer. Math. Soc. 298, pages 21–42, 2002.

3. T. Camps, V. große Rebel, and G. Rosenberger. Einführung in die kombina-
torische und die geometrische Gruppentheorie. Berliner Studienreihe zur Mathe-
matik Band 19. Heldermann Verlag, 2008.

4. V. Diekert, M. Kuﬂeitner, and G. Rosenberger. Diskrete Algebraische Methoden.

De Gruyter, 2013.

5. B. Eick, M. Kirschmer, and C. Leedham-Green. The constructive membership
problem for discrete free subgroups of rank 2 of SL2(R). LMS Journal of Com-
putation and Mathematics, 17 (1): pages 345–359, 2014.

6. T. ElGamal. A public key cryptosystem and a signature scheme based on discrete
logarithms. IEEE Transactions on Information Theory, IT-31: pages 469–473,
1985.

7. M. I. González Vasco and R. Steinwandt. Group Theoretical Cryptography. CRC

Press, 2015.

8. J. Lehner. Discontinuous Groups and Automorphic Functions. Mathematical Sur-
veys Number VIII. American Mathematical Society, Providence, Rhode Island,
1964.

9. R. C. Lyndon and P. E. Schupp. Combinatorial Group Theory. Ergebnisse der

Mathematik und ihre Grenzgebiete 89. Springer-Verlag, 1977.

10. W. Magnus, A. Karrass, and D. Solitar. Combinatorial Group Theory. Pure
and Applied Mathematics, A Series of Texts and Monographs Volume XIII. John
Wiley & Sons, 1966.

11. Y. Matiyasevich. Solution of the Tenth Problem of Hilbert. Mat. Lapok, 21, pages

83–87, 1970.

12. A. I. S. Moldenhauer. Cryptographic protocols based on inner product spaces and
group theory with a special focus on the use of Nielsen transformations. PhD
thesis, University of Hamburg, 2016.

13. A. Myasnikov, V. Shpilrain, and A. Ushakov. Group-based Cryptography. Ad-

vanced Courses in Mathematics - CRM Barcelona. Birkhäuser Basel, 2008.

14. A. G. Myasnikov and V. Shpilrain. Automorphic orbits in free groups. J. Algebra,

269: pages 18–27, 2003.

15. J. J. Rotman. An Introduction to the Theory of Groups. Springer, 1995.
16. I. A. Stewart. Obtaining Nielsen Reduced Sets in Free Groups. Technical Report

Series, 293, 1989.

