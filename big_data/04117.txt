Multi-modal Tracking for Object based SLAM

Prateek Singhal, Rufﬁn White, Henrik Christensen

Institute of Robotics and Intelligent Machines

Georgia Institute of Technology,

Atlanta, Georgia, USA

6
1
0
2

 
r
a

 

M
4
1

 
 
]

V
C
.
s
c
[
 
 

1
v
7
1
1
4
0

.

3
0
6
1
:
v
i
X
r
a

Abstract—We present an on-line 3D visual object tracking
framework for monocular cameras by incorporating spatial
knowledge and uncertainty from semantic mapping along with
high frequency measurements from visual odometry. Using a
combination of vision and odometry that are tightly integrated we
can increase the overall performance of object based tracking for
semantic mapping. We present a framework for integration of the
two data-sources into a coherent framework through information
based fusion/arbitration. We demonstrate the framework in the
context of OmniMapper[1] and present results on 6 challenging
sequences over multiple objects compared to data obtained from
a motion capture systems. We are able to achieve a mean error
of 0.23m for per frame tracking showing 9% relative error less
than state of the art tracker.

I. INTRODUCTION

Current SLAM systems operate at either the level of sparse
features using edges or salient points [2][3] in the scene or do
dense tracking of the whole scene [4]. We propose a method
which integrates the semantic information of model based
tracking and mapping with a sparse feature based tracking.
Most recent methods try to use features which can be tracked
over long periods of time. We go one level further to include
objects in the map as semantic entities which can be effectively
tracked over long periods. Our approach allows us to handle
complex motions of the camera in a cluttered scene while
preventing the map from growing too large or discrepancies
developing in camera trajectory.

Recently, there has been a growing interest in incorporating
semantics into building maps. SLAM methods typically oper-
ate without the knowledge of semantics and generally fall into
the trap of being unscalable with time, while purely detection
based methods from images rely solely on the image features
without any knowledge of the 3D scene, leading to longer
processing times. We exploit the relationship of objects in
the scene to build a map which is scalable over time as well
as allowing detection to beneﬁt from the knowledge of the
current scene to provide an accurate pose. Some of the recent
works like SLAM++ [5] and SSFM [6] have approached this
problem in a similar manner. SLAM++ uses a RGBD sensor
to model the scene and the camera pose with known objects.
SSFM tries to solve the 2 view problem using the relationship
between points, objects and the camera in the scene.

Various approaches detailing the use of geometric con-
straints over objects have been proposed in the past. Kim et
al. build a 3D map and apply geometric constraints on the
objects in the map. We use objects to construct the map and
the trajectory of the camera, not as an ad hoc constraint for

Fig. 1: 3D model based visual tracking aided by SLAM.
(Clockwise from top left) Original image input, the model
rendered on image using pose from model based tracker, the
optimized estimates for the pose and landmarks in the world
frame and sparse features used for visual odometry. (Point
cloud serves for visualization only.)

reﬁnement of the map. Object tracking of the 6DOF pose of
the object [7] [8] has attracted lot of attention with the advent
of depth sensors. These methods generally try to segment the
image using level sets into contours, with 3D-3D and 2D-
2D contour matching to estimate the pose. We use a state of
the art object tracker which allows us to estimate the pose
from a monocular image and show how using the current
camera estimates from odometry improves both tracking and
detection.

We show our approach to be online on a CPU with incre-
mental addition of pose and objects to the graph. Incremental
operation on a CPU with monocular cameras has applications
in real world robotics, like grasping in an industry setting
or household setting, allowing for continuous object tracking

Fig. 2: Flow diagram for proposed tracking framework. Each plugin process measurements from the same image, but commit
different levels of information into the graph. With this form of cascading feedback, both plugins inﬂuence each other as they
supervise their own measurement source’s performance

even when the object goes out of the frame and comes
back in, a common scenario with robot arms. Most of the
methods in this ﬁeld try to use AR markers to do efﬁcient
localization while our approach allows for work in marker
free environments.

Our approach is comprised of a 3D model based object
tracking and a visual odometry coupled in a factor graph to
enable pose graph optimization. We assume a knowledge of
the object’s presence in the scene and characterize it by a
6DOF pose, while using salient edges of the object in the
image to track it. A visual odometry algorithm tracking sparse
features provides us with the current camera pose. Both of
these measurements are complimentary in nature allowing
us to deal with failure cases of both object
tracking and
SLAM. The object tracking allows us to scale the odometry
to the metric scale and allows us to correct for drift
in
the odometry while the odometry provides reinitialization for
object detection, when the object is lost, using past estimates.
We demonstrate visual tracking and mapping in the presence
of partial or full occlusion of the objects. We compare the
results to data captured from a motion capture system. We
have not been able to ﬁnd a dataset for comparative evaluation.
The outline of the paper is as follows : In Section II, we
discuss some of the relevant methods in the literature. An
overview of the system is given in Section III. We describe our
approach in Section IV and discuss our experimental results in
Section VI. Our approach is open source and is implemented in
ROS, details of which are presented in Section V. We conclude
the paper in Section VII by stating the goals we achieved and
the possible future work in this direction.

II. RELATED WORK

Semantic Structure from Motion is a relatively new ﬁeld
without an exhaustive literature. Here we elaborate on two
methods, SLAM++ Moreno et al. [5], and SSFM from Bao
and Savarese [6], which have approached the same problem
from different angles. Both of these methods, as we do, use
objects as a semantic representation. They also exploit the
structure of the factor graph to do efﬁcient inference.

SLAM++: proposes an object oriented SLAM with a factor
graph formulation using a RGBD sensor. They estimate the
pose between the current camera pose and the object using a
model based ICP, with the assumption that objects present in
the scene are known. We make a similar assumption in our
work. The odometry between the camera poses is found using
ICP. One of the major emphasis of the paper is on model based
ICP for estimating the pose of the object in the current frame.
This method suffers from the problem of large pre-processing
of the point cloud in the current camera frame to ﬁnd the
correct model estimate from the database. In spirit our work
is similar to theirs but our method uses a monocular camera
with sparse tracking.

SSFM: Semantic Structure from Motion approaches the
traditional structure from motion problem by incorporating
the semantic priors of objects in the formulation. A state of
the art object detector is used to detect the bounding boxes
of the object in the image and then standard CAD models
are used to predict the scale and the pose probability maps.
The points in the structure from motion are used to provide
the camera pose. This method,
though more generic than
ours and SLAM++, requires more computationally extensive
processing times due to class speciﬁc detection rather than
instance speciﬁc detection. Furthermore, variations in the class
can lead to failure of this system to estimate the pose of the
object in the frame. Our take on object recognition for tracking
needs to be instance speciﬁc rather than class speciﬁc favoring
ﬁner pose measurements over a large number of poses.

Our method is comprised of Object Tracking and SLAM and
explores approaches from both these ﬁelds. Object tracking has
been one of the successes of computer vision, yet the larger
body of the literature dealing with 2d tracking in images using
bounding boxes is often limiting for robotics or Virtual Reality
applications. Krull et al. [7] have proposed a 6DOF pose object
RGBD tracker using a random forest based classiﬁer for the
pose of objects using depth maps. Lu and Gabe [8] recently
proposed a dense object discovery, detection, tracking and
reconstruction method using a RGBD sensor. Their method
segments the image using level sets into contours and then

Monocular Image StreamVisual OdometryObject TrackingObject PluginOmniMapperPose PluginCurrent EstimateRelative PoseObjectPoseDrift and ScaleCalibrationField of View ReInitializationBetween PoseFactors         Between Landmark FactorsLow Texture Scenes& many objectsHigh Texture Scenes& few objectsFeedbackFront EndBack EndFeedforwardFig. 3: The pose of the camera at ith time step is xi with
i ∈ 0 . . . M, a landmark is lj with j ∈ 1 . . . N and a
measurement is zk, with k ∈ 1 . . . K. Factor graph repre-
sentation. Blue circles denote camera poses (X) and green
circles denote landmarks (L). Small purple circles represent
odometry constraints and red circles represent landmark-pose
constraint(Z).

uses 3D-3D and 2D-2D contour matching to estimate the pose
of the object.

Real-time visual SLAM systems calculate the visual odom-
etry by tracking the 3d points over images. Semi-direct Visual
Odomtery (SVO) [9] is a recent approach which uses an image
alignment based method to track the features across images.
It uses a depth based Gaussian ﬁltering which allows it to
converge to the correct 3d position. Here we use SVO, but
make some modiﬁcations to initialize scaling up to metric
scale. Large-Scale Direct(LSD) SLAM [10] is another recent
approach which utilizes the change in the gradient to estimate
the odometry and the map.

III. SYSTEM OVERVIEW

We show the outline of our system in Fig 2. Monocular
images are given as inputs to both tracking and visual odome-
try in real time. As each algorithm operates at different frame
rates, object tracking performance varying with the number
of tracked objects in the current scene, the measurements are
published asynchronously. Omnimapper allows us to create
a factor graph online with such asynchronous measurements.
The data association per pose is evaluated based on an
uncertainty gating criterion, wrong data associations are found
and rectifying feedback is given to the tracker. Based on the
severity of the data association failure, the current solution
may be used to quickly reinitialise the algorithm, or if the
current estimate is highly uncertain or unstable, an event signal
may be used to trigger the algorithm’s own reset procedure. In
this way, information is shared across the algorithms in order
to arrive at a superior consensus.

IV. APPROACH

We formulate our problem as a factor graph as shown in
Fig 3. Here, the objects are used as landmarks while a pose
represents the current camera location along the trajectory.
The object tracker provides the factor between the landmark
and the pose, while the factor between consecutive poses
is provided by visual odometry. This framework is generic
and can incorporate multiple modalities of measurements
represented as factors; other geometric features such as points
and planes as landmarks can also be expressed as factors [1].

In this work, we limit the modality of landmarks to that of
pose measurements of objects found in the current scene.

Our approach in detail is described as follows:

A. Object Recognition and Pose Estimation

We use SURF features to model the objects in our database,
as SURF is rotationally invariant compared to other faster
features detectors allowing us to reinitialize robustly while
tracking. During training each object in the database is stored
with SURF feature descriptors, points and its corresponding
3D points of the model. During testing, we run a SURF
descriptor on the image to recognize the objects in the scene.
We build a kd-tree for each object in the database which is
then matched using FLANN with the SURF descriptors in the
current image. Matched keypoints of each object are matched
with its corresponding 3D points in the database to obtain the
pose of the object in the current frame using Perspective-n-
Point [11] algorithm. This process is carried out in a RANSAC
framework to provide a robust estimate of the pose.

B. Visual Tracking

Our method of visual tracking builds upon the 3D model-
based visual tracking approach demonstrated in the work of
Choi and Christensen [12]. This method of edge based tracking
provides the requisite degree of ﬂexibility and speed required
for maintaining a high frequency estimate of the camera’s pose
relative to the object reference frame. By utilizing the pose
obtained from object recognition to initialize the pose of the
object model, we can project the 3D model onto the image
using the camera’s intrinsic and distortion parameters known
a priori. The projected 3D model is rendered using only the
salient edges within the original polygon mesh, as identifying
sharp edges in the object will help to match edge features in the
image. Once a hypothesis is initialized, the same edge-based
measurement likelihood as illustrated in [12] is employed to
guide a particle ﬁlter on the SE(3) group in tracking the object
in the scene.
density function p(Xt|Z1:x)is a set of weighted particles

The particle ﬁlter begins in much the same way, where our

, π(1)

), . . . , (X(N )

t

t

t

t

t

t

)}

, π(N )

the normalized weight proportional

St = {(X(1)
(1)
With X(n)
representing the sample of the current state Xt
in SE3, and π(n)
to
the underlining likelihood function p(Z1:x|Xt), with N the
total number of particles. The likelihood of each particle is
determined by the residual error between the projected model
and the extracted edges from the image. The residual error
is generated from sampling points along the model edges at
a given density; thereafter, a 1D search along the direction
orthogonal to the model edge to the nearest edge pixel is
measured. Normally a large number of particles is necessary
for robust tracking, but to reduce the computation, a fewer
number of particles is used and these are locally optimized
using iteratively reweighted least squares (IRLS) [13].

We use the trackers’ measure of its health based on the
ratio between the valid visible sampled points in the image

X0X1X2X3L0L1L2and sampled points on the image to determine whether the
tracker should be reset or not. A sampled point along the edge
is deemed valid if the error along the perpendicular direction
is less than the maximum error. Here we set 32 pixels as the
maximum error possible.

Multiple instances of such trackers can then be instantiated
with respect to what objects are expected to be visible in the
current environment. This also employs the successful trackers
to aid poorer performing instances in static environments, and
measured transformations from one object can help narrow
the hypotheses of a second object temporarily lost from view.
This feedback is described when expanding upon the ﬂow of
information within the proposed framework.

C. Monocular Visual Odometry

We use SVO for monocular visual odometry as it is open
source and works in real-time. For making this paper self-
sufﬁcient, we explain it brieﬂy. It follows the trend of having
2 parallel threads of mapping and tracking.

SVO uses a Sparse Model-based Image Alignment between
consecutive poses while reﬁning the photometric error. This is
aligned globally with features in the closest keyframes.
δI(T, u) = Ik(π(T.π−1(u, du))) − Ik−1(u)
∀u ∈ R (2)
where T is the pose of the camera, π is the mapping from
the 3d point du to the image feature u. R represents the region
for which the depth of the features is known. This equation can
be minimized iteratively to ﬁnd the current camera pose with
respect to the previous camera (Tk,k−1). The inverse depth of
the features is estimated using recursive Gaussian ﬁltering on
the points along the epipolar lines using known pose.

We initialize SVO using our object database based pose
estimation at ﬁrst keyframe; this process is repeated on the
second keyframe to obtain a scaled estimate of the pose
between the 2 keyframes. In the presence of multiple objects
we chose the object with the highest number of inliers to
intialize the keyframes. We take care while initializing that
the ﬁrst 2 keyframes have a minimum disparity between them.
The initialization formulation can be written as :

2,1 = inv(T c,o
T c

1 ) ∗ T c,o

2

(3)

where T2,1 is the pose between the ﬁrst 2 keyframes
are the pose between the object and

for intialization,T c,o
keyframes obtained from the object detection.

i

D. Pose Graph Optimization

Both visual tracking and visual odometry are combined
together to form the complete factor graph. The factor graph
constraints at time step k can be written down as :

T c,o
k = T c,w
k,k−1 = T c,w
T c

∗ T w,o
k−1 ∗ (T w,c

k

k

)

(4)

(5)

where T c,o

k
frame, T c,w

is the pose of the object in the current camera
is the pose of the camera in the current frame to

k

Algorithm 1 Object Measurement Data Association (O)

Ik = Image at kth frame
counter = 0
init = true
while Ik do

T c,o
k = EBT(Ik,init)
Tk,k−1 = SVO(Ik)
if (H(T c,o

if Res ≤ α ∗ ((cid:80))(T )w,o

k ) = good) then

then

Add (T c,o
k )f
counter = 0
init = false

Feedback()

else

end if

else

Feedback()

end if
end while
function FEEDBACK

if counter ≤ th then
Reset EBT((T c,o
counter++
init = false

k )e)

else

E = min||(cid:88)

init = true
Reset EBT(SURF)

end if

end function

the world frame, T w,o is the pose of the object in the world
frame, T c
k,k−1 is the pose of the camera between time steps k
and k-1 in (k − 1)th camera frame.

The energy to be minimized then can be written as:

k,o

((T c,o

k − (T c,o

k )m) + (Tk,k−1 − (Tk,k−1)m))||2
(6)
k,k−1)m is obtained from
SVO, both of them are treated as measurements in the factor
graph. The factor graph is optimized for T c,w
and T w,o over
all the objects and the poses.

k )m is obtained from EBT, (T c

(T c,o

k

We use GTSAM [14] to optimize the factor graph at each
time step. Since this is an online process, we use ISAM2 [15]
to estimate the current pose of the camera and the object.

E. Information gain based Feedback

Visual tracking often suffers from failure due to fast motion
or occlusion leading to addition of erroneous measurements
in the factor graph. This situation is analogous to adding
wrong loop closure constraints in traditional SLAM systems.
We use Sequential Compatibility Nearest Neighbour (SCNN)
[16] algorithm to reject erroneous data association. This can
be formulated as :

Res = ((T )w,o − (T w,c

(cid:40)

k

∗ (T c,o

if Res ≤ α ∗ ((cid:80))(T )w,o

k )m)

(T c,o

k )f =

k )m,

(T c,o
NULL,

otherwise

where Res is the residual between the current estimate of
object in the world frame (T )w,o and the estimate from the
current object tracking measurement (T c,o
k )m transformed to
the world frame using the current estimate of the camera in
the world frame T w,c
k )f is the factor to be added and
(T )w,o is the marginal covariance of the object in the world

(cid:80)

, (T c,o

k

frame.

k

∗ T w,o;

If the measurement is rejected we reset the object tracker
with the current estimated pose of the object which can be
written as:

(T c,o

(T c,o

k )e = T c,w

(7)
k )e is the predicted pose of the object in the kth camera
frame. The method keeps resetting the pose of the object and
increments a counter. When this counter overﬂows it triggers
reinitialization of object tracking using SURF features from
the object database. This is done as odometry accumulates drift
and seldom leads to erroneous measurements of the predicted
pose. The threshold th for the counter is set to 500 in our case.
We show the ﬂow of our algorithm in Algorithm 1.
EBT(SURF) corresponds to resetting object tracking using
SURF, H(T c,o
k ) is the function showing the status of the
tracker. The α is the conﬁdence of the object we would like
our measurements to lie within, which is set to 2 in our case.

V. IMPLEMENTATION

We use ROS for implementation with the publicly available
open source packages and using its communication frame-
work for our system. This allows us to be modular and if
required swap our current odometry and tracking systems
for better methods. Available ROS package for SVO is used
with modiﬁcations, our pose plugin subscribes to the relative
pose measurement as a time stamped transformation from
the odometry reference to the optical frame of the camera.
The time dependent transform between the drifting odometry
reference frame and the static world is one aspect that is
continuously optimized and corrected for on-line. Additionally
with our open source ROS package for 2D edge based track-
ing, we subscribe to the semantically labeled detections of
objects. The health signal, along with the pose and covariance
of the labeled detection is used by the object plugin in order
to commit factors relating the optical frame and the objects
reference frame using the open source OmniMapper ROS
package. This time dependent sequence of detections is the
second aspect continuously optimized. As shown in the ﬂow
diagram in Fig 2, for the tracking plugin, this outer feedback
results in resetting the tracked pose of the object using
the graph estimate for rapid recovery, while barring further
measurements of its label from contributing to the graph until
reinitialisation is acknowledged. OmniMapper publishes ROS
messages which are subscribed by the object based tracker for

pose based reinitialization or if the counter for the feedback
overﬂows. If the reported detections persist being erroneous
from the current landmark pose for a given amount of frames
or time, the object plugin permits the use of the tracker’s own
reinitialization method. Using OmniMapper we can subscribe
to multiple objects with the same framework each being added
individually to the graph with the messages being subscribed
and published individually.

VI. EXPERIMENTAL RESULTS

We show our results on a challenging tabletop dataset for
single and multiple objects. The current dataset consists of 6
challenging sequences with common household objects from
the Amazon picking challenge and the PCL library. These
standard objects allow easy access to their CAD models. The
sequences have a high level of difﬁculty compared to standard
smooth tracking datasets with partial and full occlusion of the
object. Currently we show quantitative and qualitative results
on 3 objects: Tide Box, Ronzoni Box and Orange Juice Carton.
Each of the objects poses a different level of difﬁculty for
tracking. Tide is largely textureless and smooth, making it
tough to detect from various poses; Ronzoni box is textured
and small making it difﬁcult to track in large tabletop settings
and Orange Juice Carton has both sharp and smooth edges
with lot of texture leading to a high number of false data
associations for detections and tracking. We plan to release
the dataset with the code and add more objects to the library
in the future.

The parameters we set for SVO are: Minimum Disparity
to start tracking = 10 pixels, as we start close to the object,
Maximum number of Keyframes = 100, to allow less overhead
in batch optimization, Maximum number features tracked
= 400, to allow fast addition of features in small spaces,
Minimum number of features to be tracked = 20, for cases
of textureless settings and having a short baseline of 5cm for
adding new Keyframes. Other parameters are set to default
settings of SVO ROS. All the parameters are kept constant
for all the sequences in the dataset to allow a fair comparison.
Parameters set for Object Tracking[12] are : Sampling step
= 1cm, interval in which points are sampled from the CAD
model, Number of particles = 20 and valid visible point
threshold = 0.5, to allow high degree of partial occlusion. The
parameters are ﬁxed for all the sequences in the dataset. The
noise parameter for the landmark factor is set to 15cm and
30 degrees and noise parameter for pose factor is set to 5
cm and 5 degrees along each axis for translation and rotation
respectively.

We show quantitative results for per frame object tracking
in Table 1. Here we measure the mean error per frame of a
sequence with respect to ground truth pose of the object in
the camera frame. We consider poses whose error is greater
than 0.5m to be lost and do not consider them for our mean
error computation. We show comparison to EBT[12] and EBT
combined with SVO[9] but without the online update step. As
can be seen from Table 1 we do better than EBT in all the 6
sequences for the per frame success % while EBT does better

Fig. 4: Per Frame Error of objects ( Left to Right: Orange Juice, Ronzoni Box and Tide Bottle) in 6 sequences. Figures show
translational error in meters over time in seconds. First row shows tracking results as the camera is moved around a cluttered
table, while the second row shows out of scene occlusion comparison caused by camera rotations and translations in front of
tracked object. Note the initial spike in error for EBT particle tracking just before losing the object.

in mean error for the Ronzoni Box marginally due to it being
successful in only 20% of the sequence. Our approach does
better than SVO both in terms of per frame success % and
mean error while we found that odometry from SVO is very
close to ground truth and does not suffer from drift. This leads
us to believe that the online incremental feedback allows for
more stable tracking.

We plot the error over time for each sequence in Figure 4
with respect to the other 2 methods. As it can be seen from
the ﬁgure, EBT fails for all the sequences midway while both
SVO combined with EBT and our approach are able to track
the object in the sequences. The spikes in the ﬁgures are the
moments where EBT is about to fail but are reinitialized by
feedback from Omnimapper. This shows that even in cases of
full occlusion our method with feedback can relocalize and
track the object successfully. This is shown in detail in the
supplementary video.

We also show quantitative results for error over the whole
trajectory of the camera in each sequence. The comparison is
done between SVO and our approach, with results being in
Table 2. As it can be seen SVO does better than our approach
at times, this is largely due to our use of ISAM2 which leads to
large relinearization errors in case of wrong data associations.
The mean error difference between the 2 approaches is less
than 2 cm, showing that our method does not degrade to a
large extent. Also another important ﬁnding is that in small
spaces Object Based SLAM methods would not necessarily be
beneﬁcial over feature based methods in terms of localization
error.

We present some of our qualitative results in Fig 5. In Fig
5, we show results for the Tide sequence for the challenging
case of partial occlusion and narrow viewing angle. As can
be seen from the ﬁgure, the tracker is able to steadily track
in both cases even in such difﬁcult situations. The ﬁrst and
the second column show the current object pose projected in
the current gray and edge image. The 3rd column shows the

Sequence

Orange
Juice
Orange
Occlud
Ronzoni
Box
Ronzoni
Occlud
Tide
Bottle
Tide
Occlud

mean [m]
ratio %
mean [m]
ratio %
mean [m]
ratio %
mean [m]
ratio %
mean [m]
ratio %
mean [m]
ratio %

SVO
0.189
30.10
0.233
64.43
0.303
41.37
0.188
99.09
0.289
41.97
0.210
86.89

Method
EBT
0.219
21.95
0.257
75.56
0.239
23.23
0.215
94.08
0.288
30.09
0.293
53.15

Approach

0.192
33.74
0.250
82.99
0.274
43.64
0.197
99.59
0.282
41.25
0.194
85.22

TABLE I: Per Frame Translation Error less than 0.5 m. Ratio
derived from frames with error under the threshold, while
mean is then derived from corresponding frames.

Sequence

Orange
Juice
Orange
Occlud
Ronzoni
Box
Ronzoni
Occlud
Tide
Bottle
Tide
Occlud
All

mean [m]
median [m]
mean [m]
median [m]
mean [m]
median [m]
mean [m]
median [m]
mean [m]
median [m]
mean [m]
median [m]
mean [m]
median [m]

Method

SVO

0.073

0.050

0.063

0.090 ± 0.103
0.095 ± 0.062
0.052 ± 0.028
0.015 ± 0.008
0.135 ± 0.045
0.108 ± 0.103
0.083 ± 0.058

0.013

0.126

0.069

0.066

Approach

0.109

0.094

0.083

0.119 ± 0.094
0.100 ± 0.060
0.117 ± 0.055
0.038 ± 0.021
0.115 ± 0.053
0.124 ± 0.099
0.102 ± 0.064

0.030

0.100

0.083

0.083

TABLE II: Absolute Trajectory error with respect to motion
capture ground truth system. Shown is a comparison between
our approach and SVO.

0204060801001201400.00.51.01.52.02.53.0Error (m)svoebtapproach01020304050607080900.00.51.01.52.02.53.0approachebtsvo0204060801000.00.51.01.52.02.53.0approachebtsvo020406080100Time (sec)0.00.51.01.52.02.53.0Error (m)svoebtapproach020406080100Time (sec)0.00.51.01.52.02.53.0ebtsvoapproach020406080100Time (sec)0.00.51.01.52.02.53.0approachebtsvoFig. 5: Above shown are frames from the Tide sequence (Left to Right): Tracked hypotheses superimposed on the image, the
edge based error using the select edges from the object model, and ﬁnally the optimized trajectory derived from the combined
SVO and object measurements. Point cloud shown is only used as visual aid. Second row shows instances of foreground
occlusion.

Fig. 6: Top: Object superimposed on the image , Bottom: Edge
image superimposed with object. Shown above on the left is
the view of the object in the Ronzoni Occlud sequence just
before exiting the scene. On the right is the relocalization of
the object as it comes back into view.

Fig. 7: Top: Object superimposed on the image , Bottom: Edge
image superimposed with object. Similar to Fig 6, left side
shows the Orange Occlud sequence just before the object exits
the scene, while the right hand side shows the object being still
tracked with high occlusion.

current trajectory of the camera with object overlaid on the
current scene. It can be seen that even in large room cases our
method is able to track efﬁciently.

In Fig 6 & Fig 7, we show a sequence of 2 images
from Ronzoni Occluded Sequence and Orange Juice Occluded
Sequence. We show how in consecutive frames even after more

than 50% occlusion of these objects our tracker is able to track
them effectively and relocalize an object by only seeing a part
of it. This shows our tracker is highly robust to occlusion and
the semantic map allows us to relocalize objects without any
adhoc detection. More qualitative results are presented in the
supplementary video.

[11] V. Lepetit, F. Moreno-Noguer, and P. Fua, “Epnp: An accurate O(n)
solution to the pnp problem,” International Journal of Computer
Vision, vol. 81, no. 2, pp. 155–166, 2009.
[Online]. Available:
http://dx.doi.org/10.1007/s11263-008-0152-6

[12] C. Choi and H. Christensen, “Robust 3d visual tracking using particle
ﬁltering on the special euclidean group: A combined approach of
keypoint and edge features,” The International Journal of Robotics
Research, vol. 31, no. 4, pp. 498–519, 2012.

[13] ——, “Real-time 3d model-based tracking using edge and keypoint
features for robotic manipulation,” in Robotics and Automation (ICRA),
2010 IEEE International Conference on, May 2010, pp. 4048–4055.

[14] F. Dellaert, “Factor Graphs and GTSAM: A Hands-on Introduction,”
Georgia Tech, Tech. Rep. GT-RIM-CP&R-2012-002, September 2012.
[15] M. Kaess, H. Johannsson, R. Roberts, V. Ila, J. J. Leonard, and
F. Dellaert, “isam2: Incremental smoothing and mapping using the bayes
tree,” The International Journal of Robotics Research, vol. 31, no. 2, pp.
216–235, 2012.

[16] J. Neira

and J. D. Tard´os,

association in stochastic
mapping using the joint compatibility test,” IEEE T. Robotics
and Automation, vol. 17, no. 6, pp. 890–897, 2001. [Online]. Available:
http://dx.doi.org/10.1109/70.976019

“Data

VII. CONCLUSIONS AND FUTURE WORK

In this work we have demonstrated methods of improv-
ing object tracking reinitialization for monocular cameras by
means of incorporating traditional tracking algorithms into
a higher-level framework permitting modular measurement
fusion, including position feedback from both visual odometry
and semantic mapping uncertainties. In this manner, alternative
tracking methods and motion estimation can be combined to
generate sparse graph representations of world environments,
reducing optimization problems for small memory and com-
putationally limited applications, such as small mobile robotic
platforms.

Future work within this domain could include evaluating
the performance of various combinations of other available
VO and object trackers, or perhaps collective of a multiple
of each type, and charting the effects of different object
types under degrees of occlusion other than for monocular
imagery. Additionally, associating an object with its own pose-
chain when recognized as non-static could provide a relatively
simple extension of the current information sharing framework
for dynamic environments, as VO with accompanying objects
could be used to discern the relatively dynamic elements in a
scene. However, perhaps the most promising extension of this
framework would be for object learning, thus moving away
from priori model dependent tracking.

REFERENCES

[1] A. J. Trevor, J. G. Rogers III, and H. I. Christensen, “Omnimapper: A
modular multimodal mapping framework,” in Proceedings on the IEEE
International Conference on Robotics and Automation (ICRA).
IEEE,
2014, pp. 1983–1990.

[2] G. Klein and D. Murray, “Parallel tracking and mapping for small ar
workspaces,” in Mixed and Augmented Reality, 2007. ISMAR 2007. 6th
IEEE and ACM International Symposium on, Nov 2007, pp. 225–234.
tracking and mapping for small ar workspaces,” in
Mixed and Augmented Reality, 2007. ISMAR 2007. 6th IEEE and ACM
International Symposium on, Nov 2007, pp. 225–234.

[3] ——, “Parallel

[4] R. A. Newcombe, S. Izadi, O. Hilliges, D. Molyneaux, D. Kim, A. J.
Davison, P. Kohi, J. Shotton, S. Hodges, and A. Fitzgibbon, “Kinect-
fusion: Real-time dense surface mapping and tracking,” in Mixed and
augmented reality (ISMAR), 2011 10th IEEE international symposium
on.

IEEE, 2011, pp. 127–136.

[5] R. F. Salas-Moreno, R. A. Newcombe, H. Strasdat, P. H. J. Kelly, and
A. J. Davison, “SLAM++: simultaneous localisation and mapping at the
level of objects,” in 2013 IEEE Conference on Computer Vision and
Pattern Recognition, Portland, OR, USA, June 23-28, 2013, 2013, pp.
1352–1359.

[6] S. Y. Bao and S. Savarese, “Semantic structure from motion,” in Com-
puter Vision and Pattern Recognition (CVPR), 2011 IEEE Conference
on.

IEEE, 2011, pp. 2025–2032.

[7] “6-dof model based tracking via object coordinate regression,” in Com-
puter Vision – ACCV 2014, ser. Lecture Notes in Computer Science,
D. Cremers, I. Reid, H. Saito, and M.-H. Yang, Eds., 2015, vol. 9006.
[8] “Unsupervised dense object discovery, detection, tracking and recon-
struction,” in Computer Vision ECCV 2014, ser. Lecture Notes in
Computer Science, D. Fleet, T. Pajdla, B. Schiele, and T. Tuytelaars,
Eds., 2014, vol. 8690.

[9] C. Forster, M. Pizzoli, and D. Scaramuzza, “Svo: Fast semi-direct
monocular visual odometry,” in Robotics and Automation (ICRA), 2014
IEEE International Conference on, May 2014, pp. 15–22.
[10] J. Engel, T. Sch¨ops, and D. Cremers, “LSD-SLAM:

large-scale
direct monocular SLAM,” in Computer Vision - ECCV 2014 -
13th European Conference, Zurich, Switzerland, September 6-12,
2014, Proceedings, Part II, 2014, pp. 834–849. [Online]. Available:
http://dx.doi.org/10.1007/978-3-319-10605-2-54

