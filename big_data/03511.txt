6
1
0
2

 
r
a

 

M
1
1

 
 
]
I

A
.
s
c
[
 
 

1
v
1
1
5
3
0

.

3
0
6
1
:
v
i
X
r
a

A Set Theoretic Approach for Knowledge
Representation: the Representation Part

Yi Zhou

Artiﬁcial Intelligence Research Group

Western Sydney University, NSW Australia

March 14, 2016

Abstract

In this paper, we propose a set theoretic approach for knowledge representa-
tion. While the syntax of an application domain is captured by set theoretic con-
structs including individuals, concepts and operators, knowledge is formalized by
equality assertions. We ﬁrst present a primitive form that uses minimal assumed
knowledge and constructs. Then, assuming naive set theory, we extend it by def-
initions, which are special kinds of knowledge. Interestingly, we show that the
primitive form is expressive enough to deﬁne logic operators, not only proposi-
tional connectives but also quantiﬁers.

1 Introduction

Knowledge representation and reasoning (KR) is one of the central focuses of Artiﬁcial
Intelligence (AI) [Baral, 2003; Brachman and Levesque, 2004; van Harmelen et al., 2008].
KR intends to syntactically formalize information in an application domain as knowl-
edge. Then, complex problems in the domain can be solved by reasoning about the
knowledge. KR is not only of its own interests but also highly inﬂuential to many other
subﬁelds in AI, including expert systems, multi-agent systems, planning, uncertainty,
cognitive robotics and semantic Web [Brachman and Levesque, 2004; van Harmelen et al., 2008].

Nevertheless, KR has encountered huge difﬁculties. One issue is that there are too
many features and building blocks to be considered [van Harmelen et al., 2008], for in-
stance, propositions, variables, connectives, rules, actions, common sense, time/space,
uncertainty, mental states and so on. In fact, KR has made huge successes on formaliz-
ing these building blocks separately. However, combing them together, even several of
them, seems an extremely difﬁcult task. On the other side, many application domains,
e.g. robotics, need multiple building blocks at the same time.

Another critical related issue is about the balance between expressiveness and ef-
ﬁciency.
It is widely believe that the more expressive, the less efﬁcient, and vice
versa [Levesque and Brachman, 1987]. However, in many application domains, e.g.,
robotics, we need both. Yet this is a very difﬁcult task for KR formalisms. Consider

1

propositional logic, a fundamental KR formalism that only takes propositions and nat-
ural propositional connectives into account. The inference problem is coNP complete,
which means that, most likely, it takes exponential time in worst case.

Against this backdrop, we argue that KR needs a simple, extensible, expressive and
efﬁcient approach. “Extensible” means that this approach should allow a current sys-
tem in it to be easily extended with more building blocks. “Expressive” means that this
approach should be able to represent different types of knowledge for a given set of
building blocks.“Efﬁcient” means that this approach can efﬁciently reason about and
derive new knowledge in order to solve problems. Nevertheless, “simple” is an am-
biguous term, which can be further elaborated into three aspects: primitive — using
minimal primitive constructs, succinct – able to represent knowledge in various appli-
cation domains with relatively small knowledge bases and user-friendly — easy to be
understood and used by knowledge engineers.

Towards this goal, we propose a set theoretic knowledge representation approach
for syntactically representing knowledge in application domains. While the syntax
of an application domain is captured by a set of individuals, concepts and operators,
knowledge is simply formalized by equality assertions of the form a = b, where a and
b are either atomic individuals or compound individuals. Semantically, individuals,
concepts and operators are interpreted as elements, sets and functions respectively in
naive set theory and knowledge of the form a = b means that the two individuals a and
b are referring to the same element.

We separate representation and reasoning. This paper is mainly concerned with
the basic ideas and the representation part, and we leave the reasoning part to another
paper. In this paper, we ﬁrst present the primitive form that uses minimal assumed
knowledge and primitive constructs. Then, assuming naive set theory, we extend it
with more building blocks by deﬁnitions that use assertions to deﬁne new syntactic
objects, including individuals, concepts and operators. Once these new objects are
deﬁned, they can be used as a basis to deﬁne more. As an example, we show that we
can deﬁne multi-assertions by using Cartesian product, and nested assertions by using
multi-assertions. Interestingly, we show that this method, i.e., extending the primitive
form by deﬁnitions based on native set theory, is powerful enough to syntactically
capture logic operators, including both propositional connectives and quantiﬁers.

2 The Primitive Form

In this section, we present the primitive form of our set theoretic knowledge repre-
sentation approach. As the goal is to syntactically represent knowledge in application
domains, there are two essential tasks, i.e., how to capture the syntax of the domain
and how to represent knowledge in it.

We assume naive set theory [Halmos, 1960], including the basic concepts such as
elements, sets and functions, Cartesian product, the built-in relationships ∈ and ⊆, the
built-in operators ∪, ∩ and \, the Boolean set {⊤, ⊥} and the set N of natural numbers,
cardinality and set speciﬁcations.

2

2.1 Capturing the syntax

Given an application domain, a syntactic structure (structure for short if clear from the
context) of the domain is a triple hI, C, Oi, where I is a collection of individuals, rep-
resenting objects in the domain, C ⊆ 2I a collection of concepts, representing groups
of objects sharing something in common and O a collection of operators, representing
relationships and connections among individuals and concepts.

Concepts and operators can be considered as individuals as well. If needed, we can
have concepts of concepts, concepts of operators, concepts of concepts of operators
and so on.

An operator could be multi-ary, that is, it maps a tuple of individuals into a sin-
gle individual.1 Each multi-ary operator O is associated with a domain of the form
(C1, . . . , Cn), representing all possible values that the operator O can operate on,
where Ci, 1 ≤ i ≤ n, is a concept. We call n the arity of O. For a tuple (a1, . . . , an)
matching the domain of an operator O, i.e., ai ∈ Ci, 1 ≤ i ≤ n, O maps (a1, . . . , an)
into an individual, denoted by O(a1, . . . , an). We also use O(C1, . . . , Cn) to denote
the set {O(a1, . . . , an) | ai ∈ Ci}, called the range of the operator O.

Operators are similar to functions in ﬁrst-order logic but differs in two essential
ways. First, operators are many-sorted as C1, . . . , Cn could be different concepts.
More importantly, C1, . . . , Cn could be high-order constructs, e.g., assertions, concepts
of concepts, concepts of operators and so on.

For instance, consider the arithmetic domain, in which 0, 1, 2, etc., are individuals;
the set N of natural numbers is a concept; the successor operator Succ and the add
operators Add are operators.

For convenience, if O is unary, we sometimes use a.O (C.O) to denote O(a)
(O(C)), where a ∈ I and C ∈ C. If O is binary, we sometimes use a O b (A O B) to
denote O(a, b) (O(A, B)), where a, b ∈ I and A, B ∈ C. If the range of an operator O
is Boolean, we sometimes use O(a1, . . . , an) to denote O(a1, . . . , an) = ⊤.

2.2 Representing knowledge

Let hI, C, Oi be a syntactic structure. A term is an individual, either an atomic individ-
ual a ∈ I or the result O(a1, . . . , an) of an operator O operating on some individuals
a1, . . . , an. We also call the latter compound individuals.

An assertion is of the form

a = b,

(1)

where a and b are two terms. Intuitively, an assertion of the form (1) is a piece of
knowledge in the application domain, claiming that the left and right side are referring
to the same objects. Here, = is the the built-in equality relation in naive set theory.
Hence, a = b can be understood in alternative way that = (a, b) is true. A knowledge
base is a set of assertions. Terms and assertions can be considered as individuals as
well.

For instance, in arithmetic, 0 = Succ(1) and 2 + 3 = 5 are two typical assertions.

1Note that in naive set theory, a tuple of sets is a Cartesian product of some sets, which itself is a set as

well. Therefore, multi-ary operators can essentially be viewed as single-ary.

3

Similar to concepts that group individuals, we use schemas to group terms and
assertions. A schema term is either an atomic concept C ∈ C or the collection of
results O(C1, . . . , Cn). Essentially, a schema term represents a set of terms, in which
every concept is grounded by a corresponding individual. Then, a schema assertion
is of the same form as form (1) except that terms can be replaced by schema terms.
Similarly, a schema assertion represents a set of assertions.

Note that it could be the case that two or more different individuals are referring
to the same concept C in schema terms and assertions. In this case, we need to use
different copies of C, denoted by C 1, C 2, . . . , to distinguish among them. For instance,
all assertions x = y, where x and y are numbers, are captured by the schema assertion
N1 = N2. On the other side, in a schema, the same copy of a concept C can only refer
to the same individual. For instance, N = N is the set of all assertions of the form
x = x, where x ∈ N.

2.3 The semantics

We introduce a set theoretic semantics to deﬁne the meanings of syntactic structures
and knowledge. An interpretation is a pair h∆, .I i, where ∆ is a domain of elements
that admits naive set theory and .I is a mapping function that maps individuals into
domain elements in ∆, concepts into sets in ∆ and operators into functions in ∆. The
mapping functions .I can be generalized into mapping from terms to elements.

Let I be an interpretation and a = b an assertion. We say that I is a model of
a = b, denoted by I |= a = b iff .I (a) = .I (b), also written aI = bI. Let KB be a
knowledge base. We say that I is a model of KB, denoted by I |= KB, iff I is a model
of every assertion in KB. We say that an assertion A is a property of KB, denoted by
KB |= A, iff for all interpretations I such that I |= KB, we have I |= A. In particular,
we say that an assertion A is a tautology iff it is modeled by all interpretations.

Since we assume naive set theory, we directly borrow some set theoretic constructs
on individuals, concepts and operators. For instance, we can use ∪(C1, C2) (also writ-
ten as C1 ∪ C2) to denote a new concept that unions two concepts C1 and C2. Applying
this to assertions, we can see that assertions of the form (1) can indeed represent many
important features in knowledge representation. For instance, the membership asser-
tion, stating that an individual a is an instance of a concept C is the following assertion
∈ (a, C) = ⊤ (also written as a ∈ C). The containment assertion, stating that a con-
cept C1 is contained by another concept C2, is the following assertion ⊆ (C1, C2) = ⊤
(also written as C1 ⊆ C2). The range declaration, stating that the range of an oper-
ator O operating on some concept C1 equals to another concept C2 is the following
assertion O(C1) = C2.

3 Deﬁnitions for Extensibility

The primitive form is a foundation that uses minimal assumed knowledge and primitive
constructs. Nevertheless, sometimes it is not convenient to use it for formalizing an
application domain, e.g., to represent logic expressions. Hence, we extend it with more

4

building blocks. As discussed in the introduction section, extensibility is a critical issue
for KR approaches.

For this purpose, we introduce deﬁnitions in our approach. Deﬁnitions use (schema)
assertions to deﬁne new syntactic objects (individuals, concepts and operators) based
on existing ones. Note that deﬁnitions are nothing extra but special kinds of knowledge.

3.1 Deﬁning individuals, operators and concepts

We start with deﬁning new individuals. An individual deﬁnition is a special kind of
assertion of the form

a = t,

(2)

where a is an atomic individual and t is a term. Here, a is the individual to be deﬁned.
This assertion claims that the left side a is deﬁned as the right side t. For instance,
0 = ∅ means that the individual 0 is deﬁned as the empty set.

Deﬁning new operators is similar to deﬁning new individuals except that we use
schema assertions for this purpose. Let O be an operator to be deﬁned and (C1, . . . , Cn)
its domain. An operator deﬁnition is a schema assertion of the form

O(C1, . . . , Cn) = T,

(3)

where T is a schema term that mentions concepts only from C1, . . . , Cn. It could be
the case that T only mentions some of C1, . . . , Cn. Note that if C1, . . . , Cn refer to the
same concept, we need to use different copies respectively.

Since a schema assertion represents a set of assertions, essentially, an operator def-
inition of the form (3) deﬁnes the operator O by deﬁning the value of O(a1, . . . , an)
one-by-one, where ai ∈ Ci, 1 ≤ i ≤ n. Sometimes we also deﬁne operators in this
way. For instance, for deﬁning the successor operator Succ, we can use the schema
assertion Succ(N) = {N, {N}}. This is equivalent to an alternative deﬁnition stat-
ing that, for every natural number n, the successor of n, is deﬁned as {n, {n}}, i.e.,
Succ(n) = {n, {n}}. For instance, Succ(0) is deﬁned as {∅, {∅}}.

Deﬁning new concepts is different. As concepts are essentially sets, they are de-
ﬁned through set theoretic constructions. We directly borrow set theory notations to
deﬁne concepts as follows:
Enumeration Let a1, . . . , an be n individuals. Then, the collection {a1, . . . , an} is a
concept, written as

C = {a1, . . . , an}.

(4)

For instance, we can deﬁne the concept Digits by Digits = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}.
Operation Let C1 and C2 be two concepts. Then, C1 ∪ C2 (the union of C1 and
C2), C1 ∩ C2 (the intersection of C1 and C2), C1 \ C2 (the difference of C1 and C2),
C1 × C2 (the Cartesian product of C1 and C2), 2C1 (the power set of C1) are concepts.
Operation can be written by assertions as well. For instance, the following assertion

C = C1 ∪ C2

(5)

states that the concept C is deﬁned as the union of C1 and C2. As an example, one can
deﬁne the concept M an by M an = Human ∩ M ale.

5

Comprehension Let C be a concept and A(C) a schema assertion that only mentions
concept C. Then, individuals in C satisfying A, denoted by {x ∈ C|A(x)} (or simply
C|A(C)), form a concept, written as

C ′ = C|A(C).

(6)

For instance, we can deﬁne the concept M ale by M ale = {Animal |Sex(Animal) =
male}, meaning that M ale consists of all animals whose sex are male.
Replacement Let O be an operator and C a concept on which O is well deﬁned. Then,
the individuals mapped from C by O, denoted by {O(x) | x ∈ C} (or simply O(C)),
form a concept, written as

(7)
For instance, we can deﬁne the concept P arents by P arents = P arentOf (Human),
meaning that it consists of all individuals who is a P arentOf some human.

C ′ = O(C).

Deﬁnitions can be incremental. We may deﬁne some syntactic objects ﬁrst. Once
deﬁned, they can be used to deﬁne more. One can always continue with this incre-
mental process to extend the current system. For instance, in arithmetic, we deﬁne the
successor operator ﬁrst. Once deﬁned, it can be used to deﬁne the add operator, which
is further served as a basis to deﬁne more and more useful syntactic objects.

For clarity, we use the symbol “::=” to replace “=” for deﬁnitions. We force
uniqueness of deﬁnitions. That is, each syntactic object can only be deﬁned at most
once.

Another critical issue is about recursiveness. Clearly, a deﬁnition such as a ::=
a + 1 is invalid and meaningless. Hence, we need to restrict our deﬁnitions. However,
sometimes we do use recursion to deﬁne concepts. For instance, in arithmetic, natural
numbers are deﬁne as N ::= {0} ∪ Succ(N), meaning that if n is a natural number,
then the successor of n, i.e. Succ(n), is also a natural number.

We require that recursion can only be used in replacement deﬁnition of concepts.
When a recursive replacement is used, we interpret it as an inﬁnite process. At the
beginning, all concepts contain and only contain those individuals deﬁned by non-
replacement deﬁnitions. Then, we apply the replacement deﬁnitions to obtain new
versions of concepts. This ﬁnishes the ﬁrst step. We continue with the process. At
each step, we ﬁrst use those non-replacement deﬁnitions to expand the concepts. Then,
again, we apply the replacement deﬁnitions to obtain new versions of concepts. This
could be an inﬁnite process. For instance, consider the deﬁnition of natural numbers.
Initially, we have {0}. Then, applying the replacement deﬁnition, we expand it to
{0, Succ(0)}. We continue with this process to obtain the inﬁnite set of natural num-
bers {0, Succ(0), Succ(Succ(0)), . . . }.

We require that all other deﬁnitions are non-recursive. Formally, the deﬁnition
dependency graph over a set of deﬁnitions (without replacements) is a directed graph
< V, E >, where V consists of all syntactic objects appeared in these deﬁnitions and
E is the set of all pairs (a, b) such that there exists a deﬁnition whose left side is a
and whose right side mentions b.2 A set of deﬁnitions is said to be non-recursive if its
corresponding deﬁnition dependency graph is acyclic.

2For operator deﬁnitions, we ignore the concepts that are arguments in the operator and in the schema

term since they are essentially grounded into individuals.

6

In fact, one can observe that the Backus-Naur form (BNF), widely used in computer
science to deﬁne syntax, can be considered as a special case of our concept deﬁnitions
over strings. More precisely, BNF only uses three features, enumeration (of a single
element), union operation and recursive replacement by using the pre-assumed con-
catenation operator. Comprehension and other set operations are not used.

3.2 Multi-assertions

As a case study of extending the primitive form by deﬁnitions, we extend assertions of
the form (1) into multi-assertions.

Given a number n, we deﬁne a new operator Mn for multi-assertions with arity n

by the following schema assertion:

Mn(C1 = D1, . . . , Cn = Dn) ::= (C1, . . . , Cn) = (D1, . . . , Dn),

where Ci, Di, 1 ≤ i ≤ n, are concepts of terms. This assertion states that for n
assertions, Assertioni, 1 ≤ i ≤ n, of the form (1), namely ai = bi, Mn(a1 =
b1, . . . , an = bn) is (a1, . . . , an) = (b1, . . . , bn). Hence, Mn(a1 = b1, . . . , an = bn)
holds if and only if for all i, 1 ≤ i ≤ n, ai = bi, that is, Assertioni holds. In this sense,
this single assertion can be used to represent n assertions Assertioni, 1 ≤ i ≤ n.

Then, we deﬁne the concept of multi-assertions as follows:

M ulti − Assertion ::= [

Mi(A1, . . . , Ai),

1≤i≤∞

where A1, . . . , Ai are i copies of standard assertions. For convenience, we use Assertion1, . . . , Assertionn
to denote a n-ary multi-assertion.

Note that multiple assertions are just syntactic sugar of the primitive form as they
can be deﬁned in the primitive form by using ordered pairs and Cartesian products.
In this sense, they do not increase the expressive power of the primitive form. Never-
theless, using them can make the representation task more convenient in some cases.
Multi-assertions are not only of interests themselves. Once deﬁned, they can be used to
deﬁne more syntactic building blocks. Note that ﬁnite knowledge bases are ﬁnite sets of
assertions, i.e., multi-assertions, which can essentially be viewed as single assertions.

3.3 Nested terms and assertions

We continue with our extensions for the primitive form by introducing nested terms
and nested assertions. Note that terms deﬁned in Section 2 cannot be nested in the
sense that individuals used inside an operator must be atomic. This can be generalized
to nested terms, where operators can use compound individuals inside.

Nested terms are deﬁned by the following deﬁnition:

N ested − T erm ::= T erm ∪ N − T erm

N − T erm ::= Op(N ested − T erm),

where T erm is the concept of standard term deﬁned in Section 2, Op is an arbitrary
operator and Op(N est − T erm) is a replacement deﬁnition such that individuals in
N est − T erm are in the domain of Op.

7

The above deﬁnition is a recursive deﬁnition. In fact, it can be simpliﬁed as

N ested − T erm ::= T erm ∪ Op(N ested − T erm).

However, this deﬁnition itself uses nested terms as well since Op(N ested − T erm) is
not atomic. Hence, before formally deﬁning the meaning of nested terms, we use the
former.

Nevertheless, from this example, we can see how to interpret nested terms. That
is, whenever a nested term is used, we introduce a new atomic individual to replace it,
and claim that this atomic individual deﬁnes the nested term. To formalize this idea,
we also need nested assertions, in which terms used on both sides of the assertion can
be nested.

N ested − Assertion ::= N ested − T erm = N ested − T erm.

As mentioned, nested assertions can be represented by non-nested multi-assertions
by introducing new individuals. Whenever a result of nested term is used, we introduce
a new individual to replace it and claim that this new individual is deﬁned as the nested
term. That is, for every nested term Op(a1, . . . , Op′(b1, . . . , bm), . . . , am) occurred
in a nested assertion, we introduce a new atomic individual a′; replace the above term
with Op(a1, . . . , a′, . . . , am) and add a new assertion a′ = Op′(b1, . . . , bm). F(or
instance, the nested assertion Op(a, Op(b, Op′(c))) = Op′(d) is deﬁned as Op(a, x) =
Op′(d), x = Op(b, y), y = Op′(c), where x and y are new individuals. In this sense,
nested assertion is essentially a multi-assertion, which can be represented as a single
assertion. Therefore, nested assertion is a syntactic sugar of the primitive form as well.
Using nested assertions can simplify the representation task. However, one can-
not overuse nested assertions since, essentially, every use of a nested term introduces
a new individual. For instance, one can easily get lost with a nested assertion like
Op(a, Op(b, Op′(c))) = Op′(d).

4 Logic Operators over Assertions

In this section, we continue to extend the primitive form with logic operators over
assertions.
Interestingly, we can deﬁne not only propositional connectives but also
quantiﬁers based on naive set theory. This, on one side, provides another case study
how to extend the primitive form, and on the other side, shows that, assuming naive set
theory, the primitive form is expressive enough to capture logic.

4.1 Propositional operators over assertions

We start with the propositional case. Let A be the concept of nested assertions. We
introduce a number of operators over A, including ¬(A) (for negation), ∧(A1, A2)
(for conjunction), ∨(A1, A2) (for disjunction), → (A1, A2) (for implication) and ≡
(A1, A2) (for equivalence).

There could be different ways to deﬁne those operators, depending on which oper-
ators are deﬁned directly and which are deﬁned based on the previous ones. Here, we

8

directly deﬁne negation, conjunction, disjunction and implication and indirectly deﬁne
equivalence.

Let a = a′ and b = b′ be two (nested) assertions. The propositional connectives

are deﬁned as follows:

¬(a = a′) ::=
∧(a = a′, b = b′) ::=
∨(a = a′, b = b′) ::=
→ (a = a′, b = b′) ::=
≡ (a = a′, b = b′) ::=

{a} ∩ {a′} = ∅
({a} ∩ {a′}) ∪ ({b} ∩ {b′}) = {a, a′, b, b′}
({a} ∩ {a′}) ∪ ({b} ∩ {b′}) 6= ∅
({a, a′} \ {a} ∩ {a′}) ∪ ({b} ∩ {b′}) 6= ∅
∧ (→ (a = a′, b = b′), → (b = b′, a = a′)).

We also use a 6= a′ to denote ¬(a = a′). One can observe that the ranges of all
logic operators are nested assertions. Hence, similar to multi- and nested assertions,
propositional logic operators are syntactic sugar as well.

Now we consider some properties. For instance, according to the deﬁnitions, De-

Morgan’s laws are tautologies.

Theorem 1. Let A1 and A2 be two (nested) assertions. Then, for all interpretations I,

I |= ¬(A1 ∨ A2) ≡ ¬(A1) ∧ ¬(A2).

I |= ¬(A1 ∧ A2) ≡ ¬(A1) ∨ ¬(A2).

Also, the relationship between implication and disjunction, i.e., A1 → A2 ≡ ¬A1∨

A2, is a tautology as well.

In fact, all tautologies in propositional logic are tautologies under our context, i.e.,
modeled by all interpretations, and vice versa. This, actually follows from the follow-
ing theorem, stating that the syntactic deﬁnitions above deﬁnes the semantics of logic
operators.

Theorem 2. Let A1 and A2 be two nested assertions. Then, for all interpretations I,

• I |= ¬(A1) iff I is not a model of A1.

• I |= ∧(A1, A2) iff I is a model of both A1 and A2.

• I |= ∨(A1, A2) iff I is a model of either A1 or A2.

• I |=→ (A1, A2) iff I is a model of A1 implies that I is a model of A2.

• I |=≡ (A1, A2) iff I is a model of A1 if and only if I is a model of A2.

4.2 Quantiﬁers over assertions

Now we consider quantiﬁers, including ∀ (for the universal quantiﬁer) and ∃ (for the
existential quantiﬁer). The domain of quantiﬁers is a pair (C, A(C)), where C is a
concept and A(C) is a schema assertion that only mentions C.

The quantiﬁers are deﬁnes as follows:

∀(C, A(C))
∃(C, A(C))

::= C|A(C) = C
::= C|A(C) 6= ∅

9

Intuitively, ∀(C, A(C)) is true iff those individuals x in C such that A(x) holds equals
to the concept C itself, that is, for all individuals x in C, A(x) holds; ∃(C, A(C)) is
true iff those individuals x in C such that A(x) holds does not equal to the empty set,
that is, there exists at least one individual x in C such that A(x) holds. We can see
that the ranges of quantiﬁers are nested assertions as well. Thus, quantiﬁers are also
syntactic sugar of the primitive form.

Similarly, the syntactic deﬁnitions of quantiﬁers based on naive set theory capture

their semantics.

Theorem 3. Let C be a concept and A(C) a schema assertion that only mentions C.
For all interpretations I,

• I |= ∀(C, A(C)) iff for all individuals a in C, I |= A(a).

• I |= ∃(C, A(C)) iff there exists at least one individual a in C such that I |=

A(a).

As a consequence, one can prove some properties about quantiﬁers. For instance,

the universal quantiﬁers and the existential quantiﬁers are dual under negation.

Note that quantiﬁers deﬁned here are ranging from an arbitrary concept C. If C
is a concept of all atomic individuals and all quantiﬁers range from the same concept
C, then these quantiﬁers are ﬁrst-order. Nevertheless, the concepts could be different.
In this case, we have many-sorted ﬁrst-order logic. Moreover, C could be complex
concepts, e.g., a concept of all possible concepts. In this case, we have monadic second-
order logic. Yet C could be many more, e.g., a concept of assertions, a concept of
concepts of terms etc. In this sense, the quantiﬁers become high-order.

5 Conclusions, Discussions and Related Work

In this paper, we have proposed a set theoretic approach to syntactically represent
knowledge in application domains. The syntax of a domain is captured by individ-
uals (i.e., objects in the domain), concepts (i.e., groups of objects sharing something
in common) and operators (i.e., connections and relationships among objects). From
a set theory point of view, individuals, concepts and operators are interpreted as ele-
ments, sets and functions respectively. In the primitive form, knowledge in the domain
is simply captured by equality assertions of the form a = b, where a and b are terms.

We have shown how to extend a system by deﬁnitions, which are special kinds of
knowledge used to deﬁne new individuals, concepts and operators. For instance, we
have extended the primitive form with multi-assertions and nested assertions, which are
just syntactic sugar of the primitive form as they can be expressed in it. Extensibility is
a critical issue for KR. A KR approach should be able to deﬁne new syntactic objects
based on exiting ones. Once deﬁned, these objects can be further used to deﬁne more.
Interestingly, we have shown that logic operators, not only propositional connec-
tives but also quantiﬁers, can be deﬁned in the primitive form based on naive set theory.
This, on one side, shows that we can deﬁne the semantics of logic operators syntacti-
cally, and on the other side, shows the expressiveness of our approach.

10

As discussed in the introduction section, our motivation is to propose a simple, ex-
tensible, expressive and efﬁcient KR approach. While extensibility and expressiveness
are discussed in the above two paragraphs, simplicity is difﬁcult to justify. We argue
that our approach indeed satisfy the three aspects of simplicity. For primitiveness, our
approach only uses naive set theory, syntax including individuals, concepts and opera-
tors and knowledge of the form a = b. For succinctness, the primitive form only needs
at most double length to simulate logic, which is an arguably succinct KR formalism.
For user-friendliness, we believe that knowledge of the form a = b, similar to the as-
signment statement in programming, can be easily understood and used by knowledge
engineers.

Certainly, one can deﬁne multi-assertion, nested assertion and logic operators di-
rectly. Nevertheless, our motivation is to provide a simple foundation for knowledge
representation so that all other features and building blocks in KR can be deﬁned as
extensions of it. We believe that our primitive form is such a candidate, evident from
the fact that it is able to capture high-order logic expressions.

This work has two philosophical implications. First, for answering the question
“what is knowledge”, our approach deﬁnes it as equality assertions between two terms.
Again, evident from the fact that single equality assertions can capture high-order logic
expressions based on naive set theory, we believe that it provides a uniformed view of
what knowledge is. Such a uniformed view is critical for not only understanding and
representing knowledge but also utilizing and reasoning about knowledge. Second, we
have shown that we can deﬁne the semantics of logic syntactically based on naive set
theory. We believe that the same thing can be done for the semantics of other features in
KR, e.g., nonmonotonic reasoning. This is useful as most operations done by machines
are syntax based.

This paper is mainly focused on the representation part. We leave the reasoning part
and the efﬁciency discussions to another paper. Nevertheless, it is worth mentioning
a little here. Roughly speaking, reasoning is about how to derive properties from a
knowledge base. We distinguish between querying and reasoning. The former is to
check whether an assertion is a property of a knowledge base, while the latter is to ﬁnd
some properties of a given knowledge base. Clearly, reasoning can serve as a means
for querying, but they are not the same. Querying is generally difﬁcult of our approach
as it can express logic. Nevertheless, reasoning could be efﬁcient, and that is exactly
the focus of our reasoning paper.

Although querying the full language is generally undecidable, there could be some
meaningful and useful tractable subclasses. An important case is database. Note again
that, in the primitive form, knowledge is simply formalized by equality assertions of the
form a = b. Nevertheless, this can be indeed expressive as a and b could be complex
nested terms. A database under our context only contains two kinds of equality asser-
tions, i.e., data of the form Op(a1, . . . , an) = b, where ai, 1 ≤ i ≤ n, and b are atomic
individuals and membership statements a ∈ C, where a is an atomic individual and C
is an atomic concept. In this sense, data is a special kind of knowledge. Querying on
such a database is tractable. We leave the detailed discussions to another work.

Our set theoretic KR approach is deeply inspired by and rooted in many other
KR formalisms, including propositional and ﬁrst-order logic, semantic network and
description logic. The dynamic version of this approach (will be presented in another

11

paper) is deeply related to rule based formalisms including Hoare logic and answer
set programming. Interestingly, although originated from a different motivation, our
approach shares many basic ideas and borrows many notations from description logic
[Baader et al., 2003]. In fact, we can rewrite all building blocks in description logic
to our approach since the primitive form can capture ﬁrst-order logic. Table 1 depicts
some of them. Here, ˆR is deﬁned to transform a binary Boolean relationship R to a

Table 1: Rewriting description logic into our approach

Constructs
individual
concept

role

intersection

union

complement
reverse role

existential restriction
universal restriction
at least restriction

nominal

concept assertion

role assertion

individual equality
concept inclusion

Description logic

Our approach

individual
concept

Role
C ⊓ D
C ⊔ D

¬C
R−
∃R.C
∀R.C

≥ nR.C

{a}

C(a)
R(a, b)
a ≈ b
C ⊑ D

individual
concept

binary Boolean operator

C ∩ D
C ∪ D
I \ C

R−(C, D) ::= R(D, C)

I| cR−(I) ∩ C 6= ∅

I| cR−(I) ⊆ C

I|( cR−(I) ∩ C)C ≥ n

{a}
a ∈ C
R(a, b)
a = b
C ⊆ D

unary operator, i.e., ˆR(C) ::= D|R(C, D), and (D)C denotes the cardinality of D.

Nevertheless, our approach differs from description logic in several essential ways.
The most important difference is that, for the purpose of forming new concepts by
operators/roles, our approach directly uses set theoretic constructs including compre-
hension and replacement, while description logics use role restrictions. As an example,
suppose that we want to specify a concept including all human having female children.
In our approach, this is formalized by Human | Children(Human) ∩ F emale 6= ∅,
while in description logic, it is formalized by ∃P arentof.(F emale). Secondly, we
use multi-ary operators, e.g., the Add operator, instead of binary Boolean relationships
to connect individuals/concepts. Thirdly, all knowledge in our approach are essentially
formalized in the same form, i.e., equality assertions. Fourthly, we allow complex as-
sertions including high-order constructs. Last but not least, we particularly highlight
the importance of extensibility in our approach.

We shall present a series of papers to propose the set theoretic knowledge repre-
sentation approach. This paper is a foundation that is mainly concerned with the basic
ideas and the representation part. As mentioned, there are a number of things to present
in the future. One critical task is to present the reasoning part. Another one is to formal-
ize dynamics, including how to represent basic and compound actions, how to describe
the effects of actions and the interactions among knowledge and actions.

12

References

[Baader et al., 2003] Franz Baader, Diego Calvanese, Deborah L. McGuinness,
Daniele Nardi, and Peter F. Patel-Schneider, editors. The Description Logic Hand-
book: Theory, Implementation, and Applications. Cambridge University Press, New
York, NY, USA, 2003.

[Baral, 2003] Chitta Baral. Knowledge Representation, Reasoning, and Declarative

Problem Solving. Cambridge University Press, New York, NY, USA, 2003.

[Brachman and Levesque, 2004] Ronald J. Brachman and Hector J. Levesque. Knowl-

edge Representation and Reasoning. Elsevier, 2004.

[Halmos, 1960] Paul Halmos. Naive Set Theory. Van Nostrand, 1960. Reprinted by

Springer-Verlag, Undergraduate Texts in Mathematics, 1974.

[Levesque and Brachman, 1987] Hector J. Levesque and Ronald J. Brachman. Expres-
siveness and tractability in knowledge representation and reasoning. Computational
Intelligence, 3:78–93, 1987.

[van Harmelen et al., 2008] Frank van Harmelen, Vladimir Lifschitz, and Bruce W.
Porter, editors. Handbook of Knowledge Representation, volume 3 of Foundations
of Artiﬁcial Intelligence. Elsevier, 2008.

13

