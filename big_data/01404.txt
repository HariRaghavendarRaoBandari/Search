6
1
0
2

 
r
a

M
4

 

 
 
]

.

R
P
h
t
a
m

[
 
 

1
v
4
0
4
1
0

.

3
0
6
1
:
v
i
X
r
a

Design Heuristic for Parallel Many Server Systems under

Ivo Adan∗

FCFS-ALIS
Marko Boon†

March 7, 2016

Abstract

Gideon Weiss‡

We study a parallel service queueing system with servers of types s1, . . . , sJ , customers
of types c1, . . . , cI , bipartite compatibility graph G, where arc (ci, sj) indicates that server
type sj can serve customer type ci, and service policy of ﬁrst come ﬁrst served FCFS, assign
longest idle server ALIS. For a general renewal stream of arriving customers and general
service time distributions, the behavior of such systems is very complicated, in particular
the calculation of matching rates rci,sj , the fraction of services of customers of type ci
by servers of type sj, is intractable. We suggest through a heuristic argument that if the
number of servers becomes large, the matching rates are well approximated by matching
rates calculated from the tractable FCFS bipartite inﬁnite matching model. We present
simulation evidence to support this heuristic argument, and show how this can be used to
design systems for given performance requirements.

1 Introduction
Parallel service systems have servers of types S = {s1, . . . , sJ}, customers of types C = {c1, . . . , cI},
and bipartite compatibility graph G ⊆ C × S, where (ci, sj) ∈ G if servers of type sj can serve
customers of type ci. They model situations in which a large volume of service requests of various
types are channelled to a central facility, where they are attended by a large number of agents
diﬀerentiated by skill. Such situations commonly occur in manufacturing, transportation, service
contact centers, health systems, communications, internet data exchange, computing and various
other areas of applications. The queueing model has a general renewal stream of arriving cus-
tomers with rate λ, where successive arrivals are of i.i.d types, ci with probability αci, and there
is a total of n servers, nsj of which are of type sj. Service times are independent, distributed
according to general distributions Gci,sj , with mean mci,sj and service rate µsj ,ci = 1/mci,sj .
Customers have ﬁnite patience, with independent patience time distributions Fci, and a customer
abandons if he does not start service by the time his patience is exhausted.

Parallel server systems are widely discussed in the literature. An incomplete list would
include an early study [13]; applications to manufacturing and supply chain management [26, 21],
applications to call centers and internet service systems [11, 16, 22, 27], attempts to ﬁnd optimal
∗Department of Industrial Engineering, Eindhoven University of Technology, P.O. Box 513, 5600 MB Eind-
†Department of Mathematics and Computer Science, Eindhoven University of Technology, P.O. Box 513, 5600
‡Department of Statistics, The University of Haifa, Mount Carmel 31905, Israel; email gweiss@stat.haifa.ac.il

MB Eindhoven, the Netherlands; email marko@win.tue.nl

hoven, the Netherlands; email iadan@tue.nl

Research supported in part by Israel Science Foundation Grants 711/09 and 286/13.

1

policies, mainly for small graph systems [29, 8, 6, 7, 12, 24], heavy traﬃc and ﬂuid approximations
[17, 18], and many server scaling [14, 15]. Most relevant to our current paper are [10, 5, 23, 20].
In assessing such systems there are various objectives that may be of importance, on the
customer side they include waiting times and abandonment rates as well as consideration of
fairness to customers of various types or priorities for some types.
In conﬂict with those, on
the server side there is the objective of maximum utilization of the servers, minimizing their
number, and reaching a balanced work division between the various types. Each of these may
carry a diﬀerent weight in diﬀerent application contexts. Often λ, αci and Fci are given, together
with some form of quality of service requirements. All the other parameters of the system can
be adjusted to achieve the requirements in an optimal way: One can redesign the bipartite
compatibility graph, change the service rates, change the workforce mix, decide on n, and decide
on the service policy. It should perhaps be pointed out that changing the service policy may be
as hard and costly as adjusting any of the other service parameters. At this level of generality
such systems do not allow a complete analytic analysis, and performance is often evaluated in
practice by simulation. However, any methods for calculating approximate performance measures
or supporting design without the need to use simulation should be quite valuable. It is the aim
of this paper to deliver such methods.

In the current paper we focus on the policy of ﬁrst come ﬁrst served (FCFS), where whenever
a server is available he will take the longest waiting compatible customer, and assign longest
idle server (ALIS), where whenever a customer arrives he will be assigned to the longest idling
compatible server. We provide a heuristic to calculate performance measures under this policy,
when λ and n are large.

FCFS-ALIS in a parallel service system has several advantages: It attempts to achieve re-
source pooling [25], i.e. all the servers are busy for about the same fraction of time, and it
attempts to give all customers the same service level, i.e. global FCFS, equally for all types of
customers [23]. It is also fair to the servers. One notable property of FCFS is the following:
Assume that arriving customers can choose the server they wish to go to, and servers then serve
the queueing customers FCFS. If each arrival has complete information on the schedule of all
the servers at his moment of arrival, then to minimize his waiting time he will join the compat-
ible server that has the shortest workload (JSW). Thus JSW is the Nash equilibrium of fully
informed customers minimizing waiting times. But this policy of JSW is automatically achieved
when customers queue up in a single queue and the servers are using FCFS. FCFS can then
serve as a benchmark, and comparison of the costs under FCFS with other policies will provide
an estimate of the price of anarchy. Apart form that, FCFS is easy to implement, as it does not
require any calculations or knowledge of system parameters. It is also sometimes required by
law. Finally it is indeed a policy very commonly used in practice. On the minus side, FCFS may
waste resources by letting servers serve customers for which they are not eﬃcient, and it may
cause long delays to customer types that have a limited number of compatible servers. However,
some of these shortcomings can be avoided by redesigning the compatibility graph.

Unfortunately, analysis of parallel service systems under FCFS is very hard. Foss and Cher-
nova [10] provide an example of a symmetric system with 3 types of customer and 3 servers, and
just 2 service distributions with ﬁxed fast and slow service rates, where stability of the system
depends on the entire shape of the service time distributions. The diﬃculty is in calculating the
matching rates rci,sj , deﬁned as the long term average fraction of customers of type ci which are
processed by servers of types sj. Given the matching rates, one can calculate the total service
capacity of the system, as

(cid:88)

µ =

rci,sj µci,sj .

(ci,sj )∈G

It is the calculation of the matching rates, how many customers of type ci are served by servers

2

of type sj under FCFS-ALIS, which is intractable, and may depend on the entire shape of the
service time distributions. Matching rates can be calculated for some types of graphs [23, 20],
and they can also be calculated for general bipartite graphs when arrivals are Poisson, service
rates depend only on the servers, and services are exponential [5], but not otherwise. However,
matching rates can be calculated for the much simpler and very tractable FCFS inﬁnite bipartite
matching model [9, 4, 3].

It is our observation that when λ and n are large, the matching rates of the general parallel
service system under FCFS-ALIS are approximately those of the FCFS inﬁnite bipartite matching
model, which is the basis for our current paper. We use our ability to calculate matching rates in
order to design parallel service systems operating under FCFS-ALIS. We consider parallel service
systems operating in Eﬃciency Driven mode (ED), Quality Driven mode (QD), and Quality and
Eﬃciency Driven mode (QED) [19]. Our objective in each of these is to design the workforce
required to achieve certain service requirements, speciﬁcally:

- In ED mode, we specify average waiting times for customers, and resulting abandonment

rates.

- In QD mode, we specify average idle time for the servers,
- In QED mode we specify almost full utilization, no wait or short wait, and no abandon-

ments.

Under FCFS-ALIS we achieve these pre-speciﬁed requirements with complete resource pooling
of servers, and balance service levels for all types of customers.

We also present designs where under FCFS-ALIS the parallel servers are not pooled, and
use this to achieve diﬀerentiated service levels for the various types of customers, based on
pre-speciﬁed priority levels.

The rest of the paper is structured as follows. In Section 2 we describe the FCFS inﬁnite
bipartite matching model, and the formula for the calculation of matching rates. In Section 3
we present our conjecture on the behavior of FCFS-ALIS parallel service systems under many
server scaling, which ties them up with the inﬁnite bipartite matching model. In Section 4 we
present our design algorithms, based on the calculation of matching rates. Finally, in Section
5 we present examples in which we calculate designs, and examine the performance under our
designs. We present extensive simulation results, that conﬁrm the validity of our approach for a
range of λ, n scales.

This paper is an expansion, generalization, completion and extension of preliminary studies

in [2, 1]. A recent discussion of many server scaling for the “N” system appears in [30].

2 FCFS inﬁnite bipartite matching
We now consider a system with customer types C and server types S, with a bipartite compati-
bility graph G, and a much simpliﬁed stochastic model: We have inﬁnite sequences of customers
c1, c2, . . . , cm, . . . where cm ∈ C and of servers s1, s2, . . . , sn, . . . where sn ∈ S. We assume that
cm are drawn according to probabilities α = (αc1, . . . , αcI ) and sn are drawn according to prob-
abilities β = (βs1, . . . , βsJ ), and they are all independent. For each realization of the sequences
we match customers and servers according to a FCFS policy: sn is matched to the earliest com-
patible cm in c1, c2, . . . , which has not yet been matched to s1, . . . , sn−1. The matching process,
for given graph G, is illustrated in the ﬁgure below.

3

This model is much simpler than a queueing model, since it involves no arrival times, no service
times, no busy or idle servers, and since it treats customers and servers in an entirely symmetric
way. This system is studied in [9, 4, 3].
It is shown in [4] that the matching is uniquely
determined for any two sequences and that all customers and servers are matched almost surely.
Furthermore, the system demonstrates dynamic reversibility, and is associated with a Markov
chain that has a product form stationary distribution. The stationary distribution is used to
obtain explicit expressions for the matching rates. We describe the calculation of the matching
rates now.
We use the following notations: we let C(sj) be the set of customer types compatible with
server type sj, and S(ci) be the set of server types compatible with customer type ci. For a
ci∈C S(ci), and for a subset of server types S we let
sj∈S C(sj). We also let U(S) = C(S) be the customer types that can only be served by

subset of customer types C we let S(C) =(cid:83)
C(S) =(cid:83)
servers of types in S. For subsets C, S we deﬁne αC =(cid:80)

ci∈C αci, and βS =(cid:80)

sj∈S βsj .

Deﬁnition 2.1 For given α, β,G we say that there is complete resource pooling in the FCFS
inﬁnite bipartite matching system if the following three equivalent conditions hold:

αC < βS(C),

βS < αC(S),

βS > αU (S),

S ⊂ S, S (cid:54)= ∅,S, C ⊂ C, C (cid:54)= ∅,C.

(1)

Theorem 2.2 (from [4]) Let rci,sj (n) be the (random) number of ci, sj matches between c1, . . . , cn
and s1, . . . , sn, in the FCFS inﬁnite bipartite matching of the two sequences. If complete resource
pooling holds, then almost surely limn→∞ rci,sj (n) = rci,sj which is calculated by

rci,sj = βsj

B

(β(k) − α(k))−1

J−1(cid:89)

(cid:88)
(cid:32)J−1(cid:88)

PJ

φk

k=1

k=1

α(k)

β(k) − α(k)χk

k−1(cid:89)

l=1

β(l) − α(l)
β(l) − α(l)χl

+

φJ

φJ + ψJ

(cid:33)

J−1(cid:89)

l=1

β(l) − α(l)
β(l) − α(l)χl

,

(2)

where the summation is over PJ , the set of all permutations of the server types S, and for each
permutation of the servers S1, . . . , SJ , the following notation is used:

α(k) = αU{S1,...,Sk},

β(k) = β{S1,...,Sk},

k = 1, . . . , J,

φk =

αU{S1,...,Sk}∩{ci}

αU{S1,...,Sk}

,

ψk =

αU{S1,...,Sk}∩(C(sj )\{ci})

αU{S1,...,Sk}

,

χk = 1 − φk − ψk ,

and B is the normalizing constant:

(cid:0)(β{S1} − αU{S1})(β{S1,S2} − αU{S1,S2})··· (β{S1,...,SJ−1} − αU{S1,...,SJ−1})(cid:1)−1

.

(cid:88)

PJ

B−1 =

An easy example of this formula is for the case that I = J and C(sj) = C\cj, i.e the bipartite
compatibility graph is almost complete, each server can serve all but one of the customer types.

4

C1C1C1C4C4C4C2C3C3S3S3S3S2S2S2S1S1S1S1S2S3S4C4C3C2C1GIn that case, complete resource pooling holds if and only if αcj + βsj < 1, and the matching rates
are:

(cid:46)(cid:32)

I(cid:88)

i=1

(cid:33)

rci,sj = αciβsj

(1 − αci)(1 − βsj ) − αcj βsi
(1 − αci − βsi)(1 − αcj − βsj )

1 +

αi βi

1 − αi − βi

.

(3)

However, for any other bipartite compatibility graph, this formula does not seem to simplify, and
we suspect that its calculation is (cid:93)P hard. We have programmed it to be able to calculate it up
to I, J ≤ 12, but it will become hard to compute the matching rates for larger number of types.
Further research to obtain perhaps easier approximations to rci,sj may be necessary.
(C,S) into subsystems (C(1),S (1)), . . . , (C(L),S (L)), such that

When resource pooling does not hold, it is shown in [5] that there is a unique decomposition

βS (1)
αC(1)

< ··· <

βS (L)
αC(L)

,

(C(l),S (l)) has complete resource pooling, l = 1, . . . , L.

(4)

A Mathematica program to calculate the matching rates for given α, β,G is available from

the authors.

3 Matching under many server scaling

Consider a queueing system with a single customer type and a single server type, with arrival
rate λ, and patience distribution F , and with n servers, each with service rate µ, so that the
traﬃc intensity is ρ = λ/nµ. Many server scaling occurs when we keep µ and ρ ﬁxed and let
both λ and n increase. Note that, to increase λ, we scale the inter-arrival time distribution,
and thus we do not alter its shape. Because of abandonments the system will always be stable.
There will be three behavior modes for this system: When ρ < 1 the system is in QD (quality
driven mode). In QD mode, there is always a fraction ≈ (1 − ρ) of idle servers and customers
never wait and nobody abandons. When ρ > 1 the system is in ED (eﬃciency driven mode). In
ED mode, servers are always busy, there is always a queue, and a fraction ≈ F (W ) = (ρ − 1)/ρ
of customers abandons without service. Customers with patience ≤ W do not get served, and
customers with patience > W receive service after a wait of ≈ W . When ρ ≈ 1 the system is
in QED (quality and eﬃciency driven mode). In QED mode, servers are busy most of the time
and if they idle that is only for a short while, an appreciable fraction of customers do not need
to wait, most customers wait a very short time, and very few customers abandon [28].

We now consider the system of parallel skill based servers of Section 1. We ﬁx the fractions
αci, nsj /n, the service time distributions Gci,sj , and the patience distributions Fci. We use
FCFS-ALIS policy, and we let λ and n increase at the same rate, so that we get into many server
scaling. We cannot directly calculate ρ for this system, as it depends on the service policy, and
in particular we cannot calculate it directly under FCFS-ALIS, but we will try and approximate
it. Under many server scaling we can expect that for favorable choices of parameters, the system
will achieve resource pooling, so that customers of diﬀerent types will have similar waiting times,
and servers of diﬀerent types will have similar workloads and similar idle times. Under such
conditions, the system will again behave in one of the three modes, QD, ED or QED, according
to the traﬃc intensity.

We now make the following conjectures regarding the behavior of the system under many
server scaling, when resource pooling holds: We conjecture that the order in which customers
will reach the head of the line (if they did not abandon previously) will be such that the types of
customers will be i.i.d. with some probabilities αci, approximately. Also we conjecture that the

5

order in which servers will become available at the head of line (if there is a queue of idle servers),
will be such that the types of servers will be i.i.d with some probabilities βsj , approximately.
Under this conjecture, the matching between customers and servers will be approximately the
same as for the FCFS inﬁnite bipartite matching model.

The following three ﬁgures illustrate the operation of our system under FCFS-ALIS in each

of the above mentioned three modes:

In ED mode, all the servers are always busy, customers with enough patience wait a time W ,
and when they reach the head of the queue, they match with the next compatible server. Note
that customers entering service are still of i.i.d. types, approximately, but with new probabilities
αci, since they are thinned independently by impatience.

In QD mode, there is a queue of idle servers, each server, on completing a service, joins the
end of this queue. A server reaches the head of the queue after an idle time T , and matches with
the ﬁrst compatible customer. Customers never wait and are of i.i.d. types with probabilities
αci.

In QED mode, the system alternates infrequently between periods with a queue of customers
and periods with a queue of servers. All servers are almost always busy, customers immediately
enter service or wait a short time, and there are only a few abandonments.

The key assumption necessary for the matching rates to be according to the FCFS inﬁnite
bipartite matching model is that approximately the sequence of customers entering service has
i.i.d. types and the sequence of servers that become available and that start service has i.i.d.
types.

When there is no resource pooling, the system decomposes into subsystems as in (4). The
following ﬁgure shows how such a system will behave under our conjecture. Here the system is
decomposed into three sub systems, where (C(3),S (3)) receives better service than (C(2),S (2)),
which receives better service than (C(1),S (1)).

6

Servers, all are busyPatient customers Arrivals time length WBusy serversIdle serverstime length TArrivals Arrivals The three illustrations depict behavior under ED (top ﬁgure), QD (middle ﬁgure), and in the
bottom one, (C(1),S (1)) is in ED, (C(2),S (2)) is in QED and (C(3),S (3)) is in QD. In ED mode,
customers of types C(1) wait the longest time, before being served by servers of types S (1). Servers
of types S (2) skip customers of type C(1) and serve customers of type C(2) that have a shorter
wait, and servers of types S (3) skip customers of type C(1),C(2) and serve customers of type C(3)
that have the shortest wait. In QD mode, servers of the high priority customers have longer
idle periods, and are available for the high priority customers immediately, while servers of lower
priority customers have shorter idle times, and are further in the queue, and their customers
will skip the high priority servers in the queue, which are incompatible with them. In the mixed
mode, low priority customers will wait, while high priority customers will have a queue of idle
servers ready to serve them.

4 Design Algorithms

4.1 General Strategy

We specify the quality of service requirements: For QD this means specifying the utilization of
the servers, for ED this means specifying the amount of waiting of patient customers, and for
QED this means no abandonment and no idling. We next specify which fraction of the service
should be done by each type of server. This is a design decision, which will not aﬀect quality of
service, but it is relevant for the operational costs. These determine the α and β for the matching
of customers and servers. We then use the bipartite inﬁnite matching model, formula (2), to
obtain the matching rates rci,sj . Once we have the matching rates, we can calculate the amount
of work required from each type of server, and this determines, by Little’s law, the number of
servers that are needed of each type in order to meet the requested service of quality. In the

7

Servers, all are busyBusy serversIdle serversPatient customers Arrivals idle lengths TTWwait lengths WArrivals Arrivals case of diﬀerentiated service, we decompose the server and customer types into ED, QED and
QD subsets.

In the following sections we show how to perform these steps for each of the three regimes,
and for the decomposition. We illustrate the calculations for the examples of Section 5, and
demonstrate the eﬀectiveness of the heuristics through simulation.

Note that the inter-arrival time distribution and the service time distributions are not required
as input for the algorithm, only the arrival rate and the average service times are required. The
distribution of the abandonment time distribution is needed for design in ED mode.

4.2 Design for Quality Driven Service

Here the traﬃc intensity is < 1, and customers almost never wait, and therefore even more rarely
abandon. There are almost always some idle servers waiting for customers, and because of ALIS,
servers of diﬀerent types all have the same idle time distribution. The quality parameter in this
case is the value T of the average idle time. It is a measure of the utilization of the servers.
Because there are virtually no abandonments, the patience time distribution is not required as
input.

Algorithm for QD

Input:• Compatibility graph G

• Arrival rate λ
• Fractions of customer types αci
• Mean service times mci,sj

Requested quality of service parameter:
• Mean server idle time after each service T

Design parameters:

• Fraction of services performed by each server type βsj

Algorithm:

Check α, β for complete resource pooling

Compute matching rates

Compute staﬃng levels

Output:

• Required workforce nsj

rci,sj := use Equation (2)

nsj :=

λrci,sj

(cid:88)

ci∈C(sj )

(cid:0)mci,sj + T(cid:1)

4.3 Design for Eﬃciency Driven Service

Here the traﬃc intensity is > 1, servers are always busy and customers always need to wait,
and a certain fraction will abandon. By FCFS, customers of diﬀerent types all have the same
waiting time distribution, and the system demonstrates global FCFS (this term was coined by
Talreja and Whitt [23]). The system is stabilized by abandonments, with average waiting time

8

W . This means that approximately a fraction 1 − Fci(W ) of customers of type ci will abandon.
The value of W is the quality of service parameter here, so that customers with patience less
than W do not get served, while customers with patience that exceeds W get served after a wait
of W . Since customers are thinned independently by impatience, we need to calculate the total
eﬀective arrival rate (of patient customers) and we need to adjust the fractions αci of customer
types entering service.

Algorithm for ED

Input:• Compatibility graph G

• Arrival rate λ
• Fractions of customer types αci
• Patience distributions Fci (·)
• Mean service times mci,sj

Requested quality of service parameter:

• Mean waiting time W

Design parameters:

• Fraction of services performed by each server type βsj

Algorithm:

Compute expected fraction of abandonments

Compute the total eﬀective arrival rate

Adjust fraction of each customer type

Check α, β for complete resource pooling

Compute matching rates

Compute staﬃng levels

Output:

• Required workforce nsj

pci := Fci(W )

αci λ(1 − pci)

rci,sj := use Equation (2)

nsj :=

˜λrci,sj mci,sj

˜λ :=

αci :=

i=1

I(cid:88)
αciλ(1 − pci)
(cid:88)

˜λ

ci∈C(sj )

4.4 Design for Quality and Eﬃciency Driven Service

Given the arrival rates, there is a unique FCFS system that will supply QED service, with
servers almost always busy, most customers either don’t wait or wait a short time, and few
abandonments. The calculation of QED design follows the same steps as for QD with T = 0 and
for ED with W = 0.

9

4.5 Design for Diﬀerentiated Service

We now consider the case where we would like to give customers graded service levels, from high
priority to standard priority to low priority customer types. We have a partition of customer
types C into C(1), . . . ,C(L), where customers of types ci ∈ C(l) have higher priority than customer
of type in C(l−1), l = 2, . . . , L. Customers in class C(l) will then have a set of servers S (l), so
that each customer type ci ∈ C(l) will have at least one compatible server type sj ∈ S (l). In this
decomposition to subsystems (C(l),S (l)), we will allow sj ∈ S (l) to serve ci ∈ C(k), k ≥ l, but
will not allow sj ∈ S (l) to serve ci ∈ C(k), k < l. In other words, we redesign the compatibility
graph G by eliminating all links from S (l) to C(k) for k < l, but we preserve the links to higher
priority customers in C(k) for k > l, since when we use FCFS, these links will hardly ever be
used, because servers in S (l) will be behind all servers in S (k) for k > l almost all the time.
The priorities will be translated into quality of service parameters: classes C(1), . . . ,C(l) will
be served in ED mode with W1 > ··· > Wl ≥ 0, classes l + 1, . . . , L will be served in QD mode,
with 0 < Tl+1 < ··· < TL. Class l may be in QED mode.

Algorithm for Diﬀerentiated Service

Input:• Compatibility graph G

• Arrival rate λ
• Fractions of customer types αci
• Patience distributions Fci (·)
• Mean service times mci,sj

Requested quality of service parameters:

• Partition of customer types by priority into C(1), . . . ,C(L)
• Quality of service parameters: W1 > ··· > Wl = 0 = Tl < Tl+1 < ··· < TL

Design parameters:

• Choose partition of server types S (1), . . . ,S (L)
• Eliminate links from S (l) to C(k), for k < l
• Assign fraction of services performed by each server type βsj , within S (l)

Algorithm:

• For subsystem (C(l),S (l)), l = 1, . . . , L:
• Apply appropriate design algorithm for QD or ED to the subsystem

Output:

• Redesigned compatibility graph G
• Required workforce nsj

5 Examples of Designs and Simulation Results

In this section we describe three examples, for each of which we have prepared several designs,
under several modes of operation, and assuming Poisson arrivals using a range of values for λ.
We have then performed extensive simulation runs on each of these designs. Our purpose in this
section is threefold:

10

(i) Illustrate the implementation of the algorithms;

(ii) Examine the validity of the matching rates conjecture;

(iii) Evaluate the eﬃcacy of our designs.

The ﬁrst example system has 3 customer types and 3 server types with an almost complete
bipartite compatibility graph. We have designed operation of this system with complete resource
pooling, in ED, QD and QED mode. The purpose of this example is to assess pooled service
designs. The second example has 5 customer types and 5 server types with a Hamiltonian
bipartite compatibility graph. This example is used to assess diﬀerentiated service, with the
customer types divided into high, standard and low priority customers. The third example has
6 customer types and 6 server types with a symmetric compatibility graph that has degree 3
for all nodes. The purpose of considering this example is to examine validity of the matching
conjecture in a complex graph.

The designs depend on the service rates for each link, but not on the actual distributions
of service times. To examine the validity of the matching conjecture and to assess the eﬃcacy
of the designs, we have chosen to simulate service time distributions which are very diﬀerent,
including uniform in a ﬁnite range, exponential and Pareto.

Our main conclusions from the simulations of these examples are:

(i) The matching rates conjecture seems to be valid under ED, QD and QED mode, for the
whole range of λ values, and under all the diﬀerent distributions of service times. For
small values of λ the deviations are slightly larger, but this can be partly explained by the
fact that the algorithm yields real numbers for nsj , but in the ﬁnal design rounded integer
values are used.

(ii) In ED mode, for large values of λ we get convergence to the exact values of W with very
small variability in waiting times, and exact abandonment rates. Similarly under QD, for
large values of λ we get convergence to the exact values of T with very small variability in
idle times, and almost all customers are not waiting for service.

(iii) Most important, it seems that for small values of λ, while waiting times in ED mode and
idle times in QD mode are quite variable, the average waiting time in ED and the average
idle time in QD are almost exactly as designed. This indicates that our design heuristic
may be eﬀective already for a moderate number of servers.

(iv) Convergence in the QED mode is not appreciably worse than in the ED or QD modes.

(v) The system with diﬀerentiated service performs as designed.

(vi) The results do not seem to depend on the service time distributions.

We now present the three examples with detailed simulation results. The reported simulation
results for each design have been obtained as the average of 1,000 runs, where each run consists
of 1,250,000 customers. However, the ﬁrst 250,000 customers have been removed from the results
to account for a possible startup eﬀect.

5.1

Example 1 – 3 × 3 Almost Complete Graph with Pooled Service

In this example we investigate pooled service designs. The system is speciﬁed below, where
Exp(a) denotes the exponential distribution with rate a, U(a, b) is the uniform distribution on
the interval (a, b) and Pareto(k, a) is the Pareto distribution F (t) = 1 − (k/t)a for t > k.

11

There are 3 types of customers and 3 types of servers. The total arrival rate is parame-
terized by λ, The graph and the values of αci λ are described in the following ﬁgure:

Example 1 – System and Data

The patience times and service time distribution are given in the tables below.

Patience time distributions

Service time distributions

c1
c2
c3

Fci

Exp(0.1)
U(0,10)
Exp(0.2)

Gci,sj

c1

c2

c3

s1
s2
s3

Pareto(2, 3) Exp(0.125)
Exp(0.2)

Pareto(3, 3)

U(2, 6)
U(1, 5)

Only the mean service times are used by the design algorithms. The full distributions
are used in the simulations.

In the designs for Example 1 we take as service fractions: βs1 = 0.3, βs2 = 0.3, βs3 = 0.4.

ED design: We specify the average waiting time W = 1, corresponding to approximately 25%
of the average service times. For the given patience distributions this entails abandonment rates
of approximately 10% for customers of types 1 and 2, and of 18% for customers of type 3. We
calculate the eﬀective arrival rates of customers that do get served after a wait of W = 1:
1−Fc1 (W ) = e−0.1W = 0.905,

1−Fc2(W ) = (10−W )/10 = 0.9,

1−Fc3(W ) = e−0.2W = 0.819,

so
αc1λ(1−Fc1(W )) = 0.2λ×0.905 = 0.181λ,

and thus the eﬀective arrival rate equals

λc2(1−Fc2(W )) = 0.450λ,

λc2 (1−Fc2 (W )) = 0.246λ,

˜λ = (0.181 + 0.450 + 0.246)λ = 0.877λ.

Hence, the adjusted values of αcj are:

αc1 =

0.18
0.88

= 0.206, αc2 =

0.45
0.88

= 0.513, αc3 =

0.25
0.88

= 0.281.

QD design: We take an average idle time of T = 0.5. This corresponds to an utilization of
approximately 0.9.
QED design: The unadjusted values of λ, αci, mci,sj are used.

It is readily veriﬁed that in all three regimes (ED, QD and QED), Conditions (1) are satis-
ﬁed, so complete resource polling holds. From the algorithms we obtain the calculated required
workforce for the three designs:

12

c1c2c3s3s2s1.2λ.5λ.3λRequired workforce

ED regime

QED regime

QD regime

λ
20
40
60
100
200

ns1
39
77
116
194
387

ns2
25
51
76
127
254

ns3
25
51
76
127
255

ns1
44
88
131
219
438

ns2
29
58
87
144
288

ns3
29
57
86
144
287

ns1
47
94
140
234
468

ns2
32
64
96
159
318

ns3
33
65
98
164
327

The simulation results for Example 1 are listed in the tables below. We note that the histograms
below only depict the waiting times and idle times greater than zero (so probability mass at zero
is not shown).

ED regime

c2

0.262
0.251

c2

0.262
0.241

c2

0.261
0.248

c2

0.261
0.250

c1

0.038

0.168

c1

0.046

0.164

c1

0.041

0.167

c1

0.039

0.168

c3

0.049
0.232

c3

0.056
0.230

c3

0.051
0.232

c3

0.049
0.232

rci,sj
s1
s2
s3

rci,sj
s1
s2
s3

rci,sj
s1
s2
s3

rci,sj
s1
s2
s3

Matching rates

QED regime
Theoretical

c1

0.042

0.158

c1

0.048

0.155

c1

0.045

0.156

c1

0.043

0.157

c2

0.258
0.242

λ = 20

c2

0.260
0.239

λ = 60

c2

0.258
0.242

λ = 200

c2

0.259
0.242

c3

0.058
0.242

c3

0.064
0.234

c3

0.061
0.237

c3

0.059
0.240

QD regime

c1

0.042

0.158

c1

0.047

0.153

c1

0.045

0.155

c1

0.043

0.157

c2

0.258
0.242

c2

0.258
0.241

c2

0.257
0.243

c2

0.258
0.242

c3

0.058
0.242

c3

0.065
0.236

c3

0.062
0.238

c3

0.059
0.241

13

Customer waiting times and server idle times

ED Regime

Waiting times

QED Regime
Waiting times

QED Regime

Idle times

QD Regime
Idle times

Fraction of no wait and of no idling

ED regime

QED regime

QD regime

No waiting No idling No waiting No idling No waiting No idling

0.047
0.003
0.000

0.946
0.997
1.000

0.444
0.420
0.410

0.540
0.571
0.585

0.814
0.947
0.999

0.181
0.053
0.001

λ
20
60
200

λ
20
60
200

Design

ED regime

c1

0.089
0.091
0.093
0.095

c2

0.123
0.109
0.102
0.100

c3

0.168
0.173
0.177
0.181

Abandonment rates

QED regime

c1

0.020
0.014
0.008
0.000

c2

0.035
0.020
0.010
0.000

c3

0.039
0.027
0.016
0.000

QD regime

c1

0.003
0.000
0.000
0.000

c2

0.008
0.001
0.000
0.000

c3

0.006
0.001
0.000
0.000

The table for the matching rates shows that the theoretical matching rates calculated by the
algorithm are quite close to the simulated (actual) matching rates, already for moderate values
of λ. The results for the waiting times and idle times conﬁrm our intuition that they should
converge to the targeted quality of service requirements: for large values of λ, the probability
mass of the waiting times in ED concentrates near W and the probability mass of the idle times
in QD concentrates near T . In the QED regime, waiting times, idle times and abandonment
rates are small.

14

0.00.51.01.52.02.53.00.51.01.52.0Wc10.00.10.20.30.40.51234Wc10.00.10.20.30.40.5123456Ts10.00.20.40.60.81.01.21.40.51.01.52.02.5Ts10.00.51.01.52.02.53.00.51.01.52.0Wc20.00.10.20.30.40.50.51.01.52.02.53.03.5Wc20.00.10.20.30.40.5123456Ts20.00.20.40.60.81.01.21.40.51.01.52.02.5Ts20.00.51.01.52.02.53.00.51.01.52.0Wc30.00.10.20.30.40.51234Wc30.00.10.20.30.40.512345Ts30.00.20.40.60.81.01.21.40.51.01.52.02.5Ts3λ=20λ=40λ=60λ=100λ=2005.2 Example 2 – 5× 5 Hamiltonian Graph with Diﬀerentiated Service

This example illustrates diﬀerentiated service, with the customer types divided into three classes:
high, standard and low priority customers.

There are 5 types of customers and 5 types of servers. The total arrival rate is parame-
terized by λ. The graph and the values of αciλ are described in the following ﬁgure:

Example 2 – System and Data

The fractions αci are all equal, i.e., αci = 1
5 . The patience times are all exponentially dis-
tributed with mean 10. The service times are all uniformly distributed, with parameters
as given in the table below.

Service time distributions

Gci,sj

c1

c2

c3

c4

c5

s1
s2
s3
s4
s5

U(2, 6) U(2, 4)

U(1, 3) U(4, 7)

U(3, 7)

U(3, 6) U(2, 6)

U(1, 5) U(6, 11)
U(4, 9)

Only the mean service times are used by the design algorithms. The full distributions
are used in the simulations.

We consider the following decomposition of the system of Example 2:

C(1) = {c1, c2}, S (1) = {s1},

C(2) = {c3, c4}, S (2) = {s2, s3},

C(3) = {c5}, S (3) = {s4, s5}.

The decomposed system is described in the following ﬁgure:

1
2 and βs1 = 1.

Note that this decomposition results from eliminating three links in the compatibity graph: the
link from s2 to c2, s4 to c4, and from s5 to c1. We then have that:
- C(1),S (1) in isolation is a “V” system, with arrival rate 0.4λ, adjusted fractions αc1 = αc2 =
- C(2),S (2) in isolation is an “N” system, with arrival rates 0.4λ, adjusted fractions αc3 =
αc4 = 1
- C(3),S (3) in isolation is a “Λ” system, with arrival rate λ = 0.2λ, αc5 = 1 and we take
βs4 = βs5 = 1
2 .

2 and we take βs2 = 1

3 , βs3 = 2
3 .

15

c1c2c3s3s2s1.2λ.2λ.2λ.2λ.2λc4c5s5s4c1c2c3s3s2s1.2λ.2λ.2λ.2λ.2λc4c5s5s4βs1=1βs2=13βs3=23βs4=12βs5=12We make three designs for this network, in which customers c1, c2 have high priority, c3, c4
have standard priority, and c5 have low priority. The ﬁrst design is for a system in ED regime,
the second is for a mixed design with the top priority sub-system in QD, the middle priority
sub-system in QED and low priority sub-system in ED, and the third design is for the three
systems in QD regime. It is readily veriﬁed, by checking Conditions (1), that in each design
complete resource pooling holds for each subsystem. The following table shows the calculated
workforce required for each type of server for the three designs, as a function of λ.

ED regime

Required workforce

Mixed regime

W = 1 W = 2
ns3
18
36
54
90
180

ns1
25
51
76
127
253

ns2
12
24
36
60
120

W = 3
ns5
ns4
10
13
19
25
38
29
48
63
126
96

T = 1
ns1
36
72
108
180
360

QED

ns2
15
29
44
73
147

ns3
22
44
66
110
220

W = 1
ns5
12
24
35
59
118

ns4
15
31
46
77
154

T = 2
ns1
44
88
132
220
440

λ
20
40
60
100
200

QD regime
T = 1

ns2
17
35
52
87
173

ns3
27
55
82
137
273

T = 0.5
ns5
ns4
14
18
28
36
54
42
70
90
180
140

The simulation results for Example 2 are listed in the tables below, and illustrate that the

system with diﬀerentiated service performs as designed.

ED regime

Matching rates
Mixed regime

Theoretical

QD regime

rci,sj

c1

c2

c3

c4

c5

c1

c2

c3

c4

c5

c1

c2

c3

c4

c5

s1
s2
s3
s4
s5

0.216 0.216

0.204 0.204

0.200 0.200

0.130
0.065 0.195

0.088
0.088

0.136
0.068 0.204

λ = 20

0.092
0.092

0.133
0.067 0.200

0.100
0.100

rci,sj

c1

c2

c3

c4

c5

c1

c2

c3

c4

c5

c1

c2

c3

c4

c5

0.215 0.196

0.021 0.121

0.207 0.194

0.014 0.126

0.079 0.176

0.017 0.084

0.077 0.186

0.014 0.086

0.200 0.186

0.015 0.118

0.083 0.181

s1
s2
s3
s4
s5

0.020 0.094
0.100

0.002

0.089 0.001

0.095 0.002

λ = 200

rci,sj

c1

c2

c3

c4

c5

c1

c2

c3

c4

c5

c1

c2

c3

c4

c5

s1
s2
s3
s4
s5

0.216 0.216

0.205 0.205

0.200 0.200

0.130
0.066 0.194

0.001 0.088
0.088

0.135
0.068 0.201

0.001 0.093
0.093

0.132
0.069 0.197

0.003 0.099
0.101

16

ED Regime

Waiting times

Mixed Regime
Waiting times

Mixed Regime

Idle times

QD Regime
Idle times

Customer waiting times and server idle times

Fraction of no wait and of no idling

ED regime

Mixed regime

QD regime

No waiting No idling No waiting No idling No waiting No idling

0.056
0.010
0.000

0.934
0.988
1.000

0.578
0.570
0.556

0.398
0.412
0.430

0.869
0.935
0.974

0.124
0.063
0.025

λ
20
60
200

5.3 Example 3 – 6× 6 Symmetric Degree 3 Graph with Pooled Service

We now consider a more complex graph to examine the validity of the matching rates conjecture.

17

0123450.00.20.40.60.81.01.21.4Wc10.00.51.01.52.02.53.00.00.51.01.5Ts10.00.51.01.52.00.00.51.01.52.02.53.0Ts10123450.00.20.40.60.81.01.21.4Wc20.00.51.01.52.02.53.00.00.51.01.52.02.53.03.5Ts20.00.51.01.52.00.00.51.01.52.02.53.0Ts20123450.00.20.40.60.81.01.21.4Wc30.00.51.01.52.02.53.00.51.01.52.02.53.0Wc30.00.51.01.52.02.53.001234Ts30.00.51.01.52.00.00.51.01.52.02.53.0Ts30123450.00.20.40.60.81.01.21.4Wc40.00.51.01.52.02.53.00.51.01.52.02.5Wc40.00.51.01.52.00.00.51.01.52.0Ts40123450.00.20.40.60.8Wc50.00.51.01.52.02.53.00.20.40.60.81.0Wc50.00.51.01.52.00.00.51.01.52.0Ts5λ=20λ=40λ=60λ=100λ=200There are 6 types of customers and 6 types of servers. The total arrival rate is parame-
terized by λ, The graph and the values of λci/λ are described in the following ﬁgure:

Example 3 – System and Data

λci/λ
c1
1/9
2/9
c2
1/9
c3
2/9
c4
1/9
c5
c6
2/9

The patience times are all exponentially distributed with mean 10. The service times
distributions are given in the table below.

Service time distributions

c4

c5

c6
P

c3

c1

c2
s1 U E
s2 P U E
s3
s4
s5
s6 E

P U E

P U E

P U E
P U

With:
E ∼ Exp(1/4)
P ∼ Pareto(3, 3)
U ∼ U(1, 3)

Only the mean service times are used by the design algorithms. The full distributions
are used in the simulations.

In the designs for Example 3 we take as service fractions: βsj = 1/6,

j = 1, . . . , 6. It then
follows, by checking Conditions (1), that in each regime (ED, QED and QD) service is pooled.

ED regime

Required workforce

QED regime

QD regime

λ ns1 ns2 ns3 ns4 ns5 ns6 ns1 ns2 ns3 ns4 ns5 ns6 ns1 ns2 ns3 ns4 ns5 ns6
12
12
20
24
23
40
60
35
36
100 58
60
200 117 94 117 94 117 94 129 104 129 104 129 104 146 121 146 121 146 121

12
23
35
58

9
19
28
47

12
23
35
58

10
21
31
52

9
19
28
47

13
26
39
64

15
29
44
73

12
24
36
60

10
21
31
52

13
26
39
64

13
26
39
64

10
21
31
52

15
29
44
73

12
24
36
60

9
19
28
47

15
29
44
73

The theoretical matching rates are given in the table below. Note that these matching rates
are the same for all three regimes (ED, QED and QD). This is caused by the fact that all
customers have the same patience distribution and the same target waiting times, resulting in
equal αci and βsj . The simulated matching rates are also practically identical for all three
regimes. In the tables we depict the averages over the three regimes, but the actual diﬀerences
between the three simulated values and their averaged values are less than 0.001.

18

c1c2c3c4c5c6s1s2s3s4s5s6Theoretical matching rates (ED, QED, QD)

c6

c4

c5

c3

c1

c2

0.041

0.069

0.028
0.041

0.069
0.084
0.069

0.041
0.028
0.041

0.069
0.084
0.069

rci,sj
s1
s2
s3
s4
s5
s6
Simulated matching rates λ = 20 (Average ED, QED, QD)
rci,sj
s1
s2
s3
s4
s5
s6

0.041
0.028
0.041

0.041
0.030
0.041

0.041
0.030
0.041

0.071
0.080
0.070

0.071
0.080
0.070

0.069
0.084

0.071
0.080

0.030
0.041

0.041

c6

0.070

c1

c2

c3

c4

c5

c5

c4

c3

c2

c1

0.028
0.041

Simulated matching rates λ = 200 (Average ED, QED, QD)
rci,sj
s1
s2
s3
s4
s5
s6

0.041
0.028
0.041

0.041
0.028
0.041

0.069
0.084
0.069

0.069
0.084
0.069

0.069
0.084

0.069

0.041

c6

Fraction of no wait and of no idling

ED regime

QED regime

QD regime

No waiting No idling No waiting No idling No waiting No idling

0.044
0.014
0.003
0.000
0.000

0.950
0.985
0.997
1.000
1.000

0.278
0.398
0.351
0.314
0.352

0.709
0.594
0.642
0.681
0.644

0.862
0.929
0.974
0.994
1.000

0.135
0.071
0.026
0.006
0.000

λ
20
40
60
100
200

6 Conclusion

In this paper we considered a parallel queueing system with multiple server types and multiple
customer types, their compatibility described by a bipartite graph. This system has a general
renewal arrival process, general customer-server dependent service times and operates under
FCFS-ALIS service policy. As explained in the introduction, this system is relevant in many
areas of applications, though at this level of generality, it is analytically intractable. Based
on our intuitive understanding of how this system behaves under many server scaling and by
exploiting exact results for the matching rates in the related FCFS inﬁnite matching model, we
proposed heuristic algorithms to calculate service work force levels required to meet quality of
service parameters in three modes of operation: ED, QD and QED.

Extensive simulation conﬁrmed that the algorithms are accurate and eﬀective: they produce
work force levels and, in case of diﬀerentiated service, a redesigned compatibility graph that
meet targeted quality of service requirements. Moreover, the heuristic algorithms also appeared
to work well when the required work force levels are not so large. As such, these algorithms

19

provide a valuable tool to support decisions on the design of multi-type service systems. The
results suggest that our intuition, and in particular, the matching rates conjecture are correct.
However, a rigorous justiﬁcation is lacking at this point, and left as a major challenge for future
research. A ﬁrst step towards a rigorous analysis can be found in [30], treating many server
scaling for the exponential “N” system.

References

[1] Adan, I. J. B. F., Boon, M.A.A., Weiss, G. (2013) Design and evaluation of overloaded
service systems with skill based routing, under FCFS policies, Performance Evaluation,
70(10):873-888.

[2] Adan, I. J. B. F., Boon, M.A.A., Busic, A., Mairesse, J., Weiss, G. (2013) Queues
with skill based parallel servers and a FCFS inﬁnite matching model. Performance Evalua-
tion Review, 41(3):22–24, 2013.

[3] Adan, I. J. B. F., Busic, A., Mairesse, J., Weiss, G. (2015) Reversibility and further

properties of FCFS inﬁnite bipartite matching. arXiv:1507.05939 (2015).

[4] Adan, I. J. B. F., Weiss, G. (2011) Exact FCFS matching rates for two inﬁnite multi-type

sequences. Operations Research 60 475–489.

[5] Adan, I. J. B. F., Weiss, G. (2014) A skill based parallel service system under FCFS-ALIS

— steady state, overloads and abandonments, Stochastc Systems 4(1):250-299.

[6] Armony, M., Ward, A.R., (2010) Fair Dynamic Routing in Large-Scale Heterogeneous-

Server Systems Operations Research 58(3): 624–637.

[7] Armony, M., Ward, A. R. (2013). Blind fair routing in large-scale service systems with

heterogeneous customers and servers. Operations Research, 61(1), 228-243.

[8] Bell, S. L., Williams, R. J. (2001). Dynamic scheduling of a system with two parallel servers
in heavy traﬃc with resource pooling: asymptotic optimality of a threshold policy. The
Annals of Applied Probability, 11(3), 608-649.

[9] Caldentey, R., Kaplan, E. H., Weiss, G. (2009) FCFS inﬁnite bipartite matching of

servers and customers. Advances in Applied Probability 41 695–730.

[10] Foss, S., Chernova, N. (1998). On the stability of a partially accessible multi?station queue

with state?dependent routing. em Queueing Systems, 29(1), 55-73.

[11] Gans, N., Koole, G. and A. Mandelbaum (2003). Telephone call centers: tutorial, review,

and research prospects. Manufacturing Service Operations Management, 5(2) 79-141.

[12] Ghamami, S., Ward, A. R. (2013). Dynamic scheduling of a two-server parallel server system
with complete resource pooling and reneging in heavy traﬃc: Asymptotic optimality of a
two-threshold policy. Mathematics of Operations Research, 38(4):761-824.

[13] Green, L. (1985) A queueing system with genera-use and limited-use servers, Operations

Research 33:162–182.

[14] Gurvich, I., Whitt, W. (2009). Queue-and-idleness-ratio controls in many-server service

systems. Mathematics of Operations Research, 34(2), 363-396.

20

[15] Gurvich, I., Whitt, W. (2010). Service-Level Diﬀerentiation in Many-Server Service Sys-

tem Via Queue-Ratio Routing. Operations Research, 58(2), 316-328.

[16] Harchol-Balter, M., Crovella, M. E., Murta, C. D. (1999). On choosing a task assignment
policy for a distributed server system. Journal of Parallel and Distributed Computing, 59(2),
204-228.

[17] Harrison, J.M. and M.J. Lopez (1999). Heavy traﬃc resource pooling in parallel?server

systems. Queueing systems, 33(4), 339-368.

[18] Harrison, J. M., Zeevi, A. (2005). A method for staﬃng large call centers based on stochastic

ﬂuid models. Manufacturing and Service Operations Management, 7(1):20-36.

[19] Zeltyn, S., Mandelbaum, A. (2005). Call centers with impatient customers: many-server

asymptotics of the M/M/n+ G queue. Queueing Systems, 51(3-4), 361-402.

[20] Nov, Y., Weiss, G., Zhang, H. (2016) Fluid Models of Parallel Service Systems under FCFS,

Preprint.

[21] Rubino, M., Ata, B. (2009). Dynamic control of a make-to-order, parallel-server system with

cancellations. Operations Research, 57(1), 94-108.

[22] Squillante, M. S., Xia, C. H., Yao, D. D., Zhang, L. (2001). Threshold-based priority policies
for parallel-server systems with aﬃnity scheduling. In American Control Conference, 2001.
Proceedings of the 2001 4:2992-2999, IEEE.

[23] Talreja, R., Whitt, W. (2007) Fluid models for overloaded multi-class many-service

queueing systems with FCFS routing. Management Science 54 1513–1527.

[24] Tezcan, T., Dai, J. G. (2010). Dynamic control of N-systems with many servers: Asymptotic

optimality of a static priority policy in heavy traﬃc. Operations Research, 58(1):94-110.

[25] Tsitsiklis, J. N., Xu, K. (2012) On the power of (even a little) resource pooling, Stochastic

Systems, 2:1-66

[26] Veeger, C.P.L., Etman, F.P. and Rooda (2008) Generating cycl time-throughput-product
mix surfaces using eﬀective process time based aggregate modeling. Proc. 13th ASIM Conf.,
Berlin, 519-529.

[27] Wallace R.B., Whitt, W. (2005) A staﬃng algorithm for call centers with skill-based routing.

Manufacturing and Service Operations Management 7 276–294.

[28] Whitt, W. (2006) Fluid models for multiserver queues with abandonments. Operations re-

search 54 37–54.

[29] Williams, R. J. (2000). On dynamic scheduling of a parallel server system with complete

resource pooling. Fields Institute Communications, 28(49-71), 5-1.

[30] Zhan, Dongyuan and Weiss, G. (2016) Many server scaling of the N-system under FCFS-

ALIS. In preparation

21

