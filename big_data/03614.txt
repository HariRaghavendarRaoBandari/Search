6
1
0
2

 
r
a

 

M
1
1
 
 
]

.

O
C
h
t
a
m

[
 
 

1
v
4
1
6
3
0

.

3
0
6
1
:
v
i
X
r
a

Packing and counting arbitrary Hamilton cycles in random digraphs

Asaf Ferber∗

Eoin Long †

March 14, 2016

Abstract

We prove packing and counting theorems for arbitrarily oriented Hamilton cycles in D(n, p)
for nearly optimal p (up to a logc n factor). In particular, we show that given t = (1 − o(1))np
Hamilton cycles C1, . . . , Ct, each of which is oriented arbitrarily, a digraph D ∼ D(n, p) w.h.p.
contains edge disjoint copies of C1, . . . , Ct, provided p = ω(log3 n/n). We also show that given an
arbitrarily oriented n-vertex cycle C, a random digraph D ∼ D(n, p) w.h.p. contains (1±o(1))n!pn
copies of C, provided p ≥ log1+o(1) n/n.

1

Introduction

A Hamilton cycle in a graph or digraph is a cycle passing through every vertex of the graph
exactly once, and a graph is Hamiltonian if it contains a Hamilton cycle. Hamiltonicity is one of the
most central notions in graph theory, and has been intensively studied by numerous researchers in
recent decades.

One of the ﬁrst, and probably most celebrated, suﬃcient conditions for Hamiltonicity in graphs
was established by Dirac [5] in 1952. He proved that every graph on n vertices, n ≥ 3, with minimum
degree at least n/2 is Hamiltonian. Ghouila-Houri [11] proved an analogue of Dirac’s theorem for
digraphs by showing that any digraph of minimum semi-degree at least n/2 contains an oriented
Hamilton cycle (the semi-degree of a digraph G, denoted δ0(G), is the minimum of all the in- and
out-degrees of vertices of G).

Instead of studying “consistently oriented” Hamilton cycles in digraphs, it is natural to consider
Hamilton cycles with arbitrary orientations. This problem goes back to the 80s where Thomasson
[19] showed that each regular tournament contains every orientation of a Hamilton cycle. Later on,
H¨aggkvist and Thomason [13] showed an approximate analog of the result of Ghouila-Houri [11]
while proving that δ0(G) ≥ n/2 + n5/6 is suﬃcient to guarantee every orientation of a Hamilton cycle
to appear in G. Very recently, this problem has been settled completely by DeBiasio, K¨uhn, Molla,
Osthus and Taylor [3]. They showed that δ0(G) ≥ n/2 is enough for all cases other than an anti-
directed Hamilton cycle, where for the latter, Debiaso and Molla showed in [4] that δ0(G) ≥ n/2 + 1
is enough (an anti-directed Hamilton cycle is a cycle with no two consecutive edges having the same
orientation).

∗Department of Mathematics, Yale University, and Department of Mathematics, MIT, USA.
Email: asaf.ferber@yale.edu, and ferbera@mit.edu.
†School of Mathematical Sciences, Tel Aviv University, Tel Aviv, Israel. Email: eoinlong@post.tau.ac.il.

1

In this paper we restrict our attention to the sparse setting, that is, to random directed graphs.
Let D(n, p) be the probability space consisting of all directed graphs on vertex set [n] in which each
possible arc is added with probability p independently at random.

One of the ﬁrst results regarding Hamilton cycles in random directed graphs was obtained by

McDiarmid in [17]. He showed (among other things) by using an elegant coupling argument that

Pr[G ∼ G(n, p) is Hamiltonian] ≤ Pr[D ∼ D(n, p) is Hamiltonian].

Combined with the result of Bollob´as [1] it follows that a typical D ∼ D(n, p) is Hamiltonian
for p ≥ ln n+ln ln n+ω(1)
. Frieze [10] later determined the correct threshold for the appearance of a
Hamilton cycle in D ∼ D(n, p) is p = ln n+ω(1)

n

.

n

While Frieze’s result gives a better bound than McDiarmid’s coupling argument, the latter is
much more ﬂexible (for some further applications, see [6]). For example, given an arbitrary oriented
Hamilton cycle C, it follows immediately from McDiarmid’s proof that

Pr[G ∼ G(n, p) is Hamiltonian] ≤ Pr[D ∼ D(n, p) contains a copy of C].

In contrast, the result of Frieze is tailored to “consistently oriented” Hamilton cycles and gives no
improvement for the obtained bound of p = ln n+ln ln n+ω(1)
. It may be interesting to ﬁnd the exact
threshold for the appearance of an arbitrary oriented Hamilton cycle and we conjecture the following:

n

Conjecture 1.1. Let C be a Hamilton cycle oriented arbitrarily, then a digraph D ∼ D(n, p) w.h.p.
contains a copy of C, provided that p = ln n+ω(1)

.

n

Another recent result worth mentioning was given by Ferber, Nenadov, Peter, Noever and ˇSkoric
in [8]. Here it was proven using the “absorption method” that D ∼ D(n, p) is w.h.p. Hamiltonian
even if an adversary deletes roughly one half of the in- and out-degrees of all the vertices, provided
that p ≥ polylogn/n.

Here we deal with the problems of counting and packing arbitrary oriented Hamilton cycles in D ∼
D(n, p), for edge-densities p ≥ polylog(n)/n. The analogous problems regarding the “consistently
oriented” Hamilton cycles has been recently treated by Kronenberg and the authors in [7]. However,
the proof method there is inapplicable to the arbitrary oriented case.

Enhancing a recent “online sprinkling” technique introduced by Ferber and Vu [9], we manage
to tackle these two problems. Our ﬁrst theorem gives an asymptotically optimal result for packing
arbitrarily oriented Hamilton cycles in D ∼ D(n, p).

Theorem 1.2. Let ǫ > 0 and p(n) ∈ (0, 1]. Let t = (1 − ǫ)np and suppose that C1, . . . , Ct are
n-vertex cycles with arbitrary orientations. Then w.h.p. D ∼ D(n, p) contains edge disjoint copies
of C1, . . . , Ct, provided p ≫ log3 n/n.

Our second result shows that given an arbitrarily oriented Hamilton cycle C, w.h.p. D ∼ D(n, p)

contains the “correct” number of copies of C.

Theorem 1.3. Suppose that C is an arbitrarily oriented n-vertex cycle. Then w.h.p. a digraph
D ∼ D(n, p) contains (1 ± o(1))nn!pn distinct copies of C, provided p ≫ (log log n) log n/n.

Before closing the introduction, let us mention that packing and counting Hamilton cycles in
the undirected setting has been extensively studied by numerous researchers. In fact, both of these

2

problems are now completely resolved (see [12, 14, 15, 16] and their references). The main diﬃculty
when working in the directed case, is that the so called Pos´a rotation-extension technique (see [18])
does not work in its simplest form and therefore one should ﬁnd more creative ways for generating
Hamilton cycles.

Notation: Given a directed graph (digraph) D, we write V (D) for the vertex set of D and E(D) for
the edge set D. Given v ∈ V (D) we write N +(v) = {u ∈ V (D) : −→vu ∈ E(D)}, the out-neighbourhood
of v, and let d+(v) = |N +(v)|, the outdegree of v in D. Similarly deﬁne N −(v) and d−(v). Let δ0(D)
denote the semi-degree of D, given by δ0(D) = minv∈V (D),∗∈{+,−} d∗(v). Given n ∈ N, let Dn denote
the complete directed graph (or complete digraph) on n vertices, consisting of all possible n(n − 1)
directed edges.

A path P of length k is a (k + 1)-vertex digraph with k edges, given by P := v0v1 . . . vk where
for each i ∈ [0, k − 1] either −−−→vivi+1 or ←−−−vivi+1 is an edge of P . Given σ : [0, k] → {+, −}, we say that
P is a σ-path, if for all i ∈ [0, k − 1] the edge −−−→vivi+1 lies in P whenever σ(i) = +, and ←−−−vivi+1 lies in
P whenever σ(i) = −. In this case we write σ(P ) = σ. In a similar way, for σ : [1, k] → {+, −} a
σ-cycle C := v1 . . . vkv1 is a k-vertex digraph with k edges, each of the form −−−→vivi+1 or ←−−−vivi+1, where
each appears according to the sign of σ(i). Given a cycle C and a subpath P of C, let P c denote the
path induced by the edges of C which do not lie in P , called the compliment of P in C.

Given a digraph D, we write D(D, p) for the probability space of random subdigraphs of D
obtained by including each edge of D independently with probability p. For a graph G, we write
G(G, p) for the analogous distribution on subgraphs of G. In the special case when D = Dn we simply
write D(n, p). Similarly for graphs we write G(n, p). When discussing events related to D(D, p) or
G(G, p) we write with high probability (w.h.p.)
to denote that the event occurs with probability
1 − o(1). We say with very high probability (w.v.h.p.) to mean with probability 1 − n−ω(1).

2 Tools

2.1 A concentration inequality

A sequence of random variables 0 ≡ X0, X1, . . . , XN is said a submartingale if

E(Xi|X1, . . . , Xi−1) ≤ 0 for all i ∈ [N ].

The next result gives a concentration bound for submartingales (see Theorem 27 in the survey of
Chung and Lu [2], taking φi = ai = 0).

Theorem 2.1. Suppose that 0 ≡ X0, X1, . . . , XN is a submartingale which for all i ∈ [N ] satisﬁes

Var(Xi|X1, . . . Xi−1) ≤ σ;

and

Xi − E(Xi|X1, . . . Xi−1) ≤ M.

Then P(XN ≥ m) ≤ e−m2/2(N σ+M m/3).

We will make use of the following simple corollary.

Corollary 2.2. Suppose that A1, . . . , AN are a sequence of events in a probability space (Ω, P).
Suppose that for all i ∈ [N ] we have P(Ai|A1, . . . , Ai−1) ≤ q. Then letting Em denote the event that
at least qN + m of the events A1, . . . , AN occur, we have P(Em) ≤ e−m2/2(N q+m/3).

3

Proof. Simply take Yi to be the indicator random variable for the event Ai, and set Xi = Yi − q for
all i ∈ [N ], and X0 ≡ 0. Then

E(Xi|X1, . . . , Xi−1) = P(Ai|A1, . . . , Ai−1) − q ≤ 0 for all i ∈ [N ],

and so X0, . . . , XN forms a submartingale. We also have

Var(Xi|X1, . . . Xi−1) ≤ q for all i.

Taking M = 1 and σ = q, Theorem 2.1 gives

P(cid:0)Em) = P(cid:0) NXi=1

Yi > nq + m(cid:1) = P(cid:0) NXi=1

Xi > m(cid:1) ≤ e−m2/2(N q+m/3),

as required.

2.2 Completing paths into a Hamilton cycle

We will also use the following result to complete paths into Hamilton cycles in D ∼ D(n, p).

Lemma 2.3. Let σ ∈ {+, −}n. Suppose that G is an n-vertex digraph with δ0(G) = (1 − o(1))n.
Then a digraph D ∼ D(G, p) contains a σ-path Q between any two distinct vertices in D, provided
p = ω(log n/n).

The analogue of Lemma 2.3 is well known for undirected graphs states that w.h.p. G ∼ G(n, p)
contains a Hamiltonian path between any two distinct vertices a, b ∈ V (G), provided p = ω(log n/n).
(In fact, this result follows from many of the proofs of Hamiltonicity of G ∼ G(n, p).) This undirected
result can be ‘upgraded’ to the directed world to prove Lemma 2.3 using the nice coupling argument
of McDiarmid [17] mentioned in the introduction.

3 Packing arbitrarily orientated Hamilton cycles in D(n, p)

In this section we prove Theorem 1.2. The proof naturally splits into two pieces.

In the ﬁrst
piece, which appears in the next subsection, we will describe and analyse a simple randomized
embedding algorithm to generate long paths of some ﬁxed orientation. Then, in subsection 3.2 by
repeatedly running this embedding algorithm in D(n, p) we will ﬁnd a large subpath from each cycle
Ci. Combined with an additional argument to close each of these paths to a cycle, this will prove
the Theorem 1.2.

3.1 A randomized algorithm for embedding oriented paths

Let D be an n-vertex digraph with δ0(D) ≥ n − ∆. Also let P = v1 · · · vℓ be a σ-path, for some
arbitrary σ : [ℓ − 1] → {+, −}. Our aim in this section is to describe a randomized algorithm which
w.h.p. ﬁnds a copy Q := x1 · · · xℓ of P in D over ℓ rounds. Throughout the algorithm, whenever we
‘expose an edge’ we mean to toss a biased coin with certain probability for this edge.

Path embedding algorithm:

1. To begin, select a vertex x1 ∈ V (D) uniformly at random and set Q1 = x1.

4

2. For 1 ≤ i ≤ ℓ − 1: suppose we are in round i and that we have now found Qi = x1 · · · xi, and
aim to extend it to Qi+1 by ﬁnding xi+1. Let Ri = V (D) \ V (Qi) and select an ordering of Ri
uniformly at random, say y1, . . . , yn−i.

3. To ﬁnd xi+1 proceed as follows. First expose xiy1 with an orientation corresponding to σ(i),
with probability pex. If this pair is exposed as an edge and is an edge of D, set xi+1 = y1
and Qi+1 = Qixi+1. Otherwise expose xiy2 with an orientation corresponding to σ(i), with
probability pex. Again, if the exposed pair appears as an edge and is an edge of D, set xi+1 = y2
and Qi+1 = Qixi+1. Continue with this process until we either ﬁnd xi+1 and Qi+1, or run out
of vertices in Ri. If this second case occurs, terminate the algorithm and declare a failure. If
there is no failure and i < ℓ − 1 return to 2. for round i + 1. Otherwise, proceed to 4.

4. Output Q := Qℓ.

To analyze the algorithm, we will be interested in the following events:

F = “the algorithm fails”;
E−→uv = “the edge −→uv is exposed during the algorithm”;
Au,v = “{u, v} ∩(cid:0)V (Q) \ {x1, xℓ}(cid:1) = ∅”.

The following lemma collects a number of key properties of this embedding process.

Lemma 3.1. Let D be a digraph with δ0(D) ≥ n − ∆ and let P be a path of length ℓ. Suppose pex

1

(n∆)1/2(cid:9). Then running the path embedding

n2∆ ,
algorithm with pex to ﬁnd a copy of P in D, we have:

and ℓ satisfy log n/(n − ℓ − ∆) ≪ pex ≪ min(cid:8) (n−ℓ)2
(i) Pr[F ] = o(cid:0)n−2(cid:1).

2 (cid:1).
for every pair {u, v} ∈(cid:0)V (D)

(ii) Pr [E−→uv] ≤ 1+o(1)
npex

(iii) Pr [Au,v] ≤ (1 + o(1))(cid:0) n−ℓ

2 (cid:1).
n (cid:1)2 for every pair {u, v} ∈(cid:0)V (D)

Proof. We ﬁrst prove (i). Note that the algorithm only ends in failure if for some i ∈ [ℓ − 1] edges
of orientation σ(i) in E(D) between xi and all vertices of Ri were exposed, but none appeared as an
edge. Using |Ri| ≥ n − ℓ, we see that

Pr[F ] ≤ ℓ(1 − pex)n−ℓ−∆ ≤ ne−(n−ℓ−∆)pex = o(n−2),

where the last inequality holds since pex = ω(cid:16) log n
n−ℓ−∆(cid:17).

To see (ii) and (iii) it is helpful to think of the algorithm as proceeding in a slightly diﬀerent, but
equivalent way. First select a random subdigraph G of Dn, where each directed edge of Dn appears
independently in G with probability pex. Now simply run the original algorithm to ﬁnd a copy of P ,
but this time instead of exposing edges with probability pex, we add the edge if the corresponding
edge is present in G. Clearly this gives an identical distribution on paths which appear as Q.

Now we claim that for all vertices u1, u2, v1, v2 ∈ V (D) with ui 6= vi for i = 1, 2

Pr(cid:2)E−−→u1v1(cid:3) ≤ Pr(cid:2)E−−→u2v2(cid:3) + (8∆ + 12)pex,

(1)

5

Pr(cid:2)E−−→u1v1(cid:3) = Pr(cid:2)E−−→u1v1|B(cid:3) Pr[B] + Pr(cid:2)E−−→u1v1|Bc(cid:3) Pr[Bc]

≤ Pr(cid:2)E−−→u2v2|B(cid:3) Pr[B] + Pr[Bc]
≤ Pr(cid:2)E−−→u2v2(cid:3) + Pr[Bc].

(3)

and that

Pr [Au1,v1] ≤ Pr [Au2,v2] + (8∆ + 12)pex.

(2)

To see this, ﬁrst note that if both u1 and u2 have the same in and out-neighbourhoods in D,

and v1 and v2 have the same in and out-neighbourhoods in D, then Pr(cid:2)E−−→u1v1(cid:3) = Pr(cid:2)E−−→u2v2(cid:3) and

Pr [Au1,v1] = Pr [Au2,v2]. The key observation to proving (1) and (2) is that conditional on a high
probability event, we can assume that this ‘same neighbourhood’ property holds.

Concretely, let

S =(cid:8)z ∈ V (D) : at least one of the edges −→yz, −→zy is not in D for some y ∈ {u1, u2, v1, v2}(cid:9).

That is, S is the set of vertices which are not in-neighbours or out-neighbours in D of at least one
vertex from {u1, u2, v1, v2}. Now consider the following event

B = “no edge −→yz or −→zy appears in G, where y ∈ {u1, u2, v1, v2} and z ∈ S ∪ {u1, u2, v1, v2}”.

Note that conditional on B, by symmetry of the neighbourhoods of u1, u2, v1 and v2, the path

embedding algorithm is equally likely to expose the −−→u1v1 and the edge −−→u2v2, i.e. Pr(cid:2)E−−→u1v1(cid:12)(cid:12) B] =
Pr(cid:2)E−−→u2v2(cid:12)(cid:12) B]. But this gives

Similarly, conditional on B, by symmetry, the pairs {u1, v1} and {u2, v2} are equally likely to be
disjoint from V (Q) \ {x1, xℓ} and Pr[Au1,v1|B] = Pr[Au2,v2|B]. Therefore, an identical calculation to
(3) gives

Pr[Au1,v1] ≤ Pr[Au2v2 ] + Pr[Bc].

But Pr[Bc] ≤ (8∆ + 12)pex, as each u ∈ V (D) has ≤ ∆ non in-neighbours, ≤ ∆ non out-neighbours
in D and there are at most 12 edges between vertices in {u1, u2, v1, v2} in D. This gives (1) and (2).

Now we can prove (ii). For each −→uv ∈ E(D), let C−→uv denote the event

C−→uv = “−→uv gets exposed during the algorithm and −→uv ∈ E(G)”.

Clearly, we have Pr[C−→uv] = pex × Pr[E−→uv]. Let X denote the random variable which counts the
number of edges in G ∩ D which get successfully exposed. Using (1), for any edge −→uv ∈ E(D) we
have

Pr[C−→xy]

E(X) = X−→xy∈E(D)
≥ X−→xy∈E(D)
≥(cid:0)n(n − 1) − ∆n(cid:1)pex ×(cid:0) Pr[E−→uv] − (8∆ + 12)pex(cid:1)
= (1 − o(1))n2pex ×(cid:0) Pr[E−→uv] − (8∆ + 12)pex(cid:1).

pex ×(cid:0) Pr[E−→uv] − (8∆ + 12)pex(cid:1)

6

(4)

However we always have X ≤ ℓ, as each successfully exposed edge in G ∩ D completes a round of
the algorithm and the algorithm consists of at most ℓ rounds. Combined with (4) this gives

Pr[E−→uv] ≤ (1 + o(1))

+ (8∆ + 12)pex = (1 + o(1))

ℓ

n2pex

1

,

npex

for all distinct x, y ∈ V (D), completing (ii).

Lastly, it is left to prove (iii). Let Y denote the random variable which counts the number of

since ℓ ≤ n and pex = o(cid:0)(n∆)−1/2(cid:1). By applying (1) again, we conclude that Pr[E−→xy] ≤ (1+o(1)) 1
pairs {u, v} with {u, v} ∩(cid:0)V (Q) \ {x1, xℓ}(cid:1) = ∅. Note that we always have Y ≤ (cid:0)n
2(cid:1) and that if F c
holds then Y =(cid:0)n−ℓ+2
(cid:1). Since by (i) we have Pr[F ] = o(1/n), it therefore follows that

npex

2

E(Y ) ≤ Pr[F ](cid:18)n

2(cid:19) + Pr[F c](cid:18)n − ℓ + 2

2

(cid:19) ≤ (1 + o(1))

(n − ℓ)2

.

2

But for distinct u, v ∈ V (D), from (2) we have

E(Y ) = X{x,y}∈([n]

Pr[Ax,y] ≥(cid:18)n
2(cid:19)(cid:0) Pr[Au,v] − (8∆ + 12)pex(cid:1).
n (cid:17)2
Rearranging, we obtain Pr[Au,v] ≤ (1 + o(1))(cid:16) n−ℓ

n (cid:17)2
+ (8∆ + 12)pex = (1 + o(1))(cid:16) n−ℓ

2 )

pex ≪ 1

∆(cid:0) n−ℓ

n (cid:1)2, as required.

, since

3.2 Finding edge disjoint Hamilton cycles in D(n, p)

In this subsection we prove Theorem 1.2.

In the proof, it will be useful to assume that p is
not too large at certain points in the argument. We will assume that log3 n/n ≪ p ≤ n−2/3. The
If p ≥ n−2/3 let p′ = n−5/6 and k = n5/6p,
general situation can be reduced to this as follows.
so that n1/6 ≪ k ≤ n5/6. Then, after generating D ∼ D(n, p), we further partition D into one
of k subdigraphs D1, . . . , Dk, where each edge e is assigned to Di with probability 1/k. It is clear
that each Di is distributed as D(n, p′). Therefore, if we prove that the statement of Theorem holds
w.v.h.p (probability 1 − o(1/n)) when log3 n/n ≪ p ≤ n−2/3, by taking a union bound over all the
digraphs D1, . . . , Dk above, we prove that w.h.p. for all p ≫ log3 n/n.

Suppose that p = α3 log3 n/n. Since log3 /n ≪ p ≤ n−2/3 we have 1 ≪ α ≤ n1/9. Also let
ℓ = n−n/α log n, ∆ = n1/3 and pex = α2 log2 n/n. Let C1, . . . , Ct be cycles as given in the statement.
Also set p1 = (1− ǫ/2)p and choose p2 so that (1− p1)(1− p2) = 1− p. Note that p2 = (1+ oǫ(1))ǫp/2.
Also, from each Ci we select an oriented subpath Pi of length ℓ, with orientation σi.

Our general plan is to embed the paths {Pi}i∈[t] into D(n, p1) by repeatedly applying the algorithm
described in the previous section. We will then expose new edges with probability p2, to complete
each copy of Pi into a copy of the cycle Ci. Of course, we ensure that the obtained cycles are
edge-disjoint. The embedding scheme proceeds in two stages.

Stage 1: Finding edge disjoint copies of P1, . . . , Pt in D1 ∼ D(n, p1)

In this stage we give a randomized algorithm which w.h.p. ﬁnds edge disjoint copies of P1, . . . , Pt
in D1 ∼ D(n, p1). The algorithm exposes edges from Dn in an online fashion with some small
probability pex = o(p1). This will be carried out over a series of rounds, where in round i we aim to
create a copy of Pi.

Initialize to Round 1 and proceed as follows:

7

1. In round i we have copies of P1, . . . , Pi−1, denoted Q1, . . . , Qi−1. Set D(i) = Dn \ (∪j<iE(Qj)).

2. Apply the path embedding algorithm from the previous subsection to ﬁnd a copy of Pi in
D(i), denoted by Qi = xi,1 . . . xi,ℓ. If this subroutine fails, declare a failure and terminate the
algorithm.

3. If i < t then return to 1. in round i + 1 to ﬁnd Qi+1. If i = t then we have succeeded in ﬁnding

edge disjoint copies of P1, . . . , Pt.

Given distinct vertices u, v ∈ V (Dn), consider the following random variables:

X−→uv =(cid:12)(cid:12)(cid:8)i ∈ [t] : −→uv is exposed during round i(cid:9)(cid:12)(cid:12);

Yu,v =(cid:12)(cid:12)(cid:8)i ∈ [t] : {u, v} ∩(cid:0)V (Qi) \ {xi,1, xi,ℓ}(cid:1) = ∅(cid:9)(cid:12)(cid:12).

We claim that the following three properties hold with probability 1 − o(n−1):

(a) The algorithm succeeds in ﬁnding copies of P1, . . . , Pt;

(b) X−→uv ≤ p1
pex

for all distinct u, v ∈ V (D);

(c) Yu,v ≤ (1 + ǫ) × t ×(cid:0) n−ℓ

n (cid:1)2 for all distinct u, v ∈ V (D).

This will complete Stage 1 of the algorithm.
Indeed, by (b) w.h.p. we have exposed each edge
with probability pex × X−→uv ≤ p1. The resulting digraph can therefore be coupled as a subgraph of
D1 ∼ D(n, p1) w.h.p.. By (a) this subdigraph contains edge disjoint copies of P1, . . . , Pt, as required.
(Property (c) will be required for Stage 2.)

To see (a) note that in round i, each vertex has at most 2 neighbours in each Qj for j < i, and

therefore δ0(D(i)) ≥ n − 2(i − 1) ≥ n − 2t ≥ n − 2∆. Note that

log n

n − ℓ − ∆

=

log n

n/α log n − n1/3

≤

2α log2 n

n

≪ pex ≪ p ≤ min(cid:8)

α2 log2 n(n1/3)
1

≤ min(cid:8) (n − ℓ)2

n2∆

,

1

, n−2/3(cid:9)
(n∆)1/2(cid:9).

Therefore, by Lemma 3.1 (i) the path embedding algorithm succeeds in round i with probability
at least 1 − o( 1
n2 ). Therefore, by a union bound, the algorithm succeeds in producing a copy of
P1, . . . , Pt with probability 1 − o(n−1).

We now prove (b). Given distinct vertices u, v ∈ V (Dn) we have X−→uv = Pi∈[t] X−→uv(i), where
X−→uv(i) denotes the indicator random variable of the event that −→uv is exposed in during round i. Note
that from Lemma 3.1 (ii), conditional on any of choice of D(i), we have

PrhX−→uv(i) = 1|D(i)i ≤ (1 + ǫ/4)

1

npex

.

By Lemma 2.2, we have

Pr(cid:2)X−→uv ≥ (1 + ǫ/2)

t

npex(cid:3) ≤ e−ǫ2t/(64npex) = o(1/n3).
for all −→uv ∈ E(Dn). This proves (b).

This holds as t/npex ≥ np/npex ≫ log n. Therefore, with probability 1 − o(n−1) we have X−→uv ≤
(1 + ǫ/2)

t

= (1 + ǫ/2) (1−ǫ)np
npex

≤ p1
pex

npex

8

Lastly, (c) is similar to (b). Given distinct u, v ∈ V (Dn) we have Yu,v = Pi∈[t] Yu,v(i), where
Yu,v(i) denotes the indicator random variable of the event {u, v} ∩(cid:0)V (Qi) \ {xi,1, xi,ℓ}(cid:1) = ∅. By

Lemma 3.1 (iii), conditional on any choice of D(i), we have

By Corollary 2.2 we ﬁnd

Pr[Yu,v(i) = 1|D(i)] ≤ (1 +

ǫ
2

)(cid:0) n − ℓ
n (cid:1)2.

Pr(cid:2)Yu,v ≥ (1 + ǫ)

t(n − ℓ)2

n2

(cid:3) ≤ e−ǫ2t(n−ℓ)2/16n2

= o(1/n4).

Here we used that t(n − ℓ)2/n2 ≫ log n. By applying the union bound we obtain (c).

Stage 2: Completing the copies of P1, . . . , Pt to copies of C1, . . . , Ct.

Let us suppose that in Stage 1 we found Q1, . . . , Qt in D1 ∼ D(n, p1), and that property (c) above
holds. In this stage we will prove that w.h.p. it is possible to use edges of D2 ∼ D(n, p2) to complete
each oriented path Qi to a copy of Ci which is edge-disjoint to other Cj-s.

To see this, for each i ∈ [t] let Wi = V (D) \ {xi,2, . . . , xi,ℓ−1} (recall that Qi = xi,1 . . . xi,ℓ). Let
Gi denote the digraph on vertex set Wi consisting of all directed edges which do not lie in the paths
P1, . . . Pt. Clearly we have δ0(Gi) ≥ |Wi| − 2t ≥ |Wi| − 2∆ = (1 − o(1))|Wi|. Also, by property (c)
from Stage 1 for each −→uv ∈ E(Gi) we have Yu,v ≤ (1 + ǫ)t(n − ℓ)2/n2.

Now select D2 ∼ D(n, p2), where p2 = (1 + o(1))ǫp. Given D2, we obtain a random subdigraph
Fi of Gi by assigning −→uv ∈ E(D2) with probability 1/Yu,v to some Fi with {u, v} ⊂ V (Wi). By (c),
each edge of Gi appears independently in Fi with probability

p2
Yu,v

≥

ǫpn2

(1 + ǫ)t(n − ℓ)2 ≥

ǫn

2(n − ℓ)2 := pin.

Therefore the distribution of Fi stochastically dominates that of Hi ∼ D(Gi, pin).

Now to complete the proof, let P c

i denote the complimentary path to Pi in Ci. Using n − ℓ =

n/α log n, we ﬁnd

pin ≥

ǫα log n
2(n − ℓ)

≫

log |Wi|

|Wi|

.

Therefore we can apply Lemma 2.3 to obtain that with probability 1 − o(1/n) for all i ∈ [t], the
digraph Hi (and therefore also Fi) contains a copy of P c
i . But
i
combining Qi with Qc
i for each i ∈ [t] we obtain a copy of Ci. Therefore w.h.p., for all i ∈ [t], the
digraph Qi ∪ Fi contains a copy of Ci.

from xi,1 to xi,ℓ in Wi, denoted Qc

Stage 1 and 2 together prove that if D1 ∼ D(n, p1) and D2 ∼ D(n, p2) then with probability
at least 1 − o(n−1) the digraph D1 ∪ D2 contains edge disjoint copies of C1, . . . , Ct. As D1 ∪ D2
can be coupled as a subgraph of D ∼ D(n, p). This proves that the theorem holds with probability
1 − o(n−1) for log3 n ≪ p ≪ n−2/3, and therefore by the reduction mentioned at the beginning,
w.h.p. for all p ≫ log3 n/n.

4 Counting

In this section we prove Theorem 1.3.

9

Proof of Theorem 1.3. To prove the theorem, suppose that p = α2(log log n) log n/n for some func-
tion α = α(n) which tends to inﬁnity with n. Let us also set ℓ = n − n/α(log log n).

Let C be an n-vertex σ-cycle for some σ ∈ {+, −}n. Let ρ ∈ {+, −}ℓ denote the vector given by
ρ(i) = σ(i) for all i ∈ [ℓ] and let P denote the ρ-subpath of C. Let us set p1 = (1 − ǫ)p and p2 = ǫp,
for ﬁxed small constant ǫ > 0. We prove that D ∼ D(n, p) contains many copies of C in two stages.
In the ﬁrst stage we show that w.h.p. D1 ∼ D(n, p1) contains (1 − oǫ(1))nn!pn copies of P . In the
second stage, we expose a further random digraph D2 ∼ D(n, p2) and show that w.h.p. ‘most’ of the
copies Q of P in D1 extend to a copy of C in D2 ∪ Q.
Stage 1: D1 ∼ D(n, p1) contains at least (1 − 3ǫ)nn!pn copies of P w.h.p.

To begin, consider the following way to select a random copy of P , denoted Q = x1 · · · xℓ, in some

ﬁxed digraph D on n vertices.

1. In the ﬁrst round, select a vertex x1 ∈ V (D) uniformly at random and set Q1 := x1.

2. Suppose now that we are in round i, for some 1 ≤ i ≤ ℓ − 1 and so far we have found
Qi = x1 · · · xi and aim to extend it to Qi+1, by selecting xi+1. Let Ri denote the σ(i)-

neighbourhood of xi in V (D) \ V (Qi), i.e. Ri = N σ(i)(xi) ∩(cid:0)V (D) \ V (Qi)(cid:1).

3. Select a vertex uniformly at random from Ri and set it equal to xi+1 and Qi+1 := Qixi+1. If
no such vertex exists declare a failure and terminate the algorithm. If i < ℓ − 1, return to 1.
for round i + 1.

4. If i = ℓ − 1, output Q := Qℓ.

Running this randomized algorithm results in a distribution on the set of all ρ-paths Q in D. We
will write F(D) for this distribution.

We will now analyse the above algorithm while running on D(n, p1). Select D1 ∼ D(n, p1) and

Q ∼ F(D1). For each i ∈ [ℓ], we will be interested in the following event:

Ei = “|Rj| ≥ (1 − ǫ)(n − i)p1 for all j < i”.

Note that if the algorithm ended in failure, Ec

ℓ must occur. We claim that

Pr

Q∼F (D1) (cid:2)Eℓ(cid:3) = 1 − o(1).

D1∼D(n,p1)

(5)

To see this, we analyse the algorithm by generating D1 in an ‘online fashion’, exposing edges as
we go. Suppose now that we are in round i of the algorithm and have so far found Qi = x1 · · · xi.
Expose all edges of D1 in direction σ(i) between xi and V (D1) \ V (Qi). Note that under this process,
each edge is exposed at most once, and so can be coupled as a subgraph of D1 ∼ D(n, p1). Clearly
with this process, |Ri| ∼ Bin(n − i, p1). Therefore, by Chernoﬀ’s inequality, we have

Pr

Q∼F (D1) (cid:2)|Ri| < (1 − ǫ)(n − i)p1 (cid:12)(cid:12) Qi(cid:3) ≤ e−2ǫ2(n−i)p1 ≤ e−2ǫ2(n−ℓ)p1 = o(n−1).

D1∼D(n,p1)

Here we have used that

ǫ2(n − ℓ)p1 ≥ ǫ2(n − ℓ)p/2 ≥ α log n/2 ≫ log n.

10

However, this gives that

Pr

Q∼F (D1) (cid:2)Ei+1| Ei(cid:3) ≥ 1 − o(n−1).

D1∼D(n,p1)

In turn this gives (5), since ℓ ≤ n and

Pr

Q∼F (D1) (cid:2)Eℓ(cid:3) ≥ Yi∈[ℓ−1]

D1∼D(n,p1)

Pr

Q∼F (D1) (cid:2)Ei+1| Ei(cid:3) ≥(cid:0)1 − o(n−1)(cid:1)ℓ−1 = 1 − o(1).

D1∼D(n,p1)

Now note that (5) shows that if we select D1 ∼ D(n, p1) then w.h.p.

Pr

Q∼F (D1)(cid:2)Eℓ(cid:3) = 1 − o(1).

However, for each σ-path eQ = x1 · · · xℓ in D1 which satisﬁes Eℓ we have

1

Pr

Q∼F (D1)

(Q = eQ) = Yi∈[ℓ−1]

1

|Ri|

≤ Yi∈[ℓ−1]

(1 − ǫ)(n − i)p1

.

Therefore, letting Q(D1) denote the collection of all σ-paths in D1, which satisfy Eℓ, from (5) we
have

1 − o(1) ≤ Pr

Q∼F (D1)(cid:2)Eℓ(cid:3) = XeQ∈Q

Pr

Q∼F (D1)(cid:2)Q = eQ(cid:3) ≤

|Q(D1)|

(1 − ǫ)ℓ(n)ℓpℓ
1

.

Rearranging, this gives

|Q(D1)| ≥ (1 − ǫ)n(n)ℓpℓ

1 ≥ (1 − 2ǫ)n(n)ℓpℓ ≥ (1 − 3ǫ)nn!pn.

Here we used that

(n − ℓ)!pn−ℓ ≤ ((n − ℓ)p)n−ℓ = (α log n)n/α log log n = (1 + o(1))n.

Stage 2: Completing ‘most’ copies of P in D1 to a copy of C.

Let P denote the collection of all copies of P in D1. Let P c denote compliment path of P in C
(see notation). Note from the bound in Stage 1, w.h.p. we have |P| ≥ (1 − 3ǫ)nn!pn. Let us ﬁx
Q ∈ P, which starts at x1 and ends at xℓ. Select D2 ∼ D(n, p2). We will show that

Pr(cid:2)Q is contained in a copy of C in Q ∪ D2(cid:3) = 1 − o(1).

To see this, set WQ :=(cid:0)V (D1) \ V (Q)(cid:1) ∪ {x1, xℓ}, so that |WQ| = n − ℓ + 2. But it is easy to see that

D2[WQ] ∼ D(n − ℓ + 2, p2) (perhaps some edges also appear D1, but this only helps us). Using that

(6)

p2 = ǫp =

ǫα2(log log n) log n

n

≫

log n
n − ℓ

,

by Lemma 2.3 we ﬁnd that D2[WQ] w.h.p. contains a P c path Q2 from x1 to xℓ. Combined with Q,
this gives a copy of C in Q ∪ D2. This gives (6).

11

We now complete the proof of the theorem. Let Pbad denote the set of Q ∈ P which are not

contained in a copy of C in Q ∪ D2. From (6) we have

E(|Pbad|) = o(|P|).

By Markov’s inequality this gives that w.h.p. |Pbad| = o(|P|). Therefore, w.h.p. there are |P \Pbad| =
(1 − o(1))|P| ≥ (1 − 4ǫ)nn!pn paths Q which extend to a copy of C in Q ∪ D2. As each copy of C
can be obtained from at most 2n such paths, this gives |P \ Pbad|/2n ≥ (1 − 5ǫ)nn!pn copies of C in
D1 ∪ D2.

References

[1] B. Bollob´as. The evolution of random graphs. Transactions of the American Mathematical

Society, 286(1), 257–274, 1984.

[2] F. Chung and L. Lu. Concentration inequalities and martingale inequalities – a survey, Internet

Math. 3(1) (2006), 79-127.

[3] L. DeBiasio, D. K¨uhn, T. Molla, D. Osthus and A. Taylor. Arbitrary orientations of Hamilton

cycles in digraphs, in SIAM Journal Discrete Mathematics 29 (2015), 1553–1584.

[4] L. DeBiasio and T. Molla. Semi-degree threshold for anti-directed Hamilton cycles, arXiv

preprint, arXiv:1308.0269.

[5] G. A. Dirac. Some theorems on abstract graphs,

in Proceedings of the London Mathematical

Society, 2 (1952), 69–81.

[6] A. Ferber. Closing gaps in problems related to Hamilton cycles in random graphs and hyper-

graphs, The Electronic Journal of Combinatorics, 22(1):P1–61, 2015.

[7] A. Ferber, G. Kronenberg and E. Long. Packing, counting and covering Hamilton cycle in

random directed graphs, Israel Journal of Mathematics, to appear.

[8] A. Ferber, R. Nenadov, U. Peter, A. Noever, and N. ˇSkoric. Robust Hamiltonicity of random

directed graphs. SODA ’14.

[9] A. Ferber and V. Vu. Packing perfect matchings in random hypergraphs, preprint.

[10] A. M. Frieze. An algorithm for ﬁnding Hamilton cycles in random directed graphs. Journal of

Algorithms, 9(2):181–204, 1988.

[11] A. Ghouila-Houri. Une condition suﬃsante dexistence dun circuit Hamiltonien, in C.R. Acad.

Sci. Paris 25 (1960), 495-497.

[12] R. Glebov and M. Krivelevich. On the number of Hamilton cycles in sparse random graphs.

SIAM Journal on Discrete Mathematics, 27(1):27–42, 2013.

[13] R. H¨aggkvist and A. Thomason. Oriented Hamilton cycles in digraphs,

in Journal of Graph

Theory 19.4 (1995), 471–479.

12

[14] F. Knox, D. K¨uhn, and D. Osthus. Edge-disjoint Hamilton cycles in random graphs. Random

Structures & Algorithms, 2013.

[15] M. Krivelevich and W. Samotij. Optimal packings of Hamilton cycles in sparse random graphs.

SIAM Journal on Discrete Mathematics, 26(3):964–982, 2012.

[16] D. K¨uhn and D. Osthus. Hamilton decompositions of regular expanders: applications. Journal

of Combinatorial Theory, Series B, 104:1–27, 2014.

[17] C. McDiarmid. Clutter percolation and random graphs,

in Combinatorial Optimization II,

17–25. Springer, 1980.

[18] L. P´osa. Hamiltonian circuits in random graphs. Discrete Mathematics, 14(4):359–364, 1976.

[19] A. Thomason. Paths and cycles in tournaments, in Transactions of the American Mathematical

Society, 296(1) (1986), 167–180.

13

