Autonomous Vehicle Routing in Congested Road Networks

Federico Rossi,* Rick Zhang,* and Marco Pavone

6
1
0
2

 
r
a

M
3

 

 
 
]

A
M

.
s
c
[
 
 

1
v
9
3
9
0
0

.

3
0
6
1
:
v
i
X
r
a

Abstract—This paper considers the problem of routing and
rebalancing a shared ﬂeet of autonomous (i.e., self-driving)
vehicles providing on-demand mobility within a capacitated trans-
portation network, where congestion might disrupt throughput.
We model the problem within a network ﬂow framework and
show that under relatively mild assumptions the rebalancing
vehicles,
if properly coordinated, do not lead to an increase
in congestion (in stark contrast to common belief). From an
algorithmic standpoint, such theoretical insight suggests that the
problem of routing customers and rebalancing vehicles can be
decoupled, which leads to a computationally-efﬁcient routing and
rebalancing algorithm for the autonomous vehicles. Numerical
experiments and case studies corroborate our theoretical insights
and show that the proposed algorithm outperforms state-of-the-
art point-to-point methods by avoiding excess congestion on the
road. Collectively, this paper provides a rigorous approach to
the problem of congestion-aware, system-wide coordination of
autonomously driving vehicles, and to the characterization of
the sustainability of such robotic systems.

I. INTRODUCTION

Autonomous (i.e., robotic, self-driving) vehicles are rapidly
becoming a reality and hold great promise for increasing
safety and enhancing mobility for those unable or unwilling
to drive [1], [2]. A particularly attractive operational paradigm
involves coordinating a ﬂeet of autonomous vehicles to pro-
vide on-demand service to customers, also called autonomous
mobility-on-demand (AMoD). An AMoD system may reduce
the cost of travel [3] as well as provide additional sustainability
beneﬁts such as increased overall vehicle utilization, reduced
demand for urban parking infrastructure, and reduced pollution
(with electric vehicles) [1]. The key beneﬁts of AMoD are
realized through vehicle sharing, where each vehicle, after
servicing a customer, drives itself to the location of the
next customer or rebalances itself throughout
the city in
anticipation of future customer demand [4].

In terms of trafﬁc congestion, however, there has been no
consensus on whether autonomous vehicles in general, and
AMoD systems in particular, will ultimately be beneﬁcial or
detrimental. It has been argued that by having faster reaction
times, autonomous vehicles may be able to drive faster and
follow other vehicles at closer distances without compromising
safety, thereby effectively increasing the capacity of a road
and reducing congestion. They may also be able to interact
with trafﬁc lights to reduce full stops at intersections [5].
On the downside, the process of vehicle rebalancing (empty
vehicle trips) increases the total number of vehicles on the
road (assuming the number of vehicles with customers stays
the same). Indeed, it has been argued that the presence of
many rebalancing vehicles may contribute to an increase in
congestion [6], [7]. These statements, however, do not take
into account that in an AMoD system the operator has control

*These authors contributed equally to this work. Working paper, in prepa-

ration for journal submission.

over the actions (destination and routes) of the vehicles, and
may route vehicles intelligently to avoid increasing congestion
or perhaps even decrease it.

Accordingly, the goal of this paper is twofold. First, on an
engineering level, we aim to devise routing and rebalancing
algorithms for an autonomous vehicle ﬂeet that seek to mini-
mize congestion. Second, on a socio-economic level, we aim to
rigorously address the concern that autonomous cars may lead
to increased congestion and thus disrupt currently congested
transportation infrastructures.

Literature review: In this paper, we investigate the problem
of controlling an AMoD system within a road network in
the presence of congestion effects. Previous work on AMoD
systems have primarily concentrated on the rebalancing prob-
lem [4], [3], whereby one strives to allocate empty vehicles
throughout a city while minimizing fuel costs or customer
wait times. The rebalancing problem has been studied in [4]
using a ﬂuidic model and in [8] using a queueing network
model. An alternative formulation is the one-to-one pickup and
delivery problem [9], where a ﬂeet of vehicles service pickup
and delivery requests within a given region. Combinatorial
asymptotically optimal algorithms for pickup and delivery
problems were presented in [10], [11], and generalized to
road networks in [12]. Almost all current approaches assume
point-to-point travel between origins and destinations (no road
network), and even routing problems on road networks (e.g.
[12]) do not take into account vehicle-to-vehicle interactions
that would cause congestion and reduce system throughput.

On the other hand, trafﬁc congestion has been studied in
economics and transportation for nearly a century. The ﬁrst
congestion models [13], [14], [15] sought to formalize the rela-
tionship between vehicle speed, density, and ﬂow. Since then,
approaches to modeling congestion have included empirical
[16], simulation-based [17], [18], [19], queueing-theoretical
[20], and optimization [21], [22]. While there have been many
high ﬁdelity congestion models that can accurately predict
trafﬁc patterns, the primary goal of congestion modeling has
been the analysis of trafﬁc behavior. Efforts to control trafﬁc
have been limited to the control of intersections [23], [24]
and freeway on-ramps [25] because human drivers behave
non-cooperatively. The problem of cooperative, system-wide
routing (a key beneﬁt of AMoD systems) is similar to the
dynamic trafﬁc assignment problem (DTA) [22]. The key
difference is that DTA approaches only optimize routes for
passenger vehicles while we seek to optimize the routes of
both passenger vehicles and empty rebalancing vehicles.

Statement of contributions: The contribution of this paper is
threefold. First, we model an AMoD system within a network
ﬂow framework, whereby customer-carrying and empty rebal-
ancing vehicles are represented as ﬂows over a capacitated
road network (in such model, when the ﬂow of vehicles along
a road reaches a critical capacity value, congestion effects

occur). Within this model, we provide a cut condition for
the road graph that needs to be satisﬁed for congestion-free
customer and rebalancing ﬂows to exist. Most importantly,
under the assumption of a symmetric road network, we inves-
tigate an existential result that leads to two key conclusions:
(1) rebalancing does not
increase congestion, and (2) for
certain cost functions, the problems of ﬁnding customer and
rebalancing ﬂows can be decoupled. Second, leveraging the
theoretical insights, we propose a computationally-efﬁcient
algorithm for congestion-aware routing and rebalancing of
an AMoD system that is broadly applicable to time-varying,
possibly asymmetric road networks. Third, through numerical
studies on real-world trafﬁc data, we validate our assumptions
and show that the proposed real-time routing and rebalancing
algorithm outperforms state-of-the-art point-to-point rebalanc-
ing algorithms in terms of lower customer wait
times by
avoiding excess congestion on the road.

Organization: The remainder of this paper is organized as
follows: in Section II we present a network ﬂow model of an
AMoD system on a capacitated road network and formulate
the routing and rebalancing problem. In Section III we present
key structural properties of the model including fundamental
limitations of performance and conditions for the existence of
feasible (in particular, congestion-free) solutions. The insights
from Section III are used to develop a practical real-time
routing and rebalancing algorithm in Section IV. Numerical
studies and simulation results are presented in Section V, and
in Section VI we draw conclusions and discuss directions for
future work.

II. MODEL DESCRIPTION AND PROBLEM FORMULATION
In this section we formulate a network ﬂow model for an
AMoD system operating over a capacitated road network. The
model allows us to derive key structural insights into the vehi-
cle routing and rebalancing problem, and motivates the design
of real-time, congestion-aware algorithms for coordinating the
robotic vehicles. We start in Section II-A with a discussion
of our congestion model; then, in Section II-B we provide a
detailed description of the overall AMoD system model.

A. Congestion Model

We use a simpliﬁed congestion model consistent with clas-
sical trafﬁc ﬂow theory [13]. In classical trafﬁc ﬂow theory,
at low vehicle densities on a road link, vehicles travel at the
free ﬂow speed of the road (imposed by the speed limit). This
is referred to as the free ﬂow phase of trafﬁc. In this phase,
the free ﬂow speed is approximately constant [26]. The ﬂow,
or ﬂow rate, is the number of vehicles passing through the
link per unit time, and is given by the product of the speed
and density of vehicles. When the ﬂow of vehicles reaches
an empirically observed critical value, the ﬂow reaches its
maximum. Beyond the critical ﬂow rate, vehicle speeds are
dramatically reduced and the ﬂow decreases, signaling the
beginning of trafﬁc congestion. The maximum stationary ﬂow
rate is called the capacity of the road link in the literature.
In our approach, road capacities are modeled as constraints
on the ﬂow of vehicles. In this way, the model captures the
behavior of vehicles up to the onset of congestion.

is not

This simpliﬁed congestion model is adequate for our pur-
poses because the goal
to analyze the behavior of
vehicles in congested networks, but to control vehicles in
order to avoid the onset of congestion. We also do not
explicitly model delays at intersections, spillback behavior due
to congestion, or bottleneck behavior due to the reduction of
the number of lanes on a road link. An extension to our model
that accommodates (limited) congestion on links is presented
in Section V-A.

B. Network Flow Model of AMoD system

We consider a road network modeled as a directed graph
G = (V,E), where V denotes the node set and E ⊆ V × V
denotes the edge set. Figure 1 shows one such network. The
nodes v in V represent intersections and locations for trip
origins/destinations, and the edges (u, v) in E represent road
links. As discussed in Section II-A, congestion is modeled
by imposing capacity constraints on the road links: each
constraint represents the capacity of the road upon the onset
of congestion. Speciﬁcally, for each road link (u, v) ∈ E, we
denote by c(u, v) : E (cid:55)→ N>0 the capacity of that link. When
the ﬂow rate on a road link is less than the capacity of the
link, all vehicles are assumed to travel at the free ﬂow speed,
or the speed limit of the link. For each road link (u, v) ∈ E,
we denote by t(u, v) : E (cid:55)→ R≥0 the corresponding free ﬂow
time required to traverse road link (u, v). Conversely, when the
ﬂow rate on a road link is larger than the capacity of the link,
the traversal time is assumed equal to ∞ (we reiterate that our
focus in this section is on avoiding the onset of congestion).
We assume that the road network is capacity-symmetric
(or symmetric for short): for any cut1 (S, ¯S) of G(V,E), the
overall capacity of the edges connecting nodes in S to nodes
in ¯S equals the overall capacity of the edges connecting nodes
in ¯S to nodes in S, that is

(cid:88)

(cid:88)

c(u, v) =

c(v, u)

(u,v)∈E: u∈S, v∈ ¯S

(v,u)∈E: u∈S, v∈ ¯S

If all edges have symmetrical capacity, i.e., for all (u, v) ∈ E,
c(u, v) = c(v, u), then the network is capacity-symmetric. The
converse statement, however, is not true in general.
Transportation requests are described by the tuple (s, t, λ),
where s ∈ V is the origin of the requests, t ∈ V is the
destination, and λ ∈ R>0 is the rate of requests, in customers
per unit
time. Transportation requests are assumed to be
stationary and deterministic, i.e., the rate of requests does not
change with time and is a deterministic quantity. The set of
transportation requests is denoted by M = {(sm, tm, λm)}m,
and its cardinality is denoted by M.

Single-occupancy vehicles travel within the network while
servicing the transportation requests. We denote fm(u, v) :
E (cid:55)→ R≥0, m = {1, . . . , M}, as the customer ﬂow for
requests m on edge (u, v), i.e., the amount of ﬂow from origin
sm to destination tm that uses link (u, v). We also denote
fR(u, v) : E (cid:55)→ R≥0 as the rebalancing ﬂow on edge (u, v),
i.e., the amount of rebalancing ﬂow traversing edge (u, v)

1For any subset of nodes S ⊆ V, we deﬁne a cut (S, ¯S) ⊆ E as the set
of edges whose origin lies in S and whose destination lies in ¯S = {V \ S}.
Formally, (S, ¯S) := {(u, v) ∈ E : u ∈ S, v ∈ ¯S}.

We denote a customer ﬂow {fm(u, v)}(u,v),m that satisﬁes
Equations (2), (3), (4) and (6) as a feasible customer ﬂow.
For a given set of feasible customer ﬂows {fm(u, v)}(u,v),m,
we denote a ﬂow {fR(u, v)}(u,v) that satisﬁes Equation (5)
and such that the combined ﬂows {fm(u, v), fR(u, v)}(u,v),m
satisfy Equation (6) as a feasible rebalancing ﬂow. We remark
that a rebalancing ﬂow that is feasible with respect to a set of
customer ﬂows may be infeasible for a different collection of
customer ﬂows.
For a given set of optimal ﬂows {f∗
m(u, v)}(u,v),m and
{f∗
R(u, v)}(u,v), the minimum number of vehicles needed to
implement them is given by



(cid:88)

(cid:88)

m∈M

(u,v)∈E

(cid:16)

Vmin =

t(u, v)

∗
m(u, v) + f

f

∗
R(u, v)

(cid:17) .

This follows from a similar analysis done in [4] for point-to-
point networks. Hence, the cost function (1) is aligned with
the desire of minimizing the number of vehicles needed to
operate an AMoD system.
D. Discussion

A few comments are in order. First, we assume that trans-
portation requests are time invariant. This assumption is valid
when transportation requests change slowly with respect to
the average duration of a customer’s trip, which is often
the case in dense urban environments [28]. Additionally, in
Section IV we will present algorithmic tools that allow one
to extend the insights gained from the time-invariant case
to the time-varying counterpart. Second, the assumption of
single-occupancy for the vehicles models most of the existing
(human) one-way vehicle sharing systems (where the driver
is considered “part” of the vehicle), and chieﬂy disallows
the provision of ride-sharing or carpooling service (this is an
aspect left for future research). Third, as also discussed in
Section II-A, our congestion model is simpler and less accurate
than typical congestion models used in the transportation
community. However, our model lends itself to efﬁcient real-
time optimization and thus it is well-suited to the control
of ﬂeets of autonomous vehicles. Existing high-ﬁdelity con-
gestion models should be regarded as complementary and
could be used ofﬂine to identify the congestion thresholds
used in our model. Fourth, while we have deﬁned the CRRP
in terms of fractional ﬂows, an integer-valued counterpart
can be deﬁned and (approximately) solved to ﬁnd optimal
routes for each individual customer and vehicle. Algorithmic
aspects will be investigated in depth in Section IV, with the
goal of devising practical, real-time routing and rebalancing
algorithms. Fifth, trip requests are assumed to be known. In
practice, trip requests can be reserved in advance, estimated
from historical data, or estimated in real time. Finally, the
assumption of capacity-symmetric road networks indeed ap-
pears reasonable for a number of major U.S. metropolitan
areas. In the Supplementary Material, by using OpenStreetMap
data [29], we provide a rigorous characterization in terms
of capacity symmetry of the road networks of New York
City, Chicago, Los Angeles and other major U.S. cities. The
results consistently show that urban road networks are usually
symmetric to a very high degree. Additionally, several of our

Fig. 1.
A road network modeling Lower Manhattan and the Financial
District. Nodes (denoted by small black dots) model intersections; select
nodes, denoted by colored circular and square markers, model passenger trips’
origins and destinations. Different trip requests are denoted by different colors.
Roads are modeled as edges; line thickness is proportional to road capacity.
needed to realign the vehicles with the asymmetric distribution
of transportation requests.

C. The Routing Problem

The goal is to compute ﬂows for the autonomous vehicles
that (i) transfer customers to their desired destinations in
minimum time (customer-carrying trips) and (ii) rebalance
vehicles throughout the network to realign the vehicle ﬂeet
with transportation demand (customer-empty trips). Speciﬁ-
cally, the Congestion-free Routing and Rebalancing Problem
(CRRP) is formally deﬁned as follows. Given a capacitated,
symmetric network G(V,E), a set of transportation requests
M = {(sm, tm, λm)}m, and a weight factor ρ > 0, solve

(cid:88)

(u,v)∈E

fm(·,·),fR(·,·)

u∈V

m∈M

minimize

(cid:88)
subject to (cid:88)
(cid:88)
(cid:88)
(cid:88)
(cid:88)

u∈V

u∈V

u∈V

t(u, v)fm(u, v)+ρ

t(u, v)fR(u, v)

fm(u, sm) + λm =

(1)
fm(sm, w) ∀m ∈ M (2)

fm(u, tm) = λm +

fm(tm, w) ∀m ∈ M (3)

(cid:88)
(cid:88)

w∈V

w∈V

(cid:88)
(cid:88)

w∈V

m∈M

(cid:88)

m∈M

fm(u, v) =

fm(v, w)

∀m ∈ M, v ∈ V \ {sm, tm}

fR(u, v) +

1v=tm λm

=

fR(v, w) +

w∈V

fR(u, v) +

(cid:88)

m∈M

1v=sm λm ∀v ∈ V

fm(u, v) ≤ c(u, v) ∀(u, v) ∈ E

(4)

(5)

(6)

(cid:88)

(u,v)∈E

The cost function (1) is a weighted sum (with weight
ρ) of the overall duration of all passenger trips and the
duration of rebalancing trips. Constraints (2), (3) and (4)
enforce continuity of each trip (i.e., ﬂow conservation) across
nodes. Constraint (5) ensures that vehicles are rebalanced
throughout the road network to re-align vehicle distribution
with transportation requests, i.e. to ensure that every outbound
customer ﬂow is matched by an inbound ﬂow of rebalancing
vehicles and vice versa. Finally, constraint (6) enforces the
capacity constraint on each link (function 1x denotes the
indicator function of the Boolean variable x = {true, false},
that
is 1x equals one if x is true, and equals zero if x
is false). Note that the CRRP is a linear program and, in
particular, a special instance of the fractional multi-commodity
ﬂow problem [27].

theoretical and algorithmic results extend to the case where
this assumption is lifted, as it will be highlighted throughout
the paper.

III. STRUCTURAL PROPERTIES OF THE

NETWORK FLOW MODEL

In this section we provide two key structural results for
the network ﬂow model presented in Section II-B. First,
we provide a cut condition that needs to be satisﬁed for
feasible customer and rebalancing ﬂows to exist. In other
words, this condition provides a fundamental limitation of
performance for congestion-free AMoD service in a given road
network. Second, we investigate an existential result (our main
theoretical result) that is germane to two key conclusions: (1)
rebalancing does not increase congestion in symmetric road
networks, and (2) for certain cost functions, the problems of
ﬁnding customer and rebalancing ﬂows can be decoupled – an
insight that will be heavily exploited in subsequent sections.

We are now in a position to present a structural (i.e., ﬂow-
independent) necessary condition for the existence of feasible
customer and rebalancing ﬂows.

Theorem 3.4 (Necessary condition for feasible ﬂows): A
necessary condition for the existence of a set of feasible
customer and rebalancing ﬂows {fm(u, v), fR(u, v)}(u,v),m,
is that, for every cut (S, ¯S),

m∈M 1sm∈S,tm∈ ¯S λm ≤ Cout(S, ¯S), and
m∈M 1sm∈S,tm∈ ¯S λm ≤ Cin(S, ¯S).

1) (cid:80)
2) (cid:80)

Proof: The theorem is a trivial consequence of Lemmas

3.2 and 3.3.

Theorem 3.4 essentially provides a structural fundamental
limitation of performance for a given road network: if the cut
conditions in Theorem 3.4 are not met, then there is no hope
of ﬁnding congestion-free customer and rebalancing ﬂows.
We reiterate that Theorem 3.4 holds for both symmetric and
asymmetric networks (for a symmetric network, claim 2) in
Lemma 3.3 and condition 2) in Theorem 3.4 are redundant).

A. Fundamental Limitations

B. Existence of Congestion-Free Flows

(S, ¯S),

the overall ﬂow exiting a cut

Fout(S, ¯S) :=(cid:80)
m∈M(cid:80)
i.e., Cout(S, ¯S) = (cid:80)

We start with a few deﬁnitions. For a given set of
feasible customer ﬂows {fm(u, v)}(u,v),m, we denote by
Fout(S, ¯S)
i.e.,
u∈S,v∈ ¯S fm(u, v). Similarly, we de-
note by Cout(S, ¯S) the capacity of the network exiting S,
u∈S,v∈ ¯S c(u, v). Analogously, Fin(S, ¯S)
denotes the overall ﬂow entering S from ¯S, i.e., Fin(S, ¯S) :=
Fout( ¯S,S), and Cin(S, ¯S) denotes the capacity entering S
from ¯S,
that
the arguments leading to the main result of this subsection
(Theorem 3.4) do not require the assumption of capacity
symmetry; hence, Theorem 3.4 holds for asymmetric road
networks as well.

i.e., Cin(S, ¯S) := Cout( ¯S,S). We highlight

The next technical lemma (whose proof is provided in the
Supplementary Material) shows that the net ﬂow leaving set
S equals the difference between the ﬂow originating from the
origins sm in S and the ﬂow exiting through the destinations
tm in S, that is,
Lemma 3.1 (Net ﬂow across a cut): Consider a set of fea-
sible customer ﬂows {fm(u, v)}(u,v),m. Then, for every cut
(S, ¯S), the net ﬂow leaving set S satisﬁes
Fout(S, ¯S) − Fin(S, ¯S) =

1sm∈S λm − (cid:88)

(cid:88)

1tm∈S λm.

m∈M

m∈M

We now state two additional lemmas (whose proofs are
given in the Supplementary Material) providing, respectively,
lower and upper bounds for the outﬂows Fout(S, ¯S).
Lemma 3.2 (Lower bound for outﬂow): Consider a set of
feasible customer ﬂows {fm(u, v)}(u,v),m. Then, for any cut
(S, ¯S), the overall ﬂow Fout(S, ¯S) exiting cut (S, ¯S) is lower

Lemma 3.3 (Upper bound for outﬂow): Assume there ex-
feasible customer and rebalancing ﬂows

ists a set of
{fm(u, v), fR(u, v)}(u,v),m. Then, for every cut (S, ¯S),
1) Fout(S, ¯S) ≤ Cout(S, ¯S), and
2) Fout(S, ¯S) ≤ Cin(S, ¯S).

bounded according to(cid:88)

m∈M

1sm∈S,tm∈ ¯S λm ≤ Fout(S, ¯S).

In this section we address the following question: assuming
there exists a feasible customer ﬂow, is it always possible to
ﬁnd a feasible rebalancing ﬂow? As we will see, the answer
to this question is afﬁrmative and has both conceptual and
algorithmic implications.
Theorem 3.5 (Feasible rebalancing): Assume there exists a
set of feasible customer ﬂows {fm(u, v)}(u,v),m. Then, it is
always possible to ﬁnd a set of feasible rebalancing ﬂows
{fR(u, v)}(u,v).
Proof: We prove the theorem for the special case where
no node v ∈ V is associated with both an origin and a
destination for the transportation requests in M. This is
without loss of generality, as the general case where a node v
has both an origin and a destination assigned can be reduced to
this special case, by associating with node v a “shadow” node
so that (i) all destinations are assigned to the shadow node
and (ii) node v and its shadow node are mutually connected
via an inﬁnite-capacity, zero-travel-time edge.

We start the proof by deﬁning the concepts of partial rebal-
ancing ﬂows and defective origins and destinations. Speciﬁ-
cally, a partial rebalancing ﬂow, denoted as { ˆfR(u, v)}(u,v),
is a set of mappings from E to R≥0 obeying the following
properties:

1) It satisﬁes constraint (5) at every node that is not an origin
nor a destination, that is ∀ v ∈ {V \{{sm}m ∪{tm}m}},

ˆfR(u, v) =

ˆfR(v, w).

2) It violates constraint (5) in the “≤ direction” at every
node that is an origin, that is ∀ v ∈ V such that ∃m ∈

M : v = sm,(cid:88)

ˆfR(u, v) ≤ (cid:88)
(cid:88)

w∈V

ˆfR(u, v) +

ˆfR(v, w) +

(cid:88)
1v=tmλm ≥ (cid:88)

m∈M

m∈M

w∈V

u∈V

v = tm,(cid:88)

u∈V

3) It violates constraint (5) in the “≥ direction” at every node
that is a destination, that is ∀ v ∈ V such that ∃m ∈ M :

ˆfR(v, w).

1v=smλm.

(cid:88)

u∈V

(cid:88)

w∈V

ﬂows {fR(u, v)}(u,v) does not exist. Then Lemma 3.7 shows
that there exists a partial rebalancing ﬂow { ˆfR(u, v)}(u,v)
and a cut (S, ¯S) such that all defective destinations under
{ ˆfR(u, v)}(u,v) belong to S and all defective origins belong
to ¯S. Let us denote the sum of all partial rebalancing ﬂows
across cut (S, ¯S) as
out(S, ¯S) :=
ˆF R

(cid:88)
u∈S,v∈ ¯S
out( ¯S,S). Since all
in (S, ¯S) := ˆF R
and, analogously, deﬁne ˆF R
edges in the cut (S, ¯S) are saturated under { ˆfR(u, v)}(u,v),
one has, due to Equation (6), the equality
Cout(S, ¯S) = Fout(S, ¯S) + ˆF reb
Fin(S, ¯S) + ˆF reb

out (S, ¯S).
in (S, ¯S) ≤ Cin(S, ¯S).

Additionally, again due to Equation (6), one has the inequality

ˆfR(u, v),

Combining the above equations, one obtains

Fin(S, ¯S)+ ˆF reb

in (S, ¯S)−Fout(S, ¯S)− ˆF reb

out (S, ¯S) ≤ Cin(S, ¯S)−Cout(S, ¯S).

(cid:34)(cid:88)

w∈V

(cid:88)

v∈S

>

(cid:35)
(cid:88)

m∈M

To compute ˆF reb

in (S, ¯S)− ˆF reb
out (S, ¯S), we follow a procedure
similar to the one used in Lemma 3.1. Summing Equation (5)
over all nodes in S, one obtains,
(cid:88)

(cid:34)(cid:88)

(cid:88)

ˆfR(u, v) +

1v=tm λm

v∈S

u∈V

m∈M

(cid:35)

ˆfR(v, w) +

1v=sm λm

.

The strict inequality is due to the fact that for a partial
rebalancing ﬂow that is not feasible there exists at least one
defective destination (Lemma 3.6), which, by construction,
must belong to S. Simplifying those ﬂows ˆfR(u, v) for which
both u and v are in S (as such ﬂows appear on both sides of
the above inequality), one obtains
in (S, ¯S) − ˆF reb
ˆF reb
Also, by Lemma 3.1,
Fout(S, ¯S) − Fin(S, ¯S) =

1sm∈S λm − (cid:88)
1sm∈S λm − (cid:88)

(cid:88)
(cid:88)

out (S, ¯S) >

1tm∈S λm.

1tm∈S λm.

m∈M

m∈M

m∈M

m∈M
Collecting all the results so far, we conclude that
in (S, ¯S) − Fout(S, ¯S) − ˆF reb

0 < Fin(S, ¯S) + ˆF reb
< Cin(S, ¯S) − Cout(S, ¯S).

out (S, ¯S)

Hence, we reached the conclusion that Cin(S, ¯S) −
Cout(S, ¯S) > 0, or, in other words, the capacity of graph
G(V,E) across cut (S, ¯S) is not symmetric. This contradicts
the assumption that graph G(V,E) is capacity-symmetric, and
the claim follows.

The importance of Theorem 3.5 is twofold. First, perhaps
surprisingly, it shows that for symmetric road networks it is
always possible to rebalance the autonomous vehicles without
increasing congestion – in other words, the rebalancing of
autonomous vehicles in a symmetric road network does not
lead to an increase in congestion. Second, from an algorithmic
standpoint, if the cost function in the CRRP only depends
on the customer ﬂows (that is, ρ = 0 and the goal is to
minimize the customers’ travel times), then the CRRP problem

Fig. 2. A graphical representation of Lemma 3.7. If there exists a set of
feasible customer ﬂows but there does not exist a set of feasible rebalancing
ﬂows, one can ﬁnd a partial rebalancing ﬂow where all the defective origins,
represented as blue circles, are separated from all the defective destinations,
represented as blue squares, by a cut of saturated edges (shown in red). In
the proof of Theorem 3.5 we show that the capacity of such a cut (S, ¯S)
is asymmetric, i.e., Cout < Cin – a contradiction that leads to the claim of
Theorem 3.5.

4) The combined customer and partial rebalancing ﬂows
{fm(u, v), ˆfR(u, v)}(u,v),m satisfy Equation (6) for every
edge (u, v) ∈ E.

Note that the trivial zero ﬂow, that is ˆfR(u, v) = 0 for all
(u, v) ∈ E, is a partial rebalancing ﬂow (in other words, the set
of partial rebalancing ﬂows in not empty). Clearly a feasible
rebalancing ﬂow is also a partial rebalancing ﬂow, but the
opposite is not necessarily true.
For a given partial rebalancing ﬂow, we denote an origin
node, that is a node v ∈ V such that v = sm for some
m = 1, . . . , M, as a defective origin if Equation (5) is not
satisﬁed at v = sm (in other words, the strict inequality <
holds). Analogously, we denote a destination node, that is a
node v ∈ V such that v = tm for some m = 1, . . . , M,
as a defective destination if Equation (5) is not satisﬁed at
v = tm (in other words, the strict inequality > holds). The
next lemma (whose proof is provided in the Supplementary
Material) links the concepts of partial rebalancing ﬂows and
defective origins/destinations.

Lemma 3.6 (Co-existence of defective origins/destinations):
For every partial rebalancing ﬂow that
is not a feasible
rebalancing ﬂow, there exists at least one node u ∈ V that is
a defective origin, and one node v ∈ V that is a defective
destination.
For a given set of customer ﬂows {fm(u, v)}(u,v),m and
partial rebalancing ﬂows { ˆfR(u, v)}(u,v), we call an edge
(u, v) ∈ E saturated if Equation (6) holds with equality
for that edge. We call a path saturated if at least one of
the edges along the path is saturated. We now prove the
existence of a special partial rebalancing ﬂow where defective
destinations and defective origins are separated by a graph
cut formed exclusively by saturated edges (this result, and its
consequences, are illustrated in Figure 2).
Lemma 3.7: Assume there exists a set of feasible customer
ﬂows {fm(u, v)}(u,v),m, but there does not exist a set of
feasible rebalancing ﬂows {fR(u, v)}(u,v). Then, there exists
a partial rebalancing ﬂow { ˆfR(u, v)}(u,v) that induces a graph
cut (S, ¯S) with the following properties: (i) all defective
destinations are in S, (ii) all defective origins are in ¯S, and
(iii) all edges in (S, ¯S) are saturated.

We are now in a position to prove Theorem 3.5. The proof
is by contradiction. Assume that a set of feasible rebalancing

can be decoupled and the customers and rebalancing ﬂows can
be solved separately without loss of optimality. This insight
will be instrumental in Section IV to the design of real-time
algorithms for routing and rebalancing.

We conclude this section by noticing that the CRRP, from a
computational standpoint, can be reduced to an instance of the
Minimum-Cost Multi-Commodity Flow problem (Min-MCF),
a classic problem in network ﬂow theory [27]. The problem
can be efﬁciently solved either via linear programming (the
size of the linear program is |E|(M + 1)), or via spe-
cialized combinatorial algorithms [30], [31], [32]. However,
the solution to the CRRP provides static fractional ﬂows,
which are not directly implementable for the operation of
actual AMoD systems. Practical algorithms (inspired by the
theoretical CRRP model) are presented in the next section.

IV. REAL-TIME CONGESTION-AWARE

ROUTING AND REBALANCING

A natural approach to routing and rebalancing would be
to periodically resolve the CRRP within a receding-horizon,
batch-processing scheme (a common scheme for the control
of transportation networks [33], [4], [34]). This approach,
however, is not directly implementable as the solution to the
CRRP provides fractional ﬂows (as opposed to routes for the
individual vehicles). This shortcoming can be addressed by
considering an integral version of the CRRP (dubbed integral
CRRP), whereby the ﬂows are integer-valued and can be thus
easily translated into routes for the individual vehicles, e.g.
through a ﬂow decomposition algorithm [35]. The integral
CRRP, however, is an instance of the integral Minimum-Cost
Multi-Commodity Flow problem, which is known to be NP-
hard [36], [37]. Na¨ıve rounding techniques are inapplicable:
rounding a solution for the (non-integral) CRRP does not yield,
in general, feasible integral ﬂows, and hence feasible routes.
For example, continuity of vehicles and customers can not
be guaranteed, and vehicles may appear and disappear along
a route. In general, to the best of our knowledge, there are
no polynomial-time approximation schemes for the integral
Minimum-Cost Multi-Commodity Flow problem.

On the positive side, the integral CRRP admits a decoupling
result akin to Theorem 3.5: given a set of feasible, integral
customer ﬂows, one can always ﬁnd a set of feasible, integral
rebalancing ﬂows. (In fact, the proof of Theorem 3.5 does not
exploit anywhere the property that the ﬂows are fractional, and
thus the proof extends virtually unchanged to the case where
the ﬂows are integer-valued). Our approach is to leverage
this insight (and more in general the theoretical results from
Section III) to design a heuristic, yet efﬁcient approximation
to the integral CRRP that (i) scales to large-scale systems,
and (ii) is general, in the sense that can be broadly applied to
time-varying, asymmetric networks.

Speciﬁcally, we consider as objective the minimization of
times, which, from Section III and
the customers’ travel
the aforementioned discussion about
the generalization of
Theorem 3.5 to integral ﬂows, suggests that customer routing
can be decoupled from vehicle rebalancing (strictly speaking,
this statement is only valid for static and symmetric networks –
its generalization beyond these assumptions will be addressed

numerically in Section V). Accordingly, to emulate the real-
world operation of an AMoD system, we divide a given
city into geographic regions (also referred to as “stations”
in some formulations) [4], [8], and each arriving customer
is assigned the closest vehicle within that region (vehicle
imbalance across regions is handled separately by the vehicle
rebalancing algorithm, discussed below). We apply a greedy,
yet computationally-efﬁcient and congestion-aware approach
for customer routing where customers are routed to their
destinations using the shortest-time path as computed by an A∗
algorithm [38]. The travel time along each edge is computed
using a heuristic delay function that is related to the current
volume of trafﬁc on each edge. In this work, for each edge
(u, v) ∈ E we use the simple Bureau of Public Roads (BPR)
delay model [39]

(cid:32)

(cid:18) f (u, v)

c(u, v)

(cid:19)β(cid:33)

,

We assume the residual capacity cR(u, v) of an edge (u, v),
deﬁned as the difference between its overall capacity c(u, v)
and the current number of vehicles along that edge, is known
and remains approximately constant over the rebalancing time
horizon. In case the overall rebalancing problem is not feasible
(i.e. it is not possible to move all excess vehicles to regions
that have a deﬁcit of vehicles while satisfying the congestion
constraints), we deﬁne slack variables with cost C that allow
the optimizer to select a subset of vehicles and rebalancing
routes of maximum cardinality such that each link does not
become congested. The slack variables are denoted as dsi for
each i ∈ SR, and dtj for each j ∈ TR.

td(u, v) := t(u, v)

1 + α

where f (u, v) :=(cid:80)M

i

m=1 fm(u, v) + fR(u, v) is the total ﬂow
on edge (u, v), and α and β are usually set to 0.15 and 4
respectively. Note that customer routing is event-based, i.e, a
routing choice is made as soon as a customer arrives.

(t) := vi(t) +(cid:80)

Separately from customer routing, vehicle rebalancing from
one region to another is performed every thor > 0 time units as
a batch process (unlike customer routing, which is an event-
based process). Denote by vi(t) the number of vehicles in
region i at time t, and by vji(t) the number of vehicles
traveling from region j to i that will arrive in the next tvicinity
time units. Let vown
j vji(t) be the number of
vehicles currently “owned” by region i (i.e., in the vicinity of
such region). Denote by ve
i (t) the number of excess vehicles
in region i, or the number of vehicles left after servicing the
customers waiting within region i. From its deﬁnition, ve
i (t) is
(t)− ci(t), where ci(t) is the number of
given by ve
customers within region i. Finally, denote by vd
i (t) the desired
number of vehicles within region i. For example, for an even
distribution of excess vehicles, vd
i (t)/N, where
i ve
N is the number regions. Note that the vd
i (t)’s are rounded
so they take on integer values. The set of origin regions (i.e.,
regions that should send out vehicles), SR, and destination
regions (i.e., regions that should receive vehicles), TR, for the
rebalancing vehicles are then determined by comparing ve
i (t)
and vd

i (t) ∝ (cid:80)

i (t) = vown

i (t), speciﬁcally,

i

if ve
if ve

i (t) > vd
i (t) < vd

i (t),
i (t),

region i ∈ SR
region i ∈ TR.

Every thor

time units, the rebalancing vehicle routes are

computed by solving the following integer linear program

(cid:88)

(cid:88)

t(u, v) fR(u, v) +

Cdsi +

Cdti

fR(u, v) + 1v∈SR (ve

i∈SR
v(t) − vd

i∈TR
v (t) − dsv)

fR(v, w) + 1v∈TR (vd

v (t) − ve

v(t) − dtv),

fR(·,·),{dsi},{dtj}

minimize

(cid:88)
subject to (cid:88)
(cid:88)

(u,v)∈E

u∈V

=

w∈V

for all v ∈ V

fR(u, v) ≤ cR(u, v),
fR(u, v) ∈ N,
dsi, dtj ∈ N,

for all (u, v) ∈ E

for all (u, v) ∈ E
for all i ∈ SR, j ∈ TR

The set of (integral) rebalancing ﬂows {fR(u, v)}(u,v) is then
decomposed into a set of rebalancing paths via a ﬂow decom-
position algorithm [35]. Each rebalancing path connects one
origin region with one destination region: thus, rebalancing
paths represent the set of routes that excess vehicles should
follow to rebalance to regions with a deﬁcit of vehicles.

The rebalancing optimization problem is an instance of
the Minimum Cost Flow problem. If all edge capacities are
integral,
the linear relaxation of the Minimum Cost Flow
problem enjoys a totally unimodular constraint matrix [27].
Hence, the linear relaxation will necessarily have an integer
optimal solution, which will be a fortiori an optimal solution
to the original Minimum Cost Flow problem. It follows that
an integer-valued solution to the rebalancing optimization
problem can be computed efﬁciently, namely in polynomial
time, e.g., via linear programming. Several efﬁcient combina-
torial algorithms [27] are also available, whose computational
performance is typically signiﬁcantly better.

The favorable computational properties of the routing and
rebalancing algorithm presented in this section enable appli-
cation to large-scale systems, as described next.

V. NUMERICAL EXPERIMENTS

In this section, we characterize the effect of rebalancing
on congestion in asymmetric network and explore the perfor-
mance of the algorithm presented in Section IV on real-world
road topologies with real customer demands.

A. Characterization of Congestion due to Rebalancing in
Asymmetric Networks

The theoretical results in Section III are proven for capacity-
symmetric networks, which are in general a reasonable model
for typical urban road networks (we refer the reader to the
Supplementary Material for a detailed analysis of capacity
symmetry for major U.S. cities). Nevertheless, it is of interest
to characterize the applicability of our theoretical results
(chieﬂy, the existential result in Theorem 3.5) to road networks
that signiﬁcantly violate the capacity-symmetry property. In
other words, we study to what degree rebalancing might lead
to an increase in congestion if the network is asymmetric.

To this purpose, we compute solutions to the CRRP for
road networks with varying degrees of capacity asymmetry
and we compare corresponding travel times to those obtained
by computing optimal routes in the absence of rebalancing (as
it would be the case, e.g., if the vehicles were privately owned).

We focus on the road network portrayed in Figure 3(a),
which captures all major streets and avenues in Manhattan.
Transportation requests are based on actual taxi rides in New
York City on March 1, 2012 from 6 to 8 p.m.2. We randomly
selected about one third of the trips that occurred in that time
frame (roughly 17,000 trips) and we adjusted the capacities
of the roads such that the ﬂows induced by these trips would
approach the threshold of congestion. The roads considered all
have similar speed limits and comparable number of lanes and
thus we assign to each edge in the network the same capacity,
speciﬁcally, one vehicle every 23.6 seconds. This capacity is
consistent with the observations that (i) the customer ﬂow is
only 30% of the real one (so road capacity is reduced accord-
ingly) and (ii) taxis only contribute to a fraction of the overall
trafﬁc in Manhattan. Nevertheless, we stress that the capacity
was selected speciﬁcally to ensure that the ﬂow induced by the
trips would approach the threshold of congestion before any
asymmetry is induced. To investigate the effects of network
asymmetry, we introduce an artiﬁcial capacity asymmetry
into the baseline Manhattan road network by progressively
reducing the capacity of all northbound avenues.

In order to gain a quantitative understanding of the effect
of rebalancing on congestion and travel times, we introduce
slack variables δC(u, v), associated with a cost cc(u, v), to
each congestion constraint (6). The cost cc(u, v) is selected
so that the optimization algorithm will select a congestion-
free solution whenever one is available. Once a solution is
found, the actual travel time on each (possibly congested) link
is computed with the heuristic BPR delay model [39] presented
in Section IV. This approach maintains feasibility even in the
congested trafﬁc regime, and hence allows us to assess the
impact of rebalancing on congestion in asymmetric networks.
Figure 3(b) summarizes the results of our simulations. In the
baseline case, no artiﬁcial capacity asymmetry is introduced,
i.e., the fractional capacity reduction of northbound avenues
is equal to 0%. In this case, the customer routing problem
with no rebalancing (essentially, the CRRP problem with the
rebalancing ﬂows constrained to be equal to zero) admits
a congestion-free solution. On the other hand,
the CRRP
requires a (very small) relaxation of the congestion constraints.
Overall, the difference between the travel times in the two
cases is very small and approximately equal to 2.12%, in line
with the fact that New York City’s road graph has largely
symmetric capacity, as discussed in Section II and shown in
the Supplementary Material. Interestingly, even with a massive
50% reduction in northbound capacity,
times when
rebalancing vehicles are present are within 4.12% of those
obtained assuming no rebalancing is performed. Collectively,
these results show that
in Theorem
3.5, proven under the assumption of a symmetric network,
appears to extend (even though approximately) to asymmetric
networks. In particular, it appears that vehicle rebalancing does
not lead to an appreciable increase in congestion under very
general conditions.

the existential result

travel

We conclude this section by noticing that for a 40% reduc-
tion in capacity, the travel times with vehicle rebalancing dip

2courtesy of the New York Taxi and Limousine Commission

TABLE I

RESULTS OF THE REAL-TIME SIMULATIONS
Congestion-aware

Performance metric
# of trips completed
mean wait time (all trips)
mean travel time (completed trips)
mean service time (completed trips)
% with wait time > 5 minutes
mean # of rebalancing vehicles

49,585
163.57 s
265.13 s
286.96 s

5.4%
204

Baseline
42,219
406.03 s
275.19 s

324 s
20%
1489

Fig. 3.
Left: Manhattan road network. One-way roads are represented as
dashed lines. Centers of rebalancing regions are represented in red. Right:
Customer travel times with and without rebalancing for different levels of
network asymmetry.
slightly lower than those without. This effect is due to our use
of the BPR link delay model: while in our theoretical model
the time required to traverse a link is constant so long as a link
is uncongested, the link delay in the BPR model varies by as
much as 15% between free-ﬂow and the onset of congestion.
B. Congestion-Aware Real-time Rebalancing

In this section we evaluate the performance of the real-
time routing and rebalancing algorithm presented in Section
IV against a baseline approach that does not explicitly take
congestion into account. We simulate 7, 000 vehicles providing
service to actual taxi requests on March 1, 2012, for two hours
between 6 and 8 p.m., using the same Manhattan road network
as in the previous section (see Figure 3(a)). Taxi requests
are clustered into 88 regions corresponding to a subset of
nodes in the road network. Road capacities are reduced to
account for exogenous vehicles on the roads to the point that
congestion occurs along some routes during the simulation.
The free ﬂow speed of the vehicles is set to 25 mph (11 m/s)
and approximately 55,000 trip requests (from the taxi data set
discussed before) are simulated using a time step of 6 seconds.
The simulated speed of the vehicles on each link depend on
the number of vehicles in the link, and is calculated using the
BPR model. Other delay factors such as trafﬁc signals, turning
times, and pedestrian blocking are not simulated.

Three simulations are performed, namely (i) assuming every
customer has access to a private vehicle with no rebalanc-
ing, (ii) using the congestion-aware routing and rebalancing
algorithm presented in Section IV, and (iii) using a baseline
rebalancing algorithm. The baseline approach is derived from
the real-time rebalancing algorithm presented in [8], which is a
point-to-point algorithm that computes rebalancing origins and
destinations without considering the underlying road network.
In the baseline approach, customer routes are computed in
the same way as in Section IV. For rebalancing, the origins
and destinations are ﬁrst solved using the algorithm provided
in [8], then the routes are computed using the A∗ algorithm
much like the customer routes. In simulations (ii) and (iii),
rebalancing is performed every 2 minutes.

Table I presents a summary of the performance results
for simulations (ii) and (iii). Note that the service time is
the total
time a customer spends in the system (waiting
+ traveling). Only data from simulations (ii) and (iii) are
presented in Table I because the only applicable performance

metric in simulation (i) is the mean travel time which was
264.69 s. Comparing our algorithm with (i), we notice that
the additional rebalancing vehicles have no signiﬁcant impact
on the travel time. Comparing our algorithm with (iii), we
notice that the congestion-aware algorithm outperforms the
baseline algorithm in every metric: low congestion allows the
vehicles to service customers faster, resulting in a reduction in
wait times as well as travel times. The baseline algorithm will
send rebalancing vehicles to stations with a deﬁcit of vehicles
regardless of the level of congestion in the road network. This
results in many more empty vehicles dispatched to rebalance
the system (see Table I), which causes heavy congestion in the
network (see Supplementary Material). With our congestion-
aware algorithm, we were able to drastically reduce this effect,
resulting in very few congested road links.

VI. CONCLUSIONS AND FUTURE WORK

In this paper we presented a network ﬂow model of an
autonomous mobility-on-demand system on a capacitated road
network. We formulated the routing and rebalancing problem
and showed that on symmetric road networks, it is always
possible to route rebalancing vehicles in a coordinated way
that does not
increase trafﬁc congestion. Using a model
road network of Manhattan, we showed that rebalancing
did not increase congestion even for moderate degrees of
network asymmetry. We leveraged the theoretical
insights
to develop a computationally efﬁcient real-time congestion-
aware routing and rebalancing algorithm and demonstrated its
performance over state-of-the-art point-to-point rebalancing al-
gorithms through simulation. This highlighted the importance
of congestion awareness in the design and implementation of
control strategies for a ﬂeet of self-driving vehicles.

This work opens the ﬁeld to many future avenues of
research. First, note that the solution to the integral CRRP
can directly be used as a practical routing algorithm. For
large scale systems, high-quality approximate solutions for the
integral CRRP may be obtained using randomized algorithms
[40], [41]. Second, from a modeling perspective, we would
like to study the inclusion of stochastic information (e.g.,
demand prediction, travel time uncertainty) for the routing and
rebalancing problem, as well as a richer set of performance
metrics and constraints (e.g., time windows to pick up cus-
tomers). Third, it is of interest to explore other approaches
that may reduce congestion, including ride-sharing, demand
staggering, and integration with public transit to create an
intermodal transportation network. Fourth, we would like to
explore decentralized architectures for cooperative routing
and rebalancing. Finally, we would like to demonstrate the
real-world performance of the algorithms using high ﬁdelity
microscopic trafﬁc simulators and by implementing them on
real ﬂeets of self-driving vehicles.

0102030405060Capacity reduction on northbound avenues [%]400060008000100001200014000Overall travel time [s]Routing and rebalancingCustomers only (no rebalancing)[23] T. Le, P. Kov´acs, N. Walton, H. L. Vu, L. L. H. Andrew, and S. S. P.
Hoogendoorn, “Decentralized signal control for urban road networks,”
Transportation Research Part C: Emerging Technologies, 2015.

[24] N. Xiao, E. Frazzoli, Y. Luo, Y. Li, Y. Wang, and D. Wang, “Throughput
optimality of extended back-pressure trafﬁc signal control algorithm,” in
Control and Automation (MED), 2015 23th Mediterranean Conference
on.

IEEE, 2015, pp. 1059–1064.

[25] M. Papageorgiou, H. Hadj-Salem, and J.-M. Blosseville, “ALINEA:
A local feedback control law for on-ramp metering,” Transportation
Research Record, no. 1320, 1991.

[26] B. S. Kerner, “Trafﬁc congestion, modeling approaches

to,” in
Encyclopedia of Complexity and Systems Science, R. A. Meyers, Ed.
Springer New York, 2009, pp. 9302–9355.

[27] R. K. Ahuja, T. L. Magnanti, and J. B. Orlin, Network Flows: Theory,
Algorithms and Applications. Upper Saddle River, New Jersey 07458:
Prentice Hall, 1993.

[28] H. Neuburger, “The economics of heavily congested roads,” Transporta-

tion Research, vol. 5, no. 4, pp. 283 – 293, 1971.

[29] M. Haklay and P. Weber, “OpenStreetMap: User-generated street maps,”

Pervasive Computing, IEEE, vol. 7, no. 4, pp. 12–18, Oct 2008.

[30] A. V. Goldberg, E. Tardos, and R. E. Tarjan, “Network ﬂow algorithms,”
Cornell University Operations Research and Industrial Engineering,
Tech. Rep., 1989.

[31] T. Leighton, F. Makedon, S. Plotkin, C. Stein,

´E. Tardos, and
S. Tragoudas, “Fast approximation algorithms for multicommodity ﬂow
problems,” Journal of Computer and System Sciences, vol. 50, no. 2,
pp. 228–243, 1995.

[32] A. V. Goldberg, J. D. Oldham, S. Plotkin, and C. Stein, “An
implementation of a combinatorial approximation algorithm for
minimum-cost multicommodity ﬂow,” in Integer Programming and
Combinatorial Optimization, ser. Lecture Notes in Computer Science,
R. Bixby, E. Boyd, and R. Ros-Mercado, Eds.
Springer Berlin
Heidelberg, 1998, vol. 1412, pp. 338–352.

[33] K. T. Seow, N. H. Dang, and D. H. Lee, “A collaborative multiagent
taxi-dispatch system,” IEEE Transactions on Automation Sciences and
Engineering, vol. 7, no. 3, pp. 607–616, 2010.

[34] R. Zhang, F. Rossi, and M. Pavone, “Model predictive control of au-
tonomous mobility-on-demand systems (extended version),” Sep. 2015,
available at http://arxiv.org/abs/1509.03985.

[35] L. R. Ford and D. R. Fulkerson, Flows in Networks.

Princeton

University Press, 1962.

[36] R. M. Karp, “On the computational complexity of combinatorial prob-
lems,” in Networks, Networks (USA), (Proceedings of the Symposium on
Large-Scale Networks, Evanston, IL, USA, 18-19 April 1974.), vol. 5,
no. 1, Jan. 1975, pp. 45–68.

[37] S. Even, A. Itai, and A. Shamir, “On the complexity of timetable and
multicommodity ﬂow problems,” SIAM Journal on Computing, vol. 5,
no. 4, pp. 691–703, 1976.

[38] P. Hart, N. Nilsson, and B. Raphael, “A formal basis for the heuristic de-
termination of minimum cost paths,” Systems Science and Cybernetics,
IEEE Transactions on, vol. 4, no. 2, pp. 100–107, July 1968.

[39] Bureau of Public Roads, “Trafﬁc assignment manual,” U.S. Department
of Commerce, Urban Planning Division, Washington, D.C (1964), Tech.
Rep., 1964.

[40] P. Raghavan and C. D. Tompson, “Randomized rounding: A technique
for provably good algorithms and algorithmic proofs,” Combinatorica,
vol. 7, no. 4, pp. 365–374, 1987.

[41] A. Srinivasan, “A survey of the role of multicommodity ﬂow and
randomization in network design and routing,” American Mathematical
Society, Series in Discrete Mathematics and Theoretical Computer
Science, vol. 43, pp. 271–302, 1999.

ACKNOWLEDGEMENT

The authors would like to thank Zachary Sunberg for his

analysis on the road network symmetry of U.S. cities.

REFERENCES

[1] W. J. Mitchell, C. E. Borroni Bird, and L. D. Burns, Reinventing the
Automobile: Personal Urban Mobility for the 21st Century. Cambridge,
MA: The MIT Press, 2010.

[2] Google, “Just Press Go: Designing a Self-Driving Vehicle.” Tech. Rep.,

2014.

[3] K. Spieser, K. Treleaven, R. Zhang, E. Frazzoli, D. Morton, and
M. Pavone, “Toward a systematic approach to the design and evaluation
of automated mobility-on-demand systems: A case study in Singapore,”
in Lecture Notes in Mobility. Springer, Jun. 2014, pp. 229–245.

[4] M. Pavone, S. L. Smith, E. Frazzoli, and D. Rus, “Robotic load balancing
for mobility-on-demand systems,” International Journal of Robotics
Research, vol. 31, no. 7, pp. 839–854, Jun. 2012.

[5] J. P´erez, F. Seco, V. Milan´es, A. Jim´enez, J. C. D´ıaz, and T. De Pedro,
“An RFID-based intelligent vehicle speed controller using active trafﬁc
signals,” Sensors, vol. 10, no. 6, pp. 5872–5887, 2010.

[6] B. Templeton, “Trafﬁc congestion & capacity,” 2015, available at http:

//www.templetons.com/brad/robocars/congestion.html.

[7] M. Barnard, “Autonomous cars

2016,

Jan.
autonomous-cars-likely-increase-congestion.

available

at

likely to increase congestion,”
http://cleantechnica.com/2016/01/17/

[8] R. Zhang and M. Pavone, “A queueing network approach to the analysis
and control of mobility-on-demand systems,” in American Control
Conference, Chicago, IL, Jul. 2015, pp. 4702–4709.

[9] G. Berbeglia, J.-F. Cordeau, and G. Laporte, “Dynamic pickup and
delivery problems,” European Journal of Operational Research, vol.
202, no. 1, pp. 8–15, 2010.

[10] K. Treleaven, M. Pavone, and E. Frazzoli, “An asymptotically optimal
algorithm for pickup and delivery problems,” in Proc. IEEE Conf. on
Decision and Control, Orlando, FL, Dec. 2011, pp. 584–590.

[11] ——, “Asymptotically optimal algorithms for one-to-one pickup and
delivery problems with applications to transportation systems,” IEEE
Transactions on Automatic Control, vol. 58, no. 9, pp. 2261–2276, Sep.
2013.

[12] ——, “Models and efﬁcient algorithms for pickup and delivery
problems on roadmaps,” in Proc. IEEE Conf. on Decision and Control,
Maui, HI, Dec. 2012, pp. 5691–5698.

[13] J. G. Wardrop, “Some theoretical aspects of road trafﬁc research,” in
ICE Proceedings: Engineering Divisions, vol. 1, no. 3. Thomas Telford,
1952, pp. 325–362.

[14] M. J. Lighthill and G. B. Whitham, “On kinematic waves. I. Flood
movement in long rivers,” in Proceedings of the Royal Society of London
A: Mathematical, Physical and Engineering Sciences, vol. 229, no. 1178.
The Royal Society, 1955, pp. 281–316.

[15] C. F. Daganzo, “The cell transmission model: A dynamic representation
of highway trafﬁc consistent with the hydrodynamic theory,” Transporta-
tion Research Part B: Methodological, vol. 28, no. 4, pp. 269–287, 1994.
[16] B. S. Kerner, Introduction to modern trafﬁc ﬂow theory and control: the
long road to three-phase trafﬁc theory. Springer Science & Business
Media, 2009.

[17] M. Treiber, A. Hennecke, and D. Helbing, “Microscopic simulation of
Springer, 2000,

congested trafﬁc,” in Trafﬁc and Granular Flow 99.
pp. 365–376.

[18] Q. Yang and H. N. Koutsopoulos, “A microscopic trafﬁc simulator
for evaluation of dynamic trafﬁc management systems,” Transportation
Research Part C: Emerging Technologies, vol. 4, no. 3, pp. 113–129,
1996.

[19] M. Balmer, M. Rieser, K. Meister, D. Charypar, N. Lefebvre, K. Nagel,
and K. Axhausen, “MATSim-T: Architecture and simulation times,”
Multi-agent systems for trafﬁc and transportation engineering, pp. 57–
78, 2009.

[20] C. Osorio and M. Bierlaire, “An analytic ﬁnite capacity queueing
network model capturing the propagation of congestion and blocking,”
European Journal of Operational Research, vol. 196, no. 3, pp. 996–
1007, 2009.

[21] S. Peeta and H. S. Mahmassani, “System optimal and user equilibrium
time-dependent trafﬁc assignment in congested networks,” Annals of
Operations Research, vol. 60, no. 1, pp. 81–113, 1995.

[22] B. N. Janson, “Dynamic trafﬁc assignment for urban road networks,”
Transportation Research Part B: Methodological, vol. 25, no. 2, pp.
143–161, 1991.

 =

APPENDIX: PROOFS OF TECHNICAL RESULTS

Proof of Lemma 3.1: We compute the sum over all
customer ﬂows m ∈ M and over all nodes v ∈ V of the
node balance equation for ﬂow m at node v (Equation (3) if
node v is the source of m, Equation (4) if node v is the sink
of m, or Equation (2) otherwise). We obtain

(cid:88)

(cid:88)

v∈S

m∈M

(cid:32)(cid:88)
(cid:88)
(cid:88)

u∈V

(cid:32)(cid:88)

fm(u, v) + 1v=sm λm

(cid:33)

=

(cid:33)

fm(v, w) + 1v=tmλm

.

v∈S

m∈M

w∈V

For any edge (u, v) such that u, v ∈ S, the customer ﬂow
fm(u, v) appears on both sides of the equation. Thus the
equation above simpliﬁes to

(cid:88)

(cid:88)

m∈M

v∈S

u∈ ¯S

(cid:88)
(cid:88)
(cid:88)

m∈M

m∈M

fm(u, v) + 1v=smλm

(cid:88)

(cid:88)

fm(v, w) + 1v=tmλm

 ,

which leads to the claim of the lemma
Fin(S, ¯S) +

v∈S
1sm∈S λm = Fout(S, ¯S) +

w∈ ¯S

(cid:88)

m∈M

1tm∈S λm.

Proof of Lemma 3.2: Adding Equations (2), (3) and (4)
over all nodes in S and over all ﬂows whose origin is in S
and whose destination is in ¯S, one obtains

(cid:88)

(cid:32)(cid:88)
(cid:88)

u∈V

(cid:33)

=

(cid:33)

fm(v, w)

.

fm(u, v) + 1v=sm λm

(cid:32)(cid:88)

w∈V

(cid:88)

v∈S

m:sm∈S,tm∈ ¯S

Flows fm(u, v) such that both u and v are in S appear on
both sides of the equation. Simplifying, one obtains

m:sm∈S,tm∈ ¯S

v∈S

(cid:88)

(cid:88)
(cid:88)

m:sm∈S,tm∈ ¯S

m:sm∈S,tm∈ ¯S



fm(u, v)

v∈S,u∈ ¯S

λm =

v∈S,w∈ ¯S

 (cid:88)
fm(v, w) − (cid:88)
(cid:88)
(cid:88)
≥ (cid:88)

(cid:88)

v∈S,w∈ ¯S

m∈M

m:sm∈S,tm∈ ¯S

v∈S,w∈ ¯S

fm(v, w).

The ﬁrst term on the right-hand side represents a lower bound
for Fout(S, ¯S), since
Fout(S, ¯S) =

fm(v, w)

Furthermore, the second term on the right-hand side is upper-
bounded by zero. The lemma follows.

(cid:88)

1sm∈S λm − (cid:88)

Summing equation (5) over all nodes in S, one easily obtains
in (S, ¯S) − F reb
F reb
1tm∈S λm.
Combining the above equation with Lemma 3.1, one obtains

out (S, ¯S) =

m∈M

m∈M

in (S, ¯S) − F reb
F reb

out (S, ¯S) = Fout(S, ¯S) − Fin(S, ¯S),

in other words, rebalancing ﬂows should make up the dif-
ference between the customer inﬂows and outﬂows across cut
(S, ¯S). Accordingly, the total inﬂow of vehicles across (S, ¯S),
in (S, ¯S), satisﬁes the inequality
F tot
in (S, ¯S) : = Fin(S, ¯S) + F reb
F tot
= Fin(S, ¯S) + F reb
≥ Fout(S, ¯S).
customer
the

in (S, ¯S)
out (S, ¯S) + Fout(S, ¯S) − Fin(S, ¯S)

Since
ﬂows
{fm(u, v), fR(u, v)}(u,v),m are feasible,
then, by equation
in (S, ¯S) ≤ Cin(S, ¯S). Collecting the results, one obtains
(6), F tot
the second condition.
Proof of Lemma 3.6: By contradiction. Since the ﬂow
{ ˆfR(u, v)}(u,v) is not a feasible rebalancing ﬂow, there exists
at least one defective origin or a defective destination. Assume
that there exists at least one defective destination, say a node
ˆtj where Equation (5) is violated:
1ˆtj =tm

ˆfR(u, ˆtj) +

ˆfR(ˆtj, w),

rebalancing

(cid:88)

(cid:88)

(cid:88)

λm >

and

u∈V

m∈M

w∈V

Now, assume that there does not exist any defective origin. By
summing Equation (5) over all nodes v ∈ V and simplifying
all ﬂows ˆfR(u, v) (as they appear on both sides of the resulting
equation), one obtains

(cid:88)
(cid:88)
that is (cid:80)
m∈M λm > (cid:80)

m∈M

v∈V

(cid:88)

(cid:88)

v∈V

m∈M

m∈M λm, which is a contradiction.
Noticing that the symmetric case where we assume that there
exists at least one defective destination leads to an analogous
contradiction, the lemma follows.

Proof of Lemma 3.7: The proof is constructive and
constructs the desired partial rebalancing ﬂow by starting with
the trivial zero ﬂow ˆfR(u, v) = 0 for all (u, v) ∈ E. Let
Vor, def := {ˆs1, . . . , ˆs|Vor, def|} and Vdest, def := {ˆt1, . . . , ˆt|Vdest, def|}
be the set of defective origins and destinations, respectively,
under such ﬂow. Then, the zero ﬂow is iteratively updated
according to the following procedure:
1) Look for a path between a node in Vdest, def and a node
in Vor, def that is not saturated (note that for rebalancing
ﬂows, paths go from destinations to origins). If no such
path exists, quit. Otherwise, go to Step 2.

2) Add the same amount of ﬂow on all edges along the path
until either (i) one of the edges becomes saturated or (ii)
constraint (5) is fulﬁlled either at the defective origin or
at the defective destination. Note that the resulting ﬂow
remains a partial rebalancing ﬂow.
3) Update sets Vor, def and Vdest, def for the new partial rebal-

ancing ﬂow and go to Step 1.

1v=tm λm >

1v=smλm,

Proof of Lemma 3.3: The ﬁrst condition follows trivially
from equation (6). As for the second condition, consider a cut
(S, ¯S). Analogously as for the deﬁnitions of Fin(S, ¯S) and
Fout(S, ¯S), let F reb
out (S, ¯S) denote, respectively,
the overall rebalancing ﬂow entering (exiting) cut (S, ¯S).

in (S, ¯S) and F reb

The algorithm terminates. To show this, we prove the
invariant that if a node is no longer defective for the updated
partial rebalancing ﬂow (in other words, Step 2 ends due to
condition (ii)), it will not become defective at a later stage.
Consider a defective destination node v that becomes non-

the speed limits, and the number of lanes are obtained from
OpenStreetMap data [29].
D(S, ¯S) as

For a cut (S, ¯S), we deﬁne its fractional capacity disparity

D(S, ¯S) := 2

(cid:12)(cid:12)Cout(S, ¯S) − Cin(S, ¯S)(cid:12)(cid:12)

Cout(S, ¯S) + Cin(S, ¯S)

.

Table VI shows the average (over 1000 samples) fractional
capacity disparity for several US urban centers. As expected,
the road networks for such cities appear to posses a very high
degree of capacity-symmetry, which validates the symmetry
assumption made in Section III.

AVERAGE FRACTIONAL CAPACITY DISPARITY FOR SEVERAL MAJOR

URBAN CENTERS IN THE UNITED STATES.

TABLE II

Urban center
Chicago, IL
New York, NY
Colorado Springs, CO
Los Angeles, CA
Mobile, AL
Portland, OR

Avg. frac. capacity disparity

1.2972 ·10−4
1.6556 ·10−4
3.1772 ·10−4
0.9233 ·10−4
1.9368 ·10−4
1.0769 ·10−4

Std. dev.

1.003 · 10−4
1.304 · 10−4
2.308 · 10−4
0.676 · 10−4
1.452 · 10−4
0.778 · 10−4

defective under the updated partial rebalancing ﬂow (the proof
for defective origins is analogous). Then, at the subsequent
stage it cannot be considered as a destination in Step 1 (as it
is no longer in set Vdest, def). If a path that does not contain
v is selected, then v stays non-defective. Otherwise, if a path
that contains v is selected, then, after Step 2, both the inbound
ﬂow (that is the ﬂow into v) and the outbound ﬂow (that is
the ﬂow out of v) will be increased by the same quantity, and
the node will stay non-defective. An induction on the stages
then proves the claim. As the number of paths is ﬁnite, and
sets Vor, def and Vdest, def cannot have any nodes added, the
algorithm terminates after a ﬁnite number of stages.
The output of the algorithm (denoted, with a slight abuse
of notation, as { ˆfR(u, v)}(u,v)) is a partial rebalancing ﬂow
that is not feasible (as, by assumption, there does not exist a
set of feasible rebalancing ﬂows). Therefore, by Lemma 3.6,
such partial rebalancing ﬂow has at least one defective origin
and at least one defective destination. Let us deﬁne Ens := E \
{(u, v) : (u, v) is saturated} as the collection of non-saturated
edges under the ﬂows {fm(u, v)}(u,v),m and { ˆfR(u, v)}(u,v).
For any defective destination and any defective origin, all paths
connecting them contain at least one saturated edge (due to
the exit condition in Step 1). Therefore, the graph Gns(V,Ens)
has two properties: (i) it is disconnected (that is, it is not
possible to ﬁnd a direct path between every pair of nodes
in V by using edges in Ens), and (ii) a defective origin and a
defective destination can not be in the same strongly connected
component (hence, graph Gns(V,Ens) can be partitioned into
at least two strongly connected components).
We now ﬁnd the cut (S, ¯S) as follows. If a strongly
connected component of Gns contains defective destinations,
we assign its nodes to set S. If a strongly connected component
contains defective origins, we assign its nodes to set ¯S. If
a strongly connected component contains neither defective
origins nor destinations, we assign its nodes to S (one could
also assign its nodes to ¯S, but such choice is immaterial for
our purposes). By construction, (S, ¯S) is a cut, and its edges
are all saturated. Furthermore, set S only contains destination
nodes, and set ¯S only contains origin nodes, which concludes
the proof.

APPENDIX: CAPACITY SYMMETRY WITHIN URBAN

CENTERS IN THE US

The existential result in Section III, Theorem 3.5, relies on
the assumption that the road network is capacity-symmetric,
i.e., for every cut (S, ¯S), Cout(S, ¯S) = Cin(S, ¯S). One may
wonder whether this assumption is (approximately) met in
practice. From an intuitive standpoint, one might argue that
transportation networks within urban centers are indeed de-
signed to be capacity symmetric, so as to avoid accumulation
of trafﬁc ﬂow in some directions. We corroborate this intuition
by computing the imbalance between the outbound capacity
(i.e., Cout) and the inbound capacity (i.e., Cin) for 1000
randomly-selected cuts within several urban centers in the
United States. For each edge (u, v) ∈ E, we approximate
its capacity as proportional to the product of the speed limit
vmax(u, v) on that edge and the number of lanes L(u, v), that
is, c(u, v) ∝ vmax(u, v) · L(u, v). The road graph G(V,E),

