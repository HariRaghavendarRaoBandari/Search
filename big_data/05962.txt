6
1
0
2

 
r
a

 

M
8
1

 
 
]

G
L
.
s
c
[
 
 

1
v
2
6
9
5
0

.

3
0
6
1
:
v
i
X
r
a

Journal of Machine Learning Research 1 (2016) 1-19

Submitted 4/00; Published 10/00

Document Neural Autoregressive Distribution Estimation

Stanislas Lauly
D´epartement d’informatique
Universit´e de Sherbrooke
Sherbrooke, Qu´ebec, Canada
Yin Zheng
Hulu LLC.
Beijing, China
Alexandre Allauzen
LIMSI-CNRS
Universit´e Paris Sud
Orsay, France
Hugo Larochelle
D´epartement d’informatique
Universit´e de Sherbrooke
Sherbrooke, Qu´ebec, Canada

Editor: Leslie Pack Kaelbling

STANISLAS.LAULY@USHERBROOKE.CA

YIN.ZHENG@HULU.COM

ALLAUZEN@LIMSI.FR

HUGO.LAROCHELLE@USHERBROOKE.CA

Abstract

We present an approach based on feed-forward neural networks for learning the distribution of
textual documents. This approach is inspired by the Neural Autoregressive Distribution Estimator
(NADE) model, which has been shown to be a good estimator of the distribution of discrete-valued
high-dimensional vectors. In this paper, we present how NADE can successfully be adapted to the
case of textual data, retaining from NADE the property that sampling or computing the probability
of observations can be done exactly and efﬁciently. The approach can also be used to learn deep
representations of documents that are competitive to those learned by the alternative topic modeling
approaches. Finally, we describe how the approach can be combined with a regular neural network
N-gram model and substantially improve its performance, by making its learned representation
sensitive to the larger, document-speciﬁc context.
Keywords: Neural networks, Deep learning, Topic models, Language models, Autoregressive
models

1. Introduction
One of the most common problem addressed by machine learning is estimating the distribution
p(v) of multidimensional data from a set of examples {v(t)}T
t=1. Indeed, good estimates for p(v)
implicitly requires modeling the dependencies between the variables in v, which is required to
extract meaningful representations of this data or make predictions about this data.

The biggest challenge one faces in distribution estimation is the well-known curse of dimen-
sionality. In fact, this issue is particularly important in distribution estimation, even more so than in
other machine learning problems. This is because a good distribution estimator effectively requires
providing an accurate value for p(v) for any value of v (i.e. not only for likely values of v), with

c(cid:13)2016 Stanislas Lauly, Yin Zheng, Alexandre Allauzen and Hugo Larochelle.

LAULY, ZHENG, ALLAUZEN & LAROCHELLE

the number of possible values taken by v growing exponentially as the number of the dimensions
of the input vector v increases.

One example of a model that has been successful at tackling the curse of dimensionality is the
restricted Boltzmann machine (RBM) (Hinton, 2002). The RBM and other models derived from it
(e.g. the Replicated Softmax of Salakhutdinov and Hinton (2009)) are frequently trained as models
of the probability distribution of high-dimensional observations and then used as feature extractors.
Unfortunately, one problem with these models is that for moderately large models, calculating their
estimate of p(v) is intractable. Indeed, this calculation requires computing the so-called partition
function, which normalizes the model distribution. The consequences of this property of the RBM
are that approximations must be taken to train it by maximum likelihood and its estimation of p(v)
cannot be entirely trusted.

In an attempt to tackle these issues of the RBM, the Neural Autoregressive Distribution Esti-
mator (NADE) was introduced by Larochelle and Murray (2011). NADE’s parametrization is in-
spired by the RBM, but uses feed-forward neural networks and the framework of autoregression for
modeling the probability distribution of binary variables in high-dimensional vectors. Importantly,
computing the probability of an observation under NADE can be done exactly and efﬁciently.

In this paper, we describe a variety of ways to extend NADE to model data from text docu-
ments. We start by describing Document NADE (DocNADE), a single hidden layer feed-forward
neural network model for bag-of-words observations, i.e. orderless sets of words. This requires
adapting NADE to vector observations v, where each of element vi represents a word and where
the order of the dimensions is random. Each word is represented with a lower-dimensional, real-
valued embedding vector, where similar words should have similar embeddings. This is in line with
much of the recent work on using feed-forward neural network models to learn word vector em-
beddings (Bengio et al., 2003; Mnih and Hinton, 2007, 2009; Tomas Mikolov, 2013) to counteract
the curse of dimensionality. However, in DocNADE, the word representations are trained to reﬂect
the topics (i.e. semantics) of documents only, as opposed to their syntactical properties, due to the
orderless nature of bags-of-words.

Then, we describe how to train deep versions of DocNADE. First described by Zheng et al.
(2015) in the context of image modeling, here we empirically evaluate them for text documents and
show that they are competitive to alternative topic models, both in terms of perplexity and document
retrieval performances.

Finally, we present how the topic-level modeling ability of DocNADE can be used to obtain a
useful representation of context for language modeling. We empirically demonstrate that by learning
a topical representation of previous sentences, we can improve the perplexity performance of an N-
gram neural language model.

2. Document NADE (DocNADE)
DocNADE is derived from the Neural Autoregressive Distribution Estimation (NADE) that will be
ﬁrst described in this section. Implemented as a feed-forward architecture, it extends NADE to
provide an efﬁcient and meaningful generative model of document bags-of-words.

2.1 Neural Autoregressive Distribution Estimation (NADE)
NADE, introduced in Larochelle and Murray (2011), is a tractable distribution estimator for model-
ing the distribution of high-dimensional vectors of binary variables. Let us consider a binary vector

2

DOCNADE

Figure 1: Illustration of NADE. Colored lines identify the connections that share parameters and

(cid:98)vi is a shorthand for the autoregressive conditional p(vi|v<i). The observations vi are

binary.

of D observations, v ∈ {0, 1}D. The NADE model estimates the probability of this vector by
applying the probability chain rule as follows:

D(cid:89)

p(v) =

p(vi|v<i),

(1)

i=1

where vi denotes the i-th component of v and v<i ∈ {0, 1}i−1 contains the ﬁrst i − 1 components
of v: v<i is the sub-vector [v1, . . . , vi−1](cid:62). The peculiarity of NADE lies in the neural architecture
designed to estimate the conditional probabilities involved in Equation 1. To predict the component
i, the model ﬁrst computes its hidden layer of dimension H

hi(v<i) = g (c + W:,<iv<i) ,

(2)

leading to the following probability model:

p(vi = 1|v<i) = sigm (bi + Vi,:hi(v<i)) .

(3)
In these two equations, sigm(x) = 1/(1 + exp(−x)) denotes the sigmoid activation function while
function g(·) could be any activation function, though Larochelle and Murray (2011) also used
the sigmoid function. W ∈ RH×D and V ∈ RD×H are the parameter matrices along with the
associated bias terms b ∈ RD and c ∈ RH, with W:,<i being a matrix made of the i − 1 ﬁrst
columns of W.

Instead of a single projection of the input vector, the NADE model relies on a set of separate
hidden layers hi(v<i) that each represent the previous inputs in a latent space. The connections
between input dimension vi and each hidden layer hi(v<i) are tied as shown in ﬁgure 1, allowing
the model to compute all the hidden layers for one input in O(DH). The parameters {b, c, W, V}
are learned by minimizing the average negative log-likelihood using stochastic gradient descent.

2.2 From NADE to DocNADE
The Document NADE model (DocNADE) aims at learning meaningful representations of texts from
an unlabeled collection of documents. This model embeds, like NADE, a set of hidden layers. Their

3

LAULY, ZHENG, ALLAUZEN & LAROCHELLE

role is to capture salient statistical patterns in the co-occurrence of words within documents and can
be considered as modeling hidden topics.
To represent a document, the vector v is now a sequence of arbitrary size D. Each element
of v corresponds to a multinomial observation over a ﬁxed vocabulary of size V . Therefore vi ∈
{1, ..., V } represents the index in the vocabulary of the i-th word of the document. For now, we’ll
assume that an ordering for the words is given, but we will discuss the general case of orderless
bags-of-words in Section 2.3.

The main approach taken by DocNADE is similar to NADE, but differs signiﬁcantly in the
design of parameter tying. The probability of a document v is estimated using the probability chain
rule, but the architecture is modiﬁed to cope with large vocabularies. Each word observation vi of
the document v leads to a hidden layer hi, which represents the past observations v<i. This hidden
layer is computed as follows:

(cid:32)

(cid:88)

(cid:33)

hi(v<i) = g

c +

W:,vk

,

(4)

k<i

where each column of the matrix W acts as a vector of size H that represents a word. The embed-
ding of the ith word in the document is thus the column of index vi in the matrix W.

Notice that by sharing the word representation matrix across positions in the document, each
hidden layer hhi(v<i) is in fact independent of the order of the words within v<i. The implications
of this choice is that the learned hidden representation will not model the syntactic structure of the
documents and focus on its document-level semantics, i.e. its topics.

It is also worth noticing that we can compute hi+1 recursively by keeping track of the pre-

activation of the previous hidden layer hi as follows:

W:,vi + c +

(cid:124)

(cid:88)
(cid:123)(cid:122)

k<i

W:,vk

(cid:125)

Precomputed for hi(v<i)



hi+1(v<i+1) = g

(5)

The weight sharing between hidden layers enables us to compute all hidden layers hi(v<i) for a
document in O(DH).
Then, to compute the probability of a full document p(v), we need to estimate all conditional
probabilities p(vi|v<i). A straightforward solution would be to compute each p(vi|v<i) using soft-
max layers with a shared weight matrix and bias, each fed with the corresponding hidden layer hi.
However, the computational cost of this approach is prohibitive, since it scales linearly with the
vocabulary size1.To overcome this issue, we represent distribution over the vocabulary by a proba-
bilistic binary tree, where the leaves correspond to the words. This approach is widely used in the
ﬁeld of neural probabilistic language models (Morin and Bengio, 2005; Mnih and Hinton, 2009).
Each word is represented by a path in the tree, going from the root to the leaf associated to that
word. A binary logistic regression unit is associated to each node in the tree and gives the probabil-
ity of the binary choice, going left or right. Therefore, a word probability can be estimated by the
path’s probability in this tree, resulting in a complexity in O(log V ) for trees that are balanced. In

1. For most natural language processing task, the vocabulary size exceeds 10, 000.

4

DOCNADE

Figure 2: Illustration of DocNADE. Connections between each multinomial observation vi and hid-
den units are also shared, and each conditional p(vi|v<i) is decomposed into a tree of
binary logistic regressions.

our experiments, we used a randomly generated full binary tree with V leaves, each assigned to a
unique word of the vocabulary. An even better option would be to derive the tree using Hoffman
coding, which would reduce even more the average path lengths.

More formally, let’s denote by l(vi) the sequence of nodes composing the path, from the root of
the tree to the leaf corresponding to word vi. Then, π(vi) is the sequence of left/right decisions of
the nodes in l(vi). For example, the root of the tree is always the ﬁrst element l(vi)1 and the value
π(vi)1 will be 0 if the word is in the left sub-tree and 1 if it is in the right sub-tree. The matrix V
stores by row the weights associated to each logistic classiﬁer. There is one logistic classiﬁer per
node in the tree. Let Vl(vi)m,: and bl(vi)m be the weights and bias for the logistic unit associated to
the node n(vi)m. The probability p(vi|v<i) given the tree and the hidden layer hi(v<i) is computed
with the following formulas:

p(vi = w|v<i) =

p(π(vi)m|v<i), with

p(π(vi)m = 1|v<i) = sigm(cid:0)bl(vi)m + Vl(vi)m,:hi(v<i)(cid:1) .

m=1

(6)

(7)

This hierarchical architecture allows us to efﬁciently compute the probability for each word in a
document and therefore the probability of every documents with the probability chain rules (see
Equation 1). As in the NADE model, the parameters of the model {b, c, W, V} are learnt by
minimizing the negative log-likelihood using stochastic gradient descent.

Since there is log(V ) logistic regression units for a word (one per node), each of them has a
time complexity of O(H), the complexity of computing the probability for a document of D words
is in O(log(V )DH).

As for using DocNADE to extract features from a complete document, we propose to use

|π(vi)|(cid:89)

h(v) = hD+1(v<D+1) = g

c +

W:,vk

(8)

(cid:32)

D(cid:88)

(cid:33)

k=1

5

LAULY, ZHENG, ALLAUZEN & LAROCHELLE

which would be the hidden layer computed to obtain the conditional probability of a D + 1th word
appearing in the document.

2.3 Training from bag-of-word counts
So far, we have assumed that the ordering of the words in the document is known. However,
document datasets often take the form of word-count vectors in which the original word order,
required to specify the sequence of conditionals p(vi|v<i), has been lost.

Thankfully, it is still possible to successfully train DocNADE despite the absence of this infor-
mation. The idea is to assume that each observed document v was generated by initially sampling

a seed document(cid:101)v from DocNADE, whose words were then shufﬂed using a randomly generated

ordering to produce v. With this approach, we can express the probability distribution of v by
computing the marginal over all possible seed document:

(cid:88)
(cid:101)v∈V(v)

p(v,(cid:101)v) =

(cid:88)
(cid:101)v∈V(v)

p(v|(cid:101)v)p((cid:101)v)

p(v) =

(9)

(10)

where p((cid:101)v) is modeled by DocNADE,(cid:101)v is the same as the observed document v but with a different
(random) word sequence order and V(v) is the set of all the documents(cid:101)v that have the same word
count n(v) = n((cid:101)v). With the assumption of orderings being uniformly sampled, we can replace
p(v|(cid:101)v) with

1|V(v)| giving us:

(cid:88)
(cid:101)v∈V(v)

p(v) =

|V(v)| p((cid:101)v) =

1

1

|V(v)|

(cid:88)
(cid:101)v∈V(v)

p((cid:101)v) .

In practice, one approach to training the DocNADE model over (cid:101)v is to artiﬁcially generate

ordered documents by uniformly sampling words, without replacement, from the bags-of-words in
the dataset. This would be equivalent to taking each original document and shufﬂing the order of
its words. This approach can be shown to optimize a stochastic upper bound on the actual negative
log-likelihood of documents. As we’ll see, experimental results show that convincing performance
can still be reached.

With this training procedure, DocNADE shows its ability to learn and predict a new word in a
document at a random position while preserving the overall semantic properties of the document.
The model is therefore learning not to insert intruder words, i.e. words that do not belong with the
others. After training, a document’s learned representation should contain valuable information to
identify intruder words for this document. It’s interesting to note that the detection of such intruder
words has been used previously as a task in user studies to evaluate the quality of the topics learned
by LDA, though at the level of single topics and not whole documents (Chang et al., 2009).

3. Deep Document NADE
The single hidden layer version of DocNADE already achieves very competitive performance for
topic modeling (Larochelle and Lauly, 2012). Extending it to a deep, multiple hidden layer archi-
tecture could however allow for even better performance, as suggested by the recent and impres-
sive success of deep neural networks. Unfortunately, deriving a deep version of DocNADE that
is practical cannot be achieved solely by adding hidden layers to the deﬁnition of the conditionals

6

DOCNADE

p(vi = 1|v<i). Indeed, computing p(v) requires computing each p(vi = 1|v<i) conditional (one
for each word), and it is no longer possible to exploit Equation 5 to compute the sequence of all
hidden layers in O(DH) when multiple deep hidden layers are used.

In this section, we describe an alternative training procedure that enables us the introduction of
multiple stacked hidden layers. This procedure was ﬁrst introduced in Zheng et al. (2015) to model
images, which was itself borrowing from the training scheme introduced by Uria et al. (2014).

As mentioned in section 2.3, DocNADE can be trained on random permutations of the words
from training documents. As noticed by Uria et al. (2014), the use of many orderings during training
can be seen as the instantiation of many different DocNADE models that share a single set of
parameters. Thus, training DocNADE with random permutations also amounts to minimizing the
negative log-likelihood averaged across all possible orderings, for each training example v.

In the context of deep NADE models, a key observation is that training on all possible orderings
implies that for a given context v<i, we wish the model to be equally good at predicting any of the
remaining words appearing next, since for each there is an ordering such that they appear at position
i. Thus, we can redesign the training algorithm such that, instead of sampling a complete ordering
of all words for each update, we instead sample a single context v<i and perform an update of the
conditionals using that context. This is done as follows. For a given document, after generating
vector v by shufﬂing the words from the document, a split point i is randomly drawn. From this
split point results two parts of the document: v<i and v≥i. The former is considered as the input
and the latter contains the targets to be predicted by the model. Since in this setting a training
update relies on the computation of a single latent representation, that of v<i for the drawn value of
i, deeper hidden layers can be added at a reasonable increase in computation.
Thus, in DeepDocNADE the conditionals p(vi|v<i) are modeled as follows. The ﬁrst hidden

layer h(1)(v<i) represents the conditioning context v<i as in the single hidden layer DocNADE:

(cid:16)

c(1) +(cid:80)

(cid:17)

= g(cid:0)c(1) + W(1)x (v<i)(cid:1)

h(1) (v<i) = g

k<i W(1)
:,vk

(11)

where x (v<i) is the histogram vector representation of the word sequence v<i, and the exponent is
used as an index over the hidden layers and its parameters, with (1) referring to the ﬁrst layer. We
can now easily add new hidden layers as in a regular deep feed-forward neural network:

h(n)(v<i) = g(c(n) + W (n)h(n−1)(v<i)),

(12)

for n = 2, . . . , N, where N is the total number of hidden layers. From the last hidden layer hN , we
can ﬁnally compute the conditional p(vi = w|v<i), for any word w.

Finally, the loss function used to update the model for the given context v<i is:

(cid:88)

w∈v≥i

L(v) =

Dv

Dv − i + 1

− log p(vi = w|v<i),

(13)

where Dv is the number of words in v and the sum iterates over all words w present in ∈ v≥i. Thus,
as described earlier, the model predicts each remaining word after the splitting position i as if it was
actually at position i. The factors in front of the sum comes from the fact that the complete log-
likelihood would contain Dv log-conditionals and that we are averaging over Dv − i + 1 possible

7

LAULY, ZHENG, ALLAUZEN & LAROCHELLE

choices for the word ordered at position i. For a more detailed presentation, see Zheng et al. (2015).
The average loss function of Equation 13 is optimized with stochastic gradient descent2.
Note that to compute the probabilities p(vi = w|v<i), a probabilistic tree could again be used.
However, since all probabilities needed for an update are based on a single context v<i, a single
softmax layer is sufﬁcient to compute all necessary quantities. Therefore the computational burden
of a conventional softmax is not as prohibitive as for DocNADE, especially with an efﬁcient im-
plementation on the GPU. For this reason, in our experiments with DeepDocNADE we opted for a
regular softmax.

4. DocNADE Language Model

While topic models such as DocNADE can be useful to learn topical representations of documents,
they are actually very poor models of language. In DocNADE, this is due to the fact that, when
assigning a probability to the next word in a sentence, DocNADE actually ignores in which order
the previously observed words appeared. Yet, this ordering of words conveys a lot of information
regarding the most likely syntactic role of the next word or the ﬁner semantics within the sentence.
In fact, most of that information is predictable from the last few words, which is why N-gram
language models remain the dominating approach to language modeling.

In this section, we propose a new model that extends DocNADE to mitigate the inﬂuence of both
short and long term dependencies in a single model, which we refer to as the DocNADE language
model or DocNADE-LM. The solution we propose enhances the bag-of-word representation of a
word’s history with the explicit inclusion of n-gram dependencies for each word to predict.

The ﬁgure 3 depicts the overall architecture. This model can be seen as an extension of the
seminal work on neural language models of Bengio et al. (2003) that includes a representation of
a document’s larger context. It can also be seen as a neural extension of the cache-based language
model introduced in (Kuhn and Mori, 1990), where the n-gram probability is interpolated with the
word distribution observed in a dynamic cache. This cache of a ﬁxed size keeps track of previ-
ously observed words to include long term dependencies in the prediction and preserve semantic
consistency beyond the scope of the n-gram. In our case, the DocNADE language model main-
tains an unbounded cache and deﬁne a proper, jointly trained solution to mitigate these two kinds of
dependencies.

As in DocNADE, a document v is modeled as a sequence of multinomial observations. The
sequence size is arbitrary and each element vi consists in the index of the i-th word in a vocabulary
of size V . The conditional probability of a word given its history p(vi|v<i) is now expressed as a
smooth function of a hidden layer hi(v<i) used to predict word vi. The peculiarity of the DocNADE
language model lies in the deﬁnition of this hidden layer, which now includes two terms:

hi(v<i) = g(b + hDN

i

(v<i) + hLM

i

(v<i)).

(14)

2. A document is usually represented as bag-of-words. Generating a word vector v from its bag-of-words, shufﬂing
the word count vector v, splitting it, and then regenerating the histogram x (v<i) and x (v≥i) is unfortunately fairly
inefﬁcient for processing samples in a mini-batch fashion. Hence, in practice, we split the original histogram x (v)
directly by uniformly sampling, for each word individually, how many are put on the left of the split (the others are
put on the right of the split). This procedure, used also by Zheng et al. (2015), is only an approximation of the correct
procedure mentioned in the main text, but produces a substantial speedup while also yielding good performance.
Thus, we used it also in this paper.

8

DOCNADE

Figure 3: Illustration of the conditional p(vi|v<i) in a trigram NADE language model. Compared to
DocNADE, this model incorporates the architecture of a neural language model, that ﬁrst
maps previous words (2 for a trigram model) to vectors using an embedding matrix WLM
before connecting them to the hidden layer using regular (untied) parameter matrices (U1,
U2 for a trigram). In our experiments, each conditional p(vi|v<i) exploits decomposed
into a tree of logistic regressions, the hierarchical softmax.

The ﬁrst term borrows from the DocNADE model by aggregating embeddings for all the previous
words in the history:

i

In this formula, the history for the word vi is restricted to the n − 1 preceding words, following
hence represents the continuous representation of
the common n-gram assumption. The term hLM
these n − 1 words, in which word embeddings are linearly transformed by the ordered matrices
U1, U2, ..., Un−1. Moreover, b gathers the bias terms for the hidden layer. In this model, two
sets of word embeddings are deﬁned, WDN and WLM, which are respectively associated to the
DocNADE and neural language model parts. For simplicity, we assume both are of the same size
H.
Given hidden layer hi(v<i), conditional probabilities p(vi|v<i) can be estimated, and thus p(v).
For the aforementioned reason, the output layer is structured for efﬁcient computations. Speciﬁcally,
we decided to use a variation of the probabilistic binary tree, known as a hierarchical softmax layer.
In this case, instead of having binary nodes with multiple levels in the tree, we have only two
levels where all words have their leaf at level two and each node is a multiclass (i.e. softmax)
logistic regression with roughly
V classes (one for each children). Computing probabilities in
such a structured layer can be done using only two matrix multiplications, which can be efﬁciently
computed on the GPU.

√

The second contribution derives from neural n-gram language models as follows:

hDN

i

(v<i) =

WDN
:,vk

.

hLM

i

(v<i) =

Uk · WLM
:,vi−k

.

(15)

(16)

(cid:88)

k<i

n−1(cid:88)

k=1

9

wi-2…w1w2……U2U1wi-1hiDNhiLM+^wiwiWDNWLMLAULY, ZHENG, ALLAUZEN & LAROCHELLE

Figure 4: Replicated Softmax model. Each multinomial observation vi is a word. Connections

between each multinomial observation vi and hidden units are shared.

With a hidden layer of size H, the complexity of computing the softmax at one node is O(H

√
V ).
If we have D words in a given document, the complexity of computing all necessary probabili-
ties from the hidden layers is thus O(DH
V ). It also requires O(DH) computations to com-
pute the hidden representations for the DocNADE part and O(nH 2) for the language model part.
The full complexity for computing p(v) and the updates for the parameters are thus computed in
O(DH

√

√

V + DH + nH 2).

Once again, the loss function of the model is the negative log-likelihood and we minimize
it by using stochastic gradient descent over documents, to learn the values of the parameters
{b, c, V, WLM, WDN, U1, ..., Un}.

5. Related Work

Much like NADE was inspired by the RBM, DocNADE can be seen as related to the Replicated
Softmax model (Salakhutdinov and Hinton, 2009), an extension of the RBM to document mod-
eling. Here, we describe in more detail the Replicated Softmax, along with its relationship with
DocNADE.

Much like the RBM, the Replicated Softmax models observations using a latent, stochastic
binary layer h. Here, the observations are the documents v, which interact with the hidden layer h
through an energy function similar to RBM’s:

E(v, h) = −D c(cid:62)h +

D(cid:88)

i=1

−h(cid:62)W:,vi − bvi = −D c(cid:62)h − h(cid:62)Wn(v) − b(cid:62)n(v),

(17)

where n(v) is a bag-of-word vector of size V (the size of the vocabulary) containing the word count
of each word in the vocabulary for document v. h is the stochastic, binary hidden layer vector and
W:,vi is the vth
i column vector of matrix W. c and b are the bias vectors for the visible and the
hidden layers. We see here that the larger v is, the bigger the number of terms in the sum over
i is, resulting in a high energy value. For this reason, the hidden bias term c(cid:62)h is multiplied by
D, to be commensurate with the contribution of the visible layer.. We can see also that connection
parameters are shared across different positions i in v, as illustrated by ﬁgure 4).

10

DOCNADE

(cid:88)

(cid:21)

The conditional probabilities of the hidden and the visible layer factorize much like in the RBM,

in the following way:

p(h|v) =

(cid:89)

where the factors p(hj|v) and p(vi|h) are such that

j

D(cid:89)

i=1

p(hj|v) ,

p(v|h) =

p(vi|h)

(18)

(19)

p(hj = 1|v) = sigm(Dcj +

(cid:80)

i

Wjvi)
exp(bw + h(cid:62)W:,w)
w(cid:48) exp(bw(cid:48) + h(cid:62)W:,w(cid:48))

p(vi = w|h) =

(20)
The normalized exponential part in p(vi = w|h) is simply the softmax function. To train this
model, we’d like to minimize the negative log-likelihood (NLL). Its gradients for a document v(t)
with respect to the parameters θ = {W, c, b} are calculated as follows:

∂ − log p(v(t))

∂θ

= EEh|v(t)

(cid:20) ∂

∂θ

E(v(t), h)

− EEv,h

E(v, h)

.

(21)

(cid:20) ∂

∂θ

(cid:21)

As with conventional RBMs, the second expectation in Equation 21 is computationally too expen-
sive. The gradient of the negative log-likelihood is therefore approximated by replacing the second
expectation with an estimated value obtained by contrastive divergence (Hinton, 2002). This ap-
proach consists of performing K steps of blocked Gibbs sampling, starting at v(t) and using Equa-
tions 19 and 20, to obtain point estimates of the expectation over v. Large values of K must be
used to reduce the bias of gradient estimates and obtain good estimates of the distribution. This
approximation is used to perform stochastic gradient descent.
During Gibbs sampling, the Replicated Softmax model must compute and sample from p(vi =
w|h), which requires the computation of a large softmax. Most importantly, the computation of the
softmax most be repeated K times for each update, which can be prohibitive, especially for large
vocabularies. Unlike DocNADE, this softmax cannot simply be replaced by a structured softmax.
It is interesting to see that DocNADE is actually related to how the Replicated Softmax approx-
imates, through mean-ﬁeld inference, the conditionals p(vi = w|v<i). Computing the conditional
p(vi = w|v<i) with the Replicated Softmax is intractable. However, we could use mean-ﬁeld
inference to approximate the full conditional p(vi, v>i, h|v<i) as the factorized

q(vi, v>i, h|v<i) =

q(vk|v<i)

q(hj|v<i) ,

(22)

(cid:89)

k≥i

(cid:89)

j

where q(vk = w|v<i) = µkw(i) and q(hj = 1|v<i) = τj(i). We would ﬁnd the parameters
µkw(i) and τj(i) that minimize the KL divergence between q(vi, v>i, h|v<i) and p(vi, v>i, h|v<i)
by applying the following message passing equations until convergence:

τj(i) ← sigm

D cj +
V(cid:88)
(cid:88)
µkw(i) ← exp(bw +(cid:80)
w(cid:48) exp(bw(cid:48) +(cid:80)
(cid:80)

k≥i

Wjw(cid:48)µkw(cid:48)(i) +

Wjvk

w(cid:48)=1
j Wjwτj(i))

j Wjw(cid:48)τj(i))

k<i

.

(cid:88)

 ,

(23)

(24)

11

LAULY, ZHENG, ALLAUZEN & LAROCHELLE

with k ∈ {i, . . . , D}, j ∈ {1, . . . , H} and w ∈ {1, . . . , V }. The conditional p(vi = w|v<i) could
then be estimated with µkw(i) for all i. We note that one iteration of mean-ﬁeld (with µkw(cid:48)(i)
initialized to 0) in the Replicated Softmax corresponds to the conditional p(vi = w|v<i) computed
by DocNADE with a single hidden layer and a ﬂat softmax output layer.

In our experiment, we’ll see that DocNADE compares favorably to Replicated Softmax.

6. Topic modeling experiments

To compare the topic models, two kinds of quantitative comparisons are used. The ﬁrst one evaluates
the generative ability of the different models, by computing the perplexity of held-out texts. The
second one compares the quality of document representations for an information retrieval task.

Two different datasets are used for the experiments of this section, 20 Newsgroups and RCV1-
V2 (Reuters Corpus Volume I). The 20 Newsgroups corpus has 18,786 documents (postings) par-
titioned into 20 different classes (newsgroups). RCV1-V2 is a much bigger dataset composed of
804,414 documents (newswire stories) manually categorized into 103 classes (topics). The two
datasets were preprocessed by stemming the text and removing common stop-words. The 2,000
most frequent words of the 20 Newsgroups training set and the 10,000 most frequent words of the
RCV1-V2 training set were used to create the dictionary for each dataset. Also, every word counts
ni, used to represent the number of times a word appears in a document was replaced by log(1 + ni)
rounded to the nearest integer, following Salakhutdinov and Hinton (2009).

6.1 Generative Model Evaluation

For the generative model evaluation, we follow the experimental setup proposed by Salakhutdinov
and Hinton (2009) for 20 Newsgroups and RCV1-V2 datasets. We use the exact same split for
the sake of comparison. The setup consists in respectively 11,284 and 402,207 training examples
for 20 Newsgroups and RCV1-V2. We randomly extracted 1,000 and 10,000 documents from the
training sets of 20 Newsgroups and RCV1-V2, respectively, to build a validation set. The average
perplexity per word is used for comparison. This perplexity is estimated using the 50 ﬁrst test
documents, as follows:

(cid:32)

(cid:88)

t

exp

− 1
T

1
|vt| log p(vt)

(cid:33)

,

(25)

where T is the total number of examples and vt is the tth test document3.

Table 1 gathers the perplexity per word results for 20 Newsgroups and RCV1-V2. Theere we
compare 5 different models: the Latent Dirichlet Allocation (LDA) (Blei et al., 2003), the Repli-
cated Softmax, the recent fast Deep AutoRegressive Networks (fDARN) (Mnih and Gregor, 2014),
DocNADE and DeepDocNADE (DeepDN in the table). Each model uses 50 latent topics. For
the experiments with DeepDocNADE, we provide the performance when using 1, 2, and 3 hidden
layers. As shown in Table 1, DeepDocNADE provides the best generative performances. Our best

3. Note that there is a difference between the sizes, for the training sets and test sets of 20 Newsgroups and RCV1-V2
reported in this paper and the one reported in the original data paper of Salakhutdinov and Hinton (2009). The correct
values are the ones given in this section, which was conﬁrmed after personal communication with Salakhutdinov and
Hinton (2009).

12

DOCNADE

Dataset

20 News
RCV1-v2

LDA

1091
1437

Replicated
Softmax

953
988

fDARN DocNADE

917
724

896
742

DeepDN DeepDN DeepDN
(1layer)
(3layer)

(2layer)

835
579

877
552

923
539

Table 1: Test perplexity per word for models with 50 topics. The results for LDA and Replicated

Softmax were taken from Salakhutdinov and Hinton (2009).

DeepDocNADE models were trained with the Adam optimizer (Kingma and Ba, 2014) and with the
tanh activation function. The hyper-parameters of Adam were selected on the validation set.

Crucially, following Uria et al. (2014), an ensemble approach is used to compute the proba-
bility of documents, where each component of the ensembles are the same DeepDocNADE model
evaluated on a different word ordering. Speciﬁcally, the perplexity with M ensembles becomes as
follows:

(cid:33)(cid:33)

(cid:32)

(cid:88)

t

(cid:32)

(cid:88)

m

exp

− 1
T

1
|vt| log

1
M

p(v(t,m))

,

(26)

where T is the total number of examples, M is the number of ensembles (word orderings) and v(t,m)
denotes the mth word ordering for the tth documnet. We try M = {1, 2, 4, 16, 32, 64, 128, 256},
with the results in Table 1 using M = 256. For the 20 Newsgroups dataset, adding more hidden
layers to DocDocNADE fails to provide further improvements. We hypothesize that the relatively
small size of this dataset makes it hard to successfully train a deep model. However, the oppo-
site is observed on the RCV1-V2 dataset, which is more than an order of magnitude larger than
20 Newsgroups. In this case, DeepDocNADE outperforms fDARN and DocNADE, with a relative
perplexity reduction of 20%, 24% and 26% with respectively 1,2 and 3 hidden layers.

To illustrate the impact of M on the performance of DeepDocNADE, Figure 5 shows the per-
plexity on both datasets using the different values for M that we tried. We can observe that beyond
M = 128, this hyper-parameter has only a minimal impact on the perplexity.

6.2 Document Retrieval Evaluation
A document retrieval evaluation task was also used to evaluate the quality of the document repre-
sentation learned by each model. As in the previous section, the datasets under consideration are
20 Newsgroups and RCV1-V2. The experimental setup is the same for the 20 Newsgroups dataset,
while for the RCV1-V2 dataset, we reproduce the same setup as the one used in Srivastava et al.
(2013), where the training set contained 794,414 examples and 10,000 examples constituted the test
set.

For DocNADE and DeepDocNADE, the representation of a document is obtained simply by

computing the top-most hidden layer when feeding all words as input.

The retrieval task follows the setup of Srivastava et al. (2013). The documents in the training and
validation sets are used as the database for retrieval, while the test set is used as the query set. The
similarity between a query and all examples in the database is computed using the cosine similarity
between their vector representations. For each query, documents in the database are then ranked
according to this similarity, and precision/recall (PR) curves are computed, by comparing the label

13

LAULY, ZHENG, ALLAUZEN & LAROCHELLE

Figure 5: Perplexity obtained with different numbers of word orderings m for 20 Newsgroups on

the left and RCV1-V2 on the right.

of the query documents with those of the database documents. Since documents sometimes have
multiple labels (speciﬁcally those in RCV1-V2), for each query the PR curves for each of its labels
are computed individually and then averaged. Finally, we report the global average of these (query-
averaged) curves to compare models against each other. Training and model selection is otherwise
performed as in the generative modeling evaluation.

As shown in Figure 6, DeepDocNADE always yields very competitive results, on both datasets,
and outperforming the other models in most cases. Speciﬁcally, for the 20 Newsgroups dataset,
DeepDocNADE with 2 and 3 hidden layers always perform better than the other methods. Deep-
DocNADE with 1 hidden layer also performs better than the other baselines when retrieving the top
few documents ( e.g. when recall is smaller than 0.2).

6.3 Qualitative Inspection of Learned Representations
In this section, we want to assess if the DocNADE approach for topic modeling can capture mean-
ingful semantic properties of texts.

First, one way to explore the semantic properties of trained models is through their learned word
embeddings. Each of the columns of the matrix W represents a word w where W:,w is the vector
representation of w. Table 3 shows for some chosen words the ﬁve nearest words according to their
embeddings, foro a DocNADE model. We can observe for each example the semantic consistency
of the word representations. Similar results can be observed for DeepDocNADE models.

We’ve also attempted to measure whether the hidden units of the ﬁrst hidden layer of DocNADE
and DeepDocNADE models modeled distinct topics. Understanding the function represented by
hidden units in neural networks is not a trivial affair, but we considered the following, simple ap-
proach. For a given hidden unit, its connections to words were interpreted as the importance of
the word for the associated topic. Therefore, for a hidden unit, we selected the words having the
strongest positive connections, i.e. for the ith hidden unit we chose the words w that have the highest
connection values Wi,w.

With this approach, four topics were obtained from a DocNADE model using the sigmoid acti-
vation function and trained on 20 Newsgroups, as shown in Table 3 and can be readily interpreted

14

050100150200250300Number of Ensembles80085090095010001050PerplexityDeepDocNADE(1 hidden layers)DeepDocNADE(2 hidden layers)DeepDocNADE(3 hidden layers)050100150200250300Number of Ensembles520540560580600620640PerplexityDeepDocNADE(1 hidden layers)DeepDocNADE(2 hidden layers)DeepDocNADE(3 hidden layers)DOCNADE

20 NewsGroups

Reuters RCV1-V2

Figure 6: Precision-Recall curves for document retrieval task. On the left are the results using a

hidden layer size of 128, while the plots on the right are for a size of 512.

weapons medical
weapon
treatment
medecine
shooting
patients
ﬁrearms
assault
process
studies
armed

companies
demand
commercial
agency
company
credit

deﬁne
deﬁned
deﬁnition
refer
make
examples

israel
israeli
israelis
arab
palestinian
arabs

book
reading
read
books
relevent
collection

windows
dos
microsoft
version
ms
pc

Table 2: The ﬁve nearest neighbors in the word representation space learned by DocNADE.

as topics representing religion, space, sports and security. Note that those four topics are actually
(sub)categories in 20 Newsgroups.

That said, we’ve had less success understanding the topics extracted when using the tanh acti-
vation function or when using DeepDocNADE. It thus seems that these models are then choosing

15

0.0010.0020.0050.010.020.050.10.20.51.0Recall0.00.10.20.30.40.50.60.7PrecisionLDADocNADEReplicated SoftmaxOver-Replicated SoftmaxDeepDocNADE-1layerDeepDocNADE-2layersDeepDocNADE-3layers0.0010.0020.0050.010.020.050.10.20.51.0Recall0.00.10.20.30.40.50.60.70.8PrecisionLDADocNADEReplicated SoftmaxOver-Replicated SoftmaxDeepDocNADE-1layerDeepDocNADE-2layersDeepDocNADE-3layers0.00010.00050.0020.010.050.21.0Recall0.000.050.100.150.200.250.300.350.400.45PrecisionLDADocNADEReplicated SoftmaxOver-Replicated SoftmaxDeepDocNADE-1layerDeepDocNADE-2layersDeepDocNADE-3layers0.00010.00050.0020.010.050.21.0Recall0.000.050.100.150.200.250.300.350.400.45PrecisionLDADocNADEReplicated SoftmaxOver-Replicated SoftmaxDeepDocNADE-1layerDeepDocNADE-2layersDeepDocNADE-3layersLAULY, ZHENG, ALLAUZEN & LAROCHELLE

jesus
atheism

christianity

christ
athos
atheists
bible

christians

sin

atheist

Hidden unit topics
season
shuttle
orbit
players
lunar

nhl

spacecraft

nasa
space
launch
saturn
billion
satellite

league
braves
playoffs
rangers
hockey
pitching

team

encryption

escrow

pgp
crypto

nsa

rutgers
clipper
secure

encrypted

keys

Table 3: Illustration of some topics learned by DocNADE. A topic i is visualized by picking the 10

words w with strongest connection Wiw.

to learn a latent representation that isn’t aligning its dimensions with concepts that are easily inter-
pretable, even though it is clearly capturing well the statistics of documents (since our qualitative
results with DeepDocNADE are excellent).

7. Language Modeling Experiments

In this section, we test whether our proposed approach to incorporating a DocNADE component to
a neural language model can improve the performance of a neural language model. Speciﬁcally, we
considered treating a text corpus as a sequence of documents. We used the APNews dataset, as pro-
vided by Mnih and Hinton (2009). Unfortunately, information about the original segmentation into
documents of the corpus wasn’t available in the data as provided by Mnih and Hinton (2009), thus
we simulated the presence of documents by grouping one or more adjacent sentences, for train-
ing and evaluating DocNADE-LM, making sure the generated documents were non-overlapping.
Thankfully, this approach still allows us to test whether DocNADE-LM is able to effectively lever-
age the larger context of words in making its predictions.

Since language models are generative models, the perplexity measured on some held-out texts
provides an intrinsic and widely used evaluation criterion. Following Mnih and Hinton (2007) and
Mnih and Hinton (2009), we used the APNews dataset containing Associated Press news stories
from 1995 and 1996. The dataset is again split into training, validation and test sets, with respec-
tively 633,143, 43,702 and 44,601 sentences. The vocabulary is composed of 17,964 words. A 100
dimensional feature vectors are used for these experiments. The validation set is used for model
selection and the perplexity scores of Table 4 are computed on the test set.

The FFN model in Table 4 corresponds to a regular neural (feed-forward) network language
model. It is equivalent to setting hDN
(v<i) to zero in Equation 14. These results are meant to
measure whether the DocNADE part of DocNADE-LM can indeed help to improve performances.
We also compare to the log-bilinear language (LBL) model of Mnih and Hinton (2007)). While
for the FFN model we used a hierarchical softmax to compute the conditional word probabilities (see
Section 4), the LBL model uses a full softmax output layer that uses the same word representation
matrix at the input and output. This latter model is therefore slower to train. Later, Mnih and

i

16

DOCNADE

Number of grouped sentences

Perplexity

-
-
-
-
-
1
2
3
4
5

123.2
123.5
117.0
112.1
119.78
111.93
110.9
109.8
109.78
109.22

Models
KN5
KN6
LBL
HLBL
FFN
DocNADE-LM
DocNADE-LM
DocNADE-LM
DocNADE-LM
DocNADE-LM

Table 4: Test perplexity per word for models with 100 topics. The results for HLBL and LBL were

taken from Mnih and Hinton (2009).

Hinton (2009) also proposed adaptive approaches to learning a structured softmax layer, thus we
also compare with their best approach. All aforementioned baselines are 6-gram models, taking
in consideration the last 5 previous words to predict the next one. We also compare with more
traditional 5-gram and 6-gram models using Kneser-Ney smoothing, taken from Mnih and Hinton
(2007).

From Table 4, we see that adding context to DocNADE-LM, by increasing the size of the multi-
sentence segments, signiﬁcantly improves the performance of the model (compared to FFN) and
also surpasses the performance of the most competitive alternative, the HLBL model.

7.1 Qualitative Inspection of Learned Representations

In this section we explore the semantic properties of texts learned by the DocNADE-LM model.
Interestingly, we can examine the two different components (DN and LM) separately. Because
the DocNADE part and the language modeling part of the model each have their own word matrix,
WDN and WLM respectively, we can compare their contribution through these learned embeddings.
As explained in the previous section, each of the columns of the matrices represents a word w where
WDN

:,w and WLM
We can see by observing Tables 5 and 6 that the two parts of the DocNADE-LM model have
learned different semantic properties of words. An interesting example is seen in the nearest neigh-
bors of the word israel, where the DocNADE focuses on the politico-cultural relation between these
words, whereas the language model part seems to have learned the concept of countries in general.

:,w are two different vector representations of the same word w.

8. Conclusion

We have presented models inspired by NADE that can achieve state-of-the-art performances for
modeling documents.

Indeed, for topic modeling, DocNADE had competitive results while its deep version, Deep-
DocNADE, outperformed the current state-of-the-art in generative document modeling, based on

17

LAULY, ZHENG, ALLAUZEN & LAROCHELLE

weapons
security
humanitarian
terrorists
deployment
diplomats

medical
doctor
health
medicine
physicians
treatment

companies
industry
corp
ﬁrms
products
company

deﬁne
spoken
to
think of
of
bottom line

israel
israeli
palestinian
jerusalem
lebanon
palestinians writers

book
story
novel
author
joke

windows
yards
rubber
piled
ﬁre department
shell

Table 5: The ﬁve nearest neighbors in the word representation space learned by the DocNADE part

of the DocNADE-LM model.

medical
weapons
special
systems
japanese
aircraft
drugs
bank
equipment media
services

political

companies
countries
nations
states
americans
parties

deﬁne
talk about
place
destroy
show
over

book
ﬁlm
service
program

israel
china
russia
cuba
north korea movie
lebanon

information

windows
houses
room
vehicle
restaurant
car

Table 6: The ﬁve nearest neighbors in the word representation space learned by the language model

part of the DocNADE-LM model.

test set perplexity. The similarly good performances where observed when we used these models as
feature extractors to represent documents for the task of information retrieval.

As for language modeling, the competitive performances of the DocNADE language models
showed that combining contextual information by leveraging the DocNADE neural network archi-
tecture can signiﬁcantly improve the performance of a neural probabilistic N-gram language model.

References
Yoshua Bengio, R´ejean Ducharme, Pascal Vincent, and Christian Janvin. A neural probabilistic

language model. The Journal of Machine Learning Research, 3:1137–1155, 2003.

David M. Blei, Andrew Y. Ng, and Michael I. Jordan. Latent Dirichlet Allocation. Journal of

Machine Learning Research, 3(4-5):993–1022, 2003.

Jonathan Chang, Jordan Boyd-Graber, Sean Gerrish, Chong Wang, and David Blei. Reading Tea
Leaves: How Humans Interpret Topic Models. In Advances in Neural Information Processing
Systems 22 (NIPS 2009), pages 288–296, 2009.

Geoffrey E. Hinton. Training products of experts by minimizing contrastive divergence. Neural

Computation, 14:1771–1800, 2002.

Diederik Kingma and Jimmy Ba. Adam: A method for stochastic optimization. arXiv preprint

arXiv:1412.6980, 2014.

18

DOCNADE

R. Kuhn and R. De Mori. A cache-based natural language model for speech recognition. IEEE

Transactions on Pattern Analysis and Machine Intelligence, 12(6):570–583, june 1990.

Hugo Larochelle and Stanislas Lauly. A neural autoregressive topic model. In Advances in Neural

Information Processing Systems, pages 2708–2716, 2012.

Hugo Larochelle and Ian Murray. The Neural Autoregressive Distribution Estimator. In Proceedings
of the 14th International Conference on Artiﬁcial Intelligence and Statistics (AISTATS 2011),
volume 15, pages 29–37, Ft. Lauderdale, USA, 2011. JMLR W&CP.

Andriy Mnih and Karol Gregor. Neural variational inference and learning in belief networks. arXiv

preprint arXiv:1402.0030, 2014.

Andriy Mnih and Geoffrey Hinton. Three new graphical models for statistical language modelling.
In Proceedings of the 24th international conference on Machine learning, pages 641–648. ACM,
2007.

Andriy Mnih and Geoffrey E Hinton. A Scalable Hierarchical Distributed Language Model. In

Advances in Neural Information Processing Systems 21 (NIPS 2008), pages 1081–1088, 2009.

Frederic Morin and Yoshua Bengio. Hierarchical Probabilistic Neural Network Language Model. In
Proceedings of the 10th International Workshop on Artiﬁcial Intelligence and Statistics (AISTATS
2005), pages 246–252. Society for Artiﬁcial Intelligence and Statistics, 2005.

Ruslan Salakhutdinov and Geoffrey Hinton. Replicated Softmax: an Undirected Topic Model. In

Advances in Neural Information Processing Systems 22 (NIPS 2009), pages 1607–1614, 2009.

Nitish Srivastava, Ruslan R Salakhutdinov, and Geoffrey E Hinton. Modeling documents with deep

boltzmann machines. arXiv preprint arXiv:1309.6865, 2013.

Greg Corrado Jeffrey Dean Tomas Mikolov, Kai Chen. Efﬁcient Estimation of Word Represen-
In Workshop Track of the 1st International Conference on Learning

tations in Vector Space.
Representations (ICLR 2013), 2013.

Benigno Uria, Iain Murray, and Hugo Larochelle. A deep and tractable density estimator. JMLR:

W&CP, 32(1):467–475, 2014.

Yin Zheng, Yu-Jin Zhang, and Hugo Larochelle. A deep and autoregressive approach for topic

modeling of multimodal data. TPAMI, 2015.

19

