BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

K.T. HUBER, G. E. SCHOLZ

Abstract. Reconstructing the evolutionary past of a family of genes is an important
aspect of many genomic studies. To help with this, simple operations on a set of
sequences called orthology relations may be employed. In addition to being interesting
from a practical point of view they are also attractive from a theoretical perspective
in that e. g. a characterization is known for when such a relation is representable by a
certain type of phylogenetic tree. For an orthology relation inferred from real biological
data it is however generally too much to hope for that it satisﬁes that characterization.
Rather than trying to correct the data in some way or another which has its own
drawbacks, as an alternative, we propose to represent an orthology relation δ in terms
of a structure more general than a phylogenetic tree called a phylogenetic network.
To compute such a network in the form of a level-1 representation for δ, we introduce
the novel Network-Popping algorithm which has several attractive properties. In
addition, we characterize orthology relations δ on some set X that have a level-1
representation in terms of eight natural properties for δ as well as in terms for level-1
representations of orthology relations on certain subsets of X.

1. Introduction

Unraveling the evolutionary past of a family G of genes is an important aspect for
many genomic studies. For this, it is generally assumed that the genes in G are orthologs,
that is, have arisen from a common ancestor through speciation. However it is known
that shared ancestry of genes can also arise via whole genome duplication (paralogs).
This potentially obscures the signal used for reconstructing the evolutionary past of the
genes in G in the form of a gene tree (essentially a rooted tree whose leaves are labelled
by the elements of G – we present precise deﬁnitions of the main concepts used in the
next section). To tackle this problem, tree-based approaches have been proposed. These
typically work by reconciling a gene tree with an assumed further tree (species tree) in
terms of a map that operates on their vertex sets. For this, certain evolutionary events
are postulated such as the ones mentioned above (see e. g. [12] for a recent review as well
as e. g. [10] and the references therein).

To overcome the problem that the resulting reconciliation very much depends on the
quality of the employed trees and also that such approaches can be computationally
demanding for larger datasets, orthology relations have been proposed as an alternative.
These operate directly on the set of sequences from which a gene tree is built (see
e. g. [1]).
In addition to having attractive practical properties, such relations are also
interesting from a theoretical point of view due to their relationship with e. g. co-trees

Date: March 16, 2016.
School of Computing Sciences, University of East Anglia, UK.

1

6
1
0
2

 
r
a

 

M
5
1

 
 
]

M
D
.
s
c
[
 
 

1
v
2
3
6
4
0

.

3
0
6
1
:
v
i
X
r
a

2

K.T. HUBER, G. E. SCHOLZ

(see e. g. [5, 6]). Furthermore, a characterization is known for when an orthology relation
can be represented in terms of a certain type of phylogenetic tree [5].

Due to e. g. errors or noise in an orthology relation, it is however in general too much
to hope for that an orthology relation obtained from a real biological dataset satisﬁes
that characterization. A natural strategy therefore might be to try and correct for this
in some way. As was pointed out in [11] however, even if an underlying tree-like evolu-
tionary scenario is assumed for this many natural formalizations lead to NP-complete
problems. Furthermore, true non-treelike evolutionary signal such as hybridization might
be overlooked. As an alternative, we propose to represent orthology relations in terms
of phylogenetic networks. These naturally generalize phylogenetic trees by permitting
additional edges. To infer such a structure from an orthology relation δ, we introduce
the novel Network-Popping algorithm which returns a level-1 representation of δ in

Figure 1. Three distinct level-1 representations for the symbolic 3-
dissimilarity δN2 on X = {a, . . . , k} induced by N2. However, only N1
is returned by Network-Popping when given δN2. In all three cases
the underlying phylogenetic network is a level-1 network. Furthermore,
N2, is not semi-discriminating but weakly labelled whereas N3 is semi-
discriminating but not weakly labelled – See text for details.

the form of a structurally very simple phylogenetic network called a level-1 network (see
e. g. Fig. 1 for examples of such representations where the interior vertices labelled in
terms of • and ◦ represent two distinct evolutionary events such as speciation and whole
genome duplication and the unlabelled interior vertices represent hybridization events).
Bearing in mind the point made in [3, Chapter 12], that k-estimates, k ≥ 3, are
potentially more accurate than mere distances as they capture more information, we
formalize an orthology relation in terms of a symbolic 3-dissimilarity rather than a
symbolic 2-dissimilarity (i.e. a distance), as was the case in [5]. From a technical point
of view this also allows us to overcome the problem that using a symbolic 2-dissimilarity
in a network context can be problematic. An example illustrating this is furnished
by the three level-1 representations depicted in Fig. 1 which all represent the same
2-dissimilarity induced by taking the lowest common ancestor between pairs of leaves.
As we shall see, algorithm Network-Popping is guaranteed to ﬁnd, in polyno-
mial time, a level-1 representation of a symbolic 3-dissimilarity if such a representation

N1:abcdefgC1C2C3hijkN2:abcdefghijkN3:abcdefghkijC4BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

3

δ :(cid:0){1,2,3}

2

Figure 2. Three distinct level-1 representations of the 2-dissimilarity

(cid:1) → M = {•,×, (cid:4)} deﬁned by taking lowest common ancestors

of pairs of leaves.

exists. For this, it relies on the three further algorithms below which we also intro-
duce. It works by ﬁrst ﬁnding for a symbolic 3-dissimilarity δ on X all pairs of subsets
of X that support a cycle using algorithm Find-Cycles. Subsequent to this, it em-
ploys algorithm Build-Cycles to construct from each such pair (H, R0) a structurally
very simple level-1 representation for the symbolic 3-dissimilarity induced on H ∪ R0.
Combined with algorithm Vertex-Growing which constructs a symbolic discriminat-
ing representation for a symbolic 2-dissimilarity, Network-Popping then recursively
grows the level-1 representation for δ by repeatedly applying algorithms Build-Cycles
and Vertex-Growing in concert. For the convenience of the reader, we illustrate all
four algorithms by means of the level-1 representations depicted in Fig. 1. As part
of our analysis of algorithm Network-Popping, we characterize level-1 representable
symbolic 3-dissimilarities δ on X in terms of eight natural properties (P1) – (P8) en-
joyed by δ. (Theorem 7.1). Furthermore, we characterize such dissimilarities in terms
of level-1 representable symbolic 3-dissimilarities on subsets of X of size |X| − 1 (Theo-
rem 8.3). Within a Divide-and-Conquer framework the resulting speed-up of algorithm
Network-Popping might allow it to also be applicable to large datasets.

The paper is organized as follows. In the next section, we present basic deﬁnitions and
results. Subsequent to this, we introduce in Section 3 the crucial concept of a δ-trinet
associated to a symbolic 3-dissimilarity and state Property (P1). In Section 4, we present
algorithm Find-Cycles as well as Properties (P2) and (P3). In Section 5, we introduce
and analyse algorithm Build-Cycles. Furthermore, we state Properties (P4) – (P6).
In Section 6, we present algorithms Vertex-Growing and Network-Popping. As
suggested by the example in Fig. 1, algorithm Network-Popping need not return
the level-1 representation of a symbolic 3-dissimilarity that induced it. Employing a
further algorithm called Transform, we address in Section 7 the associated uniqueness
question (Corollary 7.5). As part of this we establish Theorem 7.1 which includes stating
Properties (P7) and (P8). In Section 8, we establish Theorem 8.3. We conclude with
Section 9 where we present research directions that might be worth pursuing.

2. Basic definitions and results

In this section, we collect relevant basic terminology and results concerning phyloge-
netic networks and symbolic 2- and 3-dissimilarities. From now on and unless stated
otherwise, X denotes a ﬁnite set of size n ≥ 3, M denotes a ﬁnite set of symbols of
size at least two and (cid:12) denotes a symbol not already contained in M. Also, all direct-
ed/undirected graphs have no loops or multiple directed/undirected edges.

1232131324

K.T. HUBER, G. E. SCHOLZ

2.1. Directed acyclic graphs. Suppose G is a rooted directed acyclic graph (DAG),
that is, a DAG with a unique vertex with indegree zero. We call that vertex the root
of G, denoted by ρG. Also, we call the graph U(G) obtained from G by ignoring the
directions of its edges the underlying graph of G. By abuse of terminology, we call an
induced subgraph H of G a cycle of G if the induced subgraph U(H) of U(G) is a cycle
of U(G). We call a vertex v of G an interior vertex of G if v is not a leaf of G where
we say that a vertex v is a leaf if the indegree of v is one and its outdegree is zero. We
denote the set of interior vertices of G by V (G)int and the set of leaves of G by L(G).
We call a vertex v of G a tree vertex if the indegree of v is at most one and its outdegree
is at least two, and a hybrid vertex of G if the indegree of v is two and its outdegree is
not zero. The set of interior vertices of G that are not hybrid vertices of G is denoted
by V (G)−
int. We say that N is binary if, with the exception of ρN, the indegree and
outdegree of each of its interior vertices add up to three. Finally, we say that two DAG’s
N and N0 with leaf set X are isomorphic if there exists a bijection from V (N) to V (N0)
that extends to a (directed) graph isomorphism between N and N0 which is the identity
on X.

2.2. Phylogenetic networks and last common ancestors. A (rooted) phylogenetic
network N (on X) is a rooted DAG that does not contain a vertex that has indegree
and outdegree one and L(N) = X. In the special case that a phylogenetic network N is
such that each of its interior vertices belongs to at most one cycle we call N a a level-1
(phylogenetic) network (on X). Note that a phylogenetic network may contain cycles of
length three and that a phylogenetic network that does not contain a cycle is called a
phylogenetic tree T (on X).
For the following, let N denote a level-1 network on X. For Y ⊆ X with |Y | ≥ 3, we
denote by N|Y the subDAG of N induced by Y (suppressing any resulting vertex that
have indegree and outdegree one). Clearly, N|Y is a phylogenetic network on Y .
Suppose v is a non-leaf vertex of N. We say that a further vertex w ∈ V (N) is below
v if there is a directed path from v to w and call the set of leaves of N below v the
oﬀspring set of v, denoted by F(v). Note that F(v) is closely related to the hardwired
cluster of N induced by v (see e.g. [9]). For a leaf x ∈ F(v), we refer to v as an ancestor
of x. In case N is a phylogenetic tree, we deﬁne the lowest common ancestor lcaN(x, y)
of two distinct leaves x, y ∈ L(N) to be the (necessarily unique) ancestor v ∈ V (N)
such that {x, y} ⊆ F(v) and {x, y} (cid:42) F(v0) holds for all children v0 ∈ V (N) of v. More
generally, for Y ⊆ X with 2 ≤ |Y | ≤ |X|, we denote by lcaN(Y ) the unique vertex v of
N such that Y ⊆ F(v), and Y (cid:42) F(v0) holds for all children v0 ∈ V (N) of v. Note that
in case the tree N we are referring too is clear from the context, we shall write lca(Y )
rather than lcaN(Y ).

It is easy to see that the notion of a lowest common ancestor is not well-deﬁned for
phylogenetic networks in general. However the situation changes in case the network
in question is a level-1 network, as the following central result shows. Since its proof is
straight-forward, we omit it.
Lemma 2.1. Let N be a level-1 network on X and assume that Y ⊆ X such that
|Y | ≥ 2. Then there exists a unique interior vertex vY ∈ V (N) such that Y ⊆ F(vY )

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

5
but Y 6⊆ F(v0), for all children v0 ∈ V (N) of vY . Furthermore, there exists two distinct
elements x, y ∈ Y such that vY = v{x,y}.

Continuing with the terminology of Lemma 2.1, we shall refer to vY as the lowest
common ancestor of Y in N, denoted by lcaN(Y ). As in the case of a phylogenetic tree,
we shall write lca(Y ) rather than lcaN(Y ) if the network N we are referring to is clear
from the context.
2.3. Symbolic dissimilarities and labelled level-1 networks. Suppose k ∈ {2, 3}.

(cid:1) the set of subsets of X of size k, and by (cid:0) X≤k

We denote by (cid:0)X
subsets of X of size at most k. We call a map δ :(cid:0) X≤k
k-dissimilarity on X with values in M(cid:12) if, for all A ∈ (cid:0) X≤k

(cid:1) the set of nonempty
(cid:1) → M(cid:12) := M ∪ {(cid:12)} a symbolic
(cid:1), we have that δ(A) = (cid:12) if

k

int

are labelled in terms of M. Then we denote by δN : (cid:0) X≤3

and only if |A| = 1. To improve clarity of exposition, we shall refer to δ as a symbolic
3-dissimilarity on X if the set M is of no relevance to the discussion. Moreover, for
Y = {x1, . . . , xl}, l ≥ 2, we shall write δ(x1, . . . , xl) rather than δ(Y ) where the order of
the elements xi, 1 ≤ i ≤ l, is of no relevance to the discussion.
A labelled (phylogenetic) network N = (N, t) (on X) is a pair consisting of a phyloge-
netic network N on X and a labelling map t : V (N)−
int → M. If N is a level-1 network
then N is called a labelled level-1 network. To improve clarity of exposition we shall
always use calligraphic font to denote a labelled phylogenetic network.
(cid:1) → M(cid:12) the symbolic 3-
Suppose N = (N, t) is a labelled level-1 network on X such that its vertices in V (N)−
dissimilarity on X induced by N given by δN (Y ) = t(lca(Y )) if |Y | 6= 1, and δN (Y ) = (cid:12)
otherwise. For N 0 = (N0, t0) a further labelled level-1 network on X, we say that N and
N 0 are isomorphic if N and N0 are isomorphic and δN = δN 0.
Conversely, suppose δ is a symbolic 3-dissimilarity on X. In view of Lemma 2.1, we
call a labelled level-1 network N = (N, t) on X a level-1 representation of δ if δ = δN .
For ease of terminology, we shall sometimes say that δ is level-1 representable if the
the labelled network we are referring too is of no relevance to the discussion. We call
a level-1 representation of δ semi-discriminating if N does not contain a directed edge
(u, v) such that t(u) = t(v) except for when there exists a cycle C of N with |V (C) ∩
{u, v}| = 1. For example, all three labelled level-1 networks depicted in Fig. 1 are level-1
representations of δN2 where N2 is the labelled level-1 network depicted in Fig. 1(ii).
Furthermore, the representations of δN2 presented in Fig. 1(i) and (iii), respectively, are
semi-discriminating whereas the one depicted in Fig. 1(ii) is not.
Note that in case N is a phylogenetic tree on X the deﬁnition of a semi-discriminating
level-1 representation for δ reduces to that of a discriminating symbolic representation

for the restriction δ2 = δ|( X≤2) of δ to (cid:0)X
dissimilarity δ : (cid:0) X≤2

(cid:1) (see [2] and also [5, 13] for more on such
(cid:1) → M(cid:12) for which, in addition, the following two properties are

representations). Using the concept of a symbolic ultrametric, that is, a symbolic 2-

2

satisﬁed
(U1) |{δ(x, y), δ(x, z), δ(y, z)}| ≤ 2 for all x, y, z ∈ X;
(U2) there exists no four elements x, y, z, u ∈ X such that

δ(x, y) = δ(y, z) = δ(z, u) 6= δ(z, x) = δ(x, u) = δ(u, y);

6

K.T. HUBER, G. E. SCHOLZ

Figure 3. (i) A labelled level-1 network N on X = {x, y, z, u}.
(ii)
and (iv) Semi-discriminating level-1 representations of δN restricted to
{x, y, z} and Y = {u, x, y}, respectively. (iii) A level-1 representation of
δN|Y in the form of a labelled trinet that is is not a δN -trinet.

such representations were characterized by the authors of [2] as follows.

Theorem 2.2. [2, Theorem 7.6.1] Suppose δ : (cid:0) X≤2

(cid:1) → M(cid:12) is a 2-dissimilarity on X.

Then there exists a discriminating symbolic representation of δ if and only if δ is a
symbolic ultrametric.

Clearly, it is too much to hope for that any symbolic 3-dissimilarity δ has a level-1 rep-
resentation. The question therefore becomes: Which symbolic 3-dissimilarities have such
a representation? A ﬁrst partial answer is provided by Theorem 2.2 and Lemma 2.1 for
not δ but its restriction δ2. More precisely, δ has a discriminating symbolic representa-
tion if and only if δ2 is a symbolic ultrametric and, for all x, y, z ∈ X distinct, δ(x, y, z) is
the (unique) element appearing at least twice in the multiset {δ2(x, y), δ2(x, z), δ2(y, z)}.

3. δ-triplets, δ-tricycles, and δ-forks

To make a ﬁrst inroad into the aforementioned question, we next investigate struc-
turally very simple level-1 representations of symbolic 3-dissimilarities. As we shall
see, these will turn out to be of fundamental importance for our algorithm Network-
Popping (see Section 6) as well as for our analysis of its properties.
In the context
of this, it is important to note that although triplets (i. e. binary phylogenetic trees on
3 leaves) are well-known to uniquely determine (up to isomorphism) phylogenetic trees
this does not hold for level-1 networks in general [4]. To overcome this problem, trinets,
that is, phylogenetic networks on three leaves were introduced in [7]. For the convenience
of the reader, we depict in Fig. 4 all 12 trinets τ1, . . . , τ12 on X = {x, y, z} from [7] that
are also level-1 networks in our sense. In the same paper it was observed that even the
slightly more general 1-nested networks are uniquely determined by their induced trinet
sets (see also [8] for more on constructing level-1 networks from trinets, and [14] for an
extension of this result to other classes of phylogenetic networks).

Perhaps not surprisingly, trinets on their own are not strong enough to uniquely
determine labelled level-1 networks in the sense that any two level-1 representations of a
symbolic 3-dissimilarity must be isomorphic. To see this, suppose |X| = 3 and consider

(cid:1) → {A, B,(cid:12)} that maps X and every 2-subset of X

the symbolic 3-dissimilarity δ :(cid:0) X≤3

to A. Then the labelled network (τ1, t) where t maps every vertex in V (τ1)−
int to A is
a semi-discriminating level-1 representation of δ and so is the labelled network (τ4, t0),
where every vertex in V (τ4)−
int is mapped to A by t0. Note that similar arguments may

xyuzxyz(i)(ii)xyuxyu(iii)(iv)BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

7

Figure 4. The twelve trinets in the from of level-1 networks. The two
omitted trinets from [7] are not level-1 networks in our sense.

also be applied to the level-1 representations involving the trinet τ4 to τ12 depicted in
Fig. 4. We therefore evoke parsimony and focus for the remainder of this paper on the
trinets τ1, τ2 and τ3. We shall refer to them as fork on X = {x, y, z}, triplet z|xy, and
tricycle y||xz, respectively.
The next result (Lemma 3.1) relates forks, triplets and tricycles with symbolic 3-
dissimilarities. To state it, we say that a symbolic 3-dissimilarity δ satisﬁes the Helly-type
Property if, for any three elements x, y, z ∈ X, we have δ(x, y, z) ∈ {δ(x, y), δ(x, z), δ(y, z)}.
Note that we will sometimes also refer to the Helly-type property as Property (P1).
Lemma 3.1. Suppose δ is a symbolic 3-dissimilarity on a set X = {x, y, z} taking values
in M. Then there exists a level-1 representation N of δ if and only if δ satisﬁes the Helly-
type Property. In that case N can be (uniquely) chosen to be semi-discriminating and,
(up to permutation of the leaves of the underlying level-1 network N) N is isomorphic
to one of the trinets τ1, τ2 and τ3 depicted in Fig. 4.
Proof. Suppose ﬁrst that N = (N, t) is a level-1 representation of δ. Then, in view of
Lemma 2.1, δ(x, y, z) ∈ {δ(x, y), δ(x, z), δ(y, z)} must hold.
Conversely, suppose that δ(x, y, z) ∈ E := {δ(x, y), δ(x, z), δ(y, z)} holds for all ele-
ments x, y, z ∈ X distinct. By analyzing the size of E it is straight-forward to show that
one of the situations indicated in the rightmost column of Table 1 must apply. With
deﬁning a labelling map t : V (N)−
int → M(cid:12) in the obvious way using the second column
of that table, it follows that N is a level-1 representation for δ.
(cid:3)
Armed with Lemma 3.1, we make the following central deﬁnition. Suppose that
|Y | = 3, that δ is a symbolic 3-dissimilarity on Y , and that N = (N, t) is a semi-
discriminating level-1 representation of δ. Then we call N a δ-fork if N is a fork on Y ,
a δ-triplet if N is a triplet on Y , and a δ-tricycle if N is a tricycle on Y , For ease of
terminology, we will collectively refer to all three of them as a δ-trinet. Note that as the
example of the labelled trinet depicted in Fig. 3(iii) shows, there exist trinets that are

xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzτ1:τ2:τ3:τ4:τ5:τ6:τ7:τ8:τ9:τ10:τ11:τ12:8

K.T. HUBER, G. E. SCHOLZ

|{δ(x, y), δ(x, z), δ(y, z)}|

δ(x, y, z) = ...

1
3
2
2

N
fork
δ(x, y) = δ(x, z) = δ(y, z)
x||yz
δ(y, z) 6= δ(x, y) = δ(x, z) x||yz
x|yz

(cid:1) → M(cid:12) a symbolic 3-dissimilarity we list all la-

δ(x, y) = δ(x, z)

δ(y, z)

Table 1. For δ : (cid:0) X≤3

belled trinets on X = {x, y, z} in terms of the size of E.

not δ-trinets. By abuse of terminology, we shall refer for a symbolic 3-dissimilarity δ on
X and any 3-subset Y ⊆ X to a δ|Y -trinet as a δ-trinet.

4. Recognizing cycles: The algorithm Find-Cycles

In this section, we introduce and analyze algorithm Find-Cycles (see Algorithm 1 for
a pseudo-code version). Its purpose is to recognize cycles in a level-1 representation of a
symbolic 3-dissimilarity δ if such a representation exists. As we shall see, this algorithm
relies on Property (P1) and a certain graph C(δ) that can be canonically associated to
δ. Along the way, we also establish two further crucial properties enjoyed by a level-1
representable symbolic 3-dissimilarity.

We start with introducing further terminology. Suppose N is a level-1 network and C
is a cycle of N. Then we denote by r(C) the unique vertex in C for which both children
are also contained in C and call it the root of C. In addition, we call the hybrid vertex
of N contained in C the hybrid of C and denote it by h(C). Furthermore, we denote
set of all elements of X below by r(C) by R(C) and the set of all elements of X below
h(C) by H(C). Clearly, H(C) (cid:40) R(C). Moreover, for any leaf x ∈ R(C) − H(C), we
denote by vC(x) the last ancestor of x in C. Note that vC(x) is the parent of x if and
only if x is incident with a vertex in C. Last-but-not-least, we call the vertex sets of
the two edge-disjoint directed paths from r(C) to h(C) the sides of C. Denoting these
two paths by P1 and P2, respectively, we say that two leaves x and y in R(C) − H(C)
lie on the same side of C if the vertices vC(x) and vC(y) are both interior vertices of
P1 or P2 , and that they lie on diﬀerent sides if they are not. For example, for C
the underlying cycle of the cycle C2 indicated in the labelled network N1 pictured in
Fig. 1(i), we have R(C) = {b, . . . , g} and H(C) = {c}. Furthermore, the sides of C
are {r(C), vC(b), h(C)} and {r(C), vC(d), vC(e), h(C)} and d, . . . , g lie on one side of C
whereas b and d lie on diﬀerent sides of C.
Suggested by Property (U2), the following property is of interest to us where δ denotes

again a symbolic 3-dissimilarity on X:
(P2) For all x, y, z, u ∈ X distinct for which δ(x, y) = δ(y, z) = δ(z, u) 6= δ(z, x) =
δ(x, u) = δ(u, y) holds there exists exactly one subset Y ⊆ {x, y, z, u} of size 3
such that a tricycle on Y underlies a level-1 representation of δ|Y .

As a ﬁrst result, we obtain

Lemma 4.1. Suppose δ is a level-1 representable symbolic 3-dissimilarity on X. Then
δ satisﬁes the Helly-type Property as well as Property (P2).

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

9

Proof. Note ﬁrst that Property (P1) is a straight-forward consequence of Lemma 2.1.
To see that Property (P2) holds, note ﬁrst that since δ is level-1 representable there
exists a labelled level-1 network (N, t) such that δ(Y ) = t(lca(Y )), for all subsets Y ⊆ X
of size 2 or 3. Suppose x, y, z, u ∈ X distinct are such that δ(x, y) = δ(y, z) = δ(z, u) 6=
δ(z, x) = δ(x, u) = δ(u, y). To see that there exists some Y ⊆ Z := {x, y, z, u} for which
(N|Y , t|Y ) is a δ-tricycle, assume for contradiction that there exists no such set Y . By
Theorem 2.2, N cannot be a phylogenetic tree on X and, so, N must contain at least
one cycle C. Without loss of generality, we may assume that x ∈ H(C), and y lies on
one of the two sides of C. By assumption δ(y, z) 6= δ(x, z) and so either z and y lie on
opposite sides of C, or z and y lie on the same side of C and vC(y) lies on the directed
path from r(C) to vC(z). As can be easily checked, either one of these two cases yields
a contradiction since then δ(z, u) 6= δ(x, u) = δ(y, u) cannot hold for u, as required.
To see that there can exist at most one such tricycle on Z, assume for contradiction
that there exist tow tricycles τ and τ0 with L(τ) ∪ L(τ0) ⊆ Z. Then |L(τ) ∩ L(τ0)| = 2.
Choose x, y ∈ L(τ)∩ L(τ0). Note that the assumption on the elements of Z implies that
x or y must be below the hybrid vertex of one of τ and τ0 but not the other. Without
loss of generality we may assume that y is below the hybrid vertex of τ but not below
the hybrid vertex of τ0. Then y must lie on a side of the unique cycle C0 of τ0. But this
is impossible since the unique cycle of τ and C0 are induced by the same cycle of N. (cid:3)
We remark in passing that the proof of uniqueness in the proof of Lemma 4.1 combined

with the structure of a level-1 network, readily implies the following result.
Lemma 4.2. Suppose that δ is a symbolic 3-dissimilarity on X that is level-1 repre-
sentable by a labelled network (N, t) and that x, y, z ∈ X are three distinct elements such
that x||yz is a δ-tricycle. Let C denote the unique cycle in N such that x ∈ H(C) and
y, z ∈ R(C) − H(C), and let x0 ∈ X. If x0||yz is a δ-tricycle then x0 ∈ H(C) and if
x||x0z is a δ-tricycle then x0 ∈ R(C) and x0 and y lie on the same side of C.

To better understand the structure of a symbolic 3-dissimilarity δ, we next associate
to δ a graph C(δ) deﬁned as follows. The vertices of C(δ) are the δ-tricycles and any two
δ-tricycles τ and τ0 are joined by an edge if |L(τ) ∩ L(τ0)| = 2. For example, consider
the symbolic 3-dissimilarity δN1 induced by the labelled level-1 network N1 pictured in
Fig. 1(i). Then the graph presented in Fig. 5 is C(δN1).

Figure 5. The graph C(δN1), where N1 is the labelled level-1 network
depicted in Fig. 1(i).

The example in Fig. 5 suggests the following property for a symbolic 3-dissimilarity δ

to be level-1 representable:

b||ahg||ahf||ahe||ahc||ahd||ahd||ake||akc||akb||akf||akg||akc||bec||bfc||bgf||egthen

δ(L(τ)) = δ(L(τ0)).

10

K.T. HUBER, G. E. SCHOLZ

(P3) If τ and τ0 are δ-tricycles contained in the same connected component of C(δ),

We collect ﬁrst results concerning Property (P3) in the next proposition.

Proposition 4.3. Suppose δ :(cid:0) X≤3

(cid:1) → M(cid:12) is a symbolic 3-dissimilarity. If δ is level-1

representable or |M| = 2 holds then Property (P3) must hold. In particular, if N is a
level-1 representation for δ then there exists a canonical injective map from the set of
connected components of C(δ) to the set of cycles of the level-1 network underlying N .
Proof. Suppose ﬁrst that δ is level-1 representable. Let N = (N, t) denote a level-1
representation of δ. Then δ = δN . Since δN (x, y, z) = t(r(C)) holds for all cycles C of
N, and any x ∈ H(C) and any y, z ∈ R(C) that lie on diﬀerent sides of C, Property
(P3) follows.
Suppose next that |M| = 2. It suﬃces to show that Property (P3) holds for any two
adjacent vertices of C(δ). Suppose τ and τ0 are two such vertices and that x, y, z ∈ X
are such that τ = x||yz. Then there exists some u ∈ X such that either τ0 = u||yz or
τ0 = x||ru where r ∈ {y, z}. Without loss of generality we may assume that r = y. In
view of the Table 1, we clearly have δ(x, y) 6= δ(x, y, z) = δ(y, z). Since, in addition,
δ(u, y, z) = δ(y, z) holds in the former case it follows that δ(L(τ)) = δ(L(τ0)). In the
latter case, we obtain δ(x, y, u) 6= δ(x, y) and thus, δ(L(τ)) = δ(L(τ0)) follows in this
case too as |M| = 2.
(cid:3)
The claimed injective map is a straight-forward consequence of Lemma 4.2.
Algorithm Find-Cycles exploits the injection mentioned in Proposition 4.3 by inter-
preting for a symbolic 3-dissimilarity δ a connected component C of C(δ) in terms of two
C. Note that if C0 is a cycle in the level-1 network underlying a level-1
sets HC and R0
representation of δ (if such a representation exists!), the sets H(C0) and HC coincide
and R0
For example, for the symbolic 3-dissimilarity δN1 induced by the labelled network N1
depicted in Fig. 1(i), algorithm Find-Cycles returns the three pairs (b . . . g, a . . . , k),
(c, bcef g) and (f, ef g) where we write x1 . . . x|A| for a set A = {x1, . . . , x|A|}.
5. Constructing cycles: The algorithm Build-Cycles

C ⊆ R(C0) holds.

We next turn our attention toward reconstructing a structurally very simple level-1
representation of a symbolic 3-dissimilarity (should such a representation exist). For
this, we use algorithm Build-Cycles which takes as input a symbolic 3-dissimilarity δ
and a pair returned by Find-Cycles when given δ.
To state Build-Cycles, we require further terminology. Suppose N is a level-1
network. Then we say that N is partially resolved if all vertices in a cycle of N have
degree three. Note that partially-resolved level-1 networks may have interior vertices
not contained in a cycle that have degree three or more. Thus such networks need not
be binary. If, in addition to being partially resolved, N is such that it contains a unique
cycle C such that every non-leaf vertex of N is a vertex of C then we call N simple.
Algorithm Build-Cycle (see Algorithm 2 for a pseudo-code version) relies on a
further graph called the TopDown graph associated to a symbolic 3-dissimilarity δ. For

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

11

Input: A symbolic 3-dissimilarity δ on X.
Output: A number m ≥ 1 and pairs of subsets (Hi, R0

statement “δ is not level-1 representable”.

i) of X, 1 ≤ i ≤ m, or the

Build the graph C(δ);
Denote by m the number of connected components of C(δ);
for i ∈ {1, . . . , m} do

1 if δ satisﬁes Property (P1) then
2
3
4
5
6
7

Let Ki denote a connected component of C(δ);
set Hi = {x ∈ X : there exist y, z ∈ X such that x||yz is a vertex of Ki};
set
i = Hi ∪ {y ∈ X : there exist x, z ∈ X such that x||yz is a vertex of Ki};
R0
end
return m, (H1, R0

1), . . . , (Hm, R0

m);

8
9
10 end
11 else
12
13 end

return δ is not level-1 representable;

Algorithm 1: Find-Cycles – Property (P1) is checked in Line 1.

(H, R0) a pair returned by algorithm Find-Cycle when given δ and x ∈ H and S ⊆ R0,
that graph essentially orders the vertices of S. Thus, for each connected component K of
C(δ), Build-Cycle computes a level-1 representation of δ corresponding to K (should
such a representation exist).

We start with presenting a central observation concerning labelled level-1 networks.
Lemma 5.1. Suppose N = (N, t) is a labelled level-1 network, and C is a cycle of N.
Suppose also that x, y, z ∈ X are three elements such that x ∈ H(C), y, z ∈ R(C)−H(C)
and t(vC(z)) = t(r(C)) 6= t(vC(y)). Then, vC(z) lies on the directed path from vC(y) to
h(C) if and only if y|xz is a δN -triplet.
Proof. Put δ = δN . Suppose ﬁrst that vC(z) lies on the directed path from vC(y) to
h(C). Then lca(x, y, z) = lca(x, y) = lca(y, z) = vC(y) and lca(x, z) = vC(z). Hence,
δ(x, y, z) = δ(x, y) = δ(y, z) = t(vC(y)) 6= t(vC(z)) = δ(x, z). By Table 1, y|xz is a
δ-triplet.
Conversely, suppose that y|xz is a δ-triplet. Then, by Table 1, we have δ(x, y, z) =
δ(x, y) = δ(y, z) 6= δ(x, z). Since δ(x, y) = t(vC(y)) and δ(x, z) = t(vC(z)), it follows
that δ(x, y, z) = t(vC(y)) 6= t(vC(z)). But then y and z must lie on the same side of C
as otherwise δ(y, z) = t(r(C)) follows which is impossible by assumption on x, y and z.
Thus, either vC(y) must lie on a directed path P from vC(z) to h(C) or vC(z) must lie
on a directed path P 0 from vC(y) to h(C). However vC(y) cannot be a vertex on P as
otherwise lca(y, z) = vC(z) holds and, so, δ(y, z) = δ(x, z) follows, which is impossible.
Thus vC(z) must be a vertex on P 0.
(cid:3)
With N and C as in from Lemma 5.1, it follows from Lemma 4.2, that whenever
algorithm Find-Cycles is given δN as input, it returns a pair (H, R0) such that H =
H(C) and R0 = H(C) ∪ {y ∈ R(C) : t(vC(y)) 6= t(r(C))}. Moreover giving (H, R0) and

K.T. HUBER, G. E. SCHOLZ

12
δN as input to algorithm Build-Cycle, Lemma 5.1 implies that Build-Cycle ﬁnds
all elements z ∈ R(C) − R0 for which there exists some y ∈ R0 such that vC(z) lies on
the path from vC(y) to h(C). However it should be noted that if z ∈ R(C) − H(C) is
such that t(v) = t(r(C)) = t(vC(z)) holds for all vertices v on the path from r(C) to
vC(z) then the information captured by δN for x, y, and z is in general not suﬃcient
to decide if z and y lie on the same side of C or not. In fact, it is easy to see that, in
general, z ∈ R(C) need not even hold.
We now turn out attention to the aforementioned TopDown graph associated to a
symbolic 3-dissimilarity δ on X which is deﬁned as follows. Suppose that S (cid:40) X, and
that x ∈ X − S. Then the vertex set of the TopDown graph T D(S, x) is S and two
elements u, v ∈ S distinct are joined by a direct edge (u, v) if u|vx is a δ-triplet.

,

Figure 6.
For δN1 the symbolic 3-dissimilarity induced by the la-
belled network N1 pictured in Fig. 1(i), we depict in (a) the graph
T D({d, e, f, g}, c) and in (b) the graph CL({c},{b},{d, e, f, g}). In both
graphs, the vertices are indicated by “×”. – See text for details.

Rather than continuing with our analysis of algorithm Build-Cycle we break for
the moment and illustrate it by means of an example. For this we return again to the
symbolic 3-dissimilarity δN1 on X = {a, . . . , k} induced by the labelled level-1 network
N1 depicted in Fig. 1(i). Suppose (c, bcef g) is a pair returned by algorithm Find-Cycle
and c||be is the δ-tricycle chosen in line 2 of Build-Cycle. Then H = {c}, S0
b = {b}
e = {e, f, g} (lines 3 and 4), and Sb = {b} and Se = {d, e, f, g} (lines 8 and 9). The
and S0
graph T D(Se, c) is depicted in Fig. 6(a). It implies that for the cycle C associated to the
pair (c, bcef g) in a level-1 representation of δN1, we must have vC(e) = vC(f) = vC(g)
and that one of the two sides of C is {e, d, f, g}. Since |Sb| = 1, the other side of C is
{b} (lines 11 to 33).
Continuing with our analysis of algorithm Build-Cycle, we remark that the fact that
the TopDown graph T D(Se, c) in the previous example is non-empty is not a coincidence.
In fact, it is easy to see that the graph G deﬁned in line 14 of Build-Cycle is non-empty
whenever δ is level-1 representable. Thus, the DAG C returned by algorithm Build-
Cycle cannot contain multi-arcs. Note however that there might be tricycles induced by
C of the form x||uz with u ∈ R0− S0
y as, for example, δ(x, z) = δ(x, y) = δ(z, y) = δ(x, u)
might hold and thus x||uz is not a δ-tricycle. Note that similar reasoning also applies to
S0
z and the extensions of S0
y and S0
z to Sy and Sz deﬁned in lines 8 and 9, respectively.
Also note that the sets Sy and Sz are dependent on the choice of the δ-tricycle in line 2.

defg(a)cbegdf(b)7
8
9
10
11
12
13

14
15
16
17
18
19
20

for i ∈ {y, z} do
set vl = r(C);
if T D(Si, x0) = T D(Si, x00) for all x0, x00 ∈ H and T D(Si, x) does not
contain a directed cycle then

set G = T D(Si, x);
set rep=rep+1;
while V (G) 6= ∅ do

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

13

Input: A symbolic 3-dissimilarity δ on X that satisﬁes Property (P1) and a pair

(H, R0) returned by algorithm Find-Cycle when given δ.

Output: Either a labelled simple level-1 network (C, t) on a partition of a subset
X0 of X such that R0 ⊆ X0 and H(K) = H holds for the unique cycle K
of C, or the statement “δ is not level-1 representable”.

y = {u ∈ R0 : x||uz is a δ-tricycle};
z = {u ∈ R0 : x||yu is δ-tricycle};

1 set rep=0;
2 Choose a δ-tricycle x||yz, where x ∈ H and y, z ∈ R0 − H;
3 set S0
4 set S0
5 Initialize C as a graph with three vertices respectively labelled by r(C), h(C) and
6 if for all x0 ∈ H, y0 ∈ S0

H, and the edge (h(C), H);

z, x0||y0z0 is a δ-tricycle and

y and z0 ∈ S0

δ(x, y, z) = δ(x0, y0, z0) then
set t(r(C)) = δ(x, y, z);
set Sy = S0
set Sz = S0
if for all u1 ∈ Sy, u2 ∈ Sz, δ(u1, u2) = t(r(C)) then

y ∪ {u ∈ X − R0 : there exists u0 ∈ S0
z ∪ {u ∈ X − R0 : there exists u0 ∈ S0

y such that u0|ux is a δ-triplet};
z such that u0|ux is a δ-triplet};

Add a new child v to vl;
set F(v) = {u ∈ Si : u has indegree 0 in G};
Delete from G all vertices in F(v);
if for all u, u0 ∈ F(v), x0, x00 ∈ H ∪ V (G), δ(u, x0) = δ(u0, x00)
then

end

end
else

end
Add the edge (vl, h(C));

Remove all vertices from G;
set rep=rep-1;

Choose some u ∈ F(v);
set t(v) = δ(x, u);
Add the leaf F(v) as a child of v;
set vl = v;

21
22
23
24
25
26
27
28
29
30
31
32
33
34
35 end
36 if rep=2 then
return C;
37
38 end
39 else
40
41 end
Algorithm 2: Build-Cycle – The set R0 is the set H ∪ Sy ∪ Sz, Property (P4) is
checked in Lines 6, 10, and 20, and Properties (P3), (P6), (P7) and (P8) are checked
in Lines 6, 13, 10 and 20, respectively.– See text for details.

return δ is not level-1 representable;

end

end

end

14

K.T. HUBER, G. E. SCHOLZ

However, line 6 ensures that the labelled simple level-1 network returned by algorithm
Build-Cycle is independent of the choice of that δ-tricycle.
To establish Proposition 5.3 which ensures that algorithm Build-Cycle terminates,
we next associate to a directed graph G a new graph P(G) by successively removing
vertices of indegree zero and their incident edges until no such vertices remain. As a
ﬁrst almost trivial observation concerning that graph we have the following straight-
forward result whose proof we again omit.
Lemma 5.2. Let G be a directed graph. Then P(G) is nonempty if and only if G
contains a directed cycle.

Given as input to algorithm Build-Cycle a symbolic 3-dissimilarity δ that satisﬁes

Property (P1) and a pair (H, R0) returned by algorithm Build-Cycle for δ we have
Proposition 5.3. Algorithm Build-Cycle terminates.
Proof. As is easy to check the only reason for algorithm Build-Cycle not to terminate
is the while loop initiated in its line 16. For i = 1, 2, this while loop works by successively
removing vertices of indegree 0 (and their incident edges) from the graph T D(Si, x), and
terminates if the resulting graph, i. e. P(T D(Si, x)), is empty. Since line 13 ensures that
this loop is entered if and only if T D(Si, x) does not contain a directed cycle, Lemma 5.2
(cid:3)
implies that Build-Cycle terminates.
It is straight-forward to see that when given a level-1 representable symbolic 3-
dissimilarity δ such that the underlying level-1 network is in fact a simple level-1 network
the labelled network returned by algorithm Build-Cycle satisﬁes the following three ad-
ditional properties (where we use the notations introduced in algorithm Build-Cycle).
i = {u ∈ Si : δ(u, x) 6= δ(y, z)} and Sy ∩ Sz = Sy ∩ H =
(P4) For i = y, z, we have S0
(P5) For all u, v ∈ R := H ∪ Sy ∪ Sz and all w ∈ X − R, we have δ(u, w) = δ(v, w).
(P6) For all u, u0 ∈ H and i ∈ {y, z}, the graphs T D(Si, u) and T D(Si, u0) are iso-

Sz ∩ H = ∅.

morphic and do not contain a directed cycle.

Since the quantities on which these properties are based also exist for general symbolic
3-dissimilarities we next study Properties (P4) - (P6) for such dissimilarities. As a ﬁrst
consequence of Property (P4) combined with Properties (P1) and (P2), we obtain a
suﬃcient condition under which the TopDown graph T D(Si, x) considered in algorithm
Build-Cycle does not contain a directed cycle (lines 13). For convenience, we employ
again the notation used in Algorithm 2.

(cid:1) → M(cid:12) is a symbolic 3-dissimilarity that satisﬁes

Proposition 5.4. Suppose that δ :(cid:0) X≤3

Properties (P1), (P2) and (P4), that (H, R0) is a pair returned by algorithm Find-
Cycles when given δ, and that x, y and z are as speciﬁed as in line 2 of algorithm
Build-Cycle. Then the following hold for i = y, z.
(i) If T D(Si, x) contains a directed cycle then it contains a directed cycle of size 3.
(ii) T D(Si, x) does not contain a directed cycle of length 3 whenever |M| = 2 holds.
Proof. (i) By symmetry, it suﬃces to show the proposition for i = y. Suppose T D(Sy, x)
contains a directed cycle. Over all such cycles in T D(Sy, x), choose a directed cycle C
of minimal length. If |V (C)| = 3, then the statement clearly holds.

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

15
Suppose for contradiction for the remainder that |V (C)| ≥ 4. Suppose a, b, c, d ∈ V (C)
are such that (a, b), (b, c), (c, d) are three directed edges in C. We next distinguish
between the cases that |V (C)| ≥ 5 and that |V (C)| = 4.
Suppose |V (C)| ≥ 5. Then since a, c ∈ Sy, Lemma 4.2 combined with the minimality
of C implies that we either have a δ-fork on {a, c, x} or the δ-triplet ac|x. Hence,
δ(x, a) = δ(x, c) holds in either case. Note that similar arguments also imply that
δ(x, b) = δ(x, d). Since |V (C)| ≥ 5, the directed edges (a, d) and (d, a) cannot be
contained in T D(Sy, x) and, using again similar arguments as before, δ(x, a) = δ(x, d)
must hold. In combination, we obtain δ(x, a) = δ(x, b) which is impossible in view of
(a, b) being an edge in T D(Sy, x) and thus δ(x, a) 6= δ(x, b).
Suppose |V (C)| = 4. By the minimality of C, neither (b, d) (d, b), (a, c) nor (c, a)
can be a directed edge in T D(Sy, x). Using similar arguments as in the previous case,
it follows that δ(x, b) = δ(x, d) and δ(x, a) = δ(x, c). Combined with the facts that
(a, b), (b, c), (c, d) are directed edges in C and that (d, a) must also be an edge in C as
|V (C)| = 4, it follows that with A := δ(c, d) and B := δ(b, c) we have
(1)
Note that, δ(a, c) ∈ {A, B} must also hold as otherwise |{δ(a, c), δ(a, b), δ(b, c)}| = 3 and
so, in view of Table 1, δ|{a,b,c} would be level-1 representable by a δ-tricycle on {a, b, c}.
But then H ∩ {a, b, c} 6= ∅ which is impossible in view of Property (P4). Similarly, one
can show that δ(b, d) ∈ {A, B}. By combining a case analysis as indicated in Table 1
with Equation 1, it is straight-forward to see that each of the four detailed combinations
of δ(a, c) and δ(b, d) in that table yields a contradiction in view of Property (P2).
(ii) By symmetry, it suﬃces to assume i = y. Let |M| = 2 and assume for contra-
diction that T D(Sy, x) contains a directed cycle C of size 3. Let s, u, v denote the 3
vertices of C such that (s, u), (u, v) and (v, s) are the three directed edges of C. Then
δ(u, x) 6= δ(s, x) 6= δ(v, s) = δ(v, x) 6= δ(u, v) = δ(u, x) must hold. Since |M| = 2, this is
(cid:3)
impossible.

A = δ(x, c) = δ(x, a) = δ(a, b) 6= δ(x, b) = δ(x, d) = δ(d, a) = δ(b, c) = B.

6. Constructing level-1 representations from symbolic 3-dissimilarities:

The algorithm Network-Popping

if a symbolic 3-dissimilarity is level-1 representable or not.
Popping is guaranteed to ﬁnd a level-1 representation in polynomial time.

In this section, we present algorithm Network-Popping which allows us to decide
If it is, then Network-
Network-Popping takes as input a symbolic 3-dissimilarity δ on X and employs a
top-down approach to recursively construct a semi-discriminating level-1 representation
for δ (if such a representation exists). For l a leaf whose label set is of size at least
two and constructed in one of the previous steps it essentially works by either replacing
l with a labelled simple level-1 network or a labelled phylogenetic tree. To compute
those networks algorithms Find-Cycle and Build-Cycle are used and to construct
such trees algorithm Vertex-Growing is employed. At the heart of the latter lie
Proposition 6.2 and algorithm Bottom-Up introduced in [5]. The latter takes as input
a symbolic 2-dissimilarity δ satisfying Properties (U1) and (U2), and builds the unique
discriminating symbolic representation T for δ (if it exists).

16

K.T. HUBER, G. E. SCHOLZ

To be able to state algorithm Vertex-Growing, we require again further terminol-
ogy. Following e. g. [13], we call a collection H of non-empty subsets of X a hierarchy
on X if A ∩ B ∈ {A, B,∅} holds for any two sets A, B ∈ H. The proof of the following
result is straight-forward and thus omitted.
Lemma 6.1. Let N be a level-1 network with cycles C1, C2, . . . , Ck, k ≥ 1. Then,
HN = {R(C1), R(C2), . . . , R(Ck)} is a hierarchy on X.

Suppose A is a set of non-empty subsets of X. Then we deﬁne a relation ∼(X,A) on
X by putting x ∼(X,A) y if there exists some A ∈ A such that x, y ∈ A, for all x, y ∈ X.
Note ﬁrst that ∼(X,A) is clearly an equivalence relation whenever A is a hierarchy. In
addition, suppose that A is such that the partition X0 of X induced by ∼(X,A) has size
Y, Y 0 ∈ X0 we have δ(x, y) = δ(x0, y0) for all x, x0 ∈ Y and y, y0 ∈ Y 0, then we associate
to δ the map ˆδ given by

(cid:1) → M(cid:12) is a symbolic 3-dissimilarity such that for any two sets
(cid:1) → M(cid:12)
(cid:26) (cid:12)

two or more. If δ :(cid:0) X≤3
ˆδ :(cid:0)X0

≤2

{Y1, Y2} 7→

δ(y1, y2), where y1 ∈ Y1, y2 ∈ Y2

if Y1 = Y2,
otherwise.

Note that ˆδ is clearly well-deﬁned and a symbolic 2-dissimilarity on X0. Associating to
a level-1 representation N = (N, t) of δ the set R := {R(C) : C is a cycle of N}, we
have the following result as an immediate consequence.
Proposition 6.2. Suppose N is a labelled level-1 network on X and X0 is the partition
of X induced by the relation ∼(X,R) on X. If |X0| ≥ 2 then ˆδN is well deﬁned and
satisﬁes Properties (U1) and (U2). In particular, ˆδN is a symbolic ultrametric on X0.
Proof. Put N = (N, t) and δ0 = ˆδN . Note ﬁrst that for all x, y ∈ X, Lemma 6.1
implies that there exists some R ∈ R such that x, y ∈ R if and only if there exists
R0 ∈ R0 := {R ∈ R : R is set-inclusion maximal in R} such that x, y ∈ R0. Let TN
denote the tree obtained from N by ﬁrst collapsing for every cycle C of N with R(C) ∈ R0
all vertices below or equal to r(C) into a vertex and then labelling that vertex by R(C).
Put tN := t|V (TN ). Then (TN , tN) is clearly a labelled phylogenetic tree on X0. Since
N is a labelled level-1 network, it follows that (TN , tN) is a symbolic discriminating
representation of ˆδN . In view of Theorem 2.2, the proposition follows.
(cid:3)
To illustrate algorithm Vertex-Growing consider again the symbolic 3-dissimilarity
δN1 induced by the labelled level-1 network on X = {a . . . , k} depicted in Fig. 1(i).
Let M1, M2, and M3 denote the three labelled simple level-1 networks returned by
algorithm Build-Cycle when given δN1 such that L(M1) = X, L(M2) = {b, . . . , g}
and L(M3) = {e, f, g}. Then the partition of X found in line 1 of algorithm Vertex-
i=1{L(M1)} is X itself, since any two leaves of X
are in relation with respect to ∼(X,R). Thus, the discriminating symbolic representation
returned by Bottom-Up is a single leaf.
Armed with the algorithms Find-Cycles, Build-Cycles, and Vertex-Growing,
we next present a pseudo-code version of algorithm Network-Popping (Algorithm 4).

Growing when given δN1 and R =S3

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

17
Input: A symbolic 3-dissimilarity δ on a set X, a subset Y ⊆ X, and a hierarchy S

Output: A discriminating symbolic representation on the partition of Y induced

of proper subsets of Y .
by ∼(Y,S) or the statement “There exists no discriminating symbolic
representation”.

Y 0, as considered in Proposition 6.2;

1 Let Y 0 denote the partition of Y induced by ∼(Y,S);
2 Apply the Bottom-Up algorithm to the symbolic ultrametric ˆδ induced by δ on
3 if Bottom-Up returns a labelled tree T then
4
5 end
6 else
7
8 end

return There exists no discriminating symbolic representation. ;

return T ;

Algorithm 3: Vertex-Growing – Property (P2) is checked in Line 3.

To be able to establish in Proposition 6.4 that algorithm Network-Popping re-
turns a semi-discriminating level-1 representation for a symbolic 3-dissimilarity (if such
a representation exists), we require the following technical result.

Proposition 6.3. Let δ be a symbolic 3-dissimilarity on X satisfying Property (P1), and
assume that Network-Popping returns a labelled level-1 network N on X when given

δ as input. Then the restrictions δ|( X≤2) and δN|( X≤2) of δ and δN to (cid:0) X≤2
coincide if and only if δ and δN coincide.
Proof. Put N = (N, t). Also, put δ0 = δ|( X≤2) and δ0
coincide then δ0 = δ0
N must hold.
Conversely, assume that δ0 = δ0
that since N is clearly a level-1 representation of δN , Lemma 4.1 implies that δN also
satisﬁes Property (P1). Further note that, up to permuting the elements in Z, we either
have (i) a δ-fork on Z, (ii) a|bc is a δ-triplet, or (iii) a||bc is a δ-tricycle.

N = δN|( X≤2). Clearly, if δ and δN
(cid:1) and put m = δ(Z). Note

N . Let Z = {a, b, c} ∈ (cid:0)X

(cid:1), respectively,

If Case (i) holds then δ(a, b) = δ(a, c) = δ(b, c) = m. Since, by assumption, δ(Y ) =

(cid:1), we also have δN (a, b) = δN (a, c) = δN (b, c) = m. Hence,

δN (Y ) for all Y ∈ (cid:0)X

δN (Z) = m = δ(Z) as δ satisﬁes Property (P1).
If Case (ii) holds then m = δ(a, b) = δ(a, c) 6= δ(b, c). Assume for contradiction that
δN (Z) 6= m. Then, since δN satisﬁes Property (P1) it follows that δN (Z) = δN (b, c).
By Table 1, a||bc must be a δN -tricycle. Hence, there must exist a cycle C in N such
that a ∈ H(C), b and c are contained in R(C) but lie on diﬀerent sides of C, and
t(r(C)) = δN (Z). Since algorithm Network-Popping completes by returning N it
follows that C is constructed in the while-loop starting in line 16 of algorithm Build-
Cycle. But then the condition in line 6 of Build-Cycle has to be satisﬁed which
implies that t(r(C)) = δ(Z) in view of line 7 of that algorithm. Hence, m 6= δN (Z) =
t(r(C)) = δ(Z) = m which is impossible.

3

2

18

K.T. HUBER, G. E. SCHOLZ

Input: A symbolic 3-dissimilarity δ on X.
Output: A semi-discriminating level-1 representation N = (N, t0) of δ, if such a
representation exists, or the statement “δ is not level-1 representable”.

1 Initialize N as an unique vertex v, labelled by X;
2 set r = 1;
3 Use Find-Cycles(δ) to obtain m ≥ 0 pairs (Hi, R0
1 ≤ i ≤ m;

i) of subsets Hi and R0

i of X,

4 if

network (Ci, ti) as described in that algorithm then

for all i ∈ {1, . . . , m}, Build-Cycle(δ; Hi, Ri) returns a labelled simple level-1
put Ri = R(Ci), and R = {R1, . . . , Rm};
if for all i ∈ {1, . . . , m}, and all y, z ∈ Ri, and x /∈ Ri, we have δ(x, y) = δ(x, z)
then

while there exists a leaf l of N whose label set Vl ⊆ X has two or more
elements AND r 6= 0 do

if there exists i ∈ {1, . . . , m} such that Vl = Ri then

identify l with the root of the labelled simple level-1 network
corresponding to Ri and replace N with the resulting labelled level-1
network;

end
else

put Sl = {R ∈ R : R ⊆ Vl};
if Vertex-Popping(δ, Vl,Sl) returns a discriminating symbolic
representation T = (T, t) then

identify l with the root of T and replace N with the resulting
labelled level-1 network;

5
6

7

8
9

10
11
12
13

14

end
else

end

set r = 0;

15
16
17
18
19
20
21
22 end
23 if r = 1 AND N is not v then
24

end

end

end

25 end
26 else
27
28 end

return N := (N, t0) where t0 is canonically obtained by combining the maps t
and ti, 1 ≤ i ≤ m;

return δ is not level-1 representable;

Algorithm 4: Network-Popping – Property (P5) is checked in Line 6.

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

19
If Case (iii) holds then the while-loop initiated in line 16 of algorithm Build-Cycle
implies that there must exist a cycle C in N such that t(r(C)) = δ(Z) = m. Since N
is returned by algorithm Network-Popping when given δ and N is clearly a level-1
(cid:3)
representation for δN it follows that δN (Z) = t(r(C)) = m = δ(Z).

As a ﬁrst result concerning algorithm Network-Popping, we have

Proposition 6.4. Suppose δ is a symbolic 3-dissimilarity on X, and Network-Popping
applied to δ returns a labelled level-1 network N . Then δ = δN . In particular, N is a
level-1 representation for δ.
Proof. Put N = (N, t). In view of Proposition 6.3, it suﬃces to show that δ(a, b) =
δN (a, b) holds for all a, b ∈ X distinct. Let a and b denote two such elements. We
distinguish between the cases that either (i) there exists a cycle C of N such that
vC(a) 6= vC(b), or (ii) that no such cycle exists.
Assume ﬁrst that Case (i) holds. Then a and b lie either on the same side of C, or one
of a and b is below the hybrid h(C) of C and the other lies on the side of C, or a and b lie
on diﬀerent sides of C. If a and b lie on the same side of C or one of them is below h(C)
then we may assume without loss of generality that there exists a directed path in C
from vC(a) to vC(b). Then line 22 of algorithm Build-Cycle implies t(vC(a)) = δ(a, b).
Since lca(a, b) = vC(a), it follows that δN (a, b) = t(vC(a)) = δ(a, b), as required.
If a and b lie on diﬀerent sides of C then x||ab is a δ-tricycle, for x as in line 2 of
algorithm Build-Cycle. Since that algorithm completes, it’s line 7 implies δ(a, b) =
t(r(C)). But then δN (a, b) = t(r(C)) = δ(a, b), as N is returned by Network-Popping.
For the remainder, assume that Case (ii) holds, that is, there exists no cycle C of N
such that vC(a) 6= vC(b). Consider the vertex v0 ∈ V (N) deﬁned as follows: if the path
from the root ρN of N to lca(a, b) does not contain a vertex that is also contained in a
cycle of N, then put v0 = ρN. Otherwise let v0 denote the last vertex on a directed path
from ρN to lca(a, b) such that v0 belongs to a cycle Z of N. Note that v0 = lca(a, b)
holds if lca(a, b) is also contained in Z. Put V = F(v1) where v1 is the unique child
of v0 not contained in Z, and let V 0 denote the partition of V induced by ∼(V,Sv0)
where for any vertex w ∈ V (N) the set Sw is as deﬁned as in line 12 of algorithm
Network-Popping. Let Ra, Rb ∈ V 0 such that a ∈ Ra and b ∈ Rb. Then line 5
of Network-Popping implies ˆδN (Ra, Rb) = δN (a, b) and ˆδ(Ra, Rb) = δ(a, b). Since
N is returned by Network-Popping when given δ, line 12 of that algorithm implies
ˆδ(Ra, Rb) = ˆδN (Ra, Rb). Consequently, δN (a, b) = δ(a, b) holds in this case too.
(cid:3)
We conclude this section with remarking that the runtime of algorithm Network-
Popping is polynomial. The reasons for this are that Network-Popping basically
works by comparing δ-trinets and δ-values on subsets on X of size two, and that the
number of such trinets and subsets is polynomial in the size of X.
7. Uniqueness of level-1 representations returned by Network-Popping
As is easy to see, there exist symbolic 3-dissimilarities that although they satisfy
Properties (P1) - (P6) they are not level-1 representable. The reason for this is that such
3-dissimilarities need not satisfy the assumptions of lines 10 and 20 in algorithm Build-
Cycle. A careful analysis of that algorithm suggests however two further properties for

20

K.T. HUBER, G. E. SCHOLZ

a symbolic 3-dissimilarity to be level-1 representable. To state them, we next associate
to a symbolic 3-dissimilarity its CheckLabels graph.
Suppose Y0, Y1, and Y2 are three pairwise disjoint subsets of X such that for all
x, x0 ∈ Y0 and all i = 1, 2, the graphs T D(Yi, x) and T D(Yi, x0) are isomorphic (which is
motivated by Property (P6)). Then we denote by CL(Y0, Y1, Y2) the CheckLabels graph
associated to δ, Y0, Y1, and Y2 deﬁned as follows. The vertex set of CL(Y0, Y1, Y2) is
Y0 ∪ Y1 ∪ Y2. Any pair (u, v) ∈ Y1 × Y2 is joined by an (undirected) edge {u, v}, any pair
(u, v) ∈ (Y1 ∪ Y2) × Y0 is joined by a directed edge (u, v), and two elements u, v ∈ Yi,
i = 1, 2, are joined by a directed edge (u, v) if there exists a direct path from u to v in
T D(Yi, x). Finally, to each edge of CL(Y0, Y1, Y2) with end vertices u and v or directed
edge of that graph with tail u and head v, we assign the label δ(u, v). We illustrate the
CheckLabels graph in Fig. 6(b) for the network N1 depicted in Fig. 1(i).
Using the terminology of algorithm Build-Cycle it is straight-forward to observe
that the following two properties are implied by Build-Cycle’s lines 10 and 20 whenever
its input symbolic 3-dissimilarity is level-1 representable:

(P7) All undirected edges of CL(H, Sy, Sz) have the same label;
(P8) For all vertices u of CL(H, Sy, Sz), all directed edges in CL(H, Sy, Sz) with tail

u have the same label.

As indicated in Table 2, Properties (P1) - (P8) are independent of each other. More-

over, they allow us to characterize level-1 representable symbolic 3-dissimilarities.

Prop.
(P1)

(P2)

(P3)

(P4)

(P5)

(P6)

(P7)

(P8)

X

M

{D, S}
{D, S}

{x, y, z}
{x, y, z, u}
{x1, x2, y, z} {D, S1, S2}
{x, y, z, u}
{1, . . . , 5}
{1, . . . , 6}
{1, . . . , 5}
{1, . . . , 5}

{D, S}
{D, S}
{D, S}
{D, S}
{D, S}

δ(2, 4) = δ(2, 3, 4) = δ(1, 2, 4) = δ(2, 4, 5) = S;

Table 2. For sets X and M and δ a symbolic 3-dissimilarity on X
as indicated, the property stated in the ﬁrst column of each row holds
whereas the remaining seven properties do not. For i = 5, 6, 7, 8, the
networks Ni are depicted in Fig. 7.

δ

δ(x, y) = δ(x, z) = δ(y, z) = D;

δ(x, y, z) = S.

δ(x, y, z) = δ(y, z, u) = δ(x, y) = δ(y, z) = δ(z, u) = D;

δ(x, y, u) = δ(x, u) = δ(y, z) = δ(x, y, z) = D;

δ(Y ) = S otherwise.

δ(xi, y, z) = Si, i ∈ {1, 2};

δ(Y ) = D otherwise.

δ(Y ) = S otherwise.

δ(1, 4) = S;

δ(Y ) = δN5(Y ) otherwise.
δ(3, 6) = δ(2, 3, 6) = D;
δ(Y ) = δN6(Y ) otherwise.

δ(Y ) = δN7(Y ) otherwise.
δ(3, 5) = δ(3, 4, 5) = D;
δ(Y ) = δN8(Y ) otherwise.

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

21

Figure 7. The networks Ni, i = 5, 6, 7, 8, considered in Table 2

Theorem 7.1. Let δ be a symbolic 3-dissimilarity on X. Then the following statements
are equivalent (where in (iii)-(v) the input to algorithm Network-Popping is δ):
(i) δ is level-1 representable.
(ii) δ satisﬁes conditions (P1) - (P8).
(iii) Network-Popping returns a labelled level-1 network which is unique up to iso-
morphism.
(iv) Network-Popping returns a level-1 representation for δ.
(v) Network-Popping returns a semi-discriminating level-1 representation for δ.
Proof. (i) ⇒ (ii): This is an immediate consequence of Lemma 4.1, Proposition 4.3, the
remark preceding Proposition 5.4 and the observation preceding Table 2.
(ii) ⇒ (iii): Assume that δ satisﬁes Properties (P1) - (P8). Then algorithm Find-
Cycles ﬁrst constructs the graph C(δ) and then ﬁnds for each connected component K
of C(δ) the pair (HK, R0
K). Since algorithm Build-Cycles relies on Properties (P3),
(P4), (P6) - (P8) being satisﬁed, it follows that Build-Cycles constructs for each
K), K a connected component of C(δ), a labelled simple level-1 network as
pair (HK, R0
speciﬁed in the output of Build-Cycles. By construction, the labelled DAG N = (N, t)
returned by algorithm Network-Popping is clearly a labelled phylogenetic network.
Since, in view of the while loop of that algorithm starting at line 7, no two cycles in
N can share a vertex it follows that N is in fact a level-1 network. Proposition 6.3
combined with the observation that in none of our four algorithms we have to break a
tie implies that N is unique up to isomorphism.

(iii) ⇒ (iv): This is trivial in view of Proposition 6.4.
(iv) ⇒ (v): Suppose algorithm Network-Popping returns a level-1 representation
N for δ. To see that N is in fact semi-discriminating, note that algorithms Vertex-
Growing and Build-Cycles return a discriminating symbolic representation and a
discriminating level-1 representation for its input symbolic 3-dissimilarity, respectively.
In combination it follows that N must be semi-discriminating.
(v) ⇒ (i): This is trivial.
(cid:3)
As suggested by the two semi-discriminating level-1 representations N1 and N3 for
δN1 depicted in Fig. 1(i) and (ii), the output of algorithm Network Popping when
given a level-1 representable symbolic 3-dissimilarity δ need not be the labelled level-1
network that induced δ. To help clarify the relationship between both networks, we
require further terminology.

12341234564534512312N5N6N7N822

K.T. HUBER, G. E. SCHOLZ

Suppose that (N, t) is a labelled level-1 network. Then we say that a cycle C of
N is weakly labelled if there exists at least one vertex v on either side of C such that
t(v) 6= t(r(C)). More generally, we call a labelled level-1 network (N, t) weakly labelled if
every cycle of N is weakly labelled. For example, the labelled level-1 network N2 pictured
in Fig. 1(ii) is weakly labelled (but not semi-discriminating) whereas the network N3
depicted in Fig. 1(iii) is semi-discriminating but not weakly labelled.

Armed with this deﬁnition, we can characterize weakly labelled cycles as follows.

Lemma 7.2. Let N = (N, t) be a labelled level-1 network, and let C be a cycle of
N. Then C is weakly labelled if and only if there exists some x ∈ H(C) and leaves
y, z ∈ R(C) − H(C) that lie on diﬀerent sides of C such that x||yz is a δN -tricycle.
Moreover, x0||yz is a δN - tricycle, for all x0 ∈ H(C).
Proof. Put δ = δN . Assume ﬁrst that there exists some x ∈ H(C) and leaves y, z ∈
R(C) − H(C) that lie on two diﬀerent sides of C such that x||yz is a δ-tricycle. Then
δ(x, y, z) = δ(z, y) = t(r(C)). Also δ(x, y) = t(vC(y)) and δ(x, z) = t(vC(z)). In view of
Table 1, δ(x, y, z) 6∈ {δ(x, y), δ(x, z)} and, so, t(vC(i)) 6= t(r(C)), for i = y, z.
Conversely, suppose C is weakly labelled. Let v1, v2 ∈ V (C) denote two vertices of N
that lie on diﬀerent directed paths from r(C) to h(C) such that t(r(C)) 6∈ {t(v1), t(v2)}.
Suppose y, z ∈ X are such that vC(y) = v1 and vC(z) = v2. Then x||yz must be a
δ-tricycle, for all x ∈ H(C). Indeed, δ(x, y) = t(v1) and δ(x, z) = t(v2) holds. Since
δ(y, z) = δ(x, y, z) = t(r(C)) /∈ {δ(x, y), δ(x, z)}, Table 1 implies that x||yz is a δ-tricycle.
The remainder of the lemma follows from the fact that, for all x0 ∈ H(C), we have
δ(x0, y, z) = δ(x, y, z), δ(x, y) = δ(x0, y) and δ(x, z) = δ(x0, z).
(cid:3)
As a consequence, we can strengthen Proposition 4.3 to the following characterization.
Theorem 7.3. If N = (N, t) is a labelled level-1 network, the connected components of
C(δN ) are in 1-1 correspondence with the weakly labelled cycles of N.

Implied by Theorem 7.3, we have

Corollary 7.4. Let δ be a level-1 representable symbolic 3-dissimilarity on X, and let
N = (N, t) be the level-1 representation of δ returned by algorithm Network-Popping
when applied to δ. Then N is weakly labelled if and only if, for any level-1 representation
N 0 = (N0, t0) of δ, the number of cycles in N equals the number of weakly labelled cycles
in N0. In particular, the number of cycles in N is minimal.
Corollary 7.5. Suppose N is a labelled level-1 network and N 0 is the level-1 represen-
tation for δN returned by algorithm Network-Popping. Then N 0 is isomorphic with
the labelled level-1 network returned by algorithm Transform when given N as input.
In particular, N and N 0 are isomorphic if and only if N is semi-discriminating, weakly
labelled, and partially resolved. Furthermore, if δ is a level-1 representable symbolic 3-
dissimilarity, then there exists an unique representation of δ that is semi-discriminating,
weakly labelled, and partially resolved.

8. Characterizing level-1 representable symbolic 3-dissimilarities

In this section, we present a characterization of level-1 representable symbolic 3-
dissimilarities on X in terms of level-1 representable symbolic 3-dissimilarities on subsets

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

23

Input: A labelled level-1 network N = (N, t) on X.
Output: A semi-discriminating, weakly labelled, partially resolved level-1 network

N 0 = (N0, t0) such that δN = δN 0.

1 set N 0 = N ;
2 while N 0 is not semi-discriminating or not weakly labelled or not partially resolved

Collapse all edges (u, v) satisfying t0(u) = t0(v) and such that either u and v
belong to the same cycle of N0 or do not belong to a cycle;
for All vertices v of a cycle C of degree 4 or more do

Deﬁne a new child w of v;
set t0(w) = t0(v);
if v = r(C) then

Redeﬁne the children of v in C as children of w;

do

3

4
5
6
7
8
9
10
11
12
13
14
15
16
17
18 end

end
else

end

Redeﬁne the children of v outside of C as children of w;

end
for All cycles C of N0 such that (r(C), h(C)) is an edge of N0 do

Remove the edge (r(C), h(C));

end
Remove all vertices of degree 2;

Algorithm 5: Transform

of X of size |X| − 1 (Theorem 8.3). Combined with the fact that algorithm Network-
Popping has polynomial run time, this suggests that Network-Popping might lend
itself to studies involving large data sets using a Divide-and-Conquer approach.

At the heart of the proof of our characterization lies the following technical lemma
which concerns the question under what circumstances the restriction of a level-1 rep-
resentable symbolic 3-dissimilarity δ on X is itself level-1 representable. Central to its
proof is the fact that |X| 6= 4 since, in general, a symbolic 3-dissimilarity δ on a set X
of size 4 need not be level-1 representable but the restriction of δ to any subset of size 3
is level-1 representable. An example for this is furnished by the symbolic 3-dissimilarity
δ on X = {x, y, z, u}, given by δ(x, y, z) = δ(y, z, u) = δ(x, y) = δ(y, z) = δ(z, u) 6=
δ(x, z) = δ(x, u) = δ(y, u) = δ(x, z, u) = δ(x, y, u).
Sz, and Sy made in algorithm Build-Cycle, we have the following result.
Lemma 8.1. Suppose δ is a symbolic 3-dissimilarity on X satisfying Properties (P1),
(P2), (P4), and (P6), x||yz is the δ-tricycle chosen in line 2 of algorithm Build-Cycle,
and i ∈ {y, z}. If u, w ∈ Si are joined by a direct path from u to w in T D(Si, x), then
either (u, w) is a directed edge of T D(Si, x) or there exists v ∈ Si such that both directed
edges (u, v) and (v, w) are contained in T D(Si, x).

Using the assumptions and deﬁnitions for the elements x, y, and z, and the sets H,

24

K.T. HUBER, G. E. SCHOLZ

Proof. By symmetry, we may assume i = y. Suppose there exists a directed path
v0 = u, v1, . . . , vk, vk+1 = w, some k ≥ 0, from u to w in T D(Sy, x) and that (u, w) is
not a directed edge on that path. Then k ≥ 1 and, so, v1 6∈ {u, w}. It suﬃces to show
that (v1, w) is a directed edge of T D(Sy, x).
Observe ﬁrst that, in view of Property (P6), (w, u) is not a directed edge in T D(Sy, x)
as otherwise T D(Sy, x) would contain a directed cycle. Combined with the deﬁnition of
Sy it follows that either x|uw is a δ-triplet or we have a δ-fork on {x, u, w}. In either
case, δ(u, x) = δ(w, x) holds. Since (u, v1) is a directed edge in T D(Sy, x), we also have
that xv1|u is a δ-triplet. Hence, δ(v1, x) 6= δ(x, u) = δ(w, x) and so we cannot have a
δ-fork on {x, w, v1}. Since, in view of Property (P4), we cannot have a δ-tricycle on
{x, w, v1} either δ(w, v1) = δ(w, x) or δ(w, v1) = δ(v1, x) follows.
If the ﬁrst equality holds, then v1x|w is a δ-triplet and, so, (w, v1) is a directed edge
in T D(Sy, x). Consequently, the directed path v1, . . . , vk, w concatenated with that edge
forms a directed cycle in T D(Sy, x), which is impossible in view of Property (P6) holding.
Thus, δ(w, v1) = δ(v1, x) must hold. Consequently, wx|v1 is a δ-triplet and, so, (v1, w)
(cid:3)
is an edge in T D(Sy, x), as required.
To establish the main result of this section (Theorem 8.3), we need to be able to
distinguish between the sets deﬁned in lines 8 and 9 of algorithm Build-Cycle when
given a symbolic 3-dissimilarity δ on X and the restriction δ|Y of δ to a subset Y ⊆ X
with |Y | ≥ 3. To this end, we augment for a symbolic 3-dissimilarity κ on X the
deﬁnition of those sets by writing Si(κ) rather than Si, i = y, z.
Observe ﬁrst that if δ is level-1 representable and Y ⊆ X such that |Y | ≥ 3, then the
restriction δ|Y of δ to Y is clearly level-1 representable. Indeed, a level-1 representation
N (δ|Y ) of δ|Y can be obtained from a level-1 representation N (δ) of δ using the following
2-step process. First, remove all leaves in X − Y and their respective incoming edges
from N (δ) and then suppress all resulting degree two vertices. Next, apply algorithm
Transform to the resulting network. This begs the question of when level-1 represen-
tations of symbolic 3-dissimilarities on subsets of X give rise to a level-1 representation
of a symbolic 3-dissimilarity on X. To answer this question which is the purpose of
Theorem 8.3 we require the next result.
Proposition 8.2. Let δ be a symbolic 3-dissimilarity on X. Then the following state-
ments hold.
(i) If |X| ≥ 6 and δ does not satisfy Property (Pi), i ∈ {1, 2, . . . , 8}, then there exists
some Y ⊆ X with 3 ≤ |Y | ≤ 5 such that that property is also not satisﬁed by
δ|Y .
(ii) If |X| ≥ 6 and δ is not level-1 representable then there exists some Y ⊆ X with
3 ≤ |Y | ≤ 5 such that δ|Y is also not level-1 representable.

Proof. (i) The proposition is straight-forward to show for Properties (P1) and (P2), since
they involve three and four elements of X, respectively. Note that to see Property (Pi),
3 ≤ i ≤ 8, we may assume without loss of generality that Properties (Pj), 3 ≤ j ≤ i− 1,
are satisﬁed by δ. For ease of readability, we put Sy := Sy(δ).
If δ does not satisfy Property (P3) then there exists a connected component C of C(δ)
and δ-tricycles τ, τ0 ∈ V (C) such that δ(L(τ)) 6= δ(L(τ0)). Without loss of generality,
we may assume that τ and τ0 are adjacent. Then |L(τ) ∩ L(τ0)| = 2. Let x, y, z ∈ X

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

y(δ|U) as w 6∈ S0

Now assume that the ﬁrst part of Property (P4) does not hold for δ, that is, S0

25
such that τ = x||yz. Then either τ0 = x0||yz or τ0 = x||yz0 where x0, z0 ∈ X. But then
Property (P3) is not satisﬁed either for δ restricted to the 5-set Z = {x, y, z, x0, z0}.
For the remainder, let (H, R0) denote the pair returned by algorithm Find-Cycles
when given δ and let x ∈ H and y, z ∈ R0 such that x||yz is a vertex in the connected
component C of C(δ) corresponding to (H, R0). Suppose δ does not satisfy Property (P4).
Assume ﬁrst that the second part of Property (P4) is not satisﬁed. Then if there exists
any element u contained in H ∩ Sy or in H ∩ Sz or in Sz ∩ Sy then u is also contained in
the corresponding intersections involving the sets Sy(δ|Z) ⊆ Sy and Sz(δ|Z) ⊆ Sz found
by Build-Cycle in its lines lines 8 and 9 for δ restricted to Z = {x, y, z, u}. Thus, the
second part of Property (P4) does not hold for δ|Z.
i 6= A :=
{w ∈ Si : δ(w, x) 6= δ(y, z)}. By symmetry, we may assume without loss of generality
y ⊆ A clearly holds there must exists some w ∈ A − S0
that i = y. Then since S0
y.
Put U = {x, y, z, w}. Then w 6∈ S0
y. However we clearly have that
w ∈ Sy(δ|U) and δ|U(w, x) 6= δ|U(y, z). Thus, the ﬁrst part of Property (P4) is not
satisﬁed with δ replaced by δ|U.
If δ does not satisfy Property (P5) then since y ∈ R := H ∪ Sy ∪ Sz it follows for
u := y and v and w as in the statement of Property (P5) that the restriction of δ to
{x, u, z, v, w} does not satisfy Property (P5) either.
If δ does not satisfy Property (P6) then either (a) there exist elements u, u0 ∈ H such
that T D(Sy, u) and T D(Sy, u0) are not isomorphic or (b) there exists some u ∈ H such
that T D(Sy, u) has a directed cycle C.
Assume ﬁrst that Case (a) holds. Then there must exist distinct vertices v and w
in Sy such that (v, w) is a directed edge in T D(Sy, u) but not in T D(Sy, u0). With
Z = {v, u, u0, w, z} it follows that Sv(δ|Z) = {v, w}. Since the directed edge (v, w) is
clearly contained in the TopDown graph T D({v, w}, u) associated to δ|Z but not in the
TopDown graph T D({v, w}, u0) associated to δ|Z, Property (P6) is not satisﬁed for δ|Z.
Thus, Case (b) must hold. In view of Proposition 5.4(i), we may assume that the size
of C is three. Hence, the subgraph G of T D(Sy, u) induced by Z = V (C) ∪ {z, u} also
contains a cycle of length 3. Since G coincides with the TopDown graph T D(V (C), u)
for δ|Z and |Z| = 5 holds, it follows that δ|Z does not satisfy Property (P6).
If δ does not satisfy Property (P7) then there must exist undirected edges e = {a, b}
and e0 = {a0, b0} in CL(H, Sy, Sz) such that δ(a, b) 6= δ(a0, b0). Then for at least one of
e and e0, say e, we must have that δ(a, b) 6= δ(y, z). Put Z = {x, y, z, a, b}. Then since
{y, z} is also an undirected edge in CL(H, Sy(δ|Z), Sz(δ|Z)) it follows that δ|Z does not
satisfy Property (P7) either.
Finally, suppose that δ does not satisfy Property (P8). Considering both alternatives
in the statement of Property (P8) together, there must exist vertices u ∈ Sy and v, w ∈
Sy∪ H such that both (u, v) and (u, w) are directed edges of CL(H, Sy, Sz) and δ(u, v) 6=
δ(u, w). Independent of whether v, w ∈ Sy or v, w ∈ H or v ∈ Sy and w ∈ H, it follows
that either δ(u, x) 6= δ(u, v) or δ(u, x) 6= δ(u, w). Assume without loss of generality that
δ(u, x) 6= δ(u, v). Note that (u, x) is also a directed edge in CL(H, Sy, Sz).
If v ∈ H, then δ|Z does not satisfy Property (P8) for Z = {x, y, z, u, v}. So assume
v 6∈ H. Then v ∈ Sy. Since (u, v) is a directed edge in CL(H, Sy, Sz) it follows that
there exists a directed path P from u to v in T D(Sy, x). By Lemma 8.1, either (a) P

K.T. HUBER, G. E. SCHOLZ

26
has a single directed edge or (b) there exists some v1 ∈ Sy such that both (u, v1) and
(v1, v) are directed edges of T D(Sy, x).
If Case (a) holds, then δ|Z does not satisfy Property (P8) for Z = {x, y, z, u, v}.
So assume that Case (b) holds. Then δ|Z0 does not satisfy Property (P8) for Z0 =
{x, y, z, u, v, v1}. Since the deﬁnition of T D(Sy, x) implies that xv|v1 is a δ-triplet, it
follows that δ(x, v) 6= δ(x, v1). Hence, either δ(v, x) 6= δ(v, z) or δ(v1, x) 6= δ(v, z). By
Properties (P3) and (P4) it follows in the ﬁrst case that x||vz is a δ-tricycle, and that
x||v1z is a δ-tricycle in the second case. Thus, either v or v1 can play the role of y in τ.
Consequently, δ restricted to Z = Z0 − {y} does not satisfy Property (P8).
(ii) This is a straight-forward consequence of Theorem 7.1 and Proposition 8.2(i). (cid:3)
Theorem 8.3. Let δ be a symbolic 3-dissimilarity on a set X such that |X| ≥ 6. Then δ
is level-1 representable if and only if for all subsets Y ⊆ X of size |X|−1, the restriction
δ|Y is level-1 representable.
Proof. Suppose ﬁrst that δ is level-1 representable. Then, by the observation preceding
Proposition 8.2, δ|Y is level-1 representable, for all subsets Y ⊆ X of size |X| − 1.
Conversely, suppose that X is such that for all subsets Y ⊆ X of size |X| − 1, the
restriction δ|Y is level-1 representable but that δ is not level-1 representable. Then, by
Proposition 8.2 there exists a subset Y ⊆ X with |Y | ∈ {3, 4, 5} such that δ|Y is also
not level-1 representable. But then δ restricted to any subset Z of X size |X| − 1 that
(cid:3)
contains Y also is not level-1 representable which is impossible.

9. Conclusion

In this paper, we have introduced the novel Network-Popping algorithm. It takes
as input an orthology relation, formalized as a symbolic 3-dissimilarity δ, and ﬁnds, in
polynomial time, a level-1 representation of δ precisely if such a representation exists.
In addition to this representation being a discriminating symbolic representation of δ
precisely if such a tree is supported by δ, Network-Popping enjoys several other
attractive properties. As part of our analysis of Network-Popping, we characterize
level-1 representable symbolic 3-dissimilarities δ in terms of eight natural properties that
δ must satisfy. Last-but-not-least, we also characterize a level-1 representable symbolic
3-dissimilarity δ on some set X with |X| ≥ 6 in terms of level-1 representable orthology
relations induced by δ on subsets of X of size |X| − 1. Combined with the polynomial
run-time of Network-Popping this suggests that it could potentially be applied to
large data sets within a Divide-and-Conquer framework thus providing an alternative to
tree-based reconciliation or error correction approaches for orthology relations.

However a number of open questions remain. For example can other types of phylo-
genetic networks be used to also represent orthology relations. Interesting types of such
networks might be tree-child networks [14] as they are uniquely determined by the trinets
they induce and also regular networks [15] as they are known to be uniquely determined
by the phylogenetic trees they induce, a property that is not shared by phylogenetic
networks in general [4]. For those networks it would also be interesting to understand
how the representation of an orthology relation in terms of those trees relates to the way
such a relation is represented by the labelled network displaying the trees. Motivated
by the point made in [3, Chapter 12] on k-estimates, k ≥ 3, already mentioned above

BEYOND REPRESENTING ORTHOLOGY RELATIONS BY TREES

27
it might also be interesting to investigate if symbolic k-dissimilarities for k ≥ 4 lend
themselves as a useful formalization of orthology relations.

A further question concerns the fact that by evoking parsimony we only distinguish
between 3 types of trinets associated to an orthology relation. Thus it might be interest-
ing to investigate what can be done if this framework is replaced by e. g. a probabilistic
one which assigns probability values to the trinets.

Acknowledgements

The authors would like to thank M. Taylor for stimulating discussions on orthology

relations.

References

[1] A. M. Altenhoﬀ and C. Dessimoz. Phylogenetic and functional assessment of orthologs inference

projects and methods. PLoS Computational Biology, 5:e1000262, 2009.

[2] S. Böcker and A. W. M. Dress. Recovering symbolically dated, rooted trees from symbolic ultra-

metrics. Advances in Mathematics, 138:105–125, 1998.

[3] J. Felsenstein. Inferring Phylogenies. Sinauer Associates, 2003.
[4] P. Gambette and K. T. Huber. On encodings of phylogenetic networks of bounded level. Journal of

Mathematical Biology, 61(1):157–180, 2012.

[5] M. Hellmuth, M. Hernandez-Rosales, K. T. Huber, V. Moulton, P. F. Stadler, and N. Wieseke.
Orthology relations, symbolic ultrametrics and cographs. Journal of Mathematical Biology, 66(1-
2):399–420, 2013.

[6] M. Hellmuth and N. Wieseke. On symbolic ultrametrics, cotree representation, and cograph edge

decomposition and partition. Computing and Combinatorics, 9198:609–623, 2015.

[7] K. T. Huber and V. Moulton. Encoding and constructing 1-nested phylogenetic networks with

trinets. Algorithmica, 66(3):714–738, 2013.

[8] K. T. Huber, L. J. J. van Iersel, V. Moulton, and C. Scornavacca. Reconstructing phylogenetic

level-1 networks from nondense binet and trinet sets. Algorithmica, in press.

[9] D. Huson, R. Rupp, and C. Scornavacca. Phylogenetic Networks. Cambridge University Press, 2010.
[10] M. Kordi and M. Bansal. On the complexity of duplication-transfer-loss reconciliation with non-
binary gene trees. IEEE/ACM Transactions on Computational Biology and Bioinformatics, in press.
[11] M. Lafond and N. El-Mabrouk. Orthology relation and gene tree correction: complexity results. In

WABI 2015, Algorithms in Bioinformatics, volume 9289 of LNCS, pages 966–79, 2015.

[12] L. Nakhleh. Computational approaches to species phylogeny inference and gene tree reconciliation.

Trends in Ecology & Evolution, 28(12):719–728, 2013.

[13] C. Semple and M. Steel. Phylogenetics. Oxford University Press, 2003.
[14] L. J. J. van Iersel and V. Moulton. Trinets encode tree-child and level-2 phylogenetic networks.

Journal of Mathematical Biology, 68(7):1707–1729, 2014.

[15] S. Willson. Regular networks are determined by their trees. IEEE/ACM Transactions on Compu-

tational Biology and Bioinformatics, 8:785–796, 2011.

