Low-Complexity Iterative Sinusoidal Parameter

Estimation

Jean-Marc Valin⋆⋄, Daniel V. Smith†, Christopher Montgomery‡⋄, Timothy B. Terriberry⋄

⋆CSIRO ICT Centre, Australia

†CSIRO Tasmanian ICT Centre, Australia

‡RedHat Inc., USA

⋄Xiph.Org Foundation

{jean-marc.valin,daniel.v.smith}@csiro.au

{xiphmont,tterribe}@xiph.org

6
1
0
2

 
r
a

M
6

 

 
 
]

D
S
.
s
c
[
 
 

1
v
4
2
8
1
0

.

3
0
6
1
:
v
i
X
r
a

Abstract— Sinusoidal parameter estimation is a
computationally-intensive task, which can pose prob-
lems for real-time implementations. In this paper,
we propose a low-complexity iterative method for
estimating sinusoidal parameters that is based on the
linearisation of the model around an initial frequency
estimate. We show that for N sinusoids in a frame of
length L, the proposed method has a complexity of
O (LN ), which is signiﬁcantly less than the matching
pursuits method. Furthermore, the proposed method
is shown to be more accurate than the matching
pursuits and time frequency reassignment methods in
our experiments.

I. INTRODUCTION

The sinusoidal model is increasingly being used
in signal processing applications such as speech syn-
thesis [1], speech coding [2], and audio coding [3].
Estimating the model parameters often represents a
signiﬁcant fraction of the overall complexity of these
applications. However, many real-time applications
require a very low-complexity estimation algorithm.
This paper proposes a new procedure based on the
linearisation of the model around an initial frequency
estimate. Parameters are optimised using an iterative
method with fast convergence. We show that for typ-
ical conﬁgurations, it is over 20 times less complex
than matching pursuits [4].

We start by introducing sinusoidal modelling and
prior art in Section II. Section III discusses frequency
estimation and our proposed linearisation. In Section
IV, we present a low-complexity iterative solver for
estimating sinusoidal parameters. Results are presen-

0 c(cid:13)2007 IEEE. Personal use of this material is permitted.
Permission from IEEE must be obtained for all other uses, in
any current or future media, including reprinting/republishing
this material for advertising or promotional purposes, creating
new collective works, for resale or redistribution to servers or
lists, or reuse of any copyrighted component of this work in
other works.

ted in Section V with a discussion and Section VI
concludes this paper.

II. SINUSOIDAL PARAMETER ESTIMATION

A general sinusoidal model that considers both
amplitude and frequency modulation can be used to
approximate a signal ˜x (t) as:

˜x (t) =

N

Xk=1

Ak (t) cos(cid:18)Z t

0

ωk (t) dt + φk(cid:19) ,

(1)

where Ak (t) is the time-varying amplitude, ωk (t)
is the time-varying frequency and φk is the initial
phase. The model in (1) has limited practical use
because it is very complex and has an inﬁnite number
of ways to approximate x (t). Using discrete time n
and normalised frequencies θk over a ﬁnite window
h (n) yields a simpler model:

˜x (n) = h (n)

N

Xk=1(cid:16)Ak + A

′

kn(cid:17) cos (θkn + φk) ,

(2)
′ is the ﬁrst time derivative of the amplitude,

where A
or even

x (n) = h (n)

N

Xk=1

Ak cos (θkn + φk)

(3)

if we do not want to model amplitude variation within
a frame. Although simpler, the models in (2) and (3)
are still difﬁcult to estimate because they involve a
non-linear optimisation problem.

Several methods exist for estimating sinusoidal
parameters. The standard DFT over a rectangular
window is limited by both frequency leaking (side-
lobes from the rectangular window) and its poor
frequency resolution equal to π/L rad/s for a frame
of length L.

By deﬁning an over-complete dictionary of sinus-
oidal bases, matching pursuits methods [4] make it

possible to increase the resolution arbitrarily, while
allowing for a window in its basis functions. How-
ever, being a greedy algorithm, matching pursuits
behaves sub-optimally when the basis functions used
are not orthogonal [5], which is usually the case for
sinusoids of arbitrary frequency over a ﬁnite win-
dow length. The orthogonality problem of matching
pursuits can be mainly overcome by further non-
linear optimisation as in [5]. However this requires

a signiﬁcant increase in complexity (such as O(cid:0)N 4(cid:1)

terms).

Another approach is the time frequency (TF) re-
assignment method, which can be used to improve
estimates of frequency localisation within various
forms of TF representations [6], including spectro-
grams [6], [7]. In the case of the spectrogram, phase
information from the short time Fourier transform
(STFT) is exploited to move energy away from the
centre of the frequency bin (t, w) to the centre of
gravity of the spectral distribution [6]. Hence, this
approach can be used to reduce the inaccuracy of
frequency estimation in a quantised TF representation
that is reliant upon the temporal resolution of the
window. A drawback to this approach is that it is
not well suited to noisy signal conditions, as energy
becomes concentrated in noise dominated regions
[7].

Other work, such as [1], [8] focuses on the estima-
tion of sinusoidal partials in harmonic signals. While
these methods generally have a low complexity, they
are not applicable to non-harmonic signals.

III. LINEARISED MODEL

As another way of obtaining accurate frequency
estimation, we propose rewriting the sinusoidal
model in (2) as

˜x (n) = h (n)

N

Xk=1(cid:16)Ak + nA

′

k(cid:17) ·

cos ((θk + ∆θk) n + φk) ,

(4)

where θk is an initial estimate of the frequencies and
∆θk is an unknown correction to the initial estimate.
When both the amplitude modulation parameter A′
k
and the frequency correction ∆θk are small, we show
in Appendix A that (4) can be linearised as the sum
of four basis functions

˜x (n) = h (n)

N

Xk=1

ck cos θkn + sk sin θkn

+ dkn cos θkn + tkn sin θkn ,

(5)

with

ck =Ak cos φk ,
sk = − Ak sin φk ,
dk =A
tk = − A

′

′

k cos φk − Ak∆θk sin φk ,

k sin φk − Ak∆θk cos φk .

(6)
(7)
(8)
(9)

From now on, unless otherwise noted, bold up-
percase symbols (A) denote matrices, bold lower
case symbols (ai) denote the columns of the matrix
and italic symbols (ai,j) denote the elements of the
matrix. We can express (5) in matrix form as

˜x =Aw ,

A =hAc, As, Ad, Ati ,
w = [c, s, d, t]T .

(10)

(11)

(12)

where the basis components Ac, As, As and At are
deﬁned as

ac
n,k =h (n) cos θkn ,
as
n,k =h (n) sin θkn ,
ad
n,k =h (n) n cos θkn ,
at
n,k =h (n) n sin θkn .

(13)
(14)
(15)
(16)

The best ﬁt can then be obtained through a least-
square optimisation, by posing

∂
∂w

kAw − xhk2 = 0 ,

(17)

where xh is the windowed input signal. This leads
to the well known solution

w = (cid:0)AT A(cid:1)−1

AT xh .

(18)

Once all linear parameters in (5) are found, the real
sinusoidal parameters can be retrieved by solving the
system (6)-(9):

Ak = qc2

k + s2

k ,

φk = arg (ck − sk) ,

′

A

k =

∆θk =

dkck + sktk

Ak

dksk − tkck

A2
k

,

.

(19)

(20)

(21)

(22)

IV. ITERATIVE SOLVER

Though it is far less computationally demanding
than a classic non-linear solver, solving the linear
system (18) still requires a great amount of compu-
tation. In [8], a method was proposed to reduce that

complexity from O(cid:0)LN 2(cid:1) to O (N log N ), but only

for harmonic signals. In this paper, we propose an
O (LN ) solution without the restriction to harmonic
signals.

Our method uses an iterative solution based on the
assumption that matrix A is close to orthogonal, so
that

(cid:0)AT A(cid:1)−1

≈ diag(cid:26) 1

aT
1

a1

, . . . ,

1

aN(cid:27) = Φ .

aT
N

(23)

That way, an initial estimate can be computed as

w(0) = Φ−1AT xh

(24)

and then reﬁned as

where

˜wk

(i+1) = hw(i+1)

0

, . . . , w(i+1)
k−1 ,
k , . . . , w(i)
w(i)

N −1iT

.

(30)

We can further simplify the computation of (29) by
(i+1) changes for
noting that only one element of ˜wk
each step. We thus have

(25)

w(i+1)

k

= w(i)

k + aT

k

e(i+1)
k

,

(31)

(i+1)
k

where e
and is computed recursively as

is the current error on the approximation

e

(i+1)
k

=

e

(i+1)
k−1 −
(cid:16)w(i+1)

e

(i)
N




k−1 − w(i)

k−1(cid:17) ak−1

, k 6= 0

.

, k = 0

(32)
The resulting computation is summarised in Al-
gorithm 1. If there is only one iteration, then al-
gorithm 1 is equivalent to a simpliﬁed version of
the matching pursuits algorithm where the atoms
(frequency of the sinusoids) have been pre-deﬁned
before the search. From this point of view, the pro-
posed method relaxes the orthogonality assumption
made by the matching pursuits method.

The main difference with the Jacobi method is
the Gauss-Seidel method includes partial updates of
the error term after each extracted sinusoid. The
convergence also follows intuitively from the fact
that each individual step is an exact projection that
is guaranteed to decrease the current error e — or
at worst leave it constant if the optimal solution has
been reached. Also, because the error term is updated
after each component k, placing the highest-energy
terms ﬁrst speeds up the optimisation. For this reason,
we ﬁrst include the cos θkn and the sin θkn terms,
followed by the n cos θkn and the n sin θkn terms.
We have found that this usually reduces the number
of iterations required for convergence. The resulting
algorithm typically converges in half as many iter-
ations as alternative conjugate gradient techniques,
such as LSQR [10], which cannot take advantage of
the diagonal dominance of the system.

If in (13)-(16) we (arbitrarily) choose n = 0 to lie
in the centre of the frame (between sample L/2 and
k vectors
sample L/2 + 1 if L is even), the ac
all have even symmetry, while as
k all have odd
symmetry. This leads to the following orthogonality

k and at

k and ad

w(i+1) = w(i) + Φ−1AT (cid:16)xh − ˜x(i)(cid:17)

= w(i) + Φ−1AT (cid:16)xh − Aw(i)(cid:17) .

It turns out that the iterative method described in
(24)-(25) is strictly equivalent to the Jacobi iterative
method. The complexity of the algorithm is reduced
to O(LM N ), where M is the number of iterations
required for acceptable convergence. Unfortunately,
while the Jacobi method is generally stable for most
matrices A obtained in practice, convergence is not
guaranteed and depends on the actual frequencies θk.

A. Gauss-Seidel Method

An alternate to the Jacobi method is the Gauss-
Seidel method, which has the main advantage that
it is guaranteed to converge in this case because the
matrix AT A is a symmetric, positive deﬁnite matrix
[9]. Because the columns of A are usually nearly
orthogonal, AT A is strongly diagonally dominant
and the Gauss-Seidel method converges quickly. The
linear system can be expressed as

where

Rw = b ,

R = AT A ,
b = AT xh .

(26)

(27)
(28)

If we assume that matrix A has been pre-normalised
ak = 1, ∀k), the Gauss-Seidel algorithm is ex-
(aT
k
pressed as

w(i+1)

k

=bk −Xj<k

rk,jw(i+1)

j

rk,jw(i)

j

−Xj>k
ajw(i+1)

j

aT
k

aT
k

−Xj>k
ajw(i+1)

j

aT
k

xh −Xj<k
ajw(i)

j

=aT
k

xh −Xj<k
k + aT

k

=w(i)

aT
k

−Xj≥k
=w(i)
k + aT

=w(i)

k + aT

k

k (cid:16)A ˜wk
xh − aT
k (cid:16)xh − A ˜wk

(i+1)(cid:17)
(i+1)(cid:17) ,

ajw(i)

j

(29)

Algorithm 1 Iterative linear optimisation

Algorithm 2 Non-linear iterative optimisation

Compute basis functions (13)-(16).
w(0) ← 0
e ← xh
for all iteration i=1. . . M do

for all sinusoid component k = 1 . . . 4N do

k

e

k ← aT

∆w(i)
e ← e − ak∆w(i)
k ← w(i−1)
w(i)
end for

k

k
+ ∆w(i)
k

end for
for all sinusoid k = 1 . . . N do

k

k + s2

Ak ← qc2
φk ← arg (ck − sk)
k ← dkck+sktk
A′
∆θk ← dksk−tkck

Ak

A2

k

end for

properties:

ki = 0 ,

hac

k, as
Dac
k, ad
k, as
(cid:10)at
Dat
k, ad

kE = 0 ,
k(cid:11) = 0 ,
kE = 0 .

(33)

(34)

(35)

(36)

(37)

(38)

(39)

(40)

Because the even and odd bases are orthogonal to
each other, we can optimise them separately as

AevenT x ,

AoddT x ,

[c, t]T =(cid:0)AevenT Aeven(cid:1)−1
[d, s]T =(cid:16)AoddT Aodd(cid:17)−1
Aeven =(cid:2)Ac, At(cid:3) ,
Aodd =hAd, Asi .

Not only does the orthogonality accelerate conver-
gence, but
the error e into
half-length even and odd components, reducing the
complexity of each iteration by half.

it allows us to split

B. Non-Linear Optimisation

If the initial frequency estimates θ0

k are close to
the real frequency of the sinusoids θk, then the error
caused by the linearisation (5) is very small. In
this case, Algorithm 1 should result in a value of
θ0
k + ∆θk that is even closer to the real frequencies.
However, if the initial estimates deviate signiﬁcantly
from the real values, then it may be useful to restart
the optimisation from the new frequency estimates.
Repeating the operation several times, we obtain a
non-linear iterative solver for Ak, θk, A

k and φk.

We have found that it is not necessary to wait
for Algorithm 1 to converge before updating the
frequencies θk. We can let both the linear part and

′

k] ← 0

∀k, θk = initial f requency estimate
∀k, [Ak, φk, A′
w(0) ← 0
e ← xh
for all non-linear iteration i=1. . . M do

for all sinusoid k do

ck ← Ak cos φk
sk ← −Ak sin φk
dk ← A′
tk ← −A′

k cos φk
k sin φk

end for
e ← x − Aw(i−1) (result of the last iteration
with updated frequency)
for all sinusoid component k = 1 . . . 4N do

k

e

k ← aT

∆w(i)
e ← e − ak∆w(i)
k ← w(i−1)
w(i)
end for
for all sinusoid k = 1 . . . N do

k
+ ∆w(i)
k

k

k

k + s2

Ak ← qc2
k ← dkck+sktk
A2

φk ← arg (ck − sk)
A′
θk ← θk + dksk−tkck

Ak

k

end for

end for

the non-linear part of the solution run simultaneously.
To do that, we must ﬁrst subtract the solution of
the previous iteration before restarting the linear
optimisation.

The non-linear method we propose is detailed
in Algorithm 2 and shares some similarities with
the Gauss-Newton method [11]. However, because
the reparametrisation in (6)-(9) allows updates to
Ak, A′ and φk to be incorporated into the linear
model immediately when solving the normal equa-
tions, convergence is greatly improved compared to
a standard Gauss-Newton iteration in the original
parameters. Just like Algorithm 1, it is possible to
reduce the complexity of Algorithm 2 by half by
taking advantage of the even-odd symmetry of the
basis functions.

V. RESULTS AND DISCUSSION

In this section, we characterise the proposed al-
gorithm and compare it to other sinusoidal parameter
estimation algorithms. We attempt to make the com-
parison as fair as possible despite the fact that the
methods we are comparing do not have exactly the
same assumptions or output. Both the linear and the
non-linear versions of the proposed algorithm are

)
s
/
d
a
r
(
 
r
o
r
r
e
 
S
M
R
y
c
n
e
u
q
e
r
F

 

 0.1

 0.01

 0.001

 1e-04

 1e-05

 1e-06

 1e-07

 1e-08

 0

alpha=0.5
alpha=0.8
alpha=1.0
alpha=1.2

 5

 10

 15

 20

Iteration number

)

B
d
(
 
r
o
r
r
e
 
S
M
R

 
l
a
u
d
i
s
e
R

 0

-10

-20

-30

-40

-50

-60

 0

linear
non-linear

 2

 4

 6

 8

 10

Number of iterations

Figure 1. Convergence of the non-linear optimisation procedure
for various values of α. For α = 1, convergence is achieved in
only 3 iterations. The ﬂoor at 2 × 10−8 rad/s is due to the ﬁnite
machine precision.

Figure 2. Reconstruction RMS error as a function of the number
of iterations in clean conditions (linear vs. non-linear)

evaluated. For all algorithms, we use a sine window

h(n) = cos π

n − (L + 1) /2

L

,

(41)

so that the result of applying the window to both
the input signal x and the basis functions ak is
equivalent to a Hanning analysis window. Unless
otherwise noted, we use a frame length L = 256.

A. Convergence

We ﬁrst consider the case of a single amplitude-
modulated sinusoid of normalised angular frequency
θ = 0.1π. We start with an initial frequency es-
timate of θ = 0.095π, which corresponds to an
error of slightly more than one period over the 256-
sample frames we use. The non-linear optimisation
Algorithm 2 is applied with different values of α.
The convergence speed in Figure 1 shows that for
α = 1, convergence becomes much faster than for
other values of α. This provides a strong indication
that the convergence of the algorithm is super-linear,
although we give no formal proof.

B. Chirps

We measure the frequency estimation accuracy
and the energy of the residual signal for known
signals. We use a synthetic signal that is the sum
of ﬁve chirps with white Gaussian noise. The
chirps have linear frequency variations starting at
0.05, 0.1, 0.15, 0.2, 0.25 rad/s and ending at
2.0, 2.2, 2.4, 2.6, 2.8rad/s, respectively. The relative
amplitudes of the chirps are 0 dB, -3 dB, -6 dB,
-9 dB, and -12 dB. The following algorithms are
considered:

• Time frequency reassignment (TFR),
• Matching pursuits (32x over-sampled diction-

ary) (MP),

• Proposed algorithm with linear optimisation

(linear), and

• Proposed algorithm with non-linear optimisation

(non-linear).

The time frequency reassignment method is imple-
mented as in [6]. The matching pursuits algorithm
uses a dictionary of non-modulated sinusoids with
a resolution of π/8192. We also compare to the
theoretical resolution obtained from the picking the
highest peaks in the DFT. To make sure that al-
gorithms are compared fairly, all algorithms are con-
strained to frequencies within one DFT bin of the
real frequency, i.e. there are no outliers.

Fig. 2 shows the RMS energy of the residual
(˜x − xh) as a function of the number of iterations
for both the linear optimisation and the non-linear
optimisation. The linear version converges after only
2 iterations, while the non-linear version requires 3
iterations. We use 3 iterations for both methods in
the experiments that follow.

Fig.3 shows the frequency RMS estimation error
as a function of the SNR for each of the four
algorithms. At very low SNR, all algorithms perform
similarly. However, as the SNR increases above 20
dB, matching pursuits stops improving. This is likely
due to the fact that the frequencies are not ortho-
gonal, which makes its greedy approach sub-optimal.
Both the proposed linear and non-linear approaches
provide roughly the same accuracy up to 30 dB,
after which the non-linear approach provides superior
performance. For this scenario, the only limitation of
the non-linear algorithm at inﬁnite SNR is the fact
that it does not account for frequency modulation
within a frame.

The amplitude estimation error is shown in Fig.
4. Although the behaviour of the amplitude error
is similar to that of the frequency estimation error,
the difference between the linear and the non-linear

)
s
/
d
a
r
(
 
r
o
r
r
e
 
S
M
R
n
o
i
t
a
m

 

i
t
s
e
 
y
c
n
e
u
q
e
r
F

 0.01

 0.001

 1e-04

 1e-05

linear
non-linear
MP
TFR
DFT

 0

 10

 20

 30

 40

 50

 60

 inf

)

B
d
(
 
r
o
r
r
e
 
S
M
R

 
l
a
u
d
i
s
e
R

-10

-15

-20

-25

-30

-35

-40

-45

-50

linear
non-linear
MP

 0

 10

 20

 30

 40

 50

 60

 inf

Signal-to-noise ratio (SNR) of the input signal

Signal-to-noise ratio (SNR) of the input signal

Figure 3. Frequency RMS estimation error as a function of the
SNR.

Figure 5. Reconstruction RMS error as a function of the SNR
(the input noise is not considered in the error).

)

B
d
(
 
r
o
r
r
e
 
S
M
R
 
n
o
i
t
a
m

i
t
s
e
 
e
d
u
t
i
l
p
m
A

-15

-20

-25

-30

-35

-40

-45

-50

-55

-60

-65

linear
non-linear
MP

 0

 10

 20

 30

 40

 50

 60

 inf

Signal-to-noise ratio (SNR) of the input signal

Figure 4. Amplitude RMS estimation error as a function of the
SNR.

optimisation algorithms is accentuated. The time fre-
quency reassignment algorithm is not included in the
comparison because it does not estimate amplitude.
Fig. 5 compares the reconstruction error for all
algorithms, except the time frequency reassignment
method, which cannot estimate the amplitude and
thus cannot provide a reconstructed signal. The re-
construction error is computed based on the non-
noisy version of the chirps. We observe performances
similar to the ones in Fig. 3, with the notable
exception that when it comes to reconstruction, the
non-linear optimisation is able to ﬁt the data much
more efﬁciently than the linear optimisation at high
SNR.

We also observe that

the performance of our
algorithm is slightly worse than that of matching
pursuits at low SNR. This can be explained by some
slight over-ﬁtting due to the fact that the proposed
algorithm also includes an amplitude modulation
term. The difference disappears if the amplitude
modulation term is forced to zero.

Overall, we observe from the experiment on chirps
that our proposed non-linear algorithm clearly out-
performs both matching pursuits and time frequency
reassignment. The linear version has overall slightly
better performance than the other methods, although
it does not perform as well as non-linear optimisa-
tion. In all cases (Fig. 3 to Fig. 5), all the algorithms
compared behave similarly. Their error at low SNR
is similar and the slope of the improvement is the
same. What differentiates the algorithms is how far
they improve with SNR before reaching a plateau.

C. Audio

We apply our proposed algorithm to a 90-second
collage of diverse music clips sampled at 48 kHz,
including percussive, musical, and amusical content.
In this case, we cannot compare to the matching
pursuits algorithm because the lack of ground truth
prevents us from forcing a common set of initial
sinusoid frequencies. We select the initial frequency
estimates required for the proposed algorithm using
peaks in the standard DFT.

The energy of the residual is plotted as a function
of the number of iterations in Fig. 6. Both algorithms
converge quickly and we can see that
the linear
optimisation only requires 2 iterations, while the non-
linear optimisation requires 3 iterations.

D. Algorithm complexity

In this section, we compare the complexity of
the proposed algorithms to that of other similar al-
gorithms. For the sake of simplicity, we discard some
terms that are deemed negligible, e.g., we discard

O (LN ) terms when O(cid:0)LN 2(cid:1) terms are present.

In Algorithm 1, we can see that each iteration
requires 8LN multiplications and 8LN additions.
Additionally, computation of the 4N basis functions
ak prior to the optimisation requires LN additions

)

B
d
(
 
n
o
i
t
c
u
d
e
r
 
l
a
u
d
i
s
e
R

 0

-2

-4

-6

-8

-10

-12

-14

-16

-18

-20

linear
non-linear

Algorithm
MP (slow)
MP (FFT)
linear (18)

non-linear ([5])
linear (proposed)
non-linear (prop.)

Complexity

4LN 2P

5

2 LN P log2 LP
64N 3 + 32LN 2
O (cid:0)N 4 + LN 2(cid:1)
(8M + 5) LN
(17M − 4) LN

Table I

Typical (Mﬂops)

3,300
1,300
900
>500∗

27
60

COMPLEXITY COMPARISON OF VARIOUS PARAMETER

ESTIMATION ALGORITHMS. ∗THE TYPICAL COMPLEXITY OF

[5] IS NOT GIVEN, BUT WE ESTIMATE IT TO BE GREATER

THAN 500 MFLOPS.

 0

 2

 4

 6

 8

 10

Number of iterations

Figure 6.
number of iterations.

Reduction in residual energy as a function of the

and 3LN multiplications. It is possible to further
reduce the complexity of each iteration by taking ad-
vantage of the fact that all of our basis functions have
either even or odd symmetry. By decomposing the
residual into half-length even and odd components,
only one of these components needs to be updated for
a given basis function. This reduces the complexity
of each iteration in Algorithm 1 by half without
changing the result. The complexity of each iteration
is thus 4LN multiplications and 4LN additions. For
M iterations, this amounts to a total of (8M + 5) LN
operations per frame.

The complexity of the proposed non-linear optim-
isation algorithm (Algorithm 2) is similar to that of
the linear version, with two notable exceptions. First,
because the frequency is changing for every iteration,
the basis functions need to be re-computed for every
iteration. Second, when starting a new iteration, the
residual must be updated using the new basis func-
tions. The total complexity is thus (17M − 4) LN
operations per frame (for a single iteration, the linear
and non-linear versions are strictly equivalent).

As a comparison a simple matching pursuits al-
gorithm that does not consider modulation requires
4LN 2P operations per frame, where P is the over-
sampling factor (i.e. increase over the standard DFT
resolution). If a fast (FFT-based) implementation of
the matching pursuits algorithm [5] is used, then the
complexity is reduced to 5/2LN P log2 LP .

Table I summarises the complexity of several
algorithms. Because the algorithms have different
dependencies on all the parameters, we also consider
the total complexity in Mﬂops for real-time estim-
ation of sinusoids in a typical scenario, where we
have

• frame length: L = 256,
• number of sinusoids: N = 20,
• oversampling: P = 32 (matching pursuits only),

• number of iterations: M = 2 (linear), M = 3

(non-linear),

• sampling rate: 48 kHz,
• frame offset: 192 samples (25% overlap).

It is clear from Table I that the proposed algorithms,
both linear and nonlinear, reduce the complexity by
more than an order of magnitude when compared
to matching pursuits algorithms. One must of course
take into account that while matching pursuits can
estimate the sinusoidal parameters directly from the
input signal, the proposed method requires initial
frequency estimates.

VI. CONCLUSION

We have presented a method for estimating si-
nusoidal parameters with very low complexity. Our
proposed method is based on a linearisation of the si-
nusoidal model, followed by an iterative optimisation
of the parameters. The algorithm converges quickly,
in only 2 iterations for the linear optimisation and
3 iterations for the non-linear optimisation. It was
also shown that the frequency estimation of the non-
linear version of our algorithm is more accurate than
the matching pursuits and time frequency reassign-
ment methods for the experiment. In addition, we
calculated that the complexities of our algorithms
were considerably lower than the matching pursuits
algorithms.

Like other non-linear optimisation methods, the
method we propose requires a good initial estim-
ate of the sinusoids’ frequencies. Therefore, low-
complexity sinusoid selection is another important
problem to investigate for improving sinusoidal para-
meter estimation. Also, for applications that require
it, the proposed algorithm could easily be extended
to estimate the frequency modulation within a frame.

APPENDIX A

LINEARISATION OF THE SINUSOIDAL MODEL

Let us consider a sinusoidal model with piecewise
linear amplitude modulation and a frequency offset

(from an initial estimate):

˜x (n) =

N

Xk=1(cid:16)Ak + nA

′

k(cid:17) ·

cos ((θk + ∆θk) n + φk) ,

(42)

where θk is known in advance and ∆θk is considered
small. Using trigonometric identities, we can expand
the sum in the cosine term as

N

N

˜x (n) =

−

=

−

−

−

Xk=1(cid:16)Ak + nA
Xk=1(cid:16)Ak + nA

N

′

k(cid:17) cos φk cos (θk + ∆θk) n
k(cid:17) sin φk sin (θk + ∆θk) n

′

(43)

N

Xk=1(cid:16)Ak + nA
Xk=1(cid:16)Ak + nA
Xk=1(cid:16)Ak + nA
Xk=1(cid:16)Ak + nA

N

N

′

′

k(cid:17) cos φk cos ∆θkn cos θkn
k(cid:17) cos φk sin ∆θkn sin θkn
k(cid:17) sin φk cos ∆θkn sin θkn
k(cid:17) sin φk sin ∆θkn cos θkn .

′

′

(44)

In the linearisation process, we further assume that
kn ≪ Ak, so we can neglect all
∆θkn ≪ 1 and A′
second order terms and above. This translates into
the following approximations:

sin ∆θkn ≈ ∆θkn ,
cos ∆θkn ≈ 1 ,
k sin ∆θkn ≈ 0 .

′

nA

(45)
(46)
(47)

When substituting the above approximations into
(44), we obtain:

′

k(cid:17) cos φk cos θkn

Ak cos φk∆θkn sin θkn

˜x (n) =

−

−

−

N

N

Xk=1(cid:16)Ak + nA
Xk=1
Xk=1(cid:16)Ak + nA
Xk=1

N

N

′

k(cid:17) sin φk sin θkn

Ak sin φk∆θkn cos θkn .

(48)

Reordering the terms in (48), leads to the following
formulation:
N

Ak cos φk cos θkn

Ak sin φk sin θkn

˜x (n) =

−

+

−

N

Xk=1
Xk=1
Xk=1(cid:16)A
Xk=1(cid:16)A

N

N

′

k cos φk − Ak∆θk sin φk(cid:17) n cos θkn
k sin φk + Ak∆θk cos φk(cid:17) n sin θkn ,

′

(49)

which is a linear combination of four functions.
The result in (49) is in fact equivalent to a ﬁrst-
order Taylor expansion. Keeping second order terms
would allow us to model both the ﬁrst derivative of
the frequency with respect to time and the second
derivative of the amplitude.

REFERENCES

[1] Y. Stylianou, “Applying the harmonic plus noise model
in concatenative speech synthesis,” IEEE Transactions on
Speech and Audio Processing, vol. 9, no. 1, pp. 21–29,
2001.

[2] P. Hedelin, “A tone oriented voice excited vocoder,” in
Proc. IEEE Intl. Conf. Acoust., Speech, Signal Processing,
vol. 6, Apr. 1981, pp. 205–208.

[3] S. N. Levine, “Audio representations for data compression
and compressed domain processing,” Ph.D. dissertation,
Stanford University, 1998.

[4] S. Mallat and Z. Zhang, “Matching pursuits with time-
frequency dictionaries,” IEEE Transactions on Signal Pro-
cessing, vol. 41, no. 12, pp. 3397–3415, 1993.

[5] K. Vos, R. Vaﬁn, R. Heusdens, and W. B. Kleijn, “High-
quality consistent analysis-synthesis in sinusoidal coding,”
in AES 17th International conference on high quality audio
coding, 2005.

[6] F. Auger and P. Flandrin, “Improving the readability
of time-frequency and time scale representations,” IEEE
Transactions on Signal Processing, vol. 43, no. 5, pp.
1068–1089, 1995.

[7] F. Plante, G. Meyer, and W.Ainsworth, “Improvement of
speech spectrograms accuracy by the method of reassign-
ment,” IEEE Trans SAP, vol. 6, no. 3, pp. 282–287, 1998.
[8] W. D’haes, “A highly optimized method for comput-
ing amplitudes over a windowed short time signal: from
O(K 2N ) to O(N log(N )),” in IEEE Signal Processing
Symposium (SPS), 2004.

[9] Y. Saad,

Iterative methods for sparse linear systems.

SIAM, 2003.

[10] C. C. Paige and M. A. Saunders, “Lsqr: An algorithm
for sparse linear equations and sparse least squares,” ACM
Transactions on Mathematical Software, vol. 8, no. 1, pp.
43–71, Mar. 1982.

[11] P. E. Frandsen, K. Jonasson, H. B. Nielsen, and O. Tingleff,
Unconstrained Optimization, 3rd ed.
Informatics and
Mathematical Modelling, Technical University of Denmark,
DTU, 2004.

