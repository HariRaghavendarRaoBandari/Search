6
1
0
2

 
r
a

 

M
0
2

 
 
]
L
F
.
s
c
[
 
 

1
v
6
3
2
6
0

.

3
0
6
1
:
v
i
X
r
a

ON THE STAR-HEIGHT OF FACTOR COUNTING LANGUAGES

AND THEIR RELATIONSHIP TO REES ZERO-MATRIX

SEMIGROUPS

TOM BOURNE AND NIK RUˇSKUC

Abstract. Given a word w over a ﬁnite alphabet, we consider, in three special cases,
the generalised star-height of the languages in which w occurs as a contiguous subword
(factor) an exact number of times and of the languages in which w occurs as a contiguous
subword modulo a ﬁxed number, and prove that in each case it is at most one. We use
these combinatorial results to show that any language recognised by a Rees (zero-)matrix
semigroup over an abelian group is of generalised star-height at most one.

1. Introduction and preliminaries

The generalised star-height problem, which asks whether or not there exists an algo-
rithm to compute the generalised star-height of a regular language, is a long-standing
problem in the ﬁeld of formal language theory. In particular, it is not yet known whether
there exist languages of generalised star-height greater than one; see [8, Section I.6.4]
and [7]. The aim of the present paper is to present some new contributions concerning
this problem. In Section 2, we take a combinatorial approach and ﬁnd the generalised
star-height of languages where a ﬁxed word w appears as a contiguous subword of the
words in our language precisely k times or k modulo n times. In Section 3, we apply
these results to prove that languages recognised by Rees (zero-)matrix semigroups over
abelian groups are of generalised star-height at most one.

An alphabet A is a ﬁnite, non-empty set; its elements are letters. A ﬁnite sequence of
letters is a word (over A). The length of a word w, denoted by |w|, is the total number
of letters appearing in w. The empty word, denoted by ε, is the unique word of length
zero. The set of all words over A is denoted by A∗, and the set of all non-empty words
over A is denoted by A+. A semigroup (respectively, monoid ) language is a subset of A+
(respectively, A∗).

Given an alphabet A, we deﬁne the empty set, the empty word, and each of the letters
in A to be basic regular expressions. Using these, we recursively deﬁne new regular expres-
sions by using the (ﬁnite) union, concatenation product, (Kleene) star and complement

operations; that is, if E and F are regular expressions then so too are E ∪ F , EF , E∗

and Ec. A language is regular if it can be represented by a regular expression.

The (generalised) star-height of a regular expression E, denoted by h(E), is deﬁned
recursively as follows: for the basic regular expressions, h(∅) = h(ε) = h(a) = 0, where
a is a letter from A; for union and product, h(E ∪ F ) = h(EF ) = max{h(E), h(F )};
for the star operation, h(E∗) = h(E) + 1; and for complementation, h(Ec) = h(E). The
(generalised) star-height of a language L, denoted by h(L), is

h(L) = min{h(E) | E is a regular expression representing L}.

Key words and phrases. Regular language, star-height, suboword, Rees matrix semigroup.

1

Note that we can use De Morgan’s laws to express intersection and set diﬀerence, and
that

h(E ∩ F ) = h(E \ F ) = max{h(E), h(F )}.

It is well known that the class of regular languages remains unchanged if comple-
mentation is removed from the list of allowed operations. One can deﬁne the notion of
(restricted) star-height with respect to this signature.
In this context, the star-height
problem has been solved: there exist languages of arbitrary (restricted) star-height [1],
and the (restricted) star-height of a language is algorithmically computable [2].

From this point on, the phrase “star-height” will always refer to generalised star-height.
The following simple observation, which allows ‘removal’ of stars, will be used through-

out the paper:

Observation 1.1 ([6]). For any alphabet A and any subset B of A we have

Hence,

A∗ = ∅c

and

B∗ = A∗

\ (A∗(A \ B)A∗).

h(A∗) = h(B∗) = 0.

Let u, w and x be elements of A∗. If v = uwx then u is a preﬁx of v, w is a contiguous
subword (or factor ) of v, and x is a suﬃx of v. Throughout this paper, the phrase
“subword” will always mean contiguous subword. A preﬁx of a word that is also a suﬃx
of that word is a border, and the proper border of greatest length is said to be maximal.
For every word w in A+ and every word v in A∗, we denote the number of times that
w appears as a subword of v by |v|w. When w is a letter, say w = a, the notation |v|a
coincides with its usual meaning; that is, the number of times the letter a appears in the
word v. For every word w in A+ and every non-negative integer k, we deﬁne the language
Count(w, k) by

Count(w, k) = {v ∈ A∗

| |v|w = k};

that is, the set of words v over A such that w appears as a subword of v precisely k
times. As such, we regard Count(w, 0) as the set of all words that do not feature w as a
subword. From this characterisation, we note that

v ∈ Count(w, 0) ⇔ v ∈ A∗

\ A∗wA∗

⇔ v ∈ (A∗wA∗)c ⇔ v ∈ (∅cw∅c)c ,

(1)

where the the ﬁnal equivalence follows by Observation 1.1. Thus, for a ﬁxed word w,
the language Count(w, 0) is representable by a star-free expression and is therefore of
star-height zero.

In a similar manner, for every word w in A+, every integer n greater than or equal to 2
and every non-negative integer k with 0 ≤ k < n, we deﬁne the language ModCount(w, k, n)
by

ModCount(w, k, n) = {v ∈ A∗

| |v|w ≡ k

(mod n)};

that is, the set of words v over A such that w appears as a subword of v precisely k
modulo n times.

It should be noted that the languages Count(w, k) and ModCount(w, k, n) are regular.
This can be proved directly; for example, by building a ﬁnite state automaton accepting
the language and appealing to Kleene’s Theorem (see, for example, [8, Theorem I.2.3]).
For the languages under consideration in this paper, regularity also follows from the
proofs in Section 2.

In Section 2 we prove the following result:
2

Proposition 1.2. Let A be an alphabet. For any word w in A+ with |w| ≤ 3, the language
Count(w, k) is of star-height zero, and the language ModCount(w, k, n) is of star-height
at most one.

In Section 3 we are interested in languages recognised by Rees (zero-)matrix semigroups
over abelian groups. A language L ⊆ A+ is recognised by a semigroup S if there exists
a semigroup morphism ϕ : A+ → S and a subset X of S such that L = Xϕ−1. Again
by Kleene’s Theorem, a language is recognisable by a ﬁnite semigroup if and only if it is
regular. We then prove:

Theorem 1.3. A language recognised by a Rees (zero-)matrix semigroup over an abelian
group is of star-height at most one.

In order to prove this, we combine the results of Section 2 and a general result on Rees

zero-matrix semigroups over groups with the following known results:
(AG1) A language L is recognised by a ﬁnite abelian group if and only if L is a boolean
combination of languages of the form ModCount(a, k, n), where a is a letter from
an alphabet A; see, for example, [5, Corollary 2.3.12].

(AG2) A language recognised by a ﬁnite abelian group is of star-height at most one; [3].

2. Counting subwords

Throughout this section we will consistently make use of the notation Count(w, k) and
ModCount(w, k, n) as introduced in Section 1. We split our analysis into the following
three special cases:

(1) Counting subwords over a unary alphabet;
(2) Counting subwords with maximal border ε over a non-unary alphabet;
(3) Counting subwords that are a power of a letter over a non-unary alphabet.
Case (1) is simple, but we consider it for the sake of establishing some equalities that
will be useful subsequently. The substantive diﬀerence between cases (2) and (3) is that
in (3) the letters of w may appear as components of multiple subwords. For example, if
we are counting the number of occurrences of aa and we encounter the expression aaa
then we have two occurrences of aa and the central a belongs to both. This is not a
problem in the second case as having maximal border ε ensures that occurrences of w do
not overlap.

2.1. Case 1: a unary alphabet

Let A = {a} be a unary alphabet. A language L over A is regular if and only if L is
of the form X ∪ Y (ar)∗, where X and Y are ﬁnite sets and r is an integer greater than
or equal to 0; see [8, Exercise II.2.4]. Thus, every language over a unary alphabet is of
star-height at most one. However, we want to ﬁnd expressions of minimal star-height for
the languages Count(ar, k) and ModCount(ar, k, n), where r is a natural number, to be
used later in the non-unary cases.

We begin with ﬁnding an expression for Count(ar, k). If we consider an arbitrary word
as then each a appearing in it is the start of an occurrence of ar, except for the ﬁnal r− 1
letters. It immediately follows that

(2)
(3)
Next we ﬁnd an expression for ModCount(ar, k, n). The approach taken is to ﬁrst
count k occurrences of the subword ar and then repeat in multiples of n. Recalling the

Count(ar, 0) = ε ∪ a ∪ ··· ∪ ar−1,
Count(ar, k) = ar+k−1 (k > 0).

3

expression for Count(ar, k) in (3) we obtain

ModCount(ar, k, n) = ar+k−1(an)∗.

An expression for the remaining language, namely ModCount(ar, 0, n), is obtained by
using similar reasoning, but keeping in mind the special nature of Count(ar, 0) as in (2);
it yields

ModCount(ar, 0, n) = ε ∪ a ∪ ··· ∪ ar−1 ∪ ar+n−1(an)∗.

It should be noted that the expression for ModCount(ar, k, n) actually only depends
on r + k and n. Thus, diﬀerent combinations of the parameters r, k and n may lead to the
same regular expression, and hence the same language. For example, ModCount(a3, 1, 4),
ModCount(a2, 2, 4) and ModCount(a, 3, 4) are all represented by the expression a3(a4)∗.

A combination of the above constitutes a proof for the following lemma:

Lemma 2.1. Let A = {a} be a unary alphabet. For every natural number r, the language
Count(ar, k) is of star-height zero, and the language ModCount(ar, k, n) is of star-height
(cid:3)
at most one.

2.2. Case 2: a non-unary alphabet and maximal border ε

We now consider the case where A is a non-unary alphabet and the subword w under
consideration has maximal border ε, meaning that w does not overlap itself. As such, once
we have started to read w we can continue reading it until it ﬁnishes without worrying
that another occurrence of w may have already begun.

From (1), we know that the language Count(w, 0) can be represented by the star-free
expression (∅cw∅c)c. Knowing this, we can obtain an expression representing Count(w, k)
which is star-free:

Count(w, k) = [Count(w, 0) · w]k · Count(w, 0).

As can be seen from this expression, we begin with a word from Count(w, 0), which may be
empty, and then count the k occurrences of the subword w, with each pair of occurrences
‘padded’ by a word from Count(w, 0). We ﬁnish with a word from Count(w, 0), which,
again, may be empty.

We now turn our attention to counting subwords modulo n. An expression for ModCount(w, k, n)

which is of star-height one is given by

[Count(w, 0) · w]k(cid:2)[Count(w, 0) · w]n(cid:3)∗

· Count(w, 0).

As can be seen from this expression, we begin with a word from Count(w, 0) and then
count the ﬁrst k occurrences of the subword w, with each pair of occurrences ‘padded’
by a word from Count(w, 0). After this, we allow the same expression to repeat in non-
negative multiples of n before ending with a ﬁnal word from Count(w, 0).
A combination of the above constitutes a proof for the following lemma:

Lemma 2.2. Let A be a non-unary alphabet and let w have maximal border ε. Every
language Count(w, k) is of star-height zero, and every language ModCount(w, k, n) is of
(cid:3)
star-height at most one.

2.3. Case 3: a non-unary alphabet and powers of a letter

We now analyse the third case where the subword under consideration consists of a
power of a letter a from an alphabet A which contains at least two letters. Speciﬁcally,
we are interested in ﬁnding generalised regular expressions for the languages Count(ar, k)
and ModCount(ar, k, n), where r is a natural number.

4

From (1), we know that the language Count(ar, 0) can be represented by the star-free

expression (∅c(ar)∅c)c.
In the case where k > 0, we ﬁnd an expression representing the language Count(ar, k)
by ﬁrst considering only those words that have ar as a border. We denote this language
by CountWB(ar, k). Let B = A \ {a} . We think of B as a set of ‘buﬀers’ that stop
us from ‘accidentally’ reading two as in a row. This is important as letters may appear
as a component of more than one subword and the ‘buﬀers’ are used to mark the points
where we stop reading powers of a. We also deﬁne the subset W of A∗ by

W = B ∪ (B · Count(ar, 0) · B),

which is the set of non-empty words that do not feature ar as a subword and neither
start nor end with a. It is useful to think of elements of W as ‘wedges’, separating the
strings that feature ar from one another. Note that the individual components of W are
all star-free expressions which implies that W is a language of star-height zero.

A general formula for CountWB(ar, k) is given by

CountWB(ar, k) =

ak1W ak2W . . . W akj ,

k(cid:91)

(cid:91)

j=1

k1,k2,...,kj≥r

k1+k2+···+kj =k+(r−1)j

where the right-hand side is a regular expression since both unions are ﬁnite. Note that
the expression is star-free. To see that this equality is correct, consider an arbitrary word
w in CountWB(ar, k). Let ak1, . . . , akj be the maximal subwords of w that are powers
of a and have length greater than or equal to r. Note that ak1 must be a preﬁx of w as
w starts with ar, and, likewise, akj must be a suﬃx. Hence, we have a decomposition
w = ak1w1ak2w2 . . . wj−1akj , where, necessarily, w1, . . . , wj−1 belong to W . Furthermore,
each aki contains precisely ki − r + 1 occurrences of ar by (3). Since all of the occurrences
of ar appear as subwords of aki, we must have

j(cid:88)

i=1

k = |w|ar =

(ki − r + 1) = k1 + ··· + kj − (r − 1)j,

and so w belongs to the right-hand side. A similar analysis shows that, conversely, every
element of the right-side side belongs to CountWB(ar, k).

Now, a star-free expression representing the language consisting of all words that con-

tain precisely k occurrences of ar as a subword, namely Count(ar, k), is given by

(cid:2)ε ∪ [Count(ar, 0) · B](cid:3)

(cid:2)[B · Count(ar, 0)] ∪ ε(cid:3).

· CountWB(ar, k) ·

To see this, note that the k occurrences of ar all appear in the central term CountWB(ar, k).
This term can be preceded by either the empty word or a word that does not contain ar
as a subword; that is, a word from the language Count(ar, 0). However, since words in
Count(ar, 0) have the potential to end with a power of a, we must utilise a ‘buﬀer’ from
the set B. A dual argument deals with potential suﬃces. Since each of the components
of the above expression are star-free, the language Count(ar, k) must be of star-height
zero.

We now turn our attention to counting occurrences of ar modulo n. Our strategy
here is to count the ﬁrst k occurrences of ar using the expression found above for
CountWB(ar, k), and then count occurrences of ar in multiples of n before adding appro-
priate preﬁxes and suﬃces (as in the case of Count(ar, k)).
Having used CountWB(ar, k) to count the ﬁrst k occurrences of ar, we note that the
suﬃx ar−1 has the potential to be a component of a new occurrence of ar if the part of the

5

word immediately following ar−1 begins with an a. Similarly, the suﬃx ar−2 immediately
followed by an a2 leads to another occurrence of ar. In order to take these possibilities into
account, let Mult(ar, n) denote the language whose words contain precisely n occurrences
of the subword ar when left concatenated by ar−1 and also have suﬃx ar:
| |ar−1w|ar = n and w has suﬃx ar}.

Mult(ar, n) = {w ∈ A∗

The signiﬁcance of the assumption about the suﬃx ar is that every count stops precisely
when the n-th occurrence of ar is met, and that this suﬃx ‘feeds into’ the next group of
occurrences of ar.

A star-free expression for this language is given by

n−1(cid:91)

i=0

Mult(ar, n) = an ∪

aiW · CountWB(ar, n − i).

Note that the right-hand side is a regular expression since the union is ﬁnite. To see that
this equality is correct, consider an arbitrary word w in Mult(ar, n). If w = ak for some
natural number k then

n = |ar−1w|ar = |ar−1ak|ar = |ar+k−1|ar = k

by (3), and hence w = an. Otherwise, we can decompose w as

where,

w = ak1w1ak2w2 . . . wj−1akj ,

w1, . . . , wj−1 ∈ W,

k1 ≥ 0

and

k2, . . . , kj ≥ r.

The maximal subwords of ar−1w that are powers of a of exponent greater than or equal
to r are ar−1ak1 = ar+k1−1 (provided that k1 > 0) and ak2, . . . , akj . Furthermore, our
decomposition of w can be used to split ar−1w as ar−1w = xy, where x = ar+k1−1w1 and
y = ak2w2 . . . wj−1akj . Suppose that x contains i occurrences of ar. Then

i = |ar+k1−1w1|ar = |ar+k1−1|ar = k1

by (3). Moreover, y must contain the remaining n−i occurrences of ar and has ar as a bor-
der. Hence y belongs to CountWB(ar, n−i). Thus, w belongs to aiW ·CountWB(ar, n−i)
and hence belongs to the union on the right-hand side. A similar analysis shows that,
conversely, every element of the right-hand side belongs to Mult(ar, n).

Putting all of this together, we have that an expression representing ModCount(ar, k, n),

where k > 0, is given by

(cid:2)ε ∪ [Count(ar, 0) · B](cid:3)

· CountWB(ar, k) · Mult(ar, n)∗

·

(cid:2)[B · Count(ar, 0)] ∪ ε(cid:3),

and an expression representing ModCount(ar, 0, n) is given, with slight abuse of notation,
by

Count(ar, 0) ∪ ModCount(ar, n, n).

Both of these expressions are of star-height one, and so the language ModCount(ar, k, n)
is of star-height at most one.

A combination of the above constitutes a proof for the following lemma:

Lemma 2.3. Let A be a non-unary alphabet. For every natural number r, the language
Count(ar, k) is of star-height zero, and the language ModCount(ar, k, n) is of star-height
(cid:3)
at most one.

6

2.4. Discussion

Based on the results presented so far,

it is natural to ask whether the language
Count(w, k) is of star-height zero and whether the language ModCount(w, k, n) is of
star-height at most one for all words w. As a consequence of the foregoing results, this
is certainly the case for words of length ≤ 2: indeed every such word is either a power of
a letter or has maximal border ε.
Proposition 2.4. Let A be an alphabet. For any word w in A+ with |w| = 2, the language
Count(w, k) is of star-height zero, and the language ModCount(w, k, n) is of star-height
(cid:3)
at most one.

When the subword under consideration is of length three we are presented with a new

hurdle to overcome. The possible types for words of length three are

aaa,

aab,

aba,

abb,

abc,

where a, b and c are distinct letters in A. Counting occurrences of the word aaa is covered
by Lemmas 2.1 and 2.3, while the words aab, baa and abc are covered by Lemma 2.2.

With the ﬁnal type, namely aba, we must be more careful as the maximal border in
this case is a, meaning that the suﬃx a can act as a preﬁx a in a new occurrence of the
subword. For example, the word abababa contains three occurrences of the subword aba.
However, we can proceed in a similar manner to that in Section 2.3 to resolve this issue.
Deﬁne W to be the set of words that are not b, do not have preﬁx ba, do not have

suﬃx ab, and do not contain aba as a subword; that is,

Then, a general formula for CountWB(aba, k), where k is a natural number, is given by

W = (b ∪ baA∗

∪ A∗ab ∪ A∗abaA∗)c = (b ∪ ba∅c ∪ ∅cab ∪ ∅caba∅c)c.
k(cid:91)

(cid:91)

a(ba)k1W a(ba)k2W . . . W a(ba)kj ,

CountWB(aba, k) =

j=1

k1,k2,...,kj≥1
k1+k2+···+kj =k

which is star-free, and the language Count(aba, k), expressed by

(∅caba∅c ∪ ∅cab)c · CountWB(aba, k) · (ba∅c ∪ ∅caba∅c)c,

is of star-height zero.

A star-free expression representing Mult(aba, n) is given by

To ﬁnd an expression for ModCount(aba, k, n) we introduce the language
| |aw|aba = n and w has suﬃx aba}.

Mult(aba, n) = {w ∈ A∗
n−1(cid:91)
(ba)iW · CountWB(aba, n − i).

(ba)n ∪

i=1

Putting all of this together, an expression representing ModCount(aba, k, n), where k > 0,
is given by

(∅caba∅c ∪ ∅cab)c · CountWB(aba, k) · Mult(aba, n)∗

· (ba∅c ∪ ∅caba∅c)c,

and an expression representing ModCount(aba, 0, n) is given, with slight abuse of nota-
tion, by

This establishes that the language ModCount(aba, k, n) is of star-height at most one.

Count(aba, 0) ∪ ModCount(aba, n, n).

Hence, we have proven the following result:
7

Proposition 2.5. Let A be an alphabet. For any word w in A+ with |w| = 3, the language
Count(w, k) is of star-height zero, and the language ModCount(w, k, n) is of star-height
(cid:3)
at most one.

3. Applications to Rees zero-matrix semigroups

In this section, we change tack and use our combinatorial results to prove new results in
an algebraic setting. Speciﬁcally, we show that languages recognised by Rees zero-matrix
semigroups over abelian groups are of star-height at most one.

Let S be a semigroup without zero. Let I and Λ be non-empty indexing sets and let P
be a |Λ| × |I| matrix with entries from S ∪ {0}, where 0 is a new symbol not in S. The
Rees zero-matrix semigroup M 0[S; I, Λ; P ] is the set (I × S × Λ)∪{0} equipped with the
binary operation deﬁned by

(cid:40)

(i, s, λ)(j, t, µ) =

(i, spλjt, µ)
0

if pλj (cid:54)= 0,
if pλj = 0,

If we disregard the new symbol 0 but leave
and s0 = 0 = 0s for all s in S ∪ {0}.
everything else intact then the resulting semigroup, denoted by M [S; I, Λ; P ], is simply
a Rees matrix semigroup. Throughout the rest of this section we work in full generality
with Rees zero-matrix semigroups. The results of course remain true when restricted to
Rees matrix semigroups.

We say that the matrix P is regular if each row and column contain a non-zero entry.
Rees zero-matrix semigroups with ﬁnite underlying groups and regular matrices are pre-
cisely ﬁnite 0-simple semigroups according to Rees’ Theorem [4, Theorem 3.2.3]. In turn,
these semigroups together with zero semigroups completely exhaust principal factors of
arbitrary ﬁnite semigroups.
We begin by exploring which languages are recognised by Rees zero-matrix semigroups
over cyclic groups Zn, where n is a natural number, and then extend this to arbitrary
abelian groups via the Fundamental Theorem for Finite Abelian Groups.

3.1. Rees zero-matrix semigroups over cyclic groups

Let S = M 0[Zn; I, Λ; P ] be a Rees zero-matrix semigroup, where the zero in S is
denoted by 0 and the identity in Zn is denoted by 0. Let A be an alphabet and deﬁne a
map ϕ : A → S by either aϕ = 0 or aϕ = (ia, ga, λa), where 0 ≤ ga < n. Let

A(i,g,λ) = (i, g, λ)ϕ−1

and

A0 = 0ϕ−1.

Now, consider the image of w = a1a2 . . . ar under ¯ϕ.

Uniquely extend ϕ to a morphism ¯ϕ : A+ → S.
If at ¯ϕ = 0 for at least one
t ∈ {1, 2, . . . , r} then w ¯ϕ = 0. Likewise, if pλat iat+1
= 0 for at least one t ∈ {1, 2, . . . , r−1}
then w ¯ϕ = 0. Otherwise, if atϕ (cid:54)= 0 for all t ∈ {1, 2, . . . , r} and pλat iat+1 (cid:54)= 0 for all
t ∈ {1, 2, . . . , r − 1}, then

w ¯ϕ = (ia1, ga1, λa1)(ia2, ga2, λa2) . . . (iar, gar, λar)

= (ia1, ga1 + pλa1 ia2

+ ga2 + pλa2 ia3

+ ··· + pλar−1 iar + gar, λar).

We proceed by ﬁnding regular expressions for preimages of elements in S. We split into
two cases: the preimage of the zero 0 and the preimage of an arbitrary non-zero element
s = (i, g, λ).
Lemma 3.1. With the notation as above, 0 ¯ϕ−1 is of star-height zero.

8

Proof. According to the analysis preceding the lemma, a word w = a1a2 . . . ar belongs to
the preimage of 0 if and only if at least one of the following holds:

(1) at lies in A0 for some t in {1, 2 . . . , r}; or
(2) pλj = 0, where at ∈ A(i,g,λ) and at+1 ∈ A(j,h,µ).

It follows that

(cid:104)(cid:91)

A∗A(i,g,λ)A(j,h,µ)A∗(cid:105)

,

0 ¯ϕ−1 = A∗A0A∗

∪

where the second union is taken over all (i, g, λ), (j, h, µ) ∈ S \ {0} with pλj = 0, a
(cid:3)
language of star-height zero by Observation 1.1.
Lemma 3.2. For a non-zero element s = (i, g, λ) in S, its preimage, s ¯ϕ−1, is of star-
height at most one.
Proof. We begin by writing s ¯ϕ−1 as the intersection of three regular languages as follows:
(4)

s ¯ϕ−1 = ({i} × Zn × Λ) ¯ϕ−1 ∩ (I × {g} × Λ) ¯ϕ−1 ∩ (I × Zn × {λ}) ¯ϕ−1.

Due to the nature of the multiplication on S, it is clear to see that

(cid:20) (cid:91)
(cid:20) (cid:91)

h∈Zn,µ∈Λ

A(i,h,µ)

· A∗,
(cid:21)

A(j,h,λ)

.

({i} × Zn × Λ) ¯ϕ−1 =
(I × Zn × {λ}) ¯ϕ−1 = A∗

·

j∈I,h∈Zn
By Observation 1.1, these languages have star-height zero.

It remains to ﬁnd an expression for (I × {g} × Λ) ¯ϕ−1. Consider an arbitrary w =
a1a2 . . . ar belonging to this language. Continuing to use the notation introduced before
Lemma 3.1, we know that pλat iat+1 (cid:54)= 0 for t = 1, 2, . . . , r − 1, and
+ ··· + pλar−1 iar + gar ≡ g

+ ga2 + pλa2 ia3

ga1 + pλa1 ia2

(mod n).

We split the above sum into two:

(cid:124)

(cid:123)(cid:122)

ga1 + ga2 + ··· + gar

≡g1

(mod n)

(cid:125)

(cid:124)

(cid:123)(cid:122)

≡g2

(mod n)

+ pλa1 ia2

+ pλa2 ia3

+ ··· + pλar−1 iar

≡ g

(mod n),

and we examine them separately. The ﬁrst sum corresponds to the contributions from
‘group’ summands, while the second is the contributions from ‘matrix’ summands.

For the group contribution, we consider the congruence given by

Grouping together summands corresponding to the same letter, we see that the above

ga1 + ga2 + ··· + gar ≡ g1

(mod n).

(cid:21)

(cid:125)

congruence is equivalent to (cid:88)
which, in turn, is equivalent to(cid:88)

a∈A

ga|w|a ≡ g1

(mod n),

ga(|w|a

(mod n)) ≡ g1

(mod n).

a∈A

The point here is that while |w|a can take inﬁnitely many values, the same is not true for
|w|a (mod n). More formally, let T be the following set of tuples of elements {0, 1, . . . , n−
1} indexed by A:

(cid:88)

T = {(ka)a∈A |

gaka ≡ g1

(mod n)}.

a∈A

9

For any ﬁxed tuple (ka)a∈A in T , every word w such that |w|a ≡ ka (mod n), where a
lies in A, will have group contribution equal to g1 mod n. The set of all such words is
obtained by forming the ﬁnite intersection of the languages ModCount(a, ka, n) for a ∈ A.
Taking the ﬁnite union over all tuples in T results in the expression

GrpContrib(g1, n) =

ModCount(a, ka, n),

(cid:91)

(cid:92)

(ka)∈T

a∈A

which is of star-height at most one, since ModCount(a, ka, n) is of star-height at most
one by Lemmas 2.1 and 2.2.

In a similar fashion, we consider the contributions made by ‘matrix’ summands; that

is, we consider the congruence given by

pλa1 ia2

+ pλa2 ia3

+ ··· + pλar−1 iar ≡ g2

(mod n).

Counting the contribution of each matrix entry separately, we see that the above congru-
ence is equivalent to

pλaib|w|ab ≡ g2

(mod n),

(cid:88)
which, in turn, is equivalent to(cid:88)

ab∈A2

pλaib(|w|ab

(mod n)) ≡ g2

(mod n).

ab∈A2

Consider the ﬁnite family U of tuples (kab)ab∈A2 of elements{0, 1, . . . , n − 1}, indexed by
A2:

U = {(kab)ab∈A2 |

pλaibkab ≡ g2

(mod n)}.

For a ﬁxed tuple in U , the set of all words w satisfying |w|ab ≡ kab (mod n), where ab lies
in A2, is obtained by taking the ﬁnite intersection of the languages ModCount(ab, kab, n).
Taking the union over all tuples in U yields

(cid:88)

ab∈A2

(cid:91)

(cid:92)

MatContrib(g2, n) =

ModCount(ab, kab, n),

(kab)ab∈A2∈U

ab∈A2

which is of star-height at most one, since ModCount(ab, kab, n) is of star-height at most
one by Proposition 2.4.

Combining the ‘group’ contribution and the ‘matrix’ contribution appropriately leads

to

(I × {g} × Λ) ¯ϕ−1 =

and completes the proof.

(cid:91)

(g1,g2)∈Z2

n

g1+g2≡g

(mod n)

(GrpContrib(g1, n) ∩ MatContrib(g2, n)),

(cid:3)

An immediate consequence of the above propositions is the following theorem:

Theorem 3.3. A regular language recognised by a Rees zero-matrix semigroup over a
cyclic group is of star-height at most one.

Proof. Every language recognised by a Rees zero-matrix semigroup over a cyclic group
can be expressed as a ﬁnite union of preimages of elements in the semigroup. Since
each individual preimage is of star-height at most one and taking ﬁnite unions does not
(cid:3)
increase star-height, the result follows.

10

3.2. Extending to abelian groups

We now extend Theorem 3.3 to Rees zero-matrix semigroups over abelian groups. In
order to do this we make use of properties of homomorphisms and projection maps and
appeal to the Fundamental Theorem of Finite Abelian Groups.

We begin with some general theory concerning Rees matrix semigroups over direct
products of semigroups. Consider a Rees zero-matrix semigroup M 0[S × T ; I, Λ; R], with
R = (rλi), where rλi = (pλi, qλi) lies in S × T or rλi = 0S×T , the zero element. Deﬁne two
further Rees matrix semigroups M 0[S; I, Λ; P ] and M 0[T ; I, Λ; Q], with zeros 0S and 0T
respectively, and matrices P and Q deﬁned by P = (pλi) and Q = (qλi), where we take
pλi = 0S and qλi = 0T whenever rλi = 0S×T . We then have two natural projections:

πS : M 0[S × T ; I, Λ; R] → M 0[S; I, Λ; P ] : (i, (s, t), λ) (cid:55)→ (i, s, λ),
πT : M 0[S × T ; I, Λ; R] → M 0[T ; I, Λ; Q] : (i, (s, t), λ) (cid:55)→ (i, t, λ).

Proof that these are epimorphisms is routine and is left as an exercise.

Now suppose that we are given an alphabet A and a map ϕ : A → M 0[S × T ; I, Λ; R],
which extends uniquely to a homomorphism ¯ϕ : A+ → M 0[S×T ; I, Λ; R]. Then the com-
positions ¯ϕπS and ¯ϕπT are homomorphisms from A+ to M 0[S; I, Λ; P ] and M 0[T ; I, Λ; Q]
respectively. The entire set-up is summarised in the following diagram:

In the following lemma we relate the preimage of a non-zero element in M 0[S ×

T ; I, Λ; R] to the preimages of non-zero elements in M 0[S; I, Λ; P ] and M 0[T ; I, Λ; Q].
Lemma 3.4. For any (i, (s, t), λ) in M 0[S × T ; I, Λ; R] we have

(i, (s, t), λ) ¯ϕ−1 = (i, s, λ)( ¯ϕπS)−1 ∩ (i, t, λ)( ¯ϕπT )−1,

0S×T ¯ϕ−1 = 0S( ¯ϕπS)−1 ∩ 0T ( ¯ϕπT )−1.

w( ¯ϕπS) = (i, (s, t), λ) πS = (i, s, λ)

Proof. First, suppose that w ∈ (i, (s, t), λ) ¯ϕ−1; that is, w ¯ϕ = (i, (s, t), λ). Then
Hence w ∈ (i, s, λ)( ¯ϕπS)−1, and, analogously, w ∈ (i, t, λ)( ¯ϕπT )−1.
Conversely, suppose that w ∈ (i, s, λ)( ¯ϕπS)−1 ∩ (i, t, λ)( ¯ϕπT )−1, so that w( ¯ϕπS) =
(i, s, λ) and w( ¯ϕπT ) = (i, t, λ). Note that w ¯ϕ (cid:54)= 0S×T , so we must have that w ¯ϕ =
(iw, (sw, tw), λw) for some iw ∈ I, (sw, tw) ∈ S × T and λw ∈ Λ. Now,
(i, s, λ) = (w ¯ϕ)πS = (iw, (sw, tw), λw) πS = (iw, sw, λw)

and, similarly, (i, t, λ) = (iw, tw, λw). Hence, iw = i, sw = s, tw = t and λw = λ.
(cid:3)

Therefore, w ¯ϕ = (iw, (sw, tw), λw) = (i, (s, t), λ) and w ∈ (i, (s, t), λ) ¯ϕ−1, as required.

The second equality is proved in essentially the same way.

We can now prove the following:

Theorem 3.5. Let S and T be ﬁnite semigroups. If languages recognised by ﬁnite Rees
zero-matrix semigroups over S or T all have star-height ≤ h, then all the languages
recognised by the ﬁnite Rees zero-matrix semigroups over the direct product S × T also
have star-height ≤ h.

11

AA+M0[S×T;I,Λ;R]M0[S;I,Λ;P]M0[T;I,Λ;Q]ιϕ¯ϕπSπTProof. Lemma 3.4 allows us to express the preimage of an element in the Rees zero-matrix
semigroup over the direct product as the intersection of two preimages of elements in Rees
zero-matrix semigroups over the factors. Since the preimage of any subset is a ﬁnite union
(cid:3)
of preimages of elements, the result follows.

By combining the above results we can now extend Theorem 3.3 to Rees zero-matrix

semigroups over abelian groups.

Theorem 3.6. A regular language recognised by a Rees zero-matrix semigroup over an
abelian group is of star-height at most one.

Proof. Invoking the Fundamental Theorem of Finite Abelian Groups and applying Corol-
lary 3.5 a ﬁnite number of times to Rees zero-matrix semigroups over cyclic groups yields
(cid:3)
the result.

References

[1] L. C. Eggan. Transition graphs and the star-height of regular events. Michigan Math. J., 10:385–397,

1963.

[2] K. Hashiguchi. Representation theorems on regular languages. J. Comput. System Sci., 27:101–115,

1983.

[3] W. H. Henneman. Algebraic theory of automata. PhD thesis, MIT, 1971.
[4] J.M. Howie. Fundamentals of semigroup theory, volume 12 of London Mathematical Society Mono-
graphs. New Series. The Clarendon Press, Oxford University Press, New York, 1995. Oxford Science
Publications.

[5] J.-E. Pin. Varieties of Formal Languages. North Oxford Academic, 1986.
[6] J.-E. Pin, H. Straubing, and D. Therien. New results on the generalized star-height problem. STACS

89, Lecture Notes in Computer Science, 349:458–467, 1989.

[7] J.-E. Pin, H. Straubing, and D. Th´erien. Some results on the generalized star-height problem. Inform.

and Comput., 101(2):219–250, 1992.

[8] J. Sakarovitch. Elements of automata theory. Cambridge University Press, Cambridge, 2009. Trans-

lated from the 2003 French original by Reuben Thomas.

School of Mathematics and Statistics, University of St Andrews, St Andrews, Scot-

land, U.K.

E-mail address: tom.bourne@st-andrews.ac.uk

School of Mathematics and Statistics, University of St Andrews, St Andrews, Scot-

land, U.K.

E-mail address: nik.ruskuc@st-andrews.ac.uk

12

