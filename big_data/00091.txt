6
1
0
2

 

b
e
F
9
2

 

 
 
]
S
D
.
s
c
[
 
 

1
v
1
9
0
0
0

.

3
0
6
1
:
v
i
X
r
a

PROMETHEE is Not Quadratic:

An O(qn log(n)) Algorithm

Toon Caldersa,b, Dimitri Van Asscheb,∗

aDepartment of Mathematics and Computer Science, Universiteit Antwerpen

bComputer & Decision Engineering Department (CoDE), Universit´e libre de Bruxelles

Abstract

It is generally believed that the preference ranking method PROMETHEE has
a quadratic time complexity. In this paper, however, we present an exact al-
gorithm that computes PROMETHEE’s net ﬂow scores in time O(qn log(n)),
where q represents the number of criteria and n the number of alternatives.
The method is based on ﬁrst sorting the alternatives after which the unicrite-
rion ﬂow scores of all alternatives can be computed in one scan over the sorted
list of alternatives while maintaining a sliding window. This method works with
the linear and level criterion preference functions. The algorithm we present is
exact and, due to the sub-quadratic time complexity, vastly extends the appli-
cability of the PROMETHEE method. Experiments show that with the new
algorithm, PROMETHEE can scale up to millions of tuples.

Keywords: Decision Support Systems, PROMETHEE, Multicriteria,
Incremental Computing, Multicriteria Decision Analysis

1. Introduction

Multi-criteria decision aid (MCDA), that is, the study of simultaneously
evaluating possible decisions on multiple conﬂicting criteria, has been an active
research ﬁeld for over 40 years. A common example in this area is that of buying
a new car. When selecting which car to buy, one typically tries to minimize cost
and consumption while maximizing performance, comfort, etc. Obviously no
real car can be best on all those criteria at the same time. Therefore, the notion
of optimal solution necessarily is replaced by that of a compromise solution [1].
Diﬀerent methods to select a compromise solution from a set of alternatives
have been proposed in the literature, which can be divided into 3 main categories
[2]: those based upon multi-attribute utility theory (MAUT) [3], outranking
methods [4], and interactive methods [5].

∗Corresponding author
Email addresses: toon.calders@uantwerpen.be (Toon Calders), dvassche@ulb.ac.be

(Dimitri Van Assche)

Preprint submitted to Elsevier

March 2, 2016

We only discuss the ﬁrst two methods, as in the paper we only consider fully
automatic ranking methods. In the methods based upon multi-attribute utility
theory, scores are computed by aggregating, per alternative, its unicriterion
utilities with functions that map a value into a preference degree. Most MAUT
methods can therefore be computed eﬃciently, because the utility function is
applied to each alternative for each criteria only once.

On the other hand, outranking methods such as ELECTRE [6] and PROME-
THEE1 [7] are based on pairwise comparisons of alternatives. These methods
have a wide range of applications [8], yet are often criticized for their high
complexity due to pairwise comparisons. Indeed, the straightforward computa-
tion of these ranking methods leads to a quadratic complexity in the number
of alternatives. As a result, for a small number of alternative the straightfor-
ward implementation of these methods works ﬁne, yet the performance degrades
rapidly for an increasing number of alternatives.

In [9], a discussion is made about the performances of outranking methods
in the context of geographical information analysis. Outranking methods are
considered impractical when a large number of alternatives are involved, but
there is no consensus on the meaning of large. Citing some concrete references,
according to [10]: “Outranking techniques [...] require pairwise or global compar-
isons among alternatives, which is obviously impractical for applications where
the number of alternatives/cells in a database range in the tens or hundreds of
thousands.” Furthermore, according to [11], the problem already arises with
more than 100 alternatives: “[...] outranking methods have diﬃculties dealing
with more than a hundred alternatives.” In [12] it is grossly overgeneralized
that the evaluation of a large number of alternatives is an issue of multi-criteria
analysis: “One major drawback of MCA is that it does not allow the comparison
of a large number of alternatives. With only a few alternatives to be evaluated,
it is almost certain that the best alternative chosen from the set is in fact a
sub-optimal solution.”

In order to tackle these complexity problems, recently approximation meth-
ods have been developed to reduce the complexity of the calculation of PROME-
THEE II by, for instance, the use of piecewise linear functions to approximate
net ﬂow scores of alternatives [13]. In this paper we show, however, that ef-
ﬁcient exact methods exist to compute PROMETHEE ﬂow scores.
We present an exact method to compute ﬂow scores of all alternatives consid-
ered for both PROMETHEE I and II, with time complexity O(qnlog(n)) with
q the number of criteria and n the number of alternatives. This is clearly a
tremendous improvement over the O(qn2) complexity of the straightforward
computation by iterating over all pairs. Our method works for the two most
popular preference functions: the linear and level criterion preference functions,
and is based on sorting the alternatives for each criterion separately, followed
by a linear scan over the sorted alternatives while maintaining a sliding window.
In Section 2, we revisit the PROME-

The paper is organized as follows.

1Preference Ranking Organization METHod for Enrichment of Evaluations

2

THEE ranking method. In Section 3, we introduce our eﬃcient sorting-based
approach for calculating the ﬂow scores of PROMETHEE, and establish its time
complexity. Finally, in Section 4, we compare the performance of the straight-
forward quadratic implementation with our new method, clearly illustrating the
dramatic performance improvement, scaling up PROMETHEE to applications
with millions of alternatives.

2. PROMETHEE

In this section, we revisit the deﬁnition of the PROMETHEE I and II scoring
methods. We refer the interested reader to [7] for a detailed description of
PROMETHEE.
Let A = {a1, a2..., an} be a set of n alternatives and let F = {f1, f2..., fq}
be a set of q criteria. The evaluation of alternative ai for criterion k will be
denoted by a real value fk(ai). We assume without loss of generality that a
higher value for a criterion is better. For each pair of alternatives, we deﬁne
dk(ai, aj) as the diﬀerence between ai and aj on criterion k.

dk(ai, aj) := fk(ai) − fk(aj)

(1)

A preference function, denoted Pk, is associated with each criterion k. This
function transforms the diﬀerence dk(ai, aj) between alternatives into a prefer-
ence degree of ai over aj on criterion k. Multiple preference functions exist [7],
such as the linear preference function (Equation 2, Figure 1) and the level cri-
terion preference function (Figure 2). In this paper we will consider the linear
preference function, which is deﬁned as follows, given an indiﬀerence threshold
qk and a preference threshold pk:

Pk[dk(ai, aj)] =

dk(ai,aj )−qk

pk−qk

if dk(ai, aj) ≤ qk
if qk < dk(ai, aj) ≤ pk
if pk < dk(ai, aj)

(2)

0

1

The results in this paper can easily be extended to the level criterion preference
function as well. These two preference functions represent the most popular
choices in the literature.

By applying the preference function Pk to the diﬀerence dk, we get the

unicriterion preference degree πk:

πk(ai, aj) := Pk[dk(ai, aj)]

(3)

The aggregated preference degree of alternative ai over aj is then computed as
a weighted sum over the unicriterion preferences using weights wk associated
with each criterion k. Weights are assumed to be positive and normalized.

π(ai, aj) :=

wkπk(ai, aj)

(4)

q(cid:88)

k=1

3

6

1















qk

-

dk

pk

Figure 1: Linear preference function

6

1

1
2

dk
Figure 2: Level criterion preference function

pk

qk

-

4

The last step consists in calculating the positive ﬂow score denoted φ+(ai)
and the negative ﬂow score denoted φ−(ai) which are combined into the ﬁnal
ﬂow score of ai as follows:

1

n − 1

(cid:88)
(cid:88)
n − 1
A(ai) − φ−

x∈A

x∈A

1

π(ai, x)

π(x, ai)

A(ai)

φ+(ai)

:=

φ−(ai)

:=

φ(ai)

:= φ+

The PROMETHEE I (partial) ranking is obtained as the intersection of the
rankings induced by φ+ and φ−. PROMETHEE II gives a complete ranking
induced by φ. For an interpretation of the net ﬂow scores, the interested reader
is referred to [14].

In this paper we will use the following, equivalent deﬁnition of the ﬂow score:

(5)

(6)

(7)

(8)

(9)

(10)

(11)

1

x∈A

n − 1

(cid:88)
(cid:88)
n − 1
x∈A
q(cid:88)
k (a) − φ−

1

k=1

φ+
k (ai)

:=

φ−
k (ai)

:=

πk(ai, x)

πk(x, ai)

φk(ai)

:= φ+

k (ai)

φ(ai) =

wkφk(ai)

k (ai) and φ−
φ+

and unicriterion negative ﬂow score of the alternative ai on criterion k.

k (ai) are respectively called the unicriterion positive ﬂow score

3. Sorting-Based Algorithm for PROMETHEE

k (a) and φ−

Our sorting-based algorithm is based on computing the unicriterion posi-
tive and negative ﬂow scores φ+
k (a) for all alternatives a for each
criterion fk separately. The time required for this computation will be shown
to be O(n log(n)) per criterion. Hence, computing all unicriterion positive and
negative ﬂow scores for all criteria takes time O(qn log(n)). These scores can
be combined into the ﬁnal PROMETHEE II ﬂow score in time O(qn), leading
to an overall time complexity of O(qn log(n)).

Given the symmetry of the expressions for φ+

k (a), we will only
k (a). Indeed, if we substitute fk(a) by f(cid:48)
elaborate on the computation of φ+
k(a) =
−fk(a), the resulting φ(cid:48)+
k (a) = φ−
k (a). As such, exactly the same algorithm can
k (a) for all a as for computing φ−
be used to compute φ+
k (a) for all a. In the
following we only present the algorithm for the linear preference function, as
the algorithm for the level criterion preference function is very similar.

k (a) and φ−

To illustrate the sorting-based computation of the unicriterion positive ﬂow

function, we use the following running example.

5

Example 1. Consider the following table listing a number of destinations (the
alternatives), together with their characteristics (the criteria) on the basis of
which we want to decide where to go on vacation. We consider three criteria:
hours of sunshine, price, and historical value, each of which have been marked
on a numerical scale of 1 to 10.

Destination

Sunshine Price History

f1

f2

f3

a1 Brussels
a2 Paris
a3 Blois
a4 Berlin
a5 Barcelona

5
6
7
7
10

6
4
9
8
7

9
10
8
8
7

Furthermore for all k = 1, ..., 3, the thresholds qk and pk are respectively 1 and
3. This means that a diﬀerence of 1 score point or less will be ignored, and a
diﬀerence of more than 3 points will no longer give additional beneﬁt. In between
these two extremes, the contribution to the ﬂow score will be linear.

With these parameters, the positive unicriterion ﬂow score for criterion f1

for alternative a4 is:

φ+
1 (a4) =

1
4

(π1(a4, a1) + π1(a4, a2) + π1(a4, a3) + π1(a4, a4) + π1(a4, a5))

(cid:18) 1

2

=

1
4

(cid:19)

+ 0 + 0 + 0 + 0

=

1
8

3.1. Window of an Alternative

One of the observations on which our algorithm for the linear preference
function is based, is the following: There are three diﬀerent ways in which an
alternative x can inﬂuence φ+

k (a) (see ﬁgure 3):

fk(x) < fk(a) − pk
fk(a) − pk ≤ fk(x) ≤ fk(a) − qk
fk(a) − qk < fk(x)

: πk(a, x) = 1
: πk(a, x) linear in dk(a, x)
: πk(a, x) = 0

(12)

(13)

(14)
Hence, except for a window of length qk − pk, the inﬂuence of an alternative
x is a default value that depends on the side of the window on which x falls.
We formalize these three regions as follows:

Deﬁnition 1. The window of ai, denoted W (ai) is deﬁned as:

W (ai) := {x ∈ A | fk(x) ∈ [fk(ai) − pk, fk(ai) − qk]} .

We will use li, respectively ui to denote the lower and upper bounds of the
interval [fk(ai)−pk, fk(ai)−qk]. We say that an alternative x is left of W (ai) if
fk(x) < li, and that it is right of W (ai) if fk(x) > ui. The set of all alternatives
left, respectively right of ai will be denoted L(ai), respectively R(ai).

6

L(a5)

W (a5)

R(a5)

qk

pk

fk(a1) fk(a2)

fk(a3)

fk(a5)

fk(a4)

fk(a6)

πk(a5, x) = 1

πk(a5, x) = 0

πk(a5, x) = fk(a5)−fk(x)

pk−qk

Illustration of the three diﬀerent cases for the preference degree πk(a5, x): x ∈

Figure 3:
L(a5), x ∈ W (a5), and x ∈ R(a5)

Example 2. We continue Example 1. We illustrate the concept of window by
looking at the ﬁrst criterion “Sunshine.” The alternatives are already ordered
according to increasing score for “Sunshine.” The window W (a1) includes all
alternatives with a temperature value that is in the interval [5− 3, 5− 1] = [2, 4].
Hence W (a1) = {}, L(a1) = {}, and R(a1) = {a1, a2, a3, a4, a5}. The other
windows are as follows:

ai
a1
a2
a3
a4
a5

[li, ui]
[2, 4]
[3, 5]
[4, 6]
[4, 6]
[7, 9]

L(ai) W (ai)
{}
{}
{}
{a1}
{a1, a2}
{}
{}
{a1, a2}
{a3, a4}

{a1, a2}

R(ai)

{a1, a2, a3, a4, a5}
{a2, a3, a4, a5}
{a3, a4, a5}
{a3, a4, a5}

{a5}

Using these deﬁnitions, we obtain the following equality:

Hence, in order to compute φ+

able to quickly compute |W (a)|, |L(a)|, and the sum S(a) := (cid:80)

k (a) for all a eﬃciently, it is essential to be
x∈W (a) fk(x)
for all alternatives a. This can be achieved by a sorting-based method that
incrementally computes |W (ai)|, |L(ai)| and S(ai), as we show next.

7

(cid:88)

 (cid:88)
(cid:32)
pk − qk
x∈L(a)
|L(a)| + |W (a)| × (fk(a) − qk)
pk − qk

x∈W (a)

1 +

(fk(a) − fk(x)) − qk

(cid:88)

x∈R(a)

+

0


(cid:33)

(cid:80)

−

x∈W (a) fk(x)
pk − qk

(15)

φ+
k (a) =

1

n − 1

=

1

n − 1

3.2. Incremental Computation of the Windows W (a)

Let a1, a2, . . . , an be the sequence of alternatives, ordered in ascending order
of their k-th criterion; that is, for all i = 1 . . . n − 1, fk(ai) ≤ fk(ai+1). After
ordering the alternatives, it holds that if i < j, W (ai) will be “more to the
left” than W (aj) in the sense that li ≤ lj and ui ≤ uj. The following lemma
formalizes this observation. We exploit this fact for computing the windows
W (ai) incrementally.
Lemma 1. Let A = {a1, . . . , an} be the set of alternatives ordered in ascending
order w.r.t. the k-th criterion; i.e., fk(ai) ≤ fk(ai+1) for all i = 1 . . . n− 1. Let
x ∈ A, i < j ∈ [1, n]. If x ∈ W (ai) ∩ W (aj), then for all i ≤ (cid:96) ≤ j, it holds
that x ∈ W (a(cid:96)). Furthermore, if both ar and as are in W (ai), then also for all
r ≤ (cid:96) ≤ s, a(cid:96) ∈ W (ai).

Example 3. Figure 4 illustrates the observation for the dataset of Example 1
and the ﬁrst criterion.
It is clear that l1 ≤ l2 ≤ l3 ≤ l4 ≤ l5 and u1 ≤ u2 ≤ u3 ≤ u4 ≤ u5, and for
instance, because a1 is in W (a2) ∩ W (a4), a1 is also in W (a3).

W (a2)

W (a5)

W (a1)

f1(a2)

f1(a3)
f1(a4)

f1(a1)

W (a3)
W (a4)

f1(a5)

Figure 4: windows Wi for each alternative ai on the ﬁrst criterion from the example

From the lemma it is clear that if we construct the windows in order from
W (a1) to W (an), every time an element x leaves a window, we will never have
to reconsider it; that is, if x ∈ W (ai), but x (cid:54)∈ W (ai+1), then for all j =
i + 1 . . . n, x ∈ L(aj). This gives rise to the following incremental algorithm:
when computing W (ai) from W (ai−1), we ﬁrst shift the leftmost border of the
window; we increment the index λ until λ = n + 1 or fk(aλ) ≥ li, followed
by shifting the rightmost border of the window by incrementing index υ until
υ = n or fk(aυ+1) > ui. The resulting algorithm is given as Algorithm 1.
The key observation in determining the complexity of this procedure is that
sorting the dataset on criterion qk is executed once and takes time O(n log(n))
using standard out-of-the-box sorting algorithms such as merge-sort. Further-
more, lines 2 → 9 are executed only if the test on line 1 succeeds, which is at
most n + 1 times over all incremental computations, because λ is incremented
by 1 every time the condition is true. In every invocation of Algorithm 1, the
test on line 1 will fail exactly once. Therefore, over all iterations the test on

8

line 1 is executed at most 2n + 1 times, and lines 2 → 9 are executed at most n
times. For the second while loop (lines 10 → 18) the same argumentation holds,
leading to a time complexity of O(n log(n) + 2(n + 2n + 1)) = O(n log(n)).

Input: Index i,
Indices λ, υ such that: if i = 1, λ = υ = 0

L(ai−1) = {aj | j < λ}

W (ai−1) = {aj | λ ≤ j < υ}
R(ai−1) = {aj | υ < j}

else, if i > 1:

and card. |Li−1| ,|Wi−1| ,|Ri−1| (if i = 1 these are resp. 0, 0, and n)
Output: Updated cardinalities |Li| ,|Wi| ,|Ri|,

L(ai) = {aj | j < λ}

W (ai) = {aj | λ ≤ j < υ}
R(ai) = {aj | υ < j}

and updated indices λ, υ s.t.

1 while λ ≤ n and fk(aλ) < li do

8
9 end
10 while υ < n and fk(aυ+1) ≤ ui do

if aλ ∈ W then

|W| ← |W| − 1 ;
|R| ← |R| − 1 ;

else

end
|L| ← |L| + 1 ;
λ ← λ + 1 ;

|R| ← |R| − 1 ;
if aυ ≥ li then

|W| ← |W| + 1 ;
|L| ← |L| + 1 ;

else

end
υ ← υ + 1 ;

2

3

4

5

6

7

11

12

13

14

15

16

17
18 end

// aλ moves from W (ai−1) to L(ai)

// aλ moves from R(ai−1) to L(ai)

// aλ enters L(ai)

// aυ leaves R(ai−1)

// aυ enters W (ai)

// aυ enters L(ai)

Algorithm 1: Algorithm to compute W (ai) from W (ai−1) for i = 1...n

9

3.3. Incremental computation of S(a) =(cid:80)

x∈W (a) fk(x)

For computing the sum S(ai) from S(ai−1), it suﬃces to look at the diﬀer-

ences between S(ai) and S(ai−1):

(cid:88)

x∈W (ai)

fk(x) − (cid:88)
(cid:88)
(cid:88)

fk(x)

x∈W (ai−1)

fk(x) − (cid:88)
fk(x) − (cid:88)

x∈W (ai)\W (ai−1)

x∈W (ai−1)\W (ai)

x∈W (ai)∩R(ai−1)

x∈W (ai−1)∩L(ai)

S(ai) − S(ai−1) =

=

=

(16)

fk(x)

(17)

fk(x)

(18)

In other words, when incrementally computing the window W (ai) from W (ai−1),
we should only keep track of the alternatives leaving W (ai−1) (step 3 of Algo-
rithm 1), and those entering W (ai) (step 13 of Algorithm 1).
Example 4. Consider computing W (a5) from W (a4) = {a1, a2}. We start by
comparing the leftmost (with respect to the criterion f1 that we are currently
evaluating) alternative a1 to l5 = 7. Since f1(a1) = 5 < l5, we remove a1 from
the window and move to the next element. Similarly, f1(a2) = 6 is too small.
The ﬁrst element large enough is a3. Then we start moving the right side of the
interval. We know that the right side of the window is at least 1 to the left of
the left-side of the interval (in case of an empty interval); hence it is at least
a2. Furthermore, we know that the right side of the window should be at least
as far to the right as the right side of the window of the previous step. This is
again a2. Hence, our ﬁrst test is if the next element, a3, is also in the window.
This is tested by comparing f1(a3) = 7 with u5 = 9. Since u5 is larger, a3 gets
added to the window. Similarly, a4 is added as f1(a4) ≤ u5. The extension of
the window stops as f1(a5) = 10 exceeds the upper bound u5. The new window
W (a5) equals {a3, a4}.

In the course of the computation of W (a5) from W (a4), elements a1 and a2
are expelled from the window, while elements a3 and a4 are added. Henceforth,
S(a4) is updated by subtracting f1(a3) and f1(a4) and adding f1(a3) and f1(a4).

3.4. Complete Algorithm

By combining the incremental computation of the windows and of the sums,
we obtain Algorithm 2 to compute the unicriterion positive ﬂow scores of a set
of alternatives.

In Algorithm 2, we consider the use of queue data structures. These struc-
tures act as a LIFO (Last In First Out) store. pop() returns and removes the
ﬁrst item of the queue, append(item) adds item to the end of the queue, and
inspect() inspects the ﬁrst element of the queue without removing it. Both
window queue and waiting queue are initialized as queue structures. φ+ is

10

/* set up a table to store the φ+ values */

initialized as a vector of values to store the computed positive ﬂows.

Data: qk, pk, fk for all alternatives
Result: φ+ of each alternative

1 initialize(φ+) ;
2 W ← generate queue() ;
3 R ← generate queue() ;
4 sort(fk) ;
5 i ← 2;
6 φ+[1] ← 0 ;
7 while i ≤ size(fk) do
φ+[i] ← φ+[i − 1] ;
while not is empty(W) and (fk(i) − W.inspect()) ≥ pk do

8

9

/* sort the alternatives in ascending order */

/* first alternative has a pos flow of 0 */

10

11

12

13

14

15

16

17

18

19

20

21

22

23

24

25

window item ← W.pop() ;
φ+[i] ← φ+[i] + 1
n−1

pk−(fk(i−1)−window item)

pk−qk

;

fk(i)−fk(i−1)

end
φ+[i] ← φ+[i] + size(W ) ∗ 1
n−1
while not is empty(R) and (fk(i) − R.inspect()) ≥ qk do
waiting item ← R.pop() ;
φ+[i] ← φ+[i] + 1
if fk(i)−waiting item

n−1 min( fk(i)−waiting item−qk

pk−qk

pk−qk

, 1) ;

;

pk−qk

< 1 then
R.append(waiting item) ;

end

end
current i ← i ;
while i ≤ size(fk) and fk(current i) = fk(i) do

R.append(fk(i)) ;
φ+[i] ← φ+[current i] ;
i ← i + 1 ;

end

26
27 end

Algorithm 2: Complete algorithm for the computation of unicriterion PRO-
METHEE II (linear preference function)

4. Empirical validation

We compare the performance of our sorting-based algorithm, that we will
call Sorting Based PROMETHEE (SBP), with that of the straightforward al-
gorithm based on iterating over all pairs of alternatives2. Even though from
the theoretical analysis it is crystal clear that the O(qn log(n)) sorting-based

2All code of the algorithms used in the comparisons in this section, as well as scripts for
generating the data will be made available online and a link will be included in the ﬁnal
version of the paper.

11

method will outperform the O(qn2) standard method, we want to illustrate
with these experiments how large the actual diﬀerence is and to what new prob-
lem sizes PROMETHEE II can be scaled. We do not make any comparison of
the ranking produced since the sorting-based method is exact and hence the
ﬂow scores and ranking produced is always exact. The tests have been executed
on a computer with an Intel Core 2 Quad 2.0 GHz and 4 Gb of RAM. The data
we use is unicriterion and was generated using a random uniform distribution
of values to have as many diﬀerent values as possible.

Figure 5 shows runtime versus number of alternatives for the standard im-
plementation of PROMETHEE, while Figure 6 shows the same graph for the
sorting-based implementation. The time to compute the unicriterion net ﬂow
scores is shown on the Y axis and the number of alternatives to rank on the
X axis. Note that the scale on the X axes (number of alternatives) is vastly
diﬀerent because the standard method was not able to scale to larger sizes. To
illustrate this diﬀerence, the rightmost point in Figure 5 shows that the standard
evaluation method for PROMETHEE for 25000 alternatives takes over half an
hour while for the sorting-based method this point is on the far left in the graph
and takes less than half a second!

Figure 5: Execution time with respect to the number of alternatives in the case of standard
PROMETHEE

Table 1, illustrates the computation time’s increase in function of the num-
ber of alternatives. Every next line the number of alternatives considered is
multiplied by 2. The tables includes the computation times required to com-
pute the unicriterion net ﬂow scores of those sets of alternatives. For standard
PROMETHEE, The execution time increases by a factor 4, as expected due to
the complexity in O(n2). For the incremental version, however, it increases by
a factor only slightly larger than 2.

12

050001000015000200002500030000Number of alternatives05001000150020002500Excution time (in seconds)Execution time in the case of "standard" PROMETHEEFigure 6: Execution time with respect to the number of alternatives in the case of sorting-
based PROMETHEE

For a small number of alternatives, both methods perform satisfactorily, but
when the number increases the diﬀerence increases rapidly. Indeed, for more
than 216 alternatives, the standard version needs more than 1 hour to compute
all the scores while the incremental one requires less than a second!

5. Conclusion

In this paper, we have presented a method that reduces the computation time
complexity of PROMETHEE in the case of the linear preference function from
O(qn2) to O(qn log(n)). The method is based on an incremental computation
after ﬁrst sorting the alternatives for each criteria. With this new algorithm
SBP we have presented, the complexity problem is solved for PROMETHEE; it
can now be applied to big sets of alternatives requiring only a small amount of
time. The bottom line is: if the dataset can be sorted, PROMETHEE can be
applied.

This opens up questions on the interpretation of unicriterion ﬂow scores.
Indeed, we have a formulation of φ+(ai) in function of φ+(ai−1). We can see
that with the linear preference function, the diﬀerence in scores between ai and
ai−1 only depends on the alternatives that were in the windows of ai and ai−1.
This could be explored in future research.

Although we have developed our algorithm for the linear preference function,
it can easily be extended to the level criterion preference function. The method,
however, does not work for the Gaussian preference function. Hence, developing
a similarly improved version of PROMETHEE with the Gaussian preference
function remains future work as well.

13

05001000150020002500300035004000Number of alternatives (in thousands)01020304050607080Excution time (in seconds)Execution time in the case of "sorting-based" PROMETHEE# alternatives

Standard PROMETHEE Incremental PROMETHEE

2
4
8
16
32
64
128
256
512
1024
2048
4096
8192
16384
32768
65536
131072
262144
524288
1048576
2097152
4194304

3e-05
7e-05
0.00021
0.00078
0.003
0.012
0.047
0.19
0.75
2.98
11.88
47.55
190
775
3216
12876
NA
NA
NA
NA
NA
NA

5e-05
6e-05
0.0001
0.00017
0.00032
0.0006
0.0012
0.0024
0.0048
0.0097
0.02
0.04
0.08
0.17
0.35
0.74
1.56
3.34
7.04
14.7
30.5
64.2

Table 1: Execution time in seconds for the standard and incremental PROMETHEE.

14

References

[1] B. Roy, P. Vincke, Multicriteria analysis: survey and new directions, Eu-

ropean Journal of Operational Research 8 (3) (1981) 207–218.

[2] B. Roy, Paradigms and challenges, in: Multiple criteria decision analysis:

State of the art surveys, Springer, 2005, pp. 3–24.

[3] J. Dyer, Maut — multiattribute utility theory, in: Multiple Criteria De-
cision Analysis: State of the Art Surveys, Vol. 78 of International Series
in Operations Research & Management Science, Springer New York, 2005,
pp. 265–292.

[4] J. Siskos, G. W¨ascher, H.-M. Winkels, Outranking approaches versus maut
in mcdm, European Journal of Operational Research 16 (2) (1984) 270–271.

[5] P. Korhonen, Interactive methods, in: Multiple Criteria Decision Analysis:
State of the Art Surveys, Vol. 78 of International Series in Operations
Research & Management Science, Springer New York, 2005, pp. 641–661.

[6] J. Figueira, V. Mousseau, B. Roy, Electre methods, in: Multiple criteria

decision analysis: State of the art surveys, Springer, 2005, pp. 133–153.

[7] J.-P. Brans, B. Mareschal, Promethee methods, in: Multiple Criteria De-
cision Analysis: State of the Art Surveys, Vol. 78 of International Series
in Operations Research & Management Science, Springer New York, 2005,
pp. 163–186.

[8] M. Behzadian, R. B. Kazemzadeh, A. Albadvi, M. Aghdasi, Promethee: A
comprehensive literature review on methodologies and applications, Euro-
pean Journal of Operational Research 200 (1) (2010) 198–215.

[9] O. Marinoni, A discussion on the computational limitations of outrank-
ing methods for land-use suitability assessment, International Journal of
Geographical Information Science 20 (1) (2006) 69–87.

[10] J. M. Pereira, L. Duckstein, A multiple criteria decision-making approach to
gis-based land suitability evaluation, International Journal of Geographical
Information Science 7 (5) (1993) 407–424.

[11] F. Joerin, M. Th´eriault, A. Musy, Using gis and outranking multicriteria
analysis for land-use suitability assessment, International Journal of Geo-
graphical information science 15 (2) (2001) 153–174.

[12] J. C. Aerts, G. B. Heuvelink, Using simulated annealing for resource al-
location, International Journal of Geographical Information Science 16 (6)
(2002) 571–587.

[13] S. Eppe, Y. De Smet, Approximating Promethee II’s net ﬂow scores by
piecewise linear value functions, European journal of operational research
233 (3) (2014) 651–659.

15

[14] B. Mareschal, Y. De Smet, P. Nemery, Rank reversal in the Promethee
II method: some new results, in: Industrial Engineering and Engineering
Management, 2008. IEEM 2008. IEEE International Conference on, IEEE,
2008, pp. 959–963.

16

