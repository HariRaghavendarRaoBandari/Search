6
1
0
2

 
r
a

 

M
5
1

 
 
]
h
p
-
p
m
o
c
.
s
c
i
s
y
h
p
[
 
 

1
v
7
8
7
4
0

.

3
0
6
1
:
v
i
X
r
a

States and channels in quantum mechanics without complex

numbers∗
J.A. Miszczak†

Institute of Theoretical and Applied Informatics, Polish Academy of Sciences

Baltycka 5, 44100 Gliwice, Poland

Applied Logic, Philosophy and History of Science group, University of Cagliari

Via Is Mirrionis 1, 09123 Cagliari, Italy

0.15 (15/03/2016)

Abstract

In the presented note we aim at exploring the possibility of abandoning complex num-
bers in the representation of quantum states and operations. We demonstrate a simpliﬁed
version of quantum mechanics in which the states are represented using real numbers only.
The main advantage of this approach is that the simulation of the n-dimensional quantum
system requires n2 real numbers, in contrast to the standard case where n4 real numbers
are required. The main disadvantage is the lack of hermicity in the representation of quan-
tum states. Using Mathematica computer algebra system we develop a set of functions for
manipulating real-only quantum states. With the help of this tool we study the properties
of the introduced representation and the induced representation of quantum channels.

1

Introduction

Quantum information theory aims at harnessing the behavior of quantum mechanical objects
to store, transfer and process information. This behavior is, in many cases, very diﬀerent
from the one we observe in the classical world [1]. Quantum algorithms and protocols take
advantage of the superposition of states and require the presence of entangled states. Both
phenomena arise from the rich structure of the space of quantum states [2]. Hence, to
explore the capabilities of quantum information processing, one needs to fully understand
this space. Quantum mechanics provides us also with much larger of allowed operations
than in classical case space. It can be used to manipulate quantum states. However, the
exploration of the space of quantum operations is fascinating, but cumbersome task.

Functional programming is frequently seen as an attractive alternative to the traditional
methods used in scientiﬁc computing, which are based mainly on the imperative program-
ming paradigm [3]. Among the features of functional languages which make them suitable
for the use in this area is the easiness of execution of the functional code in the parallel
environments.

During the last few years Mathematica computing system has become very popular in
the area of quantum information theory and the foundations of quantum mechanics. The
main reason for this is its ability to merge the symbolic and numerical capabilities [4], both
of which are often necessary to understand the theoretical and practical aspects of quantum
systems [5, 6, 7, 8].

∗Presented at 21st International Conference on Applications of Computer Algebra 2015 (ACA2015), July

20-23, 2015, Kalamata, Greece.

†E-mail: miszczak@iitis.pl

1

In this paper we utilize the ability to merge symbolical and numerical calculations oﬀered
by Mathematica to investigate the properties of the variant of quantum theory based of the
representation of density matrices built using real-numbers only. We start by introducing
the said representation, including the Mathematica required functions. Next, we test the
behavior of selected partial operations in this representation and consider the general case
of quantum channels acting on the space of real-only density matrices. In the last part we
provide some insight into the spectral properties of the real-only density matrices. Finally,
we provide the summary and the concluding remarks.

1.1 Preliminaries

In quantum mechanics the state is represented by positive semideﬁnite, normalized matrix.
In the following we focus on this property as it is crucial for the properties of quantum states
and channels. To be more speciﬁc, we aim at using symbolic matrix which are hermitian.
Using the symbolic capabilities of Mathematica they can be expressed as

SymbolicDensityMatrix [ a , b , d ]

:= Array [

I f [#1 < #2, a#1,#2 + I b#1,#2 ,

I f [#1 > #2, a#2,#1 − I b#2,#1 , a#1,#2 ] ] &, {d , d} ]

the real and the imaginary parts of the matrix elements.

In the above deﬁnition slots a and b are used to specify the symbols used to denote
Additionally one has to take into account the fact that symbols a {i , j} and b {i , j}
represent real numbers. This fact is useful during the simpliﬁcations in the formulas and
can be expressed using the function

SymbolicDensityMatrixAssume [ a , b , d ]

:=

$Assumptions = Map[ Element[# , Reals ] &,

Flatten [ Join [

Table [ ai,j , { i , 1 , d} , { j , i , d} ] ,
Table [ bi,j , { i , 1 , d} , { j ,

i +1, d} ]

] ]

]

It is easy to see that the normalization condition can be easily added to the list of
assumptions. However, the conditions for the positivity, e.g. in the form of the positivity
conditions for the principal minors, are more complicated [9, Chapter 1].

One should note that, in order to utilize the hermicity conditions for a matrix deﬁned
using function SymbolicDensityMatrix, is it necessary to execute function specifying
assumptions – SymbolicDensityMatrixAssume – with the same symbolic arguments.

Another function useful for the purpose of analyzing the operation on quantum states is

SymbolicMatrix function deﬁned as

SymbolicMatrix [ a , d1 , d2 ]

:=

Array [ Subscript [ a , #1, #2] &, {d1 , d2 } ]

Using Flatten function in combination with Map we can impose a list of assumptions on
the elements of the symbolic matrix. For example, if one needs to ensure that the elements
of the matrix mA are real, this can be achieved as

mA = SymbolicMatrix [ a , 2 , 2 ] ;
$Assumptions = Map[ Element[# , Reals ] &, Flatten [mA] ]

2 Using real density matrices

Clearly, the representation of the density used in Section 1.1 is redundant as the oﬀ-diagonal
element ai,j + ibi,j is conjugate to aj,i − ibj,i. Using this observation we can represent any

2

density matrix as a real matrix with elements deﬁned as
i ≤ j
i > j

R[ρ]ij =

(cid:26) Reρij

−Imρij

.

(1)

The above deﬁnition can be translated into Mathematica code as

ComplexToReal [ denMtx ]

:= Block [{ d = Dimensions [ denMtx ] [ [ 1 ] ] } ,

Array [ I f [#1 <= #2, Re[ denMtx [ [ # 1 , # 2 ] ] ] ,

−Im[ denMtx [ [ # 1 , # 2 ] ] ] ] &, {d , d} ]
]

Thus, for a given density matrix, describing d-dimensional system we get a matrix with
n2 real elements, instead of a matrix with n2 complex (or n4 real) elements. Note, that
these numbers can be reduced during the simulation due to the positivity and normalization
conditions, but this requires distinguishing between diagonal and oﬀ-diagonal elements.
In the following we denote the map deﬁned by the ComplexToReal function as R[·].
One should note that R : Mn(C) (cid:55)→ Mn(R). However, we will only consider multiplication
by real numbers as it does not aﬀect the hermicity of the density matrix.

The real representation of a density matrix contains the same information as the original

matrix. As such it can be used to reconstruct the initial density matrix.

Assuming that realMtx represents a real matrix obtained as a representation of the

density matrix one can reconstruct the original density matrix as

RealToComplex [ r e a l M t x ]

:= Block [{ d = Dimensions [ realMtx ] [ [ 1 ] ] } ,

Array [ I f [#1 < #2, realMtx [ [ # 1 , # 2 ] ] + I realMtx [ [ # 2 , # 1 ] ] ,

I f [#1 > #2, realMtx [ [ # 2 , # 1 ] ] − I realMtx [ [ # 1 , # 2 ] ] ,
realMtx [ [ # 1 , # 2 ] ] ] ] &, {d , d} ]

see that for any ρ we have R[C[ρ]] = ρ.

]
The map deﬁned by the function RealToComplex will be denoted as C[·]. It is easy to
One can also see that maps R and C are linear if one considers the multiplication by
real numbers only. Thus it can be represented as a matrix on the Hilbert-Schmidt space of
density matrices. Using this representation one gets

R[ρ] = res−1 (MR res(ρ))

(2)

where res is the operation of reordering elements of the matrix into a vector [10].

The introduced representation can be utilized to reduce the amount of memory required
during the simulation. For the purpose of modelling the discrete time evolution of quantum
system, one needs to transform the form of quantum maps into the real representation. For
a map Φ given as a matrix MΦ one obtains its real representation as

MR[Φ] = MRMΦMC

(3)

One can see that this allows the reduction of the number of multiplication operations required
to simulate the evolution.

3 Examples
Let us now consider some examples utilizing maps R and C. We will focus on the computa-
tion involving symbolic manipulation of states and operations. Only in the last example we
use the statistical properties of density matrices which have to be calculated numerically.

3.1 One-qubit case

In the simplest case of two-dimensional quantum system, the symbolic density matrix can
be obtained as

3

SymbolicDensityMatrix [ a , b , 2 ]

which results in

(cid:18)

a1,1

a1,2 − ib1,2

a1,2 + ib1,2

a2,2

(cid:19)

.

(4)

The list of assumptions required to force Mathematica to simplify the expressions involv-

ing the above matrix can be obtained as

SymbolicDensityMatrixAssume [ a , b , 2 ]

which results in storing the following list
{a1,1 ∈ Reals , a1,2 ∈ Reals , a2,2 ∈ Reals , b1,2 ∈ Reals}
in the global variable $Assumptions.

In Mathematica the application of map R on the above matrix results in

(cid:18)

(cid:19)

Re (a1,1)

Re (b1,2) − Im (a1,2)

Re (a1,2) − Im (b1,2)

Re (a2,2)

,

(5)

where Re and Im are the functions for taking the real and the imaginary parts of the
number. Only after using function FullSimplify one gets the expected form of the output

In the one-qubit case it is also easy to check that map R is represented by the matrix

The matrix representation of the map C reads

M (2)C = (M (2)R )−1 =

The above consideration can be repeated and in the case of three-dimensional quantum

system the matrix representation of the R map reads

(cid:18) a1,1 a1,2
(cid:19)
(cid:18) 2 0 0 0

a2,2

b1,2

.

M (2)R =

1
2

0 1 1 0
0 −i i 0
0 0 0 2

(cid:19)
(cid:18) 1 0 0 0

.

0 1 i 0
0 1 −i 0
0 0 0 1



2 0 0 0 0 0 0 0 0
0 1 0 1 0 0 0 0 0
0 0 1 0 0 0 1 0 0
0 −i 0 i 0 0 0 0 0
0 0 0 0 2 0 0 0 0
0 0 0 0 0 1 0 1 0
0 0 −i 0 0 0 i 0 0
0 0 0 0 0 −i 0 i 0
0 0 0 0 0 0 0 0 2

.

(cid:19)
 .

(6)

(7)

(8)

(9)

(10)

(11)

(12)

M (3)R =

1
2

3.2 One-qubit channels

The main beneﬁt of the real representation of density matrices is the smaller number of
multiplications required to describe the evolution of the quantum system.

To illustrate this let us consider a bit-ﬂip channel deﬁned by Kraus operators

or equivalently as a matrix

M (2)

BF =

The form of this channel on the real density matrices is given by

(cid:26)(cid:18) √

1 − p
0

(cid:19)(cid:27)

,

(cid:18) 0

√

,

p

√

0
1 − p

(cid:19)
(cid:32) 1−p 0

√
p
0

(cid:33)

.

0
0 1−p p
0
p

p
0
p 1−p 0
0 1−p
0

(cid:18) 1−p 0

0
0

p
0 1
0
0 0 1−2p 0
1−p
p 0

0

(cid:19)

.

M (2)R M (2)

BF M (2)C =

4

This map acts on the real density matrix as

(cid:18) pa2,2 − (p − 1)a1,1

(1 − 2p)b1,2

(cid:19)

.

a1,2

pa1,1 − (p − 1)a2,2

(13)

One should note that in Mathematica the direct application of the map R on the output

of the channel, ie. MRMBF res ρ, results in

(cid:18) Re (pa2,2 − (p − 1)a1,1)

(1 − 2Re(p))b1,2

(cid:19)

a1,2 + 2Im(p)b1,2

Re (pa1,1 − (p − 1)a2,2)

.

(14)

In order to get the simpliﬁed result one needs to explicitly specify assumptions p ∈ Reals.
This is important if one aims at testing the validity of the symbolic computation, as without
this assumptions Mathematica will not be able to evaluate the result.

3.3 Werner states

As the ﬁrst example of the quantum states of the composite system let us use the Werner
states deﬁned for two-qubit systems as

The partial transposition transforms W (a) as

4
0
0
a
2

 a+1
 a+1

4
0
0
0

1−a

0

4
0
0

0
0

1−a

4
0

a
2
0
0

a+1

4

0

1−a

4
a
2
0

0
a
2

1−a

4
0

0
0
0

a+1

4

W (a) =

W (a)TA =

and this matrix has one negative eigenvalue for a > 1/3, which indicates a presence of
quantum entanglement.

In this case the real representation of quantum states reduces one element from the W (a)

matrix and we get

R[W (a)] =

 a+1

4
0
0
0

0

1−a

4
0
0

0
0

1−a

4
0

a
2
0
0

4

a+1

This matrix has eigenvalues(cid:26) 1 − a

4

1 − a

4

,

,

a + 1

4

,

a + 1

4

and we have that the sum of smaller eigenvalues is greater than the larger eigenvalue for
a > 1/3.

3.4 Partial transposition

Another important example related to the composite quantum systems is the case of partial
quantum operations. Such operations arise in the situation when one needs to distinguish
between the evolution of the system and the evolution of the same system threated as a part
of a bigger subsystem.

Let us consider the partial transposition of the two-qubit density matrix

ρ = SymbolicDensityMatrix [ x , y , 4 ]

5

 .
 ,

 .
(cid:27)

,

(15)

(16)

(17)

(18)

which is given by

ρTA =



x1,1

x1,2 + iy1,2 x1,3 − iy1,3 x2,3 − iy2,3
x1,4 − iy1,4 x2,4 − iy2,4
x3,4 + iy3,4

x1,2 − iy1,2
x1,3 + iy1,3 x1,4 + iy1,4
x2,3 + iy2,3 x2,4 + iy2,4 x3,4 − iy3,4

x2,2

x3,3

x4,4

One can easily check that in this case

 x1,1
 x1,1 x1,2

R[ρTA ] =

x1,3 x2,3
x1,2
y1,2
x1,4 x2,4
x2,2
−y1,3 −y1,4 x3,3 x3,4
−y2,3 −y2,4
y3,4 x4,4

(R[ρ])TA =

y1,3
y1,4

y2,3
y1,2 x2,2
y2,4
x1,3 x1,4 x3,3 x3,4
x2,3 x2,4
y3,4 x4,4

R[ρTA ] (cid:54)= (R[ρ])TA .


 ,

and

and thus

 .

(19)

(20)

(21)

(22)

(cid:18)

(cid:19)

For this reason one cannot change the order of operations. However, the explicit form of the
partial transposition on the real density matrices can be found by representing operation of
partial transposition as a matrix [10],
ChannelToMatrix [ PartialTranspose [# , { 2 , 2} , { 1} ] &, 4 ]
and using Eq. (3).
of the form Φ ⊗ 1, where 1 denotes the identity operation of the subsystem.

One should note that this method can be used to obtain an explicit form of any operation

3.5 Partial trace

The second important example of a partial operation is the partial trace. This operation
allows obtaining the state of the subsystem.

For two-qubit density matrix we have

trAρ =

x1,1 + x3,3

x1,2 + x3,4 − i (y1,2 + y3,4)

x1,2 + x3,4 + i (y1,2 + y3,4)

x2,2 + x4,4

.

(23)

One can verify that the operation of tracing-out the subsystem commutes with the map

R and in this case we have

C[trA R[ρ]] = trAρ.

(24)

Thus one can calculate the reduced state of the subsystem using the real value representation.

3.6 Random real states

In this section we focus on the statistical properties of the matrices representing real quantum
states. The main diﬃculty here is that, in contrast to the random density matrices, real
representations can have complex eigenvalues.

Random density matrices play an important role in quantum information theory and they
are useful in order to obtain information about the average behavior of quantum protocols.
Unlike the case of pure states, mixed states can be drawn uniformly using diﬀerent methods,
depending on the used probability measure [2, 11, 12].

One of the methods is motivated by the physical procedure of tracing-out a subsystem.
In a general case, one can seek a source of randomness in a given system, by studying the
interaction of the n-dimensional system in question with the environment. In such situation

6

the random states to model the behaviour of the system should be generated by reducing a
pure state in N × K-dimensional space. In what follows we denote the resulting probability
measure by µN,K.

Using Wolfram language, the procedure for generating random density matrices with

µN,K can be implemented as

RandomState [ n , k ]

:= Block [{gM} ,

gM = GinibreMatrix [ n , k ] ;
Chop[#/Tr [ # ] ] &@(gM. ConjugateTranspose [gM ] )

]

where function GinibreMatrix is deﬁned as

GinibreMatrix [ n , k ]

:= Block [{ d i s t } ,

d i s t = NormalDistribution [ 0 , 1 ] ;
RandomReal [ d i s t ,{ n , k } ] + I RandomReal [ d i s t ,{ n , k } ]

]

3.7 Spectral properties

In the special case of K = N we obtain the Hilbert-Schmidt ensemble. The distribution
of eigenvalues for K = N = 4 (i.e. Hilbert-Schmidt ensemble for ququart) is presented in
Fig. 1.

Figure 1: Distribution of eigenvalues for 4-dimensional random density matrices distributed
uniformly with Hilbert-Schmidt measure for the sample of size 104. Each color (and contour
style) correspond to the subsequent eigenvalue, ordered by their magnitude.

The real representation for the Hilbert-Schmidt ensemble for one ququart consists of
matrices having four eigenvalues. Two of these values are complex and mutually conjugate
(see Fig. 2).

3.7.1 Form of the resulting matrix elements

Using SymbolicMatrix function one can easily analyze the dependency of the elements of
the resulting matrix on the element of the Ginibre matrix.

For the sake of simplicity we demonstrate this on one-qubit states from the Hilbert-

Schmidt ensemble. In this case the Ginibre matrix can be represented as

7

0.00.20.40.60.80.00.20.40.6Figure 2: Distribution of eigenvalues for 4-dimensional random density matrices distributed
uniformly with Hilbert-Schmidt measure for the sample of size 104. Eigenvalues were ordered
according to their absolute value.

mA = SymbolicMatrix [ a , 2 , 2 ] ;
mB = SymbolicMatrix [ b , 2 , 2 ] ;
m2 = mA + I mB

The resulting density matrix has (up to the normalization) elements given by the matrix

m2 . ConjugateTranspose [ m2 ] .

In this case the real representation is given by

(cid:18) q1,1

(cid:19)

,

q1,2
q2,2

with

q2,1

1,2,

1,1 + b2

1,2 + b2

1,1 + a2

q1,1 = a2
q1,2 = a1,1a2,1 + a1,2a2,2 + b1,1b2,1 + b1,2b2,2,
q2,1 = a2,1b1,1 + a2,2b1,2 − a1,1b2,1 − a1,2b2,2,
q2,2 = a2

2,1 + a2

2,2 + b2

2,1 + b2

2,2.

(25)

(26)

Here ai,j and bi,j are independent random variables used in the deﬁnition of the Ginibre
matrix.

From the above one can see that the elements of the density matrix resulting from the
procedure for generating random quantum states are obtained as a product and a sum of the
elements of real and imaginary parts of the Ginibre matrix. In the case of density matrices

8

0.00.20.40.60.8Re(cid:45)0.20.00.2Im0.000.050.100.150.200.00.20.40.60.8Re(cid:45)0.20.00.2Im0.000.050.100.150.200.00.20.40.60.8Re(cid:45)0.20.00.2Im0.000.050.100.150.200.00.20.40.60.8Re(cid:45)0.20.00.2Im0.000.050.100.150.20the normalization imposes the condition q1,1 = 1 − q2,2. Thus, one can also see that the
elements are not independent.

4 Final remarks

In this note we have introduced a simpliﬁed version of quantum states’ representation using
the redundancy of information in the standard representation of density matrices. Our aim
was to the ﬁnd out if such representation can be beneﬁcial from the point of view of the
symbolic manipulation of quantum states and operations.

To achieve this goal we have used Mathematica computing system to implement the
functions required to operate on real quantum states and demonstrated some examples
where this representation can be useful from the computational point of view.
Its main
advantage is that it can be used to reduce the memory requirements for the representation
of quantum states. Moreover, in some particular cases where the density matrix contains
only real numbers, the real representation reduces to the upper-triangular matrix.

The real representation can be also beneﬁcial for the purpose of modelling quantum chan-
nels. Here its main advantage is that it can be used to reduce the number of multiplications
required during the simulation of the discrete quantum evolution. As a particular example,
we have studied the form of partial quantum operations in the introduced representation.
In the case of the partial trace for the bi-bipartite system, the introduced representation
allows the calculation of the reduced dynamics using the real representation only.

Unfortunately, the introduced representation poses some disadvantages. The main draw-
back of the introduced representation is the lack of hermicity of real density matrices. This
makes the analysis of the spectral properties of real quantum states much more complicated.

Acknowledgement This work has been supported by Polish National Science Centre
project number 2011/03/D/ST6/00413 and RAS project on: ”Modeling the uncertainty:
quantum theory and imaging processing”, LR 7/8/2007. The author would like to thank
G. Sergioli for motivating discussions.

References

[1] J.A. Miszczak. High-level structures for quantum computing, volume #6 of Synthesis
Lectures on Quantum Computing. Morgan and Claypol Publishers, May 2012. DOI:
10.2200/S00422ED1V01Y201205QMC006.

[2] I. Bengtsson and K. Zyczkowski. Geometry of Quantum States: An Introduction to
Quantum Entanglement. Cambridge University Press, Cambridge, U.K., 2006. DOI:
10.1017/CBO9780511535048.

[3] K. Hinsen. The promises of functional programming. Comput. Sci. Eng., 11(4):86–90,

2009. DOI: 10.1109/MCSE.2009.129.

[4] S. Wolfram. An Elementary Introduction to the Wolfram Language. Wolfram Media,

Inc., 2015. ISBN: 9781944183004.

[5] B. Juli´a-D´ıaz, J.M. Burdis, and F. Tabakin. QDENSITY—a Mathematica quan-
DOI:

Comp. Phys. Comm., 174:914–934, 2006.

tum computer simulation.
10.1016/j.cpc.2005.12.021.

[6] F. Tabakin and B. Juli´a-D´ıaz. QCWAVE – a Mathematica quantum computer
DOI:

Comp. Phys. Comm., 182(8):1693 – 1707, 2011.

simulation update.
10.1016/j.cpc.2011.04.010, arXiv:1101.1785.

[7] V.P. Gerdt, R. Kragler, and A.N. Prokopenya. A Mathematica package for simulation
of quantum computation. In V.P. Gerdt, E.W. Mayr, and E.V. Vorozhtsov, editors,
Computer Algebra in Scientiﬁc Computing / CASC2009, volume 5743 of LNCS, pages
106–117. Springer-Verlag, Berlin, 2009. DOI: 10.1007/978-3-642-04103-7 11.

9

[8] J.A. Miszczak. Functional framework for representing and transforming quantum chan-
nels.
In J.L. Galan Garcia, G. Aguilera Venegas, and P. Rodriguez Cielos, editors,
Proc. Applications of Computer Algebra (ACA2013), Malaga, 2-6 July 2013, 2013.
arXiv:1307.4906.

[9] R. Bhatia. Positive Deﬁnite Matrices. Princton University Press, Princeton, U.S.A.,

2007. DOI: 10.1515/9781400827787.

[10] J.A. Miszczak.

tum information theory.
10.1142/S0129183111016683, arXiv:1011.1585.

Singular value decomposition and matrix reorderings in quan-
DOI:

Int. J. Mod. Phys. C, 22(9):897–918, 2011.

[11] J.A. Miszczak. Generating and using truly random quantum states in Mathemat-
ica. Comput. Phys. Commun., 183(1):118–124, 2012. DOI: 10.1016/j.cpc.2011.08.002,
arXiv:1102.4598.

[12] J.A. Miszczak. Employing online quantum random number generators for gener-
ating truly random quantum states in mathematica. Comput. Phys. Commun.,
184(1):257258, 2013. DOI: 10.1016/j.cpc.2012.08.012, arXiv:1208.3970.

10

