6
1
0
2

 
r
a

 

M
5
1

 
 
]
L
F
.
s
c
[
 
 

1
v
1
4
5
4
0

.

3
0
6
1
:
v
i
X
r
a

Fuzzy alternating B¨uchi automata over distributive

lattices

Xiujuan Weia, Yongming Lia

aCollege of Mathematics and Information Science, Shaanxi Normal University, Xi’an,

Shaanxi 710119, PR China

Abstract

We give a new version of fuzzy alternating B¨uchi automata over distribu-
tive lattices: weights are putting in every leaf node of run trees rather than
along with edges from every node to its children. Such settings are great
beneﬁt to obtain complement just by taking dual operation and replacing
each ﬁnal weight with its complement. We prove that L-fuzzy nondetermin-
istic B¨uchi automata have the same expressive power as L-fuzzy alternating
B¨uchi ones. A direct construction (without related knowledge about L-fuzzy
nondeterministic B¨uchi ones such as: above equivalence relation and their
closure properties) is given to show that the languages recognized by L-fuzzy
alternating co-B¨uchi automata are also L-fuzzy ω-regular. Furthermore, the
closure properties and the discussion about decision problems for fuzzy al-
ternating B¨uchi automata are illustrated in our paper.

Keywords:
Fuzzy alternating automata, B¨uchi automata, Dual operation, L-fuzzy
Boolean formulas, Runs

1. Introduction

In computation theory, nondeterminism has played important roles([10,
13]). Viewing nondeterministic computations as words, systems and its spec-
iﬁcations can be seen as languages, then we can translate problems about

Email addresses: xiujuanwei@163.com (Xiujuan Wei), liyongm@snnu.edu.cn

(Yongming Li)

Preprint submitted to Elsevier

March 16, 2016

model checking, satisﬁability and synthesis to ones about languages of au-
tomata. These transforms provide a new automata-theoretic approach to
study system speciﬁcation, veriﬁcation and synthesis, and meanwhile such
method is proven to be eﬀective ([22]). Nondeterministic computation has
only existential quantiﬁer, but as a generalization of nondeterminism, “alter-
nation”, it has existential and universal quantiﬁers ([3]). In [3], A.K.Chandra
studied the properties about alternating Turing machines and their lan-
guages. Moreover, some information about alternating ﬁnite state automata
and alternating pushdown automata were also introduced. Alternating au-
tomata is a useful model to study formal veriﬁcation, and more information
about it can be referred to [12, 20].

In the study of linear temporal logic ([22]), Vardi translated the problems
about programs and speciﬁcations to the ones about languages of automata:
he illustrated that alternating (B¨uchi) automata have same expressive power
as nondeterministic (B¨uchi) ones, and the former ones are exponentially more
succinct than the latters; The result automaton obtained after taking dual
operation and exchanging ﬁnal and non-ﬁnal states is the complement to the
original alternating (B¨uchi) automaton, which reﬂects the great advantage of
“alternation”. Then he use these conclusions to build an alternating B ¨uchi
automaton for an LTL formula and such that the language of such automaton
is exactly the set of computations satisfying that LTL formula.

Are these conclusions about alternating B¨uchi automata all suitable for
weighted cases? i.e., (from the perspective of automata) Are there automata
with weighted existential and universal quantiﬁers? In [1, 4], O.Kupferman
et al. had already introduced the deﬁnition of weighted alternating B¨uchi
automata, which answers the above question. O.Kupferman et al. studied
the expressive powers of weighted alternating B¨uchi automata for special se-
mantics such as M ax, Sum, Sup, LimSup and so on over real number set,
and discussed the relationship between them simultaneously. But these spe-
ciﬁc semantics make the conclusions restricted, and the discussion about the
relation between weighted alternating B¨uchi automata and nondeterministic
B¨uchi ones is not involved. Furthermore, their automata have no ﬁnal state,
which is not comprehensive and general: the inﬂuences exerted by ﬁnal states
are not taken into the consideration, and thus, the Boolean cases cannot be
seen as the special case of theirs. It shows the drawbacks of the version of
weighted alternating B¨uchi automata in [1, 4]. So we want to give another
one to avoid above shortcomings.

Derived from these ideas, we will introduce a new version of weighted

2

(cid:87)

to (cid:86)

alternating B¨uchi automata with weights in distributive lattices, of which
the properties such as: the equivalence relation between weighted nondeter-
ministic B¨uchi automata and weighted alternating B¨uchi ones, the closure
properties can be established. In ours, the factor about ﬁnal states are con-
sidered, and our version are more convenient to calculate the weights of their
languages:
for a word, to describe how likely it can be accepted depends
on all successful runs on it, and the weight of each run is obtained just by
taking conjunction of the weights of all branches, to be speciﬁc, if the branch
is ﬁnite, its weight is equal to the label of its leaf node, otherwise, it is equal
F (qj), where q0, q1,··· is the label sequence of such branch and F is
the L-valued fuzzy sets of ﬁnal states. Such advantage is due to our weights’
and transitions’ settings: the image set of the transition function “δ” is a
subset of Boolean formulas over L ∪ Q (L is a distributive lattice and Q is
the states set) rather than that in [1, 4], a subset of Boolean formulas over
L × Q. Then in the runs of our version, weights and states are the labels of
nodes (weights can and only can label the leaf nodes), which is much clearer
and simpler than the case of [1, 4]: weights label the edges between nodes
and each node is labeled by states.

i≥0

j≥i

In section 2, some pre-knowledge about alternating B¨uchi automata are
introduced.
In section 3, with the notion of fuzzy Boolean formulas, we
give the deﬁnitions of fuzzy alternating B¨uchi automata over distributive
lattices, show how to calculate the weights of run trees of our version (leaf
nodes labeled by weights), and illustrate the equivalence relation between L-
fuzzy alternating B¨uchi automata and L-fuzzy nondeterministic B¨uchi ones.
The closure properties about L-fuzzy alternating B¨uchi automata are intro-
duced in section 4. A construction showing the languages recognized by
L-fuzzy alternating co-B¨uchi automata are also L-fuzzy ω-regular without
using the equivalence relation between L-fuzzy alternating B¨uchi automata
and L-fuzzy nondeterministic B¨uchi ones and closure properties of L-fuzzy
nondeterministic B¨uchi ones is provided. In section 5, we discuss the decision
problems (emptiness-value, universality-value, implication-value problems)
for L-fuzzy alternating B¨uchi automata: these problems can be decidable
in exponential time and are PSPACE-complete. Some speciﬁc examples are
given in the last section, which can be evidences to testify our theorems’ cor-
rectness. Similarly to classical case, the above conclusions could also be seen
as an eﬀective approach to study fuzzy temporal logic, which can be leaving
as one future study. For example, how to build a fuzzy alternating B¨uchi

3

automaton for a fuzzy LTL formula such that the language of this automaton
is exactly the fuzzy set of computations satisfying that fuzzy LTL formula.

2. Preliminaries

For a set X, let B+(X) denote the set of all positive Boolean formulas over
it (i.e., Boolean formulas built by elements of X using ∧ and ∨). Besides,
B+(X) includes two special formulas, true and false. For Y ⊆ X and
θ ∈ B+(X), we say that Y satisﬁes θ, if the truth value is true after assigning
true to the members of Y and assigning f alse to the members of X − Y ;
furthermore, if there is no proper subset of Y satisfying θ, then we say Y
satisﬁes θ in a minimal manner. Obviously, {x1, x2, x3} satisﬁes the formula
(x1 ∨ x2) ∧ x3, and {x1, x2}, {x1, x3} satisfy it in a minimal manner, while
the set {x2, x3} does not.
For any nondeterministic B¨uchi automaton A = (Q, Σ, δ, q0, F ), some
formulas from B+(Q) can be used to represent its δ. For example, for a
transition δ(q, a) = {q1, q2, q3}, it can be described by formula q1 ∨ q2 ∨
q3. Based on such representation, there is a new notion: alternating B ¨uchi
automata. The only distinctions between nondeterministic and alternating
ones are transitions “δ”.
Deﬁnition 2.1. ([22]) An alternating B¨uchi automaton is a ﬁve tuple A =
(Q, Σ, δ, q0, F ), where Q is a ﬁnite nonempty set of states, Σ is a ﬁnite
nonempty set of input symbols, called alphabet; q0 and F denote the ini-
tial state and the set of ﬁnal states respectively, δ is a transition function
from Q × Σ into B+(Q).

In an alternating B¨uchi automaton, the transitions can be any formula
of B+(Q). The language recognized by an alternating B¨uchi automaton is
characterized by induction, for instance, if δ(q, a) = (q1∧q2)∨q3 is a transition
of some alternating B¨uchi automaton, which means this automaton accepts
aw from q, if it accepts w from both q1 and q2 or from q3, where w is a word
of Σω. It is clear that such transition includes both the features of existential
choice (the disjunction in the formula) and universal choice (the conjunction
in the formula).

Because of the universal choice, a run of an alternating B¨uchi automaton
|x| denotes the level which the node x
is a tree rather than a sequence.
occurring at; in particular, for root ε, |ε| = 0 (x and ε are symbols rather

4

than speciﬁc states). A branch β = x0, x1,··· of a tree is a nodes sequence,
where x0 is ε and xi is the parent of xi+1 for all i ≥ 0. In fact, a run r of an
alternating B¨uchi automaton is a Q-labeled tree, in which nodes are labeled
by states. r(x) = q means that the node x of r labeled by q (x is a symbol
and q is a speciﬁc state).
Deﬁnition 2.2. A run of A on an inﬁnite word w = a0a1 ··· is a (possibly
inﬁnite) tree r such that r(ε) = q0 and the following holds:
If |x| = i, r(x) = q, and δ(q, ai) = θ, then x has k children x1,··· , xk,
for some k ≤ |Q|, and {r(x1),··· , r(xk)} satisﬁes θ in a minimal manner.
For example, if δ(q, ai) = (q1 ∨ q2) ∧ q3, then the labels of q’s children
include one element of {q1, q2} and also include state q3 after putting ai.
Notice that if δ(r(x), ai) = true, then x does not have any children, i.e., x is
a leaf node. In addition, there is no run taking a transition with θ = false.
The run tree r is accepting if every inﬁnite branch in r inﬁnitely passes F .

The relationships between alternating B¨uchi automata and nondetermin-
istic B¨uchi automata have been studied ([22]): they have the same expressive
power, furthermore, the former ones are more succinct than latters, and the
blow-ups of states during the transforms from alternating to nondeterministic
ones are unavoidable ([22]).

One advantage of alternating B¨uchi automata is that they are easy to
be complemented. For equivalent alternating and nondeterministic B¨uchi
automata, it is more easy to complement the former ones, cf.[3]:
just in-
terchanging the conjunctions and disjunctions in every transition, as well as
ﬁnal and non-ﬁnial states.

3. L-fuzzy alternating B¨uchi automata and their equivalent coun-

terparts

If not illustrate especially, the lattice L we used below is distributive. In
addition, we require that L have the largest element 1 and the least element
0. In the following, we ﬁrstly introduce some preparation works. Our version
of L-fuzzy alternating B¨uchi automata is distinct from [1, 4]: weights belong
to L rather than the real set, and in ours, weights labels every leaf node of
run tree instead of along with every edge from each node to its child.
In
order to overcome shortcomings of [1, 4], i.e., Boolean case cannot be seen
as its special case, we put factor about ﬁnal states in consideration.

5

Deﬁnition 3.1. An L-fuzzy positive Boolean formula over X is a positive
Boolean formula over L ∪ X. The set of L-fuzzy positive Boolean formulas
over X is denoted by FLB+(X), and moreover, we put the formulas true
and false in it.

For any Y ⊆ X and a formula θ ∈ FLB+(X), we deﬁne a value v(θ, Y )
in L, which is obtained by substituting any element of Y occurring in θ by
1, and that of X − Y by 0. Let θ1, θ2 ∈ FLB+(X), if for any Y ⊆ X,
v(θ1, Y ) = v(θ2, Y ) holds, then we call them equivalent, denoted by θ1 ≡ θ2.
For example, for θ1 = 0.5∨ (x2 ∧ 0.2∧ x3)∨ (0.8∧ x2) and θ2 = 0.5∨ (((0.3∧
x3) ∨ 0.8)) ∧ x2), we can verify that θ1 ≡ θ2.
For any θ ∈ FLB+(X), it is easy to ﬁnd its equivalent formula θ(cid:48), called
in it each term between every two “∨” is in the form: l ∧
standard form:
i∈I xi for some index set I (if l = 1, we always omit it and just write
i∈I xi), l is a element in L − {0}, and we call it “coeﬃcient” of such term.
In fact, the factor impacting on the equivalence relation between formulas
are their simplest ﬁnal expansions: for above θ1 and θ2, they are equivalent
because they have the identical simplest ﬁnal expansions 0.5∨ (0.8∧ x2). To
be speciﬁc, we divide the procedures of obtaining the simplest ﬁnal expansion
for a given formula into the following steps:

(cid:86)
(cid:86)

Step 3: If there exist two term l1 ∧(cid:86)

Step 1: Expand the formula;
Step 2: Write above expansion in the standard form. In particular, there
maybe exists a term l (l ∈ L), called constant term, where its index set I = ∅;
j∈J xj such that
l1 ≤ l2 and J ⊆ I, then remove the former one (indeed the former one is
absorbed in the latters in the calculations of runs’ weights).

i∈I xi and l2 ∧(cid:86)

For θ, we deﬁne its satisfaction sets: if there exists a term l ∧(cid:86)

Further on, we let v(true, Y ) = 1 for any set Y (include empty set)
and correspondingly, we let no set satisfy formula false (these settings are
compatible with classic logic). Obviously, true ≡ 1.
i∈I xi in
the standard form of θ, we call {xi|i ∈ I} satisﬁes θ with weight l. Moreover,
if it is also in the simplest ﬁnal expansion of θ, we say {xi|i ∈ I} satisﬁes θ
in a minimal manner with weight l. In particular, for the constant term l(cid:48) in
the simplest ﬁnal expansion, we call ∅ satisﬁes θ in a minimal manner with
weight l(cid:48). Also for formulas θ1 and θ2 mentioned above, we know {x2, x3}
satisﬁes θ1 and θ2 with weights 0.2 and 0.3 respectively; ∅ and x2 satisﬁes θ1
and θ2 in a minimal manner with weights 0.5 and 0.8 respectively.

6

+ l2
q2

+ l3
q3

Considering an L-fuzzy nondeterministic B¨uchi automaton A = (Q, Σ, δ,
I, F ), its transition function δ maps each state q ∈ Q to an L-fuzzy set by
inputting a symbol of Σ. We can represent δ by some formulas of FLB+(Q):
for example, δ(q, a) = l1
(sometimes, we also use δ(q, a)(qi) = li or
q1
δ(q, a, qi) = li (i = 1, 2, 3) to characterize such transition) can be described
as δ(q, a) = (l1 ∧ q1) ∨ (l2 ∧ q2) ∨ (l3 ∧ q3) of FLB+(Q). Generally, in an
L-fuzzy alternating B¨uchi automaton, the transitions can be any formula of
FLB+(Q).
Deﬁnition 3.2. An L-fuzzy alternating B¨uchi automaton is a tuple A =
(Q, Σ, δ, I, F ), where Q is a ﬁnite nonempty set of states, Σ is a ﬁnite
nonempty alphabet, I and F denote the L-valued fuzzy sets of initial and
ﬁnal states respectively, and δ : Q × Σ → FLB+(Q) is an L-valued fuzzy
transition function.
Deﬁnition 3.3. A run of A on an inﬁnite word w = a0a1 ··· is a (possibly
inﬁnite) (L ∪ Q)-labeled tree r such that I(r(ε)) (cid:54)= 0 and the following holds:
If |x| = i, r(x) = q and δ(q, ai) = θ, then x has k children x1,··· , xk for
some k ≤ |Q| + 1 and {r(x1),··· , r(xk)}∩ Q satisﬁes θ in a minimal manner
with weight l ∈ {r(x1),··· , r(xk)}∩L (notice that the set {r(x1),··· , r(xk)}∩
L has at most one element, and if it is empty, this weight is 1);

If |x| = i, r(x) = q and δ(q, ai) = true, then x has one child 1;
If |x| = i, r(x) = l (l ∈ L), then the node x has no children, i.e., it is a

leaf (only nodes labeled by elements from L can be leaves).

For example, if δ(q, a) = (l1 ∨ q2) ∧ q1, then q’s children are l1 and q1 or
q2 and q1 after inputting a.
If the total weight of r is not 0, i.e., weight(r) = I(r(ε)) ∧ wt(r) (cid:54)= 0,
then we call r an accepting run of A, where wt(r) is equal to the conjunction
of all branches’ weights in r. The weight of a branch β is deﬁned by:

If it is ﬁnite, its weight equals to l (∈ L), the label of the leaf node;
If it is inﬁnite, β = x0, x1,··· , and r(xi) = qi, then wt(β) equals to
j≥i

(cid:87)
Then for any w ∈ Σω, Lω(A)(w) = (cid:87)

I(r(ε)) ∧ wt(r), where RA(w)

F (qj).

(cid:86)

i≥0

denotes the set of all runs on w of A.

r∈RA(w)

Remark 3.4. In L-fuzzy cases, we needn’t require an alternating B¨uchi au-
tomaton to have a unique initial state, even though from the construction

7

below, we know that every L-fuzzy alternating B ¨uchi automaton can be trans-
formed to another equivalent one with a crisp initial state (which is suﬃcient
for closure property in Section 4). In order to simulate L-fuzzy nondeter-
ministic B ¨uchi automata, using Deﬁnition 3.2 is more accurately.

Here we give the corresponding construction (similar to [18, 19]):

let
A = (Q, Σ, δ, I, F ) be an L-fuzzy alternating B¨uchi automaton, deﬁne an
automaton with a crisp initial state A(cid:48) as (Q∪{q0}, Σ, δ(cid:48), q0, F ), where q0 /∈ Q,

I(q) ∧ δ(q, a) and otherwise, δ(cid:48)(q, a) = δ(q, a).

δ(cid:48)(q0, a) = (cid:87)

I(q)(cid:54)=0

Example 3.5. Let A = (Q, Σ, δ, I, F ) be an L-fuzzy alternating B¨uchi au-
tomaton, where L = ([0, 1],∨,∧, 0, 1); Q = {q0, q1, q2, q3}; Σ = {a, b};

I(q0) = 0.5, I(q1) = I(q2) = I(q3) = 0;
F (q0) = 0, F (q1) = 0.4, F (q2) = 0.3, F (q3) = 0.1;
δ(q0, a) = 0.4 ∧ q1, δ(q0, b) = (0.5 ∧ q2) ∨ 0.3, δ(q1, a) = (0.2 ∧ q1 ∧ q2) ∨
(0.5 ∧ q3); δ(q1, b) = q2; δ(q2, a) = 0.2 ∧ q1 ∧ q2, δ(q2, b) = q3; δ(q3, a) = q2,
δ(q3, b) = q3.
them by r, r(cid:48), then wt(r) and wt(r(cid:48)) are:

Set w = a(ab)ω. There are two successful run trees on w and we denote

wt(β) = 0.2 ∧ 0.3 = 0.2;

β is f inite in r

β is inf inite in r

wt(β) = 0.3.

β is inf inite in r

I(r(ε)) ∧ wt(r) = wt(r) ∨ wt(r(cid:48)) = 0.3.

(cid:86)
(cid:86)

wt(β) ∧
wt(β) ∧

wt(r) =
wt(r(cid:48)) =

Hence, Lω(A)(w) = (cid:87)

β is f inite in r

r∈RA(w)

(cid:86)
(cid:86)

Figure 1: All successful runs of A on a(ab)ω

8

   a(cid:35)3q1q0q3q2q0.20.4abbr2q1q2qa0.22q1q2q3q(cid:35)(cid:35)                     a(cid:35)3q3q1q0q3q2q0.50.4abbar′         After introducing the basic deﬁnitions, we are ready to study the equiv-
alence relation between fuzzy nondeterministic B¨uchi automata and fuzzy
alternating B¨uchi automata over distributive lattices. Firstly, we show that
L-fuzzy alternating B¨uchi automata are at least as expressive and as succinct
as L-fuzzy nondeterministic B¨uchi automata.
Proposition 3.6. Assume that A is an L-fuzzy nondeterministic B ¨uchi au-
tomaton with n states, then there is an L-fuzzy alternating B ¨uchi automaton
Aa with n states such that Lω(Aa) = Lω(A).

(cid:87)

Proof. Let A = (Q, Σ, δ, I, F ) be the given L-fuzzy nondeterministic
B¨uchi automaton. Deﬁne an L-fuzzy alternating B¨uchi automaton Aa =
lq(cid:48) ∧ q(cid:48), b ∈ Σ, and otherwise, if
(Q, Σ, δa, I, F ): where δa(q, b) =
δ(q, b)(q(cid:48)) = 0 for any q(cid:48) ∈ Q, we set δa(q, b) = false.
Let w be an arbitrary word of Σω (denoted by w = a1a2 ··· ) such that
L(A)(w) (cid:54)= 0. Assume that P is a run on w of A such that weight(P ) (cid:54)= 0,
i.e., there a sequence of states q, q1, q2,··· such that I(q) (cid:54)= 0, δ(q, a1, q1) (cid:54)=
F (qj) (cid:54)= 0, then there exists a

0 and δ(qi, ai+1, qi+1) (cid:54)= 0 (i ≥ 1), (cid:86)

δ(q,b)(q(cid:48))=lq(cid:48)(cid:54)=0

(cid:87)

corresponding successful run tree r on w of Aa satisfying:

and a non-leaf node labeled by q1;

At 0-th level of r, there is only one element q, and I(r(ε)) = I(q) (cid:54)= 0;
At 1-th level of r, there are two elements: a leaf node labeled by δ(q, a1, q1)
···
At i-th level of r, there are two elements: a leaf node labeled by δ(qi−1, ai, qi)
··· .
Then we have,

and a non-leaf node labeled by qi;

i≥0

j≥i

I(r(ε)) ∧ wt(r)

= I(r(ε)) ∧ δ(r(ε), a1, q1) ∧(cid:94)
= I(q) ∧ δ(q, a1, q1) ∧(cid:94)

δ(qi, ai, qi+1) ∧(cid:94)
(cid:95)

δ(qi, ai, qi+1) ∧(cid:94)

i≥1

i≥0

(cid:95)

j≥i

F (qj)

F (qj),

i≥0

j≥i

i≥1

and thus L(A)(w) = L(Aa)(w).

9

Conversely, we can also show that L(A)(w) = L(Aa)(w), for any w ∈ Σω

such that L(Aa)(w) (cid:54)= 0. (cid:3)

This part is easy to be obtained, and afterwards, we will turn to the other
one. We divides it into two steps: ﬁrstly, we shall prove that any L-fuzzy
alternating B¨uchi automaton with crisp ﬁnal states can be transformed to
an equivalent L-fuzzy nondeterministic B¨uchi automaton; Secondly, we will
show that every L-fuzzy alternating B¨uchi automaton can be converted to
another one with crisp ﬁnal states. The next proposition shows the ﬁrst step:
Proposition 3.7. For any L-fuzzy alternating B ¨uchi automaton A with n
states, if it has crisp ﬁnal states, then there is an L-fuzzy nondeterministic
B ¨uchi automaton An with at most 3n states satisfying Lω(An) = Lω(A).

Proof. Let A = (Q, Σ, δ, I, F ) be an L-fuzzy alternating B¨uchi automa-
ton, where F is a crisp set of ﬁnal states. Deﬁne An = (Qn, Σ, δn, In, Fn)
as follows: Qn = 2Q × 2Q; for any q ∈ Q, we let In(({q},∅)) = I(q), and
otherwise, In((A, B)) = 0, where A, B ∈ 2Q; Fn = 2Q × {∅};
m}(⊆

For any (U, V ) ∈ Qn, V (cid:54)= ∅, and if U = {q1,··· , qs}, V = {q(cid:48)

1,··· , q(cid:48)

U ), we deﬁne δn by:

δn((U, V ), a, (U(cid:48), V (cid:48)))

(cid:95)

= (

µli(a)q(cid:48)
i1

···q(cid:48)
ili

,q(cid:48)

i

m(cid:94)

i=1

{q(cid:48)
i1

m(cid:83)

}⊆U(cid:48);

,··· ,q(cid:48)
ili
i=1,··· ,m
i1,··· , q(cid:48)
{q(cid:48)

(cid:94)

qj∈U−V

µlj (a)qj1···qjlj

,qj ),

}⊆U(cid:48);

(cid:95)

)) ∧ (

s(cid:83)

{qj1 ,··· ,qjlj
qj∈U−V
{qj1,··· , qjlj

ili

i=1

} − F = V (cid:48),

} = U(cid:48), and U(cid:48) is a set
where
satisfying the conjunction of all simplest ﬁnal expansions of all δ(t, a)(t ∈ U ),
X is a set satisfying the conjunction of all simplest ﬁnal expansions of all
δ(t, a)(t ∈ V ), V (cid:48) = X − F .

For any (U,∅) ∈ Qn × Qn, if U = {p1,··· , pk}, then δn is deﬁned as:

j=1

δn((U,∅), a, (U(cid:48), V (cid:48))) =

µli(a)pi1 ,··· ,pili

,pi,

s(cid:83)

{pi1,··· , pili

where
junction of all simplest ﬁnal expansions of all δ(t, a)(t ∈ U ).

i=1

} = U(cid:48), U(cid:48) − F = V (cid:48), and U(cid:48) is a set satisfying con-

(cid:95)

k(cid:94)

{pi1 ,··· ,pili
i=1,··· ,k

}⊆U(cid:48);

i=1

10

We take an empty conjunction in the deﬁnition of δn to be 1, i.e., δn((∅,∅), a,
On one hand, we need to prove that for any w ∈ Σω,
if it satisﬁes
In fact, for any successful run P : ({q},∅) a1→ (A1, B1) a2→ (A2, B2) → ··· ,

(∅,∅)) = 1. In addition, the others not mentioned are deﬁned to 0.
Lω(An)(w) (cid:54)= 0, then Lω(An)(w) = Lω(A)(w).
we can construct a run r of A:

jlj

at 1-th level of r;

j1,··· ,(cid:98)q(cid:48)

Put r(ε) = q ﬁrstly;
Let all states of A1 (A1 (cid:44) {q11,··· , q1s}) be the children of q occurring

If B1 (cid:44) {(cid:98)q11,··· ,(cid:98)q1m} (cid:54)= ∅, we follow the steps below:
Let δ(q1i, a2) = θ1i, δ((cid:98)q1j, a2) =(cid:98)θ1j, i = 1,··· , s, j = 1,··· , m, we choose
} ⊆ A2 such that B2j satisﬁes (cid:98)θ1j in a minimal
sets B2j = {(cid:98)q(cid:48)
manner with weight µlj (a2)(cid:98)q(cid:48)
,(cid:98)q1j , j = 1,··· , m, and
j1···(cid:98)q(cid:48)
B2j − F = B2.
} ⊆ A2 such that A2i satisﬁes
i1,··· , q(cid:48)
Meanwhile, we choose sets A2i = {q(cid:48)
ili
A2 and if there are t1, t2 such that q1t1 =(cid:98)q1t2, then A2t1 = B2t2. Then we let
i1···q(cid:48)
θ1i in a minimal manner with weight µli(a2)q(cid:48)
A2i =
be the children of q1i occurring at 2-th level of r.
} ⊆ A2 such that A2i
i1,··· , q(cid:48)
,q1i, i = 1,··· , s,
ili
i1···q(cid:48)
satisﬁes θ1i in a minimal manner with weight µli(a2)q(cid:48)
i1,··· , q(cid:48)
A2i − F = B2. Then we let µli(a2)q(cid:48)

If B1 = ∅, we just choosing sets A2i = {q(cid:48)

i1,··· , q(cid:48)
s(cid:83)

,q1i, i = 1,··· , s,

µli(a2)q(cid:48)

i1···q(cid:48)

ili

and

A2i = A2,

s(cid:83)

i=1

m(cid:83)

j=1

,q1i, q(cid:48)

ili

,q1i, q(cid:48)

i1···q(cid:48)

ili

ili

ili

jlj

ili

s(cid:83)

i=1

be the children of q1i occurring at 2-th level of r.

i=1

Similarly, the choices of other levels are considered.
We observe that even though the run tree constructed is not unique (under
isomorphism), the disjunction of all these probabilities’ total weights is equal
δ((Ai, Bi), ai+1,

to weight(P ) = In(({q},∅))∧δ(({q},∅), a1, (A1,··· , B1))∧(cid:86)

i≥1

(Ai+1, Bi+1)) (because L is distributive). Then we have:

(cid:95)
(cid:95)

(cid:94)
(cid:95)

r∈RA(w)

β is a branch of r

wt(β)

(cid:94)

(
r∈R(P )
P∈RAn (w)

β is a branch of r

wt(β))

Lω(A)(w) =

=

11

(cid:95)

(cid:95)
(cid:95)

=

(
P∈RAn (w)
r∈R(P )

wt(r))

weight(P )

=
= Lω(An)(w),

P∈RAn (w)

where RA(w) and RAn(w) denote the set of all runs on w of A and An
respectively, and R(P ) denotes the set of all runs of A constructed by P .
On the other hand, for any successful run r of A on a inﬁnite word
(cid:99)A0 = (r(ε),∅);
w = a1a2 ··· , we can construct a run P (cid:48) of An:
(cid:99)A1 = (A1, B1) (where A1 = {q|q is the child of r(ε)}, B1 = {q|q is the
If B1 (cid:54)= ∅, we let(cid:99)A2 = (A2, B2) (where A2 = {q|q is the child of some state
we set (cid:99)A2 = (A2, A2 − F );

child of r(ε)} − F );
of A1}, B2 = {q|q is the child of some state of B1} − F ), and otherwise,

···
Similarly, there may be several run trees corresponding to such P (cid:48) of An,
but the disjunction of their total weights is equal to weight(P (cid:48)), then we
have Lω(An)(w) = Lω(A)(w) likewise.
Obviously, we can ﬁnd that for each reachable state (U, V ) of An, then
V ⊆ U , and thus the number of states in An is at most 3n. (cid:3)
Notice that in above proof, in “U(cid:48) is a set satisfying the conjunction
of all simplest ﬁnal expansions of all δ(t, a)(t ∈ U ), X is a set satisfying
the conjunction of all simplest ﬁnal expansions of all δ(t, a)(t ∈ V )”, such
“satisfying” needn’t be required “in a minimal manner”, in fact, if we add
such requirement, it may loss some non-zero possibilities of transitions. For
example, suppose that U = {q1, q2}, V = ∅, and q1, q2, q3 are ﬁnal states, if
the simplest ﬁnal expansion of δ(q1, a) is (q1 ∧ q3)∨ (0.3∧ q2 ∧ q3), and that of
δ(q2, a) is (0.1 ∧ q1) ∨ (0.2 ∧ q2), then δn(({q1, q2},∅), a, ({q1, q2, q3},∅)) = 0.2
according to Proposition 3.7. If we add requirement “in a minimal manner”,
we will obtain that δ(({q1, q2},∅), a, ({q1, q2, q3},∅)) = 0, which destroys the
equivalence relation that we want to obtain.

The ﬁrst goal has been reached, then the last question need to be resolved
is that: how to transform an ordinary L-fuzzy alternating B¨uchi automaton
to another one with crisp ﬁnal states.

12

Lemma 3.8. Let A1 and A2 be L-fuzzy alternating B ¨uchi automata with
crisp ﬁnal states over Σ and they have n1 and n2 states respectively, then
there is another L-fuzzy alternating B ¨uchi automaton over Σ with n1 + n2
states, A∨, such that it also has crisp ﬁnal states and satisﬁes Lω(A∨) =
Lω(A1) ∨ Lω(A2).

Proof. Let A1 = (Q1, Σ, δ1, I1, F1) and A2 = (Q2, Σ, δ2, I2, F2), where
F1 and F2 are crisp ﬁnal sets. Without loss of generality, we assume that
Q1∩ Q2 = ∅. Then A∨ is deﬁned as (Q1∪ Q2, Σ, δ, I, F1∪ F2), where δ(q, a) =
δi(q, a), if q ∈ Qi for some i; I(q) = Ii(q), if q ∈ Qi for some i.
For any w ∈ Σω, we can prove that Lω(A∨)(w) = Lω(A1)(w)∨Lω(A2)(w).
In fact, for any successful run of A∨, then it is also a successful one of Ai for
some i, and conversely, all successful runs of A1 and A2 are also successful
in A∨. (cid:3)
Proposition 3.9. Suppose that A is an L-fuzzy alternating B ¨uchi automa-
ton with n states, then there is an equivalent L-fuzzy alternating B ¨uchi au-
n states such that A(cid:48) has crisp ﬁnal states, where
C i
k = |supp(F ) − ker(F )|, F is the fuzzy ﬁnal states set of A, and ker(F ) =
{q|F (q) = 1}.

tomaton A(cid:48) with n · k(cid:80)

i=0

Proof. According to Remark 3.4, we only need to focus our attention on
any fuzzy alternating B¨uchi automaton with a crisp initial state.
Assume that A = (Q, Σ, δ, q0, F ), where |supp(F ) − ker(F )| = k. For
any s ≤ k, we deﬁne a set s(Q), which contains all choices of diﬀerent
s states from supp(F ) − ker(F ) and all members of ker(F ), i.e., s(Q) =
{{qi1,··· , qis} ∪ ker(F )|qi1,··· , qis ∈ supp(F ) − ker(F ), and qt (cid:54)= qt(cid:48) if t (cid:54)=
t(cid:48)}.
For any s ≤ k, any element P ∈ s(Q) (denoted by {qj1,··· , qjs}∪ker(F )),
we deﬁne an L-fuzzy alternating B¨uchi automaton with crisp ﬁnal states
AP = (Q, Σ, δ, IP , FP ):

IP (q0) =

F (qji) and otherwise, IP (q) = 0; FP = P = {qj1,··· , qjs} ∪

s(cid:86)

i=1

ker(F ).

In the following, we point out Lω(A) =

r be an inﬁnite run tree of A, we know r is also a run tree of each AP .

P∈ker(F )∪1(Q)∪···∪k(Q)

(cid:87)

Lω(Ap). Let

If

13

(cid:94)

(cid:94)

weight(r) =

=

wt(β)

β is a branch of r

wt(β)

β is a branch of r,

and β f initely passes ker(F )

= l1 ∧ ··· ∧ lt ∧ (

(cid:95)

(cid:95)

F (qi1)) ∧ ··· ∧ (

i1∈I1

F (qil))
l1 ∧ ··· ∧ lt ∧ F (qi1) ∧ ··· ∧ F (qil),

il∈Il

(cid:95)

=

i1∈I1,··· ,il∈Il

then there exist l branches of r, β1,··· , βl, such that β1 inﬁnitely passes qi1
(for any i1 ∈ I1), ··· , βl inﬁnitely passes qil (for any il ∈ Il). Therefore,

(cid:95)

P∈Pl

weightAP (r) = weight(r),

And for any P of ker(F ) ∪ 1(Q) ∪ ··· ∪ k(Q) − Pl, we have:

weightAP (r) ≤ weight(r),

where Pl = {{qi(cid:48)
t1 (cid:54)= t2 such that qi(cid:48)
we obtain

,··· , qi(cid:48)
= qi(cid:48)
t2

t1

1

} ∪ ker(F )|i(cid:48)
, if so, |{qi(cid:48)

1 ∈ I1,··· , i(cid:48)
,··· , qi(cid:48)

l ∈ Il} (there may exist
}| < min{l, k}). Above all,

l

1

l

(cid:95)

weight(r) =

weightAP (r).

P∈ker(F )∪1(Q)∪···∪k(Q)

(cid:87)

Even though for any r, there is a Pl corresponding to it, on the whole, the

parameter Pl has no eﬀect on value weight(r) =

P∈ker(F )∪1(Q)∪···∪k(Q)

weightAP (r).

The above s may be 0, if so, Iker(F )(q0) = 1 and Fker(F ) = ker(F ), then
only runs whose all branches inﬁnitely pass ker(F ) are successful inﬁnite
runs of Aker(F ).
If weight(r) = 1, i.e., all branches inﬁnitely pass ker(F ), and at this time,
we have weightAP (r) = weight(r) = 1 for any P ∈ ker(F )∪1(Q)∪···∪k(Q),
therefore, the following equation also holds:

14

(cid:95)

P∈ker(F )∪1(Q)∪···∪k(Q)

weightAP (r).

weight(r) =

According to the deﬁnition of run, we know that there may be ﬁnite-depth
runs on some w ∈ Σω. And in this case, every ﬁnite-depth run r of A is also
a successful run tree of each AP (including Aker(F )), and weightAker(F )(r) =
weight(r) holds; for any P (cid:54)= ker(F ), weightAP (r) ≤ weight(r). Then we
weightAP (r) for the ﬁnite-depth
also have weight(r) =

(cid:87)

P∈ker(F )∪1(Q)∪···∪k(Q)

case.

Hence for any w ∈ Σω, we obtain:

Lω(A)(w) =

(cid:95)
(cid:95)

weight(r)

r∈RA(w)

(cid:95)

(cid:95)
(cid:95)

(cid:95)
(cid:95)
(cid:95)

(
P∈ker(F )∪1(Q)∪···∪k(Q)

r∈RA(w)

(
r∈RA(w)
P∈ker(F )∪1(Q)∪···∪k(Q)

weightAP (r))

weightAP (r))

weightAP (r))

(
r∈RAP (w)
P∈ker(F )∪1(Q)∪···∪k(Q)
Lω(AP )(w).

P∈ker(F )∪1(Q)∪···∪k(Q)

=

=

=

=

(cid:87)

Set A(cid:48) =

AP , then we know that such A(cid:48) is our desired

fuzzy alternating B¨uchi automaton according to Lemma 3.8. (cid:3)

P∈ker(F )∪1(Q)∪···∪k(Q)

Putting Proposition 3.7 and 3.9 together, we have:

Theorem 3.10. Assume that A is an L-fuzzy alternating B ¨uchi automaton
with n states, then there is an equivalent L-fuzzy nondeterministic B¨uchi
automaton A(cid:48) with at most 3
n states, where k = |supp(F )− ker(F )|, F
is the fuzzy ﬁnal states set of A and ker(F ) = {q|F (q) = 1}.

n· k(cid:80)

Ci

i=0

15

4. Closure properties of L-fuzzy alternating B¨uchi automata

In this section, we study closure properties of L-fuzzy alternating B¨uchi
automata. We show that L-fuzzy alternating B¨uchi automata are closed
under join, meet and complementation. Firstly, we discuss the ﬁrst two
operations.
Theorem 4.1. Let A1 and A2 be L-fuzzy alternating B ¨uchi automata over
Σ, with n1 and n2 states, respectively. There are two L-fuzzy alternating
B¨uchi automata A∨ and A∧ over Σ, with n1 + n2 and n1 + n2 + 1 states
respectively, such that Lω(A∨) = Lω(A1) ∨ Lω(A2) and Lω(A∧) = Lω(A1) ∧
Lω(A2).

Proof. According to Remark 3.4 and Proposition 3.9, it’s enough to
discuss the ones with one crisp initial state and crisp ﬁnal states. Let Ai =
(Qi, Σ, δi, (q0)(i), Fi). Without loss of generality, we assume that these two
Qi are disjointed. Deﬁne A∨ = (Q1 ∪ Q2, Σ, δ,{(q0)(1), (q0)(2)}, F1 ∪ F2):
δ(q, a) = δi(q, a), for any q ∈ Qi and a ∈ Σ. Obviously, the following proof
is analogous to that in Lemma 3.8, and we omit it here.
Let A∧ = (Q1 ∪ Q2 ∪{q0}, Σ, δ(cid:48), q0, F1 ∪ F2) , of which q0 /∈ Q1 ∪ Q2 and δ
is deﬁned as: δ(q0, a) = δ1((q0)(1), a) ∧ δ2((q0)(2), a) and δ(q, a) = δi(q, a), for
any q ∈ Qi and a ∈ Σ.
Then Lω(A∧)(w) = Lω(A1)(w) ∧ Lω(A2)(w) can be got easily for any
w ∈ Σω. (cid:3)

As we all know, one advantage of alternating (B¨uchi) automata is that
it is easy to complement them. Is this advantage also suitable for L-fuzzy
case? Indeed, we can demonstrate the dual of an L-fuzzy alternating B¨uchi
automaton, an L-fuzzy alternating co-B¨uchi automaton, recognizes the com-
plement of the language of the original automaton by game-theory. Notice
that the following lattice has a negation c, which is a mapping from L to
L, satisfying l1 ≤ l2 ⇒ c(l2) ≤ c(l1) and c(c(l)) = l, for any l, l1, l2 ∈ L.
The complement of fuzzy language L(A), denoted by L(A)c, is deﬁned as
L(A)c(w) = c(L(A)(w)), for any w ∈ Σω.

Also because of Remark 3.4, we only need to focus on any L-fuzzy alter-
nating B¨uchi automaton with a crisp initial state in following.
Let A = (Q, Σ, δ, q0, F ) be a such one, we deﬁne its dual, an L-fuzzy
alternating co-B¨uchi automaton, denoted by A, where A = (Q, Σ, δ, q0, F c),
and δ(q, a) = δ(q, a) for all q ∈ Q, a ∈ Σ. Moreover, F c(q) = c(F (q)), for
any q ∈ Q, where c is the negation of L. The dual operation δ is deﬁned as:

16

−q = q, for q ∈ Q;
−l = c(l), for any l ∈ L (in particular, 1 = 0 and 0 = 1);
−(α ∧ β) = (α ∨ β) and
−(α ∨ β) = (α ∧ β);
−true = false;
−false = true.
Let B be an L-fuzzy alternating co-B¨uchi automaton (Q, Σ, δ, q0, F ), the
deﬁnition of runs is identical to that of B¨uchi one, but the successful runs
and the calculation of their weights are diﬀerent:
If the total weight of r is not 0, i.e., weight(r) = I(r(ε)) ∧ wt(r) (cid:54)= 0,
then we call r an accepting run of B, where wt(r) equals to the conjunction
of all branches’ weights. The weight of a branch β is deﬁned by:

If it is ﬁnite, wt(β) equals to l (∈ L), the label of the leaf node;
If it is inﬁnite, β = x0, x1,··· , and r(xi) = qi, then its weight equals to
j≥i

(cid:86)
Then for any w ∈ Σω, Lω(B)(w) = (cid:87)

I(r(ε)) ∧ wt(r), where RB(w)

(cid:87)

F (qj).

i≥0

denotes the set of all runs on w of B.
Notice that the acceptance condition of A is a fuzzy co-B¨uchi acceptance
condition rather than fuzzy B¨uchi acceptance condition of A, then for an
inﬁnite branch β = x0, x1,··· , and r(xi) = qi, its weight is (we use subscripts
to distinguish the weights of A and A):

r∈RB(w)

(cid:95)

(cid:94)

i≥0

j≥i

(cid:94)

(cid:95)

i≥0

j≥i

wtA(β) =

F c(qj) = c(

F (qj)) = c(wtA(β)).

Indeed, the language recognized by such L-fuzzy alternating co-B¨uchi
automaton is also L-fuzzy ω-regular, i.e., it can also be recognized by an
L-fuzzy alternating B¨uchi automaton. We will show it after Theorem 4.2.
Theorem 4.2. Let A be an L-fuzzy alternating B ¨uchi automaton, then
Lω(A)(w) = c(Lω(A)(w)) for any w ∈ Σω.

Proof. Similarly, we only consider the one with a crisp initial state.
Let A = (Q, Σ, δ, q0, F ) be such an automaton. The value of a word w
(w = a1a2 ··· ) in A can be thought as the outcome of following two-players
(Player OR and Player AND) game. The game starts from initial state q0 of
A. In every round, Player OR chooses a set E ⊆ Q satisfying δ(qi, ai) in a

17

minimal manner with weight l. Player AND chooses a state qi+1 ∈ E, and the
game goes on from qi+1 likewise. The goal of Player OR is to “maximize” the
value (corresponds to the supremum in diﬀerent runs), and the goal of Player
AND is to “minimize” it (corresponds to the inﬁmum in diﬀerent branch of a
run). The branch induced by this game corresponds to a “minimal” branch
(inﬁmum) in a supreme run of A.
When the same game is played on A, these two players interchange their
actions’ orders. The branch induced by this game corresponds to a “maxi-
mal” branch in a “minimal” run trees of A on w. Indeed, the Player AND
determines which branch is taken in every run tree of A ﬁrstly, and Player
OR determines which run is taken afterwards. Because of the fact that
F (qj)) = c(wtA(β))” mentioned before,
we know that the weight of every branch c(l) in A corresponds to the one, l,
in A. Then, for every word w ∈ Σω, we have:

“wtA(β) = (cid:87)

(cid:86)

i≥0

i≥0

j≥i

j≥i

(cid:87)

F c(qj) = c((cid:86)
(cid:94)
(cid:94)
(cid:94)
(cid:95)

r∈RA(w)

r∈RA(w)

r∈RA(w)

=

=

Lω(A)(w) =

(cid:95)
(cid:95)
(cid:94)
(cid:94)

wtA(β)

c(wtA(β))

wtA(β)))

wtA(β))

β is a branch of r

β is a branch of r

(c(

β is a branch of r

= c(
= c(Lω(A)(w)).

r∈RA(w)

β is a branch of r

Note that the ﬁrst equation is obtained by above discussion rather than
the deﬁnition. It shows the relationship between the same game playing in
A and A. (cid:3)

According to the statements “all fuzzy languages recognized by L-fuzzy
nondeterministic B¨uchi automata over Σ is closed under complement” (The-
orem 12 of [11]) and “equivalence relationship between L-fuzzy alternating
B¨uchi automata and L-fuzzy nondeterministic B¨uchi ones” (c.f. Proposition
3.6 and Theorem 3.10), we obtain that the language recognized by an L-fuzzy
alternating co-B¨uchi automaton is also recognized by an L-fuzzy alternating
B¨uchi automaton, which shows the closure property about complement of
L-fuzzy alternating B¨uchi automata.

18

Go a step further, we can give the direct construction to illustrate the
L-fuzzy ω-regularity of the languages recognized by L-fuzzy alternating co-
B¨uchi automata without the knowledge about L-fuzzy nondeterministic B¨uchi
automata.

Lemma 4.3. Every L-fuzzy alternating co-B ¨uchi automaton can be con-
verted to another equivalent one with a crisp initial state.
Corollary 4.4. Let A be an L-fuzzy alternating co-B ¨uchi automaton, then
Lω(A)(w) = c(Lω(A)(w)) for any w ∈ Σω.

The proofs of Lemma 4.3 and Corollary 4.4 are similar to Remark 3.4 and

Theorem 4.2 respectively, so we omit them here.

Taking twice dual operations and taking complement on ﬁnal weights, we
can get the following proposition, which is a co-B¨uchi version of Proposition
3.9, and it is the ﬁrst step of our construction.
Proposition 4.5. Let A be an L-fuzzy alternating co-B ¨uchi automaton with
n states. Then there is an equivalent L-fuzzy alternating co-B ¨uchi automaton

A(cid:48) with 1 + n · k(cid:80)

C i

n states such that it has a crisp initial state and crisp
ﬁnal states (where k = |supp(F ) − ker(F )|, F is the fuzzy ﬁnal states set of
A, and ker(F ) = {q|F (q) = 1}.).

i=0

To be speciﬁc, the procedures to get A(cid:48) are:
Step 1: Following Corollary 4.4, we construct the dual of A, an L-fuzzy

Step 2: Following Proposition 3.9, we construct an equivalent L-fuzzy

alternating B¨uchi automaton, and it satisﬁes Lω(A) = c(Lω(A));
alternating B¨uchi automaton B with crisp ﬁnal states;
Step 3: Following Remark 3.4, we construct an L-fuzzy alternating B¨uchi
automaton B(cid:48) with a crisp initial state and crisp ﬁnal states such that
Lω(B(cid:48)) = Lω(B);
Step 4: Following Theorem 4.2, we construct the dual of B(cid:48), an L-fuzzy
alternating co-B¨uchi automaton with crisp ﬁnal states, and it satisﬁes that
Lω(B(cid:48)) = c(Lω(B(cid:48))).

Let A(cid:48) = B(cid:48), and it is our desired automaton.
Before giving Theorem 4.10, we need to introduce some notions ﬁrstly (cf.
[12]). In order to let the following content be compatible with front sections
of our paper, we set the deﬁnitions and pre-knowledge version below are a bit

19

diﬀerent from [12], mainly reﬂecting on the ﬁnal states set F . More detailed
information can be referred to [12].
Let A be an alternating co-B¨uchi automaton. For nodes x1 and x2 of
an accepting run r of A, we call that x1 and x2 are similar if and only if
|x1| = |x2| and r(x1) = r(x2). Furthermore, r is called memoryless if and
only if the subtrees rooted at nodes x1 and x2 are identical for all similar
nodes x1 and x2 of r.
Proposition 4.6. For an L-fuzzy co-B ¨uchi automaton A, if there is a suc-
cessful run r on w of it with total weight l, then there exists a memoryless
accepting one on w with total weight l(cid:48) which is larger than or equal to l.

Proposition 4.6 tells us only memoryless accepting ones have eﬀect on
value Lω(A)(w) (the others are absorbed in memoryless ones), then in the
following, we only consider the memoryless runs.
Replacing label q of node xi by (cid:104)q, i(cid:105) where i = |xi|, and merging similar
nodes into a single one, then we get an directed acyclic graph Gr with respect
to a memoryless run r. In r, if there is a states sequence q0, q1, q2, ··· (partial
labels of nodes of some branch in r) such that q = q0 and q(cid:48) = qi (i ≥ 0),
then we say that (cid:104)q(cid:48), l(cid:48)(cid:105) is reachable from (cid:104)q, l(cid:105) in Gr.
Considering a directed acyclic graph G ⊆ Gr, a vertex (cid:104)q, l(cid:105) is said to
be endangered in G if and only if ﬁnitely many vertices in G are reachable
from (cid:104)q, l(cid:105); (cid:104)q, l(cid:105) is safe in G if and only if the projections of all the vertices
that are reachable from (cid:104)q, l(cid:105) in G on Q belong to F (the ﬁnal states of
A). With these notions, we deﬁne an sequence of directed acyclic graphs
G0 ⊇ G1 ⊇ G2 ⊇ ··· inductively as follows:

−G0 = Gr;
−G2i+1 = G2i \ {(cid:104)q, l(cid:105)|(cid:104)q, l(cid:105) is endangered in G2i}
−G2i+2 = G2i+1 \ {(cid:104)q, l(cid:105)|(cid:104)q, l(cid:105) is saf e in G2i+1}.
From [12], we know that for any vertex (cid:104)q, l(cid:105) in Gr, there is a unique
index i ≥ 1 such that (cid:104)q, l(cid:105) is either endangered in G2i or safe in G2i+1. Then
for each vertex, there is a notion “rank”, which describe such i:
if (cid:104)q, l(cid:105) is endangered in G2i.
if (cid:104)q, l(cid:105) is saf e in G2i+1.

rank((cid:104)q, l(cid:105)) =
The two lemmas below show us the close connection between the ranks

(cid:26)

2i,
2i + 1,

and the reachability of vertices, and they are the key to our last theorem.
Lemma 4.7. ([12]) For every two vertices (cid:104)q, l(cid:105) and (cid:104)q(cid:48), l(cid:48)(cid:105) in Gr, if (cid:104)q(cid:48), l(cid:48)(cid:105)
is reachable from (cid:104)q, l(cid:105), then rank((cid:104)q, l(cid:105)) ≤ rank((cid:104)q(cid:48), l(cid:48)(cid:105)).

20

Lemma 4.8. ([12]) In every inﬁnite path of Gr, there exists a vertex (cid:104)q, l(cid:105)
with an odd rank such that all the vertices (cid:104)q(cid:48), l(cid:48)(cid:105) in the path that are reachable
from (cid:104)q, l(cid:105) have rank((cid:104)q(cid:48), l(cid:48)(cid:105)) = rank((cid:104)q, l(cid:105)).

At last, we will give the construction to get an equivalent L-fuzzy (weak)

alternating B¨uchi automaton from an L-fuzzy alternating co-B¨uchi one.

Deﬁnition 4.9. An L-fuzzy weak alternating B ¨uchi automaton is a ﬁve tu-
ple (Q, Σ, δ, I, F ), where the states set Q is some disjoint unions, Qi (i ∈ I),
and on these Qi there is a partial order ≤; in addition, the transition function
δ satisﬁes that: if q ∈ Qi and q(cid:48) occurs in δ(q, a), then q(cid:48) ∈ Qj and Qi ≤ Qj;
F is L-fuzzy function from Qi to L.

Note that the L-fuzzy weak alternating B¨uchi automaton is a special L-
fuzzy alternating B¨uchi automaton, and its speciﬁcity reﬂects on states space,
which is divided into several disjointed partially ordered sets. Moreover, it
requires that every q goes to the state which is in a smaller set than that q
stays in.
Theorem 4.10. Let A be an L-fuzzy alternating co-B ¨uchi automaton with
n states, then there is an L-fuzzy weak alternating B ¨uchi automaton A(cid:48) with
2n2 states such that Lω(A(cid:48)) = Lω(A).

0, F (cid:48)): Q(cid:48) = Q × [2n] ([2n] = {1,··· , 2n}), q(cid:48)

Proof. From Proposition 4.5, we just consider some one with a crisp
initial state and crisp ﬁnal states. Let A = (Q, Σ, δ, q0, F ) be a such one,
where |Q| = n. Deﬁne an L-fuzzy weak alternating B¨uchi automaton A(cid:48) =
(Q(cid:48), Σ, δ(cid:48), q(cid:48)
0 = (q0, 2n), F (cid:48) =
Q × [2n]odd ([2n]odd = {1, 3,··· , 2n − 1}).
The transition function δ(cid:48) is described by a function “release”, which is
a mapping from FLB+(Q)× [2n] to FLB+(Q(cid:48)): for any θ ∈ FLB+(Q), a rank
i ∈ [2n], the formula release(θ, i) is obtained by replacing every q in θ by

(cid:87)

i(cid:48)≤i

(q, i(cid:48)), and then δ(cid:48) is deﬁned by:

(cid:26) release(δ(q, a), i),

δ((q, i), a) =
For each rank i, we put Qi = Q × {i}. Obviously, for every state (q, i) ∈
Next, we shall prove Lω(A)(w) = Lω(A)(w) for any w ∈ Σω.

Q(cid:48), its possible children only belong to L ∪ Qi(cid:48) (i(cid:48) ≤ i).

f alse,

if q ∈ F or i is even.
if q /∈ F and i is odd.

21

Indeed, for any w = a1a2 ··· ∈ Σω such that Lω(A)(w) (cid:54)= 0, there is at
least a successful run of A, denoted by r (where r(ε) = q0). Deﬁne a run of
A(cid:48) as follows:

Let r(cid:48)(ε) = (q0, 2n);
If the children of r(ε) are µq1···qk,r(ε), q1,··· , qk, i.e., {q1,··· , qk} satis-
ﬁes δ(r(ε), a1) in a minimal manner with weight µk(a1)q1···qk,r(ε), then we let
µk(a1)q1···qk,r(ε), (q1, i1),··· , (qk, ik) be children of r(cid:48)(ε) at 1-th level of r(cid:48), and
ij be any one less than or equal to 2n, j = 1,··· , k. Similarly, the choices
of the states at other levels follow the same way. Note that the deﬁnition of
ranks ensures “r(x) /∈ F ” and “rank((cid:104)r(x),|x|(cid:105)) is odd” cannot hold simul-
taneously.

Among the runs constructed by above procedures, there is at least a suc-
cessful one (all these successful runs’ weights are equal to weight(r)). In fact,
a run r∗ is a such one, in which the label of xi is (r(xi), rank((cid:104)r(xi),|xi|(cid:105))),
i ≥ 1. Lemma 4.7 and 4.8 ensure that r∗ is successful, and thus we obtain
Lω(A)(w) = Lω(A(cid:48))(w).
Conversely, it just need to consider the projection of any successful run
r(cid:48) of A(cid:48) on Q, and Lω(A)(w) = Lω(A(cid:48))(w) holds similarly. This part is easy
to show, and we omit it. (cid:3)

5. Decision problems for L-fuzzy alternating B¨uchi automata

The aim of this section is to discuss decision problems for L-fuzzy alter-
nating B¨uchi automata over a distributive lattice with a negation c. These
discussions can be applied to the satisﬁability and model-checking problem
of fuzzy LTL [15, 16].
Considering an L-fuzzy alternating B¨uchi automaton A, the emptiness
value, universality value of it, denoted by e val(A), u val(A) respectively,
are deﬁned as:

e val(A) =(cid:87){Lω(A)(w)|w ∈ Σω},
u val(A) =(cid:86){Lω(A)(w)|w ∈ Σω}.

The emptiness-value (universality-value) problem for A is to decide whether
e val(A) ∼ l (u val(A) ∼ l), where ∼ is an order relation of {<,≤, =,≥, >}
and l is a value of L.

Theorem 5.1. The emptiness-value problem and universality-value problem
for L-fuzzy alternating B ¨uchi automata are decidable in exponential time and
are PSPACE-complete.

22

Proof. From the fact that the emptiness-value problem for L-fuzzy non-
deterministic B¨uchi automata is decidable in linear time, the languages rec-
ognized by L-fuzzy nondeterministic B¨uchi automata are NLOGSPACE, and
the unavoidable exponential blow-up of states is involved in the translation
from an L-fuzzy nondeterministic B¨uchi automaton to its equivalent L-fuzzy
alternating B¨uchi automaton, we know that the emptiness-value problem for
L-fuzzy alternating B¨uchi automata are decidable in exponential time and
the languages recognized by them are PSPACE.

All that remains to be proven is that the PSPACE-hardness of emptiness-
value problem. In fact, it is easy to be shown similarly to Proposition 21 in
[22]: we reduce the emptiness-value problem for alternating automata to one
for L-fuzzy alternating automata, and moreover, reduce the latters to another
one for L-fuzzy alternating B¨uchi automata. Since the emptiness-value prob-
lem for alternating automata is PSPACE-complete, then emptiness-value
problem for L-fuzzy alternating B¨uchi automata is also PSPACE-complete.
Afterwards, we consider the universality-value problem. Because the
universality-value problem is dual to the emptiness-value problem and the
complementation construction for L-fuzzy alternating B¨uchi automata can-
not cause the changes of the states, then we obtain the university-value prob-
lem for L-fuzzy alternating B¨uchi automata is decidable in exponential time
and having PSPACE-complexity. (cid:3)
Considering two L-fuzzy alternating B¨uchi automata A1 and A2 over an
identical lattice, the implication value of A1 with respect to A2 is deﬁned as:

imp value(A1,A2) = (cid:86)

(c(Lω(A1)(w)) ∨ Lω(A2)(w)).

w∈Σω

In addition, for any two L-fuzzy alternating B¨uchi automata A1 and
A2 and a value l ∈ L, the implication-value problem is to decide whether
imp value(A1,A2) ∼ l, where l is an order relation of {<,≤, =,≥, >}.

Theorem 5.2. The implication-value for L-fuzzy alternating B ¨uchi automata
are decidable in exponential time and are PSPACE-complete.

Note that imp value(A1,A2) ∼ l if and only if e val(A1 ∧ A2) ∼(cid:48) c(l),
where <(cid:48),≤(cid:48), =(cid:48),≥(cid:48), >(cid:48) are >,≥, =,≤, < respectively. Moreover, A1 ∧ A2 is
an L-fuzzy alternating B¨uchi automata recognizing the meet of A1 and the
complement of A2 (Theorem 4.1 and 4.2), and its size is linear in A1 and
linear in A2. So, the conclusion can be obtained.

23

6. Illustrative examples

In this section, we will give three examples to illustrate how to put our the-
ories into the speciﬁc calculations. The ﬁrst one is to construct an equivalent
L-fuzzy nondeterministic B¨uchi automaton for a given L-fuzzy alternating
B¨uchi automaton.
Example 6.1. Let A = (Q, Σ, δ, I, F ) be an L-fuzzy alternating B ¨uchi au-
tomaton, where

L = ([0, 1],∨,∧, 0, 1); Q = {q0, q1, q2}; Σ = {a, b};
I(q0) = 0.6, I(q1) = I(q2) = 0; F (q0) = 0, F (q1) = 0.4, F (q2) = 0.8;
δ(q0, a) = 0.7∧q1, δ(q0, b) = (0.5∧q2)∨0.3, δ(q1, a) = q1∧q2, δ(q1, b) = q2,
δ(q2, a) = f alse, δ(q2, b) = q2.
It’s not very hard to see that there are four successful run trees of A, and
we use ri (i = 1,··· , 4) to denote them, of which r1 and r2 are the successful
runs on w1 = aabω and w2 = abω respectively; r3 and r4 are successful
ones on w3 = bω, and simultaneously r4 is a successful one on each word
w4 ∈ bΣω − {bω} (cf. Figure 2.), then we have:

Lω(A)(w1) = I(r1(ε)) ∧ wt(r1) = 0.6 ∧ 0.7 ∧ 0.8 = 0.6;
Lω(A)(w2) = I(r2(ε)) ∧ wt(r2) = 0.6 ∧ 0.7 ∧ 0.8 = 0.6.
Lω(A)(w3) = (I(r3(ε))∧ wt(r3))∨ (I(r4(ε))∧ wt(r4)) = (0.6∧ 0.5∧ 0.8)∨
Lω(A)(w4) = I(r4(ε)) ∧ wt(r4) = 0.3.

0.3 = 0.5.

Figure 2: All successful runs of A

24

0.71ra1q0q2qab1q2q2qb2q2q(cid:35)(cid:35)2ra1q0q2qb2qb2q(cid:35)0.7b 0.53r1q2qb2qb2q(cid:35)0qbb    0q0.3b4r Figure 3: All successful runs of A(cid:48)

0} (q(cid:48)

0, F (cid:48)):

nating B ¨uchi automaton with a crisp initial state A(cid:48) = (Q(cid:48), Σ, δ(cid:48), q(cid:48)

According to Remark 3.4, we ﬁrstly construct its equivalent L-fuzzy alter-
0 /∈ Q);
Q(cid:48) = Q ∪ {q(cid:48)
F (q(cid:48)
0) = F (q0) = 0, F (q1) = 0.4, F (q2) = 0.8;
0, a) = 0.6 ∧ q1, δ(q(cid:48)
0, b) = (0.5 ∧ q2) ∨ 0.3,
δ(q(cid:48)
δ(q0, a) = 0.7 ∧ q1, δ(q0, b) = (0.5 ∧ q2) ∨ 0.3,
δ(q1, a) = q1 ∧ q2, δ(q1, b) = q2,
δ(q2, a) = f alse, δ(q2, b) = q2.
The corresponding successful runs are shown in Figure 3.
Because |supp(F (cid:48))| = 2, then we construct an equivalent L-fuzzy alternat-
ing B ¨uchi automaton with crisp ﬁnal states A(cid:48)(cid:48) secondly, which is obtained
by four L-fuzzy nondeterministic B ¨uchi automata A(cid:48)
From Proposition 3.9, we know ker(F )∪1(Q(cid:48))∪2(Q(cid:48)) = {∅,{q1},{q2},{q1,
{q1}, A(cid:48)
q2}}, then correspondingly, we construct A(cid:48)
A(cid:48)
∅ = (Q(cid:48), Σ, δ, I∅,∅), where q(cid:48)
0) = 1. Since the ﬁnal states set of A(cid:48)
I∅(q(cid:48)
(i = 1,··· , 4) aren’t successful in A(cid:48)
∅.
A(cid:48)
{q1} = (Q(cid:48), Σ, δ, I{q1},{q1}), where the unique initial state is q(cid:48)
0 and
0) = F (cid:48)(q1) = F (q1); Note that ri (i = 1,··· , 4) aren’t successful in
I∅(q(cid:48)
A(cid:48)
{q1}(ri) = 0 (i = 1,··· , 4).
{q1} similarly, and thus, weightA(cid:48)
A(cid:48)
{q2} = (Q(cid:48), Σ, δ, I{q2},{q2}), where the initial weight I∅(q(cid:48)

0 is the unique initial state with initial weight
∅ is empty, then we know every ri

i (i = 1,··· , 4):
{q2}, A(cid:48)

{q1,q2}:

initial state q(cid:48)
weightA(cid:48)(ri) for i = 1,··· , 4.

0 is F (cid:48)(q2) (= F (q2)), and therefore, we have weightA(cid:48)

0) of a unique
{q2}(ri) =

∅, A(cid:48)

25

1r′a1q2qab1q2q2qb2q2q(cid:35)(cid:35)0.60q′2r′a1q2qb2qb2q(cid:35)b0.60q′0.53r′1q2qb2qb2q(cid:35)bb0q′  0.3b4r′0q′ {q1,q2} = (Q(cid:48), Σ, δ, I{q1,q2},{q1, q2}), where the unique non-zero initial
A(cid:48)
0) = F (cid:48)(q1) ∧ F (cid:48)(q2) = F (q1) ∧ F (q2), and

{q2}(ri) is less than or equal to weightA(cid:48)(ri) (i = 1,··· , 4).

weight of initial state is I∅(q(cid:48)
weightA(cid:48)
Renaming the states set of these four such that any two states sets are dis-
jointed, we can obtain the new four automata, denoted by A(cid:48)
i (i = 1,··· , 4),
i = (Qi, Σ, δ, Ii, Fi), where Qi = {(q(cid:48)
A(cid:48)
0)(i), q(i)
Their non-zero initial weights of initial states are: I1((q(cid:48)
0)(2))
0)(4)) = F (q1) ∧ F (q2), and transition
= F (q1), I3((q(cid:48)
0)(3)) = F (q2), I4((q(cid:48)
, a) is obtained by instituting q(cid:48) by (q(cid:48))(i) in original δ(qj, a), for any
δi(q(i)
j
j ∈ Qi, a ∈ Σ, j = 1,··· , 4. Their ﬁnal states set are F1 = ∅, F2 = {q(2)
1 },
q(i)
F3 = {q(3)

0)(1)) = 1, I2((q(cid:48)

2 }, F4 = {q(4)

1 , q(4)

2 } respectively.

0 , q(i)

2 };
1 , q(i)

Figure 4: All successful runs of A(cid:48)(cid:48)

26

1r′′a1q2qab1q2q2qb2q2q(cid:35)(cid:35)0.60q′(3)(3)(3)(3)(3)(3)(3)(3)2r′′a1q2qb2qb2q(cid:35)b0.60q′(3)(3)(3)(3)(3) 0.53r′′1q2qb2qb2q(cid:35)bb0q′(3)(3)(3)(3)(3)   0.3b4r′′0q′(3) 5r′′a1q2qab1q2q2qb2q2q(cid:35)(cid:35)0.60q′(4)(4)(4)(4)(4)(4)(4)(4) 6r′′a1q2qb2qb2q(cid:35)b0.60q′(4)(4)(4)(4)(4)  0.57r′′1q2qb2qb2q(cid:35)bb0q′(4)(4)(4)(4)(4)    0.3b8r′′0q′(4) 4(cid:83)

;

i=1

i=1

4(cid:87)

Lω(A(cid:48)

In(({(q(cid:48)

2 , q(4)

1 , q(4)

0)(4)},∅)) = 0.4; Fn = {∅} × 2Q(cid:48)(cid:48)

Put A(cid:48)(cid:48) = (Q(cid:48)(cid:48), Σ, δ(cid:48)(cid:48), I(cid:48)(cid:48), F (cid:48)(cid:48)), where Q(cid:48)(cid:48) =
1 , q(3)

Qi; I(cid:48)(cid:48)(q) = Ii(q), if q ∈ Qi;
δ(cid:48)(cid:48)(q, a) = δi(q, a), if q ∈ Qi; F (cid:48)(cid:48) = {q(2)
2 }. It’s not very hard to
see that there are eight successful runs of A(cid:48)(cid:48) shown in Figure 4. For each
i ∈ {1,··· , 4}, Lω(A(cid:48)(cid:48))(wi) =
i)(wi) holds, and for other words, the
weights of them are 0.
At last, we apply Proposition 3.7 to obtain our desired equivalent L-fuzzy
nondeterministic B ¨uchi automaton An, where An = (Qn, Σ, δn, In, Fn) and
Qn = 2Q(cid:48)(cid:48) × 2Q(cid:48)(cid:48)
In(({(q(cid:48)
0)(3)},∅)) = 0.8,
δn(({(q(cid:48)
δn(({(q(cid:48)
δn(({(q(cid:48)
δn(({(q(cid:48)
δn(({q(3)
δn(({q(3)
δn(({q(4)
δn(({q(3)
δn(({q(4)
δn((∅,∅), a, (∅,∅)) = 1, δn((∅,∅), b, (∅,∅)) = 1 (the i occurring in above
transitions merely could be 3 or 4, and the weight of transitions not mentioned
are 0).

0)(1)},∅)) = 1, In(({(q(cid:48)
1 },{q(3)
0)(3)},∅), a, ({q(3)
0)(3)},∅), b, ({q(3)
1 },{q(3)
1 },∅)) = 0.6, δn(({(q(cid:48)
0)(4)},∅), a, ({q(4)
0)(i)},∅), b, (∅,∅)) = 0.3,
1 },{q(3)
1 }), a, ({q(3)
1 })) = 1,
1 , q(3)
1 },{q(3)
2 },∅)) = 1, δn(({q(4)
1 }), b, ({q(3)
1 },∅), b, ({q(4)
2 },{q(3)
1 , q(3)
2 },∅), b, ({q(4)
1 , q(4)

0)(2)},∅)) = 0.4, In(({(q(cid:48)
1 })) = 0.6,
1 })) = 0.5,

2 },∅)) = 1, δn(({q(i)
1 }), b, ({q(3)
2 },∅)) = 1,

1 , q(4)
2 },∅)) = 1,

0)(4)},∅), b, ({q(4)

1 },∅), a, ({q(4)

2 },∅), b, ({q(i)

1 },∅)) = 0.5,

2 },∅)) = 1,

2 },∅)) = 1

2 },{q(3)

;

Then the successful pathes of An are:
1 },{q(3)
1 })
P1 : ({(q(cid:48)

a/0.6−→ ({q(3)

0)(3)},∅)
2 },∅)··· ,

b/1−→ ({q(3)

a/1−→ ({q(3)

1 , q(3)

1 })
2 },{q(3)

b/1−→ ({q(3)

2 },∅)

({q(4)

0)(4)},∅)

P2 : ({(q(cid:48)
2 },∅)··· ,
P3 : ({(q(cid:48)
P4 : ({(q(cid:48)
P5 : ({(q(cid:48)
P6 : ({(q(cid:48)
Pj≥7(i = 3 or 4) : ({(q(cid:48)

0)(3)},∅)
0)(4)},∅)
0)(3)},∅)
0)(4)},∅)

a/0.6−→ ({q(4)

1 },∅)

a/1−→ ({q(4)

1 , q(4)

2 },∅)

b/1−→ ({q(4)

2 },∅)

b/1−→

b/1−→ ({q(3)

2 },∅)··· ,

2 },∅)

a/0.6−→ ({q(3)
a/0.6−→ ({q(4)
b/0.5−→ ({q(3)
b/0.5−→ ({q(4)

1 })
1 },{q(3)
1 },∅)
b/1−→ ({q(4)
1 ,{q(3)
1 )
b/1−→ ({q(4)
1 },∅)
0)(i)},∅)
b/0.3−→ (∅,∅)

b/1−→ ({q(3)
2 },∅)
2 },∅)
b/1−→ ({q(3)
2 },∅)
a,b/1−→ (∅,∅)

b/1−→ ({q(4)

b/1−→ ({q(3)

2 },∅)··· ,
2 },∅)··· ,
2 },∅)··· ,
a,b/1−→ (∅,∅)··· ,

b/1−→ ({q(4)

27

Therefore, we have Lω(An)(w1) = 0.6, Lω(An)(w2) = 0.6, Lω(An)(w3) =
0.5, Lω(An)(w4) = 0.3, and the other weights are 0, which shows that An is
an L-fuzzy nondeterministic B ¨uchi automaton equivalent to A, as required.

The next example can verify the correctness about the closure property
about complement of L-fuzzy alternating B¨uchi automata by taking dual
operation and changing the ﬁnal weights to their complements.
Example 6.2. We begin with the A(cid:48) in the previous example. It is easy to
see its dual A(cid:48) is (Q(cid:48), Σ, δ(cid:48), q(cid:48)

0, (F (cid:48))c), where

0) = 1,

0} (q(cid:48)

Q(cid:48) = Q ∪ {q(cid:48)
F c(q0) = 1, F c(q1) = 0.6, F c(q2) = 0.2;
δ(q(cid:48)

0 /∈ Q); c(a) = 1 − a;F c(q(cid:48)

0, a) = 0.4∨ q1, δ(q(cid:48)

0, b) = (0.5∨ q2)∧ 0.3, δ(q0, a) = 0.3∨ q1, δ(q0, b) =
(0.5 ∨ q2) ∧ 0.7, δ(q1, a) = q1 ∨ q2, δ(q1, b) = q2, δ(q2, a) = true, δ(q2, b) = q2.

Figure 5: All successful runs of A(cid:48)

28

0q′0.4a1r               2r1qb2qb2q(cid:35)0q′aa1q                3r1qb2qb2q(cid:35)0q′a2qa               4r1qb2qb2q(cid:35)0q′a2qb   b0q′0.55r                  6rb2qb2q(cid:35)0.70q′2qb                0.70q′2qba17r    i=1

3(cid:87)

There are seven successful runs of A(cid:48), denoted by ri(1 = 1,··· , 7) (cf.
Figure 5.), of which r1, r2, r3 are successful ones on aabω; r1 and r4 are
successful ones on abω; r5, r6 are successful on bω; Simultaneously, r5 and r7
are successful one on each word w ∈ bΣ∗ − {bω}, and therefore, we have:
Lω(A(cid:48))(aabω) =
wt(ri) = 0.4, Lω(A(cid:48))(abω) = wt(r1) ∨ wt(r5) = 0.4,
Lω(A(cid:48))(bω) = wt(r5) ∨ wt(r6) = 0.5, Lω(A(cid:48))(w) = wt(r5) ∨ wt(r7) = 0.7.
All that remains to be proven is that for any w(cid:48) ∈ aΣω − {aabω} − {abω},
Lω(A(cid:48))(w(cid:48)) = 1. In fact, there are two possibilities:
If w(cid:48) ∈ aabΣω − {aabbω}, i.e., from the third input symbol, b, there is at
least a symbol, a, appearing in w(cid:48), then there is a successful (ﬁnite) run hit
the true transition, therefore, the largest weight of successful run on w(cid:48) is 1,
and thus, Lω(A(cid:48))(w(cid:48)) = 1.
If w(cid:48) ∈ abΣω − {abω}, i.e., from the second input symbol, b, there is at
least a symbol, a, appearing in w(cid:48), then there is a successful (ﬁnite) run hit
the true transition similarly, so Lω(A(cid:48))(w(cid:48)) = 1 holds.

The last example taken by us is to present how to transform an L-fuzzy
alternating co-B¨uchi automaton to its equivalent B¨uchi one. The several
identical procedures with respect to Example 6.1 below will be omitted.
Example 6.3. Let A = (Q, Σ, δ, q0, F ) be such a co-B ¨uchi one, where

L = ([0, 1],∨,∧, 0, 1); c(a) = 1 − a; Q = {q0, q1}; Σ = {a, b};
F (q0) = 0.4, F (q1) = 0.8; δ(q0, a) = 0.7 ∧ q1, δ(q0, b) = (0.5 ∧ q1) ∨ 0.3,
δ(q1, a) = q0 ∧ q1, δ(q1, b) = f alse.

Figure 6: All successful runs of A

29

0.71r1q1q(cid:35)(cid:35)0.71q0q1q0q0qa0q1q0.7a1q0q1q(cid:35)(cid:35)(cid:35)aa2r0q0.51q1q(cid:35)(cid:35)0.71q0q1q0qa0q1q0.7a1q0q1q(cid:35)(cid:35)(cid:35)ab0qb0.33r (i = 1, 2, 3) (cf. Figure 6.) and the corresponding weights of words are:

It is easy to see that there are three runs of A, we denote them by ri
Lω(A)(aω) = wt(r1) = 0.6 ∧ 0.7 ∧ 0.4 = 0.4,
Lω(A)(baω) = wt(r1) ∨ wt(r3) = (0.5 ∧ 0.7 ∧ 0.4) ∨ 0.3 = 0.4,
Lω(A)(w) = 0.3, for any w ∈ bΣω − {baω}.
Firstly we turn it to another L-fuzzy alternating co-B ¨uchi automaton with
only crisp ﬁnal states by Proposition 4.5. The ﬁrst step of such process is
to construct the dual of A, an L-fuzzy alternating B ¨uchi automaton A =
(Q, Σ, δ, q0, F c), where

(cid:48)

, I(cid:48),{q(2)

F c(q0) = 0.6, F c(q1) = 0.2;
δ(q0, a) = 0.3 ∨ q1, δ(q0, b) = 0.5 ∨ (0.7 ∧ q1),
δ(q1, a) = q0 ∨ q1, δ(q1, b) = true.
Secondly, constructing an equivalent L-fuzzy alternating B ¨uchi automa-
ton B with crisp ﬁnal states, similarly to Example 6.1, and the result au-
tomaton is:

B = ((cid:98)Q, Σ, δ
(cid:98)Q = {q(j)
I(cid:48)(q(3)
0 ) = F c(q1) = 0.2, I(cid:48)(q(4)
(cid:48)
0 , a) = 0.3 ∨ q(i)
(q(i)
δ
(cid:48)
0 ∨ q(i)
(q(i)
1 , a) = q(i)
δ
Afterwards, we construct B(cid:48), an L-fuzzy alternating B ¨uchi automaton
with a crisp initial state and crisp ﬁnal states equivalent to B by adding an
extra state and some transitions:
1 , q(4)

0 , q(4)
0 ) = F c(q0) ∧ F c(q1) = 0.2;
(cid:48)
0 , b) = 0.5 ∨ (0.7 ∧ q(i)
(q(i)
1 ),
(cid:48)
(q(i)
1 , b) = true.

|i = 0, 1; j = 1,··· , 4}; I(cid:48)(q(1)

B(cid:48) = (Q(cid:48), Σ, δ(cid:48), q(cid:48)

1 }), where q(cid:48)

0 ) = 1, I(cid:48)(q(2)

0 ) = F c(q0) = 0.6,

1 }), where

0 /∈ Q(cid:48), and

0 , q(3)

1 , q(4)

1 , δ
1 , δ

0 , q(3)

0 , q(4)

i

0,{q(2)
4(cid:95)

1 ) ∨ (0.2 ∧ q(4)
1 )

1 ) ∨ (0.2 ∧ q(4)
1 )

δ(cid:48)(q(cid:48)

0, a) =

δ(cid:48)(q(cid:48)

0, b) =

(cid:48)

1=1

(q(i)

4(cid:95)

I(cid:48)(q(i)
= 0.3 ∨ q(1)
≡ 0.3 ∨ q(1)
I(cid:48)(q(i)

0 ) ∧ δ
0 , a)
1 ) ∨ 0.2 ∨ (0.2 ∧ q(3)
1 ∨ (0.6 ∧ q(2)
1 ∨ (0.6 ∧ q(2)
1 ),
0 ) ∧ δ
= 0.5 ∨ (0.7 ∧ q(1)
≡ 0.5 ∨ (0.7 ∧ q(1)
1 , δ(cid:48)(q(i)

(q(i)
1 ) ∨ (0.6 ∧ q(2)
1 ) ∨ 0.2 ∨ (0.2 ∧ q(3)
1 ) ∨ (0.6 ∧ q(2)
1 ),
0 , b) = 0.5 ∨ (0.7 ∧ q(i)
1 ),

0 , b)

1=1

(cid:48)

δ(cid:48)(q(i)

0 , a) = 0.3 ∨ q(i)

30

0 ∨ q(i)

1 , a) = q(i)

1 , δ(cid:48)(q(i)

δ(cid:48)(q(i)
Further on, constructing the dual of B(cid:48). We can see that only r(cid:48)

3, r(cid:48)
4
are successful (cf. Figure 7.) and the corresponding weights of the languages
are:

1 , b) = true.

1) = 0.4 ∧ 0.7 = 0.4,
3) ∨ wt(r(cid:48)

Lω(B(cid:48))(aω) = wt(r(cid:48)
Lω(B(cid:48))(baω) = wt(r(cid:48)
Lω(B(cid:48))(w) = 0.3, for any w ∈ bΣω − {baω}.
The last procedure is to build B(cid:48)(cid:48), our desired (weak) L-fuzzy alternating
0, 18), Q(cid:48) × [18]odd) (18 = |Q(cid:48)|), where (the others
B(cid:48)(cid:48) = (Q(cid:48) × [18], Σ, δ(cid:48)(cid:48), (q(cid:48)

B ¨uchi automaton, which is equivalent to the original A:

4) = 0.3 ∨ (0.4 ∧ 0.7) = 0.4,

1, r(cid:48)

transitions not mentioned are false)

1 , i)) ∨ ((cid:87)

1 , i)) ∨ ((cid:87)

i,j≤l

0.7 ∧ (q(1)

1 , i) ∧ (q(2)
0.5 ∧ (q(1)

1 , j)),
1 , i) ∧ (q(2)

1 , j)),

i,j≤l

i≤l

i≤l

i≤2l(cid:48)

0.4 ∧ (q(1)

0, l), a) = ((cid:87)
0, l), b) = 0.3 ∨ ((cid:87)
0 , l), a) =(cid:87)
0 , l), b) = 0.3 ∨ ((cid:87)
0 , 2l(cid:48)), a) = (cid:87)
0 , 2l(cid:48)), b) = 0.3 ∨ ( (cid:87)
1 , l), a) = (cid:87)
1 , 2l(cid:48)), a) = (cid:87)
0 , l), a) =(cid:87)
0 , l), b) = 0.3 ∨ ((cid:87)
1 , 2l(cid:48)), a) = (cid:87)
0 , 2l(cid:48)), a) = (cid:87)
0 , 2l(cid:48)), b) = 0.3 ∨ ( (cid:87)
1 , 2l(cid:48)), a) = (cid:87)

δ((q(cid:48)
δ((q(cid:48)
δ(cid:48)(cid:48)((q(1)
δ(cid:48)(cid:48)((q(1)
δ(cid:48)(cid:48)((q(2)
δ(cid:48)(cid:48)((q(2)
δ(cid:48)(cid:48)((q(1)
δ(cid:48)(cid:48)((q(2)
δ(cid:48)(cid:48)((q(3)
δ(cid:48)(cid:48)((q(3)
δ(cid:48)(cid:48)((q(3)
δ(cid:48)(cid:48)((q(4)
δ(cid:48)(cid:48)((q(4)
δ(cid:48)(cid:48)((q(4)

i,j≤2l(cid:48)

i≤2l(cid:48)

i,j≤l

i≤l

i,j≤2l(cid:48)

i,j≤l
0.7 ∧ (q(3)

0.4 ∧ (q(1)

i≤l
0.7 ∧ (q(1)

1 , i),
0.5 ∧ (q(1)

1 , i)),

i≤l
0.7 ∧ (q(2)

1 , i),
0.5 ∧ (q(2)

1 , i)),

i≤2l(cid:48)

0 , i) ∧ (q(1)
(q(1)
1 , j),
0 , i) ∧ (q(2)
(q(2)

1 , j),

1 , j),

1 , i)),

1 , i),
0.5 ∧ (q(3)
i≤l
0 , i) ∧ (q(1)
(q(1)
0.7 ∧ (q(4)

1 , i),
0.5 ∧ (q(4)
i≤2l(cid:48)
0 , i)∧ (q(4)
(q(4)

1 , i)),
1 , j) (l, 2l(cid:48) are the numbers less than

or equal to 18).

31

The successful runs of B(cid:48)(cid:48) are not only the following three, but their pro-
jections on Q(cid:48) correspond to one of the projection of the three on Q(cid:48) respec-
tively, so their weights cannot make the whole languages of B(cid:48)(cid:48) to be larger,
then only considering following ones is enough (cf. Figure 8.). And, it is
easy to examine that the B(cid:48)(cid:48) is equivalent to the starting automaton A.

Figure 7: All successful runs of B(cid:48)

32

1r′1q1q(cid:35)(cid:35)0.71q0q1q0qa0q1q0.7a1q0q1q(cid:35)(cid:35)(cid:35)aa(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)0.40q′  1q1q(cid:35)(cid:35)0.71q0q1q0qa0q1q0.7a1q0q1q(cid:35)(cid:35)(cid:35)a2r′(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)0q′0.7(2)a1q1q(cid:35)(cid:35)0.71q0q1q0q0q1q0.71q0q1q(cid:35)(cid:35)(cid:35)(2)(2)(2)(2)(2)(2)(2)(2)(2)(2)  b0.33r′0q′ 4r′1q1q(cid:35)(cid:35)0.71q0q1q0qa0q1q0.7a1q0q1q(cid:35)(cid:35)(cid:35)a(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)0.40q′b        1q1q(cid:35)(cid:35)0.71q0q1q0qa0q1q0.7a1q0q1q(cid:35)(cid:35)(cid:35)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)0q′(2)a1q1q(cid:35)(cid:35)0.71q0q1q0q0q1q0.71q0q1q(cid:35)(cid:35)(cid:35)(2)(2)(2)(2)(2)(2)(2)(2)(2)(2)0.55r′b Figure 8: Some (not all) successful runs of B(cid:48)(cid:48)

7. Conclusions

The closure properties of L-fuzzy alternating B¨uchi automata and the
equivalence relationship between them and L-fuzzy nondeterministic ones
were already studied in our paper. We gave a direct construction to illustrate
the L-fuzzy ω-regularity of the languages recognized by L-fuzzy alternating

33

(cid:35)0.7(cid:35)(cid:35)a0.40(,18)q′(1)(1)11(,(,1))qrankqa(1)(1)00(,(,2))qrankq(1)(1)11(,(,2))qrankq(1)(1)11(,(,3)qrankq(1)(1)00(,(,3))qrankq(1)(1)11(,(,3))qrankq1r)′′a 2r′′0.7(cid:35)(cid:35)a0.40(,18)q′(1)(1)11(,(,1))qrankq(1)(1)00(,(,2))qrankq(1)(1)11(,(,2))qrankq(1)(1)11(,(,3)qrankq(1)(1)00(,(,3))qrankq(1)(1)11(,(,3))qrankq)ab(cid:35)   b0.33r′′0(,18)q′ co-B¨uchi automata without the related knowledge about L-fuzzy nondeter-
ministic B¨uchi automata. In addition, the discussion about decision problems
for L-fuzzy alternating B¨uchi automata and some illustrative examples were
given in our paper. Using above preparations, we can study the properties
about fuzzy temporal logic in model checking in the future, such as building
a fuzzy alternating B¨uchi automaton for a given fuzzy LTL formula ([15, 16])
satisfying the languages of the automaton is exactly the fuzzy set of compu-
tations satisfying the formula.

References

References

[1] S.Almagor and O.Kupferman, Max and sum semantics for alternating
weighted automata, Lecture Notes in Computer Science 6996(2011)13-
27.

[2] U.Boker, O.Kupferman and A.Rosenberg, Alternation removal in B¨uchi

automata, Lecture Notes in Computer Science 6199(2010)76-87.

[3] A.K.Chandra, D.C.Kozen and L.J.Stockmeyer, Alternation, Journal of

the ACM 28(1)(1981)114-133.

[4] K.Chatterjee, L.Doyen, and T.A.Henzinger, Alternating weighted au-

tomata, Lecture Notes in Computer Science 5699(2009) 3-13.

[5] M. Droste, On weighted B¨uchi automata with order-complete weights,
International Journal of Algebra and Computation 17(2)(2007)235-260.

[6] M. Droste, W. Kuich and H. Vogler, Chapter 9: Weighted tree automata
and tree transducers of handbook of weighted automata, Monographs in
Theoretical Computer Science, Springer-Verlag Berlin Heidelberg 2009.

[7] B.A.Davey and H.A.Priestley, Introduction to lattice and order (second

edition), Cambridge University Press 2002.

[8] D.Fierens, G.V.D.Broeck,

J.Renkens, D.Shterionov, B.Gutmann,
I.Thon, G.Janssens, L.D.Raent, Learning in probabilistic logic programs
using weighted booleans formulas, Theory and Practice of Logic Pro-
gramming, DOI: 10.1017/S1471068414000076.

34

[9] Z.Han and Y.Li, Equivalent characterizations of fuzzy B¨uchi automata,

Chinese Journal of Computers 36(6)(2013)1235-1245.

[10] J.E.Hopcroft and J.D.Ullman, Formal languages and their relation to
automata, Addison-Wesley Longman Publishing Co., Inc. Boston, MA,
USA 1969.

[11] O.Kupferman and Y.Lustig, Lattice automata, Lecture Notes in Com-

puter Science 4349(2007)199-213.

[12] O.Kupferman and M.Y.Vardi, Weak alternating automata are not that

weak, ACM Transactions on Computational Logic 2(3)(2001)408-429.

[13] R.M.Karp, Reducibility among combinatorial problems, Complexity of
Computer Computations (Proc. Sympos., IBM Thomas J. Watson Res.
Center, Yorktown Heights, N.Y., 1972) 85-103.

[14] K.Krichivasan and K.Sharda, Fuzzy ω-automata, Information Sciences

138(1-4)(2001)257-281.

[15] Y.Li, Quantitative model checking of linear-time properties based on

generalized prossibility measures, http://arxiv.org/abs/1601.06504.

[16] Y.Li, L.Li, Model checking of linear-time properties based on possibility

measure, IEEE Transactions on Fuzzy Systems 21(5)(2013) 842-854.

[17] Y.Li and Z.Ma, Quantitative computation tree logic model checking
based on generalized possibility measures, IEEE Transactions on Fuzzy
Systems 23(6)(2015) 2034-2047.

[18] Y.Li and W.Pedrycz, Fuzzy ﬁnite automata and fuzzy regular expres-
sions with membership values in lattice-ordered monoids, Fuzzy Sets
and Systems 156(2005)68-92.

[19] Y.Li and W.Pedrycz, Minimization of lattice ﬁnite automata and its
application to the decomposition of lattice languages, Fuzzy Sets and
Systems 158(13)(2007)1423C1436.

[20] S.Miyano and T.Hayashiiyano, Alternating ﬁnite automata on ω-words,

Theoretical Computer Science 32(1984)321-330.

35

[21] G.Rahonis,

Inﬁnite fuzzy computation, Fuzzy Sets and Systems,

153(2)(2005)275-288.

[22] M.Y.Vardi, An automata-theoretic approach to linear temporal logic,

Lecture Notes in Computer Science 1043(2005)238-266.

36

