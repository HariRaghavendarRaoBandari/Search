6
1
0
2

 
r
a

M
4

 

 
 
]

O
C

.
t
a
t
s
[
 
 

1
v
1
5
5
1
0

.

3
0
6
1
:
v
i
X
r
a

Perfect and ε-Perfect Simulation Methods for the One

Dimensional Kac Equation

J. N. Corcoran, D. Jennings, and P. VaughanMiller

University of Colorado ∗

March 7, 2016

Abstract

We review the derivation of the Kac master equation model for random collisions of
particles, its relationship to the Poisson process, and existing algorithms for simulating
values from the marginal distribution of velocity for a single particle at any given time.
We describe and implement a new algorithm that eﬃciently and more fully leverages
properties of the Poisson process, show that it performs at least as well as existing
methods, and give empirical evidence that it may perform better at capturing the tails
of the single particle velocity distribution. Finally, we derive and implement a novel
“ε-perfect sampling” algorithm for the limiting marginal distribution as time goes to
inﬁnity. In this case the importance is a proof of concept that has the potential to be
expanded to more interesting (DSMC) direct simulation Monte Carlo applications.

1

Introduction

In [7], Kac introduced an N particle stochastic process model for a spatially homogeneous
gas that evolves according to a speciﬁc collision process. He proved that, as N → ∞, the
marginal probability density function (pdf) for a single particle at time t approaches the
solution of a simpliﬁed version of the famed Boltzmann equation. The N -dimensional prob-
ability density function for all particles is described by the Kac master equation which
can be derived as a random walk with transitions occurring at times of a Poisson process.
In this paper we take advantage of properties of the Poisson process, including process
“thinning” and the conditional uniformity of event times to eﬃciently simulate values from
the velocity density of any single particle at any given time t > 0. We compare our results
to those from the familiar Nanbu, Nanbu-Babovsky, and DSMC (direct simulation Monte
Carlo) algorithms. Additionally, we introduce an “ε-perfect sampling algorithm” that uses
“coupling from the past” techniques to simulate or sample from the velocity distribution at
∗Postal Address: Department of Applied Mathematics, University of Colorado, Box 526 Boulder CO

80309-0526, USA; email: corcoran@colorado.edu, phone: 303-492-0685

0Keywords: MCMC, Kac Model, rareﬁed gas ﬂows, perfect simulation, DSMC

AMS Subject classiﬁcation: 60J10, 65C05, 76P05

0

time t = ∞ up to a user deﬁned accuracy ε that can be taken so small as to be essentially
“perfect” within the accuracy available by a given machine precision.

In Section 2, we review the derivation of the N particle Kac master equation and show
its relationship to the Poisson process. In Section 3 we very brieﬂy review the probability
density function of any one given particle as a marginal density of the joint probability
density function solution to the Kac master equation. In Section 4 we review three existing
simulation methods for the marginal density, introduce the exact Poisson method, and make
an empirical comparison between all methods. In Section 5, we brieﬂy review the idea of
perfect simulation (perfect sampling) and describe a novel “ε-perfect” algorithm that applies
to the Kac model.

2 The Kac Master Equation

Consider N one-dimensional particles, each with mass m, with velocities v1, v2, . . . , vN .
Deﬁne (cid:126)v = (v1, v2, . . . , vN ). The total kinetic energy of the ensemble of particles is

For simplicity, we assume that m = 2. Thus, we have E = (cid:80)N

i=1

√

E.

|(cid:126)v| =
If we assume that kinetic energy is conserved as these velocities evolve through particle
collisions, points (cid:126)v with always be found on the sphere SN−1(
E). We now describe a
particular evolution of velocities, proposed by Kac [7] in two stages as in [3] The ﬁrst stage
is to describe as a particular discrete time random walk known as the “Kac walk” and the
second stage is to modify the random walk so that it is taking place in continuous time.

√

i=1 v2

i or, equivalently,

N(cid:88)

v2
i .

E =

m
2

å

Ç
åô−1

N
2

ñÇ

2.1 The Kac Walk

The Kac Walk:

1. Randomly select a pair of indices (i, j) from {1, 2, . . . , N}. There are

ways to

do this, so a particular pair (i, j) is selected with probability

N
2

2. Randomly select a scattering angle θ from a density ρ(θ) on [0, 2π).

(Often θ is
assumed to be uniformly distributed on [0, 2π). For an upcoming derivation, it will
be convenient to deﬁne ρ(θ) on [−π, π) and to assume that it is symmetric about 0.)

3. Update the velocities for particles i and j through the rotation

(vi, vj) → (v(cid:48)

i, v(cid:48)

j) := (vi cos θ + vj sin θ,−vi sin θ + vj cos θ).

Return to Step 1.

1

√
It is easy to see that total kinetic energy is conserved by the Kac walk (though momentum is
not) and therefore that these three steps create a random walk on SN−1(
E). We will now
derive the probability density function, fk for the vector of N velocities after k “collisions”
or iterations of the Kac walk.
√
Let g : SN−1(
functions as the conditional expectation

E) → IR be any continuous function. Deﬁne an operator QN on such

QN g((cid:126)v) := E[g((cid:126)Vk+1)|(cid:126)Vk = (cid:126)v]

where (cid:126)Vk is the random vector of velocities at the kth iteration of the Kac walk.
Conditioning on the selected angle and particles, this becomes
QN g((cid:126)v) = E[g((cid:126)Vk+1)|(cid:126)Vk = (cid:126)v]

ñ

−π

(cid:90) π
(cid:90) π
(cid:90) π

−π

i<j

(cid:88)
(cid:88)
(cid:88)

i<j

−π

i<j

=

=

=

(cid:12)(cid:12)(cid:12)(cid:12)(cid:12)(cid:126)Vk = (cid:126)v,
ñÇ

N
2

åô−1

E

g((cid:126)Vk+1)

particles i and j

are selected

,

angle θ is
selected

g(v1, . . . , vi−1, v(cid:48)

i, vi+1, . . . , vj−1, v(cid:48)

j, vj+1, . . . , vN ) ·

g(Rij(θ) (cid:126)v) ·

ρ(θ) dθ

åô−1
åô−1

ô

ñÇ
ñÇ

·

N
2

N
2

ρ(θ) dθ

ρ(θ) dθ

where Rij(θ) is the N × N rotation matrix that is the identity matrix altered to have cos θ
as the (i, i) entry, sin θ as the (i, j) entry, − sin θ as the (j, i) entry, and cos θ as the (j, j)
entry.

Let f0 be an initial probability density function for the N velocities and let f1 be the density
after one iteration. Deﬁne random vectors (cid:126)V0 ∼ f0 and (cid:126)V1 ∼ f1. Note that

Thus, we have that

It is straightforward to verify that QN is a self-adjoint operator in the sense that

QN g((cid:126)v)f ((cid:126)v) d(cid:126)v =

g((cid:126)v)QN ((cid:126)v)f ((cid:126)v) d(cid:126)v

(1)

(2)

where S is shorthand for SN−1(

g((cid:126)v) f1((cid:126)v) d(cid:126)v,

E[g((cid:126)V1)] =
√
E). Also note that
E[g((cid:126)V1)] = E[E[g((cid:126)V1)|(cid:126)V0]]

S

= (cid:82)
= (cid:82)

S E[g((cid:126)V1)|(cid:126)V0 = (cid:126)v] · f0((cid:126)v) d(cid:126)v

S QN g((cid:126)v)f0((cid:126)v) d(cid:126)v

g((cid:126)v) f1((cid:126)v) d(cid:126)v =

QN g((cid:126)v)f0((cid:126)v) d(cid:126)v.

(cid:90)

S

(cid:90)

S

(cid:90)

(cid:90)
(cid:90)

S

S

2

for all continuous g and for all N dimensional densities f . Therefore, combining (1) and
(2), we have

Since (3) holds for all g : SN−1(
probability density function for the velocities after k collisions is given by

√

g((cid:126)v) QN f0((cid:126)v) d(cid:126)v.

(3)
E) → IR, we have that f1 = QN f0. Similarly, the

S

(cid:90)

g((cid:126)v)f1((cid:126)v) d(cid:126)v =

(cid:90)

S

fk = Qk

N f0.

(4)

2.2 Time and the Poisson Process

As of now, we have a pdf for the N -dimensional vector of velocities evolving at the discrete
times of a random walk. We now will allow the velocities to evolve as an N -dimensional
continuous time Markov process. The pdf will now be denoted by f ((cid:126)v, t).

Kac proposed in [7] that collisions happen in the N -particle ensemble at times of a Poisson
process. Speciﬁcally, it is assumed that the expected number of particles that collide in a
vanishingly small time step ∆t is λN ∆t for some λ > 0. This means that the expected
number of collisions between pairs of particles is λN ∆t/2 and so the assumption is that
collisions happen according to a Poisson process with rate λN/2. Among other things,
this implies that, as ∆t (cid:38) 0, the probability of exactly one collision in any time interval
(t, t + ∆t) is λN ∆t/2 + o(∆t), the probability of no collisions is 1 − λN ∆t/2 + o(∆t), and
the probability of two or more is o(∆t). (Here, o(∆t) represents a vanishing function g(∆t)
such that g(∆t)/∆t → 0 as ∆t (cid:38) 0.)
Given the velocity density f ((cid:126)v, t), at time t, the density at time t + ∆t as ∆t (cid:38) 0 is,
informally, the mixture density

f ((cid:126)v, t + ∆t) = p · ( previous density after having gone through a collision )

+(1 − p) · ( previous density )

where p is the probability of a collision in the ensemble during the time interval (t, t + ∆t)
as ∆t (cid:38) 0.
Formally, this is written as

f ((cid:126)v, t + ∆t) = (λN ∆t/2 + o(∆t)) · QN f ((cid:126)v, t) + (1 − λN ∆t/2 + o(∆t)) · f ((cid:126)v, t)

= λN ∆t

2 QN f ((cid:126)v, t) + f ((cid:126)v, t) − λN ∆t

2

f ((cid:126)v, t) + o(∆t)

which implies that

f ((cid:126)v, t + ∆t) − f ((cid:126)v, t)

∆t

λN [QN − I]

2

=

f ((cid:126)v, t) +

o(∆t)

∆t

where I is the identity operator.

3

Letting ∆t (cid:38) 0, β = λ/2, and specifying an initial condition, we get the Kac Master
Equation:

d

dt f ((cid:126)v, t) = βN [QN − I]f ((cid:126)v, t)

which has solution

f ((cid:126)v, 0)

= f0((cid:126)v)

f ((cid:126)v, t) = eβN [QN−I]tf0((cid:126)v) = e−βN t

∞(cid:88)

i=0

(βN t)i

i!

Qi

N f0((cid:126)v).

3 The One Dimensional Kac Equation

We assume henceforth that the scattering angle density, ρ(θ), is the uniform density on the
interval (0, 2π). We write θ ∼ unif(0, 2π). Consider the marginal density for particle 1,

(cid:90)

fN (v1, t) =

√
SN−2(

f ((cid:126)v, t) d(cid:126)v−1

E−v2
1)

(5)

where (cid:126)v−1 := (v2, v3, . . . , vN ). We will make the typical assumption that E = N since the
total kinetic energy is proportional to the number of particles in the system.

Kac [7] showed, under some assumptions1 on the initial density f (v, 0), that this single par-
ticle marginal density converges, as N → ∞, to the solution of a one-dimensional spatially
homogeneous Boltzmann-type equation:

[f (v(cid:48), t)f (w(cid:48), t) − f (v, t)f (w, t)] dθ dw,

(6)

(cid:90) ∞

(cid:90) 2π

−∞

0

df
dt

(v, t) =

λ
2π

where

v(cid:48) = v cos θ + w sin θ

and

w(cid:48) = −v sin θ + w cos θ.

Equation (6) is known as the Kac equation or the Kac-Boltzmann equation.

Note that (6) may be rewritten as

for ε = 1/λ, and P (f, f ) deﬁned as the bilinear collision operator

∂f
∂t

=

(cid:90) ∞

1
ε

[P (f, f ) − f ]
(cid:90) 2π

P (f, f ) =

1
2π

−∞

0

f (v(cid:48), t)f (w(cid:48), t) dθ dw.

(7)

1Let φ be a one dimensional density. Informally, an n-dimensional density φn, symmetric in its arguments,
is “φ-chaotic” if, as n → ∞ any k-dimensional marginal of φn acts as a product of k copies of φ. In [7],
Kac proved that if f (N ) = f ((cid:126)v, t) solves the Kac Master equation, then f (N ) is f -chaotic where f solves the
Kac-Boltzmann equation. Thus, we can consider any univariate marginal of f ((cid:126)v, t) as N → ∞ as a solution
to (6). For a more formal explanation, please see [4].

4

If the initial distribution f0(v) := f (v, 0) on (−∞,∞) is taken to be f0(v) = 2√
if λ =

π/2, the solution to (6) is known [8] to be

√

π v2e−v2, and

(1 − C(t))

C(t) + (3C(t) − 1)(C(t))3/2v2

e−C(t)v2

(8)

ï

3
2

»

ò

f (v, t) =

1√
π

where

It is easy to see that

C(t) = [3 − 2 exp(−√

πt/16)]−1.

lim
t→∞ f (v, t) =

1√
3π

e− 1
3 v2

for − ∞ < v < ∞.

(9)

We will use (8) and (9) to test several Monte Carlo algorithms.

4 Simulation Methods for f (v, t)

In Sections 4.1 and 4.2 we review existing methods for drawing (simulating) velocity values
from the single particle marginal distribution fN (v, t) for ﬁnite t. In Section 4.3 we propose
a new method that takes advantage of properties of the Poisson collision process. Our goal
here is to have a method eﬃcient enough to be able to push N quite large so that we may
see approximately f (v, t).

4.1 The Nanbu and Nanbu-Babovsky Algorithms

In [9] Nanbu proposes an algorithm to draw from fN (v, t) based on the probabilistic inter-
pretation of colliding particles and on the discretization

fn+1 = (1 − λ∆t) fn + λ∆tP (fn, fn)

(10)

of (7). Here, fn = fn(v) = f (v, tn), t0 = 0, and tn = t0 + n∆t for some small increment
∆t > 0. The interpretation of (10) is that, if ∆t is small enough so that 0 ≤ λ∆t ≤ 1,
“particle 1” (or any ﬁxed given particle)

• fails to undergo a collision and does not have any velocity update with probability

1 − λ∆t, or

• experiences a collision with probability λ∆t and has a new velocity generated accord-

ing to the collision process described by P (f, f ).

For the following algorithm descriptions, we assume that ∆t divides into t evenly.

Nanbu’s Algorithm
For i = 1, 2, . . . , N , let v(n)

i

denote the velocity for particle i at time step n = 0, 1, 2, . . ..

5

1. Sample initial velocities, v(0)

1 , v(0)

2 , . . . , v(0)

tically distributed (iid) from f0(v). Set s = 0.

N , for all N particles independent and iden-

2. For i = 1, 2, . . . , N ,

• With probability 1 − λ∆t do nothing to the velocity of the ith particle.

◦ Randomly select a second particle from among the remaining particles in

Set v(n+1)

= v(n)

.

i

i

• With probability λ∆t,

{1, 2, . . . , N}.

◦ Draw an angle value θ ∼ ρ(θ).
◦ Set v(n+1)
cos θ + v(n)

= v(n)

i

i

sin θ

j

3. Set s = s + ∆t and n = n + 1. If s < t, return to Step 2.

As kinetic energy is not conserved in Nanbu’s Algorithm, Babovsky [1] modiﬁed the al-
gorithm to update both vi and vj as particles i and j collide. Additionally, at each time
step, the number of collisions processed is taken to be equal to the expected number of
collision pairs in an interval of length ∆t. As the expected number of collisions is λN ∆t,
the expected number of collision pairs is λN ∆t/2. This is then probabilistically rounded
using the following function.

®

Round[x] =

(cid:98)x(cid:99)
(cid:98)x(cid:99) + 1 , with probability x − (cid:98)x(cid:99)

, with probability (cid:98)x(cid:99) + 1 − x

It is easy to see that, for any given x, the expected value of Round[x] is x.

Nanbu-Babovsky Algorithm
For i = 1, 2, . . . , N , let v(n)

i

denote the velocity for particle i at time step n = 0, 1, 2, . . ..

1. Sample initial velocities, v(0)

1 , v(0)

2 , . . . , v(0)

tically distributed (iid) from f0(v). Set s = 0.

N , for all N particles independent and iden-

2. For i = 1, 2, . . . , N ,

• Select m = Round[λN ∆t/2].
• Randomly select m pairs, (i, j) of particle indices, without replacement, from

among all possible pairs.

• For each selected pair (i, j), draw an angle value θ ∼ ρ(θ) and set

v(n+1)
i
v(n+1)
j

= v(n)
= −v(n)

i

i

cos θ + v(n)

sin θ

j

sin θ + v(n)

j

cos θ.

6

• For the remaining unselected indices k, set v(n+1)

k

= v(n)
k .

3. Set s = s + ∆t and n = n + 1. If s < t, return to Step 2.

Both the Nanbu and the Nanbu-Babovsky algorithms can be shown to converge to the
solution of the discretized Kac equation given by (10). Nanbu’s algorithms allows each
particle to potentially undergo a collision only once per time step and the Nanbu-Babovsky
scheme allows each pair of particles to potentially undergo a collision once per time step.

4.2 Bird’s DSMC Algorithm

The Direct Simulation Monte Carlo (DSMC) approach due to Bird [2] was ﬁrst proposed in
the late 60’s and has been shown [10] to converge to the solution of (7). It diﬀers from the
Nanbu-Babovsky algorithm in that any particular collision pair may be selected multiple
times in the time interval of length ∆t. Since there are λN ∆t/2 collisions expected in that
interval, the average time between collisions is taken to be ∆tc := ∆t/[λN ∆t/2] = 2/(λN ).

Bird’s DSMC Algorithm

1. Sample initial velocities, v(0)

1 , v(0)

2 , . . . , v(0)

tically distributed (iid) from f0(v). Set s = 0.

N , for all N particles independent and iden-

2. Process one collision as follows.

• Select a pair (i, j) of particles at random from among all possible pairs.
• For each selected pair (i, j), draw an angle value θ ∼ ρ(θ) and set

v(n+1)
i
v(n+1)
j

= v(n)
= −v(n)

i

i

cos θ + v(n)

sin θ

j

sin θ + v(n)

j

cos θ.

• For the remaining unselected indices k, set v(n+1)

k

= v(n)
k .

3. Set s = s + ∆tc and n = n + 1. If s < t, return to Step 2.

Bird’s DSMC techniques comprise a much wider class of extremely useful and popular
algorithms than the one detailed here. As it stands, the one given here is essentially the
Nanbu-Babovsky algorithm where pairs are selected with replacement.

4.3 Exact Simulation of fN (v, t) Based on Properties of the Poisson pro-

cess

In this section, we simulate exactly from fN (v, t) using the actual Poisson numbers of
collisions between important time points as opposed to the expected numbers of collisions.
We do not partition the interval (0, t) as in the previously described algorithms but instead
focus on collision times for the ﬁxed “particle 1”.

7

1 is involved in any one of these collisions is (N − 1)/(cid:0)N

Recall that the N -particle ensemble is assumed to undergo collisions at times of a Poisson
process with rate λN . As each collision involves 2 particles, this means that pairs of particles
are colliding according to a Poisson process with rate λN/2. The probability that particle
process is a thinned Poisson process with rate (λN/2) · 2/N = λ. Therefore, we begin by
simulating a Poisson rate λt number of collisions for particle 1 in the time interval (0, t).

(cid:1) = 2/N . So, the particle 1 collision

2

Though intercollision times for particle 1 are exponential with rate λt, once the number of
collisions during (0, t) is ﬁxed, the times of those collisions are uniformly distributed over the
interval (0, t). So, rather than divide up the interval (0, t) into ∆t increments, we consider
only the times when particle 1 is involved in a collision by ﬁrst simulating K ∼ P oisson(λt),
then simulating independent U1, U2, . . . , UK from the uniform distribution over (0, t) and
ﬁnally considering the ordered time points T1, T2, . . . , TK corresponding to the ordered Ui.
(For example, T1 = min(U1, U2, . . . , UK) and TK = max(U1, U2, . . . , UK).)

To update the velocity for particle 1 at time T1, we must choose, at random, a particle
from the remaining N − 1 particles for collision. As this “sub-ensemble” of particles has
been evolving over the time interval (0, T1), we will process K1 ∼ P oisson(λ(N − 1)T1/2)
collisions involving only these particles without any regard for the times of these collisions
and then select one at random for collision with particle 1. Continuing in this manner, we
get the following algorithm.

Exact Poisson Algorithm

1. Sample initial velocities, v(0)

1 , v(0)
tically distributed (iid) from f0(v).

2 , . . . , v(0)

N , for all N particles independent and iden-

2. Simulate K ∼ P oisson(λt). This is the number of collisions involving particle 1 during

[0, t]. Suppose that K = k.

3. Simulate U1, U2, . . . , Uk

iid∼ unif(0, t) collision times for particle 1. Denote the or-
dered U1, U2, . . . , Uk as T1, T2, . . . , Tk where T1 = min(U1, U2, . . . , Uk) and Tk =
max(U1, U2, . . . , Uk).

4. Let T0 = 0.

For i = 1, 2, . . . , k,

• Simulate Ki ∼ P oisson(λ(N − 1)(Ti − Ti−1)/2). This is the number of “non
particle 1” collisions happening during the time interval [Ti−1, Ti]. Suppose that
Ki = ki.

• Process ki collisions for the (N − 1) particle ensemble as follows.

For j = 1, 2, . . . , ki

◦ Select a pair (r, s) of particles at random from among all possible pairs or

particles with labels in {2, 3, . . . , N}.

◦ For each selected pair (r, s), draw an angle value θ ∼ ρ(θ) and set new

velocities as

vr = vr cos θ + vs sin θ
vs = −vr sin θ + vs cos θ

8

where vr and vs on the right-hand side of these equations are the pre-collision
velocities for particles r and s.

• Randomly select one particle from {2, 3, . . . , N} and process a collision with

particle 1 by assigning new velocities

vr = vr cos θ + vs sin θ
vs = −vr sin θ + vs cos θ

where r is the selected index in {2, 3, . . . , N} and v1 and vr on the right-hand
side of these equations are the pre-collision velocities for particles 1 and r.

Note that, unlike the Nanbu, Nanbu-Babovsky, and Bird algorithms, we are not using any
sort of time counter or partitioning of the time interval [0, t]. Furthermore, we are actually
processing a Poisson number of collisions, as assumed by the derivation of the Kac equation,
in any given time interval rather than simply the expected number of collisions under the
Poisson assumption as in Bird’s algorithm. Finally, we note that we are saving on collisions
by not propagating the system in the time interval [TK, t] as we are trying to sample the
velocity of particle 1 at time t and this is unchanged in this interval. This gives an expected
savings of (N/2)(1 − e−λt) collisions per simulation repetition.

4.4 Simulation Results

In order to assess the performance of the diﬀerent algorithms, we simulated repeated draws
from the velocity distribution of the ﬁrst particle, v1, for various values of N , and com-
pared the results to the exact solution (for N → ∞) given by (8). Speciﬁcally, for each
algorithm we simulated N iid velocities and propagated the ensemble forward according
to the algorithms described in Sections 4.1, 4.2, and 4.3, collecting the ultimate values
for v1 at various times t.
In all cases, we were able to achieve reasonable accuracy for
a surprisingly small number of particles. However, since the accuracy of the Nanbu and
Nanbu-Babovsky algorithms both depend on how ﬁnely the time interval is partitioned and
since the Nanbu-Babovsky sampling with replacement step is relatively ineﬃcient, we will
focus our comparisons mainly on the Nanbu, Bird, and Poisson algorithms.

We will express the accuracy of our numerical results using an estimate of the total vari-
ation norm (T V N ) distance between the true curve and the estimated distributions. The
total variation norm distance between two probability measures π1 and π2 is deﬁned to be

where B is the set of Borel sets in the appropriate space and πi(A) =(cid:82)

sup
A∈B

|π1(A) − π2(A)|,

||π1 − π2|| =

1
2

(cid:88)

x

π2 are discrete measures, then the total variation norm can be written simply as

A πi(x) dx. If π1 and

||π1 − π2|| =

1
2

|π1(x) − π2(x)|.

(11)

In this paper, we discretized both the true and simulated densities by a natural histogram
binning procedure in order to use (11) to give an estimated T V N distance between the

9

Figure 1: Histograms of 100,000 values of v1 at t = 2 with N = 5 for ∆t = 0.01 (left) and
∆t = 1.0 (right). Curve is exact solution for N = ∞ given by (8).

target density and our simulation results. As this estimate depends on the bin widths used,
the actual values of our estimated T V N are not as interesting as the relative values. We
will keep our bin widths constant throughout.

For example, for t = 2, using Nanbu’s algorithm with N = 5 produced distributions for
v1 shown in Figure 1. In both cases the “target density” given by (8) is shown as a solid
curve.
It is no surprise that the smaller simulation time step gives better results, but
to illustrate the T V N error, the estimated values of T V N for the left and right graphs
are 0.0187 and 0.0482, respectively. Figure 2 shows estimated T V N , for several values of
N , as the simulation time step size decreases. Each point on the graph was created by
averaging 100 values of T V N , each having been computed from a sample of size 100, 000.
The height of the horizontal line just below 0.01 shows the average T V N for 100 samples
of size 100, 000 for Bird’s DSMC algorithm (which doesn’t depend on ∆t) for N = 50. This
was indistinguishable to several decimal places from similarly estimated T V N for larger N ,
for the Poisson algorithm for N ≥ 50, and for a baseline estimated T V N for samples of size
100, 000 from the standard normal distribution. (Recall that we do not expect the estimated
T V N to necessarily approach zero even in the case of exact simulation from the normal
distribution due to the discretization used in its calculation.) Figure 3 shows the average
T V N values (again averaging 100 values each computed from a sample of size 100, 000) for
the three algorithms as a function of the number of particles in the simulations. Here we
can see that the Poisson algorithm consistently performs better than both the Nanbu and
Bird algorithms for small N . That is, less particles are needed in order to approximate
(8) when using the Poisson algorithm. Distributions for v1, estimated by the DSMC and
Poisson algorithms are shown in Figure 4. While they are similar both visually and by the
T V N measure, the Poisson algorithm appears to be performing slightly better in the tails,
as shown in Figure 5 for the case of the upper tails.

10

v1Density−6−4−202460.000.050.100.150.200.250.30v1Density−4−20240.000.050.100.150.200.250.30Figure 2: Estimated T V N for Nanbu’s Algorithm as a function of k for ∆t = 2/2k

Figure 3: Estimated T V N for the Nanbu, Bird, and Poisson algorithms as a function of N

11

lllllllkTVN12345670.000.010.020.030.040.05lllllllllllllllllllllN=5N=10N=50N=100Bird and Poisson algorithms, N>500.0100.0120.0140.0160.0180.020NTVN51050100llllllllllNanbu (Dt=227 )Bird DSMCPoissonFigure 4: Histograms of 100,000 Values of v1 at t = 2 with N = 50 for the DSMC algorithm
(left) and the Poisson algorithm (right).

Figure 5: Histograms of 100,000 upper tail values of v1 at t = 2 with N = 1000 using Bird’s
DSMC algorithm (left) and the Poisson algorithm (right).

12

v1Density−4−20240.000.050.100.150.200.250.30v1Density−4−20240.000.050.100.150.200.250.30v1Density3.03.54.04.50.00.51.01.52.0v1Density3.03.54.04.50.00.51.01.52.02.53.05 An ε-Perfect Simulation of f (v,∞)

“Perfect sampling” (or “perfect simulation”) is the name applied to a class of Markov
chain Monte Carlo (MCMC) algorithms which enable one to draw values exactly from the
stationary (limiting) distribution π of a Markov chain. This is in contrast to the more
typical MCMC algorithms in which transitions are simulated for “a long time” after which
output is collected giving only approximate draws from π.

5.1 Perfect Simulation
The essential idea of most of these approaches is to ﬁnd a random epoch −T in the past
such that, if one constructs sample paths (according to a transition density p(x, y) that has
stationary/limiting distribution π) from every point in the state space starting at −T , all
paths will have met or “coupled” by time zero. The common value of the paths at time
zero is a draw from π.
Intuitively, it is clear why this result holds with such a random
time T . Consider a chain starting anywhere in the state space at time −∞. At time −T it
must pick some value x, and from then on it follows the trajectory from that value. Since
it arrives at the same place at time zero no matter what value x is picked at time −T , the
value returned by the algorithm at time zero is the tail end of a path that has run for an
inﬁnitely long time and is therefore a “perfect” draw from π.

Typically, perfect sampling is carried out using stochastically dominating processes that
bound or “sandwich” the process of interest for all time as depicted in Figure 6. At time
−T , these bounding processes are at the extremes of the state space. At time −b, they have
coupled together to form a single path that is followed forward to time 0. If such coupling is
not achieved before time 0, T is increased and the bounding processes are resimulated using
the same random inputs whenever they pass through previously visited time points. Note
that when the bounding processes couple at some time −b, all possible sample paths of the
process of interest have necessarily coupled at some earlier time −a. Note further that a
path started anywhere in the state space at time −T will be at the same place at time 0.
This value at time 0 is a perfect draw from the stationary distribution of the Markov chain.
Time −T is known as a backward coupling time.
Forward coupling of sample paths does not yield the same result for reasons that we will
not go into here. For more information on perfect sampling algorithms, we refer the reader
to [5].

5.2 ε-Perfect Simulation for the Kac Model

We say that an algorithm is “ε-perfect” if the distance between the bounding processes
depicted in Figure 6 is monotonically decreasing and if this distance is less than ε at time
0. In this Section we will describe an ε-perfect algorithm for sampling from f (v,∞) that is
interesting mainly as a proof of concept for the approach that we hope will eventually be
adapted to and useful for more interesting models.

13

Figure 6: Depiction of stochastically dominating (bounding) processes in perfect simulation.

Consider, for the purpose of illustration, the case where we have only N = 3 particles.
2 +v2
1 +v2
Simulating iid velocities v1, v2, and v3 from f0(v) gives a kinetic energy E = v2
3. As
√
we propagate these 3 velocities forward in time, we create a realization of a 3-dimensional
Markov chain that lives on the surface of a 3-dimensional sphere with radius
E. For
the simple model considered in this paper, we can, without loss of generality, consider
the velocity vector as a random walk on the sphere restricted to the ﬁrst octant where
v1, v2, v3 > 0 and at the end of our simulation attach a negative sign to each velocity
independently of the others with probability 1/2.

For the purpose of achieving a coupling of sample paths walking on the sphere, we note
that vi cos θ + vj sin θ can be written as

vi cos θ + vj sin θ = A sin(θ + ϕ)

for some A and ϕ. In the case where vj = 0, we may take A = vi and ϕ = π/2. In the
case that vj (cid:54)= 0, we may take A =
j and ϕ = tan−1(vi/vj). Suppose that the
current position of the random walk is (v1, v2, v3) and that the particles randomly selected
3 and, since v2 is
for updating are indexed by (i, j) = (1, 2). Note then that A =
non-zero with probability 1, the new velocity for particle 1 is given by

E − v2

v2
i + v2

(12)
where θ ∼ unif(0, 2π) and ϕ = tan−1(v1/v2). Since θ + ϕ is uniformly distributed over an
interval of length 2π, the distribution of v(cid:48)
3 sin(θ).

1 in (12) is the same as that of

3 sin(θ + ϕ)

E − v2

v(cid:48)
1 =

E − v2

»

»

»
»

14

0−atime−bsample pathsbounding paths−TFigure 7: Visualization of sample paths of the “Perfect Kac Walk” on a sphere in the ﬁrst
octant.

»
»

Thus, we will update v1 as

v(cid:48)
1 =

E − v2

3 sin(θ)

(13)

(14)

where θ ∼ unif(0, 2π) and then v2 by setting

v(cid:48)
2 =

E − v2

3 − (v(cid:48)

1)2.

Four diﬀerent values for (v1, v2, v3) are visualized as points on the sphere in the ﬁrst octant
in Figure 7, as well as an angle θ drawn uniformly over (0, 2π). All four points, and indeed
all points on the entire surface, will map onto the depicted arc.

Suppose now that the next particles randomly selected for updating are indexed by (i, j) =
(3, 1). Given a new angle θ drawn uniformly over (0, 2π), the points on the arc from Figure
7 will map to the smaller arc segment depicted in Figure 8.

It is easy to see that if the same indices (in the same or diﬀerent order) are selected twice in
a row, the arc will maintain its length and move “laterally”. However, if at least one index
is diﬀerent from those in the previous step, it is easy to verify that the arc segment will,
necessarily, shrink in length. In other words, we will be mapping all points on the sphere
closer and closer together. Thus, the algorithm is closing in on a single point on the surface.
To formalize the ε-perfect sampling algorithm for general N , we will follow the N corner
points (cid:126)c1, (cid:126)c2, . . . , (cid:126)cN , where (cid:126)ci =

E (cid:126)ei and (cid:126)ei is the ith standard basis vector for RN .

√

ε-Perfect Algorithm

Set an error tolerance ε > 0 and set n = 1.
1. Simulate and store θ−n ∼ unif(0, π/2).

15

Figure 8: Arc from Figure 7 mapped to shorter arc.

(a) Previous arc with rotated axes

(b) New angle and arc mapped to smaller arc

Randomly select a pair of distinct indices from {1, 2, . . . , N} and store as a 2×1 vector
(cid:126)P−n with entries denoted as (cid:126)P−n(1) and (cid:126)P−n(2). (Order is important. For example
(cid:126)P−n = (3, 5) is diﬀerent from (cid:126)P−n = (5, 3).)
Set (cid:126)ci =
Let t = n.

√
E (cid:126)ei for i = 1, 2, . . . , N .

2. Let (cid:126)ci(j) denote the jth element of (cid:126)ci.

For i = 1, 2, . . . , N , let e = [ci(P−t(1))]2 + [ci(P−t(2))]2 and set

√

»

(cid:126)ci(P−t(1)) =

e sin θ−t

and

(cid:126)ci(P−t(2)) =

e − [(cid:126)ci(P−t(1))]2

If t = 1, go to Step 3. Otherwise, let t = t − 1 and return to the beginning of Step 2.

3. Compute the Euclidean distance between all pairs of corner points. Let D be the

maximum of these distances. If D < ε, compute the average corner point

n(cid:88)

i=1

(cid:126)ci,

(cid:126)c :=

1
N

multiply each coordinate of (cid:126)c by −1 with probability 1/2 independent of all other
coordinates, output the new (cid:126)c, and exit the algorithm. Otherwise, set n = n + 1 and
return to Step 1.

In practice, it is more eﬃcient, in the search for a backward coupling time, to step back
further than one step at a time. It is generally advised to let t = 2n in, what is in this case,

16

Figure 9: Histogram of 100, 000 draws of v1 Using the ε-perfect algorithm with N = 50 and
ε = 10−6.

Step 1 of the ε-perfect algorithm. For simplicity, we use the Euclidean distance between
corner points as a surrogate for arc length distance on the surface of the sphere since
convergence to zero of the former implies convergence to zero of the latter.

In Figure 9 we show the results for 100, 000 draws of v1 using the ε-perfect algorithm with
N = 50 and ε = 10−6 along with the curve given by (9). For this simulation run, the mean
backward coupling time was 948.2 with a minimum of 422 and a maximum of 1811.

6 Conclusions

In this paper we leveraged fundamental properties of the Poisson process to simulate values
drawn from the probability density function that is the solution to the Kac equation in
an eﬃcient way that avoids the tuning parameter ∆t that is necessary for the Nanbu and
Nanbu-Babovsky algorithms. Since our algorithm takes advantage of the fact that the
particle 1 velocity is unchanged after a point in (0, t), it expects to process a slightly lower
number of collisions than Bird’s DSMC algorithm. Furthermore, it appears to be performing
better at capturing the tails of the distribution than the DSMC algorithm. This is likely
due to the fact that we have a variable Poisson number of collisions in any time interval as
opposed to the constant expected value.

We also introduced, to our knowledge, the ﬁrst perfect sampling type algorithm to be
applied to the Kac model as a proof of concept that has the potential to be expanded

17

v1Density−6−4−202460.000.050.100.150.200.250.30to more interesting applications that are currently simulated using variants of the DSMC
algorithm. A truly perfect (ε = 0) algorithm using a minorization approach (as in [6]) is
possible but the increase in accuracy is not worth added complication, especially in light
of the fact that we can set ε in line with the maximum attainable computer dependent
precision.

References

[1] H. Babovsky and R. Illner. A convergence proof for Nanbu’s simulation method for

the full Boltzmann equation. SIAM J. Numer. Anal., 26:45–65, 1989.

[2] G.A. Bird. Molecular Gas Dynamics. Clarendon Press, Oxford, 1994.

[3] E. Carlen, M. Carvalho, and M. Loss. Kinetic theory and the Kac master equation.

Entropy & the Quantum II, Contemporary Mathematics, 552:1–20, 2011.

[4] E.A. Carlen, M.C. Carvalho, J. Le Roux, M. Loss, and C. Villani. Entropy and chaos

in the kac model. Kinetic and Related Models, 3(1):85–122, 2010.

[5] G. Casella, M. Lavine, and C.P. Robert. Explaining the perfect sampler. The American

Statistician, 55(4):299–305, 2001.

[6] J.N. Corcoran and R.L. Tweedie. Perfect sampling of ergodic Harris chains. Ann. App.

Prob., 11(2):438–451, 2001.

[7] M. Kac. Foundations of kinetic theory. In Proceedings of the Third Berkeley Symposium
on Mathematical Statistics and Probability, Volume 3: Contributions to Astronomy and
Physics, pages 171–197. University of California Press, Berkeley, California, 1956.

[8] M. Krook and T.T. Wu. Formation of Maxwellian tails. Physical Review Letters,

36(19):1107–1109, 1976.

[9] K. Nanbu. Direct simulation scheme derived from the Boltzmann equation. i. mono-

component gases. Journal of the Physical Society of Japan, 49(5):2042–2049, 1980.

[10] W. Wagner. A convergence proof for Bird’s direct simulation Monte Carlo method for

the Boltzmann equation. J. Statist. Phys., 66:1011–1044, 1992.

18

