6
1
0
2

 
r
a

 

M
1
1

 
 
]

Y
C
.
s
c
[
 
 

1
v
5
3
6
3
0

.

3
0
6
1
:
v
i
X
r
a

Powering the Internet of Things with RIOT:

Why? How? What is RIOT?

E. Baccelli∗ and K. Schleiser

The crucial importance of software platforms was highlighted by recent
events both at the political level (e.g. renewed calls for digital data and op-
erating system ”sovereignty”, following E. Snowden’s revelations) and at the
business level (e.g. Android generated a new industry worth tens of billions of
euros yearly). In the IoT, which is expected to generate business at very large
scale, while threatening even more individual privacy, such aspects will be ex-
acerbated. The need for an operating system like RIOT [1] [2] stems from this
context, as outlined in the following.

1 RIOT: Why?

Despite enormous expectations for the Internet of Things [3], there is so far no
de facto standard software platform to program most IoT devices, which are
constrained in resources such as CPU, memory, energy. IoT software platforms
thus face conﬂicting requirements : interoperability with the Internet, memory-
constrained embedded programming, and portable, open-source code. Such
limitations and requirements are expected to last [4], and make impossible the
use of traditional platforms such as Linux or derivatives, e.g. Android. In eﬀect,
the anticipated IoT industry depends on the emergence of standard software
platforms for IoT devices. In this context, it is vital that a strong alternative
emerges which can achieve the following goals:

• allow long-term IoT software security and robustness,

• enable trust, transparency and the protection of IoT users’ privacy,

• accelerate innovation by spreading IoT software development costs,

• reduce environmental impact by preventing IoT device lock-down.

∗Emmanuel Baccelli works for INRIA. He is hosted at FU Berlin for joint work on RIOT.

1

Experience over the last decades (for instance, with Linux) shows that such
goals are most likely achieved with a software platform that is:

• open source,

• free,

• driven by a grassroots community.

2 RIOT: How?

In order to achieve the goals listed above in Section 1, the RIOT community
gathers a large number of contributors [5] from around the world (with various
backgrounds including industry, academia, and hobbyists) and uses an approach
based on the following building blocks and principles.

The RIOT community self-organizes in oder to follow clearly deﬁned open
processes [6], which favor transparency, and code quality. Technically, the
RIOT community uses an open, online tool (GitHub [7]) allowing large-scale
distributed revision control and source code management. Furthermore, RIOT
code contribution processes mandate that the core of the software platform code
is free and licensed with a non-viral copyleft license (LGPLv2.1), which is ex-
pected to avoid as much as possible death-by-forking while allowing indirect
business models around RIOT (similar to business around Linux).

3 What is RIOT?

RIOT is an open source operating system which achieves the combination of (i)
the necessary memory and energy eﬃciency to ﬁt on the widest range of relevant
low-end IoT devices [8], while (ii) oﬀering the functionalities of a full-ﬂedged
operating system, i.e. full-featured, extensible network stacks providing sponta-
neous wireless networking and end-to-end Internet connectivity (e.g. from IoT
device to the cloud), as well a powerful API providing state-of-the-art develop-
ment and debugging tools, uniform and consistent across all supported hardware
spanning across 32-bit, 16-bit, and 8-bit architectures. For an technical overview
of competing IoT software platforms, one can refer to this survey [8].

From a technical perspective, in a nutshell, RIOT is an operating system based
on a micro-kernel architecture [9], with built-in energy eﬃciency and real-time
capabilities. RIOT enables full multi-threading as usually experienced on tra-
ditional operating systems (e.g. Linux) and oﬀers the capability to develop
eﬃcient IoT applications in standard programming languages (C and C++ ),
with tools that are well-known such as gcc, gdb, valgrind, wireshark etc. In-
stance(s) of RIOT can actually run as process(es) on Linux and Mac OS, and
this feature is heavily used for debugging and testing purposes. Such character-
istics eliminate most learning curves for embedded software design and shorten

2

development life-cycles for IoT products. For a third-party code analysis of the
RIOT code base, one can refer to [13].

On top of the aforementioned features, RIOT supports connectivity via sev-
eral network stacks. One stack (GNRC) oﬀers low-power IPv6 and 6LoWPAN
standard-compliant connectivity, with an extendable software architecture. In
particular, the modularity of GNRC enables eﬃcient plug-in of newer and up-
coming IoT protocols which go beyond the minimal compliant standard (e.g.
RPL extensions [10] [11]). Other stacks are available, including for instance an
experimental stack based on novel network paradigms currently studied by the
research community, such as content-centric networking [12].

Due to the characteristics described in this document, RIOT oﬀers an attractive
base for embedded IoT software development, may it be for industrial purposes,
for prototyping, for experimental research purposes, or for teaching in this do-
main – similarly to Linux in another domain.

References

[1] RIOT Website. Available online: http://www.riot-os.org

[2] E. Baccelli, O. Hahm, H. Petersen, and K. Schleiser. ”RIOT and the Evolu-
tion of IoT Operating Systems and Applications.” ERCIM News 2015, no.
101, April 2015.

[3] D. Evans, ”The Internet of Things : How the Next Evolution of the Internet

Is Changing Everything,” Cisco White Paper, 2011.

[4] L. Mirani, ”Chip-makers are Betting that Moore’s Law Won’t Matter in the

Internet of Things,” 2014. Available online: http://qz.com/218514

[5] List

Available
https://github.com/RIOT-OS/RIOT/graphs/contributors

contributors.

of

RIOT

online:

[6] RIOT

Community

Processes.

Available

online:

https://github.com/RIOT-OS/RIOT/wiki/RIOT-Community-Processes

[7] RIOT on GitHub. Available online: https://github.com/RIOT-OS/RIOT

[8] O. Hahm, E. Baccelli, H. Petersen, N. Tsiftes, ”Operating Systems for Low-
End Devices in the Internet of Things : a Survey,” in IEEE Internet of
Things Journal, Dec. 2015.

[9] E. Baccelli, O. Hahm, M. W¨ahlisch, M. G¨unes, T. Schmidt, ”RIOT OS:
Towards an OS for the Internet of Things,” in Proceedings of IEEE INFO-
COM, Demo/Poster for the 32nd IEEE International Conference on Com-
puter Communications, Turin, Italy, April 2013.

3

[10] RFC 6997 : M. Goyal, E. Baccelli, M. Philipp, J. Martocci, A. Brandt,
”Reactive Discovery of Point-to-Point Routes in Low Power and Lossy Net-
works,” IETF Internet Draft, August 2013.

[11] E. Baccelli, M. Philipp, M. Goyal, ”The P2P-RPL Routing Protocol for
IPv6 Sensor Networks : Testbed Experiments,” Proceedings of the IEEE
International Conference on Software Telecommunications and Computer
Networks (SOFTCOM), Split, Croatia, September 2011.

[12] E. Baccelli, C. Mehlis, O. Hahm, T. C. Schmidt, and M. W¨ahlisch ”Infor-
mation Centric Networking in the IoT: Experiments with NDN in the Wild,”
in Proceeding. of ACM SIGCOMM ICN, the ﬁrst ACM international Con-
ference on Information-Centric Networking, Paris, Sept. 2014.

[13] BlackDuck Open Hub code analysis of RIOT. Available online:

https://www.openhub.net/p/RIOT-OS

4

