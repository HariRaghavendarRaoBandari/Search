Computing the Approximate Convex Hull in High Dimensions

Hossein Sartipizadeha,∗, Tyrone L. Vincenta

aElectrical Engineering and Computer Science, Colorado School of Mines, Golden, CO 80401

6
1
0
2

 
r
a

M
8

 

 
 
]

G
C
.
s
c
[
 
 

1
v
2
2
4
4
0

.

3
0
6
1
:
v
i
X
r
a

Abstract
In this paper, an eﬀective method with time complexity of O(K3/2N2 log K
) is introduced to ﬁnd an approximation of
the convex hull for N points in dimension n, where K is close to the number of vertices of the approximation. Since the
time complexity is independent of dimension, this method is highly suitable for the data in high dimensions. Utilizing
a greedy approach, the proposed method attempts to ﬁnd the best approximate convex hull for a given number of
vertices. The approximate convex hull can be a helpful substitute for the exact convex hull for on-line processes and
applications that have a favorable trade oﬀ between accuracy and parsimony.

ǫ0

Keywords: Convex hull, Approximate convex hull, High dimensions, Greedy algorithms.

1. Introduction

The convex hull of a set of points in Rn is the smallest
convex set which contains all the points. This concept
is widely used in diﬀerent ﬁelds including data search-
ing and signal processing, clustering, image processing,
modeling and robust control [1], collision detection, and
urban planning.

Many algorithms have been developed to ﬁnd the
convex hull of a set of points. Some of the ﬁrst eﬃ-
cient algorithms were Graham’s scan method [2] and
the gift wrapping algorithm [3, 4]. For a set of N points
these algorithms have O(N log N) worst case run time
for low dimensions (n = 2 or 3) which is the same or-
der as the optimal algorithm. These were followed by
many others; a survey can be found in [5]. The focus
on low dimensions is well motivated by many applica-
tions in computational geometry, image processing and
computer vision. However, there are also signiﬁcant ap-
plications in higher dimensions.

For higher dimensions, standard methods are the
method of Clarkson and Shor [6] and the Quickhull al-
gorithm [7], which have worst case time complexity in
high dimensions of O(N⌊n/2⌋). The time complexity of
these algorithms are also closely related to the repre-
sentational complexity of the convex hull. For a set of
points, the convex hull is a polytope, and could be rep-
resented by the facets, or by the vertices. For a set of

∗Corresponding author: Tel.: +1 7204994943
Email addresses: hsartipi@mines.edu (Hossein Sartipizadeh

), tvincent@mines.edu (Tyrone L. Vincent )

N random data in n dimensions, the expected number of
vertices is O(logn−1 N) [8], thus even in the average case
the representational complexity increases exponentially
in the dimension n.

This explosion of complexity in higher dimensions
can detrimental not only to ﬁnding the convex hull, but
in using it, as algorithms that use the convex hull as
input may require processing each element of the rep-
resentation. This gives double motivation for working
with an approximate convex hull that covers almost the
same space as the true convex hull, but with a reduced
representational complexity. First, in order to reduce the
computational complexity of ﬁnding it, and second the
computational burden of using it.

The search for an approximate convex hull was ap-
parently ﬁrst considered by Bentley in 1982 [9]. This
method used sampling within a grid to achieve a worst
case time complexity of O(N⌊n/2⌋ + (1/ǫ)n−1N), where ǫ
is the maximum error. An approach that uses a grid over
angles in polar coordinates was later proposed by [10]
with a time complexity of O((1/ǫ)n−1N). Although pro-
viding a trade-oﬀ between run time and accuracy, un-
fortunately in both of these methods also have an expo-
nential dependence on dimension.

In order to tackle convex sets in high dimensions,
[11] introduced a useful norm based method to com-
pute the convex hull, with a stated time complexity of
O(Nn4). This method was further extended in [12]. This
method could also be modiﬁed to determine an approx-
imate convex hull, although it has not been speciﬁcally
designed for this purpose. Two drawbacks are that this

March 15, 2016

method does not explicitly consider the quality of the
approximation as new vertices are found, and that it
uses a fairly large number of vertices for initialization.
Based on the initialization approach presented in [11],
this method begins with a n-simplex with n + 1 vertices
and therefore is not able to ﬁnd an optimal approxima-
tion with less number of vertices. This would be an is-
sue, for example, in cases when the data closely fol-
lows a low dimensional hyperplane in a higher dimen-
sion. Moreover, a sparse modeling method for ﬁnding
the convex hull is introduced in [13] which can also be
utilized for ﬁnding an approximate convex hull. The
time complexity of the method is experimentally about
N5.

In this work, we present a method for ﬁnding an ap-
proximate convex hull for which the time complexity is
O(K3/2N2 log K) where K is the number of iterations of
the proposed algorithm and is close to V, the number of
vertices of the approximate convex hull, which is usu-
ally signiﬁcantly smaller than N. While much slower
than existing methods for low dimensions, it is quite
feasible to apply even in very high dimensions where
methods with an exponential dependence on dimension
would not even be able to run.

2. Notation

R is the set of real numbers, with Rn a length n vector
of real numbers. For x ∈ Rn, kxk is the Euclidian norm.
Given a set S ⊂ Rn, |S| is the number of elements in
S, ConvS is the convex hull of S and S\E is the set
obtained by removing the elements in E from S. Let
PV(S) be the set of all subsets of S with cardinality V
or less.

3. The Approximate Convex Hull

Our focus will be to ﬁnd the vertices of the polytope
that will deﬁne the convex hull. It is easy to show that
these are the extreme points of the set.
Deﬁnition 1. Given a ﬁnite set S = {x1, . . . , xN} of N
unique points in Rn, the point xi is an extreme point of
S if it cannot be represented as a convex combination of
points from the set S\xi.

The extreme points represent the convex hull in the
sense that if E is the set of extreme points of S then
ConvE = ConvS.
A key basic operation that we will utilize not only to
deﬁne the approximate convex hull but in our algorithm
is to determine the Euclidean distance of a point z ∈ Rn

2

to ConvS. This function is represented as d(z, S), and
its square can be computed via the quadratic program

d(z, S)2 = min

αi

(cid:13)(cid:13)(cid:13)(cid:13)
z − P|S|

i=1 αixi
s. t. αi ≥ 0, P|S|

(cid:13)(cid:13)(cid:13)(cid:13)
i=1 αi = 1

2

(1)

Note that x ∈ ConvS if and only if d(x, S) = 0.
This QP problem can be solved using the interior
point method [14]. A signiﬁcant property of the interior
point method applied to this problem is that the num-
ber of iterations required to reach the optimal solution
is independent of n, the dimension of xi, but rather is de-
pendent on |S|, which is the number of variables. In [15]
it is shown that the number of iterations of the interior
point method for solving a QP with r independent vari-
ables is of order O( √r log r
) where ǫ0 is the accuracy
precision of the interior point method. The complex-
ity of this problem will also be investigated empirically
later.

ǫ0

Since the computational complexity depends on |S|, it
is useful for the size of this set to be as small as possible.
Fortunately, it is clear that if we have available another
set E (such as the extreme points) such that ConvE =
ConvS, then d(z, E) = d(z, S), and one can use E for
the calculation instead. Finally, we note that the extreme
points are the smallest subset E ⊆ S such that d(z, E) =
d(z, S) for all z ∈ Rn.
The fact that the extreme points are the smallest sub-
set has a very practical importance in applications that
use the convex hull as input, and require computations
to be performed on each element of E. Unfortunately,
as discussed in the introduction, the number of extreme
points tends to greatly increase in high dimension.

Our objective is to allow for a trade-oﬀ between the
complexity of the representation of ConvS and its ac-
curacy. A subset E ⊆ S would be a completely accurate
representation if d(x, E) = 0 for all x ∈ ConvS. For an
approximate representation we will relax the distance to
be less than ǫ > 0. Speciﬁcally, we have the following
deﬁnition .

Deﬁnition 2. An ǫ-approximate convex hull of S is the
convex hull of a minimal subset E ⊆ S such that for all
z ∈ S, d(z, E) ≤ ǫ.

Note that we are not guaranteed uniqueness, in that
there may be multiple E with the same number of ele-
ments, satisfying the distance requirements. However,
as ǫ increases, the size of a minimal representation, E,
may be able to decrease.

4. Finding the Approximate Convex Hull

The quality of an approximate convex hull with ver-
tices E is deﬁned by both ǫ and |E|, the number of ver-
tices. Thus there is a Pareto front of optimal solutions.
To explore this front, one could either minimize ǫ for
a ﬁxed number of vertices or minimize the number of
vertices for a ﬁxed error ǫ; we will focus on the for-
mer problem. We formulate the following optimization
problem to ﬁnd the approximate convex hull: ﬁnd the
subset of S of cardinality V or less which minimizes
worst case distance of a point in S to the convex hull of
the subset, which is notated as

min
E∈PV (S)

max
z∈S

d(z, E).

Unfortunately, this is a combinatorial optimization, re-
quiring a search over each element of PV(S). In order
to achieve an acceptable performance, we will introduce
a greedy method that will provide a suboptimal solu-
tion. However, this method will still be able to achieve
any desired ǫ performance, although with a potentially
larger cardinality than optimal.

4.1. Basic Greedy Algorithm

The greedy algorithm ﬁnds each element of E sequen-
tially. That is, suppose at step k, we have identiﬁed a set
Ek with |Ek| = k. We then ﬁnd
max
z∈S\Ek

ˆx = arg min
x∈S\Ek

d(z, Ek ∪ x),

(2)

and set Ek+1 = Ek ∪ ˆx. This method initiates with
the empty set and terminates either after a ﬁxed num-
ber of steps k, or after the desired ǫ has been reached.
This optimization problem can be solved by searching
over all elements of S\E for the outer minimization (as
well as over all elements of S\E in the inner maximiza-
tion). While this implies a time complexity of O(VN2)
to reach a cardinality of V, this is a vast improvement
to searching over PV(S). In addition, we will introduce
methods that can reduce the search space as the itera-
tions progress.

4.2. Improved Greedy Algorithm

In this section, two strategies are utilized to speed up
the basic greedy method introduced in 4.1. First, the
solution to (2) is explored in more detail and a search-
ing method is introduced to reduce the required time of
solving (2). Also, we ﬁnd and remove elements of S
that are interior points of Ek during processing.

j

i

1

2

3

4

1

5

1

0

6

2

1

5

2

7

3

2

1

2

4

4

5

2

5

0

Figure 1: Illustrative example: Matrix E

4.2.1. Directed Search

Let zi and x j be enumerations of S\Ek. Let E be a

matrix with i, jth element given by

Ei, j = d(zi, Ek ∪ x j)

The solution to (2) can then be obtained by solving

ˆj = arg min
j

max

i

Ei, j

and setting ˆx = x ˆj. In other words, the maximum value
of each column of E is evaluated, and then minimum
among those maximums is found. However, creating E
requires N2 evaluations of the distance function d.

Improvement can be obtained by searching for the
optimal element in a more systematic way. To explain
this method, an illustrative example is given. Let N = 4
and suppose this is the ﬁrst iteration, and therefore E is a
square matrix with 16 elements. Suppose E is populated
with the given numbers in Figure 1. The maximum of
the columns are 6, 7, 4, and 5. The minimum of these is
4 and therefore min j maxi E = 4 and ˆj = 3.

Instead of computing all elements of E, we can cal-
culate only those that are necessary. The key observa-
tion is that the maximum of any subset of element in a
column provides a lower bound on the maximum over
the entire column. In the given example, suppose only
the elements in grey are evaluated. All of the elements
of the third column have been evaluated, thus the maxi-
mum over this column is known to be 4. For the remain-
ing columns, since elements in each column have been
evaluated that are greater than 4, the maximum for these
columns must be greater than 4. Thus, it is clear that
min j maxi Ei, j must occur for the third column, without
having to evaluate the remaining elements. We use this
property to develop the following method:

1. Calculate the ﬁrst row of E.

3

2. Find the minimum value of the ﬁrst row and select
the corresponding column as the potential candi-
date for ˆj.

3. Compute the next element of that column and re-
evaluate which column has the smallest maximum.
Set that column as the new potential candidate. If
two columns have the same maximum, select one
at random.

4. Continue until all elements of one of the columns
has been found and its maximum is less than or
equal to the maximum of the other columns over
the computed elements. In this case, ˆj is the in-
dex of that column and the optimal value ˆǫ is the
maximum value of that column.

elements, although it can be N2 for the worst case.

In the best case this only requires computing 2N − 1
This method is implemented in Algorithm 1. This
implementation stores the current maximum for each
column in the vector ˜E ∈ Rn, along the row index of
currently evaluated elements for each column in vector
˜E is set to the ﬁrst row of E at the beginning
˜C ∈ Rn.
and ˜C to vector 1 which indicates that one element of
each column has been computed. Then in each step, the
next element of the column with the minimum value is
computed. If the new element is greater than the pre-
vious value, it is saved as the greatest value in ˜E. The
procedure is continued until the counter shows that we
have calculated all elements of a column and its corre-
sponding element in ˜E is still the minimum of ˜E.

Algorithm 1 Finding min max of a matrix
1: Input: S, E, N = |S\E|
2: Calculate the ﬁrst row of E.
3: Set ˜E to the ﬁrst row of E and ˜C to 11×N.
4: Find the minimum of ˜E and indicate its index with

˜E and indicate its index

ˆj.
˜C ˆj = ˜C ˆj + 1.

6: while max ˜C ≤ N do

5:

7:

8:

9:

Calculate E ˜C ˆj , ˆj.
Set ˜E ˆj to max( ˜E ˆj, E ˜C ˆj, ˆj).
Find the minimum of
with ˆj.
˜C ˆj = ˜C ˆj + 1.

10:
11: end while
12: ˆǫ = ˜E ˆj
13: Output: ˆj, ˆǫ

4.2.2. Interior Points

The algorithm can be improved by ﬁnding and elimi-

nating interior points from consideration.
Deﬁnition 3. z ∈ S\Ek+1 is an interior point of
ConvEk+1 if d(z, Ek+1) = 0.

k

k

It can be shown that interior points could be removed
from S as the iterations progress without any changes
in the calculated approximate convex hull.
Since Ei, j = d(zi, Ek ∪ x j), the interior points of Ek+1
can be found via zeros in the ˆj-th column of E. Let Itot
be the set of interior points of Ek, which have been iden-
tiﬁed at prior steps. At iteration k, the directed search
is performed over (S\Itot
k )\Ek, and from this the inte-
rior points of Ek from S\Itot
are identiﬁed from ze-
ros in the ˆj-th column, and placed in set Ik. The set
Itot
k ∪ Ik is deﬁned, and the next iteration is per-
formed. This approach signiﬁcantly decreases the com-
putational time since in each step we remove some of
the points for the further processing. It also guarantees
that the algorithm acts as preferred and at step k + 1 will
not choose an interior point of Ek+1 as the next element
of the approximate convex hull.
In addition, it may be that elements of Ek0 become
interior points of Ek for some k > k0. These points can
be removed either at the end of each iteration, or at the
completion of the algorithm. This reduces the cardinal-
ity of the returned vertex set, which is desirable.

= Itot

k+1

4.2.3. Initialization

In the ﬁrst iteration of the greedy method (k = 1) (2)
returns the element closest to the center mass of set S
which is the best approximation when we want to de-
scribe set S only by one element (V = 1). However,
since we aim to cover the space as much as we can,
for V > 1 it is better to start from an extreme point of
ConvS. We use the following result to select an extreme
point of S as E1.
Theorem 1. Let S to be a set of N points in n dimen-
sion. Any element of S which has a minimum or max-
imum in one of the dimensions, is an extreme point of
ConvS.

5. Summary

In this work, an eﬀective algorithm with time com-
plexity of O(K3/2N2 log K
) was proposed to compute
the approximate convex hull of a data set with N points
in n dimension. K, the number of iterations of the
greedy method, is close to V, the number of vertices

ǫ0

4

[8] Rex Allen Dwyer. Average-case Analysis of Algorithms for Con-
vex Hulls and Voronoi Diagrams. PhD thesis, Pittsburgh, PA,
USA, 1988. Order No. GAX88-17713.

[9] Jon Louis Bentley, Franco P. Preparata, and Mark G. Faust.
Approximation algorithms for convex hulls. Commun. ACM,
25(1):64–68, January 1982.

[10] Zong-Ben Xu, Jiang-She Zhang, and Yiu-Wing Leung. An
approximate algorithm for computing multidimensional convex
hulls. Applied Mathematics and Computation, 94(2):193 – 226,
1998.

[11] Di Wang, Hong Qiao, Bo Zhang, and Min Wang. Online sup-
port vector machine based on convex hull vertices selection.
Neural Networks and Learning Systems, IEEE Transactions on,
24(4):593–609, April 2013.

[12] H.R. Khosravani, A.E. Ruano, and P.M. Ferreira. A simple al-
gorithm for convex hull determination in high dimensions.
In
Intelligent Signal Processing (WISP), 2013 IEEE 8th Interna-
tional Symposium on, pages 109–114, Sept 2013.

[13] Ehsan Elhamifar, Guillermo Sapiro, and Rene Vidal. See all
by looking at a few: Sparse modeling for ﬁnding representative
objects. In Computer Vision and Pattern Recognition (CVPR),
2012 IEEE Conference on, pages 1600–1607. IEEE, 2012.

[14] Stephen Boyd. Convex Optimization. Cambridge University

Press, 2004.

[15] Xinzhong Cai, Guoqiang Wang, and Zihou Zhang. Complexity
analysis and numerical implementation of primal-dual interior-
point methods for convex quadratic optimization based on a ﬁ-
nite barrier. Numerical Algorithms, 62(2):289–306, 2013.

Algorithm 2 Approximate Convex Hull
1: Input: S = {xi}N
i=1, V, ǫdes
2: Initialize E and S′ = S.
3: while |E| < V and ǫ > ǫdes do

for xi ∈ S′\E and z j ∈ S′\E do

Find ˆj and ǫ by Algorithm 1 where ˆj =
arg min j maxi d(zi, E ∪ x j).
Using Ei, ˆj calculated in the last step, Find Ik
so that if d(zi, E ∪ x ˆj) = 0 then zi ∈ Ik.

4:
5:

6:

end for
7:
S′ = S′\Ik, E = E ∪ x ˆj;
8:
for c = 1 to |E| , c + + do
9:
if d(E(c), E) = 0 then
10:
11:
end if
12:
end for
13:
14: end while
15: Output: E, ǫ

E\E(c);

of the approximate convex hull. According to the time
complexity, this method is highly suitable for the data in
high dimensions unlike the family of quick-hull meth-
ods. The proposed algorithm uses a greedy method to
attempt to ﬁnd the best approximation to the convex hull
for a given number of vertices.

Acknowledgment

This work was supported by ONR grant N00014-12-

1-0201.

References

[1] Hossein Sartipizadeh and Tyrone L. Vincent. Uncertainty char-
acterization for robust mpc using an approximate convex hull
method. In American Control Conference, 2016.

[2] R.L. Graham. An eﬃcient algorithm for determining the con-
vex hull of a ﬁnite planar set. Information Processing Letters,
1(4):132 – 133, 1972.

[3] Donald R Chand and Sham S Kapur. An algorithm for convex

polytopes. Journal of the ACM (JACM), 17(1):78–86, 1970.

[4] R.A. Jarvis. On the identiﬁcation of the convex hull of a ﬁnite set
of points in the plane. Information Processing Letters, 2(1):18
– 21, 1973.

[5] T. Ebert, J. Belz, and O. Nelles.

Interpolation and extrapola-
tion: Comparison of deﬁnitions and survey of algorithms for
convex and concave hulls.
In Computational Intelligence and
Data Mining (CIDM), 2014 IEEE Symposium on, pages 310–
314, Dec 2014.

[6] Kenneth L. Clarkson and Peter W. Shor. Applications of random
sampling in computational geometry, ii. Discrete & Computa-
tional Geometry, 4(1):387–421, 1989.

[7] C. Bradford Barber, David P. Dobkin, and Hannu Huhdanpaa.
The quickhull algorithm for convex hulls. ACM Trans. Math.
Softw., 22(4):469–483, December 1996.

5

