6
1
0
2

 
r
a

 

M
4
1

 
 
]
S
D
.
s
c
[
 
 

1
v
1
5
4
4
0

.

3
0
6
1
:
v
i
X
r
a

The Quadratic Minimum Spanning Tree Problem and its Variations

Ante ´Custi´c∗

Ruonan Zhang†

Abraham P. Punnen‡

March 16, 2016

Abstract

The quadratic minimum spanning tree problem and its variations such as the quadratic bottleneck
spanning tree problem, the minimum spanning tree problem with conﬂict pair constraints, and the
bottleneck spanning tree problem with conﬂict pair constraints are useful in modeling various real life
applications. All these problems are known to be NP-hard. In this paper, we investigate these problems
to obtain additional insights into the structure of the problems and to identify possible demarcation
between easy and hard special cases. New polynomially solvable cases have been identiﬁed, as well as
NP-hard instances on very simple graphs. As a byproduct, we have a recursive formula for counting the
number of spanning trees on a (k, n)-accordion and a characterization of matroids in the context of a
quadratic objective function.

Keywords: Quadratic spanning tree; complexity; tree enumeration; sparse graphs; row graded matrix;
matroids.

1 Introduction

Let G = (V, E) be an undirected graph with |E| = m. Costs ce and q(f, g) are given for each edge e ∈ E
and each pair of edges f, g ∈ E, f (cid:54)= g, respectively. Then the quadratic minimum spanning tree problem
(QMST) is formulated as follows:

Minimize z(T ) = (cid:80)

(cid:80)

q(e, f ) + (cid:80)

e∈T

f∈T
f(cid:54)=e

ce

e∈T

Subject to

T ∈ F,

where F is the family of all spanning trees of G. The associated cost matrix Qm×m have its (i, j)-th entry
as q(i, j) when i (cid:54)= j, and as ci when i = j.
The QMST can be viewed as a generalization of many well known optimization problems such as the
travelling salesman problem, the quadratic assignment problem, the maximum clique problem etc., and it can
be used in modeling various real life application areas such as telecommunication, transportation, irrigation
energy distribution, and so on. The problem was introduced by Assad and Xu [2], along with its special
case - the adjacent-only quadratic minimum spanning tree problem (AQMST), in which q(e, f ) = 0 if e and
f are not adjacent. The strong NP-hardness of both the QMST and AQMST was proved in [2] along with
ideas for solving the problem using exact and heuristic algorithms. The broad applications base and inherent
complexity of the QMST makes it an interesting topic for further research. Most of the works on QMST
∗acustic@sfu.ca. Department of Mathematics, Simon Fraser University Surrey, 250-13450 102nd AV, Surrey, British
†ruonan.zhang@xjtlu.edu.cn. Department of Mathematical Sciences, Xi’an Jiaotong-Liverpool University, 111 Ren’ai Road,
‡apunnen@sfu.ca. Department of Mathematics, Simon Fraser University Surrey, 250-13450 102nd AV, Surrey, British

Suzhou, Jiangsu, 215123, China

Columbia, V3T 0A3, Canada

Columbia, V3T 0A3, Canada

1

[4, 9, 13, 17–19, 24, 25, 28]. ´Custi´c and Punnen [5] provided a
have been focussed on heuristic algorithms
characterization QMST instances that can be solved as a minimum spanning tree problem. Exact algorithm
for AQMST and QMST was studied by Pereira, Gendreau, and Cunha [2, 19–21]. A special case of QMST
with one quadratic term was studied by Buchheim and Klein [3], A. Fischer and F. Fischer [8].

There are many other problems which have been studied in the literature, that are closely related to the
QMST in terms of formulation and applications. We list below some of these variations of QMST that we
investigate in this paper.

The minimum spanning tree problem with conﬂict pairs (MSTC) [6, 7, 27]: Given a graph G with edge
costs ce and a set S ⊆ {{e, f} ⊆ E : e (cid:54)= f}, the MSTC is to ﬁnd a spanning tree of G such that the tree
cost is minimized and for each edge pair {e, f} in S, at most one of them is included in the tree. The
feasibility problem of the MSTC, denoted by FSTC, is the problem of ﬁnding a feasible solution of the
MSTC, regardless of the costs. Given an FSTC instance, we construct a QMST on the same graph with

(cid:40)

q(e, f ) =

1
0

if {e, f} ∈ S
otherwise.

Then the FSTC instance is feasible if and only if the above QMST has the optimal objective function value
0. Therefore, the FSTC reduces to the QMST.

The quadratic bottleneck spanning tree problem (QBST): By replacing the objective function of the
QMST with max{q(e, f ) : e, f ∈ T}, we obtain the QBST. The problem is introduced in [26] and shown to
be NP-hard even on a bipartite graph with 0-1 q(e, f ) values. FQBST, the feasibility version of the QBST, is
q(e, f ) ≤ µ?”. As the
described as “Given a value µ, does there exist a spanning tree T of G such that max
e,f∈T
FQBST is equivalent to the FSTC, [26] develops heuristic algorithms for the QBST using MSTC heuristics
as subroutines.

The bottleneck spanning tree problem with conﬂict pairs (BSTC): Similar to the relation between the
QBST and the QMST, the BSTC is deﬁned by substituting the “min-sum” objective function in the MSTC
with a “min-max” objective function.

Furthermore, we deﬁne the “adjacent-only counterparts” for the above problems: AQBST, in which
q(e, f ) = 0 if e and f are not adjacent in the graph G; MSTAC, FSTAC, BSTAC, where the edges in the
conﬂict pairs are all restricted to be adjacent.

Even though the above problems are all proved to be NP-hard in general, exploring nicely solvable
special cases provide additional insights into the structure of these problems and opportunities for developing
eﬀective heuristics [1,16]. The primary research question we focus in this paper is: To what extend the QMST
and its variations would retain its NP-hardness status, or become amenable for polynomial time solvability?
We consider restricting the structure of the graph G and that of the cost matrix Q to identify possible
demarkation between easy and hard instances.

The rest of the paper is organized as follows: Section 2 introduces the sparse graphs that we are inves-
tigating. These include fans, fan-stars, ladders, wheels and their generalizations, (k, n)-ladders and (k, n)-
accordions. A recursive formula is derived to count the number of spanning trees of a (k, n)-accordion, which
generalizes the well known sparring tree counting formulas for fans and ladders. In Section 3 we study the
complexity of QMST and its variations on these sparse graphs. It is shown that the problems are NP-hard,
except in the case of AQBST, MSTAC, BSTAC and AQBST on (k, n)-ladders and for these cases, we provide
O(kn) time algorithms. The problems on a general graph G but with specially structured cost matrices are
discussed in Section 4. In particular, we show that when Q is a permuted doubly graded matrix, QMST and
QBST are solvable in polynomial time. In this case the optimal solution value attains the Assad-Xu lower
bound [2]. This result is extended to the case of matroid bases and it provides a new characterization of
matroids.

We use the notations V (G) and E(G) to denote, respectively, the node and edge sets of a graph G. The

quadratic costs q(ei, ej) for the edge-pair (ei, ej) is sometimes denoted by q(i, j) for simplicity.

2

2 The (k, n)-accordion and the number of spanning trees

In this section we deﬁne the classes of graphs called (k, n)-ladders and (k, n)-accordions and study QMST
and its variations on these graphs. We also study the number of spanning trees on such graphs, that is, the
number of feasible solutions of the corresponding QMST.

Figure 1: A fan F6, a wheel W6 and a fan-star F S9

Given a path Pn = v1− v2−···− vn, a fan (Fn) is obtained by introducing a new node u and edges (u, vi)
for i = 1, 2, . . . , n. If we add one more edge (v1, vn) to Fn, the resulting graph is called a wheel, denoted
by Wn. When n = 3k, deleting the edges (v3i, v3i+1), i = 1, . . . , k − 1, from Fn results in a fan-star (F Sn).
Examples of a fan, a wheel and a fan-star are presented in Figure 1.
n = u1 − u2 −···− un be two node-disjoint paths. Add n edges (vi, ui),

n = v1 − v2 −···− vn and P 2

i = 1, . . . , n, and the resulting graph is called a ladder (Ln), see Figure 2.

Let P 1

Figure 2: A ladder Ln

Let us now deﬁne a class of graphs that generalizes both fans and ladders. Given integers k ≥ 3 and
n ≥ 1, a (k, n)-accordion is a graph A that can be obtained by recursively fusing together n node-disjoint
k-cycles C k
n along an edge so that in the resulting graph, only two consecutive cycles have an
edge in common. More precisely, a (k, n)-accordion is a graph constructed using the following rules:

2 , . . . , C k

1 , C k

(i) Initialize the graph A1 as the k-cycle C k

1 . Embed A1 on the plane and designate all its edges as free

edges.

(ii) For i = 2 to n deﬁne Ai as follows: Choose a free edge (r, s) of Ai−1. Introduce a k-cycle, say C k

i to
Ai−1 using the edge (r, s) and k − 2 new nodes so that we get a planar embedding of the resulting
graph Ai. Designate any edge incident to a new node of Ai as a free edge.

Every so obtained graph An is a (k, n)-accordion, and the set of all (k, n)-accordions is denoted by A(k, n).
Figure 3 presents examples from A(5, 7) and A(4, 9).

Let us now deﬁne a subclass of A(k, n) which we call (k, n)-ladders. It is deﬁned the same way as (k, n)-
accordions, except that in the construction scheme for a (k, n)-ladder, we designate an edge as ‘free’ if both
its end points are the new nodes introduced. (Note that for the construction of a (k, n)-accordion, an edge
is designated as free if at least one of its end points is a new node.) We denote by L(k, n) the set of all
(k, n)-ladders.

3

v5v4v3v2v1v6v5v4v3v2v1v9v8v7v6v5v4v1v2v3v6·········vi+1unvnviui+1uiu3u2···v1v2v3u1(a)

(b)

Figure 3: Examples of (5, 7)-accordion and (4, 9)-accordion

Note that the (5, 7)-accordion in Figure 3(a) is also a (5, 7)-ladder, while the (4, 9)-accordion in Figure 3(b)
is not a (4, 9)-ladder. It is easy to verify that a fan is a (3, n)-accordion but not a (3, n)-ladder, and Ln is a
(4, n)-ladder and it is unique.

The formulas for counting the number of spanning trees of Fn and Ln are already known [12,23]. Now we
generalize these results by deriving a formula for counting the number of spanning trees in (k, n)-accordions
and (k, n)-ladders.

Let τ (G) be the number of spanning trees of a graph G. Then for any e ∈ E(G) the following property

holds.
Lemma 1. τ (G) = τ (T − e) + τ (G/e), where G − e is the graph obtained by deleting e from G, and G/e is
obtained by coalescing the endpoints of e.

The proof is straightforward due to the fact that the total number of spanning trees in G is the number

of spanning trees that contain e, plus the number of spanning trees without e.

A recursive formula for the number of spanning trees of a (k, n)-accordion is given in the following

theorem.

Theorem 2. Every (k, n)-accordion has the same number of spanning trees. If we denote this number by
τ (A(k, n)), then for every integers k ≥ 3, n ≥ 3

τ (A(k, n)) = k · τ (A(k, n − 1)) − τ (A(k, n − 2)).

(1)

n−2. An edge e in A is called a ‘free edge’ if e ∈ C k

Proof. Let A be a (k, n)-accordion generated by k-cycles C k
n. Similarly let B and C be the cor-
responding (k, n − 1) and (k, n − 2)-accordions generated respectively by the k-cycles C k
n−1 and
1 , . . . , C k
C k
n−1. Likewise, an edge e in B is
n−2. Let A1 be the graph obtained by contracting a free edge of A
called a ‘free edge’ if e ∈ C k
and B1 be the graph obtained by contracting a free edge of B. If e is a free edge of B then τ (B − e) = τ (C).
Thus from Lemma 1,
(2)

n−1 and e /∈ C k

τ (B) = τ (C) + τ (B1).

i , . . . , C k

n and e /∈ C k

1 , . . . , C k

n and C k

Note that any spanning tree of A either contains all free edges or does not contain exactly one free edge.
Further, any spanning tree that contains all free edges does not contain the edge e∗ which is common to
n−1. Then the graph obtained from A by deleting e∗ and then contracting the path of free
both C k
edges is isomorphic to B1. Since A contains k − 1 free edges, we have
τ (A) = (k − 1)τ (B) + τ (B1).

(3)

4

C57C55C54C53C52C51C56C49C47C46C45C44C43C42C41C48τ (A(3, n)) =

1
√5

3 + √5

2

3 − √5

2

−

(cid:32)


(cid:26)(cid:16)

√3
6

(cid:33)n+1

(cid:17)n+1

(cid:32)

(cid:16)

(cid:33)n+1 .
(cid:17)n+1(cid:27)

.

(5)

(6)

From (2) and (3) we have

(4)
Recall that A is an arbitrary (k, n)-accordion with n ≥ 3, and B, C depend on A, and are (k, n−1)-accordion
and (k, n − 2)-accordion, respectively. Note that there is only one (k, 1)-accordion and all (k, 2)-accordions
are isomorphic. Hence, for a ﬁxed k and n ≤ 2, every (k, n)-accordion has the same number of spanning
trees. Then from recursion (4) it follows that for every ﬁxed k ≥ 3 and n ≥ 1, the number of spanning trees
for any (k, n)-accordion is the same, and hence its recursive formula is given by (1).

τ (A) = kτ (B) − τ (C).

Theorem 2 gives an implicit formula for the number of spanning trees on general (k, n)-accordions. In
the case k = 3, it gives us τ (A(3, n)) = 3· τ (A(3, n− 1))− τ (A(3, n− 2)). By solving the recursion we obtain

When k = 4, τ (A(4, n)) = 4 · τ (A(3, n − 1)) − τ (A(4, n − 2)), from which it follows that

τ (A(4, n)) =

2 + √3

√3

2 −

−

Formulas (5) and (6) are consistent with the known spanning tree enumeration formulas for fans and lad-
ders [12,23], moreover, they generalize them. Furthermore, Theorem 2 can be used to deduce explicit formulas
for the (k, n)-accordions for any ﬁxed k. Since every element of A(k, n) contains an exponential number of
spanning trees, solving the QMST and its variations on this class of graphs by complete enumeration would
be computationally expensive.

3 Complexity of the QMST variations on some sparse graphs

We now investigate the complexity of the QMST and its variations on the sparse graphs discussed in Section 2.

3.1 Intractability results

Recall from Section 1 that FSTAC is the feasibility version of the adjacent only minimum spanning tree
problem with conﬂict pair constraints.

Theorem 3. The FSTAC on fan-stars is NP-complete.

Proof. We reduce the 3-SAT problem to the FSTAC on the fan star F Sn.

Let s = (x11∨x12∨x13)∧(x21∨x22∨x23)∧···∧(xn1∨xn2∨xn3), be an instance of 3-SAT given in conjunc-
tive normal form. From this instance, we construct a graph G with node set {u, v11, v12, v13, . . . , vn1, vn2, vn3}
and edge set E1 ∪ E2, where E1 = {eij = (u, vij) : i = 1, . . . , n, j = 1, 2, 3}, E2 = {(vij, vij+1) :
i = 1, . . . , n, j = 1, 2}. As shown in Figure 4, G is a fan-star. The conﬂict set S is deﬁned as S =
{{eij, ekl} : xij and xkl are negations of each other}. Note that the edges in each conﬂict pair are adjacent.
If T is a solution of the FSTAC on G, then let XT = {xij : i = 1, . . . , n, j = 1, 2, 3} be such that xij is
true if eij ∈ T , and false otherwise. For each i = 1, . . . , n, at least one of xi1, xi2, xi3 must be true since T
contains at least one of ei1, ei2, ei3. Moreover, eij and ekl cannot both be in T if {eij, ekl} ∈ S, so in XT
at most one of xij, xkl will be true if they are negations of each other. Hence XT is a true assignment for
the 3-SAT problem.

Conversely, suppose X is a true assignment of the 3-SAT problem. Then S = {eij : xij is true in X} is
an acyclic subgraph of G with at most one edge from each conﬂict pair. If S spans G, then it is a solution
of the FSTAC. Otherwise, we add necessary edges from E2 to S to form a spanning tree T , which gives us
a solution of the FSTAC.

The result now follows from the NP-completeness of 3-SAT.

5

Figure 4

Since FSTAC is the feasibility version of MSTAC, the MSTAC is also NP-hard on fan-stars. Fan-star
is a subgraph of a fan and a wheel, hence the MSTAC on fan-stars can be reduced to the MSTAC on fans
or wheels by assigning large costs on additional edges. That proves NP-hardness of the MSTAC on fans,
wheels and (k, n)-accordions. MSTAC is a special case of MSTC and AQMST, and MSTC is a special
case of QMST, hence all of those problems are NP-hard on fan-stars, fans, wheels and (k, n)-accordions.
Furthermore, from Theorem 3 it easily follows that all bottleneck versions of these problems are NP-hard on
fan-stars, fans, wheels and (k, n)-accordions. These observations are summarized in the following corollary.

Corollary 4. MSTAC, MSTC, AQMST, QMST, BSTAC, BSTC, AQBST and QBST are NP-hard on
fan-stars, fans, wheels and (k, n)-accordions.

Next we identify some intractability results for problems on ladders.

Theorem 5. The FSTC on ladders is NP-complete.

Proof. Again we reduce the 3-SAT problem to the FSTC on ladders.

Let s = (x11 ∨ x12 ∨ x13) ∧ (x21 ∨ x22 ∨ x23) ∧ ··· ∧ (xn1 ∨ xn2 ∨ xn3), be an instance of 3-SAT given
in conjunctive normal form. From this, we construct a ladder G shown in Figure 5. Let S = {{eij, ekl} :
xij and xkl are negations of each other}. Note that in S the conﬂict edges are not necessarily adjacent.
Then there exists a solution T of the FSTC on G, if and only if the 3-SAT instance has a true assignment.

Figure 5: A ladder constructed from a 3-SAT instance

The detailed proof is very similar to the one given in Theorem 3, and hence omitted.

Again, NP-completeness of FSTC is propagated to MSTC, QMST, BSTC and QBST, as is summarized

in the following corollary.

Corollary 6. MSTC, QMST, BSTC and QBST are NP-hard on ladders and (k, n)-ladders.

3.2 Polynomially Solvable Special Cases

Let us now examine the complexity of the QMST variations that are not covered in Section 3.1. We show
that these remaining problems are easy by proposing a linear time algorithm to solve the AQMST on (k, n)-
ladders. Let us ﬁrst introduce some notations.

6

ei2ei1uvi3vi2vi1ei3Recall that (k, n)-ladder is a graph which is a sequence of n k-cycles such that only consecutive k-cycles
i and C k
i−1) intersect, and their intersection is an edge (and its corresponding two vertices). Let us label
i+1,
2 denote the

k is the edge that is also in C k

1 is the edge that is also in C k

k−2 are adjacent to ei

k. Note that then ei

. Furthermore, let vi

k, where ei

k = ei+1

1 and vi

2, . . . , ei

i−1, ei

1, ei

1

(C k
the edges of C k
and ei
k−1 and ei
vertices incident to ei

i by ei

k. See Figure 6 for an illustration.

Figure 6

2, T i

1, T i

3 and T i

Given a (k, n)-ladder L, we denote with Li the (k, i)-ladder determined by the ﬁrst i k-cycles of L. Next
4 to be the spanning trees of Li with minimum AQMST cost that satisfy additional
k, ei
k−1
k−2 and
k−2 and does not contain
k−2. Note that all possible

1 be a spanning tree of Li with minimum AQMST cost that contains ei
k, ei

we deﬁne T i
properties. In particular, let T i
and does not contain ei
does not contain ei
ei
k, and let T i
conﬁgurations of ei

4 be the minimum spanning tree that contains ei

2 be the minimum spanning tree that contains ei

3 be the minimum spanning tree that contains ei

k−2. Analogously, let T i

k−1 and ei

k−1, let T i

k−1, ei

k, ei

k, ei

k−1, ei

(cid:16)
(cid:16)
(cid:16)

(cid:110)
(cid:110)
(cid:110)

z

z

z

(cid:16)
(cid:16)

(cid:110)
(cid:110)

z

z

min
j=1,2,3

z(T i

1) = min

j=1,...,4

z(T i

2) = min

j=1,...,4

z(T i

3) = min

j=1,...,4

(cid:40)

z(T i

4) = min

z(F i

1) = min

j=1,...,4

z(F i

2) = min

j=1,...,4

(cid:17)(cid:111)
(cid:17)(cid:111)
(cid:17)(cid:111)
(cid:17)(cid:111)

,

,

,

z

i − ei
i − ei
i − ei

T i−1
j + {C k
1 − ei
k−2}
T i−1
j + {C k
1 − ei
k−1}
T i−1
(cid:110)
(cid:16)
j + {C k
1 − ei
k}
F i−1
i − ei
j + {C k
(cid:110)
(cid:16)
1}
T i−1
(cid:17)(cid:111)
j + {C k
i − ei
(cid:17)(cid:111)

j=1,...,4
(cid:96)=2,...,k−3
i − ei
i − ei

T i−1
j + {C k
T i−1
j + {C k

k − ei
k − ei

1 − ei
1 − ei

k−2}
k−1}

min

z

,

,

,

7

(cid:17)(cid:111) (cid:41)

,

(7)

(8)

(9)

(10)

(11)

(12)

1 − ei
(cid:96)}

k−2 are covered.
2 and F i

1, F i

Similarly, we deﬁne F i

k−2 and does not contain ei

trees, such that one tree contains vi
such forest that contains ei
contains ei
k−2 and does not contain ei
ei
vi
2.
Next we show that for i ≥ 2, if z(T i−1
j ), F i

j ), T i

1 and the other tree contains vi

3 to be the minimum cost spanning forests of Li made of exactly two
1 be a minimum cost
2 be a minimum cost such forest that
k−1,
1 or

k, ei
3 be a minimum cost such forest that contains ei
2 are exactly the single vertices vi

2. In particular, let F i

k−1 and does not contain ei
k−1, and let F i

k. Note that one tree in forests F i

k−2, let F i

1 and F i

k, ei

), T i−1
, j = 1, 2, 3 are known,
then z(T i
j , j = 1, 2, 3 can be calculate in O(k) time. For two edge disjoint
graphs/edge sets S1, S2 we deﬁne S1 + S2 to be the graph spanned by edges of S1 and S2. Then it is easy
to verify that the following recursive relations hold:

, j = 1, . . . , 4 and z(F i−1

j , j = 1, . . . , 4 and z(F i

), F i−1

j

j

j

j

C61C6i−1C6iC6i+1C6nei1eikeik−1eik−2vi2vi1(cid:40)

z(F i

3) = min

min
j=1,2,3

(cid:16)

(cid:110)

z

(cid:17)(cid:111)

,

F i−1
i − ei
j + {C k
1 − ei
(cid:110)
(cid:16)
k}
T i−1
j + {C k

min

z

j=1,...,4
(cid:96)=2,...,k−3
i and graphs T i−1

(cid:17)(cid:111) (cid:41)

.

(13)

i − ei

1 − ei

k − ei
(cid:96)}

Since adjacencies between edges of C k

are known, the minimization functions
above can be calculated easily. Function values in (10) and (13) can be calculated in O(k) time and the
remaining values in constant time, provided z(T i−1

)’s are known.

, F i−1
)’s and z(F i−1

j

j

j

j

j , j = 1, . . . , 4 and F 1
T 1

j ’s and their costs can
incrementally be calculated from T i−1
’s along with their costs. When the value of i increases to
n, the optimal solution of the AQMST on L is obtained. We call this algorithm the AQMST-(k, n)-ladder
algorithm and is summarized as Algorithm 1.

j , j = 1, 2, 3 are easily calculated, and for i ≥ 2, T i

’s and F i−1

j ’s and F i

j

j

Algorithm 1: AQMST-(k, n)-ladder

j ), j = 1, . . . , 4, and z(F 1

1: Input: A (k, n)-ladder graph L with costs ce for e ∈ E and q(e, f ) for e, f ∈ E, e (cid:54)= f ;
2: Calculate z(T 1
3: for i = 2 to n do
4: Determine T i
5: end for
6: T n is the minimum cost tree from {T n
7: Output T n and z(T n);

j , j = 1, 2, 3, using (7)-(13);

j , j = 1, . . . , 4, and F i

j ), j = 1, 2, 3;

3 , T n
4 };

1 , T n

2 , T n

Theorem 7. The AQMST-(k, n)-ladder algorithm solves AQMST on (k, n)-ladders in O(kn) time.

Proof. The correctness of the AQMST-(k, n)-ladder algorithm follows from the exploration of all the possible
cases resulting in recursion relations (7)-(13). There are O(n) iterations of line 4 of the algorithm, and each
iteration takes O(k) time to calculate the trees and corresponding costs as discussed above. Hence, the
overall complexity is O(kn).

The MSTAC can be easily reduced to the AQMST, and by calculating the maximum rather than the
summation, Algorithm 1 can be adapted to solve the bottleneck versions of the problems on (k, n)-ladders.
So without describing the detailed steps, the following corollary holds.

Corollary 8. MSTAC, AQBST and BSTAC on (k, n)-ladders can be solved in O(kn) time.

We have determined complexities of all problem variations on all graph classes investigated. The results

are summarized in Table 1, in which “×” represents NP-hardness and “(cid:88)” means polynomially solvable.

MSTAC MSTC AQMST QMST BSTAC BSTC AQBST QBST

fan-star

fan

wheel
ladder

(k, n)-ladder

(k, n)-accordion

×
×
×
(cid:88)
(cid:88)
×

×
×
×
×
×
×

×
×
×
(cid:88)
(cid:88)
×

×
×
×
×
×
×

×
×
×
(cid:88)
(cid:88)
×

×
×
×
×
×
×

×
×
×
(cid:88)
(cid:88)
×

×
×
×
×
×
×

Table 1: The polynomial solvability of QMST variations

8

4 The QMST with row graded cost matrix

In Section 3 it is shown that the QMST and its variations are mostly NP-hard even when restricted to very
simple classes of graphs on which a wide variety of hard optimization problems can be solved eﬃciently.
Therefore, we shift the focus from special graphs to specially structured cost matrices.

For each ei ∈ E(G) consider the minimum spanning tree problem MST(i, Q):

MST(i, Q):

Minimize (cid:80)

Subject to

q(i, j)

ej∈E(T )

T ∈ F,

Minimize (cid:80)

zj

ej∈E(T )

where F is the family of all spanning trees of G. Let zi be the optimal objective function value of MST(i, Q),
and consider the minimum spanning tree problem:

MST(Q):

Subject to

T ∈ F.

Let ˜L be the optimal objective function value of the MST(Q). It is shown in [2] that ˜L is a lower bound
for the optimal objective function value of QMST. We call ˜L the natural lower bound for the QMST. If
we could ﬁnd a spanning tree of G with objective function value ˜L, it is surely an optimal solution of the
QMST.

An m × m matrix Q = (q(i, j)) is said to be row graded, if q(i, 1) ≤ q(i, 2) ≤ ··· ≤ q(i, m) for all
i = 1, . . . , m. Furthermore, Q is called doubly graded if both Q and QT are row graded. Given an m × m
matrix Q and a permutation π on {1, 2, . . . , m}, we deﬁne π(Q) to be the m× m matrix which (i, j)-th entry
is q(π−1(i), π−1(j)). We say that Q is permuted row graded or permuted doubly graded if there exist a
permutation π such that π(Q) is row graded or doubly graded, respectively. Note that permuted row graded
and permuted doubly graded matrices are recognizable in polynomial time.

Let G be a graph with n vertices and edge set E(G) = {e1, e2, . . . , em}. Given a permutation on
{1, 2, . . . , m} π, a spanning tree T = {ei1, ei2, . . . , ein−1} of G is called the π-critical spanning tree if the set
{π(i1), π(i2), . . . , π(in−1)} is lexicographically smallest among all spanning trees of G. Recall that any MST
can be solved by a greedy algorithm, therefore the π-critical spanning tree is optimal if permuting the cost
vector with π makes it nondecreasing.

ej∈T 0 q(i, j) for i = 1, . . . , m, then T 0 is an optimal solution of the QMST on Q.

Lemma 9. Let Q be a cost matrix of the QMST on a graph G. If Q is permuted row graded such that
π(Q) is row graded, and if the π-critical spanning tree T 0 is a minimum spanning tree on G with edge costs

zi :=(cid:80)
for all i = 1, . . . , m with corresponding optimal objective function value zi =(cid:80)

Proof. Since π(Q) is row graded, the π-critical spanning tree T 0 is an optimal solution of the MST(i, Q)
ej∈T 0 q(i, j). As T 0 is also
optimal for the MST with edge costs zi, it is optimal for the MST(Q). Thus z(T 0) = ˜L and the optimality
of T 0 for the QMST is proved.

Using Lemma 9 we show that the QMST on permuted doubly graded matrices is polynomially solvable.

Theorem 10. If the cost matrix Q of the QMST on a graph G is permuted doubly graded such that π(Q) is
doubly graded, then the π-critical spanning tree T 0 is an optimal solution.

Proof. Let zi := (cid:80)
j, q(π−1(1), j) ≤ q(π−1(2), j) ≤ ··· ≤ q(π−1(m), j). Then (cid:80)

(cid:80)
ej∈T 0 q(i, j) for i = 1, . . . , m. Since π(Q) is row graded, T 0 is optimal for MST(i, Q),
(cid:80)
i = 1, . . . , m, with corresponding optimal objective function value zi. Also π(Q)T is row graded, so for all
ej∈T 0 q(π−1(2), j) ≤
ej∈T 0 q(π−1(m), j), i.e. zπ−1(1) ≤ zπ−1(2) ≤ ··· ≤ zπ−1(m). Thus T 0 is a minimum spanning tree on

··· ≤
G with edge costs zi. From Lemma 9, T 0 is optimal for the QMST, with optimal objective function value
z(T 0) = ˜L.

ej∈T 0 q(π−1(1), j) ≤

9

In the rest of this section, we extend the above results to a more general structure called matroid bases
and give a new characterization of matroids in terms of quadratic objective function. To the best of our
knowledge, no characterization of matroids is known that uses an optimization problem with a quadratic
objective function.

Let E = {1, 2, . . . , m} be a ground set and F be a family of subsets of E that we call bases, where |S| = s,
a constant for any S ∈ F. Let I = {X ⊆ S : S ∈ F}. We call the structure (E, I) an independence system
and the structure (E,F) a base system. An independence system (E, I) is called a matroid if and only if
for any S1, S2 ∈ F and i ∈ S1 \ S2, there exists j ∈ S2 \ S1 such that S1 \ {i} ∪ {j} ∈ F. For instance, when
E is the edge set of a graph G, F is the collection of all the spanning trees of G, and I is the collection of
all acyclic subgraphs of G, then (E, I) is called the graphic matroid.
Given a base system (E,F) and a weight w(i, j) for each i, j ∈ E, the quadratic minimum weight base

problem (QMWB) is formulated as follows:

Minimize Π(S) = (cid:80)

(cid:80)

w(i, j)

i∈S

j∈S

where W = (w(i, j))m×m is the associated cost matrix. For each i ∈ E we deﬁne a minimum weight base
problem as follows:

Subject to

S ∈ F,

Minimize (cid:80)

w(i, j)

j∈S

Subject to

S ∈ F.

Minimize (cid:80)

f j

j∈S

MWB(i, W ):

MWB(Q):

Let f i be the optimal objective function value of the MWB(i, W ), and similar to the case for QMST, the
optimal objective function value ¯L of the problem

Subject to

S ∈ F,

is called the natural lower bound of the QMWB with cost matrix W .

Given a permutation π on {1, 2, . . . , m}, we say that a base B0 = {i1, i2, . . . , is} is the π-critical base
if the set {π(i1), π(i2), . . . , π(is)} is lexicographically smallest among all sets {π(j1), π(j2), . . . , π(js)} where
{j1, j2, . . . , js} ∈ F.
Theorem 11. The following statements are equivalent:

(i) (E, I) is a matroid.

π(W ) is row graded, and if the π-critical base S0 is a minimum weight base for costs f i :=(cid:80)

(ii) Let W be a cost matrix of the QMWB on a base system (E,F). If W is permuted row graded such that
j∈S0 w(i, j)

for i = 1, . . . ,|E|, then S0 is an optimal solution of the QMWB with cost matrix W .

(iii) If the cost matrix W of the QMWB problem on a base system (E,F) is permuted doubly graded such
that π(W ) is doubly graded, then the π-critical base S0 is an optimal solution. Moreover, the natural
lower bound is the optimal objective function value.

Proof. Using the fact that a minimum weight matroid can be found by the greedy algorithm, statements (i)
implies (ii) and (i) implies (iii) can be proved similarly as Lemma 9 and Theorem 10. Hence their proofs
are omitted.

To show (iii) implies (i), we assume (E, I) is not a matroid and we aim to show that in that case (iii) is
not true. Hence, we assume that there are S1 ∈ F, S2 ∈ F and K ∈ S1 \ S2 such that S1 \{K}∪{i} /∈ F for
all i ∈ S2 \ S1. Let π be a permutation on {1, 2, . . . , m} for which {π(i) : i ∈ S1 \ {K}} = {1, 2, . . . , s − 1},

10

{π(i) : i ∈ S2 \ S1} = {s, s + 1, . . . ,|S1 ∪ S2| − 1}, π(K) = |S1 ∪ S2| and {π(i) : i ∈ E \ (S1 ∪ S2)} =
{|S1 ∪ S2| + 1, . . . , m}. Note that S1 is the π-critical base, since S1 \ {K} ∪ {i} /∈ F for all i ∈ S2 \ S1. Let
a cost matrix W be such that its entries are

1

1
0

w(i, j) =

if i or j is in E \ (S1 ∪ S2),
if i ∈ (S2 \ S1) ∪ {K} and j = K,
otherwise.

Clearly π(W ) is doubly graded, and hence W is permuted doubly graded, see Figure 7. Now let us consider



π(W ) =



π(S1 \ {K})

π(S2 \ S1)

π(K)

π(E \ (S1 ∪ S2))

π(S1 \ {K}) π(S2 \ S1) π(K) π(E \ (S1 ∪ S2))

0

0

0

1

1

1

1

1

0

0

0

1

0

1

1

1

Figure 7

the objective function values of S1 and S2 in QMWB with cost matrix W . Π(S1) = 1 and Π(S2) = 0. Hence,
the π-critical base S1 is not an optimal solution of the QMWB on cost matrix W , which implies that (iii)
is not true.

Similarly, we prove that (ii) implies (i) by showing that if (E, I) is not a matroid, then (ii) is not true.
That will complete the proof of the theorem. So, assume that there are S1 ∈ F, S2 ∈ F and K ∈ S1 \ S2
such that S1 \ {K} ∪ {i} /∈ F for all i ∈ S2 \ S1. Then again consider permutation π and the cost matrix
π(W ) from Figure 7. π(W ) is row graded and the π-critical base S1 is a minimum weight base on the costs

j∈S1 w(i, j), but S1 is not an optimal solution of the corresponding QMWB, S2 is.

f i =(cid:80)

We end this section by noting that Theorem 10 and Theorem 11 hold true also for the QBST and
quadratic bottleneck base problem, respectively. That is, when the sum in the objective value function is
replaced by the maximum. The same proofs work, since the greedy algorithm obtains an optimal solution
also for the linear bottleneck objective functions on a base system of a matroid [11].

Acknowledgments

This work was supported by an NSERC discovery grant and an NSERC discovery accelerator supplement
awarded to Abraham P. Punnen.

References

[1] R.K. Ahuja, O. Ergun, J.B. Orlin and A.P. Punnen, A survey of very large-scale neighborhood search

techniques, Discrete Applied Mathematics 123 (2002), 75–102.

[2] A. Assad and W. Xu, The quadratic minimum spanning tree problem, Naval Research Logistics 39

(1992), 399–417.

11

[3] C. Buchheim and L. Klein, Combinatorial optimization with one quadratic term: Spanning trees and

forests, Discrete Applied Mathematics 177 (2014), 34–52.

[4] R. Cordone and G. Passeri, Solving the quadratic minimum spanning tree problem, Applied Mathematics

and Computation 218 (2012), 11597–11612.

[5] A. ´Custi´c and A.P. Punnen, Characterization of the linearizable instances of the quadratic minimum

spanning tree problem, arXiv:1510.02197, 2015.

[6] A. Darmann, U. Pferschy and J. Schauer, Minimal spanning trees with conﬂict graphs, Optimization

online, 2009. http://www.optimization-online.org/DB_FILE/2009/01/2188.pdf

[7] A. Darmann, U. Pferschy, S. Schauer, and G.J. Woeginger, Paths, trees and matchings under disjunctive

constraints, Discrete Applied Mathematics 159 (2011), 1726–1735.

[8] A. Fischer and F. Fischer, Complete description for the spanning tree problem with one linearised

quadratic term, Operations Research Letters 41 (2013), 701–705.

[9] Z.-H. Fu and J.-K. Hao, A three-phase search approach for the quadratic minimum spanning tree

problem, Engineering Applications of Artiﬁcial Intelligence 46 (2015), 113–130.

[10] J. Gao. and M. Lu, Fuzzy quadratic minimum spanning tree problem, Applied Mathematics and Com-

putation 164 (2005), 773–788.

[11] S.K. Gupta and A.P. Punnen, k-sum optimization problems, Operations Research Letters 9 (1990),

121–126.

[12] A.J.W. Hilton, Spanning trees and Fibonacci and Lucas numbers, The Fibonacci Quarterly 12 (1974),

259–262.

[13] M. Lozanoa, F. Glover, C. Garc´ıa-Mart´ınez, F. Javier Rodr´ıguez and R. Mart´ı, Tabu search with

strategic oscillation for the quadratic minimum spanning tree, IIE Transactions 46 (2014), 414–428.

[14] S.M.D.M. Maia, E.F.G. Goldbarg and M.C. Goldbarg, On the biobjective adjacent only quadratic

spanning tree problem, Electronic Notes in Discrete Mathematics 41 (2013), 535–542.

[15] S.M.D.M. Maia, E.F.G. Goldbarg and M.C. Goldbarg, Evolutionary algorithms for the bi-objective
adjacent only quadratic spanning tree, International Journal of Innovative Computing and Applications
6 (2014), 63–72.

[16] S. Mitrovic-Minic and A.P. Punnen, Local search intensiﬁed: Very large-scale variable neighborhood
search for the multi-resource generalized assignment problem, Discrete Optimization 6 (2009), 370–377.

[17] T. ¨Oncan and A.P. Punnen, The quadratic minimum spanning tree problem: A lower bounding proce-

dure and an eﬃcient search algorithm, Computers & Operations Research 37 (2010), 1762–1773.

[18] G. Palubeckis, D. Rubliauskas and A. Targamadz˙e, Metaheuristic approaches for the quadratic minimum

spanning tree problem, Information Technology and Control 29 (2010), 257–268.

[19] D.L. Pereira, M. Gendreau and A.S. da Cunha, Stronger lower bounds for the quadratic minimum
spanning tree problem with adjacency costs, Electronic Notes in Discrete Mathematics 41 (2013), 229–
236.

[20] D.L. Pereira, M. Gendreau and A.S. da Cunha, Branch-and-cut and Branch-and-cut-and-price algo-
rithms for the adjacent only quadratic minimum spanning tree problem, Networks 64 (2015), 367–379.

[21] D.L. Pereira, M. Gendreau and A.S. da Cunha, Lower bounds and exact algorithms for the quadratic

minimum spanning tree problem, Computers and Operations Research 63 (2015), 149–160.

12

[22] A.P. Punnen and R. Zhang, Quadratic bottleneck problems, Naval Research Logistics 58 (2011), 153–

164.

[23] J. Sedl´aˇcek, On the number of spanning trees of ﬁnite graphs, ˇCasopis pro Pˇestov´an´ı Matematiky 94

(1969), 217–221.

[24] S.-M. Soak, D.W. Corne and B.-H. Ahn, A new evolutionary algorithm for spanning tree based com-

munication network design, IEICE Transaction on Communication E88-B (2005), 4090–4093.

[25] S.-M. Soak, D.W. Corne and B.-H. Ahn, The edge-window-decoder representation for tree-based prob-

lems, IEEE transactions on Evolutionary Computation 10 (2006), 124–144.

[26] R. Zhang and A.P. Punnen, Quadratic bottleneck knapsack problems, Journal of Heuristics 19 (2013),

573–589.

[27] R. Zhang, S. Kabadi and A.P. Punnen, The minimum spanning tree problem with conﬂict constraints

and its variations, Discrete Optimization 8 (2011), 191–205.

[28] G. Zhou and M. Gen, An eﬀective genetic algorithm approach to the quadratic minimum spanning tree

problem, Computers & Operations Research 25 (1998), 229–237.

13

