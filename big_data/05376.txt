6
1
0
2

 
r
a

 

M
7
1

 
 
]
L
F
.
s
c
[
 
 

1
v
6
7
3
5
0

.

3
0
6
1
:
v
i
X
r
a

Operations on Weakly Recognizing

Morphisms

Lukas Fleischer

Manfred Kufleitner

FMI, University of Stuttgart∗

{fleischer,kufleitner}@fmi.uni-stuttgart.de

Abstract. Weakly recognizing morphisms from free semigroups onto
ﬁnite semigroups are a classical way for deﬁning the class of ω-regular
languages, i.e., a set of inﬁnite words is weakly recognizable by such a
morphism if and only if it is accepted by some Büchi automaton. We
consider the descriptional complexity of various constructions for weakly
recognizing morphisms. This includes the conversion from and to Büchi
automata, the conversion into strongly recognizing morphisms, and com-
plementation. For some problems, we are able to give more precise
bounds in the case of binary alphabets or simple semigroups.

1 Introduction

Büchi automata deﬁne the class of ω-regular languages. They were introduced by
Büchi for deciding the monadic second-order theory of (N, <) [2]. Since then, ω-
regular languages have become an important tool in formal veriﬁcation, and many
other automata models for this language class have been considered; see e.g. [10, 13].
Each automaton model has its merits and its disadvantages. Recently, the authors
could show that recognizing morphisms have many nice algorithmic properties [5].
Such morphisms come with two diﬀerent ﬂavors. Strongly recognizing morphisms
admit eﬃcient minimization and complementation whereas weakly recognizing mor-
phisms can be exponentially more succinct (but there is no minimal weak recognizer
and there is no eﬃcient complementation). The situation is similar to the behav-
ior of deterministic and nondeterministic ﬁnite automata. The major diﬀerence to
both nondeterministic ﬁnite automata and Büchi automata is that there is an eﬃ-
cient inclusion test for weakly recognizing morphisms [5]. Every strongly recognizing
morphism is also a weakly recognizing, but the converse is false.

∗This work was supported by the DFG grants DI 435/5-2 and KU 2716/1-1.

1

Operation

Lower bound Upper bound

BA to weak recognition
BA to weak recognition, binary alphabet
Weak recognition to BA
Weak recognition to strong recognition
Complementation of weak recognition
Complementation for simple semigroups

2n2 [new]
2(n−1)2/4 [new]
(n − 3)(n − 2)/32 [new]
n2n−1 [new]
n2n−1 [new]
n2n−1 [new]

2n2 [9]
2n2 [9]
n(n + 1) [9]
2n2 [10]
2n2 [10]
n2n [new]

Table 1: Bounds for the descriptional complexity of various operations.

In this paper, we consider the descriptional complexity of various operations on
weakly recognizing morphisms and conversions involving nondeterministic Büchi au-
tomata (BA) and strongly recognizing morphisms. In each case, we give asymptoti-
cally tight bounds. For the conversion of a BA into a weakly recognizing morphism,
we give a lower bound which matches the naive upper bound. Our results are sum-
marized in Table 1.

There are some similarities between recognizing morphisms over ﬁnite and over
inﬁnite words. Strong recognition is the natural counterpart to recognition for ﬁnite
words. Nevertheless, in order to prove lower bounds for the conversion of Büchi au-
tomata to weakly recognizing morphisms, we ﬁrst show that bounds for converting
nondeterministic ﬁnite automata to recognizing morphisms over ﬁnite words (with
some limitations) also hold for the conversion of Büchi automata to weakly recogniz-
ing morphisms. We then use techniques of Sakoda and Sipser [12] and of Yan [14]
to obtain tight bounds for the conversion of nondeterministic ﬁnite automata to
recognizing morphisms. This step is similar to the work of Holzer and König [6]. To
the best of our knowledge, our lower bound over ﬁnite words for the conversion of
an NFA into a recognizing morphism is also a new result.

2 Preliminaries

This section gives a brief overview of some basic deﬁnitions from the ﬁelds of formal
languages, ﬁnite automata and semigroup theory. We refer to [10, 11] for more
detailed introductions.

Words. Let A be a ﬁnite alphabet. The elements of A are called letters. A ﬁnite
word is a sequence a1a2 · · · an of letters of A and an inﬁnite word is an inﬁnite
sequence a1a2 · · · . The empty word is denoted by ε. Given an inﬁnite word α =
a1a2 · · · , we let inf(α) ⊆ A denote the set of letters in α which occur inﬁnitely often.
Let K be a set of ﬁnite words and let L be a set of inﬁnite words. We set KL =

2

{uα | u ∈ K, α ∈ L}, K n = {u1u2 · · · un | ui ∈ K}, K + = Sn>1 K n and K∗ = K + ∪
{ε}. Moreover, if ε 6∈ K we deﬁne the inﬁnite iteration K ω = {u1u2 · · · | ui ∈ K}.
A natural extension to K ⊆ A∗ is K ω = (K \ {ε})ω ∪ {ε}.

Automata. A ﬁnite automaton is a 5-tuple A = (Q, A, δ, I, F ) where Q is a ﬁnite
set of states and A is a ﬁnite alphabet. The transition relation δ is a subset of
Q × A × Q and its elements are called transitions. The sets I and F are subsets of
Q and are called initial states and ﬁnal states, respectively.

A ﬁnite run of a word a1a2 · · · an on A is a sequence q0a1q1a1 · · · qn−1anqn such
that q0 ∈ I and (qi, ai+1, qi+1) ∈ δ for all i ∈ {0, . . . , n − 1}. The run is said to start
in q0 and end in qn. The word a1a2 · · · an is the label of the run. A ﬁnite run is
called accepting if it ends in a ﬁnal state. A ﬁnite word u is said to be accepted by
A if there exists an accepting ﬁnite run of u on A and the language accepted by A
is the set of all ﬁnite words over A∗ accepted by A. It is denoted by LNFA(A).

Analogously, an inﬁnite run of a word a1a2 · · · on A is a inﬁnite sequence q0a1q1a1 · · ·

such that q0 ∈ I and (qi, ai+1, qi+1) ∈ δ for all i > 0.
It is called accepting if
inf(q0q1q2 · · · ) ∩ F 6= ∅. An inﬁnite word α is said to be Büchi-accepted by A if there
exists an accepting inﬁnite run of α on A. The language Büchi-accepted by A is the
set of all inﬁnite words Büchi-accepted by A and it is denoted by LBA(A).

We use the term run for both ﬁnite and inﬁnite runs if the reference is clear from
the context. A language L ⊆ A∗ (resp. L ⊆ Aω) is regular (resp. ω-regular) if it is
accepted (resp. Büchi-accepted) by some ﬁnite automaton.

Finite semigroups. A semigroup morphism is a mapping h: S → T between two
(not necessarily ﬁnite) semigroups S and T such that h(s)h(t) = h(st) for all s, t ∈ S.
Since we do not consider morphisms of other objects, we use the term morphism
synonymously. A subsemigroup of a semigroup S is a subset that is closed under
multiplication. We say that a semigroup T divides a semigroup S if there exists a
surjective morphism from a subsemigroup of S onto T .

Green’s relations are an important tool in the study of semigroups. For the re-
mainder of this subsection, let S be a ﬁnite semigroup. We denote by S1 the monoid
that is obtained by adding a new neutral element 1 to S. For s, t ∈ S let

s R t if there exist q, q′ ∈ S1 such that sq = t and tq′ = s,
s L t if there exist p, p′ ∈ S1 such that ps = t and p′t = s,
s J t if there exist p, q, p′, q′ ∈ S1 such that psq = t and p′tq′ = s,
s H t if s R t and s L t.

These relations are equivalence relations. The equivalence classes of R (resp. L, J ,
H) are called R-classes (resp. L-classes, J -classes, H-classes). For s ∈ S, we denote
the R-class (resp. L-class) of s by Rs (resp. Ls) and we let S/R = {Rs | s ∈ S} as
well as S/L = {Ls | s ∈ S}.

3

A semigroup is called J -trivial if each of its J -classes contains exactly one element.
A semigroup is called simple if it consists of a single J -class.
In a ﬁnite simple
semigroup, the relations s R st L t hold for all s, t ∈ S. Moreover, each H-class
forms a group and all such groups are isomorphic [11]. We will also utilize the
following lemma:

Lemma 1 Let S be a ﬁnite simple semigroup and let x, y, z ∈ S such that y R z.
Then xy = xz implies y = z.
Proof. Suppose that xy = xz. Since S is simple, we have y L xy and thus, there
exists an element p ∈ S1 such that pxy = y. Since y R z, there exists an element
q ∈ S1 with yq = z. It follows that y = pxy = pxz = pxyq = yq = z.
(cid:3)

Recognition by morphisms. Let h: A+ → S be a morphism to a ﬁnite semi-
group S. A pair (s, e) of elements of S is a linked pair if se = s and e2 = e. For
s ∈ S, we set [s]h = h−1(s) and if h is understood from the context, we may skip
the reference to the morphism in the subscript. A language L ⊆ A+ is recognized by
a morphism h : A+ → S if L is a union of sets [si] with si ∈ S. A language L ⊆ Aω
is weakly recognized by a morphism h : A+ → S if it is a union of sets [si][ei]ω where
(si, ei) are linked pairs of S. A language L ⊆ Aω is strongly recognized by a morphism
h : A+ → S if [s][t]ω ∩ L 6= ∅ implies [s][t]ω ⊆ L for all s, t ∈ S. It is easy to see
that strong recognition implies weak recognition. Moreover, if a morphism strongly
recognizes L, it also strongly recognizes its complement Aω \ L. By extension, we
also say that a semigroup S recognizes (resp. weakly recognizes, strongly recognizes)
a language L if there exists a morphism h: A+ → L that recognizes (resp. weakly
recognizes, strongly recognizes) L.

The syntactic congruence ≡L of a language L ⊆ A+ ∪ Aω is deﬁned over A+ as

u ≡L v if the equivalences

(xuy)zω ∈ L ⇔ (xvy)zω ∈ L and
z(xuy)ω ∈ L ⇔ z(xvy)ω ∈ L

hold for all ﬁnite words x, y, z ∈ A∗. Keep in mind that εω = ε. The congruence
classes of ≡L form the so-called syntactic semigroup A+/≡L and the syntactic mor-
phism hL : A+ → A+/≡L is the natural quotient map. If L ⊆ A∗ is regular (resp.
ω-regular), the syntactic semigroup of L is ﬁnite and hL recognizes (resp. strongly
recognizes) the language L [1, 10].

3 Lower Bound Techniques

3.1 Proving Lower Bounds for Weakly Recognizing Morphisms

We ﬁrst consider the general problem of proving lower bounds for the size of weakly
recognizing semigroups for a given language L. In the case of recognizing morphisms

4

over ﬁnite words and in the case of strongly recognizing morphisms, this is easy since
one only needs to compute the syntactic semigroup which immediately yields a tight
lower bound. On the contrary, weakly recognizing morphisms do not admit minimal
objects. However, it turns out that one can still use a relaxed version of Arnold’s
syntactic congruence.

We ﬁrst prove a combinatorial lemma and then give the main result of this section.

Lemma 2 Let u, v ∈ A+ and let (s, e) be a linked pair. Then uvω is contained in
[s][e]ω if and only if there exists a factorization v = v1v2 and powers k, ℓ > 0 such
that ℓ is odd, h(uvkv1) = s and h(v2vℓv1) = e.

Proof. Let v = a1a2 · · · an with n > 1 and ai ∈ A. If uvω is contained in [s][e]ω,
there exists a factorization uvω = u′v′1v′2 · · · such that h(u′) = s and h(v′i) = e for
all i > 1. Since u and v are ﬁnite words, there exist indices j > i > 1, powers
k, ℓ > 1 and a position m ∈ {1, . . . , n} such that u′v′1v′2 · · · v′i−1 = uvka1a2 · · · am
and v′iv′i+1 · · · v′j = am+1am+2 · · · anvℓa1a2 · · · am. We set v1 = a1a2 · · · am and v2 =
am+1am+2 · · · an. Then v1v2 = v,

h(uvkv1) = h(uvka1a2 · · · am)
= h(u′v′1v′2 · · · v′i−1) = sei−1 = s,
h(v2vℓv1) = h(am+1am+2 · · · anvℓa1a2 · · · am) = h(v′iv′i+1 · · · v′j) = ej−i+1 = e.

If ℓ is even, we can replace ℓ by 2ℓ+1 since h(v2v2ℓ+1v1) = h(v2vℓv1v2vℓv1) = e2 = e.
The converse implication is trivial.
(cid:3)

Theorem 3 Let L ⊆ Aω be a language weakly recognized by some morphism h: A+ →
S and let u, v, z ∈ A+ and x, y ∈ A∗ be words such that one of the following two
properties holds:

1. xuyzω ∈ L and xvyzω 6∈ L
2. x(uy)ω ∈ L and x(uyvy)ω 6∈ L and x(vyuy)ω 6∈ L.

Then h(u) 6= h(v).

Proof. We consider ﬁnite words u, v ∈ A+ such that h(u) = h(v) and show that in
this case, neither of the properties can hold.

If the ﬁrst property holds, there exists a linked pair (s, e) such that xuyzω ∈
[s][e]ω ⊆ L. Thus, by Lemma 2, we have h(xuyzkz1) = s and h(z2zℓz1) = e for some
factorization z = z1z2 and powers k, ℓ > 0. Now, since h(xvyzkz1) = h(xuyzkz1) = s,
we obtain xvyzω ∈ [s][e]ω ⊆ L, a contradiction.

If the second property holds, there exists a linked pair (s, e) of S such that
xwω ∈ [s][e]ω ⊆ L where w = uy. Thus, by Lemma 2, we have h(xwkw1) = s
and h(w2wℓw1) = e for some factorization w = w1w2, some power k > 0 and
some odd power ℓ > 0. Since ℓ is odd (ℓ − 1)/2 is an integer and we have
h(w2(vyuy)(ℓ−1)/2vyw1) = h(w2(uy)ℓw1) = e. Now, if k is odd as well, we obtain

5

h(x(vyuy)(k−1)/2vyw1) = h(x(uy)kw1) = s and therefore, x(vyuy)ω ∈ L. Equiv-
if k is even, we have h(x(uyvy)k/2w1) = h(x(uy)kw1) = s and hence,
alently,
x(uyvy)ω ∈ L. Both cases contradict Property 2 above.
(cid:3)

The next proposition is another simple, yet useful, tool for proving lower bounds.

It allows to transfer bounds from the setting of ﬁnite words to inﬁnite words.

Proposition 4 Let A = (Q, A, δ, I, F ) and let a ∈ A be a letter such that for all
q ∈ Q and qf ∈ F , we have (q, a, qf ) ∈ δ if and only if q = qf . Let K = LBA(A) and
let L = LNFA(A). Then, each semigroup weakly recognizing K has at least (cid:12)(cid:12)A+/≡L(cid:12)(cid:12)

elements.

Proof. Let h: A+ → S be a morphism weakly recognizing K and consider two words
u, v ∈ A+ such that u 6≡L v. Then, without loss of generality, there exist x, y ∈ A∗
such that xuy ∈ L and xvy 6∈ L. This implies xuyaω ∈ K since (qf , a, qf ) ∈ δ for all
qf ∈ F . Equivalently, because of (q, a, qf ) 6∈ δ for all q ∈ Q \ F and qf ∈ F , we have
xvyaω 6∈ K. By Theorem 3, this yields h(u) 6= h(v).
(cid:3)

3.2 The Full Automata Technique

The full automata technique is a useful tool for proving lower bounds for the conver-
sion of automata to other objects. It was introduced by Yan [14] who attributes it to
Sakoda and Sipser [12]. The technique works for both accepted and Büchi-accepted
languages. However, we will prove the main result of this section only for the setting
of ﬁnite words and use Proposition 4 to obtain analogous results for inﬁnite words.
Let Q be a ﬁnite set and let I, F be subsets of Q. The full automaton F(Q, I, F )
is the ﬁnite automaton (Q, B, ∆, I, F ) deﬁned by B = 2Q2 and by the transition
relation ∆ = {(p, T, q) ∈ Q × B × Q | (p, q) ∈ T }.

Theorem 5 Let A = (Q, A, δ, I, F ) be a ﬁnite automaton and let F(Q, I, F ) =
(Q, B, ∆, I, F ) be the corresponding full automaton. Then the syntactic semigroup
of LNFA(A) divides the syntactic semigroup of LNFA(F(Q, I, F )).

Proof. We ﬁrst deﬁne a morphism π : A+ → B+ by π(a) = {(p, q) | (p, a, q) ∈ δ}.
Let K = LNFA(F(Q, I, F )) and let L = LNFA(A). It suﬃces to show that π(u) ≡K
π(v) implies u ≡L v. Thus, consider u, v ∈ A+ such that π(u) ≡K π(v).
In
particular, for all x, y ∈ A∗, we have π(xuy) ∈ K if and only if π(xvy) ∈ K. By the
deﬁnition of π, we have π(w) ∈ K if and only if w ∈ L for all w ∈ A+. Using the
equivalence from above, this yields xuy ∈ L if and only if xvy ∈ L for all x, y ∈ A∗,
thereby proving that u ≡L v.
(cid:3)

6

4 From Automata to Weakly Recognizing Morphisms

The standard construction for converting a ﬁnite automaton A to a recognizing
morphism is the so-called transition semigroup of A. Roughly speaking, for a given
word u ∈ A+, it encodes for each pair (p, q) of states of A whether there is a run
of u on A starting in p and ending in q. Thus, for a ﬁnite automaton with n states
the transition semigroup has 2n2 elements. For details on the construction, we refer
to [10, 11]. We will now show that this construction is optimal, i.e., there exists an
automaton describing a language that cannot be recognized by a morphism smaller
than the automaton’s transition semigroup.

Theorem 6 Let A be a ﬁnite automaton with n states. Then there exists a semi-
group recognizing LNFA(A) (resp. weakly recognizing LBA(A)) which has at most 2n2
elements and this bound is tight.

Proof. Each language that is accepted (resp. Büchi-accepted) by A is recognized
(resp. weakly recognized) by the transition semigroup of A which has size 2n2.

To show that this is optimal, we consider the full automaton F(Q, I, F ) =
(Q, B, ∆, I, F ) with Q = I = F = {1, . . . , n} and let L = LNFA(F(Q, I, F )). For
two diﬀerent letters X, Y ∈ B we may assume, without loss of generality, that there
exist p, q ∈ Q such that (p, q) ∈ X \ Y . With P = {(p, p)} and Q = {(q, q)}, we
then have P XQ ∈ L and P Y Q 6∈ L. Thus, X 6≡L Y . This shows that A+/≡L has
at least |B| = 2n2 elements.

Noting that the transitions labeled by the letter {(q, q) | q ∈ Q} form self-loops at
(cid:3)

each state, the Büchi case immediately follows by Proposition 4.

The proof of the optimality result requires a large alphabet that grows super-
exponentially in the number of states of the automaton. A natural restriction is
considering automata over ﬁxed-size alphabets.
By a result of Chrobak [3], the size of the syntactic semigroup of an unary lan-
guage accepted by a ﬁnite automaton of size n is in 2O(√n log n) (note that since
unary languages are commutative, the syntactic monoid is isomorphic to the mini-
mal deterministic automaton). Over inﬁnite words, the unary case is uninteresting
since the only language over the alphabet A = {a} is {aω}.

For binary alphabets, a lower bound can be obtained by combining the full au-
tomata technique with a result from the study of semigroups of binary relations [7,
Proposition 6]. In order to keep the paper self-contained, we present a proof that is
adapted to ﬁnite automata and does not require any knowledge on binary relations.

Theorem 7 Let A = {a, b}. There exists a language L ⊆ A+ (resp. L ⊆ Aω) and
a ﬁnite automaton with n states accepting (resp. Büchi-accepting) L, such that each
semigroup recognizing (resp. weakly recognizing) L has at least 2(n−1)2/4 elements.

7

Proof. We ﬁrst analyze the case of ﬁnite words. Let m > 1, M = {1, . . . , m} and
n = 2m + 1. Let A be the automaton depicted below and let L = LNFA(A).

a

b

1

b

2

b

b

b

a

a

a

a

a

· · ·

m

b

m+1 m+2

· · ·

b

n

a

a

For 1 6 i, j 6 m we ﬁrst deﬁne pi,j = (m + j − i)m − i and qi,j = (i − j + 1)m + i.
Furthermore, we set ui,j = api,j baqi,j . We claim that for each i, j there exists a path
from state k to ℓ labeled by ui,j if and only if (k, ℓ) = (i, j + m) or k = ℓ.

The two a-cycles have length m and m + 1, respectively. Since for each pair (i, j)
we have pi,j + qi,j = m(m + 1) and since one can always stay in the same state when
reading the letter b, there clearly exists a path from each state to itself labeled by
ui,j. Now, ﬁx some (i, j) and let (k, ℓ) = (i, j + m). We have i + pi,j = (m + j − i)m
which means that, when starting in state i, one can reach state m by reading api,j.
Being in state m, one of the b-transitions leads to state m + 1. From there on, we
make a single step backwards whenever reading the factor am. Thus, by reading
the word aqi,j, we perform i − (i − j + 1) = j − 1 forward steps in total, ﬁnally
reaching state m + 1 + j − 1 = m + j = ℓ. The converse direction of our claim follows
immediately, since the automaton is deterministic when restricted to a-transitions
and since one can only reach states ℓ > m by using the transition (m, b, m + 1).

For X ⊆ M × M, we now deﬁne uX as the concatenation of all ui,j with (i, j) ∈ X,
where the factors are ordered according to their indices (i, j). By the above argument,
it is easy to see that there is a path from state i to j + m labeled by uX if and only if
(i, j) ∈ X. Since there are 2m2 = 2(n−1)2/4 subsets of the Cartesian product M × M,
it remains to show that for diﬀerent subsets X, Y ⊆ M × M, we have uX 6≡L vY . To
this end, assume without loss of generality that (i, j) ∈ X \Y . Then ai−1uX an−j ∈ L
but ai−1uY an−j 6∈ L, as desired.

For the Büchi case note that for all i ∈ Q, we have (i, b, n) ∈ δ if and only if i = n.
Therefore, by Proposition 4 and the arguments above, the smallest semigroup weakly
recognizing LBA(A) has at least 2(n−1)2/4 elements.
(cid:3)
The construction above does not reach the 2n2 bound obtained when using a larger

alphabet. However, this is not surprising, given the following result.

Proposition 8 Let m ∈ N be a ﬁxed integer and let A be an alphabet of size m.
Then there exists an integer nm > 1 such that for each ﬁnite automaton A over A
with n > nm states, the language LNFA(A) ⊆ A∗ (resp. LBA(A) ⊆ Aω) is recog-
nized (resp. weakly recognized) by a morphism onto a semigroup with less than 2n2
elements.

8

We do not give a full proof of the proposition here but the claim essentially follows
from a careful analysis of the subsemigroup of the transition semigroup generated by
the transitions corresponding to the letters in A. Applying Devadze’s Theorem [4, 8]
to the matrix representation of this subsemigroup shows that it is proper, i.e., smaller
than the full transition semigroup itself.

5 From Weakly Recognizing Morphisms to Automata

The well-known construction to convert weakly recognizing morphisms to ﬁnite au-
tomata with a Büchi-acceptance condition has quadratic blow-up [10]. We show
that this is optimal up to a constant factor.

i=1 (baibA∗)ω. Then there
Theorem 9 Let A = {a, b}, let n > 3, and let L = Sn
exists a semigroup with 4n + 3 elements that weakly recognizes L and every ﬁnite
automaton Büchi-accepting L has at least n(n + 1)/2 states.

Proof. We ﬁrst deﬁne a semigroup S = (cid:8)ai, aib, bai, baib | 1 6 i 6 n(cid:9) ∪ {b, bb, 0} by
the multiplication 0 · s = s · 0 = 0 for all s ∈ S and

bℓaibr · bmajbs =

bb
bℓai+jbs
0
bℓaib




if i = j = 0
if r = m = 0 and 1 6 i + j 6 n
if r = m = 0 and i + j > n
otherwise

where ℓ, m, r, s ∈ {0, 1} and i, j ∈ {0, . . . , n}. The morphism h: A+ → S deﬁned
by h(a) = a and h(b) = b now weakly recognizes L since L is the union of all sets
[baib][baib]ω with 1 6 i 6 n.

Now assume that we are given a ﬁnite automaton A = (Q, A, δ, I, F ) such that
LBA(A) = L. For each i ∈ {1, . . . , n}, we consider the word αi = (baib)ω and let ri be
an accepting run of αi. We ﬁrst show that for i 6= j, we have inf(ri)∩ Q∩inf(rj) = ∅,
and then prove that |inf(ri) ∩ Q| > i for 1 6 i 6 n. Together, this yields

|Q| >

n

X

i=1

|inf(ri) ∩ Q| >

n

X

i=1

i = n(n + 1)/2.

Let i, j ∈ {1, . . . , n} such that i 6= j. We assume for the sake of contradiction that
there exists a state q ∈ Q with q ∈ inf(ri) and q ∈ inf(rj). Let u ∈ baibA∗ be a
preﬁx of αi such that ri visits q after reading u. Let v ∈ A∗ such that there exists a
ﬁnite run labeled by v, which starts and ends in q, visits at least one ﬁnal state and
such that vω = (bajb)ω or vω = akb(bajb)ω for some k ∈ {0, . . . , j}. Obviously, we
then have uvω ∈ L(A) but uvω 6∈ L, a contradiction.

9

For the second part of the proof, assume again for the sake of contradiction that
|inf(ri) ∩ Q| < i for some accepting run ri of αi. Then inside each baib-factor, a
state is visited twice and we can apply the standard pumping argument to show
that a word in Aω \ L(A) has an accepting run as well.
(cid:3)

6 Complementation

To date, the best construction for complementing weakly recognizing morphisms
is the so-called strong expansion [10]. Given a morphism h: A+ → S, the strong
expansion of h is a morphism g : A+ → T which strongly recognizes all languages
weakly recognized by h. If S has n elements, the size of T is 2n2. The purpose of
this section is to give a lower bound for complementation. At the same time, the
established bound also serves as a lower bound for the conversion of weak recogni-
tion to strong recognition since each morphism strongly recognizing a language also
strongly recognizes its complement.

Complementing weakly recognizing morphisms is easy in the case of J -trivial
semigroups since each language weakly recognized by a J -trivial semigroup S is
already strongly recognized by S, i.e., there is no need the compute the strong
expansion if the J -classes of the input are trivial already. In order to establish a
lower bound, we thus consider the class of simple semigroups which is dual to J -
trivial semigroups in the sense that simple semigroups consist of a single J -class
only.

Proposition 10 Let n > 1 be an arbitrary integer and let A = {a1, a2, . . . , an}.
i=1 (aiA∗)ω is weakly recognized by a simple semigroup with n
The language L = Sn
elements and every semigroup weakly recognizing Aω \ L has at least n2n−1 elements.

Proof. The alphabet A can be extended to a semigroup by deﬁning an associative
operation a ◦ b = a for all a, b ∈ A. Now, the morphism h: A+ → (A, ◦) given by
h(a) = a for all a ∈ A weakly recognizes L. The semigroup (A, ◦) contains |A| = n
elements and it is simple because we have a L b for all a, b ∈ A.

Now, let h: A+ → S be a morphism weakly recognizing Aω \ L. For a letter b ∈ A
and a subset B ⊆ A \ {b}, let ub,B be the uniquely deﬁned word bai1ai2 · · · aiℓ such
that i1 < i2 < · · · < iℓ and {ai1, ai2, . . . , aiℓ} = B. Consider two letters b, c ∈ A and
subsets B ∈ A \ {b}, C ⊆ A \ {c}. If b 6= c, we have ub,Bcω 6∈ L and uc,Ccω ∈ L. If
B 6= C we may assume, without loss of generality, that there exists a letter a ∈ B \C.
ω 6∈ L but a(ub,Buc,C)ω ∈ L and a(uc,Cub,B)ω ∈ L. By
In this case, we have auc,C
Theorem 3, this suﬃces to conclude that h(ub,B) 6= h(uc,C) whenever b 6= c or B 6= C
and therefore, S contains at least |A| 2|A|−1 = n2n−1 elements.
(cid:3)

Rather surprisingly, the established lower bound turns out to be asymptotically
tight in the case of simple semigroups. More generally, for simple semigroups, the

10

construction of the strong expansion can be improved such that only n2n elements
are needed. This will be proved in the remainder of this section.

We start with a morphism h: A+ → S onto a simple semigroup with n = |S|
elements and a set of linked pairs P . Since S is simple, there exists a surjective
mapping γ : S → G onto a ﬁnite group G that becomes a bijection when restricted
to any H-class. Therefore, the mapping π : (S/R) × G × (S/L) → S with π−1(s) =
(Rs, γ(s), Ls) for all s ∈ S is well-deﬁned and bijective. For s, t ∈ S and p ∈ G, we
write Rt · s to denote the element π(Rt, γ(s), Ls) and p · s to denote π(Rs, pγ(s), Ls).

Let T = n(s, X) | X ⊆ 2So and let g : A+ → T be deﬁned by

g(u) = (h(u),nRh(q) · h(p) | p, q ∈ A+, pq = uo)

for all u ∈ A+. Under the following associative multiplication on T , the mapping g
becomes a morphism:

(s, X) · (t, Y ) = (st, X ∪ {Rt · s} ∪ γ(s) · Y ).

The following three technical lemmas capture important properties of the con-

struction and are needed for the main proof.

Lemma 11 Let s, t ∈ S. Then Rt · s is the unique element x such that x R t,
x L s and γ(x) = γ(s) or, equivalently, the unique element x such that x H ts and
γ(x) = γ(s).

Proof. Let x = Rt · s. We have (Rx, γ(x), Lx) = π−1(x) = π−1(Rt · s) =
(Rt, γ(s), Ls). Together with the fact that π is bijective, this establishes the ﬁrst
claim. For the second claim, note that since S is simple, x R t is equivalent to
x R ts and x L s is equivalent to x L ts.
(cid:3)

Lemma 12 Let u ∈ A+ with g(u) = (s, X) and let x ∈ S. Then x ∈ X ∪ {s} if
and only if there exists a factorization u = pq with p ∈ A+ and q ∈ A∗ such that
x H h(qp) and γ(x) = γ(h(p)).

Proof. Obviously, we have x = s if and only if there exists a factorization u = pq
with p = u and q = ε satisfying the properties described above. Thus, it suﬃces to
consider factorizations where p, q ∈ A+. By Lemma 11, such a factorization exists if
and only if x = Rh(q) · h(p) which is, in turn, equivalent to x ∈ X by the deﬁnition
of g.
(cid:3)

Lemma 13 Let (t, f) be a linked pair of S, let (cid:0)(s, X), (e, Y )(cid:1) be a linked pair of
T and let α ∈ [(s, X)]g[(e, Y )]ω
g . Then α ∈ [t]h[f]ω
h if and only if tq = s, pq = e,
qp = f , Rq · t ∈ X and Rq · p ∈ Y for some p, q ∈ S.

11

Proof. For the direction from left to right, let α = uv1v′1v2v′2 · · · such that g(u) =
(s, X), g(viv′i) = (e, Y ), h(uv1) = t and h(v′ivi+1) = f for all i > 1. Furthermore,
we assume without loss of generality that vi, v′i 6= ε for all i > 1 and that h(v1) =
h(v2). We set p = h(v1) = h(v2) and q = h(v′1). Now, tq = h(uv1v′1) = se = s,
pq = h(v1v′1) = e and qp = h(v′1v2) = f. Moreover, by the deﬁnition of g, we have
Rq · t = Rh(v′

1) · h(uv1) ∈ X and Rq · p = Rh(v′

1) · h(v1) ∈ Y .

For the converse implication, note that by Lemma 12, there exists a factorization
α = uv1v′1v2v′2 · · · such that h(u) = s, h(viv′i) = e, Rh(v′
1) · h(uv1) = Rq · t and
i) · h(vi) = Rq · p for all i > 1. Since S is simple, h(vi) R h(viv′i) = e R p and
Rh(v′
h(vi) L (Rh(v′
i) ·
h(vi)) = γ(Rq ·p) = γ(p). Together, this yields h(vi) = p by Lemma 11. Similarly, we
i) · h(vi)) = (Rq · p) R q and thus, p · h(v′i) = h(viv′i) = pq implies
have h(v′i) R (Rh(v′
h(v′i) = q for all i > 1 by Lemma 1. This shows that h(uv1) = sp = tqp = tf = t
and h(v′ivi+1) = qp = f. We conclude that α ∈ [t][f]ω.
(cid:3)

i) · h(vi)) = (Rq · p) L p for all i > 1. Furthermore, γ(h(vi)) = γ(Rh(v′

Theorem 14 Let h: A+ → S be a morphism onto a simple semigroup of size
n = |S| that weakly recognizes a language L ⊆ Aω. Then there exists a morphism
g : A+ → T to a semigroup of size |T | = n2n that strongly recognizes L.

Proof. The construction we use is the one described in the introduction of this
section. Consider a linked pair ((s, X), (e, Y )) of T as well as two inﬁnite words
α, β ∈ [(s, X)][(e, Y )]ω.
If α ∈ L, there exists a linked pair (t, f) of S such that
α ∈ [t][f]ω ⊆ L. Lemma 13 immediately yields β ∈ [t][f]ω ⊆ L, thereby showing
that g strongly recognizes L.
(cid:3)

7 Discussion and Open Problems

We presented lower bound techniques and gave tight bounds for the conversion
between ﬁnite automata and weakly recognizing morphisms. One can use techniques
similar to those described in Section 4 to obtain a 3n2 lower bound for the conversion
of ﬁnite automata with transition-based Büchi acceptance to strongly recognizing
morphisms. However, with the usual state-based Büchi acceptance criterion, the
analysis becomes much more involved and it is not clear whether the 3n2 upper
bound can be reached. Analogously, there is no straightforward adaptation of the
conversion of weakly recognizing morphisms into Büchi automata in Section 5 to
strongly recognizing morphisms. It would be interesting to see whether the quadratic
lower bound also holds in this setting.

Another open problem is to close the remaining gaps between the upper and the
lower bounds. This is particularly true for the complexity of complementation and
the conversion of weakly recognizing morphisms to strong recognition. We showed

12

that there is an exponential lower bound and gave an asymptotically optimal con-
struction for simple semigroups which was a ﬁrst candidate for semigroups that are
hard to complement. It is easy to adapt this construction to families of semigroups
where the size of each J -class is bounded by a constant. However, for the general
case, the gap between n2n−1 and 2n2 remains.

Beyond that, another direction for future research is to investigate whether any
of the bounds can be improved by considering to size of the accepting set, i.e., the
number of linked pairs used to describe a language.

References

[1] A. Arnold. A syntactic congruence for rational ω-languages. Theoretical Com-

puter Science, 39:333–335, 1985.

[2] J. R. Büchi. Weak second-order arithmetic and ﬁnite automata. Zeitschrift für

mathematische Logik und Grundlagen der Mathematik, 6:66–92, 1960.

[3] M. Chrobak. Finite automata and unary languages. Theoretical Computer

Science, 47(2):149–158, Nov. 1986.

[4] H. M. Devadze. Generating sets of the semigroup of all binary relations in a

ﬁnite set. Doklady Akademii Nauk BSSR, 12:765–768, 1968.

[5] L. Fleischer and M. Kuﬂeitner. Eﬃcient Algorithms for Morphisms over Omega-
Regular Languages. In FSTTCS 2015, Proceedings, volume 45 of LIPIcs, pages
112–124. Dagstuhl Publishing, 2015.

[6] M. Holzer and B. König. On deterministic ﬁnite automata and syntactic monoid

size. Theoretical Computer Science, 327(3):319–347, Nov. 2004.

[7] K. H. Kim and F. W. Roush. Two-generator semigroups of binary relations.

Journal of Mathematical Psychology, 17(3):236–246, 1978.

[8] J. Konieczny. A proof of Devadze’s theorem on generators of the semigroup of

boolean matrices. Semigroup Forum, 83(2):281–288, 2011.

[9] J. Pécuchet. Variétés de semis groupes et mots inﬁnis. In STACS 1986, Pro-

ceedings, pages 180–191, 1986.

[10] D. Perrin and J.-É. Pin. Inﬁnite words, volume 141 of Pure and Applied Math-

ematics. Elsevier, 2004.

[11] J.-É. Pin. Varieties of Formal Languages. North Oxford Academic, 1986.

[12] W. J. Sakoda and M. Sipser. Nondeterminism and the size of two way ﬁnite

automata. In STOC 1978, Proceedings, pages 275–286. ACM Press, 1978.

13

[13] W. Thomas. Automata on inﬁnite objects. In Handbook of Theoretical Com-

puter Science, chapter 4, pages 133–191. Elsevier, 1990.

[14] Q. Yan. Lower bounds for complementation of omega-automata via the full

automata technique. Logical Methods in Computer Science, 4(1), 2008.

14

